//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_xCenter : class {
  var xCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_yCenter : class {
  var yCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_width : class {
  var width : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_height : class {
  var height : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_holeDiameter : class {
  var holeDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padShape : class {
  var padShape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padStyle : class {
  var padStyle : PadStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padNumber : class {
  var padNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_xCenterUnit : class {
  var xCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_yCenterUnit : class {
  var yCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_widthUnit : class {
  var widthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_heightUnit : class {
  var heightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_holeDiameterUnit : class {
  var holeDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_annularRingUnit : class {
  var annularRingUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padName : class {
  var padName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padIsTraversing : class {
  var padIsTraversing : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_annularRing : class {
  var annularRing : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_zoneName : class {
  var zoneName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_noZone : class {
  var noZone : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_zoneAllowsManualRenumbering : class {
  var zoneAllowsManualRenumbering : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_slavePadCount : class {
  var slavePadCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padNumberDisplay : class {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackagePad : PackageObject,
         PackagePad_xCenter,
         PackagePad_yCenter,
         PackagePad_width,
         PackagePad_height,
         PackagePad_holeDiameter,
         PackagePad_padShape,
         PackagePad_padStyle,
         PackagePad_padNumber,
         PackagePad_xCenterUnit,
         PackagePad_yCenterUnit,
         PackagePad_widthUnit,
         PackagePad_heightUnit,
         PackagePad_holeDiameterUnit,
         PackagePad_annularRingUnit,
         PackagePad_selectionDisplay,
         PackagePad_padName,
         PackagePad_issues,
         PackagePad_padIsTraversing,
         PackagePad_annularRing,
         PackagePad_zoneName,
         PackagePad_noZone,
         PackagePad_zoneAllowsManualRenumbering,
         PackagePad_slavePadCount,
         PackagePad_objectDisplay,
         PackagePad_padNumberDisplay {

  //····················································································································
  //   Atomic property: xCenter
  //····················································································································

  let xCenter_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var xCenter : Int {
    get { return self.xCenter_property.propval }
    set { self.xCenter_property.setProp (newValue) }
  }

  //····················································································································

  var xCenter_property_selection : EBSelection <Int> { return self.xCenter_property.prop }

  //····················································································································
  //   Atomic property: yCenter
  //····················································································································

  let yCenter_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var yCenter : Int {
    get { return self.yCenter_property.propval }
    set { self.yCenter_property.setProp (newValue) }
  }

  //····················································································································

  var yCenter_property_selection : EBSelection <Int> { return self.yCenter_property.prop }

  //····················································································································
  //   Atomic property: width
  //····················································································································

  let width_property = EBStoredProperty_Int (defaultValue: 114300)

  //····················································································································

  var width : Int {
    get { return self.width_property.propval }
    set { self.width_property.setProp (newValue) }
  }

  //····················································································································

  var width_property_selection : EBSelection <Int> { return self.width_property.prop }

  //····················································································································
  //   Atomic property: height
  //····················································································································

  let height_property = EBStoredProperty_Int (defaultValue: 228600)

  //····················································································································

  var height : Int {
    get { return self.height_property.propval }
    set { self.height_property.setProp (newValue) }
  }

  //····················································································································

  var height_property_selection : EBSelection <Int> { return self.height_property.prop }

  //····················································································································
  //   Atomic property: holeDiameter
  //····················································································································

  let holeDiameter_property = EBStoredProperty_Int (defaultValue: 57150)

  //····················································································································

  var holeDiameter : Int {
    get { return self.holeDiameter_property.propval }
    set { self.holeDiameter_property.setProp (newValue) }
  }

  //····················································································································

  var holeDiameter_property_selection : EBSelection <Int> { return self.holeDiameter_property.prop }

  //····················································································································
  //   Atomic property: padShape
  //····················································································································

  let padShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo)

  //····················································································································

  var padShape : PadShape {
    get { return self.padShape_property.propval }
    set { self.padShape_property.setProp (newValue) }
  }

  //····················································································································

  var padShape_property_selection : EBSelection <PadShape> { return self.padShape_property.prop }

  //····················································································································
  //   Atomic property: padStyle
  //····················································································································

  let padStyle_property = EBStoredProperty_PadStyle (defaultValue: PadStyle.traversing)

  //····················································································································

  var padStyle : PadStyle {
    get { return self.padStyle_property.propval }
    set { self.padStyle_property.setProp (newValue) }
  }

  //····················································································································

  var padStyle_property_selection : EBSelection <PadStyle> { return self.padStyle_property.prop }

  //····················································································································
  //   Atomic property: padNumber
  //····················································································································

  let padNumber_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var padNumber : Int {
    get { return self.padNumber_property.propval }
    set { self.padNumber_property.setProp (newValue) }
  }

  //····················································································································

  var padNumber_property_selection : EBSelection <Int> { return self.padNumber_property.prop }

  //····················································································································
  //   Atomic property: xCenterUnit
  //····················································································································

  let xCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var xCenterUnit : Int {
    get { return self.xCenterUnit_property.propval }
    set { self.xCenterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var xCenterUnit_property_selection : EBSelection <Int> { return self.xCenterUnit_property.prop }

  //····················································································································
  //   Atomic property: yCenterUnit
  //····················································································································

  let yCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var yCenterUnit : Int {
    get { return self.yCenterUnit_property.propval }
    set { self.yCenterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var yCenterUnit_property_selection : EBSelection <Int> { return self.yCenterUnit_property.prop }

  //····················································································································
  //   Atomic property: widthUnit
  //····················································································································

  let widthUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var widthUnit : Int {
    get { return self.widthUnit_property.propval }
    set { self.widthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var widthUnit_property_selection : EBSelection <Int> { return self.widthUnit_property.prop }

  //····················································································································
  //   Atomic property: heightUnit
  //····················································································································

  let heightUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var heightUnit : Int {
    get { return self.heightUnit_property.propval }
    set { self.heightUnit_property.setProp (newValue) }
  }

  //····················································································································

  var heightUnit_property_selection : EBSelection <Int> { return self.heightUnit_property.prop }

  //····················································································································
  //   Atomic property: holeDiameterUnit
  //····················································································································

  let holeDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var holeDiameterUnit : Int {
    get { return self.holeDiameterUnit_property.propval }
    set { self.holeDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var holeDiameterUnit_property_selection : EBSelection <Int> { return self.holeDiameterUnit_property.prop }

  //····················································································································
  //   Atomic property: annularRingUnit
  //····················································································································

  let annularRingUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var annularRingUnit : Int {
    get { return self.annularRingUnit_property.propval }
    set { self.annularRingUnit_property.setProp (newValue) }
  }

  //····················································································································

  var annularRingUnit_property_selection : EBSelection <Int> { return self.annularRingUnit_property.prop }

  //····················································································································
  //   To many property: slaves
  //····················································································································

  let slaves_property = StoredArrayOf_PackageSlavePad ()

  //····················································································································

  var slaves_property_selection : EBSelection < [PackageSlavePad] > {
    return self.slaves_property.prop
  }

  //····················································································································

  var slaves : [PackageSlavePad] {
    get { return self.slaves_property.propval }
    set { self.slaves_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: zone
  //····················································································································

   let zone_property = StoredObject_PackageZone ()

  //····················································································································

  var zone_property_selection : EBSelection <PackageZone?> {
    return .single (self.zone_property.propval)
  }

  //····················································································································

  var zone : PackageZone? {
    get { return self.zone_property.propval }
    set { self.zone_property.setProp (newValue) }
  }

  //····················································································································

    var zone_none : StoredObject_PackageZone { return self.zone_property }

  //····················································································································

  var zone_none_selection : EBSelection <Bool> {
    return .single (self.zone_property.propval == nil)
  }

  //····················································································································
  //   Transient property: padName
  //····················································································································

  let padName_property = EBTransientProperty_String ()

  //····················································································································

  var padName_property_selection : EBSelection <String> {
    return self.padName_property.prop
  }

  //····················································································································

  var padName : String? {
    switch self.padName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padIsTraversing
  //····················································································································

  let padIsTraversing_property = EBTransientProperty_Bool ()

  //····················································································································

  var padIsTraversing_property_selection : EBSelection <Bool> {
    return self.padIsTraversing_property.prop
  }

  //····················································································································

  var padIsTraversing : Bool? {
    switch self.padIsTraversing_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: annularRing
  //····················································································································

  let annularRing_property = EBTransientProperty_Int ()

  //····················································································································

  var annularRing_property_selection : EBSelection <Int> {
    return self.annularRing_property.prop
  }

  //····················································································································

  var annularRing : Int? {
    switch self.annularRing_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: zoneName
  //····················································································································

  let zoneName_property = EBTransientProperty_String ()

  //····················································································································

  var zoneName_property_selection : EBSelection <String> {
    return self.zoneName_property.prop
  }

  //····················································································································

  var zoneName : String? {
    switch self.zoneName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: noZone
  //····················································································································

  let noZone_property = EBTransientProperty_Bool ()

  //····················································································································

  var noZone_property_selection : EBSelection <Bool> {
    return self.noZone_property.prop
  }

  //····················································································································

  var noZone : Bool? {
    switch self.noZone_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: zoneAllowsManualRenumbering
  //····················································································································

  let zoneAllowsManualRenumbering_property = EBTransientProperty_Bool ()

  //····················································································································

  var zoneAllowsManualRenumbering_property_selection : EBSelection <Bool> {
    return self.zoneAllowsManualRenumbering_property.prop
  }

  //····················································································································

  var zoneAllowsManualRenumbering : Bool? {
    switch self.zoneAllowsManualRenumbering_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: slavePadCount
  //····················································································································

  let slavePadCount_property = EBTransientProperty_Int ()

  //····················································································································

  var slavePadCount_property_selection : EBSelection <Int> {
    return self.slavePadCount_property.prop
  }

  //····················································································································

  var slavePadCount : Int? {
    switch self.slavePadCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  let padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var padNumberDisplay_property_selection : EBSelection <EBShape> {
    return self.padNumberDisplay_property.prop
  }

  //····················································································································

  var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: xCenter
    self.xCenter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yCenter
    self.yCenter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: width
    self.width_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: height
    self.height_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padShape
    self.padShape_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padStyle
    self.padStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padNumber
    self.padNumber_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: widthUnit
    self.widthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: heightUnit
    self.heightUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: holeDiameterUnit
    self.holeDiameterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.ebUndoManager = self.ebUndoManager
  //--- To many property: slaves (has opposite relationship)
    self.slaves_property.ebUndoManager = self.ebUndoManager
    self.slaves_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.master_property.setProp (me) } },
      resetter: { inObject in inObject.master_property.setProp (nil) }
    )
  //--- To one property: zone
      self.zone_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.padShape_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.padShape_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PackagePad_selectionDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.selectionDisplay_property)
    self.yCenter_property.addEBObserver (self.selectionDisplay_property)
    self.width_property.addEBObserver (self.selectionDisplay_property)
    self.height_property.addEBObserver (self.selectionDisplay_property)
    self.padShape_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: padName
    self.padName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.padNumber_property_selection.kind ()
        kind &= unwSelf.zone_property.zoneName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.padNumber_property_selection, unwSelf.zone_property.zoneName_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PackagePad_padName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padNumber_property.addEBObserver (self.padName_property)
    self.zone_property.addEBObserverOf_zoneName (self.padName_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeDiameter_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeDiameter_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PackagePad_issues (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.issues_property)
    self.yCenter_property.addEBObserver (self.issues_property)
    self.width_property.addEBObserver (self.issues_property)
    self.height_property.addEBObserver (self.issues_property)
    self.holeDiameter_property.addEBObserver (self.issues_property)
  //--- Atomic property: padIsTraversing
    self.padIsTraversing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.padStyle_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.padStyle_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_padIsTraversing (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padStyle_property.addEBObserver (self.padIsTraversing_property)
  //--- Atomic property: annularRing
    self.annularRing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeDiameter_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeDiameter_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_PackagePad_annularRing (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.width_property.addEBObserver (self.annularRing_property)
    self.height_property.addEBObserver (self.annularRing_property)
    self.holeDiameter_property.addEBObserver (self.annularRing_property)
  //--- Atomic property: zoneName
    self.zoneName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.zone_property.zoneName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.zone_property.zoneName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_zoneName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.zone_property.addEBObserverOf_zoneName (self.zoneName_property)
  //--- Atomic property: noZone
    self.noZone_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.zone_none_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.zone_none_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_noZone (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.zone_property.addEBObserver (self.noZone_property)
  //--- Atomic property: zoneAllowsManualRenumbering
    self.zoneAllowsManualRenumbering_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.zone_property.zoneNumbering_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.zone_property.zoneNumbering_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_zoneAllowsManualRenumbering (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.zone_property.addEBObserverOf_zoneNumbering (self.zoneAllowsManualRenumbering_property)
  //--- Atomic property: slavePadCount
    self.slavePadCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.slaves_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.slaves_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_slavePadCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.slaves_property.addEBObserver (self.slavePadCount_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeDiameter_property_selection.kind ()
        kind &= unwSelf.padShape_property_selection.kind ()
        kind &= unwSelf.padStyle_property_selection.kind ()
        kind &= g_Preferences!.frontSidePadColor_property_selection.kind ()
        kind &= g_Preferences!.displayPackageFrontSidePads_property_selection.kind ()
        kind &= g_Preferences!.backSidePadColor_property_selection.kind ()
        kind &= g_Preferences!.displayPackageBackSidePads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeDiameter_property_selection, unwSelf.padShape_property_selection, unwSelf.padStyle_property_selection, g_Preferences!.frontSidePadColor_property_selection, g_Preferences!.displayPackageFrontSidePads_property_selection, g_Preferences!.backSidePadColor_property_selection, g_Preferences!.displayPackageBackSidePads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10)) :
            return .single (transient_PackagePad_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.objectDisplay_property)
    self.yCenter_property.addEBObserver (self.objectDisplay_property)
    self.width_property.addEBObserver (self.objectDisplay_property)
    self.height_property.addEBObserver (self.objectDisplay_property)
    self.holeDiameter_property.addEBObserver (self.objectDisplay_property)
    self.padShape_property.addEBObserver (self.objectDisplay_property)
    self.padStyle_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageFrontSidePads_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageBackSidePads_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= g_Preferences!.padNumberFont_property_selection.kind ()
        kind &= g_Preferences!.padNumberColor_property_selection.kind ()
        kind &= unwSelf.padName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, g_Preferences!.padNumberFont_property_selection, g_Preferences!.padNumberColor_property_selection, unwSelf.padName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PackagePad_padNumberDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.addEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberFont_property.addEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberColor_property.addEBObserver (self.padNumberDisplay_property)
    self.padName_property.addEBObserver (self.padNumberDisplay_property)
  //--- Install undoers and opposite setter for relationships
    self.slaves_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.master_property.setProp (me) } },
      resetter: { inObject in inObject.master_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.annularRingUnit_property.setSignatureObserver (observer: self)
    self.height_property.setSignatureObserver (observer: self)
    self.heightUnit_property.setSignatureObserver (observer: self)
    self.holeDiameter_property.setSignatureObserver (observer: self)
    self.holeDiameterUnit_property.setSignatureObserver (observer: self)
    self.padNumber_property.setSignatureObserver (observer: self)
    self.padShape_property.setSignatureObserver (observer: self)
    self.padStyle_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.widthUnit_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.xCenterUnit_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
    self.yCenterUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.xCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.yCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.width_property.removeEBObserver (self.selectionDisplay_property)
    self.height_property.removeEBObserver (self.selectionDisplay_property)
    self.padShape_property.removeEBObserver (self.selectionDisplay_property)
    self.padNumber_property.removeEBObserver (self.padName_property)
    self.zone_property.removeEBObserverOf_zoneName (self.padName_property)
    self.xCenter_property.removeEBObserver (self.issues_property)
    self.yCenter_property.removeEBObserver (self.issues_property)
    self.width_property.removeEBObserver (self.issues_property)
    self.height_property.removeEBObserver (self.issues_property)
    self.holeDiameter_property.removeEBObserver (self.issues_property)
    self.padStyle_property.removeEBObserver (self.padIsTraversing_property)
    self.width_property.removeEBObserver (self.annularRing_property)
    self.height_property.removeEBObserver (self.annularRing_property)
    self.holeDiameter_property.removeEBObserver (self.annularRing_property)
    self.zone_property.removeEBObserverOf_zoneName (self.zoneName_property)
    self.zone_property.removeEBObserver (self.noZone_property)
    self.zone_property.removeEBObserverOf_zoneNumbering (self.zoneAllowsManualRenumbering_property)
    self.slaves_property.removeEBObserver (self.slavePadCount_property)
    self.xCenter_property.removeEBObserver (self.objectDisplay_property)
    self.yCenter_property.removeEBObserver (self.objectDisplay_property)
    self.width_property.removeEBObserver (self.objectDisplay_property)
    self.height_property.removeEBObserver (self.objectDisplay_property)
    self.holeDiameter_property.removeEBObserver (self.objectDisplay_property)
    self.padShape_property.removeEBObserver (self.objectDisplay_property)
    self.padStyle_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageFrontSidePads_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageBackSidePads_property.removeEBObserver (self.objectDisplay_property)
    self.xCenter_property.removeEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.removeEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberFont_property.removeEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberColor_property.removeEBObserver (self.padNumberDisplay_property)
    self.padName_property.removeEBObserver (self.padNumberDisplay_property)
 //   self.slaves_property.setOppositeRelationship = nil
  //--- Unregister properties for handling signature
    self.annularRingUnit_property.setSignatureObserver (observer: nil)
    self.height_property.setSignatureObserver (observer: nil)
    self.heightUnit_property.setSignatureObserver (observer: nil)
    self.holeDiameter_property.setSignatureObserver (observer: nil)
    self.holeDiameterUnit_property.setSignatureObserver (observer: nil)
    self.padNumber_property.setSignatureObserver (observer: nil)
    self.padShape_property.setSignatureObserver (observer: nil)
    self.padStyle_property.setSignatureObserver (observer: nil)
    self.width_property.setSignatureObserver (observer: nil)
    self.widthUnit_property.setSignatureObserver (observer: nil)
    self.xCenter_property.setSignatureObserver (observer: nil)
    self.xCenterUnit_property.setSignatureObserver (observer: nil)
    self.yCenter_property.setSignatureObserver (observer: nil)
    self.yCenterUnit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "xCenter",
      idx:self.xCenter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenter_property.mObserverExplorer,
      valueExplorer:&self.xCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenter",
      idx:self.yCenter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenter_property.mObserverExplorer,
      valueExplorer:&self.yCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "width",
      idx:self.width_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.width_property.mObserverExplorer,
      valueExplorer:&self.width_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "height",
      idx:self.height_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.height_property.mObserverExplorer,
      valueExplorer:&self.height_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeDiameter",
      idx:self.holeDiameter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeDiameter_property.mObserverExplorer,
      valueExplorer:&self.holeDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padShape",
      idx:self.padShape_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padShape_property.mObserverExplorer,
      valueExplorer:&self.padShape_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padStyle",
      idx:self.padStyle_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padStyle_property.mObserverExplorer,
      valueExplorer:&self.padStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumber",
      idx:self.padNumber_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padNumber_property.mObserverExplorer,
      valueExplorer:&self.padNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenterUnit",
      idx:self.xCenterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenterUnit_property.mObserverExplorer,
      valueExplorer:&self.xCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenterUnit",
      idx:self.yCenterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenterUnit_property.mObserverExplorer,
      valueExplorer:&self.yCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "widthUnit",
      idx:self.widthUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.widthUnit_property.mObserverExplorer,
      valueExplorer:&self.widthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "heightUnit",
      idx:self.heightUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.heightUnit_property.mObserverExplorer,
      valueExplorer:&self.heightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeDiameterUnit",
      idx:self.holeDiameterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeDiameterUnit_property.mObserverExplorer,
      valueExplorer:&self.holeDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "annularRingUnit",
      idx:self.annularRingUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.annularRingUnit_property.mObserverExplorer,
      valueExplorer:&self.annularRingUnit_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padName",
      idx:self.padName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padName_property.mObserverExplorer,
      valueExplorer:&self.padName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padIsTraversing",
      idx:self.padIsTraversing_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padIsTraversing_property.mObserverExplorer,
      valueExplorer:&self.padIsTraversing_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "annularRing",
      idx:self.annularRing_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.annularRing_property.mObserverExplorer,
      valueExplorer:&self.annularRing_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoneName",
      idx:self.zoneName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoneName_property.mObserverExplorer,
      valueExplorer:&self.zoneName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "noZone",
      idx:self.noZone_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.noZone_property.mObserverExplorer,
      valueExplorer:&self.noZone_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoneAllowsManualRenumbering",
      idx:self.zoneAllowsManualRenumbering_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoneAllowsManualRenumbering_property.mObserverExplorer,
      valueExplorer:&self.zoneAllowsManualRenumbering_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "slavePadCount",
      idx:self.slavePadCount_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.slavePadCount_property.mObserverExplorer,
      valueExplorer:&self.slavePadCount_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumberDisplay",
      idx:self.padNumberDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padNumberDisplay_property.mObserverExplorer,
      valueExplorer:&self.padNumberDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "slaves",
      idx:slaves_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&slaves_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "zone",
      idx:self.zone_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.zone_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: xCenter
    self.xCenter_property.mObserverExplorer = nil
    self.xCenter_property.mValueExplorer = nil
  //--- Atomic property: yCenter
    self.yCenter_property.mObserverExplorer = nil
    self.yCenter_property.mValueExplorer = nil
  //--- Atomic property: width
    self.width_property.mObserverExplorer = nil
    self.width_property.mValueExplorer = nil
  //--- Atomic property: height
    self.height_property.mObserverExplorer = nil
    self.height_property.mValueExplorer = nil
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.mObserverExplorer = nil
    self.holeDiameter_property.mValueExplorer = nil
  //--- Atomic property: padShape
    self.padShape_property.mObserverExplorer = nil
    self.padShape_property.mValueExplorer = nil
  //--- Atomic property: padStyle
    self.padStyle_property.mObserverExplorer = nil
    self.padStyle_property.mValueExplorer = nil
  //--- Atomic property: padNumber
    self.padNumber_property.mObserverExplorer = nil
    self.padNumber_property.mValueExplorer = nil
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.mObserverExplorer = nil
    self.xCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.mObserverExplorer = nil
    self.yCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: widthUnit
    self.widthUnit_property.mObserverExplorer = nil
    self.widthUnit_property.mValueExplorer = nil
  //--- Atomic property: heightUnit
    self.heightUnit_property.mObserverExplorer = nil
    self.heightUnit_property.mValueExplorer = nil
  //--- Atomic property: holeDiameterUnit
    self.holeDiameterUnit_property.mObserverExplorer = nil
    self.holeDiameterUnit_property.mValueExplorer = nil
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.mObserverExplorer = nil
    self.annularRingUnit_property.mValueExplorer = nil
  //--- To many property: slaves
    self.slaves_property.mValueExplorer = nil
  //--- To one property: zone
    self.zone_property.mObserverExplorer = nil
    self.zone_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.slaves_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.zone_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: xCenter
    self.xCenter_property.storeIn (dictionary: ioDictionary, forKey:"xCenter")
  //--- Atomic property: yCenter
    self.yCenter_property.storeIn (dictionary: ioDictionary, forKey:"yCenter")
  //--- Atomic property: width
    self.width_property.storeIn (dictionary: ioDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.storeIn (dictionary: ioDictionary, forKey:"height")
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.storeIn (dictionary: ioDictionary, forKey:"holeDiameter")
  //--- Atomic property: padShape
    self.padShape_property.storeIn (dictionary: ioDictionary, forKey:"padShape")
  //--- Atomic property: padStyle
    self.padStyle_property.storeIn (dictionary: ioDictionary, forKey:"padStyle")
  //--- Atomic property: padNumber
    self.padNumber_property.storeIn (dictionary: ioDictionary, forKey:"padNumber")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.storeIn (dictionary: ioDictionary, forKey:"xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.storeIn (dictionary: ioDictionary, forKey:"yCenterUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.storeIn (dictionary: ioDictionary, forKey:"widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.storeIn (dictionary: ioDictionary, forKey:"heightUnit")
  //--- Atomic property: holeDiameterUnit
    self.holeDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey:"holeDiameterUnit")
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.storeIn (dictionary: ioDictionary, forKey:"annularRingUnit")
  //--- To many property: slaves
    self.store (
      managedObjectArray: self.slaves_property.propval,
      relationshipName: "slaves",
      intoDictionary: ioDictionary
    )
  //--- To one property: zone
    self.store (managedObject:self.zone_property.propval,
      relationshipName: "zone",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: slaves
    self.slaves_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "slaves",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageSlavePad])
  //--- To one property: zone
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "zone",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PackageZone {
        self.zone_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: xCenter
    self.xCenter_property.readFrom (dictionary: inDictionary, forKey:"xCenter")
  //--- Atomic property: yCenter
    self.yCenter_property.readFrom (dictionary: inDictionary, forKey:"yCenter")
  //--- Atomic property: width
    self.width_property.readFrom (dictionary: inDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.readFrom (dictionary: inDictionary, forKey:"height")
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.readFrom (dictionary: inDictionary, forKey:"holeDiameter")
  //--- Atomic property: padShape
    self.padShape_property.readFrom (dictionary: inDictionary, forKey:"padShape")
  //--- Atomic property: padStyle
    self.padStyle_property.readFrom (dictionary: inDictionary, forKey:"padStyle")
  //--- Atomic property: padNumber
    self.padNumber_property.readFrom (dictionary: inDictionary, forKey:"padNumber")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.readFrom (dictionary: inDictionary, forKey:"xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.readFrom (dictionary: inDictionary, forKey:"yCenterUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.readFrom (dictionary: inDictionary, forKey:"widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.readFrom (dictionary: inDictionary, forKey:"heightUnit")
  //--- Atomic property: holeDiameterUnit
    self.holeDiameterUnit_property.readFrom (dictionary: inDictionary, forKey:"holeDiameterUnit")
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.readFrom (dictionary: inDictionary, forKey:"annularRingUnit")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: slaves
    for managedObject in self.slaves_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: zone
    if let managedObject = self.zone_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: slaves
    for managedObject in self.slaves_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: zone
    if let managedObject = self.zone_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.annularRingUnit_property.signature ())
    crc.accumulateUInt32 (self.height_property.signature ())
    crc.accumulateUInt32 (self.heightUnit_property.signature ())
    crc.accumulateUInt32 (self.holeDiameter_property.signature ())
    crc.accumulateUInt32 (self.holeDiameterUnit_property.signature ())
    crc.accumulateUInt32 (self.padNumber_property.signature ())
    crc.accumulateUInt32 (self.padShape_property.signature ())
    crc.accumulateUInt32 (self.padStyle_property.signature ())
    crc.accumulateUInt32 (self.width_property.signature ())
    crc.accumulateUInt32 (self.widthUnit_property.signature ())
    crc.accumulateUInt32 (self.xCenter_property.signature ())
    crc.accumulateUInt32 (self.xCenterUnit_property.signature ())
    crc.accumulateUInt32 (self.yCenter_property.signature ())
    crc.accumulateUInt32 (self.yCenterUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackagePad : ReadOnlyAbstractArrayProperty <PackagePad> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <PackagePad>, addedSet inAddedSet : Set <PackagePad>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_xCenter_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_yCenter_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_width_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_height_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_holeDiameter_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_padShape_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_padStyle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_padNumber_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_xCenterUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_yCenterUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_widthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_heightUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_holeDiameterUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_annularRingUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_padName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_padIsTraversing_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_annularRing_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_zoneName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_noZone_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_zoneAllowsManualRenumbering_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_slavePadCount_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_xCenter_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_yCenter_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_width_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_height_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_holeDiameter_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_padShape_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_padStyle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_padNumber_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_xCenterUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_yCenterUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_widthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_heightUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_holeDiameterUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_annularRingUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_padName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_padIsTraversing_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_annularRing_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_zoneName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_noZone_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_zoneAllowsManualRenumbering_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_slavePadCount_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_padNumberDisplay_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenter_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
        managedObject.xCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenter_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenter_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
        managedObject.yCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenter_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_width.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_width.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_width_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_width.apply { (_ observer : EBEvent) in
        managedObject.width_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_width_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_width.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.width_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_height.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_height.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_height_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_height.apply { (_ observer : EBEvent) in
        managedObject.height_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_height_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_height.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.height_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeDiameter' stored property
  //····················································································································

  private var mObserversOf_holeDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeDiameter_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_holeDiameter.apply { (_ observer : EBEvent) in
        managedObject.holeDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeDiameter_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_holeDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.holeDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padShape' stored property
  //····················································································································

  private var mObserversOf_padShape = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padShape.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padShape_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padShape.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padShape_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padShape_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padShape.apply { (_ observer : EBEvent) in
        managedObject.padShape_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padShape_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_padShape.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padShape_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padStyle' stored property
  //····················································································································

  private var mObserversOf_padStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padStyle_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padStyle.apply { (_ observer : EBEvent) in
        managedObject.padStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padStyle_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_padStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumber' stored property
  //····················································································································

  private var mObserversOf_padNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumber_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padNumber.apply { (_ observer : EBEvent) in
        managedObject.padNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumber_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_padNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private var mObserversOf_xCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenterUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
        managedObject.xCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenterUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private var mObserversOf_yCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenterUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
        managedObject.yCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenterUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'widthUnit' stored property
  //····················································································································

  private var mObserversOf_widthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_widthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_widthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_widthUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_widthUnit.apply { (_ observer : EBEvent) in
        managedObject.widthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_widthUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_widthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.widthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'heightUnit' stored property
  //····················································································································

  private var mObserversOf_heightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_heightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_heightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_heightUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_heightUnit.apply { (_ observer : EBEvent) in
        managedObject.heightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_heightUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_heightUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.heightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_holeDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeDiameterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeDiameterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeDiameterUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_holeDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.holeDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeDiameterUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_holeDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.holeDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'annularRingUnit' stored property
  //····················································································································

  private var mObserversOf_annularRingUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_annularRingUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRingUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_annularRingUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRingUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_annularRingUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_annularRingUnit.apply { (_ observer : EBEvent) in
        managedObject.annularRingUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_annularRingUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_annularRingUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.annularRingUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padName' transient property
  //····················································································································

  private var mObserversOf_padName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padName_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padName.apply { (_ observer : EBEvent) in
        managedObject.padName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padName_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padName.apply { (_ observer : EBEvent) in
        managedObject.padName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padIsTraversing' transient property
  //····················································································································

  private var mObserversOf_padIsTraversing = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padIsTraversing.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padIsTraversing_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padIsTraversing.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padIsTraversing_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padIsTraversing_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padIsTraversing.apply { (_ observer : EBEvent) in
        managedObject.padIsTraversing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padIsTraversing_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padIsTraversing.apply { (_ observer : EBEvent) in
        managedObject.padIsTraversing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'annularRing' transient property
  //····················································································································

  private var mObserversOf_annularRing = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_annularRing.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRing_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_annularRing.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRing_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_annularRing_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_annularRing.apply { (_ observer : EBEvent) in
        managedObject.annularRing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_annularRing_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_annularRing.apply { (_ observer : EBEvent) in
        managedObject.annularRing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoneName' transient property
  //····················································································································

  private var mObserversOf_zoneName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoneName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoneName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoneName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoneName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoneName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoneName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoneName_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_zoneName.apply { (_ observer : EBEvent) in
        managedObject.zoneName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoneName_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_zoneName.apply { (_ observer : EBEvent) in
        managedObject.zoneName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'noZone' transient property
  //····················································································································

  private var mObserversOf_noZone = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_noZone (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_noZone.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.noZone_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_noZone (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_noZone.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.noZone_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_noZone_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_noZone.apply { (_ observer : EBEvent) in
        managedObject.noZone_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_noZone_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_noZone.apply { (_ observer : EBEvent) in
        managedObject.noZone_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoneAllowsManualRenumbering' transient property
  //····················································································································

  private var mObserversOf_zoneAllowsManualRenumbering = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoneAllowsManualRenumbering (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoneAllowsManualRenumbering.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoneAllowsManualRenumbering_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoneAllowsManualRenumbering (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoneAllowsManualRenumbering.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoneAllowsManualRenumbering_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoneAllowsManualRenumbering_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_zoneAllowsManualRenumbering.apply { (_ observer : EBEvent) in
        managedObject.zoneAllowsManualRenumbering_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoneAllowsManualRenumbering_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_zoneAllowsManualRenumbering.apply { (_ observer : EBEvent) in
        managedObject.zoneAllowsManualRenumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'slavePadCount' transient property
  //····················································································································

  private var mObserversOf_slavePadCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_slavePadCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_slavePadCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.slavePadCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_slavePadCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_slavePadCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.slavePadCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_slavePadCount_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_slavePadCount.apply { (_ observer : EBEvent) in
        managedObject.slavePadCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_slavePadCount_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_slavePadCount.apply { (_ observer : EBEvent) in
        managedObject.slavePadCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackagePad : ReadOnlyArrayOf_PackagePad {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_PackagePad? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_PackagePad?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [PackagePad] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [PackagePad] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [PackagePad] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_PackagePad <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackagePad {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [PackagePad] ()
    for superObject in newModelArray {
      if let object = superObject as? PackagePad {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [PackagePad] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [PackagePad] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackagePad : ReadOnlyArrayOf_PackagePad {

  //····················································································································
 
  func setProp (_ value :  [PackagePad]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_PackagePad : ReadWriteArrayOf_PackagePad {

  //····················································································································

  private var mModel : ReadWriteArrayOf_PackagePad? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_PackagePad?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [PackagePad]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [PackagePad]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [PackagePad] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [PackagePad] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackagePad : ReadWriteArrayOf_PackagePad, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackagePad) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackagePad) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackagePad) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackagePad) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackagePad] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PackagePad") as? PackagePad {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [PackagePad]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [PackagePad]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <PackagePad>, addedSet inAddedSet : Set <PackagePad>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //---
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  }
 
  //····················································································································

  override var prop : EBSelection < [PackagePad] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [PackagePad]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [PackagePad] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : PackagePad) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : PackagePad) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_PackagePad 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_PackagePad : ReadOnlyAbstractObjectProperty <PackagePad> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackagePad?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.xCenter_property.removeEBObserversFrom (&self.mObserversOf_xCenter) // Stored property
    inOldValue?.yCenter_property.removeEBObserversFrom (&self.mObserversOf_yCenter) // Stored property
    inOldValue?.width_property.removeEBObserversFrom (&self.mObserversOf_width) // Stored property
    inOldValue?.height_property.removeEBObserversFrom (&self.mObserversOf_height) // Stored property
    inOldValue?.holeDiameter_property.removeEBObserversFrom (&self.mObserversOf_holeDiameter) // Stored property
    inOldValue?.padShape_property.removeEBObserversFrom (&self.mObserversOf_padShape) // Stored property
    inOldValue?.padStyle_property.removeEBObserversFrom (&self.mObserversOf_padStyle) // Stored property
    inOldValue?.padNumber_property.removeEBObserversFrom (&self.mObserversOf_padNumber) // Stored property
    inOldValue?.xCenterUnit_property.removeEBObserversFrom (&self.mObserversOf_xCenterUnit) // Stored property
    inOldValue?.yCenterUnit_property.removeEBObserversFrom (&self.mObserversOf_yCenterUnit) // Stored property
    inOldValue?.widthUnit_property.removeEBObserversFrom (&self.mObserversOf_widthUnit) // Stored property
    inOldValue?.heightUnit_property.removeEBObserversFrom (&self.mObserversOf_heightUnit) // Stored property
    inOldValue?.holeDiameterUnit_property.removeEBObserversFrom (&self.mObserversOf_holeDiameterUnit) // Stored property
    inOldValue?.annularRingUnit_property.removeEBObserversFrom (&self.mObserversOf_annularRingUnit) // Stored property
    inOldValue?.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
    inOldValue?.padName_property.removeEBObserversFrom (&self.mObserversOf_padName) // Transient property
    inOldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
    inOldValue?.padIsTraversing_property.removeEBObserversFrom (&self.mObserversOf_padIsTraversing) // Transient property
    inOldValue?.annularRing_property.removeEBObserversFrom (&self.mObserversOf_annularRing) // Transient property
    inOldValue?.zoneName_property.removeEBObserversFrom (&self.mObserversOf_zoneName) // Transient property
    inOldValue?.noZone_property.removeEBObserversFrom (&self.mObserversOf_noZone) // Transient property
    inOldValue?.zoneAllowsManualRenumbering_property.removeEBObserversFrom (&self.mObserversOf_zoneAllowsManualRenumbering) // Transient property
    inOldValue?.slavePadCount_property.removeEBObserversFrom (&self.mObserversOf_slavePadCount) // Transient property
    inOldValue?.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    inOldValue?.padNumberDisplay_property.removeEBObserversFrom (&self.mObserversOf_padNumberDisplay) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.xCenter_property.addEBObserversFrom (&self.mObserversOf_xCenter) // Stored property
    self.mInternalValue?.yCenter_property.addEBObserversFrom (&self.mObserversOf_yCenter) // Stored property
    self.mInternalValue?.width_property.addEBObserversFrom (&self.mObserversOf_width) // Stored property
    self.mInternalValue?.height_property.addEBObserversFrom (&self.mObserversOf_height) // Stored property
    self.mInternalValue?.holeDiameter_property.addEBObserversFrom (&self.mObserversOf_holeDiameter) // Stored property
    self.mInternalValue?.padShape_property.addEBObserversFrom (&self.mObserversOf_padShape) // Stored property
    self.mInternalValue?.padStyle_property.addEBObserversFrom (&self.mObserversOf_padStyle) // Stored property
    self.mInternalValue?.padNumber_property.addEBObserversFrom (&self.mObserversOf_padNumber) // Stored property
    self.mInternalValue?.xCenterUnit_property.addEBObserversFrom (&self.mObserversOf_xCenterUnit) // Stored property
    self.mInternalValue?.yCenterUnit_property.addEBObserversFrom (&self.mObserversOf_yCenterUnit) // Stored property
    self.mInternalValue?.widthUnit_property.addEBObserversFrom (&self.mObserversOf_widthUnit) // Stored property
    self.mInternalValue?.heightUnit_property.addEBObserversFrom (&self.mObserversOf_heightUnit) // Stored property
    self.mInternalValue?.holeDiameterUnit_property.addEBObserversFrom (&self.mObserversOf_holeDiameterUnit) // Stored property
    self.mInternalValue?.annularRingUnit_property.addEBObserversFrom (&self.mObserversOf_annularRingUnit) // Stored property
    self.mInternalValue?.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
    self.mInternalValue?.padName_property.addEBObserversFrom (&self.mObserversOf_padName) // Transient property
    self.mInternalValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
    self.mInternalValue?.padIsTraversing_property.addEBObserversFrom (&self.mObserversOf_padIsTraversing) // Transient property
    self.mInternalValue?.annularRing_property.addEBObserversFrom (&self.mObserversOf_annularRing) // Transient property
    self.mInternalValue?.zoneName_property.addEBObserversFrom (&self.mObserversOf_zoneName) // Transient property
    self.mInternalValue?.noZone_property.addEBObserversFrom (&self.mObserversOf_noZone) // Transient property
    self.mInternalValue?.zoneAllowsManualRenumbering_property.addEBObserversFrom (&self.mObserversOf_zoneAllowsManualRenumbering) // Transient property
    self.mInternalValue?.slavePadCount_property.addEBObserversFrom (&self.mObserversOf_slavePadCount) // Transient property
    self.mInternalValue?.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    self.mInternalValue?.padNumberDisplay_property.addEBObserversFrom (&self.mObserversOf_padNumberDisplay) // Transient property
  }

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  var xCenter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xCenter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xCenter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xCenter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenter_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
        managedObject.xCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenter_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  var yCenter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yCenter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yCenter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yCenter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenter_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
        managedObject.yCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenter_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  var width_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.width_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_width.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.width_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_width.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.width_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_width_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_width.apply { (_ observer : EBEvent) in
        managedObject.width_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_width_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_width.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.width_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  var height_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.height_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_height.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.height_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_height.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.height_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_height_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_height.apply { (_ observer : EBEvent) in
        managedObject.height_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_height_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_height.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.height_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeDiameter' stored property
  //····················································································································

  private var mObserversOf_holeDiameter = EBWeakEventSet ()

  //····················································································································

  var holeDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.holeDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.holeDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.holeDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_holeDiameter_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_holeDiameter.apply { (_ observer : EBEvent) in
        managedObject.holeDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeDiameter_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_holeDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.holeDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padShape' stored property
  //····················································································································

  private var mObserversOf_padShape = EBWeakEventSet ()

  //····················································································································

  var padShape_property_selection : EBSelection <PadShape?> {
    if let model = self.propval {
      switch (model.padShape_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padShape.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.padShape_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padShape.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padShape_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_padShape_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padShape.apply { (_ observer : EBEvent) in
        managedObject.padShape_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padShape_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_padShape.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padShape_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padStyle' stored property
  //····················································································································

  private var mObserversOf_padStyle = EBWeakEventSet ()

  //····················································································································

  var padStyle_property_selection : EBSelection <PadStyle?> {
    if let model = self.propval {
      switch (model.padStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.padStyle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padStyle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_padStyle_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padStyle.apply { (_ observer : EBEvent) in
        managedObject.padStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padStyle_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_padStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumber' stored property
  //····················································································································

  private var mObserversOf_padNumber = EBWeakEventSet ()

  //····················································································································

  var padNumber_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.padNumber_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.padNumber_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNumber_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumber_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padNumber.apply { (_ observer : EBEvent) in
        managedObject.padNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumber_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_padNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private var mObserversOf_xCenterUnit = EBWeakEventSet ()

  //····················································································································

  var xCenterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xCenterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xCenterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xCenterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenterUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
        managedObject.xCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenterUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private var mObserversOf_yCenterUnit = EBWeakEventSet ()

  //····················································································································

  var yCenterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yCenterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yCenterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yCenterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenterUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
        managedObject.yCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenterUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'widthUnit' stored property
  //····················································································································

  private var mObserversOf_widthUnit = EBWeakEventSet ()

  //····················································································································

  var widthUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.widthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_widthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.widthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_widthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.widthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_widthUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_widthUnit.apply { (_ observer : EBEvent) in
        managedObject.widthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_widthUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_widthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.widthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'heightUnit' stored property
  //····················································································································

  private var mObserversOf_heightUnit = EBWeakEventSet ()

  //····················································································································

  var heightUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.heightUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_heightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.heightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_heightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.heightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_heightUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_heightUnit.apply { (_ observer : EBEvent) in
        managedObject.heightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_heightUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_heightUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.heightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_holeDiameterUnit = EBWeakEventSet ()

  //····················································································································

  var holeDiameterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.holeDiameterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_holeDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeDiameterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.holeDiameterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeDiameterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.holeDiameterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_holeDiameterUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_holeDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.holeDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeDiameterUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_holeDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.holeDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'annularRingUnit' stored property
  //····················································································································

  private var mObserversOf_annularRingUnit = EBWeakEventSet ()

  //····················································································································

  var annularRingUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.annularRingUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_annularRingUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.annularRingUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_annularRingUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.annularRingUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_annularRingUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_annularRingUnit.apply { (_ observer : EBEvent) in
        managedObject.annularRingUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_annularRingUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_annularRingUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.annularRingUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padName' transient property
  //····················································································································

  private var mObserversOf_padName = EBWeakEventSet ()

  //····················································································································

  var padName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.padName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_padName_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padName.apply { (_ observer : EBEvent) in
        managedObject.padName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padName_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padName.apply { (_ observer : EBEvent) in
        managedObject.padName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padIsTraversing' transient property
  //····················································································································

  private var mObserversOf_padIsTraversing = EBWeakEventSet ()

  //····················································································································

  var padIsTraversing_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.padIsTraversing_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padIsTraversing.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padIsTraversing_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padIsTraversing.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padIsTraversing_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_padIsTraversing_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padIsTraversing.apply { (_ observer : EBEvent) in
        managedObject.padIsTraversing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padIsTraversing_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padIsTraversing.apply { (_ observer : EBEvent) in
        managedObject.padIsTraversing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'annularRing' transient property
  //····················································································································

  private var mObserversOf_annularRing = EBWeakEventSet ()

  //····················································································································

  var annularRing_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.annularRing_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_annularRing.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.annularRing_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_annularRing.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.annularRing_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_annularRing_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_annularRing.apply { (_ observer : EBEvent) in
        managedObject.annularRing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_annularRing_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_annularRing.apply { (_ observer : EBEvent) in
        managedObject.annularRing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoneName' transient property
  //····················································································································

  private var mObserversOf_zoneName = EBWeakEventSet ()

  //····················································································································

  var zoneName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.zoneName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_zoneName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoneName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.zoneName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoneName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoneName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.zoneName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_zoneName_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_zoneName.apply { (_ observer : EBEvent) in
        managedObject.zoneName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoneName_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_zoneName.apply { (_ observer : EBEvent) in
        managedObject.zoneName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'noZone' transient property
  //····················································································································

  private var mObserversOf_noZone = EBWeakEventSet ()

  //····················································································································

  var noZone_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.noZone_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_noZone (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_noZone.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.noZone_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_noZone (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_noZone.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.noZone_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_noZone_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_noZone.apply { (_ observer : EBEvent) in
        managedObject.noZone_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_noZone_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_noZone.apply { (_ observer : EBEvent) in
        managedObject.noZone_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoneAllowsManualRenumbering' transient property
  //····················································································································

  private var mObserversOf_zoneAllowsManualRenumbering = EBWeakEventSet ()

  //····················································································································

  var zoneAllowsManualRenumbering_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.zoneAllowsManualRenumbering_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_zoneAllowsManualRenumbering (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoneAllowsManualRenumbering.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.zoneAllowsManualRenumbering_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoneAllowsManualRenumbering (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoneAllowsManualRenumbering.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.zoneAllowsManualRenumbering_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_zoneAllowsManualRenumbering_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_zoneAllowsManualRenumbering.apply { (_ observer : EBEvent) in
        managedObject.zoneAllowsManualRenumbering_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoneAllowsManualRenumbering_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_zoneAllowsManualRenumbering.apply { (_ observer : EBEvent) in
        managedObject.zoneAllowsManualRenumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'slavePadCount' transient property
  //····················································································································

  private var mObserversOf_slavePadCount = EBWeakEventSet ()

  //····················································································································

  var slavePadCount_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.slavePadCount_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_slavePadCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_slavePadCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.slavePadCount_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_slavePadCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_slavePadCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.slavePadCount_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_slavePadCount_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_slavePadCount.apply { (_ observer : EBEvent) in
        managedObject.slavePadCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_slavePadCount_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_slavePadCount.apply { (_ observer : EBEvent) in
        managedObject.slavePadCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  var padNumberDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.padNumberDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNumberDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNumberDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: slaves
  //····················································································································

  private var mObserversOf_slaves = EBWeakEventSet ()

  //····················································································································

  var slaves_property_selection : EBSelection <[PackageSlavePad]> {
    if let model = self.propval {
      switch (model.slaves_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_slaves (_ inObserver : EBEvent) {
    self.mObserversOf_slaves.insert (inObserver)
    if let object = self.propval {
      object.slaves_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_slaves (_ inObserver : EBEvent) {
    self.mObserversOf_slaves.remove (inObserver)
    if let object = self.propval {
      object.slaves_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_PackagePad : ReadOnlyObject_PackagePad {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackagePad? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackagePad?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackagePad? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackagePad? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackagePad? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_PackagePad : ReadOnlyObject_PackagePad {

  //····················································································································
 
  func setProp (_ inValue : PackagePad?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_PackagePad : ReadWriteObject_PackagePad {

  //····················································································································

  private var mModel : ReadWriteObject_PackagePad? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackagePad?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackagePad?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackagePad?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < PackagePad? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackagePad? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_PackagePad 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_PackagePad : ReadWriteObject_PackagePad, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackagePad) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackagePad) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackagePad) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackagePad) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackagePad?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : PackagePad?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackagePad? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackagePad?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackagePad? { return self.mInternalValue }

  //····················································································································

  func remove (_ object : PackagePad) {
    if object === self.mInternalValue {
      self.mInternalValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : PackagePad) {
    if object !== self.mInternalValue {
      self.mInternalValue = object
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

