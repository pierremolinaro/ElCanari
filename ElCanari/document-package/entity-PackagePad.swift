//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_xCenter : class {
  var xCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_yCenter : class {
  var yCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_width : class {
  var width : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_height : class {
  var height : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_holeWidth : class {
  var holeWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_holeHeight : class {
  var holeHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padShape : class {
  var padShape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padStyle : class {
  var padStyle : PadStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padNumber : class {
  var padNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_xCenterUnit : class {
  var xCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_yCenterUnit : class {
  var yCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_widthUnit : class {
  var widthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_heightUnit : class {
  var heightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_holeWidthUnit : class {
  var holeWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_holeHeightUnit : class {
  var holeHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_annularRingUnit : class {
  var annularRingUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padName : class {
  var padName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padIsTraversing : class {
  var padIsTraversing : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_annularRing : class {
  var annularRing : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_zoneName : class {
  var zoneName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_noZone : class {
  var noZone : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_zoneAllowsManualRenumbering : class {
  var zoneAllowsManualRenumbering : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_slavePadCount : class {
  var slavePadCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padNumberDisplay : class {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackagePad : PackageObject,
         PackagePad_xCenter,
         PackagePad_yCenter,
         PackagePad_width,
         PackagePad_height,
         PackagePad_holeWidth,
         PackagePad_holeHeight,
         PackagePad_padShape,
         PackagePad_padStyle,
         PackagePad_padNumber,
         PackagePad_xCenterUnit,
         PackagePad_yCenterUnit,
         PackagePad_widthUnit,
         PackagePad_heightUnit,
         PackagePad_holeWidthUnit,
         PackagePad_holeHeightUnit,
         PackagePad_annularRingUnit,
         PackagePad_selectionDisplay,
         PackagePad_padName,
         PackagePad_issues,
         PackagePad_padIsTraversing,
         PackagePad_annularRing,
         PackagePad_zoneName,
         PackagePad_noZone,
         PackagePad_zoneAllowsManualRenumbering,
         PackagePad_slavePadCount,
         PackagePad_objectDisplay,
         PackagePad_padNumberDisplay {

  //····················································································································
  //   Atomic property: xCenter
  //····················································································································

  let xCenter_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var xCenter : Int {
    get { return self.xCenter_property.propval }
    set { self.xCenter_property.setProp (newValue) }
  }

  //····················································································································

  var xCenter_property_selection : EBSelection <Int> { return self.xCenter_property.prop }

  //····················································································································
  //   Atomic property: yCenter
  //····················································································································

  let yCenter_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var yCenter : Int {
    get { return self.yCenter_property.propval }
    set { self.yCenter_property.setProp (newValue) }
  }

  //····················································································································

  var yCenter_property_selection : EBSelection <Int> { return self.yCenter_property.prop }

  //····················································································································
  //   Atomic property: width
  //····················································································································

  let width_property = EBStoredProperty_Int (defaultValue: 114300)

  //····················································································································

  var width : Int {
    get { return self.width_property.propval }
    set { self.width_property.setProp (newValue) }
  }

  //····················································································································

  var width_property_selection : EBSelection <Int> { return self.width_property.prop }

  //····················································································································
  //   Atomic property: height
  //····················································································································

  let height_property = EBStoredProperty_Int (defaultValue: 228600)

  //····················································································································

  var height : Int {
    get { return self.height_property.propval }
    set { self.height_property.setProp (newValue) }
  }

  //····················································································································

  var height_property_selection : EBSelection <Int> { return self.height_property.prop }

  //····················································································································
  //   Atomic property: holeWidth
  //····················································································································

  let holeWidth_property = EBStoredProperty_Int (defaultValue: 57150)

  //····················································································································

  var holeWidth : Int {
    get { return self.holeWidth_property.propval }
    set { self.holeWidth_property.setProp (newValue) }
  }

  //····················································································································

  var holeWidth_property_selection : EBSelection <Int> { return self.holeWidth_property.prop }

  //····················································································································
  //   Atomic property: holeHeight
  //····················································································································

  let holeHeight_property = EBStoredProperty_Int (defaultValue: 57150)

  //····················································································································

  var holeHeight : Int {
    get { return self.holeHeight_property.propval }
    set { self.holeHeight_property.setProp (newValue) }
  }

  //····················································································································

  var holeHeight_property_selection : EBSelection <Int> { return self.holeHeight_property.prop }

  //····················································································································
  //   Atomic property: padShape
  //····················································································································

  let padShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo)

  //····················································································································

  var padShape : PadShape {
    get { return self.padShape_property.propval }
    set { self.padShape_property.setProp (newValue) }
  }

  //····················································································································

  var padShape_property_selection : EBSelection <PadShape> { return self.padShape_property.prop }

  //····················································································································
  //   Atomic property: padStyle
  //····················································································································

  let padStyle_property = EBStoredProperty_PadStyle (defaultValue: PadStyle.traversing)

  //····················································································································

  var padStyle : PadStyle {
    get { return self.padStyle_property.propval }
    set { self.padStyle_property.setProp (newValue) }
  }

  //····················································································································

  var padStyle_property_selection : EBSelection <PadStyle> { return self.padStyle_property.prop }

  //····················································································································
  //   Atomic property: padNumber
  //····················································································································

  let padNumber_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var padNumber : Int {
    get { return self.padNumber_property.propval }
    set { self.padNumber_property.setProp (newValue) }
  }

  //····················································································································

  var padNumber_property_selection : EBSelection <Int> { return self.padNumber_property.prop }

  //····················································································································
  //   Atomic property: xCenterUnit
  //····················································································································

  let xCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var xCenterUnit : Int {
    get { return self.xCenterUnit_property.propval }
    set { self.xCenterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var xCenterUnit_property_selection : EBSelection <Int> { return self.xCenterUnit_property.prop }

  //····················································································································
  //   Atomic property: yCenterUnit
  //····················································································································

  let yCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var yCenterUnit : Int {
    get { return self.yCenterUnit_property.propval }
    set { self.yCenterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var yCenterUnit_property_selection : EBSelection <Int> { return self.yCenterUnit_property.prop }

  //····················································································································
  //   Atomic property: widthUnit
  //····················································································································

  let widthUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var widthUnit : Int {
    get { return self.widthUnit_property.propval }
    set { self.widthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var widthUnit_property_selection : EBSelection <Int> { return self.widthUnit_property.prop }

  //····················································································································
  //   Atomic property: heightUnit
  //····················································································································

  let heightUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var heightUnit : Int {
    get { return self.heightUnit_property.propval }
    set { self.heightUnit_property.setProp (newValue) }
  }

  //····················································································································

  var heightUnit_property_selection : EBSelection <Int> { return self.heightUnit_property.prop }

  //····················································································································
  //   Atomic property: holeWidthUnit
  //····················································································································

  let holeWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var holeWidthUnit : Int {
    get { return self.holeWidthUnit_property.propval }
    set { self.holeWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var holeWidthUnit_property_selection : EBSelection <Int> { return self.holeWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: holeHeightUnit
  //····················································································································

  let holeHeightUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var holeHeightUnit : Int {
    get { return self.holeHeightUnit_property.propval }
    set { self.holeHeightUnit_property.setProp (newValue) }
  }

  //····················································································································

  var holeHeightUnit_property_selection : EBSelection <Int> { return self.holeHeightUnit_property.prop }

  //····················································································································
  //   Atomic property: annularRingUnit
  //····················································································································

  let annularRingUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var annularRingUnit : Int {
    get { return self.annularRingUnit_property.propval }
    set { self.annularRingUnit_property.setProp (newValue) }
  }

  //····················································································································

  var annularRingUnit_property_selection : EBSelection <Int> { return self.annularRingUnit_property.prop }

  //····················································································································
  //   To many property: slaves
  //····················································································································

  let slaves_property = StoredArrayOf_PackageSlavePad ()

  //····················································································································

  var slaves_property_selection : EBSelection < [PackageSlavePad] > {
    return self.slaves_property.prop
  }

  //····················································································································

  var slaves : [PackageSlavePad] {
    get { return self.slaves_property.propval }
    set { self.slaves_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: zone
  //····················································································································

   let zone_property = StoredObject_PackageZone ()

  //····················································································································

  var zone_property_selection : EBSelection <PackageZone?> {
    return .single (self.zone_property.propval)
  }

  //····················································································································

  var zone : PackageZone? {
    get {
      return self.zone_property.propval
    }
    set {
      if self.zone_property.propval != nil {
        self.zone_property.setProp (nil)
      }
      if newValue != nil {
        self.zone_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var zone_none : StoredObject_PackageZone { return self.zone_property }

  //····················································································································

  var zone_none_selection : EBSelection <Bool> {
    return .single (self.zone_property.propval == nil)
  }

  //····················································································································
  //   Transient property: padName
  //····················································································································

  let padName_property = EBTransientProperty_String ()

  //····················································································································

  var padName_property_selection : EBSelection <String> {
    return self.padName_property.prop
  }

  //····················································································································

  var padName : String? {
    switch self.padName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padIsTraversing
  //····················································································································

  let padIsTraversing_property = EBTransientProperty_Bool ()

  //····················································································································

  var padIsTraversing_property_selection : EBSelection <Bool> {
    return self.padIsTraversing_property.prop
  }

  //····················································································································

  var padIsTraversing : Bool? {
    switch self.padIsTraversing_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: annularRing
  //····················································································································

  let annularRing_property = EBTransientProperty_Int ()

  //····················································································································

  var annularRing_property_selection : EBSelection <Int> {
    return self.annularRing_property.prop
  }

  //····················································································································

  var annularRing : Int? {
    switch self.annularRing_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: zoneName
  //····················································································································

  let zoneName_property = EBTransientProperty_String ()

  //····················································································································

  var zoneName_property_selection : EBSelection <String> {
    return self.zoneName_property.prop
  }

  //····················································································································

  var zoneName : String? {
    switch self.zoneName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: noZone
  //····················································································································

  let noZone_property = EBTransientProperty_Bool ()

  //····················································································································

  var noZone_property_selection : EBSelection <Bool> {
    return self.noZone_property.prop
  }

  //····················································································································

  var noZone : Bool? {
    switch self.noZone_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: zoneAllowsManualRenumbering
  //····················································································································

  let zoneAllowsManualRenumbering_property = EBTransientProperty_Bool ()

  //····················································································································

  var zoneAllowsManualRenumbering_property_selection : EBSelection <Bool> {
    return self.zoneAllowsManualRenumbering_property.prop
  }

  //····················································································································

  var zoneAllowsManualRenumbering : Bool? {
    switch self.zoneAllowsManualRenumbering_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: slavePadCount
  //····················································································································

  let slavePadCount_property = EBTransientProperty_Int ()

  //····················································································································

  var slavePadCount_property_selection : EBSelection <Int> {
    return self.slavePadCount_property.prop
  }

  //····················································································································

  var slavePadCount : Int? {
    switch self.slavePadCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  let padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var padNumberDisplay_property_selection : EBSelection <EBShape> {
    return self.padNumberDisplay_property.prop
  }

  //····················································································································

  var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: xCenter
    self.xCenter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yCenter
    self.yCenter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: width
    self.width_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: height
    self.height_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: holeWidth
    self.holeWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: holeHeight
    self.holeHeight_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padShape
    self.padShape_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padStyle
    self.padStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padNumber
    self.padNumber_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: widthUnit
    self.widthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: heightUnit
    self.heightUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: holeWidthUnit
    self.holeWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: holeHeightUnit
    self.holeHeightUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.ebUndoManager = self.ebUndoManager
  //--- To many property: slaves (has opposite relationship)
    self.slaves_property.ebUndoManager = self.ebUndoManager
    self.slaves_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.master_property.setProp (me) } },
      resetter: { inObject in inObject.master_property.setProp (nil) }
    )
  //--- To one property: zone
    self.zone_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.padShape_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.padShape_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PackagePad_selectionDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.selectionDisplay_property)
    self.yCenter_property.addEBObserver (self.selectionDisplay_property)
    self.width_property.addEBObserver (self.selectionDisplay_property)
    self.height_property.addEBObserver (self.selectionDisplay_property)
    self.padShape_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: padName
    self.padName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.padNumber_property_selection.kind ()
        kind &= unwSelf.zone_property.zoneName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.padNumber_property_selection, unwSelf.zone_property.zoneName_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PackagePad_padName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padNumber_property.addEBObserver (self.padName_property)
    self.zone_property.addEBObserverOf_zoneName (self.padName_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeWidth_property_selection.kind ()
        kind &= unwSelf.holeHeight_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeWidth_property_selection, unwSelf.holeHeight_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_PackagePad_issues (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.issues_property)
    self.yCenter_property.addEBObserver (self.issues_property)
    self.width_property.addEBObserver (self.issues_property)
    self.height_property.addEBObserver (self.issues_property)
    self.holeWidth_property.addEBObserver (self.issues_property)
    self.holeHeight_property.addEBObserver (self.issues_property)
  //--- Atomic property: padIsTraversing
    self.padIsTraversing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.padStyle_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.padStyle_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_padIsTraversing (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padStyle_property.addEBObserver (self.padIsTraversing_property)
  //--- Atomic property: annularRing
    self.annularRing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeWidth_property_selection.kind ()
        kind &= unwSelf.holeHeight_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeWidth_property_selection, unwSelf.holeHeight_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_PackagePad_annularRing (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.width_property.addEBObserver (self.annularRing_property)
    self.height_property.addEBObserver (self.annularRing_property)
    self.holeWidth_property.addEBObserver (self.annularRing_property)
    self.holeHeight_property.addEBObserver (self.annularRing_property)
  //--- Atomic property: zoneName
    self.zoneName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.zone_property.zoneName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.zone_property.zoneName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_zoneName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.zone_property.addEBObserverOf_zoneName (self.zoneName_property)
  //--- Atomic property: noZone
    self.noZone_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.zone_none_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.zone_none_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_noZone (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.zone_property.addEBObserver (self.noZone_property)
  //--- Atomic property: zoneAllowsManualRenumbering
    self.zoneAllowsManualRenumbering_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.zone_property.zoneNumbering_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.zone_property.zoneNumbering_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_zoneAllowsManualRenumbering (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.zone_property.addEBObserverOf_zoneNumbering (self.zoneAllowsManualRenumbering_property)
  //--- Atomic property: slavePadCount
    self.slavePadCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.slaves_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.slaves_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_slavePadCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.slaves_property.addEBObserver (self.slavePadCount_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeWidth_property_selection.kind ()
        kind &= unwSelf.holeHeight_property_selection.kind ()
        kind &= unwSelf.padShape_property_selection.kind ()
        kind &= unwSelf.padStyle_property_selection.kind ()
        kind &= g_Preferences!.frontSidePadColor_property_selection.kind ()
        kind &= g_Preferences!.displayPackageFrontSidePads_property_selection.kind ()
        kind &= g_Preferences!.backSidePadColor_property_selection.kind ()
        kind &= g_Preferences!.displayPackageBackSidePads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeWidth_property_selection, unwSelf.holeHeight_property_selection, unwSelf.padShape_property_selection, unwSelf.padStyle_property_selection, g_Preferences!.frontSidePadColor_property_selection, g_Preferences!.displayPackageFrontSidePads_property_selection, g_Preferences!.backSidePadColor_property_selection, g_Preferences!.displayPackageBackSidePads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11)) :
            return .single (transient_PackagePad_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.objectDisplay_property)
    self.yCenter_property.addEBObserver (self.objectDisplay_property)
    self.width_property.addEBObserver (self.objectDisplay_property)
    self.height_property.addEBObserver (self.objectDisplay_property)
    self.holeWidth_property.addEBObserver (self.objectDisplay_property)
    self.holeHeight_property.addEBObserver (self.objectDisplay_property)
    self.padShape_property.addEBObserver (self.objectDisplay_property)
    self.padStyle_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageFrontSidePads_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageBackSidePads_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= g_Preferences!.padNumberFont_property_selection.kind ()
        kind &= g_Preferences!.padNumberColor_property_selection.kind ()
        kind &= unwSelf.padName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, g_Preferences!.padNumberFont_property_selection, g_Preferences!.padNumberColor_property_selection, unwSelf.padName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PackagePad_padNumberDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.addEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberFont_property.addEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberColor_property.addEBObserver (self.padNumberDisplay_property)
    self.padName_property.addEBObserver (self.padNumberDisplay_property)
  //--- Install undoers and opposite setter for relationships
    self.slaves_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.master_property.setProp (me) } },
      resetter: { inObject in inObject.master_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.height_property.setSignatureObserver (observer: self)
    self.holeHeight_property.setSignatureObserver (observer: self)
    self.holeWidth_property.setSignatureObserver (observer: self)
    self.padNumber_property.setSignatureObserver (observer: self)
    self.padShape_property.setSignatureObserver (observer: self)
    self.padStyle_property.setSignatureObserver (observer: self)
    self.slaves_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.xCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.yCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.width_property.removeEBObserver (self.selectionDisplay_property)
    self.height_property.removeEBObserver (self.selectionDisplay_property)
    self.padShape_property.removeEBObserver (self.selectionDisplay_property)
    self.padNumber_property.removeEBObserver (self.padName_property)
    self.zone_property.removeEBObserverOf_zoneName (self.padName_property)
    self.xCenter_property.removeEBObserver (self.issues_property)
    self.yCenter_property.removeEBObserver (self.issues_property)
    self.width_property.removeEBObserver (self.issues_property)
    self.height_property.removeEBObserver (self.issues_property)
    self.holeWidth_property.removeEBObserver (self.issues_property)
    self.holeHeight_property.removeEBObserver (self.issues_property)
    self.padStyle_property.removeEBObserver (self.padIsTraversing_property)
    self.width_property.removeEBObserver (self.annularRing_property)
    self.height_property.removeEBObserver (self.annularRing_property)
    self.holeWidth_property.removeEBObserver (self.annularRing_property)
    self.holeHeight_property.removeEBObserver (self.annularRing_property)
    self.zone_property.removeEBObserverOf_zoneName (self.zoneName_property)
    self.zone_property.removeEBObserver (self.noZone_property)
    self.zone_property.removeEBObserverOf_zoneNumbering (self.zoneAllowsManualRenumbering_property)
    self.slaves_property.removeEBObserver (self.slavePadCount_property)
    self.xCenter_property.removeEBObserver (self.objectDisplay_property)
    self.yCenter_property.removeEBObserver (self.objectDisplay_property)
    self.width_property.removeEBObserver (self.objectDisplay_property)
    self.height_property.removeEBObserver (self.objectDisplay_property)
    self.holeWidth_property.removeEBObserver (self.objectDisplay_property)
    self.holeHeight_property.removeEBObserver (self.objectDisplay_property)
    self.padShape_property.removeEBObserver (self.objectDisplay_property)
    self.padStyle_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageFrontSidePads_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageBackSidePads_property.removeEBObserver (self.objectDisplay_property)
    self.xCenter_property.removeEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.removeEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberFont_property.removeEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberColor_property.removeEBObserver (self.padNumberDisplay_property)
    self.padName_property.removeEBObserver (self.padNumberDisplay_property)
  //--- Unregister properties for handling signature
    self.height_property.setSignatureObserver (observer: nil)
    self.holeHeight_property.setSignatureObserver (observer: nil)
    self.holeWidth_property.setSignatureObserver (observer: nil)
    self.padNumber_property.setSignatureObserver (observer: nil)
    self.padShape_property.setSignatureObserver (observer: nil)
    self.padStyle_property.setSignatureObserver (observer: nil)
    self.slaves_property.setSignatureObserver (observer: nil)
    self.width_property.setSignatureObserver (observer: nil)
    self.xCenter_property.setSignatureObserver (observer: nil)
    self.yCenter_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "xCenter",
      idx: self.xCenter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xCenter_property.mObserverExplorer,
      valueExplorer: &self.xCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenter",
      idx: self.yCenter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yCenter_property.mObserverExplorer,
      valueExplorer: &self.yCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "width",
      idx: self.width_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.width_property.mObserverExplorer,
      valueExplorer: &self.width_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "height",
      idx: self.height_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.height_property.mObserverExplorer,
      valueExplorer: &self.height_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeWidth",
      idx: self.holeWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.holeWidth_property.mObserverExplorer,
      valueExplorer: &self.holeWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeHeight",
      idx: self.holeHeight_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.holeHeight_property.mObserverExplorer,
      valueExplorer: &self.holeHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padShape",
      idx: self.padShape_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padShape_property.mObserverExplorer,
      valueExplorer: &self.padShape_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padStyle",
      idx: self.padStyle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padStyle_property.mObserverExplorer,
      valueExplorer: &self.padStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumber",
      idx: self.padNumber_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padNumber_property.mObserverExplorer,
      valueExplorer: &self.padNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenterUnit",
      idx: self.xCenterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xCenterUnit_property.mObserverExplorer,
      valueExplorer: &self.xCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenterUnit",
      idx: self.yCenterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yCenterUnit_property.mObserverExplorer,
      valueExplorer: &self.yCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "widthUnit",
      idx: self.widthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.widthUnit_property.mObserverExplorer,
      valueExplorer: &self.widthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "heightUnit",
      idx: self.heightUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.heightUnit_property.mObserverExplorer,
      valueExplorer: &self.heightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeWidthUnit",
      idx: self.holeWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.holeWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.holeWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeHeightUnit",
      idx: self.holeHeightUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.holeHeightUnit_property.mObserverExplorer,
      valueExplorer: &self.holeHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "annularRingUnit",
      idx: self.annularRingUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.annularRingUnit_property.mObserverExplorer,
      valueExplorer: &self.annularRingUnit_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padName",
      idx: self.padName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padName_property.mObserverExplorer,
      valueExplorer: &self.padName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padIsTraversing",
      idx: self.padIsTraversing_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padIsTraversing_property.mObserverExplorer,
      valueExplorer: &self.padIsTraversing_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "annularRing",
      idx: self.annularRing_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.annularRing_property.mObserverExplorer,
      valueExplorer: &self.annularRing_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoneName",
      idx: self.zoneName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.zoneName_property.mObserverExplorer,
      valueExplorer: &self.zoneName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "noZone",
      idx: self.noZone_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.noZone_property.mObserverExplorer,
      valueExplorer: &self.noZone_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoneAllowsManualRenumbering",
      idx: self.zoneAllowsManualRenumbering_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.zoneAllowsManualRenumbering_property.mObserverExplorer,
      valueExplorer: &self.zoneAllowsManualRenumbering_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "slavePadCount",
      idx: self.slavePadCount_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.slavePadCount_property.mObserverExplorer,
      valueExplorer: &self.slavePadCount_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumberDisplay",
      idx: self.padNumberDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padNumberDisplay_property.mObserverExplorer,
      valueExplorer: &self.padNumberDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "slaves",
      idx:slaves_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&slaves_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "zone",
      idx:self.zone_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.zone_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: xCenter
    self.xCenter_property.mObserverExplorer = nil
    self.xCenter_property.mValueExplorer = nil
  //--- Atomic property: yCenter
    self.yCenter_property.mObserverExplorer = nil
    self.yCenter_property.mValueExplorer = nil
  //--- Atomic property: width
    self.width_property.mObserverExplorer = nil
    self.width_property.mValueExplorer = nil
  //--- Atomic property: height
    self.height_property.mObserverExplorer = nil
    self.height_property.mValueExplorer = nil
  //--- Atomic property: holeWidth
    self.holeWidth_property.mObserverExplorer = nil
    self.holeWidth_property.mValueExplorer = nil
  //--- Atomic property: holeHeight
    self.holeHeight_property.mObserverExplorer = nil
    self.holeHeight_property.mValueExplorer = nil
  //--- Atomic property: padShape
    self.padShape_property.mObserverExplorer = nil
    self.padShape_property.mValueExplorer = nil
  //--- Atomic property: padStyle
    self.padStyle_property.mObserverExplorer = nil
    self.padStyle_property.mValueExplorer = nil
  //--- Atomic property: padNumber
    self.padNumber_property.mObserverExplorer = nil
    self.padNumber_property.mValueExplorer = nil
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.mObserverExplorer = nil
    self.xCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.mObserverExplorer = nil
    self.yCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: widthUnit
    self.widthUnit_property.mObserverExplorer = nil
    self.widthUnit_property.mValueExplorer = nil
  //--- Atomic property: heightUnit
    self.heightUnit_property.mObserverExplorer = nil
    self.heightUnit_property.mValueExplorer = nil
  //--- Atomic property: holeWidthUnit
    self.holeWidthUnit_property.mObserverExplorer = nil
    self.holeWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: holeHeightUnit
    self.holeHeightUnit_property.mObserverExplorer = nil
    self.holeHeightUnit_property.mValueExplorer = nil
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.mObserverExplorer = nil
    self.annularRingUnit_property.mValueExplorer = nil
  //--- To many property: slaves
    self.slaves_property.mValueExplorer = nil
  //--- To one property: zone
    self.zone_property.mObserverExplorer = nil
    self.zone_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.slaves = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.zone = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: xCenter
    self.xCenter_property.storeIn (dictionary: ioDictionary, forKey:"xCenter")
  //--- Atomic property: yCenter
    self.yCenter_property.storeIn (dictionary: ioDictionary, forKey:"yCenter")
  //--- Atomic property: width
    self.width_property.storeIn (dictionary: ioDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.storeIn (dictionary: ioDictionary, forKey:"height")
  //--- Atomic property: holeWidth
    self.holeWidth_property.storeIn (dictionary: ioDictionary, forKey:"holeWidth")
  //--- Atomic property: holeHeight
    self.holeHeight_property.storeIn (dictionary: ioDictionary, forKey:"holeHeight")
  //--- Atomic property: padShape
    self.padShape_property.storeIn (dictionary: ioDictionary, forKey:"padShape")
  //--- Atomic property: padStyle
    self.padStyle_property.storeIn (dictionary: ioDictionary, forKey:"padStyle")
  //--- Atomic property: padNumber
    self.padNumber_property.storeIn (dictionary: ioDictionary, forKey:"padNumber")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.storeIn (dictionary: ioDictionary, forKey:"xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.storeIn (dictionary: ioDictionary, forKey:"yCenterUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.storeIn (dictionary: ioDictionary, forKey:"widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.storeIn (dictionary: ioDictionary, forKey:"heightUnit")
  //--- Atomic property: holeWidthUnit
    self.holeWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"holeWidthUnit")
  //--- Atomic property: holeHeightUnit
    self.holeHeightUnit_property.storeIn (dictionary: ioDictionary, forKey:"holeHeightUnit")
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.storeIn (dictionary: ioDictionary, forKey:"annularRingUnit")
  //--- To many property: slaves
    self.store (
      managedObjectArray: self.slaves_property.propval,
      relationshipName: "slaves",
      intoDictionary: ioDictionary
    )
  //--- To one property: zone
    self.store (managedObject:self.zone_property.propval,
      relationshipName: "zone",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: slaves
    self.slaves_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "slaves",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageSlavePad])
  //--- To one property: zone
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "zone",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PackageZone {
        self.zone_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: xCenter
    self.xCenter_property.readFrom (dictionary: inDictionary, forKey:"xCenter")
  //--- Atomic property: yCenter
    self.yCenter_property.readFrom (dictionary: inDictionary, forKey:"yCenter")
  //--- Atomic property: width
    self.width_property.readFrom (dictionary: inDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.readFrom (dictionary: inDictionary, forKey:"height")
  //--- Atomic property: holeWidth
    self.holeWidth_property.readFrom (dictionary: inDictionary, forKey:"holeWidth")
  //--- Atomic property: holeHeight
    self.holeHeight_property.readFrom (dictionary: inDictionary, forKey:"holeHeight")
  //--- Atomic property: padShape
    self.padShape_property.readFrom (dictionary: inDictionary, forKey:"padShape")
  //--- Atomic property: padStyle
    self.padStyle_property.readFrom (dictionary: inDictionary, forKey:"padStyle")
  //--- Atomic property: padNumber
    self.padNumber_property.readFrom (dictionary: inDictionary, forKey:"padNumber")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.readFrom (dictionary: inDictionary, forKey:"xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.readFrom (dictionary: inDictionary, forKey:"yCenterUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.readFrom (dictionary: inDictionary, forKey:"widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.readFrom (dictionary: inDictionary, forKey:"heightUnit")
  //--- Atomic property: holeWidthUnit
    self.holeWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"holeWidthUnit")
  //--- Atomic property: holeHeightUnit
    self.holeHeightUnit_property.readFrom (dictionary: inDictionary, forKey:"holeHeightUnit")
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.readFrom (dictionary: inDictionary, forKey:"annularRingUnit")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: slaves
    for managedObject in self.slaves {
      objects.append (managedObject)
    }
  //--- To one property: zone
    if let object = self.zone {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: slaves
    for managedObject in self.slaves {
      objects.append (managedObject)
    }
  //--- To one property: zone
    if let object = self.zone {
      objects.append (object)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.height_property.signature ())
    crc.accumulateUInt32 (self.holeHeight_property.signature ())
    crc.accumulateUInt32 (self.holeWidth_property.signature ())
    crc.accumulateUInt32 (self.padNumber_property.signature ())
    crc.accumulateUInt32 (self.padShape_property.signature ())
    crc.accumulateUInt32 (self.padStyle_property.signature ())
    crc.accumulateUInt32 (self.slaves_property.signature ())
    crc.accumulateUInt32 (self.width_property.signature ())
    crc.accumulateUInt32 (self.xCenter_property.signature ())
    crc.accumulateUInt32 (self.yCenter_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

