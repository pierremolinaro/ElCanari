//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_xCenter : class {
  var xCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_yCenter : class {
  var yCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_width : class {
  var width : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_height : class {
  var height : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_holeDiameter : class {
  var holeDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padShape : class {
  var padShape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padStyle : class {
  var padStyle : PadStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padNumber : class {
  var padNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_xCenterUnit : class {
  var xCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_yCenterUnit : class {
  var yCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_widthUnit : class {
  var widthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_heightUnit : class {
  var heightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_holeDiameterUnit : class {
  var holeDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_annularRingUnit : class {
  var annularRingUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padName : class {
  var padName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padIsTraversing : class {
  var padIsTraversing : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_annularRing : class {
  var annularRing : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_zoneName : class {
  var zoneName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_noZone : class {
  var noZone : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_zoneAllowsManualRenumbering : class {
  var zoneAllowsManualRenumbering : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_slavePadCount : class {
  var slavePadCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackagePad_padNumberDisplay : class {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackagePad : PackageObject,
         PackagePad_xCenter,
         PackagePad_yCenter,
         PackagePad_width,
         PackagePad_height,
         PackagePad_holeDiameter,
         PackagePad_padShape,
         PackagePad_padStyle,
         PackagePad_padNumber,
         PackagePad_xCenterUnit,
         PackagePad_yCenterUnit,
         PackagePad_widthUnit,
         PackagePad_heightUnit,
         PackagePad_holeDiameterUnit,
         PackagePad_annularRingUnit,
         PackagePad_selectionDisplay,
         PackagePad_padName,
         PackagePad_issues,
         PackagePad_padIsTraversing,
         PackagePad_annularRing,
         PackagePad_zoneName,
         PackagePad_noZone,
         PackagePad_zoneAllowsManualRenumbering,
         PackagePad_slavePadCount,
         PackagePad_objectDisplay,
         PackagePad_padNumberDisplay {

  //····················································································································
  //   Atomic property: xCenter
  //····················································································································

  var xCenter_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var xCenter : Int {
    get { return self.xCenter_property.propval }
    set { self.xCenter_property.setProp (newValue) }
  }

  //····················································································································

  var xCenter_property_selection : EBSelection <Int> { return self.xCenter_property.prop }

  //····················································································································
  //   Atomic property: yCenter
  //····················································································································

  var yCenter_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var yCenter : Int {
    get { return self.yCenter_property.propval }
    set { self.yCenter_property.setProp (newValue) }
  }

  //····················································································································

  var yCenter_property_selection : EBSelection <Int> { return self.yCenter_property.prop }

  //····················································································································
  //   Atomic property: width
  //····················································································································

  var width_property = EBStoredProperty_Int (defaultValue: 114300)

  //····················································································································

  var width : Int {
    get { return self.width_property.propval }
    set { self.width_property.setProp (newValue) }
  }

  //····················································································································

  var width_property_selection : EBSelection <Int> { return self.width_property.prop }

  //····················································································································
  //   Atomic property: height
  //····················································································································

  var height_property = EBStoredProperty_Int (defaultValue: 228600)

  //····················································································································

  var height : Int {
    get { return self.height_property.propval }
    set { self.height_property.setProp (newValue) }
  }

  //····················································································································

  var height_property_selection : EBSelection <Int> { return self.height_property.prop }

  //····················································································································
  //   Atomic property: holeDiameter
  //····················································································································

  var holeDiameter_property = EBStoredProperty_Int (defaultValue: 57150)

  //····················································································································

  var holeDiameter : Int {
    get { return self.holeDiameter_property.propval }
    set { self.holeDiameter_property.setProp (newValue) }
  }

  //····················································································································

  var holeDiameter_property_selection : EBSelection <Int> { return self.holeDiameter_property.prop }

  //····················································································································
  //   Atomic property: padShape
  //····················································································································

  var padShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo)

  //····················································································································

  var padShape : PadShape {
    get { return self.padShape_property.propval }
    set { self.padShape_property.setProp (newValue) }
  }

  //····················································································································

  var padShape_property_selection : EBSelection <PadShape> { return self.padShape_property.prop }

  //····················································································································
  //   Atomic property: padStyle
  //····················································································································

  var padStyle_property = EBStoredProperty_PadStyle (defaultValue: PadStyle.traversing)

  //····················································································································

  var padStyle : PadStyle {
    get { return self.padStyle_property.propval }
    set { self.padStyle_property.setProp (newValue) }
  }

  //····················································································································

  var padStyle_property_selection : EBSelection <PadStyle> { return self.padStyle_property.prop }

  //····················································································································
  //   Atomic property: padNumber
  //····················································································································

  var padNumber_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var padNumber : Int {
    get { return self.padNumber_property.propval }
    set { self.padNumber_property.setProp (newValue) }
  }

  //····················································································································

  var padNumber_property_selection : EBSelection <Int> { return self.padNumber_property.prop }

  //····················································································································
  //   Atomic property: xCenterUnit
  //····················································································································

  var xCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var xCenterUnit : Int {
    get { return self.xCenterUnit_property.propval }
    set { self.xCenterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var xCenterUnit_property_selection : EBSelection <Int> { return self.xCenterUnit_property.prop }

  //····················································································································
  //   Atomic property: yCenterUnit
  //····················································································································

  var yCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var yCenterUnit : Int {
    get { return self.yCenterUnit_property.propval }
    set { self.yCenterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var yCenterUnit_property_selection : EBSelection <Int> { return self.yCenterUnit_property.prop }

  //····················································································································
  //   Atomic property: widthUnit
  //····················································································································

  var widthUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var widthUnit : Int {
    get { return self.widthUnit_property.propval }
    set { self.widthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var widthUnit_property_selection : EBSelection <Int> { return self.widthUnit_property.prop }

  //····················································································································
  //   Atomic property: heightUnit
  //····················································································································

  var heightUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var heightUnit : Int {
    get { return self.heightUnit_property.propval }
    set { self.heightUnit_property.setProp (newValue) }
  }

  //····················································································································

  var heightUnit_property_selection : EBSelection <Int> { return self.heightUnit_property.prop }

  //····················································································································
  //   Atomic property: holeDiameterUnit
  //····················································································································

  var holeDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var holeDiameterUnit : Int {
    get { return self.holeDiameterUnit_property.propval }
    set { self.holeDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var holeDiameterUnit_property_selection : EBSelection <Int> { return self.holeDiameterUnit_property.prop }

  //····················································································································
  //   Atomic property: annularRingUnit
  //····················································································································

  var annularRingUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var annularRingUnit : Int {
    get { return self.annularRingUnit_property.propval }
    set { self.annularRingUnit_property.setProp (newValue) }
  }

  //····················································································································

  var annularRingUnit_property_selection : EBSelection <Int> { return self.annularRingUnit_property.prop }

  //····················································································································
  //   To many property: slaves
  //····················································································································

  let slaves_property = StoredArrayOf_PackageSlavePad ()

  //····················································································································

  var slaves_property_selection : EBSelection < [PackageSlavePad] > {
    return self.slaves_property.prop
  }

  //····················································································································

  var slaves : [PackageSlavePad] {
    get { return self.slaves_property.propval }
    set { self.slaves_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: zone
  //····················································································································

  let zone_property = ToOneRelationship_PackagePad_zone ()

  //····················································································································

  var zone_property_selection : EBSelection <PackageZone?> {
    return .single (self.zone_property.propval)
  }

  //····················································································································

  var zone : PackageZone? {
    get { return self.zone_property.propval }
    set { self.zone_property.setProp (newValue) }
  }

  //····················································································································

  var zone_none : ToOneRelationship_PackagePad_zone { return self.zone_property }

  //····················································································································

  var zone_none_selection : EBSelection <Bool> {
    return .single (self.zone_property.propval == nil)
  }

  //····················································································································
  //   Transient property: padName
  //····················································································································

  var padName_property = EBTransientProperty_String ()

  //····················································································································

  var padName_property_selection : EBSelection <String> {
    return self.padName_property.prop
  }

  //····················································································································

  var padName : String? {
    switch self.padName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padIsTraversing
  //····················································································································

  var padIsTraversing_property = EBTransientProperty_Bool ()

  //····················································································································

  var padIsTraversing_property_selection : EBSelection <Bool> {
    return self.padIsTraversing_property.prop
  }

  //····················································································································

  var padIsTraversing : Bool? {
    switch self.padIsTraversing_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: annularRing
  //····················································································································

  var annularRing_property = EBTransientProperty_Int ()

  //····················································································································

  var annularRing_property_selection : EBSelection <Int> {
    return self.annularRing_property.prop
  }

  //····················································································································

  var annularRing : Int? {
    switch self.annularRing_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: zoneName
  //····················································································································

  var zoneName_property = EBTransientProperty_String ()

  //····················································································································

  var zoneName_property_selection : EBSelection <String> {
    return self.zoneName_property.prop
  }

  //····················································································································

  var zoneName : String? {
    switch self.zoneName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: noZone
  //····················································································································

  var noZone_property = EBTransientProperty_Bool ()

  //····················································································································

  var noZone_property_selection : EBSelection <Bool> {
    return self.noZone_property.prop
  }

  //····················································································································

  var noZone : Bool? {
    switch self.noZone_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: zoneAllowsManualRenumbering
  //····················································································································

  var zoneAllowsManualRenumbering_property = EBTransientProperty_Bool ()

  //····················································································································

  var zoneAllowsManualRenumbering_property_selection : EBSelection <Bool> {
    return self.zoneAllowsManualRenumbering_property.prop
  }

  //····················································································································

  var zoneAllowsManualRenumbering : Bool? {
    switch self.zoneAllowsManualRenumbering_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: slavePadCount
  //····················································································································

  var slavePadCount_property = EBTransientProperty_Int ()

  //····················································································································

  var slavePadCount_property_selection : EBSelection <Int> {
    return self.slavePadCount_property.prop
  }

  //····················································································································

  var slavePadCount : Int? {
    switch self.slavePadCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  var padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var padNumberDisplay_property_selection : EBSelection <EBShape> {
    return self.padNumberDisplay_property.prop
  }

  //····················································································································

  var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: xCenter
    self.xCenter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yCenter
    self.yCenter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: width
    self.width_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: height
    self.height_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padShape
    self.padShape_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padStyle
    self.padStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padNumber
    self.padNumber_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: widthUnit
    self.widthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: heightUnit
    self.heightUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: holeDiameterUnit
    self.holeDiameterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.ebUndoManager = self.ebUndoManager
  //--- To many property: slaves (has opposite relationship)
    self.slaves_property.ebUndoManager = self.ebUndoManager
    self.slaves_property.setOppositeRelationship = { [weak self] (_ inManagedObject :PackageSlavePad?) in
      inManagedObject?.master_property.setProp (self)
    }
  //--- To one property: zone
    self.zone_property.owner = self
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.padShape_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.padShape_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PackagePad_selectionDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.selectionDisplay_property)
    self.yCenter_property.addEBObserver (self.selectionDisplay_property)
    self.width_property.addEBObserver (self.selectionDisplay_property)
    self.height_property.addEBObserver (self.selectionDisplay_property)
    self.padShape_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: padName
    self.padName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.padNumber_property_selection.kind ()
        kind &= unwSelf.zone_property.zoneName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.padNumber_property_selection, unwSelf.zone_property.zoneName_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PackagePad_padName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padNumber_property.addEBObserver (self.padName_property)
    self.zone_property.addEBObserverOf_zoneName (self.padName_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeDiameter_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeDiameter_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PackagePad_issues (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.issues_property)
    self.yCenter_property.addEBObserver (self.issues_property)
    self.width_property.addEBObserver (self.issues_property)
    self.height_property.addEBObserver (self.issues_property)
    self.holeDiameter_property.addEBObserver (self.issues_property)
  //--- Atomic property: padIsTraversing
    self.padIsTraversing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.padStyle_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.padStyle_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_padIsTraversing (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padStyle_property.addEBObserver (self.padIsTraversing_property)
  //--- Atomic property: annularRing
    self.annularRing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeDiameter_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeDiameter_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_PackagePad_annularRing (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.width_property.addEBObserver (self.annularRing_property)
    self.height_property.addEBObserver (self.annularRing_property)
    self.holeDiameter_property.addEBObserver (self.annularRing_property)
  //--- Atomic property: zoneName
    self.zoneName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.zone_property.zoneName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.zone_property.zoneName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_zoneName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.zone_property.addEBObserverOf_zoneName (self.zoneName_property)
  //--- Atomic property: noZone
    self.noZone_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.zone_none_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.zone_none_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_noZone (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.zone_property.addEBObserver (self.noZone_property)
  //--- Atomic property: zoneAllowsManualRenumbering
    self.zoneAllowsManualRenumbering_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.zone_property.zoneNumbering_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.zone_property.zoneNumbering_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_zoneAllowsManualRenumbering (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.zone_property.addEBObserverOf_zoneNumbering (self.zoneAllowsManualRenumbering_property)
  //--- Atomic property: slavePadCount
    self.slavePadCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.slaves_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.slaves_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackagePad_slavePadCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.slaves_property.addEBObserver (self.slavePadCount_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeDiameter_property_selection.kind ()
        kind &= unwSelf.padShape_property_selection.kind ()
        kind &= unwSelf.padStyle_property_selection.kind ()
        kind &= g_Preferences!.frontSidePadColor_property_selection.kind ()
        kind &= g_Preferences!.displayPackageFrontSidePads_property_selection.kind ()
        kind &= g_Preferences!.backSidePadColor_property_selection.kind ()
        kind &= g_Preferences!.displayPackageBackSidePads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeDiameter_property_selection, unwSelf.padShape_property_selection, unwSelf.padStyle_property_selection, g_Preferences!.frontSidePadColor_property_selection, g_Preferences!.displayPackageFrontSidePads_property_selection, g_Preferences!.backSidePadColor_property_selection, g_Preferences!.displayPackageBackSidePads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10)) :
            return .single (transient_PackagePad_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.objectDisplay_property)
    self.yCenter_property.addEBObserver (self.objectDisplay_property)
    self.width_property.addEBObserver (self.objectDisplay_property)
    self.height_property.addEBObserver (self.objectDisplay_property)
    self.holeDiameter_property.addEBObserver (self.objectDisplay_property)
    self.padShape_property.addEBObserver (self.objectDisplay_property)
    self.padStyle_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageFrontSidePads_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageBackSidePads_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= g_Preferences!.padNumberFont_property_selection.kind ()
        kind &= g_Preferences!.padNumberColor_property_selection.kind ()
        kind &= unwSelf.padName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, g_Preferences!.padNumberFont_property_selection, g_Preferences!.padNumberColor_property_selection, unwSelf.padName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PackagePad_padNumberDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.addEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberFont_property.addEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberColor_property.addEBObserver (self.padNumberDisplay_property)
    self.padName_property.addEBObserver (self.padNumberDisplay_property)
  //--- Install undoers and opposite setter for relationships
    self.slaves_property.setOppositeRelationship = { [weak self] (_ inManagedObject : PackageSlavePad?) in
      inManagedObject?.master_property.setProp (self)
    }
  //--- Register properties for handling signature
    self.annularRingUnit_property.setSignatureObserver (observer: self)
    self.height_property.setSignatureObserver (observer: self)
    self.heightUnit_property.setSignatureObserver (observer: self)
    self.holeDiameter_property.setSignatureObserver (observer: self)
    self.holeDiameterUnit_property.setSignatureObserver (observer: self)
    self.padNumber_property.setSignatureObserver (observer: self)
    self.padShape_property.setSignatureObserver (observer: self)
    self.padStyle_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.widthUnit_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.xCenterUnit_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
    self.yCenterUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.xCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.yCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.width_property.removeEBObserver (self.selectionDisplay_property)
    self.height_property.removeEBObserver (self.selectionDisplay_property)
    self.padShape_property.removeEBObserver (self.selectionDisplay_property)
    self.padNumber_property.removeEBObserver (self.padName_property)
    self.zone_property.removeEBObserverOf_zoneName (self.padName_property)
    self.xCenter_property.removeEBObserver (self.issues_property)
    self.yCenter_property.removeEBObserver (self.issues_property)
    self.width_property.removeEBObserver (self.issues_property)
    self.height_property.removeEBObserver (self.issues_property)
    self.holeDiameter_property.removeEBObserver (self.issues_property)
    self.padStyle_property.removeEBObserver (self.padIsTraversing_property)
    self.width_property.removeEBObserver (self.annularRing_property)
    self.height_property.removeEBObserver (self.annularRing_property)
    self.holeDiameter_property.removeEBObserver (self.annularRing_property)
    self.zone_property.removeEBObserverOf_zoneName (self.zoneName_property)
    self.zone_property.removeEBObserver (self.noZone_property)
    self.zone_property.removeEBObserverOf_zoneNumbering (self.zoneAllowsManualRenumbering_property)
    self.slaves_property.removeEBObserver (self.slavePadCount_property)
    self.xCenter_property.removeEBObserver (self.objectDisplay_property)
    self.yCenter_property.removeEBObserver (self.objectDisplay_property)
    self.width_property.removeEBObserver (self.objectDisplay_property)
    self.height_property.removeEBObserver (self.objectDisplay_property)
    self.holeDiameter_property.removeEBObserver (self.objectDisplay_property)
    self.padShape_property.removeEBObserver (self.objectDisplay_property)
    self.padStyle_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageFrontSidePads_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageBackSidePads_property.removeEBObserver (self.objectDisplay_property)
    self.xCenter_property.removeEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.removeEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberFont_property.removeEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberColor_property.removeEBObserver (self.padNumberDisplay_property)
    self.padName_property.removeEBObserver (self.padNumberDisplay_property)
 //   self.slaves_property.setOppositeRelationship = nil
  //--- Unregister properties for handling signature
    self.annularRingUnit_property.setSignatureObserver (observer: nil)
    self.height_property.setSignatureObserver (observer: nil)
    self.heightUnit_property.setSignatureObserver (observer: nil)
    self.holeDiameter_property.setSignatureObserver (observer: nil)
    self.holeDiameterUnit_property.setSignatureObserver (observer: nil)
    self.padNumber_property.setSignatureObserver (observer: nil)
    self.padShape_property.setSignatureObserver (observer: nil)
    self.padStyle_property.setSignatureObserver (observer: nil)
    self.width_property.setSignatureObserver (observer: nil)
    self.widthUnit_property.setSignatureObserver (observer: nil)
    self.xCenter_property.setSignatureObserver (observer: nil)
    self.xCenterUnit_property.setSignatureObserver (observer: nil)
    self.yCenter_property.setSignatureObserver (observer: nil)
    self.yCenterUnit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "xCenter",
      idx:self.xCenter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenter_property.mObserverExplorer,
      valueExplorer:&self.xCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenter",
      idx:self.yCenter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenter_property.mObserverExplorer,
      valueExplorer:&self.yCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "width",
      idx:self.width_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.width_property.mObserverExplorer,
      valueExplorer:&self.width_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "height",
      idx:self.height_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.height_property.mObserverExplorer,
      valueExplorer:&self.height_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeDiameter",
      idx:self.holeDiameter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeDiameter_property.mObserverExplorer,
      valueExplorer:&self.holeDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padShape",
      idx:self.padShape_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padShape_property.mObserverExplorer,
      valueExplorer:&self.padShape_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padStyle",
      idx:self.padStyle_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padStyle_property.mObserverExplorer,
      valueExplorer:&self.padStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumber",
      idx:self.padNumber_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padNumber_property.mObserverExplorer,
      valueExplorer:&self.padNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenterUnit",
      idx:self.xCenterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenterUnit_property.mObserverExplorer,
      valueExplorer:&self.xCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenterUnit",
      idx:self.yCenterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenterUnit_property.mObserverExplorer,
      valueExplorer:&self.yCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "widthUnit",
      idx:self.widthUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.widthUnit_property.mObserverExplorer,
      valueExplorer:&self.widthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "heightUnit",
      idx:self.heightUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.heightUnit_property.mObserverExplorer,
      valueExplorer:&self.heightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeDiameterUnit",
      idx:self.holeDiameterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeDiameterUnit_property.mObserverExplorer,
      valueExplorer:&self.holeDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "annularRingUnit",
      idx:self.annularRingUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.annularRingUnit_property.mObserverExplorer,
      valueExplorer:&self.annularRingUnit_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padName",
      idx:self.padName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padName_property.mObserverExplorer,
      valueExplorer:&self.padName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padIsTraversing",
      idx:self.padIsTraversing_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padIsTraversing_property.mObserverExplorer,
      valueExplorer:&self.padIsTraversing_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "annularRing",
      idx:self.annularRing_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.annularRing_property.mObserverExplorer,
      valueExplorer:&self.annularRing_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoneName",
      idx:self.zoneName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoneName_property.mObserverExplorer,
      valueExplorer:&self.zoneName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "noZone",
      idx:self.noZone_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.noZone_property.mObserverExplorer,
      valueExplorer:&self.noZone_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoneAllowsManualRenumbering",
      idx:self.zoneAllowsManualRenumbering_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoneAllowsManualRenumbering_property.mObserverExplorer,
      valueExplorer:&self.zoneAllowsManualRenumbering_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "slavePadCount",
      idx:self.slavePadCount_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.slavePadCount_property.mObserverExplorer,
      valueExplorer:&self.slavePadCount_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumberDisplay",
      idx:self.padNumberDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padNumberDisplay_property.mObserverExplorer,
      valueExplorer:&self.padNumberDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "slaves",
      idx:slaves_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&slaves_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "zone",
      idx:self.zone_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.zone_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: xCenter
    self.xCenter_property.mObserverExplorer = nil
    self.xCenter_property.mValueExplorer = nil
  //--- Atomic property: yCenter
    self.yCenter_property.mObserverExplorer = nil
    self.yCenter_property.mValueExplorer = nil
  //--- Atomic property: width
    self.width_property.mObserverExplorer = nil
    self.width_property.mValueExplorer = nil
  //--- Atomic property: height
    self.height_property.mObserverExplorer = nil
    self.height_property.mValueExplorer = nil
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.mObserverExplorer = nil
    self.holeDiameter_property.mValueExplorer = nil
  //--- Atomic property: padShape
    self.padShape_property.mObserverExplorer = nil
    self.padShape_property.mValueExplorer = nil
  //--- Atomic property: padStyle
    self.padStyle_property.mObserverExplorer = nil
    self.padStyle_property.mValueExplorer = nil
  //--- Atomic property: padNumber
    self.padNumber_property.mObserverExplorer = nil
    self.padNumber_property.mValueExplorer = nil
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.mObserverExplorer = nil
    self.xCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.mObserverExplorer = nil
    self.yCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: widthUnit
    self.widthUnit_property.mObserverExplorer = nil
    self.widthUnit_property.mValueExplorer = nil
  //--- Atomic property: heightUnit
    self.heightUnit_property.mObserverExplorer = nil
    self.heightUnit_property.mValueExplorer = nil
  //--- Atomic property: holeDiameterUnit
    self.holeDiameterUnit_property.mObserverExplorer = nil
    self.holeDiameterUnit_property.mValueExplorer = nil
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.mObserverExplorer = nil
    self.annularRingUnit_property.mValueExplorer = nil
  //--- To many property: slaves
    self.slaves_property.mValueExplorer = nil
  //--- To one property: zone
    self.zone_property.mObserverExplorer = nil
    self.zone_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.slaves_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.zone_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: xCenter
    self.xCenter_property.storeIn (dictionary: ioDictionary, forKey:"xCenter")
  //--- Atomic property: yCenter
    self.yCenter_property.storeIn (dictionary: ioDictionary, forKey:"yCenter")
  //--- Atomic property: width
    self.width_property.storeIn (dictionary: ioDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.storeIn (dictionary: ioDictionary, forKey:"height")
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.storeIn (dictionary: ioDictionary, forKey:"holeDiameter")
  //--- Atomic property: padShape
    self.padShape_property.storeIn (dictionary: ioDictionary, forKey:"padShape")
  //--- Atomic property: padStyle
    self.padStyle_property.storeIn (dictionary: ioDictionary, forKey:"padStyle")
  //--- Atomic property: padNumber
    self.padNumber_property.storeIn (dictionary: ioDictionary, forKey:"padNumber")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.storeIn (dictionary: ioDictionary, forKey:"xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.storeIn (dictionary: ioDictionary, forKey:"yCenterUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.storeIn (dictionary: ioDictionary, forKey:"widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.storeIn (dictionary: ioDictionary, forKey:"heightUnit")
  //--- Atomic property: holeDiameterUnit
    self.holeDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey:"holeDiameterUnit")
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.storeIn (dictionary: ioDictionary, forKey:"annularRingUnit")
  //--- To many property: slaves
    self.store (
      managedObjectArray: self.slaves_property.propval,
      relationshipName: "slaves",
      intoDictionary: ioDictionary
    )
  //--- To one property: zone
    self.store (managedObject:self.zone_property.propval,
      relationshipName: "zone",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: slaves
    self.slaves_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "slaves",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageSlavePad])
  //--- To one property: zone
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "zone",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PackageZone {
        self.zone_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: xCenter
    self.xCenter_property.readFrom (dictionary: inDictionary, forKey:"xCenter")
  //--- Atomic property: yCenter
    self.yCenter_property.readFrom (dictionary: inDictionary, forKey:"yCenter")
  //--- Atomic property: width
    self.width_property.readFrom (dictionary: inDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.readFrom (dictionary: inDictionary, forKey:"height")
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.readFrom (dictionary: inDictionary, forKey:"holeDiameter")
  //--- Atomic property: padShape
    self.padShape_property.readFrom (dictionary: inDictionary, forKey:"padShape")
  //--- Atomic property: padStyle
    self.padStyle_property.readFrom (dictionary: inDictionary, forKey:"padStyle")
  //--- Atomic property: padNumber
    self.padNumber_property.readFrom (dictionary: inDictionary, forKey:"padNumber")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.readFrom (dictionary: inDictionary, forKey:"xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.readFrom (dictionary: inDictionary, forKey:"yCenterUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.readFrom (dictionary: inDictionary, forKey:"widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.readFrom (dictionary: inDictionary, forKey:"heightUnit")
  //--- Atomic property: holeDiameterUnit
    self.holeDiameterUnit_property.readFrom (dictionary: inDictionary, forKey:"holeDiameterUnit")
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.readFrom (dictionary: inDictionary, forKey:"annularRingUnit")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: slaves
    for managedObject in self.slaves_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: zone
    if let managedObject = self.zone_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: slaves
    for managedObject in self.slaves_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: zone
    if let managedObject = self.zone_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.annularRingUnit_property.signature ())
    crc.accumulateUInt32 (self.height_property.signature ())
    crc.accumulateUInt32 (self.heightUnit_property.signature ())
    crc.accumulateUInt32 (self.holeDiameter_property.signature ())
    crc.accumulateUInt32 (self.holeDiameterUnit_property.signature ())
    crc.accumulateUInt32 (self.padNumber_property.signature ())
    crc.accumulateUInt32 (self.padShape_property.signature ())
    crc.accumulateUInt32 (self.padStyle_property.signature ())
    crc.accumulateUInt32 (self.width_property.signature ())
    crc.accumulateUInt32 (self.widthUnit_property.signature ())
    crc.accumulateUInt32 (self.xCenter_property.signature ())
    crc.accumulateUInt32 (self.xCenterUnit_property.signature ())
    crc.accumulateUInt32 (self.yCenter_property.signature ())
    crc.accumulateUInt32 (self.yCenterUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackagePad : ReadOnlyAbstractArrayProperty <PackagePad> {

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenter_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
        managedObject.xCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenter_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenter_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
        managedObject.yCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenter_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_width.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_width.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_width_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_width.apply { (_ observer : EBEvent) in
        managedObject.width_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_width_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_width.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.width_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_height.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_height.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_height_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_height.apply { (_ observer : EBEvent) in
        managedObject.height_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_height_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_height.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.height_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeDiameter' stored property
  //····················································································································

  private var mObserversOf_holeDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeDiameter_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_holeDiameter.apply { (_ observer : EBEvent) in
        managedObject.holeDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeDiameter_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_holeDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.holeDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padShape' stored property
  //····················································································································

  private var mObserversOf_padShape = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padShape.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padShape_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padShape.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padShape_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padShape_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padShape.apply { (_ observer : EBEvent) in
        managedObject.padShape_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padShape_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_padShape.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padShape_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padStyle' stored property
  //····················································································································

  private var mObserversOf_padStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padStyle_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padStyle.apply { (_ observer : EBEvent) in
        managedObject.padStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padStyle_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_padStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumber' stored property
  //····················································································································

  private var mObserversOf_padNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumber_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padNumber.apply { (_ observer : EBEvent) in
        managedObject.padNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumber_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_padNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private var mObserversOf_xCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenterUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
        managedObject.xCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenterUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private var mObserversOf_yCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenterUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
        managedObject.yCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenterUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'widthUnit' stored property
  //····················································································································

  private var mObserversOf_widthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_widthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_widthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_widthUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_widthUnit.apply { (_ observer : EBEvent) in
        managedObject.widthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_widthUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_widthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.widthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'heightUnit' stored property
  //····················································································································

  private var mObserversOf_heightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_heightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_heightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_heightUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_heightUnit.apply { (_ observer : EBEvent) in
        managedObject.heightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_heightUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_heightUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.heightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_holeDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeDiameterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeDiameterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeDiameterUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_holeDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.holeDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeDiameterUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_holeDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.holeDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'annularRingUnit' stored property
  //····················································································································

  private var mObserversOf_annularRingUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_annularRingUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRingUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_annularRingUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRingUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_annularRingUnit_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_annularRingUnit.apply { (_ observer : EBEvent) in
        managedObject.annularRingUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_annularRingUnit_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    self.mObserversOf_annularRingUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.annularRingUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padName' transient property
  //····················································································································

  private var mObserversOf_padName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padName_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padName.apply { (_ observer : EBEvent) in
        managedObject.padName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padName_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padName.apply { (_ observer : EBEvent) in
        managedObject.padName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padIsTraversing' transient property
  //····················································································································

  private var mObserversOf_padIsTraversing = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padIsTraversing.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padIsTraversing_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padIsTraversing.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padIsTraversing_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padIsTraversing_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padIsTraversing.apply { (_ observer : EBEvent) in
        managedObject.padIsTraversing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padIsTraversing_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padIsTraversing.apply { (_ observer : EBEvent) in
        managedObject.padIsTraversing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'annularRing' transient property
  //····················································································································

  private var mObserversOf_annularRing = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_annularRing.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRing_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_annularRing.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRing_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_annularRing_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_annularRing.apply { (_ observer : EBEvent) in
        managedObject.annularRing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_annularRing_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_annularRing.apply { (_ observer : EBEvent) in
        managedObject.annularRing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoneName' transient property
  //····················································································································

  private var mObserversOf_zoneName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoneName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoneName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoneName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoneName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoneName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoneName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoneName_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_zoneName.apply { (_ observer : EBEvent) in
        managedObject.zoneName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoneName_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_zoneName.apply { (_ observer : EBEvent) in
        managedObject.zoneName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'noZone' transient property
  //····················································································································

  private var mObserversOf_noZone = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_noZone (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_noZone.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.noZone_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_noZone (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_noZone.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.noZone_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_noZone_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_noZone.apply { (_ observer : EBEvent) in
        managedObject.noZone_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_noZone_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_noZone.apply { (_ observer : EBEvent) in
        managedObject.noZone_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoneAllowsManualRenumbering' transient property
  //····················································································································

  private var mObserversOf_zoneAllowsManualRenumbering = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoneAllowsManualRenumbering (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoneAllowsManualRenumbering.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoneAllowsManualRenumbering_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoneAllowsManualRenumbering (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoneAllowsManualRenumbering.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoneAllowsManualRenumbering_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoneAllowsManualRenumbering_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_zoneAllowsManualRenumbering.apply { (_ observer : EBEvent) in
        managedObject.zoneAllowsManualRenumbering_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoneAllowsManualRenumbering_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_zoneAllowsManualRenumbering.apply { (_ observer : EBEvent) in
        managedObject.zoneAllowsManualRenumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'slavePadCount' transient property
  //····················································································································

  private var mObserversOf_slavePadCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_slavePadCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_slavePadCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.slavePadCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_slavePadCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_slavePadCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.slavePadCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_slavePadCount_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_slavePadCount.apply { (_ observer : EBEvent) in
        managedObject.slavePadCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_slavePadCount_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_slavePadCount.apply { (_ observer : EBEvent) in
        managedObject.slavePadCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : Set<PackagePad>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackagePad : ReadOnlyArrayOf_PackagePad {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [PackagePad] > > = nil

  //····················································································································

  override var propset : Set <PackagePad> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [PackagePad] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [PackagePad] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <PackagePad> ()

  //····················································································································

  private var mCachedValue : EBSelection < [PackagePad] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <PackagePad>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <PackagePad> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_xCenter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yCenter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_width_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_height_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_holeDiameter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padShape_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padStyle_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padNumber_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xCenterUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yCenterUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_widthUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_heightUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_holeDiameterUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_annularRingUnit_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_issues_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padIsTraversing_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_annularRing_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_zoneName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_noZone_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_zoneAllowsManualRenumbering_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_slavePadCount_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_xCenter_toElementsOfSet (addedSet)
      self.addEBObserversOf_yCenter_toElementsOfSet (addedSet)
      self.addEBObserversOf_width_toElementsOfSet (addedSet)
      self.addEBObserversOf_height_toElementsOfSet (addedSet)
      self.addEBObserversOf_holeDiameter_toElementsOfSet (addedSet)
      self.addEBObserversOf_padShape_toElementsOfSet (addedSet)
      self.addEBObserversOf_padStyle_toElementsOfSet (addedSet)
      self.addEBObserversOf_padNumber_toElementsOfSet (addedSet)
      self.addEBObserversOf_xCenterUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_yCenterUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_widthUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_heightUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_holeDiameterUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_annularRingUnit_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_padName_toElementsOfSet (addedSet)
      self.addEBObserversOf_issues_toElementsOfSet (addedSet)
      self.addEBObserversOf_padIsTraversing_toElementsOfSet (addedSet)
      self.addEBObserversOf_annularRing_toElementsOfSet (addedSet)
      self.addEBObserversOf_zoneName_toElementsOfSet (addedSet)
      self.addEBObserversOf_noZone_toElementsOfSet (addedSet)
      self.addEBObserversOf_zoneAllowsManualRenumbering_toElementsOfSet (addedSet)
      self.addEBObserversOf_slavePadCount_toElementsOfSet (addedSet)
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_padNumberDisplay_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackagePad : ReadOnlyArrayOf_PackagePad {

  //····················································································································
 
  func setProp (_ value :  [PackagePad]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackagePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackagePad : ReadWriteArrayOf_PackagePad, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : PackagePad?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackagePad] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PackagePad") as? PackagePad {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <PackagePad> ()
  private var mValue = [PackagePad] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.setOppositeRelationship? (nil)
            managedObject.xCenter_property.mSetterDelegate = nil
            managedObject.yCenter_property.mSetterDelegate = nil
            managedObject.width_property.mSetterDelegate = nil
            managedObject.height_property.mSetterDelegate = nil
            managedObject.holeDiameter_property.mSetterDelegate = nil
            managedObject.padShape_property.mSetterDelegate = nil
            managedObject.padStyle_property.mSetterDelegate = nil
            managedObject.padNumber_property.mSetterDelegate = nil
            managedObject.xCenterUnit_property.mSetterDelegate = nil
            managedObject.yCenterUnit_property.mSetterDelegate = nil
            managedObject.widthUnit_property.mSetterDelegate = nil
            managedObject.heightUnit_property.mSetterDelegate = nil
            managedObject.holeDiameterUnit_property.mSetterDelegate = nil
            managedObject.annularRingUnit_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_xCenter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_yCenter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_height_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padShape_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padStyle_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padNumber_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_xCenterUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_yCenterUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_widthUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_heightUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_holeDiameterUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_annularRingUnit_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padIsTraversing_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_annularRing_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_zoneName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_noZone_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_zoneAllowsManualRenumbering_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_slavePadCount_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : PackagePad in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.xCenter_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.yCenter_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.width_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.height_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.holeDiameter_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.padShape_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.padStyle_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.padNumber_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.xCenterUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.yCenterUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.widthUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.heightUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.holeDiameterUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.annularRingUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_xCenter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_yCenter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_width_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_height_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padShape_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padStyle_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padNumber_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_xCenterUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_yCenterUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_widthUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_heightUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_holeDiameterUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_annularRingUnit_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padIsTraversing_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_annularRing_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_zoneName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_noZone_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_zoneAllowsManualRenumbering_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_slavePadCount_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padNumberDisplay_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [PackagePad] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [PackagePad]) { self.mValue = inValue }

  //····················································································································

  override var propval : [PackagePad] { return self.mValue }

  //····················································································································

  override var propset : Set <PackagePad> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [PackagePad]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PackagePad) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PackagePad) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: zone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_PackagePad_zone : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : PackagePad? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : PackageZone? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Remove property observers of old object
        oldValue?.height_property.removeEBObserversFrom (&self.mObserversOf_height)
        oldValue?.heightUnit_property.removeEBObserversFrom (&self.mObserversOf_heightUnit)
        oldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues)
        oldValue?.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay)
        oldValue?.rect_property.removeEBObserversFrom (&self.mObserversOf_rect)
        oldValue?.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay)
        oldValue?.width_property.removeEBObserversFrom (&self.mObserversOf_width)
        oldValue?.widthUnit_property.removeEBObserversFrom (&self.mObserversOf_widthUnit)
        oldValue?.x_property.removeEBObserversFrom (&self.mObserversOf_x)
        oldValue?.xName_property.removeEBObserversFrom (&self.mObserversOf_xName)
        oldValue?.xNameUnit_property.removeEBObserversFrom (&self.mObserversOf_xNameUnit)
        oldValue?.xUnit_property.removeEBObserversFrom (&self.mObserversOf_xUnit)
        oldValue?.y_property.removeEBObserversFrom (&self.mObserversOf_y)
        oldValue?.yName_property.removeEBObserversFrom (&self.mObserversOf_yName)
        oldValue?.yNameUnit_property.removeEBObserversFrom (&self.mObserversOf_yNameUnit)
        oldValue?.yUnit_property.removeEBObserversFrom (&self.mObserversOf_yUnit)
        oldValue?.zoneName_property.removeEBObserversFrom (&self.mObserversOf_zoneName)
        oldValue?.zoneNumbering_property.removeEBObserversFrom (&self.mObserversOf_zoneNumbering)
      //--- Add property observers to new object
        self.mValue?.height_property.addEBObserversFrom (&self.mObserversOf_height)
        self.mValue?.heightUnit_property.addEBObserversFrom (&self.mObserversOf_heightUnit)
        self.mValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues)
        self.mValue?.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay)
        self.mValue?.rect_property.addEBObserversFrom (&self.mObserversOf_rect)
        self.mValue?.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay)
        self.mValue?.width_property.addEBObserversFrom (&self.mObserversOf_width)
        self.mValue?.widthUnit_property.addEBObserversFrom (&self.mObserversOf_widthUnit)
        self.mValue?.x_property.addEBObserversFrom (&self.mObserversOf_x)
        self.mValue?.xName_property.addEBObserversFrom (&self.mObserversOf_xName)
        self.mValue?.xNameUnit_property.addEBObserversFrom (&self.mObserversOf_xNameUnit)
        self.mValue?.xUnit_property.addEBObserversFrom (&self.mObserversOf_xUnit)
        self.mValue?.y_property.addEBObserversFrom (&self.mObserversOf_y)
        self.mValue?.yName_property.addEBObserversFrom (&self.mObserversOf_yName)
        self.mValue?.yNameUnit_property.addEBObserversFrom (&self.mObserversOf_yNameUnit)
        self.mValue?.yUnit_property.addEBObserversFrom (&self.mObserversOf_yUnit)
        self.mValue?.zoneName_property.addEBObserversFrom (&self.mObserversOf_zoneName)
        self.mValue?.zoneNumbering_property.addEBObserversFrom (&self.mObserversOf_zoneNumbering)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : PackageZone? { return self.mValue }

  var prop : EBSelection <PackageZone?> { return .single (self.mValue) }

  func setProp (_ value : PackageZone?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : PackageZone?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PackageZone) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable property: height
  //····················································································································

  private var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  var height_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.height_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBEvent) {
    self.mObserversOf_height.insert (inObserver)
    if let object = self.propval {
      object.height_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBEvent) {
    self.mObserversOf_height.remove (inObserver)
    if let object = self.propval {
      object.height_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: heightUnit
  //····················································································································

  private var mObserversOf_heightUnit = EBWeakEventSet ()

  //····················································································································

  var heightUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.heightUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.mObserversOf_heightUnit.insert (inObserver)
    if let object = self.propval {
      object.heightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.mObserversOf_heightUnit.remove (inObserver)
    if let object = self.propval {
      object.heightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: issues
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.insert (inObserver)
    if let object = self.propval {
      object.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.remove (inObserver)
    if let object = self.propval {
      object.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: objectDisplay
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_objectDisplay.insert (inObserver)
    if let object = self.propval {
      object.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_objectDisplay.remove (inObserver)
    if let object = self.propval {
      object.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: rect
  //····················································································································

  private var mObserversOf_rect = EBWeakEventSet ()

  //····················································································································

  var rect_property_selection : EBSelection <CanariRect?> {
    if let model = self.propval {
      switch (model.rect_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_rect (_ inObserver : EBEvent) {
    self.mObserversOf_rect.insert (inObserver)
    if let object = self.propval {
      object.rect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_rect (_ inObserver : EBEvent) {
    self.mObserversOf_rect.remove (inObserver)
    if let object = self.propval {
      object.rect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectionDisplay
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_selectionDisplay.insert (inObserver)
    if let object = self.propval {
      object.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_selectionDisplay.remove (inObserver)
    if let object = self.propval {
      object.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: width
  //····················································································································

  private var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  var width_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.width_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBEvent) {
    self.mObserversOf_width.insert (inObserver)
    if let object = self.propval {
      object.width_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBEvent) {
    self.mObserversOf_width.remove (inObserver)
    if let object = self.propval {
      object.width_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: widthUnit
  //····················································································································

  private var mObserversOf_widthUnit = EBWeakEventSet ()

  //····················································································································

  var widthUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.widthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_widthUnit.insert (inObserver)
    if let object = self.propval {
      object.widthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_widthUnit.remove (inObserver)
    if let object = self.propval {
      object.widthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: x
  //····················································································································

  private var mObserversOf_x = EBWeakEventSet ()

  //····················································································································

  var x_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.x_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_x (_ inObserver : EBEvent) {
    self.mObserversOf_x.insert (inObserver)
    if let object = self.propval {
      object.x_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_x (_ inObserver : EBEvent) {
    self.mObserversOf_x.remove (inObserver)
    if let object = self.propval {
      object.x_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: xName
  //····················································································································

  private var mObserversOf_xName = EBWeakEventSet ()

  //····················································································································

  var xName_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xName (_ inObserver : EBEvent) {
    self.mObserversOf_xName.insert (inObserver)
    if let object = self.propval {
      object.xName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xName (_ inObserver : EBEvent) {
    self.mObserversOf_xName.remove (inObserver)
    if let object = self.propval {
      object.xName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: xNameUnit
  //····················································································································

  private var mObserversOf_xNameUnit = EBWeakEventSet ()

  //····················································································································

  var xNameUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xNameUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xNameUnit (_ inObserver : EBEvent) {
    self.mObserversOf_xNameUnit.insert (inObserver)
    if let object = self.propval {
      object.xNameUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xNameUnit (_ inObserver : EBEvent) {
    self.mObserversOf_xNameUnit.remove (inObserver)
    if let object = self.propval {
      object.xNameUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: xUnit
  //····················································································································

  private var mObserversOf_xUnit = EBWeakEventSet ()

  //····················································································································

  var xUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xUnit (_ inObserver : EBEvent) {
    self.mObserversOf_xUnit.insert (inObserver)
    if let object = self.propval {
      object.xUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xUnit (_ inObserver : EBEvent) {
    self.mObserversOf_xUnit.remove (inObserver)
    if let object = self.propval {
      object.xUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: y
  //····················································································································

  private var mObserversOf_y = EBWeakEventSet ()

  //····················································································································

  var y_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.y_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_y (_ inObserver : EBEvent) {
    self.mObserversOf_y.insert (inObserver)
    if let object = self.propval {
      object.y_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_y (_ inObserver : EBEvent) {
    self.mObserversOf_y.remove (inObserver)
    if let object = self.propval {
      object.y_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: yName
  //····················································································································

  private var mObserversOf_yName = EBWeakEventSet ()

  //····················································································································

  var yName_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yName (_ inObserver : EBEvent) {
    self.mObserversOf_yName.insert (inObserver)
    if let object = self.propval {
      object.yName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yName (_ inObserver : EBEvent) {
    self.mObserversOf_yName.remove (inObserver)
    if let object = self.propval {
      object.yName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: yNameUnit
  //····················································································································

  private var mObserversOf_yNameUnit = EBWeakEventSet ()

  //····················································································································

  var yNameUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yNameUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yNameUnit (_ inObserver : EBEvent) {
    self.mObserversOf_yNameUnit.insert (inObserver)
    if let object = self.propval {
      object.yNameUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yNameUnit (_ inObserver : EBEvent) {
    self.mObserversOf_yNameUnit.remove (inObserver)
    if let object = self.propval {
      object.yNameUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: yUnit
  //····················································································································

  private var mObserversOf_yUnit = EBWeakEventSet ()

  //····················································································································

  var yUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yUnit (_ inObserver : EBEvent) {
    self.mObserversOf_yUnit.insert (inObserver)
    if let object = self.propval {
      object.yUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yUnit (_ inObserver : EBEvent) {
    self.mObserversOf_yUnit.remove (inObserver)
    if let object = self.propval {
      object.yUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: zoneName
  //····················································································································

  private var mObserversOf_zoneName = EBWeakEventSet ()

  //····················································································································

  var zoneName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.zoneName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_zoneName (_ inObserver : EBEvent) {
    self.mObserversOf_zoneName.insert (inObserver)
    if let object = self.propval {
      object.zoneName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoneName (_ inObserver : EBEvent) {
    self.mObserversOf_zoneName.remove (inObserver)
    if let object = self.propval {
      object.zoneName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: zoneNumbering
  //····················································································································

  private var mObserversOf_zoneNumbering = EBWeakEventSet ()

  //····················································································································

  var zoneNumbering_property_selection : EBSelection <PadNumbering?> {
    if let model = self.propval {
      switch (model.zoneNumbering_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_zoneNumbering (_ inObserver : EBEvent) {
    self.mObserversOf_zoneNumbering.insert (inObserver)
    if let object = self.propval {
      object.zoneNumbering_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoneNumbering (_ inObserver : EBEvent) {
    self.mObserversOf_zoneNumbering.remove (inObserver)
    if let object = self.propval {
      object.zoneNumbering_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
