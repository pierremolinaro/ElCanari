//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_x : class {
  var x : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_y : class {
  var y : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_width : class {
  var width : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_height : class {
  var height : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_xUnit : class {
  var xUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_yUnit : class {
  var yUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_widthUnit : class {
  var widthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_heightUnit : class {
  var heightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_zoneName : class {
  var zoneName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_displayZoneName : class {
  var displayZoneName : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_xName : class {
  var xName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_yName : class {
  var yName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_xNameUnit : class {
  var xNameUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_yNameUnit : class {
  var yNameUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_zoneNumbering : class {
  var zoneNumbering : PadNumbering { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_rect : class {
  var rect : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageZone : PackageObject,
         PackageZone_x,
         PackageZone_y,
         PackageZone_width,
         PackageZone_height,
         PackageZone_xUnit,
         PackageZone_yUnit,
         PackageZone_widthUnit,
         PackageZone_heightUnit,
         PackageZone_zoneName,
         PackageZone_displayZoneName,
         PackageZone_xName,
         PackageZone_yName,
         PackageZone_xNameUnit,
         PackageZone_yNameUnit,
         PackageZone_zoneNumbering,
         PackageZone_objectDisplay,
         PackageZone_issues,
         PackageZone_rect,
         PackageZone_selectionDisplay {

  //····················································································································
  //   Atomic property: x
  //····················································································································

  let x_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var x : Int {
    get { return self.x_property.propval }
    set { self.x_property.setProp (newValue) }
  }

  //····················································································································

  var x_property_selection : EBSelection <Int> { return self.x_property.prop }

  //····················································································································
  //   Atomic property: y
  //····················································································································

  let y_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var y : Int {
    get { return self.y_property.propval }
    set { self.y_property.setProp (newValue) }
  }

  //····················································································································

  var y_property_selection : EBSelection <Int> { return self.y_property.prop }

  //····················································································································
  //   Atomic property: width
  //····················································································································

  let width_property = EBStoredProperty_Int (defaultValue: 457200)

  //····················································································································

  var width : Int {
    get { return self.width_property.propval }
    set { self.width_property.setProp (newValue) }
  }

  //····················································································································

  var width_property_selection : EBSelection <Int> { return self.width_property.prop }

  //····················································································································
  //   Atomic property: height
  //····················································································································

  let height_property = EBStoredProperty_Int (defaultValue: 457200)

  //····················································································································

  var height : Int {
    get { return self.height_property.propval }
    set { self.height_property.setProp (newValue) }
  }

  //····················································································································

  var height_property_selection : EBSelection <Int> { return self.height_property.prop }

  //····················································································································
  //   Atomic property: xUnit
  //····················································································································

  let xUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var xUnit : Int {
    get { return self.xUnit_property.propval }
    set { self.xUnit_property.setProp (newValue) }
  }

  //····················································································································

  var xUnit_property_selection : EBSelection <Int> { return self.xUnit_property.prop }

  //····················································································································
  //   Atomic property: yUnit
  //····················································································································

  let yUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var yUnit : Int {
    get { return self.yUnit_property.propval }
    set { self.yUnit_property.setProp (newValue) }
  }

  //····················································································································

  var yUnit_property_selection : EBSelection <Int> { return self.yUnit_property.prop }

  //····················································································································
  //   Atomic property: widthUnit
  //····················································································································

  let widthUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var widthUnit : Int {
    get { return self.widthUnit_property.propval }
    set { self.widthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var widthUnit_property_selection : EBSelection <Int> { return self.widthUnit_property.prop }

  //····················································································································
  //   Atomic property: heightUnit
  //····················································································································

  let heightUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var heightUnit : Int {
    get { return self.heightUnit_property.propval }
    set { self.heightUnit_property.setProp (newValue) }
  }

  //····················································································································

  var heightUnit_property_selection : EBSelection <Int> { return self.heightUnit_property.prop }

  //····················································································································
  //   Atomic property: zoneName
  //····················································································································

  let zoneName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var zoneName : String {
    get { return self.zoneName_property.propval }
    set { self.zoneName_property.setProp (newValue) }
  }

  //····················································································································

  var zoneName_property_selection : EBSelection <String> { return self.zoneName_property.prop }

  //····················································································································
  //   Atomic property: displayZoneName
  //····················································································································

  let displayZoneName_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var displayZoneName : Bool {
    get { return self.displayZoneName_property.propval }
    set { self.displayZoneName_property.setProp (newValue) }
  }

  //····················································································································

  var displayZoneName_property_selection : EBSelection <Bool> { return self.displayZoneName_property.prop }

  //····················································································································
  //   Atomic property: xName
  //····················································································································

  let xName_property = EBStoredProperty_Int (defaultValue: 228600)

  //····················································································································

  var xName : Int {
    get { return self.xName_property.propval }
    set { self.xName_property.setProp (newValue) }
  }

  //····················································································································

  var xName_property_selection : EBSelection <Int> { return self.xName_property.prop }

  //····················································································································
  //   Atomic property: yName
  //····················································································································

  let yName_property = EBStoredProperty_Int (defaultValue: 228600)

  //····················································································································

  var yName : Int {
    get { return self.yName_property.propval }
    set { self.yName_property.setProp (newValue) }
  }

  //····················································································································

  var yName_property_selection : EBSelection <Int> { return self.yName_property.prop }

  //····················································································································
  //   Atomic property: xNameUnit
  //····················································································································

  let xNameUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var xNameUnit : Int {
    get { return self.xNameUnit_property.propval }
    set { self.xNameUnit_property.setProp (newValue) }
  }

  //····················································································································

  var xNameUnit_property_selection : EBSelection <Int> { return self.xNameUnit_property.prop }

  //····················································································································
  //   Atomic property: yNameUnit
  //····················································································································

  let yNameUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var yNameUnit : Int {
    get { return self.yNameUnit_property.propval }
    set { self.yNameUnit_property.setProp (newValue) }
  }

  //····················································································································

  var yNameUnit_property_selection : EBSelection <Int> { return self.yNameUnit_property.prop }

  //····················································································································
  //   Atomic property: zoneNumbering
  //····················································································································

  let zoneNumbering_property = EBStoredProperty_PadNumbering (defaultValue: PadNumbering.noNumbering)

  //····················································································································

  var zoneNumbering : PadNumbering {
    get { return self.zoneNumbering_property.propval }
    set { self.zoneNumbering_property.setProp (newValue) }
  }

  //····················································································································

  var zoneNumbering_property_selection : EBSelection <PadNumbering> { return self.zoneNumbering_property.prop }

  //····················································································································
  //   Transient property: rect
  //····················································································································

  let rect_property = EBTransientProperty_CanariRect ()

  //····················································································································

  var rect_property_selection : EBSelection <CanariRect> {
    return self.rect_property.prop
  }

  //····················································································································

  var rect : CanariRect? {
    switch self.rect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- Atomic property: x
    self.x_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: y
    self.y_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: width
    self.width_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: height
    self.height_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xUnit
    self.xUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yUnit
    self.yUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: widthUnit
    self.widthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: heightUnit
    self.heightUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: zoneName
    self.zoneName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: displayZoneName
    self.displayZoneName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xName
    self.xName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yName
    self.yName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xNameUnit
    self.xNameUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yNameUnit
    self.yNameUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: zoneNumbering
    self.zoneNumbering_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.zoneName_property_selection.kind ()
        kind &= g_Preferences!.padZoneFont_property_selection.kind ()
        kind &= g_Preferences!.padZoneColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.zoneName_property_selection, g_Preferences!.padZoneFont_property_selection, g_Preferences!.padZoneColor_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8)) :
            return .single (transient_PackageZone_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.objectDisplay_property)
    self.y_property.addEBObserver (self.objectDisplay_property)
    self.width_property.addEBObserver (self.objectDisplay_property)
    self.height_property.addEBObserver (self.objectDisplay_property)
    self.xName_property.addEBObserver (self.objectDisplay_property)
    self.yName_property.addEBObserver (self.objectDisplay_property)
    self.zoneName_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.padZoneFont_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.padZoneColor_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.zoneName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.zoneName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_PackageZone_issues (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.issues_property)
    self.y_property.addEBObserver (self.issues_property)
    self.width_property.addEBObserver (self.issues_property)
    self.height_property.addEBObserver (self.issues_property)
    self.xName_property.addEBObserver (self.issues_property)
    self.yName_property.addEBObserver (self.issues_property)
    self.zoneName_property.addEBObserver (self.issues_property)
  //--- Atomic property: rect
    self.rect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_PackageZone_rect (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.rect_property)
    self.y_property.addEBObserver (self.rect_property)
    self.width_property.addEBObserver (self.rect_property)
    self.height_property.addEBObserver (self.rect_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.zoneName_property_selection.kind ()
        kind &= g_Preferences!.padZoneFont_property_selection.kind ()
        kind &= g_Preferences!.packageBackgroundColor_property_selection.kind ()
        kind &= g_Preferences!.padZoneColor_property_selection.kind ()
        kind &= unwSelf.knobSize_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.zoneName_property_selection, g_Preferences!.padZoneFont_property_selection, g_Preferences!.packageBackgroundColor_property_selection, g_Preferences!.padZoneColor_property_selection, unwSelf.knobSize_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10)) :
            return .single (transient_PackageZone_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.selectionDisplay_property)
    self.y_property.addEBObserver (self.selectionDisplay_property)
    self.width_property.addEBObserver (self.selectionDisplay_property)
    self.height_property.addEBObserver (self.selectionDisplay_property)
    self.xName_property.addEBObserver (self.selectionDisplay_property)
    self.yName_property.addEBObserver (self.selectionDisplay_property)
    self.zoneName_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.padZoneFont_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageBackgroundColor_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.padZoneColor_property.addEBObserver (self.selectionDisplay_property)
    self.knobSize_property.addEBObserver (self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.height_property.setSignatureObserver (observer: self)
    self.heightUnit_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.widthUnit_property.setSignatureObserver (observer: self)
    self.x_property.setSignatureObserver (observer: self)
    self.xName_property.setSignatureObserver (observer: self)
    self.xNameUnit_property.setSignatureObserver (observer: self)
    self.xUnit_property.setSignatureObserver (observer: self)
    self.y_property.setSignatureObserver (observer: self)
    self.yName_property.setSignatureObserver (observer: self)
    self.yNameUnit_property.setSignatureObserver (observer: self)
    self.yUnit_property.setSignatureObserver (observer: self)
    self.zoneName_property.setSignatureObserver (observer: self)
    self.zoneNumbering_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.x_property.removeEBObserver (self.objectDisplay_property)
    self.y_property.removeEBObserver (self.objectDisplay_property)
    self.width_property.removeEBObserver (self.objectDisplay_property)
    self.height_property.removeEBObserver (self.objectDisplay_property)
    self.xName_property.removeEBObserver (self.objectDisplay_property)
    self.yName_property.removeEBObserver (self.objectDisplay_property)
    self.zoneName_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.padZoneFont_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.padZoneColor_property.removeEBObserver (self.objectDisplay_property)
    self.x_property.removeEBObserver (self.issues_property)
    self.y_property.removeEBObserver (self.issues_property)
    self.width_property.removeEBObserver (self.issues_property)
    self.height_property.removeEBObserver (self.issues_property)
    self.xName_property.removeEBObserver (self.issues_property)
    self.yName_property.removeEBObserver (self.issues_property)
    self.zoneName_property.removeEBObserver (self.issues_property)
    self.x_property.removeEBObserver (self.rect_property)
    self.y_property.removeEBObserver (self.rect_property)
    self.width_property.removeEBObserver (self.rect_property)
    self.height_property.removeEBObserver (self.rect_property)
    self.x_property.removeEBObserver (self.selectionDisplay_property)
    self.y_property.removeEBObserver (self.selectionDisplay_property)
    self.width_property.removeEBObserver (self.selectionDisplay_property)
    self.height_property.removeEBObserver (self.selectionDisplay_property)
    self.xName_property.removeEBObserver (self.selectionDisplay_property)
    self.yName_property.removeEBObserver (self.selectionDisplay_property)
    self.zoneName_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.padZoneFont_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageBackgroundColor_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.padZoneColor_property.removeEBObserver (self.selectionDisplay_property)
    self.knobSize_property.removeEBObserver (self.selectionDisplay_property)
  //--- Unregister properties for handling signature
    self.height_property.setSignatureObserver (observer: nil)
    self.heightUnit_property.setSignatureObserver (observer: nil)
    self.width_property.setSignatureObserver (observer: nil)
    self.widthUnit_property.setSignatureObserver (observer: nil)
    self.x_property.setSignatureObserver (observer: nil)
    self.xName_property.setSignatureObserver (observer: nil)
    self.xNameUnit_property.setSignatureObserver (observer: nil)
    self.xUnit_property.setSignatureObserver (observer: nil)
    self.y_property.setSignatureObserver (observer: nil)
    self.yName_property.setSignatureObserver (observer: nil)
    self.yNameUnit_property.setSignatureObserver (observer: nil)
    self.yUnit_property.setSignatureObserver (observer: nil)
    self.zoneName_property.setSignatureObserver (observer: nil)
    self.zoneNumbering_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "x",
      idx: self.x_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.x_property.mObserverExplorer,
      valueExplorer: &self.x_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y",
      idx: self.y_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.y_property.mObserverExplorer,
      valueExplorer: &self.y_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "width",
      idx: self.width_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.width_property.mObserverExplorer,
      valueExplorer: &self.width_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "height",
      idx: self.height_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.height_property.mObserverExplorer,
      valueExplorer: &self.height_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xUnit",
      idx: self.xUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xUnit_property.mObserverExplorer,
      valueExplorer: &self.xUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yUnit",
      idx: self.yUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yUnit_property.mObserverExplorer,
      valueExplorer: &self.yUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "widthUnit",
      idx: self.widthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.widthUnit_property.mObserverExplorer,
      valueExplorer: &self.widthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "heightUnit",
      idx: self.heightUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.heightUnit_property.mObserverExplorer,
      valueExplorer: &self.heightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoneName",
      idx: self.zoneName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.zoneName_property.mObserverExplorer,
      valueExplorer: &self.zoneName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayZoneName",
      idx: self.displayZoneName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.displayZoneName_property.mObserverExplorer,
      valueExplorer: &self.displayZoneName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xName",
      idx: self.xName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xName_property.mObserverExplorer,
      valueExplorer: &self.xName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yName",
      idx: self.yName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yName_property.mObserverExplorer,
      valueExplorer: &self.yName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xNameUnit",
      idx: self.xNameUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xNameUnit_property.mObserverExplorer,
      valueExplorer: &self.xNameUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yNameUnit",
      idx: self.yNameUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yNameUnit_property.mObserverExplorer,
      valueExplorer: &self.yNameUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoneNumbering",
      idx: self.zoneNumbering_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.zoneNumbering_property.mObserverExplorer,
      valueExplorer: &self.zoneNumbering_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "rect",
      idx: self.rect_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.rect_property.mObserverExplorer,
      valueExplorer: &self.rect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: x
    self.x_property.mObserverExplorer = nil
    self.x_property.mValueExplorer = nil
  //--- Atomic property: y
    self.y_property.mObserverExplorer = nil
    self.y_property.mValueExplorer = nil
  //--- Atomic property: width
    self.width_property.mObserverExplorer = nil
    self.width_property.mValueExplorer = nil
  //--- Atomic property: height
    self.height_property.mObserverExplorer = nil
    self.height_property.mValueExplorer = nil
  //--- Atomic property: xUnit
    self.xUnit_property.mObserverExplorer = nil
    self.xUnit_property.mValueExplorer = nil
  //--- Atomic property: yUnit
    self.yUnit_property.mObserverExplorer = nil
    self.yUnit_property.mValueExplorer = nil
  //--- Atomic property: widthUnit
    self.widthUnit_property.mObserverExplorer = nil
    self.widthUnit_property.mValueExplorer = nil
  //--- Atomic property: heightUnit
    self.heightUnit_property.mObserverExplorer = nil
    self.heightUnit_property.mValueExplorer = nil
  //--- Atomic property: zoneName
    self.zoneName_property.mObserverExplorer = nil
    self.zoneName_property.mValueExplorer = nil
  //--- Atomic property: displayZoneName
    self.displayZoneName_property.mObserverExplorer = nil
    self.displayZoneName_property.mValueExplorer = nil
  //--- Atomic property: xName
    self.xName_property.mObserverExplorer = nil
    self.xName_property.mValueExplorer = nil
  //--- Atomic property: yName
    self.yName_property.mObserverExplorer = nil
    self.yName_property.mValueExplorer = nil
  //--- Atomic property: xNameUnit
    self.xNameUnit_property.mObserverExplorer = nil
    self.xNameUnit_property.mValueExplorer = nil
  //--- Atomic property: yNameUnit
    self.yNameUnit_property.mObserverExplorer = nil
    self.yNameUnit_property.mValueExplorer = nil
  //--- Atomic property: zoneNumbering
    self.zoneNumbering_property.mObserverExplorer = nil
    self.zoneNumbering_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: x
    self.x_property.storeIn (dictionary: ioDictionary, forKey:"x")
  //--- Atomic property: y
    self.y_property.storeIn (dictionary: ioDictionary, forKey:"y")
  //--- Atomic property: width
    self.width_property.storeIn (dictionary: ioDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.storeIn (dictionary: ioDictionary, forKey:"height")
  //--- Atomic property: xUnit
    self.xUnit_property.storeIn (dictionary: ioDictionary, forKey:"xUnit")
  //--- Atomic property: yUnit
    self.yUnit_property.storeIn (dictionary: ioDictionary, forKey:"yUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.storeIn (dictionary: ioDictionary, forKey:"widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.storeIn (dictionary: ioDictionary, forKey:"heightUnit")
  //--- Atomic property: zoneName
    self.zoneName_property.storeIn (dictionary: ioDictionary, forKey:"zoneName")
  //--- Atomic property: displayZoneName
    self.displayZoneName_property.storeIn (dictionary: ioDictionary, forKey:"displayZoneName")
  //--- Atomic property: xName
    self.xName_property.storeIn (dictionary: ioDictionary, forKey:"xName")
  //--- Atomic property: yName
    self.yName_property.storeIn (dictionary: ioDictionary, forKey:"yName")
  //--- Atomic property: xNameUnit
    self.xNameUnit_property.storeIn (dictionary: ioDictionary, forKey:"xNameUnit")
  //--- Atomic property: yNameUnit
    self.yNameUnit_property.storeIn (dictionary: ioDictionary, forKey:"yNameUnit")
  //--- Atomic property: zoneNumbering
    self.zoneNumbering_property.storeIn (dictionary: ioDictionary, forKey:"zoneNumbering")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: x
    self.x_property.readFrom (dictionary: inDictionary, forKey:"x")
  //--- Atomic property: y
    self.y_property.readFrom (dictionary: inDictionary, forKey:"y")
  //--- Atomic property: width
    self.width_property.readFrom (dictionary: inDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.readFrom (dictionary: inDictionary, forKey:"height")
  //--- Atomic property: xUnit
    self.xUnit_property.readFrom (dictionary: inDictionary, forKey:"xUnit")
  //--- Atomic property: yUnit
    self.yUnit_property.readFrom (dictionary: inDictionary, forKey:"yUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.readFrom (dictionary: inDictionary, forKey:"widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.readFrom (dictionary: inDictionary, forKey:"heightUnit")
  //--- Atomic property: zoneName
    self.zoneName_property.readFrom (dictionary: inDictionary, forKey:"zoneName")
  //--- Atomic property: displayZoneName
    self.displayZoneName_property.readFrom (dictionary: inDictionary, forKey:"displayZoneName")
  //--- Atomic property: xName
    self.xName_property.readFrom (dictionary: inDictionary, forKey:"xName")
  //--- Atomic property: yName
    self.yName_property.readFrom (dictionary: inDictionary, forKey:"yName")
  //--- Atomic property: xNameUnit
    self.xNameUnit_property.readFrom (dictionary: inDictionary, forKey:"xNameUnit")
  //--- Atomic property: yNameUnit
    self.yNameUnit_property.readFrom (dictionary: inDictionary, forKey:"yNameUnit")
  //--- Atomic property: zoneNumbering
    self.zoneNumbering_property.readFrom (dictionary: inDictionary, forKey:"zoneNumbering")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "x\n"
    ioString += "y\n"
    ioString += "width\n"
    ioString += "height\n"
    ioString += "xUnit\n"
    ioString += "yUnit\n"
    ioString += "widthUnit\n"
    ioString += "heightUnit\n"
    ioString += "zoneName\n"
    ioString += "displayZoneName\n"
    ioString += "xName\n"
    ioString += "yName\n"
    ioString += "xNameUnit\n"
    ioString += "yNameUnit\n"
    ioString += "zoneNumbering\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.x.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.width.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.height.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.widthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.heightUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.zoneName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.displayZoneName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xNameUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yNameUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.zoneNumbering.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.height_property.signature ())
    crc.accumulateUInt32 (self.heightUnit_property.signature ())
    crc.accumulateUInt32 (self.width_property.signature ())
    crc.accumulateUInt32 (self.widthUnit_property.signature ())
    crc.accumulateUInt32 (self.x_property.signature ())
    crc.accumulateUInt32 (self.xName_property.signature ())
    crc.accumulateUInt32 (self.xNameUnit_property.signature ())
    crc.accumulateUInt32 (self.xUnit_property.signature ())
    crc.accumulateUInt32 (self.y_property.signature ())
    crc.accumulateUInt32 (self.yName_property.signature ())
    crc.accumulateUInt32 (self.yNameUnit_property.signature ())
    crc.accumulateUInt32 (self.yUnit_property.signature ())
    crc.accumulateUInt32 (self.zoneName_property.signature ())
    crc.accumulateUInt32 (self.zoneNumbering_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

