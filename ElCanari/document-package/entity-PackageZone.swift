//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_x : class {
  var x : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_y : class {
  var y : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_width : class {
  var width : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_height : class {
  var height : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_xUnit : class {
  var xUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_yUnit : class {
  var yUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_widthUnit : class {
  var widthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_heightUnit : class {
  var heightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_zoneName : class {
  var zoneName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_xName : class {
  var xName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_yName : class {
  var yName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_xNameUnit : class {
  var xNameUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_yNameUnit : class {
  var yNameUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_zoneNumbering : class {
  var zoneNumbering : PadNumbering { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageZone_rect : class {
  var rect : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageZone : PackageObject,
         PackageZone_x,
         PackageZone_y,
         PackageZone_width,
         PackageZone_height,
         PackageZone_xUnit,
         PackageZone_yUnit,
         PackageZone_widthUnit,
         PackageZone_heightUnit,
         PackageZone_zoneName,
         PackageZone_xName,
         PackageZone_yName,
         PackageZone_xNameUnit,
         PackageZone_yNameUnit,
         PackageZone_zoneNumbering,
         PackageZone_objectDisplay,
         PackageZone_selectionDisplay,
         PackageZone_issues,
         PackageZone_rect {

  //····················································································································
  //   Atomic property: x
  //····················································································································

  var x_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var x : Int {
    get {
      return self.x_property.propval
    }
    set {
      self.x_property.setProp (newValue)
    }
  }

  //····················································································································

  var x_property_selection : EBSelection <Int> {
    return self.x_property.prop
  }

  //····················································································································
  //   Atomic property: y
  //····················································································································

  var y_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var y : Int {
    get {
      return self.y_property.propval
    }
    set {
      self.y_property.setProp (newValue)
    }
  }

  //····················································································································

  var y_property_selection : EBSelection <Int> {
    return self.y_property.prop
  }

  //····················································································································
  //   Atomic property: width
  //····················································································································

  var width_property = EBStoredProperty_Int (defaultValue: 457200)

  //····················································································································

  var width : Int {
    get {
      return self.width_property.propval
    }
    set {
      self.width_property.setProp (newValue)
    }
  }

  //····················································································································

  var width_property_selection : EBSelection <Int> {
    return self.width_property.prop
  }

  //····················································································································
  //   Atomic property: height
  //····················································································································

  var height_property = EBStoredProperty_Int (defaultValue: 457200)

  //····················································································································

  var height : Int {
    get {
      return self.height_property.propval
    }
    set {
      self.height_property.setProp (newValue)
    }
  }

  //····················································································································

  var height_property_selection : EBSelection <Int> {
    return self.height_property.prop
  }

  //····················································································································
  //   Atomic property: xUnit
  //····················································································································

  var xUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var xUnit : Int {
    get {
      return self.xUnit_property.propval
    }
    set {
      self.xUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var xUnit_property_selection : EBSelection <Int> {
    return self.xUnit_property.prop
  }

  //····················································································································
  //   Atomic property: yUnit
  //····················································································································

  var yUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var yUnit : Int {
    get {
      return self.yUnit_property.propval
    }
    set {
      self.yUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var yUnit_property_selection : EBSelection <Int> {
    return self.yUnit_property.prop
  }

  //····················································································································
  //   Atomic property: widthUnit
  //····················································································································

  var widthUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var widthUnit : Int {
    get {
      return self.widthUnit_property.propval
    }
    set {
      self.widthUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var widthUnit_property_selection : EBSelection <Int> {
    return self.widthUnit_property.prop
  }

  //····················································································································
  //   Atomic property: heightUnit
  //····················································································································

  var heightUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var heightUnit : Int {
    get {
      return self.heightUnit_property.propval
    }
    set {
      self.heightUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var heightUnit_property_selection : EBSelection <Int> {
    return self.heightUnit_property.prop
  }

  //····················································································································
  //   Atomic property: zoneName
  //····················································································································

  var zoneName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var zoneName : String {
    get {
      return self.zoneName_property.propval
    }
    set {
      self.zoneName_property.setProp (newValue)
    }
  }

  //····················································································································

  var zoneName_property_selection : EBSelection <String> {
    return self.zoneName_property.prop
  }

  //····················································································································
  //   Atomic property: xName
  //····················································································································

  var xName_property = EBStoredProperty_Int (defaultValue: 228600)

  //····················································································································

  var xName : Int {
    get {
      return self.xName_property.propval
    }
    set {
      self.xName_property.setProp (newValue)
    }
  }

  //····················································································································

  var xName_property_selection : EBSelection <Int> {
    return self.xName_property.prop
  }

  //····················································································································
  //   Atomic property: yName
  //····················································································································

  var yName_property = EBStoredProperty_Int (defaultValue: 228600)

  //····················································································································

  var yName : Int {
    get {
      return self.yName_property.propval
    }
    set {
      self.yName_property.setProp (newValue)
    }
  }

  //····················································································································

  var yName_property_selection : EBSelection <Int> {
    return self.yName_property.prop
  }

  //····················································································································
  //   Atomic property: xNameUnit
  //····················································································································

  var xNameUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var xNameUnit : Int {
    get {
      return self.xNameUnit_property.propval
    }
    set {
      self.xNameUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var xNameUnit_property_selection : EBSelection <Int> {
    return self.xNameUnit_property.prop
  }

  //····················································································································
  //   Atomic property: yNameUnit
  //····················································································································

  var yNameUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var yNameUnit : Int {
    get {
      return self.yNameUnit_property.propval
    }
    set {
      self.yNameUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var yNameUnit_property_selection : EBSelection <Int> {
    return self.yNameUnit_property.prop
  }

  //····················································································································
  //   Atomic property: zoneNumbering
  //····················································································································

  var zoneNumbering_property = EBStoredProperty_PadNumbering (defaultValue: PadNumbering.noNumbering)

  //····················································································································

  var zoneNumbering : PadNumbering {
    get {
      return self.zoneNumbering_property.propval
    }
    set {
      self.zoneNumbering_property.setProp (newValue)
    }
  }

  //····················································································································

  var zoneNumbering_property_selection : EBSelection <PadNumbering> {
    return self.zoneNumbering_property.prop
  }

  //····················································································································
  //   Transient property: rect
  //····················································································································

  var rect_property = EBTransientProperty_CanariRect ()

  //····················································································································

  var rect_property_selection : EBSelection <CanariRect> {
    return self.rect_property.prop
  }

  //····················································································································

  var rect : CanariRect? {
    switch self.rect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: x
    self.x_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: y
    self.y_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: width
    self.width_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: height
    self.height_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xUnit
    self.xUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yUnit
    self.yUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: widthUnit
    self.widthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: heightUnit
    self.heightUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: zoneName
    self.zoneName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xName
    self.xName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yName
    self.yName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xNameUnit
    self.xNameUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yNameUnit
    self.yNameUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: zoneNumbering
    self.zoneNumbering_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.zoneName_property_selection.kind ()
        kind &= g_Preferences!.padZoneFont_property_selection.kind ()
        kind &= g_Preferences!.padZoneColor_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.zoneName_property_selection, g_Preferences!.padZoneFont_property_selection, g_Preferences!.padZoneColor_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8)) :
            return .single (transient_PackageZone_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.objectDisplay_property)
    self.y_property.addEBObserver (self.objectDisplay_property)
    self.width_property.addEBObserver (self.objectDisplay_property)
    self.height_property.addEBObserver (self.objectDisplay_property)
    self.xName_property.addEBObserver (self.objectDisplay_property)
    self.yName_property.addEBObserver (self.objectDisplay_property)
    self.zoneName_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.padZoneFont_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.padZoneColor_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.zoneName_property_selection.kind ()
        kind &= g_Preferences!.padZoneFont_property_selection.kind ()
        kind &= g_Preferences!.padZoneColor_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.zoneName_property_selection, g_Preferences!.padZoneFont_property_selection, g_Preferences!.padZoneColor_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8)) :
            return .single (transient_PackageZone_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.selectionDisplay_property)
    self.y_property.addEBObserver (self.selectionDisplay_property)
    self.width_property.addEBObserver (self.selectionDisplay_property)
    self.height_property.addEBObserver (self.selectionDisplay_property)
    self.xName_property.addEBObserver (self.selectionDisplay_property)
    self.yName_property.addEBObserver (self.selectionDisplay_property)
    self.zoneName_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.padZoneFont_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.padZoneColor_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.zoneName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.zoneName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_PackageZone_issues (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.issues_property)
    self.y_property.addEBObserver (self.issues_property)
    self.width_property.addEBObserver (self.issues_property)
    self.height_property.addEBObserver (self.issues_property)
    self.xName_property.addEBObserver (self.issues_property)
    self.yName_property.addEBObserver (self.issues_property)
    self.zoneName_property.addEBObserver (self.issues_property)
  //--- Atomic property: rect
    self.rect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_PackageZone_rect (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.rect_property)
    self.y_property.addEBObserver (self.rect_property)
    self.width_property.addEBObserver (self.rect_property)
    self.height_property.addEBObserver (self.rect_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.height_property.setSignatureObserver (observer: self)
    self.heightUnit_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.widthUnit_property.setSignatureObserver (observer: self)
    self.x_property.setSignatureObserver (observer: self)
    self.xName_property.setSignatureObserver (observer: self)
    self.xNameUnit_property.setSignatureObserver (observer: self)
    self.xUnit_property.setSignatureObserver (observer: self)
    self.y_property.setSignatureObserver (observer: self)
    self.yName_property.setSignatureObserver (observer: self)
    self.yNameUnit_property.setSignatureObserver (observer: self)
    self.yUnit_property.setSignatureObserver (observer: self)
    self.zoneName_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.x_property.removeEBObserver (self.objectDisplay_property)
    self.y_property.removeEBObserver (self.objectDisplay_property)
    self.width_property.removeEBObserver (self.objectDisplay_property)
    self.height_property.removeEBObserver (self.objectDisplay_property)
    self.xName_property.removeEBObserver (self.objectDisplay_property)
    self.yName_property.removeEBObserver (self.objectDisplay_property)
    self.zoneName_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.padZoneFont_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.padZoneColor_property.removeEBObserver (self.objectDisplay_property)
    self.x_property.removeEBObserver (self.selectionDisplay_property)
    self.y_property.removeEBObserver (self.selectionDisplay_property)
    self.width_property.removeEBObserver (self.selectionDisplay_property)
    self.height_property.removeEBObserver (self.selectionDisplay_property)
    self.xName_property.removeEBObserver (self.selectionDisplay_property)
    self.yName_property.removeEBObserver (self.selectionDisplay_property)
    self.zoneName_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.padZoneFont_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.padZoneColor_property.removeEBObserver (self.selectionDisplay_property)
    self.x_property.removeEBObserver (self.issues_property)
    self.y_property.removeEBObserver (self.issues_property)
    self.width_property.removeEBObserver (self.issues_property)
    self.height_property.removeEBObserver (self.issues_property)
    self.xName_property.removeEBObserver (self.issues_property)
    self.yName_property.removeEBObserver (self.issues_property)
    self.zoneName_property.removeEBObserver (self.issues_property)
    self.x_property.removeEBObserver (self.rect_property)
    self.y_property.removeEBObserver (self.rect_property)
    self.width_property.removeEBObserver (self.rect_property)
    self.height_property.removeEBObserver (self.rect_property)
  //--- Unregister properties for handling signature
    self.height_property.setSignatureObserver (observer: nil)
    self.heightUnit_property.setSignatureObserver (observer: nil)
    self.width_property.setSignatureObserver (observer: nil)
    self.widthUnit_property.setSignatureObserver (observer: nil)
    self.x_property.setSignatureObserver (observer: nil)
    self.xName_property.setSignatureObserver (observer: nil)
    self.xNameUnit_property.setSignatureObserver (observer: nil)
    self.xUnit_property.setSignatureObserver (observer: nil)
    self.y_property.setSignatureObserver (observer: nil)
    self.yName_property.setSignatureObserver (observer: nil)
    self.yNameUnit_property.setSignatureObserver (observer: nil)
    self.yUnit_property.setSignatureObserver (observer: nil)
    self.zoneName_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "x",
      idx:self.x_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x_property.mObserverExplorer,
      valueExplorer:&self.x_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y",
      idx:self.y_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y_property.mObserverExplorer,
      valueExplorer:&self.y_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "width",
      idx:self.width_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.width_property.mObserverExplorer,
      valueExplorer:&self.width_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "height",
      idx:self.height_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.height_property.mObserverExplorer,
      valueExplorer:&self.height_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xUnit",
      idx:self.xUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xUnit_property.mObserverExplorer,
      valueExplorer:&self.xUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yUnit",
      idx:self.yUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yUnit_property.mObserverExplorer,
      valueExplorer:&self.yUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "widthUnit",
      idx:self.widthUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.widthUnit_property.mObserverExplorer,
      valueExplorer:&self.widthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "heightUnit",
      idx:self.heightUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.heightUnit_property.mObserverExplorer,
      valueExplorer:&self.heightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoneName",
      idx:self.zoneName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoneName_property.mObserverExplorer,
      valueExplorer:&self.zoneName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xName",
      idx:self.xName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xName_property.mObserverExplorer,
      valueExplorer:&self.xName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yName",
      idx:self.yName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yName_property.mObserverExplorer,
      valueExplorer:&self.yName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xNameUnit",
      idx:self.xNameUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xNameUnit_property.mObserverExplorer,
      valueExplorer:&self.xNameUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yNameUnit",
      idx:self.yNameUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yNameUnit_property.mObserverExplorer,
      valueExplorer:&self.yNameUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoneNumbering",
      idx:self.zoneNumbering_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoneNumbering_property.mObserverExplorer,
      valueExplorer:&self.zoneNumbering_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "rect",
      idx:self.rect_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.rect_property.mObserverExplorer,
      valueExplorer:&self.rect_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: x
    self.x_property.mObserverExplorer = nil
    self.x_property.mValueExplorer = nil
  //--- Atomic property: y
    self.y_property.mObserverExplorer = nil
    self.y_property.mValueExplorer = nil
  //--- Atomic property: width
    self.width_property.mObserverExplorer = nil
    self.width_property.mValueExplorer = nil
  //--- Atomic property: height
    self.height_property.mObserverExplorer = nil
    self.height_property.mValueExplorer = nil
  //--- Atomic property: xUnit
    self.xUnit_property.mObserverExplorer = nil
    self.xUnit_property.mValueExplorer = nil
  //--- Atomic property: yUnit
    self.yUnit_property.mObserverExplorer = nil
    self.yUnit_property.mValueExplorer = nil
  //--- Atomic property: widthUnit
    self.widthUnit_property.mObserverExplorer = nil
    self.widthUnit_property.mValueExplorer = nil
  //--- Atomic property: heightUnit
    self.heightUnit_property.mObserverExplorer = nil
    self.heightUnit_property.mValueExplorer = nil
  //--- Atomic property: zoneName
    self.zoneName_property.mObserverExplorer = nil
    self.zoneName_property.mValueExplorer = nil
  //--- Atomic property: xName
    self.xName_property.mObserverExplorer = nil
    self.xName_property.mValueExplorer = nil
  //--- Atomic property: yName
    self.yName_property.mObserverExplorer = nil
    self.yName_property.mValueExplorer = nil
  //--- Atomic property: xNameUnit
    self.xNameUnit_property.mObserverExplorer = nil
    self.xNameUnit_property.mValueExplorer = nil
  //--- Atomic property: yNameUnit
    self.yNameUnit_property.mObserverExplorer = nil
    self.yNameUnit_property.mValueExplorer = nil
  //--- Atomic property: zoneNumbering
    self.zoneNumbering_property.mObserverExplorer = nil
    self.zoneNumbering_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: x
    self.x_property.storeIn (dictionary: ioDictionary, forKey:"x")
  //--- Atomic property: y
    self.y_property.storeIn (dictionary: ioDictionary, forKey:"y")
  //--- Atomic property: width
    self.width_property.storeIn (dictionary: ioDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.storeIn (dictionary: ioDictionary, forKey:"height")
  //--- Atomic property: xUnit
    self.xUnit_property.storeIn (dictionary: ioDictionary, forKey:"xUnit")
  //--- Atomic property: yUnit
    self.yUnit_property.storeIn (dictionary: ioDictionary, forKey:"yUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.storeIn (dictionary: ioDictionary, forKey:"widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.storeIn (dictionary: ioDictionary, forKey:"heightUnit")
  //--- Atomic property: zoneName
    self.zoneName_property.storeIn (dictionary: ioDictionary, forKey:"zoneName")
  //--- Atomic property: xName
    self.xName_property.storeIn (dictionary: ioDictionary, forKey:"xName")
  //--- Atomic property: yName
    self.yName_property.storeIn (dictionary: ioDictionary, forKey:"yName")
  //--- Atomic property: xNameUnit
    self.xNameUnit_property.storeIn (dictionary: ioDictionary, forKey:"xNameUnit")
  //--- Atomic property: yNameUnit
    self.yNameUnit_property.storeIn (dictionary: ioDictionary, forKey:"yNameUnit")
  //--- Atomic property: zoneNumbering
    self.zoneNumbering_property.storeIn (dictionary: ioDictionary, forKey:"zoneNumbering")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: x
    self.x_property.readFrom (dictionary: inDictionary, forKey:"x")
  //--- Atomic property: y
    self.y_property.readFrom (dictionary: inDictionary, forKey:"y")
  //--- Atomic property: width
    self.width_property.readFrom (dictionary: inDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.readFrom (dictionary: inDictionary, forKey:"height")
  //--- Atomic property: xUnit
    self.xUnit_property.readFrom (dictionary: inDictionary, forKey:"xUnit")
  //--- Atomic property: yUnit
    self.yUnit_property.readFrom (dictionary: inDictionary, forKey:"yUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.readFrom (dictionary: inDictionary, forKey:"widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.readFrom (dictionary: inDictionary, forKey:"heightUnit")
  //--- Atomic property: zoneName
    self.zoneName_property.readFrom (dictionary: inDictionary, forKey:"zoneName")
  //--- Atomic property: xName
    self.xName_property.readFrom (dictionary: inDictionary, forKey:"xName")
  //--- Atomic property: yName
    self.yName_property.readFrom (dictionary: inDictionary, forKey:"yName")
  //--- Atomic property: xNameUnit
    self.xNameUnit_property.readFrom (dictionary: inDictionary, forKey:"xNameUnit")
  //--- Atomic property: yNameUnit
    self.yNameUnit_property.readFrom (dictionary: inDictionary, forKey:"yNameUnit")
  //--- Atomic property: zoneNumbering
    self.zoneNumbering_property.readFrom (dictionary: inDictionary, forKey:"zoneNumbering")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.height_property.signature ())
    crc.accumulateUInt32 (self.heightUnit_property.signature ())
    crc.accumulateUInt32 (self.width_property.signature ())
    crc.accumulateUInt32 (self.widthUnit_property.signature ())
    crc.accumulateUInt32 (self.x_property.signature ())
    crc.accumulateUInt32 (self.xName_property.signature ())
    crc.accumulateUInt32 (self.xNameUnit_property.signature ())
    crc.accumulateUInt32 (self.xUnit_property.signature ())
    crc.accumulateUInt32 (self.y_property.signature ())
    crc.accumulateUInt32 (self.yName_property.signature ())
    crc.accumulateUInt32 (self.yNameUnit_property.signature ())
    crc.accumulateUInt32 (self.yUnit_property.signature ())
    crc.accumulateUInt32 (self.zoneName_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageZone : ReadOnlyAbstractArrayProperty <PackageZone> {

  //····················································································································
  //   Observers of 'x' stored property
  //····················································································································

  private var mObserversOf_x = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_x.apply ( {(_ observer : EBEvent) in
        managedObject.x_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_x_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_x.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'y' stored property
  //····················································································································

  private var mObserversOf_y = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_y.apply ( {(_ observer : EBEvent) in
        managedObject.y_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_y_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_y.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_width.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_width.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_width_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_width.apply ( {(_ observer : EBEvent) in
        managedObject.width_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_width_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_width.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.width_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_height.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_height.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_height_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_height.apply ( {(_ observer : EBEvent) in
        managedObject.height_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_height_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_height.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.height_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'xUnit' stored property
  //····················································································································

  private var mObserversOf_xUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xUnit_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_xUnit.apply ( {(_ observer : EBEvent) in
        managedObject.xUnit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_xUnit_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_xUnit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xUnit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'yUnit' stored property
  //····················································································································

  private var mObserversOf_yUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yUnit_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_yUnit.apply ( {(_ observer : EBEvent) in
        managedObject.yUnit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_yUnit_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_yUnit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yUnit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'widthUnit' stored property
  //····················································································································

  private var mObserversOf_widthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_widthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_widthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_widthUnit_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_widthUnit.apply ( {(_ observer : EBEvent) in
        managedObject.widthUnit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_widthUnit_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_widthUnit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.widthUnit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'heightUnit' stored property
  //····················································································································

  private var mObserversOf_heightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_heightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_heightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_heightUnit_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_heightUnit.apply ( {(_ observer : EBEvent) in
        managedObject.heightUnit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_heightUnit_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_heightUnit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.heightUnit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'zoneName' stored property
  //····················································································································

  private var mObserversOf_zoneName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoneName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoneName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoneName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoneName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoneName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoneName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoneName_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_zoneName.apply ( {(_ observer : EBEvent) in
        managedObject.zoneName_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoneName_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_zoneName.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoneName_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'xName' stored property
  //····················································································································

  private var mObserversOf_xName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xName_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_xName.apply ( {(_ observer : EBEvent) in
        managedObject.xName_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_xName_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_xName.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xName_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'yName' stored property
  //····················································································································

  private var mObserversOf_yName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yName_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_yName.apply ( {(_ observer : EBEvent) in
        managedObject.yName_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_yName_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_yName.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yName_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'xNameUnit' stored property
  //····················································································································

  private var mObserversOf_xNameUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xNameUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xNameUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xNameUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xNameUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xNameUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xNameUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xNameUnit_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_xNameUnit.apply ( {(_ observer : EBEvent) in
        managedObject.xNameUnit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_xNameUnit_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_xNameUnit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xNameUnit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'yNameUnit' stored property
  //····················································································································

  private var mObserversOf_yNameUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yNameUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yNameUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yNameUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yNameUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yNameUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yNameUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yNameUnit_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_yNameUnit.apply ( {(_ observer : EBEvent) in
        managedObject.yNameUnit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_yNameUnit_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_yNameUnit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yNameUnit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'zoneNumbering' stored property
  //····················································································································

  private var mObserversOf_zoneNumbering = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoneNumbering (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoneNumbering.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoneNumbering_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoneNumbering (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoneNumbering.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoneNumbering_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoneNumbering_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_zoneNumbering.apply ( {(_ observer : EBEvent) in
        managedObject.zoneNumbering_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoneNumbering_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    self.mObserversOf_zoneNumbering.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoneNumbering_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply ( {(_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply ( {(_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'rect' transient property
  //····················································································································

  private var mObserversOf_rect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_rect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_rect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.rect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_rect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_rect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.rect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_rect_toElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_rect.apply ( {(_ observer : EBEvent) in
        managedObject.rect_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_rect_fromElementsOfSet (_ inSet : Set<PackageZone>) {
    for managedObject in inSet {
      self.mObserversOf_rect.apply ( {(_ observer : EBEvent) in
        managedObject.rect_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageZone : ReadOnlyArrayOf_PackageZone {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [PackageZone] > > = nil

  //····················································································································

  override var propset : Set <PackageZone> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [PackageZone] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [PackageZone] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <PackageZone> ()

  //····················································································································

  private var mCachedValue : EBSelection < [PackageZone] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      self.mCachedValue = unwrappedComputeFunction ()
      let newSet : Set <PackageZone>
      switch self.mCachedValue! {
      case .multiple, .empty :
        newSet = Set <PackageZone> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_x_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_y_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_width_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_height_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_widthUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_heightUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_zoneName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xNameUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yNameUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_zoneNumbering_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_issues_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_rect_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_x_toElementsOfSet (addedSet)
      self.addEBObserversOf_y_toElementsOfSet (addedSet)
      self.addEBObserversOf_width_toElementsOfSet (addedSet)
      self.addEBObserversOf_height_toElementsOfSet (addedSet)
      self.addEBObserversOf_xUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_yUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_widthUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_heightUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_zoneName_toElementsOfSet (addedSet)
      self.addEBObserversOf_xName_toElementsOfSet (addedSet)
      self.addEBObserversOf_yName_toElementsOfSet (addedSet)
      self.addEBObserversOf_xNameUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_yNameUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_zoneNumbering_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_issues_toElementsOfSet (addedSet)
      self.addEBObserversOf_rect_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageZone : ReadOnlyArrayOf_PackageZone {

  //····················································································································
 
  func setProp (_ value :  [PackageZone]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageZone
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageZone : ReadWriteArrayOf_PackageZone, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : PackageZone?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageZone] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PackageZone") as? PackageZone {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <PackageZone> ()
  private var mValue = [PackageZone] () {
    didSet {
     // self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.setOppositeRelationship? (nil)
            managedObject.x_property.mSetterDelegate = nil
            managedObject.y_property.mSetterDelegate = nil
            managedObject.width_property.mSetterDelegate = nil
            managedObject.height_property.mSetterDelegate = nil
            managedObject.xUnit_property.mSetterDelegate = nil
            managedObject.yUnit_property.mSetterDelegate = nil
            managedObject.widthUnit_property.mSetterDelegate = nil
            managedObject.heightUnit_property.mSetterDelegate = nil
            managedObject.zoneName_property.mSetterDelegate = nil
            managedObject.xName_property.mSetterDelegate = nil
            managedObject.yName_property.mSetterDelegate = nil
            managedObject.xNameUnit_property.mSetterDelegate = nil
            managedObject.yNameUnit_property.mSetterDelegate = nil
            managedObject.zoneNumbering_property.mSetterDelegate = nil
          }
          self.removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_height_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_xUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_yUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_widthUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_heightUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_zoneName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_xName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_yName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_xNameUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_yNameUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_zoneNumbering_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_rect_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : PackageZone in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.x_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.y_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.width_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.height_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.xUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.yUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.widthUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.heightUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.zoneName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.xName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.yName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.xNameUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.yNameUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.zoneNumbering_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
          self.addEBObserversOf_x_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_y_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_width_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_height_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_xUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_yUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_widthUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_heightUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_zoneName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_xName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_yName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_xNameUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_yNameUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_zoneNumbering_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_rect_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [PackageZone] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageZone]) { self.mValue = inValue }

  //····················································································································

  override var propval : [PackageZone] { return self.mValue }

  //····················································································································

  override var propset : Set <PackageZone> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [PackageZone]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PackageZone) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PackageZone) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
