//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_y1 : class {
  var y1 : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_x2 : class {
  var x2 : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_y2 : class {
  var y2 : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_xDimension : class {
  var xDimension : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_yDimension : class {
  var yDimension : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_x1Unit : class {
  var x1Unit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_y1Unit : class {
  var y1Unit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_x2Unit : class {
  var x2Unit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_y2Unit : class {
  var y2Unit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_xDimensionUnit : class {
  var xDimensionUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_yDimensionUnit : class {
  var yDimensionUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_distanceUnit : class {
  var distanceUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_x1 : class {
  var x1 : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_distanceInCanariUnit : class {
  var distanceInCanariUnit : Int? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageDimension_issues : class {
  var issues : CanariIssueArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------
//    Entity: PackageDimension
//----------------------------------------------------------------------------------------------------------------------

class PackageDimension : PackageObject,
         PackageDimension_y1,
         PackageDimension_x2,
         PackageDimension_y2,
         PackageDimension_xDimension,
         PackageDimension_yDimension,
         PackageDimension_x1Unit,
         PackageDimension_y1Unit,
         PackageDimension_x2Unit,
         PackageDimension_y2Unit,
         PackageDimension_xDimensionUnit,
         PackageDimension_yDimensionUnit,
         PackageDimension_distanceUnit,
         PackageDimension_x1,
         PackageDimension_distanceInCanariUnit,
         PackageDimension_objectDisplay,
         PackageDimension_selectionDisplay,
         PackageDimension_issues {

  //····················································································································
  //   Atomic property: y1
  //····················································································································

  let y1_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_y1_toDefaultValue () {
    self.y1 = 0
  }

  //····················································································································

  final var y1 : Int {
    get { return self.y1_property.propval }
    set { self.y1_property.setProp (newValue) }
  }

  //····················································································································

  final var y1_property_selection : EBSelection <Int> { return self.y1_property.prop }

  //····················································································································
  //   Atomic property: x2
  //····················································································································

  let x2_property = EBStoredProperty_Int (defaultValue: 685800)

  //····················································································································

  final func reset_x2_toDefaultValue () {
    self.x2 = 685800
  }

  //····················································································································

  final var x2 : Int {
    get { return self.x2_property.propval }
    set { self.x2_property.setProp (newValue) }
  }

  //····················································································································

  final var x2_property_selection : EBSelection <Int> { return self.x2_property.prop }

  //····················································································································
  //   Atomic property: y2
  //····················································································································

  let y2_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_y2_toDefaultValue () {
    self.y2 = 0
  }

  //····················································································································

  final var y2 : Int {
    get { return self.y2_property.propval }
    set { self.y2_property.setProp (newValue) }
  }

  //····················································································································

  final var y2_property_selection : EBSelection <Int> { return self.y2_property.prop }

  //····················································································································
  //   Atomic property: xDimension
  //····················································································································

  let xDimension_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_xDimension_toDefaultValue () {
    self.xDimension = 0
  }

  //····················································································································

  final var xDimension : Int {
    get { return self.xDimension_property.propval }
    set { self.xDimension_property.setProp (newValue) }
  }

  //····················································································································

  final var xDimension_property_selection : EBSelection <Int> { return self.xDimension_property.prop }

  //····················································································································
  //   Atomic property: yDimension
  //····················································································································

  let yDimension_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_yDimension_toDefaultValue () {
    self.yDimension = 0
  }

  //····················································································································

  final var yDimension : Int {
    get { return self.yDimension_property.propval }
    set { self.yDimension_property.setProp (newValue) }
  }

  //····················································································································

  final var yDimension_property_selection : EBSelection <Int> { return self.yDimension_property.prop }

  //····················································································································
  //   Atomic property: x1Unit
  //····················································································································

  let x1Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_x1Unit_toDefaultValue () {
    self.x1Unit = 2286
  }

  //····················································································································

  final var x1Unit : Int {
    get { return self.x1Unit_property.propval }
    set { self.x1Unit_property.setProp (newValue) }
  }

  //····················································································································

  final var x1Unit_property_selection : EBSelection <Int> { return self.x1Unit_property.prop }

  //····················································································································
  //   Atomic property: y1Unit
  //····················································································································

  let y1Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_y1Unit_toDefaultValue () {
    self.y1Unit = 2286
  }

  //····················································································································

  final var y1Unit : Int {
    get { return self.y1Unit_property.propval }
    set { self.y1Unit_property.setProp (newValue) }
  }

  //····················································································································

  final var y1Unit_property_selection : EBSelection <Int> { return self.y1Unit_property.prop }

  //····················································································································
  //   Atomic property: x2Unit
  //····················································································································

  let x2Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_x2Unit_toDefaultValue () {
    self.x2Unit = 2286
  }

  //····················································································································

  final var x2Unit : Int {
    get { return self.x2Unit_property.propval }
    set { self.x2Unit_property.setProp (newValue) }
  }

  //····················································································································

  final var x2Unit_property_selection : EBSelection <Int> { return self.x2Unit_property.prop }

  //····················································································································
  //   Atomic property: y2Unit
  //····················································································································

  let y2Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_y2Unit_toDefaultValue () {
    self.y2Unit = 2286
  }

  //····················································································································

  final var y2Unit : Int {
    get { return self.y2Unit_property.propval }
    set { self.y2Unit_property.setProp (newValue) }
  }

  //····················································································································

  final var y2Unit_property_selection : EBSelection <Int> { return self.y2Unit_property.prop }

  //····················································································································
  //   Atomic property: xDimensionUnit
  //····················································································································

  let xDimensionUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_xDimensionUnit_toDefaultValue () {
    self.xDimensionUnit = 2286
  }

  //····················································································································

  final var xDimensionUnit : Int {
    get { return self.xDimensionUnit_property.propval }
    set { self.xDimensionUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var xDimensionUnit_property_selection : EBSelection <Int> { return self.xDimensionUnit_property.prop }

  //····················································································································
  //   Atomic property: yDimensionUnit
  //····················································································································

  let yDimensionUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_yDimensionUnit_toDefaultValue () {
    self.yDimensionUnit = 2286
  }

  //····················································································································

  final var yDimensionUnit : Int {
    get { return self.yDimensionUnit_property.propval }
    set { self.yDimensionUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var yDimensionUnit_property_selection : EBSelection <Int> { return self.yDimensionUnit_property.prop }

  //····················································································································
  //   Atomic property: distanceUnit
  //····················································································································

  let distanceUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_distanceUnit_toDefaultValue () {
    self.distanceUnit = 2286
  }

  //····················································································································

  final var distanceUnit : Int {
    get { return self.distanceUnit_property.propval }
    set { self.distanceUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var distanceUnit_property_selection : EBSelection <Int> { return self.distanceUnit_property.prop }

  //····················································································································
  //   Atomic property: x1
  //····················································································································

  let x1_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_x1_toDefaultValue () {
    self.x1 = 0
  }

  //····················································································································

  final var x1 : Int {
    get { return self.x1_property.propval }
    set { self.x1_property.setProp (newValue) }
  }

  //····················································································································

  final var x1_property_selection : EBSelection <Int> { return self.x1_property.prop }

  //····················································································································
  //   Transient property: distanceInCanariUnit
  //····················································································································

  let distanceInCanariUnit_property = EBTransientProperty_Int ()

  //····················································································································

  var distanceInCanariUnit_property_selection : EBSelection <Int> {
    return self.distanceInCanariUnit_property.prop
  }

  //····················································································································

  var distanceInCanariUnit : Int? {
    switch self.distanceInCanariUnit_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- Atomic property: y1
    self.y1_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: x2
    self.x2_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: y2
    self.y2_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xDimension
    self.xDimension_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yDimension
    self.yDimension_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: x1Unit
    self.x1Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: y1Unit
    self.y1Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: x2Unit
    self.x2Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: y2Unit
    self.y2Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xDimensionUnit
    self.xDimensionUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yDimensionUnit
    self.yDimensionUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: distanceUnit
    self.distanceUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: x1
    self.x1_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: distanceInCanariUnit
    self.distanceInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_PackageDimension_distanceInCanariUnit (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.distanceInCanariUnit_property)
    self.y1_property.addEBObserver (self.distanceInCanariUnit_property)
    self.x2_property.addEBObserver (self.distanceInCanariUnit_property)
    self.y2_property.addEBObserver (self.distanceInCanariUnit_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.xDimension_property_selection.kind ()
        kind &= unwSelf.yDimension_property_selection.kind ()
        kind &= unwSelf.distanceInCanariUnit_property_selection.kind ()
        kind &= unwSelf.distanceUnit_property_selection.kind ()
        kind &= g_Preferences!.dimensionFont_property_selection.kind ()
        kind &= g_Preferences!.packageBackgroundColor_property_selection.kind ()
        kind &= g_Preferences!.packageDimensionColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.xDimension_property_selection, unwSelf.yDimension_property_selection, unwSelf.distanceInCanariUnit_property_selection, unwSelf.distanceUnit_property_selection, g_Preferences!.dimensionFont_property_selection, g_Preferences!.packageBackgroundColor_property_selection, g_Preferences!.packageDimensionColor_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10)) :
            return .single (transient_PackageDimension_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.objectDisplay_property)
    self.y1_property.addEBObserver (self.objectDisplay_property)
    self.x2_property.addEBObserver (self.objectDisplay_property)
    self.y2_property.addEBObserver (self.objectDisplay_property)
    self.xDimension_property.addEBObserver (self.objectDisplay_property)
    self.yDimension_property.addEBObserver (self.objectDisplay_property)
    self.distanceInCanariUnit_property.addEBObserver (self.objectDisplay_property)
    self.distanceUnit_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.dimensionFont_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageBackgroundColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDimensionColor_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= g_Preferences!.packageBackgroundColor_property_selection.kind ()
        kind &= g_Preferences!.packageDimensionColor_property_selection.kind ()
        kind &= unwSelf.xDimension_property_selection.kind ()
        kind &= unwSelf.yDimension_property_selection.kind ()
        kind &= unwSelf.distanceInCanariUnit_property_selection.kind ()
        kind &= unwSelf.distanceUnit_property_selection.kind ()
        kind &= g_Preferences!.dimensionFont_property_selection.kind ()
        kind &= unwSelf.knobSize_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, g_Preferences!.packageBackgroundColor_property_selection, g_Preferences!.packageDimensionColor_property_selection, unwSelf.xDimension_property_selection, unwSelf.yDimension_property_selection, unwSelf.distanceInCanariUnit_property_selection, unwSelf.distanceUnit_property_selection, g_Preferences!.dimensionFont_property_selection, unwSelf.knobSize_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11)) :
            return .single (transient_PackageDimension_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.selectionDisplay_property)
    self.y1_property.addEBObserver (self.selectionDisplay_property)
    self.x2_property.addEBObserver (self.selectionDisplay_property)
    self.y2_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageBackgroundColor_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageDimensionColor_property.addEBObserver (self.selectionDisplay_property)
    self.xDimension_property.addEBObserver (self.selectionDisplay_property)
    self.yDimension_property.addEBObserver (self.selectionDisplay_property)
    self.distanceInCanariUnit_property.addEBObserver (self.selectionDisplay_property)
    self.distanceUnit_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.dimensionFont_property.addEBObserver (self.selectionDisplay_property)
    self.knobSize_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_PackageDimension_issues (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.issues_property)
    self.y1_property.addEBObserver (self.issues_property)
    self.x2_property.addEBObserver (self.issues_property)
    self.y2_property.addEBObserver (self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.distanceUnit_property.setSignatureObserver (observer: self)
    self.x1_property.setSignatureObserver (observer: self)
    self.x1Unit_property.setSignatureObserver (observer: self)
    self.x2_property.setSignatureObserver (observer: self)
    self.x2Unit_property.setSignatureObserver (observer: self)
    self.xDimension_property.setSignatureObserver (observer: self)
    self.xDimensionUnit_property.setSignatureObserver (observer: self)
    self.y1_property.setSignatureObserver (observer: self)
    self.y1Unit_property.setSignatureObserver (observer: self)
    self.y2_property.setSignatureObserver (observer: self)
    self.y2Unit_property.setSignatureObserver (observer: self)
    self.yDimension_property.setSignatureObserver (observer: self)
    self.yDimensionUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.x1_property.removeEBObserver (self.distanceInCanariUnit_property)
    self.y1_property.removeEBObserver (self.distanceInCanariUnit_property)
    self.x2_property.removeEBObserver (self.distanceInCanariUnit_property)
    self.y2_property.removeEBObserver (self.distanceInCanariUnit_property)
    self.x1_property.removeEBObserver (self.objectDisplay_property)
    self.y1_property.removeEBObserver (self.objectDisplay_property)
    self.x2_property.removeEBObserver (self.objectDisplay_property)
    self.y2_property.removeEBObserver (self.objectDisplay_property)
    self.xDimension_property.removeEBObserver (self.objectDisplay_property)
    self.yDimension_property.removeEBObserver (self.objectDisplay_property)
    self.distanceInCanariUnit_property.removeEBObserver (self.objectDisplay_property)
    self.distanceUnit_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.dimensionFont_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageBackgroundColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDimensionColor_property.removeEBObserver (self.objectDisplay_property)
    self.x1_property.removeEBObserver (self.selectionDisplay_property)
    self.y1_property.removeEBObserver (self.selectionDisplay_property)
    self.x2_property.removeEBObserver (self.selectionDisplay_property)
    self.y2_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageBackgroundColor_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageDimensionColor_property.removeEBObserver (self.selectionDisplay_property)
    self.xDimension_property.removeEBObserver (self.selectionDisplay_property)
    self.yDimension_property.removeEBObserver (self.selectionDisplay_property)
    self.distanceInCanariUnit_property.removeEBObserver (self.selectionDisplay_property)
    self.distanceUnit_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.dimensionFont_property.removeEBObserver (self.selectionDisplay_property)
    self.knobSize_property.removeEBObserver (self.selectionDisplay_property)
    self.x1_property.removeEBObserver (self.issues_property)
    self.y1_property.removeEBObserver (self.issues_property)
    self.x2_property.removeEBObserver (self.issues_property)
    self.y2_property.removeEBObserver (self.issues_property)
  //--- Unregister properties for handling signature
    self.distanceUnit_property.setSignatureObserver (observer: nil)
    self.x1_property.setSignatureObserver (observer: nil)
    self.x1Unit_property.setSignatureObserver (observer: nil)
    self.x2_property.setSignatureObserver (observer: nil)
    self.x2Unit_property.setSignatureObserver (observer: nil)
    self.xDimension_property.setSignatureObserver (observer: nil)
    self.xDimensionUnit_property.setSignatureObserver (observer: nil)
    self.y1_property.setSignatureObserver (observer: nil)
    self.y1Unit_property.setSignatureObserver (observer: nil)
    self.y2_property.setSignatureObserver (observer: nil)
    self.y2Unit_property.setSignatureObserver (observer: nil)
    self.yDimension_property.setSignatureObserver (observer: nil)
    self.yDimensionUnit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "y1",
      idx: self.y1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.y1_property.mObserverExplorer,
      valueExplorer: &self.y1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2",
      idx: self.x2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.x2_property.mObserverExplorer,
      valueExplorer: &self.x2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2",
      idx: self.y2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.y2_property.mObserverExplorer,
      valueExplorer: &self.y2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xDimension",
      idx: self.xDimension_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xDimension_property.mObserverExplorer,
      valueExplorer: &self.xDimension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yDimension",
      idx: self.yDimension_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yDimension_property.mObserverExplorer,
      valueExplorer: &self.yDimension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1Unit",
      idx: self.x1Unit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.x1Unit_property.mObserverExplorer,
      valueExplorer: &self.x1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y1Unit",
      idx: self.y1Unit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.y1Unit_property.mObserverExplorer,
      valueExplorer: &self.y1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2Unit",
      idx: self.x2Unit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.x2Unit_property.mObserverExplorer,
      valueExplorer: &self.x2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2Unit",
      idx: self.y2Unit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.y2Unit_property.mObserverExplorer,
      valueExplorer: &self.y2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xDimensionUnit",
      idx: self.xDimensionUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xDimensionUnit_property.mObserverExplorer,
      valueExplorer: &self.xDimensionUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yDimensionUnit",
      idx: self.yDimensionUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yDimensionUnit_property.mObserverExplorer,
      valueExplorer: &self.yDimensionUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "distanceUnit",
      idx: self.distanceUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.distanceUnit_property.mObserverExplorer,
      valueExplorer: &self.distanceUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1",
      idx: self.x1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.x1_property.mObserverExplorer,
      valueExplorer: &self.x1_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "distanceInCanariUnit",
      idx: self.distanceInCanariUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.distanceInCanariUnit_property.mObserverExplorer,
      valueExplorer: &self.distanceInCanariUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: y1
    self.y1_property.mObserverExplorer = nil
    self.y1_property.mValueExplorer = nil
  //--- Atomic property: x2
    self.x2_property.mObserverExplorer = nil
    self.x2_property.mValueExplorer = nil
  //--- Atomic property: y2
    self.y2_property.mObserverExplorer = nil
    self.y2_property.mValueExplorer = nil
  //--- Atomic property: xDimension
    self.xDimension_property.mObserverExplorer = nil
    self.xDimension_property.mValueExplorer = nil
  //--- Atomic property: yDimension
    self.yDimension_property.mObserverExplorer = nil
    self.yDimension_property.mValueExplorer = nil
  //--- Atomic property: x1Unit
    self.x1Unit_property.mObserverExplorer = nil
    self.x1Unit_property.mValueExplorer = nil
  //--- Atomic property: y1Unit
    self.y1Unit_property.mObserverExplorer = nil
    self.y1Unit_property.mValueExplorer = nil
  //--- Atomic property: x2Unit
    self.x2Unit_property.mObserverExplorer = nil
    self.x2Unit_property.mValueExplorer = nil
  //--- Atomic property: y2Unit
    self.y2Unit_property.mObserverExplorer = nil
    self.y2Unit_property.mValueExplorer = nil
  //--- Atomic property: xDimensionUnit
    self.xDimensionUnit_property.mObserverExplorer = nil
    self.xDimensionUnit_property.mValueExplorer = nil
  //--- Atomic property: yDimensionUnit
    self.yDimensionUnit_property.mObserverExplorer = nil
    self.yDimensionUnit_property.mValueExplorer = nil
  //--- Atomic property: distanceUnit
    self.distanceUnit_property.mObserverExplorer = nil
    self.distanceUnit_property.mValueExplorer = nil
  //--- Atomic property: x1
    self.x1_property.mObserverExplorer = nil
    self.x1_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: y1
    self.y1_property.storeIn (dictionary: ioDictionary, forKey: "y1")
  //--- Atomic property: x2
    self.x2_property.storeIn (dictionary: ioDictionary, forKey: "x2")
  //--- Atomic property: y2
    self.y2_property.storeIn (dictionary: ioDictionary, forKey: "y2")
  //--- Atomic property: xDimension
    self.xDimension_property.storeIn (dictionary: ioDictionary, forKey: "xDimension")
  //--- Atomic property: yDimension
    self.yDimension_property.storeIn (dictionary: ioDictionary, forKey: "yDimension")
  //--- Atomic property: x1Unit
    self.x1Unit_property.storeIn (dictionary: ioDictionary, forKey: "x1Unit")
  //--- Atomic property: y1Unit
    self.y1Unit_property.storeIn (dictionary: ioDictionary, forKey: "y1Unit")
  //--- Atomic property: x2Unit
    self.x2Unit_property.storeIn (dictionary: ioDictionary, forKey: "x2Unit")
  //--- Atomic property: y2Unit
    self.y2Unit_property.storeIn (dictionary: ioDictionary, forKey: "y2Unit")
  //--- Atomic property: xDimensionUnit
    self.xDimensionUnit_property.storeIn (dictionary: ioDictionary, forKey: "xDimensionUnit")
  //--- Atomic property: yDimensionUnit
    self.yDimensionUnit_property.storeIn (dictionary: ioDictionary, forKey: "yDimensionUnit")
  //--- Atomic property: distanceUnit
    self.distanceUnit_property.storeIn (dictionary: ioDictionary, forKey: "distanceUnit")
  //--- Atomic property: x1
    self.x1_property.storeIn (dictionary: ioDictionary, forKey: "x1")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: y1
    self.y1_property.readFrom (dictionary: inDictionary, forKey: "y1")
  //--- Atomic property: x2
    self.x2_property.readFrom (dictionary: inDictionary, forKey: "x2")
  //--- Atomic property: y2
    self.y2_property.readFrom (dictionary: inDictionary, forKey: "y2")
  //--- Atomic property: xDimension
    self.xDimension_property.readFrom (dictionary: inDictionary, forKey: "xDimension")
  //--- Atomic property: yDimension
    self.yDimension_property.readFrom (dictionary: inDictionary, forKey: "yDimension")
  //--- Atomic property: x1Unit
    self.x1Unit_property.readFrom (dictionary: inDictionary, forKey: "x1Unit")
  //--- Atomic property: y1Unit
    self.y1Unit_property.readFrom (dictionary: inDictionary, forKey: "y1Unit")
  //--- Atomic property: x2Unit
    self.x2Unit_property.readFrom (dictionary: inDictionary, forKey: "x2Unit")
  //--- Atomic property: y2Unit
    self.y2Unit_property.readFrom (dictionary: inDictionary, forKey: "y2Unit")
  //--- Atomic property: xDimensionUnit
    self.xDimensionUnit_property.readFrom (dictionary: inDictionary, forKey: "xDimensionUnit")
  //--- Atomic property: yDimensionUnit
    self.yDimensionUnit_property.readFrom (dictionary: inDictionary, forKey: "yDimensionUnit")
  //--- Atomic property: distanceUnit
    self.distanceUnit_property.readFrom (dictionary: inDictionary, forKey: "distanceUnit")
  //--- Atomic property: x1
    self.x1_property.readFrom (dictionary: inDictionary, forKey: "x1")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "y1\n"
    ioString += "x2\n"
    ioString += "y2\n"
    ioString += "xDimension\n"
    ioString += "yDimension\n"
    ioString += "x1Unit\n"
    ioString += "y1Unit\n"
    ioString += "x2Unit\n"
    ioString += "y2Unit\n"
    ioString += "xDimensionUnit\n"
    ioString += "yDimensionUnit\n"
    ioString += "distanceUnit\n"
    ioString += "x1\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.y1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xDimension.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yDimension.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x1Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y1Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x2Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y2Unit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xDimensionUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yDimensionUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.distanceUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData)
  //--- Atomic properties
    if let range = inDictionary ["y1"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.y1 = value
    }
    if let range = inDictionary ["x2"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.x2 = value
    }
    if let range = inDictionary ["y2"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.y2 = value
    }
    if let range = inDictionary ["xDimension"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.xDimension = value
    }
    if let range = inDictionary ["yDimension"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.yDimension = value
    }
    if let range = inDictionary ["x1Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.x1Unit = value
    }
    if let range = inDictionary ["y1Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.y1Unit = value
    }
    if let range = inDictionary ["x2Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.x2Unit = value
    }
    if let range = inDictionary ["y2Unit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.y2Unit = value
    }
    if let range = inDictionary ["xDimensionUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.xDimensionUnit = value
    }
    if let range = inDictionary ["yDimensionUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.yDimensionUnit = value
    }
    if let range = inDictionary ["distanceUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.distanceUnit = value
    }
    if let range = inDictionary ["x1"], let value = Int.unarchiveFromDataRange (inData, range) {
      self.x1 = value
    }
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.distanceUnit_property.signature ())
    crc.accumulateUInt32 (self.x1_property.signature ())
    crc.accumulateUInt32 (self.x1Unit_property.signature ())
    crc.accumulateUInt32 (self.x2_property.signature ())
    crc.accumulateUInt32 (self.x2Unit_property.signature ())
    crc.accumulateUInt32 (self.xDimension_property.signature ())
    crc.accumulateUInt32 (self.xDimensionUnit_property.signature ())
    crc.accumulateUInt32 (self.y1_property.signature ())
    crc.accumulateUInt32 (self.y1Unit_property.signature ())
    crc.accumulateUInt32 (self.y2_property.signature ())
    crc.accumulateUInt32 (self.y2Unit_property.signature ())
    crc.accumulateUInt32 (self.yDimension_property.signature ())
    crc.accumulateUInt32 (self.yDimensionUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

