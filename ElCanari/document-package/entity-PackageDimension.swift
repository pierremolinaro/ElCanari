//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_y1 : class {
  var y1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_x2 : class {
  var x2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_y2 : class {
  var y2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_xDimension : class {
  var xDimension : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_yDimension : class {
  var yDimension : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_x1Unit : class {
  var x1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_y1Unit : class {
  var y1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_x2Unit : class {
  var x2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_y2Unit : class {
  var y2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_xDimensionUnit : class {
  var xDimensionUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_yDimensionUnit : class {
  var yDimensionUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_distanceUnit : class {
  var distanceUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_x1 : class {
  var x1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_distanceInCanariUnit : class {
  var distanceInCanariUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageDimension_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageDimension
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageDimension : PackageObject,
         PackageDimension_y1,
         PackageDimension_x2,
         PackageDimension_y2,
         PackageDimension_xDimension,
         PackageDimension_yDimension,
         PackageDimension_x1Unit,
         PackageDimension_y1Unit,
         PackageDimension_x2Unit,
         PackageDimension_y2Unit,
         PackageDimension_xDimensionUnit,
         PackageDimension_yDimensionUnit,
         PackageDimension_distanceUnit,
         PackageDimension_x1,
         PackageDimension_distanceInCanariUnit,
         PackageDimension_objectDisplay,
         PackageDimension_selectionDisplay,
         PackageDimension_issues {

  //····················································································································
  //   Atomic property: y1
  //····················································································································

  var y1_property = EBStoredProperty_Int (0)

  //····················································································································

  var y1 : Int {
    get {
      return self.y1_property.propval
    }
    set {
      self.y1_property.setProp (newValue)
    }
  }

  //····················································································································

  var y1_property_selection : EBSelection <Int> {
    return self.y1_property.prop
  }

  //····················································································································
  //   Atomic property: x2
  //····················································································································

  var x2_property = EBStoredProperty_Int (685800)

  //····················································································································

  var x2 : Int {
    get {
      return self.x2_property.propval
    }
    set {
      self.x2_property.setProp (newValue)
    }
  }

  //····················································································································

  var x2_property_selection : EBSelection <Int> {
    return self.x2_property.prop
  }

  //····················································································································
  //   Atomic property: y2
  //····················································································································

  var y2_property = EBStoredProperty_Int (0)

  //····················································································································

  var y2 : Int {
    get {
      return self.y2_property.propval
    }
    set {
      self.y2_property.setProp (newValue)
    }
  }

  //····················································································································

  var y2_property_selection : EBSelection <Int> {
    return self.y2_property.prop
  }

  //····················································································································
  //   Atomic property: xDimension
  //····················································································································

  var xDimension_property = EBStoredProperty_Int (0)

  //····················································································································

  var xDimension : Int {
    get {
      return self.xDimension_property.propval
    }
    set {
      self.xDimension_property.setProp (newValue)
    }
  }

  //····················································································································

  var xDimension_property_selection : EBSelection <Int> {
    return self.xDimension_property.prop
  }

  //····················································································································
  //   Atomic property: yDimension
  //····················································································································

  var yDimension_property = EBStoredProperty_Int (0)

  //····················································································································

  var yDimension : Int {
    get {
      return self.yDimension_property.propval
    }
    set {
      self.yDimension_property.setProp (newValue)
    }
  }

  //····················································································································

  var yDimension_property_selection : EBSelection <Int> {
    return self.yDimension_property.prop
  }

  //····················································································································
  //   Atomic property: x1Unit
  //····················································································································

  var x1Unit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var x1Unit : Int {
    get {
      return self.x1Unit_property.propval
    }
    set {
      self.x1Unit_property.setProp (newValue)
    }
  }

  //····················································································································

  var x1Unit_property_selection : EBSelection <Int> {
    return self.x1Unit_property.prop
  }

  //····················································································································
  //   Atomic property: y1Unit
  //····················································································································

  var y1Unit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var y1Unit : Int {
    get {
      return self.y1Unit_property.propval
    }
    set {
      self.y1Unit_property.setProp (newValue)
    }
  }

  //····················································································································

  var y1Unit_property_selection : EBSelection <Int> {
    return self.y1Unit_property.prop
  }

  //····················································································································
  //   Atomic property: x2Unit
  //····················································································································

  var x2Unit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var x2Unit : Int {
    get {
      return self.x2Unit_property.propval
    }
    set {
      self.x2Unit_property.setProp (newValue)
    }
  }

  //····················································································································

  var x2Unit_property_selection : EBSelection <Int> {
    return self.x2Unit_property.prop
  }

  //····················································································································
  //   Atomic property: y2Unit
  //····················································································································

  var y2Unit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var y2Unit : Int {
    get {
      return self.y2Unit_property.propval
    }
    set {
      self.y2Unit_property.setProp (newValue)
    }
  }

  //····················································································································

  var y2Unit_property_selection : EBSelection <Int> {
    return self.y2Unit_property.prop
  }

  //····················································································································
  //   Atomic property: xDimensionUnit
  //····················································································································

  var xDimensionUnit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var xDimensionUnit : Int {
    get {
      return self.xDimensionUnit_property.propval
    }
    set {
      self.xDimensionUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var xDimensionUnit_property_selection : EBSelection <Int> {
    return self.xDimensionUnit_property.prop
  }

  //····················································································································
  //   Atomic property: yDimensionUnit
  //····················································································································

  var yDimensionUnit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var yDimensionUnit : Int {
    get {
      return self.yDimensionUnit_property.propval
    }
    set {
      self.yDimensionUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var yDimensionUnit_property_selection : EBSelection <Int> {
    return self.yDimensionUnit_property.prop
  }

  //····················································································································
  //   Atomic property: distanceUnit
  //····················································································································

  var distanceUnit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var distanceUnit : Int {
    get {
      return self.distanceUnit_property.propval
    }
    set {
      self.distanceUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var distanceUnit_property_selection : EBSelection <Int> {
    return self.distanceUnit_property.prop
  }

  //····················································································································
  //   Atomic property: x1
  //····················································································································

  var x1_property = EBStoredProperty_Int (0)

  //····················································································································

  var x1 : Int {
    get {
      return self.x1_property.propval
    }
    set {
      self.x1_property.setProp (newValue)
    }
  }

  //····················································································································

  var x1_property_selection : EBSelection <Int> {
    return self.x1_property.prop
  }

  //····················································································································
  //   Transient property: distanceInCanariUnit
  //····················································································································

  var distanceInCanariUnit_property = EBTransientProperty_Int ()

  //····················································································································

  var distanceInCanariUnit_property_selection : EBSelection <Int> {
    return self.distanceInCanariUnit_property.prop
  }

  //····················································································································

  var distanceInCanariUnit : Int? {
    switch self.distanceInCanariUnit_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ undoManager : EBUndoManager?, file: String, _ line : Int) {
    super.init (undoManager, file: file, line)
  //--- Atomic property: y1
    self.y1_property.undoManager = self.undoManager
  //--- Atomic property: x2
    self.x2_property.undoManager = self.undoManager
  //--- Atomic property: y2
    self.y2_property.undoManager = self.undoManager
  //--- Atomic property: xDimension
    self.xDimension_property.undoManager = self.undoManager
  //--- Atomic property: yDimension
    self.yDimension_property.undoManager = self.undoManager
  //--- Atomic property: x1Unit
    self.x1Unit_property.undoManager = self.undoManager
  //--- Atomic property: y1Unit
    self.y1Unit_property.undoManager = self.undoManager
  //--- Atomic property: x2Unit
    self.x2Unit_property.undoManager = self.undoManager
  //--- Atomic property: y2Unit
    self.y2Unit_property.undoManager = self.undoManager
  //--- Atomic property: xDimensionUnit
    self.xDimensionUnit_property.undoManager = self.undoManager
  //--- Atomic property: yDimensionUnit
    self.yDimensionUnit_property.undoManager = self.undoManager
  //--- Atomic property: distanceUnit
    self.distanceUnit_property.undoManager = self.undoManager
  //--- Atomic property: x1
    self.x1_property.undoManager = self.undoManager
  //--- Atomic property: distanceInCanariUnit
    self.distanceInCanariUnit_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_PackageDimension_distanceInCanariUnit (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.distanceInCanariUnit_property)
    self.y1_property.addEBObserver (self.distanceInCanariUnit_property)
    self.x2_property.addEBObserver (self.distanceInCanariUnit_property)
    self.y2_property.addEBObserver (self.distanceInCanariUnit_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.xDimension_property_selection.kind ()
        kind &= unwSelf.yDimension_property_selection.kind ()
        kind &= unwSelf.distanceInCanariUnit_property_selection.kind ()
        kind &= unwSelf.distanceUnit_property_selection.kind ()
        kind &= g_Preferences!.dimensionFont_property_selection.kind ()
        kind &= g_Preferences!.packageBackgroundColor_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.xDimension_property_selection, unwSelf.yDimension_property_selection, unwSelf.distanceInCanariUnit_property_selection, unwSelf.distanceUnit_property_selection, g_Preferences!.dimensionFont_property_selection, g_Preferences!.packageBackgroundColor_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
            return .single (transient_PackageDimension_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.objectDisplay_property)
    self.y1_property.addEBObserver (self.objectDisplay_property)
    self.x2_property.addEBObserver (self.objectDisplay_property)
    self.y2_property.addEBObserver (self.objectDisplay_property)
    self.xDimension_property.addEBObserver (self.objectDisplay_property)
    self.yDimension_property.addEBObserver (self.objectDisplay_property)
    self.distanceInCanariUnit_property.addEBObserver (self.objectDisplay_property)
    self.distanceUnit_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.dimensionFont_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageBackgroundColor_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.xDimension_property_selection.kind ()
        kind &= unwSelf.yDimension_property_selection.kind ()
        kind &= unwSelf.distanceInCanariUnit_property_selection.kind ()
        kind &= unwSelf.distanceUnit_property_selection.kind ()
        kind &= g_Preferences!.dimensionFont_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.xDimension_property_selection, unwSelf.yDimension_property_selection, unwSelf.distanceInCanariUnit_property_selection, unwSelf.distanceUnit_property_selection, g_Preferences!.dimensionFont_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8)) :
            return .single (transient_PackageDimension_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.selectionDisplay_property)
    self.y1_property.addEBObserver (self.selectionDisplay_property)
    self.x2_property.addEBObserver (self.selectionDisplay_property)
    self.y2_property.addEBObserver (self.selectionDisplay_property)
    self.xDimension_property.addEBObserver (self.selectionDisplay_property)
    self.yDimension_property.addEBObserver (self.selectionDisplay_property)
    self.distanceInCanariUnit_property.addEBObserver (self.selectionDisplay_property)
    self.distanceUnit_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.dimensionFont_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_PackageDimension_issues (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.issues_property)
    self.y1_property.addEBObserver (self.issues_property)
    self.x2_property.addEBObserver (self.issues_property)
    self.y2_property.addEBObserver (self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.distanceUnit_property.setSignatureObserver (observer:self)
    self.x1_property.setSignatureObserver (observer:self)
    self.x1Unit_property.setSignatureObserver (observer:self)
    self.x2_property.setSignatureObserver (observer:self)
    self.x2Unit_property.setSignatureObserver (observer:self)
    self.xDimension_property.setSignatureObserver (observer:self)
    self.xDimensionUnit_property.setSignatureObserver (observer:self)
    self.y1_property.setSignatureObserver (observer:self)
    self.y1Unit_property.setSignatureObserver (observer:self)
    self.y2_property.setSignatureObserver (observer:self)
    self.y2Unit_property.setSignatureObserver (observer:self)
    self.yDimension_property.setSignatureObserver (observer:self)
    self.yDimensionUnit_property.setSignatureObserver (observer:self)
  //--- Extern delegates
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.x1_property.removeEBObserver (self.distanceInCanariUnit_property)
    self.y1_property.removeEBObserver (self.distanceInCanariUnit_property)
    self.x2_property.removeEBObserver (self.distanceInCanariUnit_property)
    self.y2_property.removeEBObserver (self.distanceInCanariUnit_property)
    self.x1_property.removeEBObserver (self.objectDisplay_property)
    self.y1_property.removeEBObserver (self.objectDisplay_property)
    self.x2_property.removeEBObserver (self.objectDisplay_property)
    self.y2_property.removeEBObserver (self.objectDisplay_property)
    self.xDimension_property.removeEBObserver (self.objectDisplay_property)
    self.yDimension_property.removeEBObserver (self.objectDisplay_property)
    self.distanceInCanariUnit_property.removeEBObserver (self.objectDisplay_property)
    self.distanceUnit_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.dimensionFont_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageBackgroundColor_property.removeEBObserver (self.objectDisplay_property)
    self.x1_property.removeEBObserver (self.selectionDisplay_property)
    self.y1_property.removeEBObserver (self.selectionDisplay_property)
    self.x2_property.removeEBObserver (self.selectionDisplay_property)
    self.y2_property.removeEBObserver (self.selectionDisplay_property)
    self.xDimension_property.removeEBObserver (self.selectionDisplay_property)
    self.yDimension_property.removeEBObserver (self.selectionDisplay_property)
    self.distanceInCanariUnit_property.removeEBObserver (self.selectionDisplay_property)
    self.distanceUnit_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.dimensionFont_property.removeEBObserver (self.selectionDisplay_property)
    self.x1_property.removeEBObserver (self.issues_property)
    self.y1_property.removeEBObserver (self.issues_property)
    self.x2_property.removeEBObserver (self.issues_property)
    self.y2_property.removeEBObserver (self.issues_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "y1",
      idx:self.y1_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y1_property.mObserverExplorer,
      valueExplorer:&self.y1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2",
      idx:self.x2_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x2_property.mObserverExplorer,
      valueExplorer:&self.x2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2",
      idx:self.y2_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y2_property.mObserverExplorer,
      valueExplorer:&self.y2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xDimension",
      idx:self.xDimension_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xDimension_property.mObserverExplorer,
      valueExplorer:&self.xDimension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yDimension",
      idx:self.yDimension_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yDimension_property.mObserverExplorer,
      valueExplorer:&self.yDimension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1Unit",
      idx:self.x1Unit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x1Unit_property.mObserverExplorer,
      valueExplorer:&self.x1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y1Unit",
      idx:self.y1Unit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y1Unit_property.mObserverExplorer,
      valueExplorer:&self.y1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2Unit",
      idx:self.x2Unit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x2Unit_property.mObserverExplorer,
      valueExplorer:&self.x2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2Unit",
      idx:self.y2Unit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y2Unit_property.mObserverExplorer,
      valueExplorer:&self.y2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xDimensionUnit",
      idx:self.xDimensionUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xDimensionUnit_property.mObserverExplorer,
      valueExplorer:&self.xDimensionUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yDimensionUnit",
      idx:self.yDimensionUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yDimensionUnit_property.mObserverExplorer,
      valueExplorer:&self.yDimensionUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "distanceUnit",
      idx:self.distanceUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.distanceUnit_property.mObserverExplorer,
      valueExplorer:&self.distanceUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1",
      idx:self.x1_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x1_property.mObserverExplorer,
      valueExplorer:&self.x1_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "distanceInCanariUnit",
      idx:self.distanceInCanariUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.distanceInCanariUnit_property.mObserverExplorer,
      valueExplorer:&self.distanceInCanariUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: y1
    self.y1_property.mObserverExplorer = nil
    self.y1_property.mValueExplorer = nil
  //--- Atomic property: x2
    self.x2_property.mObserverExplorer = nil
    self.x2_property.mValueExplorer = nil
  //--- Atomic property: y2
    self.y2_property.mObserverExplorer = nil
    self.y2_property.mValueExplorer = nil
  //--- Atomic property: xDimension
    self.xDimension_property.mObserverExplorer = nil
    self.xDimension_property.mValueExplorer = nil
  //--- Atomic property: yDimension
    self.yDimension_property.mObserverExplorer = nil
    self.yDimension_property.mValueExplorer = nil
  //--- Atomic property: x1Unit
    self.x1Unit_property.mObserverExplorer = nil
    self.x1Unit_property.mValueExplorer = nil
  //--- Atomic property: y1Unit
    self.y1Unit_property.mObserverExplorer = nil
    self.y1Unit_property.mValueExplorer = nil
  //--- Atomic property: x2Unit
    self.x2Unit_property.mObserverExplorer = nil
    self.x2Unit_property.mValueExplorer = nil
  //--- Atomic property: y2Unit
    self.y2Unit_property.mObserverExplorer = nil
    self.y2Unit_property.mValueExplorer = nil
  //--- Atomic property: xDimensionUnit
    self.xDimensionUnit_property.mObserverExplorer = nil
    self.xDimensionUnit_property.mValueExplorer = nil
  //--- Atomic property: yDimensionUnit
    self.yDimensionUnit_property.mObserverExplorer = nil
    self.yDimensionUnit_property.mValueExplorer = nil
  //--- Atomic property: distanceUnit
    self.distanceUnit_property.mObserverExplorer = nil
    self.distanceUnit_property.mValueExplorer = nil
  //--- Atomic property: x1
    self.x1_property.mObserverExplorer = nil
    self.x1_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: y1
    self.y1_property.storeIn (dictionary: ioDictionary, forKey:"y1")
  //--- Atomic property: x2
    self.x2_property.storeIn (dictionary: ioDictionary, forKey:"x2")
  //--- Atomic property: y2
    self.y2_property.storeIn (dictionary: ioDictionary, forKey:"y2")
  //--- Atomic property: xDimension
    self.xDimension_property.storeIn (dictionary: ioDictionary, forKey:"xDimension")
  //--- Atomic property: yDimension
    self.yDimension_property.storeIn (dictionary: ioDictionary, forKey:"yDimension")
  //--- Atomic property: x1Unit
    self.x1Unit_property.storeIn (dictionary: ioDictionary, forKey:"x1Unit")
  //--- Atomic property: y1Unit
    self.y1Unit_property.storeIn (dictionary: ioDictionary, forKey:"y1Unit")
  //--- Atomic property: x2Unit
    self.x2Unit_property.storeIn (dictionary: ioDictionary, forKey:"x2Unit")
  //--- Atomic property: y2Unit
    self.y2Unit_property.storeIn (dictionary: ioDictionary, forKey:"y2Unit")
  //--- Atomic property: xDimensionUnit
    self.xDimensionUnit_property.storeIn (dictionary: ioDictionary, forKey:"xDimensionUnit")
  //--- Atomic property: yDimensionUnit
    self.yDimensionUnit_property.storeIn (dictionary: ioDictionary, forKey:"yDimensionUnit")
  //--- Atomic property: distanceUnit
    self.distanceUnit_property.storeIn (dictionary: ioDictionary, forKey:"distanceUnit")
  //--- Atomic property: x1
    self.x1_property.storeIn (dictionary: ioDictionary, forKey:"x1")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: y1
    self.y1_property.readFrom (dictionary: inDictionary, forKey:"y1")
  //--- Atomic property: x2
    self.x2_property.readFrom (dictionary: inDictionary, forKey:"x2")
  //--- Atomic property: y2
    self.y2_property.readFrom (dictionary: inDictionary, forKey:"y2")
  //--- Atomic property: xDimension
    self.xDimension_property.readFrom (dictionary: inDictionary, forKey:"xDimension")
  //--- Atomic property: yDimension
    self.yDimension_property.readFrom (dictionary: inDictionary, forKey:"yDimension")
  //--- Atomic property: x1Unit
    self.x1Unit_property.readFrom (dictionary: inDictionary, forKey:"x1Unit")
  //--- Atomic property: y1Unit
    self.y1Unit_property.readFrom (dictionary: inDictionary, forKey:"y1Unit")
  //--- Atomic property: x2Unit
    self.x2Unit_property.readFrom (dictionary: inDictionary, forKey:"x2Unit")
  //--- Atomic property: y2Unit
    self.y2Unit_property.readFrom (dictionary: inDictionary, forKey:"y2Unit")
  //--- Atomic property: xDimensionUnit
    self.xDimensionUnit_property.readFrom (dictionary: inDictionary, forKey:"xDimensionUnit")
  //--- Atomic property: yDimensionUnit
    self.yDimensionUnit_property.readFrom (dictionary: inDictionary, forKey:"yDimensionUnit")
  //--- Atomic property: distanceUnit
    self.distanceUnit_property.readFrom (dictionary: inDictionary, forKey:"distanceUnit")
  //--- Atomic property: x1
    self.x1_property.readFrom (dictionary: inDictionary, forKey:"x1")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.distanceUnit_property.signature ())
    crc.accumulateUInt32 (self.x1_property.signature ())
    crc.accumulateUInt32 (self.x1Unit_property.signature ())
    crc.accumulateUInt32 (self.x2_property.signature ())
    crc.accumulateUInt32 (self.x2Unit_property.signature ())
    crc.accumulateUInt32 (self.xDimension_property.signature ())
    crc.accumulateUInt32 (self.xDimensionUnit_property.signature ())
    crc.accumulateUInt32 (self.y1_property.signature ())
    crc.accumulateUInt32 (self.y1Unit_property.signature ())
    crc.accumulateUInt32 (self.y2_property.signature ())
    crc.accumulateUInt32 (self.y2Unit_property.signature ())
    crc.accumulateUInt32 (self.yDimension_property.signature ())
    crc.accumulateUInt32 (self.yDimensionUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageDimension
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageDimension : ReadOnlyAbstractArrayProperty <PackageDimension> {

  //····················································································································
  //   Observers of 'y1' stored property
  //····················································································································

  private var mObserversOf_y1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y1_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_y1.apply ( {(_ observer : EBEvent) in
        managedObject.y1_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_y1_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_y1.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y1_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'x2' stored property
  //····················································································································

  private var mObserversOf_x2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x2_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_x2.apply ( {(_ observer : EBEvent) in
        managedObject.x2_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_x2_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_x2.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x2_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'y2' stored property
  //····················································································································

  private var mObserversOf_y2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y2_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_y2.apply ( {(_ observer : EBEvent) in
        managedObject.y2_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_y2_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_y2.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y2_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'xDimension' stored property
  //····················································································································

  private var mObserversOf_xDimension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xDimension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xDimension.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xDimension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xDimension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xDimension.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xDimension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xDimension_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_xDimension.apply ( {(_ observer : EBEvent) in
        managedObject.xDimension_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_xDimension_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_xDimension.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xDimension_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'yDimension' stored property
  //····················································································································

  private var mObserversOf_yDimension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yDimension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yDimension.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yDimension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yDimension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yDimension.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yDimension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yDimension_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_yDimension.apply ( {(_ observer : EBEvent) in
        managedObject.yDimension_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_yDimension_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_yDimension.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yDimension_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'x1Unit' stored property
  //····················································································································

  private var mObserversOf_x1Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x1Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x1Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x1Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x1Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x1Unit_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_x1Unit.apply ( {(_ observer : EBEvent) in
        managedObject.x1Unit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_x1Unit_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_x1Unit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x1Unit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'y1Unit' stored property
  //····················································································································

  private var mObserversOf_y1Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y1Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y1Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y1Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y1Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y1Unit_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_y1Unit.apply ( {(_ observer : EBEvent) in
        managedObject.y1Unit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_y1Unit_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_y1Unit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y1Unit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'x2Unit' stored property
  //····················································································································

  private var mObserversOf_x2Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x2Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x2Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x2Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x2Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x2Unit_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_x2Unit.apply ( {(_ observer : EBEvent) in
        managedObject.x2Unit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_x2Unit_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_x2Unit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x2Unit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'y2Unit' stored property
  //····················································································································

  private var mObserversOf_y2Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y2Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y2Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y2Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y2Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y2Unit_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_y2Unit.apply ( {(_ observer : EBEvent) in
        managedObject.y2Unit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_y2Unit_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_y2Unit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y2Unit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'xDimensionUnit' stored property
  //····················································································································

  private var mObserversOf_xDimensionUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xDimensionUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xDimensionUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xDimensionUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xDimensionUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xDimensionUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xDimensionUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xDimensionUnit_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_xDimensionUnit.apply ( {(_ observer : EBEvent) in
        managedObject.xDimensionUnit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_xDimensionUnit_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_xDimensionUnit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xDimensionUnit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'yDimensionUnit' stored property
  //····················································································································

  private var mObserversOf_yDimensionUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yDimensionUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yDimensionUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yDimensionUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yDimensionUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yDimensionUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yDimensionUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yDimensionUnit_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_yDimensionUnit.apply ( {(_ observer : EBEvent) in
        managedObject.yDimensionUnit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_yDimensionUnit_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_yDimensionUnit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yDimensionUnit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'distanceUnit' stored property
  //····················································································································

  private var mObserversOf_distanceUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_distanceUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_distanceUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.distanceUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_distanceUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_distanceUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.distanceUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_distanceUnit_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_distanceUnit.apply ( {(_ observer : EBEvent) in
        managedObject.distanceUnit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_distanceUnit_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_distanceUnit.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.distanceUnit_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'x1' stored property
  //····················································································································

  private var mObserversOf_x1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x1_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_x1.apply ( {(_ observer : EBEvent) in
        managedObject.x1_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_x1_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    self.mObserversOf_x1.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x1_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'distanceInCanariUnit' transient property
  //····················································································································

  private var mObserversOf_distanceInCanariUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_distanceInCanariUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_distanceInCanariUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.distanceInCanariUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_distanceInCanariUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_distanceInCanariUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.distanceInCanariUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_distanceInCanariUnit_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_distanceInCanariUnit.apply ( {(_ observer : EBEvent) in
        managedObject.distanceInCanariUnit_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_distanceInCanariUnit_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_distanceInCanariUnit.apply ( {(_ observer : EBEvent) in
        managedObject.distanceInCanariUnit_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply ( {(_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageDimension>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply ( {(_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_PackageDimension
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageDimension : ReadOnlyArrayOf_PackageDimension {

  //····················································································································

  var readModelFunction : Optional < () -> EBSelection < [PackageDimension] > > = nil

  //····················································································································

  override var propset : Set <PackageDimension> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [PackageDimension] > {
    self.computeArrayAndSet ()
    return self.prop_cache!  
  }
 
  //····················································································································

  override var propval : [PackageDimension] {
    self.computeArrayAndSet ()
    if let value = self.prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <PackageDimension> ()

  //····················································································································

  private var prop_cache : EBSelection < [PackageDimension] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.readModelFunction, self.prop_cache == nil {
      self.prop_cache = unwrappedComputeFunction ()
      let newSet : Set <PackageDimension>
      switch self.prop_cache! {
      case .multiple, .empty :
        newSet = Set <PackageDimension> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_y1_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_x2_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_y2_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xDimension_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yDimension_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_x1Unit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_y1Unit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_x2Unit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_y2Unit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xDimensionUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yDimensionUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_distanceUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_x1_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_distanceInCanariUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_issues_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_y1_toElementsOfSet (addedSet)
      self.addEBObserversOf_x2_toElementsOfSet (addedSet)
      self.addEBObserversOf_y2_toElementsOfSet (addedSet)
      self.addEBObserversOf_xDimension_toElementsOfSet (addedSet)
      self.addEBObserversOf_yDimension_toElementsOfSet (addedSet)
      self.addEBObserversOf_x1Unit_toElementsOfSet (addedSet)
      self.addEBObserversOf_y1Unit_toElementsOfSet (addedSet)
      self.addEBObserversOf_x2Unit_toElementsOfSet (addedSet)
      self.addEBObserversOf_y2Unit_toElementsOfSet (addedSet)
      self.addEBObserversOf_xDimensionUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_yDimensionUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_distanceUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_x1_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_distanceInCanariUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_issues_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.prop_cache == nil {
      self.prop_cache = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.prop_cache != nil {
      self.prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageDimension
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageDimension : ReadOnlyArrayOf_PackageDimension {

  //····················································································································
 
  func setProp (_ value :  [PackageDimension]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageDimension
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageDimension : ReadWriteArrayOf_PackageDimension, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : PackageDimension?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageDimension] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "PackageDimension") as? PackageDimension {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <PackageDimension> ()
  private var mValue = [PackageDimension] () {
    didSet {
      self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
          managedObject.y1_property.mSetterDelegate = nil
          managedObject.x2_property.mSetterDelegate = nil
          managedObject.y2_property.mSetterDelegate = nil
          managedObject.xDimension_property.mSetterDelegate = nil
          managedObject.yDimension_property.mSetterDelegate = nil
          managedObject.x1Unit_property.mSetterDelegate = nil
          managedObject.y1Unit_property.mSetterDelegate = nil
          managedObject.x2Unit_property.mSetterDelegate = nil
          managedObject.y2Unit_property.mSetterDelegate = nil
          managedObject.xDimensionUnit_property.mSetterDelegate = nil
          managedObject.yDimensionUnit_property.mSetterDelegate = nil
          managedObject.distanceUnit_property.mSetterDelegate = nil
          managedObject.x1_property.mSetterDelegate = nil
        }
        self.removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_xDimension_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_yDimension_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_x1Unit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_y1Unit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_x2Unit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_y2Unit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_xDimensionUnit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_yDimensionUnit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_distanceUnit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_distanceInCanariUnit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        for managedObject : PackageDimension in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
          managedObject.y1_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.x2_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.y2_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.xDimension_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.yDimension_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.x1Unit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.y1Unit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.x2Unit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.y2Unit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.xDimensionUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.yDimensionUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.distanceUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.x1_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
        }
        self.addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_xDimension_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_yDimension_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_x1Unit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_y1Unit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_x2Unit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_y2Unit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_xDimensionUnit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_yDimensionUnit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_distanceUnit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_distanceInCanariUnit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [kEntityKey] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [PackageDimension] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageDimension]) { self.mValue = inValue }

  //····················································································································

  override var propval : [PackageDimension] { return self.mValue }

  //····················································································································

  override var propset : Set <PackageDimension> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [PackageDimension]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PackageDimension) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PackageDimension) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
