//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_y1 : class {
  var y1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_x2 : class {
  var x2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_y2 : class {
  var y2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_x1Unit : class {
  var x1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_y1Unit : class {
  var y1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_x2Unit : class {
  var x2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_y2Unit : class {
  var y2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_lengthUnit : class {
  var lengthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_x1 : class {
  var x1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_strokeBezierPath : class {
  var strokeBezierPath : NSBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSegment_lengthInCanariUnit : class {
  var lengthInCanariUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageSegment
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageSegment : PackageObject,
         PackageSegment_y1,
         PackageSegment_x2,
         PackageSegment_y2,
         PackageSegment_x1Unit,
         PackageSegment_y1Unit,
         PackageSegment_x2Unit,
         PackageSegment_y2Unit,
         PackageSegment_lengthUnit,
         PackageSegment_x1,
         PackageSegment_strokeBezierPath,
         PackageSegment_objectDisplay,
         PackageSegment_selectionDisplay,
         PackageSegment_issues,
         PackageSegment_lengthInCanariUnit {

  //····················································································································
  //   Atomic property: y1
  //····················································································································

  let y1_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var y1 : Int {
    get { return self.y1_property.propval }
    set { self.y1_property.setProp (newValue) }
  }

  //····················································································································

  var y1_property_selection : EBSelection <Int> { return self.y1_property.prop }

  //····················································································································
  //   Atomic property: x2
  //····················································································································

  let x2_property = EBStoredProperty_Int (defaultValue: 685800)

  //····················································································································

  var x2 : Int {
    get { return self.x2_property.propval }
    set { self.x2_property.setProp (newValue) }
  }

  //····················································································································

  var x2_property_selection : EBSelection <Int> { return self.x2_property.prop }

  //····················································································································
  //   Atomic property: y2
  //····················································································································

  let y2_property = EBStoredProperty_Int (defaultValue: 685800)

  //····················································································································

  var y2 : Int {
    get { return self.y2_property.propval }
    set { self.y2_property.setProp (newValue) }
  }

  //····················································································································

  var y2_property_selection : EBSelection <Int> { return self.y2_property.prop }

  //····················································································································
  //   Atomic property: x1Unit
  //····················································································································

  let x1Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var x1Unit : Int {
    get { return self.x1Unit_property.propval }
    set { self.x1Unit_property.setProp (newValue) }
  }

  //····················································································································

  var x1Unit_property_selection : EBSelection <Int> { return self.x1Unit_property.prop }

  //····················································································································
  //   Atomic property: y1Unit
  //····················································································································

  let y1Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var y1Unit : Int {
    get { return self.y1Unit_property.propval }
    set { self.y1Unit_property.setProp (newValue) }
  }

  //····················································································································

  var y1Unit_property_selection : EBSelection <Int> { return self.y1Unit_property.prop }

  //····················································································································
  //   Atomic property: x2Unit
  //····················································································································

  let x2Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var x2Unit : Int {
    get { return self.x2Unit_property.propval }
    set { self.x2Unit_property.setProp (newValue) }
  }

  //····················································································································

  var x2Unit_property_selection : EBSelection <Int> { return self.x2Unit_property.prop }

  //····················································································································
  //   Atomic property: y2Unit
  //····················································································································

  let y2Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var y2Unit : Int {
    get { return self.y2Unit_property.propval }
    set { self.y2Unit_property.setProp (newValue) }
  }

  //····················································································································

  var y2Unit_property_selection : EBSelection <Int> { return self.y2Unit_property.prop }

  //····················································································································
  //   Atomic property: lengthUnit
  //····················································································································

  let lengthUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var lengthUnit : Int {
    get { return self.lengthUnit_property.propval }
    set { self.lengthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var lengthUnit_property_selection : EBSelection <Int> { return self.lengthUnit_property.prop }

  //····················································································································
  //   Atomic property: x1
  //····················································································································

  let x1_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var x1 : Int {
    get { return self.x1_property.propval }
    set { self.x1_property.setProp (newValue) }
  }

  //····················································································································

  var x1_property_selection : EBSelection <Int> { return self.x1_property.prop }

  //····················································································································
  //   Transient property: strokeBezierPath
  //····················································································································

  let strokeBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  var strokeBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.strokeBezierPath_property.prop
  }

  //····················································································································

  var strokeBezierPath : NSBezierPath? {
    switch self.strokeBezierPath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: lengthInCanariUnit
  //····················································································································

  let lengthInCanariUnit_property = EBTransientProperty_Int ()

  //····················································································································

  var lengthInCanariUnit_property_selection : EBSelection <Int> {
    return self.lengthInCanariUnit_property.prop
  }

  //····················································································································

  var lengthInCanariUnit : Int? {
    switch self.lengthInCanariUnit_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: y1
    self.y1_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: x2
    self.x2_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: y2
    self.y2_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: x1Unit
    self.x1Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: y1Unit
    self.y1Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: x2Unit
    self.x2Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: y2Unit
    self.y2Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: lengthUnit
    self.lengthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: x1
    self.x1_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_PackageSegment_strokeBezierPath (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.strokeBezierPath_property)
    self.y1_property.addEBObserver (self.strokeBezierPath_property)
    self.x2_property.addEBObserver (self.strokeBezierPath_property)
    self.y2_property.addEBObserver (self.strokeBezierPath_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.strokeBezierPath_property_selection.kind ()
        kind &= g_Preferences!.packageColor_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.strokeBezierPath_property_selection, g_Preferences!.packageColor_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_PackageSegment_objectDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.strokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_PackageSegment_selectionDisplay (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.selectionDisplay_property)
    self.y1_property.addEBObserver (self.selectionDisplay_property)
    self.x2_property.addEBObserver (self.selectionDisplay_property)
    self.y2_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_PackageSegment_issues (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.issues_property)
    self.y1_property.addEBObserver (self.issues_property)
    self.x2_property.addEBObserver (self.issues_property)
    self.y2_property.addEBObserver (self.issues_property)
  //--- Atomic property: lengthInCanariUnit
    self.lengthInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_PackageSegment_lengthInCanariUnit (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.lengthInCanariUnit_property)
    self.y1_property.addEBObserver (self.lengthInCanariUnit_property)
    self.x2_property.addEBObserver (self.lengthInCanariUnit_property)
    self.y2_property.addEBObserver (self.lengthInCanariUnit_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.lengthUnit_property.setSignatureObserver (observer: self)
    self.x1_property.setSignatureObserver (observer: self)
    self.x1Unit_property.setSignatureObserver (observer: self)
    self.x2_property.setSignatureObserver (observer: self)
    self.x2Unit_property.setSignatureObserver (observer: self)
    self.y1_property.setSignatureObserver (observer: self)
    self.y1Unit_property.setSignatureObserver (observer: self)
    self.y2_property.setSignatureObserver (observer: self)
    self.y2Unit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.x1_property.removeEBObserver (self.strokeBezierPath_property)
    self.y1_property.removeEBObserver (self.strokeBezierPath_property)
    self.x2_property.removeEBObserver (self.strokeBezierPath_property)
    self.y2_property.removeEBObserver (self.strokeBezierPath_property)
    self.strokeBezierPath_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    self.x1_property.removeEBObserver (self.selectionDisplay_property)
    self.y1_property.removeEBObserver (self.selectionDisplay_property)
    self.x2_property.removeEBObserver (self.selectionDisplay_property)
    self.y2_property.removeEBObserver (self.selectionDisplay_property)
    self.x1_property.removeEBObserver (self.issues_property)
    self.y1_property.removeEBObserver (self.issues_property)
    self.x2_property.removeEBObserver (self.issues_property)
    self.y2_property.removeEBObserver (self.issues_property)
    self.x1_property.removeEBObserver (self.lengthInCanariUnit_property)
    self.y1_property.removeEBObserver (self.lengthInCanariUnit_property)
    self.x2_property.removeEBObserver (self.lengthInCanariUnit_property)
    self.y2_property.removeEBObserver (self.lengthInCanariUnit_property)
  //--- Unregister properties for handling signature
    self.lengthUnit_property.setSignatureObserver (observer: nil)
    self.x1_property.setSignatureObserver (observer: nil)
    self.x1Unit_property.setSignatureObserver (observer: nil)
    self.x2_property.setSignatureObserver (observer: nil)
    self.x2Unit_property.setSignatureObserver (observer: nil)
    self.y1_property.setSignatureObserver (observer: nil)
    self.y1Unit_property.setSignatureObserver (observer: nil)
    self.y2_property.setSignatureObserver (observer: nil)
    self.y2Unit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "y1",
      idx:self.y1_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y1_property.mObserverExplorer,
      valueExplorer:&self.y1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2",
      idx:self.x2_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x2_property.mObserverExplorer,
      valueExplorer:&self.x2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2",
      idx:self.y2_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y2_property.mObserverExplorer,
      valueExplorer:&self.y2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1Unit",
      idx:self.x1Unit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x1Unit_property.mObserverExplorer,
      valueExplorer:&self.x1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y1Unit",
      idx:self.y1Unit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y1Unit_property.mObserverExplorer,
      valueExplorer:&self.y1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2Unit",
      idx:self.x2Unit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x2Unit_property.mObserverExplorer,
      valueExplorer:&self.x2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2Unit",
      idx:self.y2Unit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y2Unit_property.mObserverExplorer,
      valueExplorer:&self.y2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "lengthUnit",
      idx:self.lengthUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.lengthUnit_property.mObserverExplorer,
      valueExplorer:&self.lengthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1",
      idx:self.x1_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x1_property.mObserverExplorer,
      valueExplorer:&self.x1_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "strokeBezierPath",
      idx:self.strokeBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.strokeBezierPath_property.mObserverExplorer,
      valueExplorer:&self.strokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "lengthInCanariUnit",
      idx:self.lengthInCanariUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.lengthInCanariUnit_property.mObserverExplorer,
      valueExplorer:&self.lengthInCanariUnit_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: y1
    self.y1_property.mObserverExplorer = nil
    self.y1_property.mValueExplorer = nil
  //--- Atomic property: x2
    self.x2_property.mObserverExplorer = nil
    self.x2_property.mValueExplorer = nil
  //--- Atomic property: y2
    self.y2_property.mObserverExplorer = nil
    self.y2_property.mValueExplorer = nil
  //--- Atomic property: x1Unit
    self.x1Unit_property.mObserverExplorer = nil
    self.x1Unit_property.mValueExplorer = nil
  //--- Atomic property: y1Unit
    self.y1Unit_property.mObserverExplorer = nil
    self.y1Unit_property.mValueExplorer = nil
  //--- Atomic property: x2Unit
    self.x2Unit_property.mObserverExplorer = nil
    self.x2Unit_property.mValueExplorer = nil
  //--- Atomic property: y2Unit
    self.y2Unit_property.mObserverExplorer = nil
    self.y2Unit_property.mValueExplorer = nil
  //--- Atomic property: lengthUnit
    self.lengthUnit_property.mObserverExplorer = nil
    self.lengthUnit_property.mValueExplorer = nil
  //--- Atomic property: x1
    self.x1_property.mObserverExplorer = nil
    self.x1_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: y1
    self.y1_property.storeIn (dictionary: ioDictionary, forKey:"y1")
  //--- Atomic property: x2
    self.x2_property.storeIn (dictionary: ioDictionary, forKey:"x2")
  //--- Atomic property: y2
    self.y2_property.storeIn (dictionary: ioDictionary, forKey:"y2")
  //--- Atomic property: x1Unit
    self.x1Unit_property.storeIn (dictionary: ioDictionary, forKey:"x1Unit")
  //--- Atomic property: y1Unit
    self.y1Unit_property.storeIn (dictionary: ioDictionary, forKey:"y1Unit")
  //--- Atomic property: x2Unit
    self.x2Unit_property.storeIn (dictionary: ioDictionary, forKey:"x2Unit")
  //--- Atomic property: y2Unit
    self.y2Unit_property.storeIn (dictionary: ioDictionary, forKey:"y2Unit")
  //--- Atomic property: lengthUnit
    self.lengthUnit_property.storeIn (dictionary: ioDictionary, forKey:"lengthUnit")
  //--- Atomic property: x1
    self.x1_property.storeIn (dictionary: ioDictionary, forKey:"x1")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: y1
    self.y1_property.readFrom (dictionary: inDictionary, forKey:"y1")
  //--- Atomic property: x2
    self.x2_property.readFrom (dictionary: inDictionary, forKey:"x2")
  //--- Atomic property: y2
    self.y2_property.readFrom (dictionary: inDictionary, forKey:"y2")
  //--- Atomic property: x1Unit
    self.x1Unit_property.readFrom (dictionary: inDictionary, forKey:"x1Unit")
  //--- Atomic property: y1Unit
    self.y1Unit_property.readFrom (dictionary: inDictionary, forKey:"y1Unit")
  //--- Atomic property: x2Unit
    self.x2Unit_property.readFrom (dictionary: inDictionary, forKey:"x2Unit")
  //--- Atomic property: y2Unit
    self.y2Unit_property.readFrom (dictionary: inDictionary, forKey:"y2Unit")
  //--- Atomic property: lengthUnit
    self.lengthUnit_property.readFrom (dictionary: inDictionary, forKey:"lengthUnit")
  //--- Atomic property: x1
    self.x1_property.readFrom (dictionary: inDictionary, forKey:"x1")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.lengthUnit_property.signature ())
    crc.accumulateUInt32 (self.x1_property.signature ())
    crc.accumulateUInt32 (self.x1Unit_property.signature ())
    crc.accumulateUInt32 (self.x2_property.signature ())
    crc.accumulateUInt32 (self.x2Unit_property.signature ())
    crc.accumulateUInt32 (self.y1_property.signature ())
    crc.accumulateUInt32 (self.y1Unit_property.signature ())
    crc.accumulateUInt32 (self.y2_property.signature ())
    crc.accumulateUInt32 (self.y2Unit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageSegment
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageSegment : ReadOnlyAbstractArrayProperty <PackageSegment> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <PackageSegment>, addedSet inAddedSet : Set <PackageSegment>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_y1_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_x2_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_y2_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_x1Unit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_y1Unit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_x2Unit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_y2Unit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_lengthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_x1_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_strokeBezierPath_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_lengthInCanariUnit_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_y1_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_x2_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_y2_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_x1Unit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_y1Unit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_x2Unit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_y2Unit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_lengthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_x1_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_strokeBezierPath_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_lengthInCanariUnit_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'y1' stored property
  //····················································································································

  private var mObserversOf_y1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y1_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_y1.apply { (_ observer : EBEvent) in
        managedObject.y1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y1_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_y1.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x2' stored property
  //····················································································································

  private var mObserversOf_x2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x2_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_x2.apply { (_ observer : EBEvent) in
        managedObject.x2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x2_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_x2.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y2' stored property
  //····················································································································

  private var mObserversOf_y2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y2_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_y2.apply { (_ observer : EBEvent) in
        managedObject.y2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y2_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_y2.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x1Unit' stored property
  //····················································································································

  private var mObserversOf_x1Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x1Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x1Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x1Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x1Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x1Unit_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_x1Unit.apply { (_ observer : EBEvent) in
        managedObject.x1Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x1Unit_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_x1Unit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x1Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y1Unit' stored property
  //····················································································································

  private var mObserversOf_y1Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y1Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y1Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y1Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y1Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y1Unit_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_y1Unit.apply { (_ observer : EBEvent) in
        managedObject.y1Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y1Unit_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_y1Unit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y1Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x2Unit' stored property
  //····················································································································

  private var mObserversOf_x2Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x2Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x2Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x2Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x2Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x2Unit_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_x2Unit.apply { (_ observer : EBEvent) in
        managedObject.x2Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x2Unit_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_x2Unit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x2Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y2Unit' stored property
  //····················································································································

  private var mObserversOf_y2Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y2Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y2Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y2Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y2Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y2Unit_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_y2Unit.apply { (_ observer : EBEvent) in
        managedObject.y2Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y2Unit_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_y2Unit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y2Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'lengthUnit' stored property
  //····················································································································

  private var mObserversOf_lengthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_lengthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_lengthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.lengthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_lengthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_lengthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.lengthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_lengthUnit_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_lengthUnit.apply { (_ observer : EBEvent) in
        managedObject.lengthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_lengthUnit_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_lengthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.lengthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x1' stored property
  //····················································································································

  private var mObserversOf_x1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x1_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_x1.apply { (_ observer : EBEvent) in
        managedObject.x1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x1_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_x1.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private var mObserversOf_strokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.strokeBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.strokeBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_strokeBezierPath_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_strokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.strokeBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_strokeBezierPath_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_strokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.strokeBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'lengthInCanariUnit' transient property
  //····················································································································

  private var mObserversOf_lengthInCanariUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_lengthInCanariUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_lengthInCanariUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.lengthInCanariUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_lengthInCanariUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_lengthInCanariUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.lengthInCanariUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_lengthInCanariUnit_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_lengthInCanariUnit.apply { (_ observer : EBEvent) in
        managedObject.lengthInCanariUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_lengthInCanariUnit_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_lengthInCanariUnit.apply { (_ observer : EBEvent) in
        managedObject.lengthInCanariUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageSegment
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageSegment : ReadOnlyArrayOf_PackageSegment {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_PackageSegment? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_PackageSegment?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [PackageSegment] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [PackageSegment] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [PackageSegment] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageSegment
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_PackageSegment <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageSegment {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [PackageSegment] ()
    for superObject in newModelArray {
      if let object = superObject as? PackageSegment {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [PackageSegment] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [PackageSegment] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageSegment
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageSegment : ReadOnlyArrayOf_PackageSegment {

  //····················································································································
 
  func setProp (_ value :  [PackageSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageSegment
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_PackageSegment : ReadWriteArrayOf_PackageSegment {

  //····················································································································

  private var mModel : ReadWriteArrayOf_PackageSegment? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_PackageSegment?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [PackageSegment]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [PackageSegment]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [PackageSegment] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [PackageSegment] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageSegment
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageSegment : ReadWriteArrayOf_PackageSegment, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageSegment) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageSegment) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageSegment) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageSegment) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageSegment] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PackageSegment") as? PackageSegment {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [PackageSegment]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [PackageSegment]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <PackageSegment>, addedSet inAddedSet : Set <PackageSegment>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //---
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  }
 
  //····················································································································

  override var prop : EBSelection < [PackageSegment] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageSegment]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [PackageSegment] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : PackageSegment) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : PackageSegment) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_PackageSegment 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_PackageSegment : ReadOnlyAbstractObjectProperty <PackageSegment> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackageSegment?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.y1_property.removeEBObserversFrom (&self.mObserversOf_y1) // Stored property
    inOldValue?.x2_property.removeEBObserversFrom (&self.mObserversOf_x2) // Stored property
    inOldValue?.y2_property.removeEBObserversFrom (&self.mObserversOf_y2) // Stored property
    inOldValue?.x1Unit_property.removeEBObserversFrom (&self.mObserversOf_x1Unit) // Stored property
    inOldValue?.y1Unit_property.removeEBObserversFrom (&self.mObserversOf_y1Unit) // Stored property
    inOldValue?.x2Unit_property.removeEBObserversFrom (&self.mObserversOf_x2Unit) // Stored property
    inOldValue?.y2Unit_property.removeEBObserversFrom (&self.mObserversOf_y2Unit) // Stored property
    inOldValue?.lengthUnit_property.removeEBObserversFrom (&self.mObserversOf_lengthUnit) // Stored property
    inOldValue?.x1_property.removeEBObserversFrom (&self.mObserversOf_x1) // Stored property
    inOldValue?.strokeBezierPath_property.removeEBObserversFrom (&self.mObserversOf_strokeBezierPath) // Transient property
    inOldValue?.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    inOldValue?.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
    inOldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
    inOldValue?.lengthInCanariUnit_property.removeEBObserversFrom (&self.mObserversOf_lengthInCanariUnit) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.y1_property.addEBObserversFrom (&self.mObserversOf_y1) // Stored property
    self.mInternalValue?.x2_property.addEBObserversFrom (&self.mObserversOf_x2) // Stored property
    self.mInternalValue?.y2_property.addEBObserversFrom (&self.mObserversOf_y2) // Stored property
    self.mInternalValue?.x1Unit_property.addEBObserversFrom (&self.mObserversOf_x1Unit) // Stored property
    self.mInternalValue?.y1Unit_property.addEBObserversFrom (&self.mObserversOf_y1Unit) // Stored property
    self.mInternalValue?.x2Unit_property.addEBObserversFrom (&self.mObserversOf_x2Unit) // Stored property
    self.mInternalValue?.y2Unit_property.addEBObserversFrom (&self.mObserversOf_y2Unit) // Stored property
    self.mInternalValue?.lengthUnit_property.addEBObserversFrom (&self.mObserversOf_lengthUnit) // Stored property
    self.mInternalValue?.x1_property.addEBObserversFrom (&self.mObserversOf_x1) // Stored property
    self.mInternalValue?.strokeBezierPath_property.addEBObserversFrom (&self.mObserversOf_strokeBezierPath) // Transient property
    self.mInternalValue?.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    self.mInternalValue?.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
    self.mInternalValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
    self.mInternalValue?.lengthInCanariUnit_property.addEBObserversFrom (&self.mObserversOf_lengthInCanariUnit) // Transient property
  }

  //····················································································································
  //   Observers of 'y1' stored property
  //····················································································································

  private var mObserversOf_y1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.y1_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.y1_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_y1_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_y1.apply { (_ observer : EBEvent) in
        managedObject.y1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y1_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_y1.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x2' stored property
  //····················································································································

  private var mObserversOf_x2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.x2_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.x2_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_x2_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_x2.apply { (_ observer : EBEvent) in
        managedObject.x2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x2_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_x2.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y2' stored property
  //····················································································································

  private var mObserversOf_y2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.y2_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.y2_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_y2_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_y2.apply { (_ observer : EBEvent) in
        managedObject.y2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y2_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_y2.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x1Unit' stored property
  //····················································································································

  private var mObserversOf_x1Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x1Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x1Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.x1Unit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_x1Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x1Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.x1Unit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_x1Unit_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_x1Unit.apply { (_ observer : EBEvent) in
        managedObject.x1Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x1Unit_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_x1Unit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x1Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y1Unit' stored property
  //····················································································································

  private var mObserversOf_y1Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y1Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y1Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.y1Unit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_y1Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y1Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.y1Unit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_y1Unit_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_y1Unit.apply { (_ observer : EBEvent) in
        managedObject.y1Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y1Unit_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_y1Unit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y1Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x2Unit' stored property
  //····················································································································

  private var mObserversOf_x2Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x2Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x2Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.x2Unit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_x2Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x2Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.x2Unit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_x2Unit_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_x2Unit.apply { (_ observer : EBEvent) in
        managedObject.x2Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x2Unit_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_x2Unit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x2Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y2Unit' stored property
  //····················································································································

  private var mObserversOf_y2Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y2Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y2Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.y2Unit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_y2Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y2Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.y2Unit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_y2Unit_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_y2Unit.apply { (_ observer : EBEvent) in
        managedObject.y2Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y2Unit_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_y2Unit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y2Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'lengthUnit' stored property
  //····················································································································

  private var mObserversOf_lengthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_lengthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_lengthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.lengthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_lengthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_lengthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.lengthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_lengthUnit_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_lengthUnit.apply { (_ observer : EBEvent) in
        managedObject.lengthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_lengthUnit_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_lengthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.lengthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x1' stored property
  //····················································································································

  private var mObserversOf_x1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.x1_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.x1_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_x1_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_x1.apply { (_ observer : EBEvent) in
        managedObject.x1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x1_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    self.mObserversOf_x1.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private var mObserversOf_strokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.strokeBezierPath_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.strokeBezierPath_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_strokeBezierPath_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_strokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.strokeBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_strokeBezierPath_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_strokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.strokeBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'lengthInCanariUnit' transient property
  //····················································································································

  private var mObserversOf_lengthInCanariUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_lengthInCanariUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_lengthInCanariUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.lengthInCanariUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_lengthInCanariUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_lengthInCanariUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.lengthInCanariUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_lengthInCanariUnit_toElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_lengthInCanariUnit.apply { (_ observer : EBEvent) in
        managedObject.lengthInCanariUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_lengthInCanariUnit_fromElementsOfSet (_ inSet : Set<PackageSegment>) {
    for managedObject in inSet {
      self.mObserversOf_lengthInCanariUnit.apply { (_ observer : EBEvent) in
        managedObject.lengthInCanariUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject PackageSegment
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_PackageSegment : ReadOnlyObject_PackageSegment {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackageSegment? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackageSegment?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackageSegment? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackageSegment > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackageSegment? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_PackageSegment
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_PackageSegment : ReadOnlyObject_PackageSegment {

  //····················································································································
 
  func setProp (_ inValue : PackageSegment?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_PackageSegment
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_PackageSegment : ReadWriteObject_PackageSegment {

  //····················································································································

  private var mModel : ReadWriteObject_PackageSegment? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackageSegment?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackageSegment?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackageSegment?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < PackageSegment > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackageSegment? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_PackageSegment 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_PackageSegment : ReadWriteObject_PackageSegment, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageSegment) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageSegment) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageSegment) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageSegment) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

 /* convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageSegment] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PackageSegment") as? PackageSegment {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  } */

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageSegment?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : PackageSegment?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackageSegment > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackageSegment?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackageSegment? { return self.mInternalValue }

  //····················································································································

  func remove (_ object : PackageSegment) {
    if object === self.mInternalValue {
      self.mInternalValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : PackageSegment) {
    if object !== self.mInternalValue {
      self.mInternalValue = object
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
