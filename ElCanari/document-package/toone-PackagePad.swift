//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PackagePad 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PackagePad : ReadOnlyAbstractObjectProperty <PackagePad> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackagePad?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.xCenter_property.removeEBObserver (self.xCenter_property) // Stored property
    inOldValue?.yCenter_property.removeEBObserver (self.yCenter_property) // Stored property
    inOldValue?.width_property.removeEBObserver (self.width_property) // Stored property
    inOldValue?.height_property.removeEBObserver (self.height_property) // Stored property
    inOldValue?.holeWidth_property.removeEBObserver (self.holeWidth_property) // Stored property
    inOldValue?.holeHeight_property.removeEBObserver (self.holeHeight_property) // Stored property
    inOldValue?.padShape_property.removeEBObserver (self.padShape_property) // Stored property
    inOldValue?.padStyle_property.removeEBObserver (self.padStyle_property) // Stored property
    inOldValue?.padNumber_property.removeEBObserver (self.padNumber_property) // Stored property
    inOldValue?.xCenterUnit_property.removeEBObserver (self.xCenterUnit_property) // Stored property
    inOldValue?.yCenterUnit_property.removeEBObserver (self.yCenterUnit_property) // Stored property
    inOldValue?.widthUnit_property.removeEBObserver (self.widthUnit_property) // Stored property
    inOldValue?.heightUnit_property.removeEBObserver (self.heightUnit_property) // Stored property
    inOldValue?.holeWidthUnit_property.removeEBObserver (self.holeWidthUnit_property) // Stored property
    inOldValue?.holeHeightUnit_property.removeEBObserver (self.holeHeightUnit_property) // Stored property
    inOldValue?.annularRingUnit_property.removeEBObserver (self.annularRingUnit_property) // Stored property
    inOldValue?.selectionDisplay_property.removeEBObserver (self.selectionDisplay_property) // Transient property
    inOldValue?.padNameForDisplay_property.removeEBObserver (self.padNameForDisplay_property) // Transient property
    inOldValue?.issues_property.removeEBObserver (self.issues_property) // Transient property
    inOldValue?.padIsTraversing_property.removeEBObserver (self.padIsTraversing_property) // Transient property
    inOldValue?.annularRing_property.removeEBObserver (self.annularRing_property) // Transient property
    inOldValue?.padNameWithZoneName_property.removeEBObserver (self.padNameWithZoneName_property) // Transient property
    inOldValue?.zoneName_property.removeEBObserver (self.zoneName_property) // Transient property
    inOldValue?.noZone_property.removeEBObserver (self.noZone_property) // Transient property
    inOldValue?.zoneAllowsManualRenumbering_property.removeEBObserver (self.zoneAllowsManualRenumbering_property) // Transient property
    inOldValue?.slavePadCount_property.removeEBObserver (self.slavePadCount_property) // Transient property
    inOldValue?.objectDisplay_property.removeEBObserver (self.objectDisplay_property) // Transient property
    inOldValue?.padNumberDisplay_property.removeEBObserver (self.padNumberDisplay_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.xCenter_property.addEBObserver (self.xCenter_property) // Stored property
    self.mInternalValue?.yCenter_property.addEBObserver (self.yCenter_property) // Stored property
    self.mInternalValue?.width_property.addEBObserver (self.width_property) // Stored property
    self.mInternalValue?.height_property.addEBObserver (self.height_property) // Stored property
    self.mInternalValue?.holeWidth_property.addEBObserver (self.holeWidth_property) // Stored property
    self.mInternalValue?.holeHeight_property.addEBObserver (self.holeHeight_property) // Stored property
    self.mInternalValue?.padShape_property.addEBObserver (self.padShape_property) // Stored property
    self.mInternalValue?.padStyle_property.addEBObserver (self.padStyle_property) // Stored property
    self.mInternalValue?.padNumber_property.addEBObserver (self.padNumber_property) // Stored property
    self.mInternalValue?.xCenterUnit_property.addEBObserver (self.xCenterUnit_property) // Stored property
    self.mInternalValue?.yCenterUnit_property.addEBObserver (self.yCenterUnit_property) // Stored property
    self.mInternalValue?.widthUnit_property.addEBObserver (self.widthUnit_property) // Stored property
    self.mInternalValue?.heightUnit_property.addEBObserver (self.heightUnit_property) // Stored property
    self.mInternalValue?.holeWidthUnit_property.addEBObserver (self.holeWidthUnit_property) // Stored property
    self.mInternalValue?.holeHeightUnit_property.addEBObserver (self.holeHeightUnit_property) // Stored property
    self.mInternalValue?.annularRingUnit_property.addEBObserver (self.annularRingUnit_property) // Stored property
    self.mInternalValue?.selectionDisplay_property.addEBObserver (self.selectionDisplay_property) // Transient property
    self.mInternalValue?.padNameForDisplay_property.addEBObserver (self.padNameForDisplay_property) // Transient property
    self.mInternalValue?.issues_property.addEBObserver (self.issues_property) // Transient property
    self.mInternalValue?.padIsTraversing_property.addEBObserver (self.padIsTraversing_property) // Transient property
    self.mInternalValue?.annularRing_property.addEBObserver (self.annularRing_property) // Transient property
    self.mInternalValue?.padNameWithZoneName_property.addEBObserver (self.padNameWithZoneName_property) // Transient property
    self.mInternalValue?.zoneName_property.addEBObserver (self.zoneName_property) // Transient property
    self.mInternalValue?.noZone_property.addEBObserver (self.noZone_property) // Transient property
    self.mInternalValue?.zoneAllowsManualRenumbering_property.addEBObserver (self.zoneAllowsManualRenumbering_property) // Transient property
    self.mInternalValue?.slavePadCount_property.addEBObserver (self.slavePadCount_property) // Transient property
    self.mInternalValue?.objectDisplay_property.addEBObserver (self.objectDisplay_property) // Transient property
    self.mInternalValue?.padNumberDisplay_property.addEBObserver (self.padNumberDisplay_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.xCenter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.xCenter_property.prop ?? .empty }
    self.xCenter_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.xCenter_property.setProp (inValue) }
    self.yCenter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.yCenter_property.prop ?? .empty }
    self.yCenter_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.yCenter_property.setProp (inValue) }
    self.width_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.width_property.prop ?? .empty }
    self.width_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.width_property.setProp (inValue) }
    self.height_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.height_property.prop ?? .empty }
    self.height_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.height_property.setProp (inValue) }
    self.holeWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.holeWidth_property.prop ?? .empty }
    self.holeWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.holeWidth_property.setProp (inValue) }
    self.holeHeight_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.holeHeight_property.prop ?? .empty }
    self.holeHeight_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.holeHeight_property.setProp (inValue) }
    self.padShape_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.padShape_property.prop ?? .empty }
    self.padShape_property.mWriteModelFunction = { [weak self] (inValue : PadShape) in self?.mInternalValue?.padShape_property.setProp (inValue) }
    self.padStyle_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.padStyle_property.prop ?? .empty }
    self.padStyle_property.mWriteModelFunction = { [weak self] (inValue : PadStyle) in self?.mInternalValue?.padStyle_property.setProp (inValue) }
    self.padNumber_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.padNumber_property.prop ?? .empty }
    self.padNumber_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.padNumber_property.setProp (inValue) }
    self.xCenterUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.xCenterUnit_property.prop ?? .empty }
    self.xCenterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.xCenterUnit_property.setProp (inValue) }
    self.yCenterUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.yCenterUnit_property.prop ?? .empty }
    self.yCenterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.yCenterUnit_property.setProp (inValue) }
    self.widthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.widthUnit_property.prop ?? .empty }
    self.widthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.widthUnit_property.setProp (inValue) }
    self.heightUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.heightUnit_property.prop ?? .empty }
    self.heightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.heightUnit_property.setProp (inValue) }
    self.holeWidthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.holeWidthUnit_property.prop ?? .empty }
    self.holeWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.holeWidthUnit_property.setProp (inValue) }
    self.holeHeightUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.holeHeightUnit_property.prop ?? .empty }
    self.holeHeightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.holeHeightUnit_property.setProp (inValue) }
    self.annularRingUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.annularRingUnit_property.prop ?? .empty }
    self.annularRingUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.annularRingUnit_property.setProp (inValue) }
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectionDisplay_property.prop ?? .empty }
    self.padNameForDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.padNameForDisplay_property.prop ?? .empty }
    self.issues_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.issues_property.prop ?? .empty }
    self.padIsTraversing_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.padIsTraversing_property.prop ?? .empty }
    self.annularRing_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.annularRing_property.prop ?? .empty }
    self.padNameWithZoneName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.padNameWithZoneName_property.prop ?? .empty }
    self.zoneName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.zoneName_property.prop ?? .empty }
    self.noZone_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.noZone_property.prop ?? .empty }
    self.zoneAllowsManualRenumbering_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.zoneAllowsManualRenumbering_property.prop ?? .empty }
    self.slavePadCount_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.slavePadCount_property.prop ?? .empty }
    self.objectDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.objectDisplay_property.prop ?? .empty }
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.padNumberDisplay_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'xCenter' stored property
  //····················································································································

  let xCenter_property = EBPropertyProxy_Int ()

  var xCenter_property_selection : EBSelection <Int> {
    switch (self.xCenter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'yCenter' stored property
  //····················································································································

  let yCenter_property = EBPropertyProxy_Int ()

  var yCenter_property_selection : EBSelection <Int> {
    switch (self.yCenter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'width' stored property
  //····················································································································

  let width_property = EBPropertyProxy_Int ()

  var width_property_selection : EBSelection <Int> {
    switch (self.width_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'height' stored property
  //····················································································································

  let height_property = EBPropertyProxy_Int ()

  var height_property_selection : EBSelection <Int> {
    switch (self.height_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'holeWidth' stored property
  //····················································································································

  let holeWidth_property = EBPropertyProxy_Int ()

  var holeWidth_property_selection : EBSelection <Int> {
    switch (self.holeWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'holeHeight' stored property
  //····················································································································

  let holeHeight_property = EBPropertyProxy_Int ()

  var holeHeight_property_selection : EBSelection <Int> {
    switch (self.holeHeight_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'padShape' stored property
  //····················································································································

  let padShape_property = EBPropertyProxy_PadShape ()

  var padShape_property_selection : EBSelection <PadShape> {
    switch (self.padShape_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'padStyle' stored property
  //····················································································································

  let padStyle_property = EBPropertyProxy_PadStyle ()

  var padStyle_property_selection : EBSelection <PadStyle> {
    switch (self.padStyle_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'padNumber' stored property
  //····················································································································

  let padNumber_property = EBPropertyProxy_Int ()

  var padNumber_property_selection : EBSelection <Int> {
    switch (self.padNumber_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'xCenterUnit' stored property
  //····················································································································

  let xCenterUnit_property = EBPropertyProxy_Int ()

  var xCenterUnit_property_selection : EBSelection <Int> {
    switch (self.xCenterUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'yCenterUnit' stored property
  //····················································································································

  let yCenterUnit_property = EBPropertyProxy_Int ()

  var yCenterUnit_property_selection : EBSelection <Int> {
    switch (self.yCenterUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'widthUnit' stored property
  //····················································································································

  let widthUnit_property = EBPropertyProxy_Int ()

  var widthUnit_property_selection : EBSelection <Int> {
    switch (self.widthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'heightUnit' stored property
  //····················································································································

  let heightUnit_property = EBPropertyProxy_Int ()

  var heightUnit_property_selection : EBSelection <Int> {
    switch (self.heightUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'holeWidthUnit' stored property
  //····················································································································

  let holeWidthUnit_property = EBPropertyProxy_Int ()

  var holeWidthUnit_property_selection : EBSelection <Int> {
    switch (self.holeWidthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'holeHeightUnit' stored property
  //····················································································································

  let holeHeightUnit_property = EBPropertyProxy_Int ()

  var holeHeightUnit_property_selection : EBSelection <Int> {
    switch (self.holeHeightUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'annularRingUnit' stored property
  //····················································································································

  let annularRingUnit_property = EBPropertyProxy_Int ()

  var annularRingUnit_property_selection : EBSelection <Int> {
    switch (self.annularRingUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'selectionDisplay' transient property
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    switch (self.selectionDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'padNameForDisplay' transient property
  //····················································································································

  let padNameForDisplay_property = EBTransientProperty_String ()

  var padNameForDisplay_property_selection : EBSelection <String> {
    switch (self.padNameForDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'issues' transient property
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    switch (self.issues_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'padIsTraversing' transient property
  //····················································································································

  let padIsTraversing_property = EBTransientProperty_Bool ()

  var padIsTraversing_property_selection : EBSelection <Bool> {
    switch (self.padIsTraversing_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'annularRing' transient property
  //····················································································································

  let annularRing_property = EBTransientProperty_Int ()

  var annularRing_property_selection : EBSelection <Int> {
    switch (self.annularRing_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'padNameWithZoneName' transient property
  //····················································································································

  let padNameWithZoneName_property = EBTransientProperty_String ()

  var padNameWithZoneName_property_selection : EBSelection <String> {
    switch (self.padNameWithZoneName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'zoneName' transient property
  //····················································································································

  let zoneName_property = EBTransientProperty_String ()

  var zoneName_property_selection : EBSelection <String> {
    switch (self.zoneName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'noZone' transient property
  //····················································································································

  let noZone_property = EBTransientProperty_Bool ()

  var noZone_property_selection : EBSelection <Bool> {
    switch (self.noZone_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'zoneAllowsManualRenumbering' transient property
  //····················································································································

  let zoneAllowsManualRenumbering_property = EBTransientProperty_Bool ()

  var zoneAllowsManualRenumbering_property_selection : EBSelection <Bool> {
    switch (self.zoneAllowsManualRenumbering_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'slavePadCount' transient property
  //····················································································································

  let slavePadCount_property = EBTransientProperty_Int ()

  var slavePadCount_property_selection : EBSelection <Int> {
    switch (self.slavePadCount_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'objectDisplay' transient property
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    switch (self.objectDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'padNumberDisplay' transient property
  //····················································································································

  let padNumberDisplay_property = EBTransientProperty_EBShape ()

  var padNumberDisplay_property_selection : EBSelection <EBShape> {
    switch (self.padNumberDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observable toMany property: slaves
  //····················································································································

  private var mObserversOf_slaves = EBWeakEventSet ()

  //····················································································································

  var slaves_property_selection : EBSelection <[PackageSlavePad]> {
    if let model = self.propval {
      switch (model.slaves_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_slaves (_ inObserver : EBEvent) {
    self.mObserversOf_slaves.insert (inObserver)
    if let object = self.propval {
      object.slaves_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_slaves (_ inObserver : EBEvent) {
    self.mObserversOf_slaves.remove (inObserver)
    if let object = self.propval {
      object.slaves_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject PackagePad
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_PackagePad : ReadOnlyObject_PackagePad {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackagePad? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackagePad?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackagePad? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackagePad? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackagePad? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PackagePad
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PackagePad : ReadOnlyObject_PackagePad {

  //····················································································································
 
  func setProp (_ inValue : PackagePad?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PackagePad
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PackagePad : ReadWriteObject_PackagePad {

  //····················································································································

  private var mModel : ReadWriteObject_PackagePad? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackagePad?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackagePad?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackagePad?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < PackagePad? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackagePad? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PackagePad 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PackagePad : ReadWriteObject_PackagePad, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackagePad) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackagePad) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackagePad) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackagePad) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackagePad?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackagePad? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackagePad?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackagePad? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

