//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_selectedPageIndex : class {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_selectedInspector : class {
  var selectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_comments : class {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_program : class {
  var program : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_horizontalFlip : class {
  var horizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_verticalFlip : class {
  var verticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridStyle : class {
  var gridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridStep : class {
  var gridStep : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridStepUnit : class {
  var gridStepUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridDisplayFactor : class {
  var gridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_zoom : class {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageHorizontalFlip : class {
  var mModelImagePageHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageVerticalFlip : class {
  var mModelImagePageVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageGridStyle : class {
  var mModelImagePageGridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageGridStep : class {
  var mModelImagePageGridStep : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageGridStepUnit : class {
  var mModelImagePageGridStepUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageGridDisplayFactor : class {
  var mModelImagePageGridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageZoom : class {
  var mModelImagePageZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageXPlacardUnit : class {
  var mModelImagePageXPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImagePageYPlacardUnit : class {
  var mModelImagePageYPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_knobSizeMultpliedByTen : class {
  var knobSizeMultpliedByTen : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_padNumbering : class {
  var padNumbering : PadNumbering { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_counterClockNumberingStartAngle : class {
  var counterClockNumberingStartAngle : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_xPlacardUnit : class {
  var xPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_yPlacardUnit : class {
  var yPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageData : class {
  var mModelImageData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageFirstPointX : class {
  var mModelImageFirstPointX : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageFirstPointDimensionUnitX : class {
  var mModelImageFirstPointDimensionUnitX : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageFirstPointY : class {
  var mModelImageFirstPointY : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageFirstPointDimensionUnitY : class {
  var mModelImageFirstPointDimensionUnitY : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageFirstPointLocked : class {
  var mModelImageFirstPointLocked : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageSecondPointX : class {
  var mModelImageSecondPointX : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageSecondPointDimensionUnitX : class {
  var mModelImageSecondPointDimensionUnitX : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageSecondPointY : class {
  var mModelImageSecondPointY : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageSecondPointDimensionUnitY : class {
  var mModelImageSecondPointDimensionUnitY : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_mModelImageSecondPointLocked : class {
  var mModelImageSecondPointLocked : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_freePadNumbering : class {
  var freePadNumbering : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_counterClockNumbering : class {
  var counterClockNumbering : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridStepMultipliedByDisplayFactor : class {
  var gridStepMultipliedByDisplayFactor : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_padNumberDisplay : class {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_backgroundImagePageBackgroundDisplay : class {
  var backgroundImagePageBackgroundDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_noIssue : class {
  var noIssue : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageRoot : EBGraphicManagedObject,
         PackageRoot_selectedPageIndex,
         PackageRoot_selectedInspector,
         PackageRoot_comments,
         PackageRoot_program,
         PackageRoot_horizontalFlip,
         PackageRoot_verticalFlip,
         PackageRoot_gridStyle,
         PackageRoot_gridStep,
         PackageRoot_gridStepUnit,
         PackageRoot_gridDisplayFactor,
         PackageRoot_zoom,
         PackageRoot_mModelImagePageHorizontalFlip,
         PackageRoot_mModelImagePageVerticalFlip,
         PackageRoot_mModelImagePageGridStyle,
         PackageRoot_mModelImagePageGridStep,
         PackageRoot_mModelImagePageGridStepUnit,
         PackageRoot_mModelImagePageGridDisplayFactor,
         PackageRoot_mModelImagePageZoom,
         PackageRoot_mModelImagePageXPlacardUnit,
         PackageRoot_mModelImagePageYPlacardUnit,
         PackageRoot_knobSizeMultpliedByTen,
         PackageRoot_padNumbering,
         PackageRoot_counterClockNumberingStartAngle,
         PackageRoot_xPlacardUnit,
         PackageRoot_yPlacardUnit,
         PackageRoot_mModelImageData,
         PackageRoot_mModelImageFirstPointX,
         PackageRoot_mModelImageFirstPointDimensionUnitX,
         PackageRoot_mModelImageFirstPointY,
         PackageRoot_mModelImageFirstPointDimensionUnitY,
         PackageRoot_mModelImageFirstPointLocked,
         PackageRoot_mModelImageSecondPointX,
         PackageRoot_mModelImageSecondPointDimensionUnitX,
         PackageRoot_mModelImageSecondPointY,
         PackageRoot_mModelImageSecondPointDimensionUnitY,
         PackageRoot_mModelImageSecondPointLocked,
         PackageRoot_freePadNumbering,
         PackageRoot_counterClockNumbering,
         PackageRoot_gridStepMultipliedByDisplayFactor,
         PackageRoot_padNumberDisplay,
         PackageRoot_backgroundImagePageBackgroundDisplay,
         PackageRoot_issues,
         PackageRoot_noIssue {

  //····················································································································
  //   Atomic property: selectedPageIndex
  //····················································································································

  let selectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var selectedPageIndex : Int {
    get { return self.selectedPageIndex_property.propval }
    set { self.selectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int> { return self.selectedPageIndex_property.prop }

  //····················································································································
  //   Atomic property: selectedInspector
  //····················································································································

  let selectedInspector_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var selectedInspector : Int {
    get { return self.selectedInspector_property.propval }
    set { self.selectedInspector_property.setProp (newValue) }
  }

  //····················································································································

  var selectedInspector_property_selection : EBSelection <Int> { return self.selectedInspector_property.prop }

  //····················································································································
  //   Atomic property: comments
  //····················································································································

  let comments_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var comments : String {
    get { return self.comments_property.propval }
    set { self.comments_property.setProp (newValue) }
  }

  //····················································································································

  var comments_property_selection : EBSelection <String> { return self.comments_property.prop }

  //····················································································································
  //   Atomic property: program
  //····················································································································

  let program_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var program : String {
    get { return self.program_property.propval }
    set { self.program_property.setProp (newValue) }
  }

  //····················································································································

  var program_property_selection : EBSelection <String> { return self.program_property.prop }

  //····················································································································
  //   Atomic property: horizontalFlip
  //····················································································································

  let horizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var horizontalFlip : Bool {
    get { return self.horizontalFlip_property.propval }
    set { self.horizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var horizontalFlip_property_selection : EBSelection <Bool> { return self.horizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: verticalFlip
  //····················································································································

  let verticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var verticalFlip : Bool {
    get { return self.verticalFlip_property.propval }
    set { self.verticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var verticalFlip_property_selection : EBSelection <Bool> { return self.verticalFlip_property.prop }

  //····················································································································
  //   Atomic property: gridStyle
  //····················································································································

  let gridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line)

  //····················································································································

  var gridStyle : GridStyle {
    get { return self.gridStyle_property.propval }
    set { self.gridStyle_property.setProp (newValue) }
  }

  //····················································································································

  var gridStyle_property_selection : EBSelection <GridStyle> { return self.gridStyle_property.prop }

  //····················································································································
  //   Atomic property: gridStep
  //····················································································································

  let gridStep_property = EBStoredProperty_Int (defaultValue: 57150)

  //····················································································································

  var gridStep : Int {
    get { return self.gridStep_property.propval }
    set { self.gridStep_property.setProp (newValue) }
  }

  //····················································································································

  var gridStep_property_selection : EBSelection <Int> { return self.gridStep_property.prop }

  //····················································································································
  //   Atomic property: gridStepUnit
  //····················································································································

  let gridStepUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var gridStepUnit : Int {
    get { return self.gridStepUnit_property.propval }
    set { self.gridStepUnit_property.setProp (newValue) }
  }

  //····················································································································

  var gridStepUnit_property_selection : EBSelection <Int> { return self.gridStepUnit_property.prop }

  //····················································································································
  //   Atomic property: gridDisplayFactor
  //····················································································································

  let gridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4)

  //····················································································································

  var gridDisplayFactor : Int {
    get { return self.gridDisplayFactor_property.propval }
    set { self.gridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································

  var gridDisplayFactor_property_selection : EBSelection <Int> { return self.gridDisplayFactor_property.prop }

  //····················································································································
  //   Atomic property: zoom
  //····················································································································

  let zoom_property = EBStoredProperty_Int (defaultValue: 600)

  //····················································································································

  var zoom : Int {
    get { return self.zoom_property.propval }
    set { self.zoom_property.setProp (newValue) }
  }

  //····················································································································

  var zoom_property_selection : EBSelection <Int> { return self.zoom_property.prop }

  //····················································································································
  //   Atomic property: mModelImagePageHorizontalFlip
  //····················································································································

  let mModelImagePageHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mModelImagePageHorizontalFlip : Bool {
    get { return self.mModelImagePageHorizontalFlip_property.propval }
    set { self.mModelImagePageHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mModelImagePageHorizontalFlip_property_selection : EBSelection <Bool> { return self.mModelImagePageHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mModelImagePageVerticalFlip
  //····················································································································

  let mModelImagePageVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mModelImagePageVerticalFlip : Bool {
    get { return self.mModelImagePageVerticalFlip_property.propval }
    set { self.mModelImagePageVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mModelImagePageVerticalFlip_property_selection : EBSelection <Bool> { return self.mModelImagePageVerticalFlip_property.prop }

  //····················································································································
  //   Atomic property: mModelImagePageGridStyle
  //····················································································································

  let mModelImagePageGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line)

  //····················································································································

  var mModelImagePageGridStyle : GridStyle {
    get { return self.mModelImagePageGridStyle_property.propval }
    set { self.mModelImagePageGridStyle_property.setProp (newValue) }
  }

  //····················································································································

  var mModelImagePageGridStyle_property_selection : EBSelection <GridStyle> { return self.mModelImagePageGridStyle_property.prop }

  //····················································································································
  //   Atomic property: mModelImagePageGridStep
  //····················································································································

  let mModelImagePageGridStep_property = EBStoredProperty_Int (defaultValue: 57150)

  //····················································································································

  var mModelImagePageGridStep : Int {
    get { return self.mModelImagePageGridStep_property.propval }
    set { self.mModelImagePageGridStep_property.setProp (newValue) }
  }

  //····················································································································

  var mModelImagePageGridStep_property_selection : EBSelection <Int> { return self.mModelImagePageGridStep_property.prop }

  //····················································································································
  //   Atomic property: mModelImagePageGridStepUnit
  //····················································································································

  let mModelImagePageGridStepUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mModelImagePageGridStepUnit : Int {
    get { return self.mModelImagePageGridStepUnit_property.propval }
    set { self.mModelImagePageGridStepUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mModelImagePageGridStepUnit_property_selection : EBSelection <Int> { return self.mModelImagePageGridStepUnit_property.prop }

  //····················································································································
  //   Atomic property: mModelImagePageGridDisplayFactor
  //····················································································································

  let mModelImagePageGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4)

  //····················································································································

  var mModelImagePageGridDisplayFactor : Int {
    get { return self.mModelImagePageGridDisplayFactor_property.propval }
    set { self.mModelImagePageGridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································

  var mModelImagePageGridDisplayFactor_property_selection : EBSelection <Int> { return self.mModelImagePageGridDisplayFactor_property.prop }

  //····················································································································
  //   Atomic property: mModelImagePageZoom
  //····················································································································

  let mModelImagePageZoom_property = EBStoredProperty_Int (defaultValue: 600)

  //····················································································································

  var mModelImagePageZoom : Int {
    get { return self.mModelImagePageZoom_property.propval }
    set { self.mModelImagePageZoom_property.setProp (newValue) }
  }

  //····················································································································

  var mModelImagePageZoom_property_selection : EBSelection <Int> { return self.mModelImagePageZoom_property.prop }

  //····················································································································
  //   Atomic property: mModelImagePageXPlacardUnit
  //····················································································································

  let mModelImagePageXPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mModelImagePageXPlacardUnit : Int {
    get { return self.mModelImagePageXPlacardUnit_property.propval }
    set { self.mModelImagePageXPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mModelImagePageXPlacardUnit_property_selection : EBSelection <Int> { return self.mModelImagePageXPlacardUnit_property.prop }

  //····················································································································
  //   Atomic property: mModelImagePageYPlacardUnit
  //····················································································································

  let mModelImagePageYPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mModelImagePageYPlacardUnit : Int {
    get { return self.mModelImagePageYPlacardUnit_property.propval }
    set { self.mModelImagePageYPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mModelImagePageYPlacardUnit_property_selection : EBSelection <Int> { return self.mModelImagePageYPlacardUnit_property.prop }

  //····················································································································
  //   Atomic property: knobSizeMultpliedByTen
  //····················································································································

  let knobSizeMultpliedByTen_property = EBStoredProperty_Int (defaultValue: 20)

  //····················································································································

  var knobSizeMultpliedByTen : Int {
    get { return self.knobSizeMultpliedByTen_property.propval }
    set { self.knobSizeMultpliedByTen_property.setProp (newValue) }
  }

  //····················································································································

  var knobSizeMultpliedByTen_property_selection : EBSelection <Int> { return self.knobSizeMultpliedByTen_property.prop }

  //····················································································································
  //   Atomic property: padNumbering
  //····················································································································

  let padNumbering_property = EBStoredProperty_PadNumbering (defaultValue: PadNumbering.noNumbering)

  //····················································································································

  var padNumbering : PadNumbering {
    get { return self.padNumbering_property.propval }
    set { self.padNumbering_property.setProp (newValue) }
  }

  //····················································································································

  var padNumbering_property_selection : EBSelection <PadNumbering> { return self.padNumbering_property.prop }

  //····················································································································
  //   Atomic property: counterClockNumberingStartAngle
  //····················································································································

  let counterClockNumberingStartAngle_property = EBStoredProperty_Int (defaultValue: 180)

  //····················································································································

  var counterClockNumberingStartAngle : Int {
    get { return self.counterClockNumberingStartAngle_property.propval }
    set { self.counterClockNumberingStartAngle_property.setProp (newValue) }
  }

  //····················································································································

  var counterClockNumberingStartAngle_property_selection : EBSelection <Int> { return self.counterClockNumberingStartAngle_property.prop }

  //····················································································································
  //   Atomic property: xPlacardUnit
  //····················································································································

  let xPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var xPlacardUnit : Int {
    get { return self.xPlacardUnit_property.propval }
    set { self.xPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································

  var xPlacardUnit_property_selection : EBSelection <Int> { return self.xPlacardUnit_property.prop }

  //····················································································································
  //   Atomic property: yPlacardUnit
  //····················································································································

  let yPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var yPlacardUnit : Int {
    get { return self.yPlacardUnit_property.propval }
    set { self.yPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································

  var yPlacardUnit_property_selection : EBSelection <Int> { return self.yPlacardUnit_property.prop }

  //····················································································································
  //   To many property: packageObjects
  //····················································································································

  let packageObjects_property = StoredArrayOf_PackageObject (usedForSignature: true)

  //····················································································································

  var packageObjects_property_selection : EBSelection < [PackageObject] > {
    return self.packageObjects_property.prop
  }

  //····················································································································

  var packageObjects : [PackageObject] {
    get { return self.packageObjects_property.propval }
    set { self.packageObjects_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mModelImageObjects
  //····················································································································

  let mModelImageObjects_property = StoredArrayOf_PackageModelImagePoint (usedForSignature: false)

  //····················································································································

  var mModelImageObjects_property_selection : EBSelection < [PackageModelImagePoint] > {
    return self.mModelImageObjects_property.prop
  }

  //····················································································································

  var mModelImageObjects : [PackageModelImagePoint] {
    get { return self.mModelImageObjects_property.propval }
    set { self.mModelImageObjects_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: packagePads
  //····················································································································

  let packagePads_property = TransientArrayOfSuperOf_PackagePad <PackageObject> ()

  //····················································································································

  var packagePads_property_selection : EBSelection < [PackagePad] > {
    return self.packagePads_property.prop
  }

  //····················································································································

  var packagePads : [PackagePad] {
    get { return self.packagePads_property.propval }
  }

  //····················································································································
  //   To many property: packageSlavePads
  //····················································································································

  let packageSlavePads_property = TransientArrayOfSuperOf_PackageSlavePad <PackageObject> ()

  //····················································································································

  var packageSlavePads_property_selection : EBSelection < [PackageSlavePad] > {
    return self.packageSlavePads_property.prop
  }

  //····················································································································

  var packageSlavePads : [PackageSlavePad] {
    get { return self.packageSlavePads_property.propval }
  }

  //····················································································································
  //   To many property: packageZones
  //····················································································································

  let packageZones_property = TransientArrayOfSuperOf_PackageZone <PackageObject> ()

  //····················································································································

  var packageZones_property_selection : EBSelection < [PackageZone] > {
    return self.packageZones_property.prop
  }

  //····················································································································

  var packageZones : [PackageZone] {
    get { return self.packageZones_property.propval }
  }

  //····················································································································
  //   Atomic property: mModelImageData
  //····················································································································

  let mModelImageData_property = EBStoredProperty_Data (defaultValue: Data ())

  //····················································································································

  var mModelImageData : Data {
    get { return self.mModelImageData_property.propval }
    set { self.mModelImageData_property.setProp (newValue) }
  }

  //····················································································································

  var mModelImageData_property_selection : EBSelection <Data> { return self.mModelImageData_property.prop }

  //····················································································································
  //   Atomic proxy property: mModelImageFirstPointX
  //····················································································································

  let mModelImageFirstPointX_property = EBPropertyProxy_Int ()

  //····················································································································

  var mModelImageFirstPointX : Int? {
    get {
      switch self.mModelImageFirstPointX_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageFirstPointX_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var mModelImageFirstPointX_property_selection : EBSelection <Int> { return self.mModelImageFirstPointX_property.prop }

  //····················································································································
  //   Atomic proxy property: mModelImageFirstPointDimensionUnitX
  //····················································································································

  let mModelImageFirstPointDimensionUnitX_property = EBPropertyProxy_Int ()

  //····················································································································

  var mModelImageFirstPointDimensionUnitX : Int? {
    get {
      switch self.mModelImageFirstPointDimensionUnitX_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageFirstPointDimensionUnitX_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var mModelImageFirstPointDimensionUnitX_property_selection : EBSelection <Int> { return self.mModelImageFirstPointDimensionUnitX_property.prop }

  //····················································································································
  //   Atomic proxy property: mModelImageFirstPointY
  //····················································································································

  let mModelImageFirstPointY_property = EBPropertyProxy_Int ()

  //····················································································································

  var mModelImageFirstPointY : Int? {
    get {
      switch self.mModelImageFirstPointY_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageFirstPointY_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var mModelImageFirstPointY_property_selection : EBSelection <Int> { return self.mModelImageFirstPointY_property.prop }

  //····················································································································
  //   Atomic proxy property: mModelImageFirstPointDimensionUnitY
  //····················································································································

  let mModelImageFirstPointDimensionUnitY_property = EBPropertyProxy_Int ()

  //····················································································································

  var mModelImageFirstPointDimensionUnitY : Int? {
    get {
      switch self.mModelImageFirstPointDimensionUnitY_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageFirstPointDimensionUnitY_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var mModelImageFirstPointDimensionUnitY_property_selection : EBSelection <Int> { return self.mModelImageFirstPointDimensionUnitY_property.prop }

  //····················································································································
  //   Atomic proxy property: mModelImageFirstPointLocked
  //····················································································································

  let mModelImageFirstPointLocked_property = EBPropertyProxy_Bool ()

  //····················································································································

  var mModelImageFirstPointLocked : Bool? {
    get {
      switch self.mModelImageFirstPointLocked_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageFirstPointLocked_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var mModelImageFirstPointLocked_property_selection : EBSelection <Bool> { return self.mModelImageFirstPointLocked_property.prop }

  //····················································································································
  //   Atomic proxy property: mModelImageSecondPointX
  //····················································································································

  let mModelImageSecondPointX_property = EBPropertyProxy_Int ()

  //····················································································································

  var mModelImageSecondPointX : Int? {
    get {
      switch self.mModelImageSecondPointX_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageSecondPointX_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var mModelImageSecondPointX_property_selection : EBSelection <Int> { return self.mModelImageSecondPointX_property.prop }

  //····················································································································
  //   Atomic proxy property: mModelImageSecondPointDimensionUnitX
  //····················································································································

  let mModelImageSecondPointDimensionUnitX_property = EBPropertyProxy_Int ()

  //····················································································································

  var mModelImageSecondPointDimensionUnitX : Int? {
    get {
      switch self.mModelImageSecondPointDimensionUnitX_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageSecondPointDimensionUnitX_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var mModelImageSecondPointDimensionUnitX_property_selection : EBSelection <Int> { return self.mModelImageSecondPointDimensionUnitX_property.prop }

  //····················································································································
  //   Atomic proxy property: mModelImageSecondPointY
  //····················································································································

  let mModelImageSecondPointY_property = EBPropertyProxy_Int ()

  //····················································································································

  var mModelImageSecondPointY : Int? {
    get {
      switch self.mModelImageSecondPointY_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageSecondPointY_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var mModelImageSecondPointY_property_selection : EBSelection <Int> { return self.mModelImageSecondPointY_property.prop }

  //····················································································································
  //   Atomic proxy property: mModelImageSecondPointDimensionUnitY
  //····················································································································

  let mModelImageSecondPointDimensionUnitY_property = EBPropertyProxy_Int ()

  //····················································································································

  var mModelImageSecondPointDimensionUnitY : Int? {
    get {
      switch self.mModelImageSecondPointDimensionUnitY_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageSecondPointDimensionUnitY_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var mModelImageSecondPointDimensionUnitY_property_selection : EBSelection <Int> { return self.mModelImageSecondPointDimensionUnitY_property.prop }

  //····················································································································
  //   Atomic proxy property: mModelImageSecondPointLocked
  //····················································································································

  let mModelImageSecondPointLocked_property = EBPropertyProxy_Bool ()

  //····················································································································

  var mModelImageSecondPointLocked : Bool? {
    get {
      switch self.mModelImageSecondPointLocked_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.mModelImageSecondPointLocked_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var mModelImageSecondPointLocked_property_selection : EBSelection <Bool> { return self.mModelImageSecondPointLocked_property.prop }

  //····················································································································
  //   To one property: mModelImageSecondPoint
  //····················································································································

   let mModelImageSecondPoint_property = StoredObject_PackageModelImagePoint (usedForSignature: false)

  //····················································································································

  var mModelImageSecondPoint_property_selection : EBSelection <PackageModelImagePoint?> {
    return .single (self.mModelImageSecondPoint_property.propval)
  }

  //····················································································································

  var mModelImageSecondPoint : PackageModelImagePoint? {
    get {
      return self.mModelImageSecondPoint_property.propval
    }
    set {
      if self.mModelImageSecondPoint_property.propval != nil {
        self.mModelImageSecondPoint_property.setProp (nil)
      }
      if newValue != nil {
        self.mModelImageSecondPoint_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mModelImageSecondPoint_none : StoredObject_PackageModelImagePoint { return self.mModelImageSecondPoint_property }

  //····················································································································

  var mModelImageSecondPoint_none_selection : EBSelection <Bool> {
    return .single (self.mModelImageSecondPoint_property.propval == nil)
  }

  //····················································································································
  //   Transient property: freePadNumbering
  //····················································································································

  let freePadNumbering_property = EBTransientProperty_Bool ()

  //····················································································································

  var freePadNumbering_property_selection : EBSelection <Bool> {
    return self.freePadNumbering_property.prop
  }

  //····················································································································

  var freePadNumbering : Bool? {
    switch self.freePadNumbering_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: counterClockNumbering
  //····················································································································

  let counterClockNumbering_property = EBTransientProperty_Bool ()

  //····················································································································

  var counterClockNumbering_property_selection : EBSelection <Bool> {
    return self.counterClockNumbering_property.prop
  }

  //····················································································································

  var counterClockNumbering : Bool? {
    switch self.counterClockNumbering_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: gridStepMultipliedByDisplayFactor
  //····················································································································

  let gridStepMultipliedByDisplayFactor_property = EBTransientProperty_Int ()

  //····················································································································

  var gridStepMultipliedByDisplayFactor_property_selection : EBSelection <Int> {
    return self.gridStepMultipliedByDisplayFactor_property.prop
  }

  //····················································································································

  var gridStepMultipliedByDisplayFactor : Int? {
    switch self.gridStepMultipliedByDisplayFactor_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mModelImageFirstPoint
  //····················································································································

   let mModelImageFirstPoint_property = StoredObject_PackageModelImagePoint (usedForSignature: false)

  //····················································································································

  var mModelImageFirstPoint_property_selection : EBSelection <PackageModelImagePoint?> {
    return .single (self.mModelImageFirstPoint_property.propval)
  }

  //····················································································································

  var mModelImageFirstPoint : PackageModelImagePoint? {
    get {
      return self.mModelImageFirstPoint_property.propval
    }
    set {
      if self.mModelImageFirstPoint_property.propval != nil {
        self.mModelImageFirstPoint_property.setProp (nil)
      }
      if newValue != nil {
        self.mModelImageFirstPoint_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mModelImageFirstPoint_none : StoredObject_PackageModelImagePoint { return self.mModelImageFirstPoint_property }

  //····················································································································

  var mModelImageFirstPoint_none_selection : EBSelection <Bool> {
    return .single (self.mModelImageFirstPoint_property.propval == nil)
  }

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  let padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var padNumberDisplay_property_selection : EBSelection <EBShape> {
    return self.padNumberDisplay_property.prop
  }

  //····················································································································

  var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backgroundImagePageBackgroundDisplay
  //····················································································································

  let backgroundImagePageBackgroundDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var backgroundImagePageBackgroundDisplay_property_selection : EBSelection <EBShape> {
    return self.backgroundImagePageBackgroundDisplay_property.prop
  }

  //····················································································································

  var backgroundImagePageBackgroundDisplay : EBShape? {
    switch self.backgroundImagePageBackgroundDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray> {
    return self.issues_property.prop
  }

  //····················································································································

  var issues : CanariIssueArray? {
    switch self.issues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: noIssue
  //····················································································································

  let noIssue_property = EBTransientProperty_Bool ()

  //····················································································································

  var noIssue_property_selection : EBSelection <Bool> {
    return self.noIssue_property.prop
  }

  //····················································································································

  var noIssue : Bool? {
    switch self.noIssue_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: comments
    self.comments_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: program
    self.program_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: gridStyle
    self.gridStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: gridStep
    self.gridStep_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: gridStepUnit
    self.gridStepUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: gridDisplayFactor
    self.gridDisplayFactor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: zoom
    self.zoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mModelImagePageHorizontalFlip
    self.mModelImagePageHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mModelImagePageVerticalFlip
    self.mModelImagePageVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mModelImagePageGridStyle
    self.mModelImagePageGridStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mModelImagePageGridStep
    self.mModelImagePageGridStep_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mModelImagePageGridStepUnit
    self.mModelImagePageGridStepUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mModelImagePageGridDisplayFactor
    self.mModelImagePageGridDisplayFactor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mModelImagePageZoom
    self.mModelImagePageZoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mModelImagePageXPlacardUnit
    self.mModelImagePageXPlacardUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mModelImagePageYPlacardUnit
    self.mModelImagePageYPlacardUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: knobSizeMultpliedByTen
    self.knobSizeMultpliedByTen_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padNumbering
    self.padNumbering_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: counterClockNumberingStartAngle
    self.counterClockNumberingStartAngle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.ebUndoManager = self.ebUndoManager
  //--- To many property: packageObjects (has opposite relationship)
    self.packageObjects_property.ebUndoManager = self.ebUndoManager
    self.packageObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: mModelImageObjects (no option)
    self.mModelImageObjects_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mModelImageData
    self.mModelImageData_property.ebUndoManager = self.ebUndoManager
  //--- Atomic proxy property: mModelImageFirstPointX
    self.mModelImageFirstPointX_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageFirstPoint {
        return .single (object.mX)
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointX_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageFirstPoint?.mX = inValue
    }
    self.mModelImageFirstPointX_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageFirstPoint?.mX_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageFirstPoint_property.addEBObserverOf_mX (self.mModelImageFirstPointX_property)
  //--- Atomic proxy property: mModelImageFirstPointDimensionUnitX
    self.mModelImageFirstPointDimensionUnitX_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageFirstPoint {
        return .single (object.mDimensionUnitX)
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointDimensionUnitX_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageFirstPoint?.mDimensionUnitX = inValue
    }
    self.mModelImageFirstPointDimensionUnitX_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageFirstPoint?.mDimensionUnitX_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageFirstPoint_property.addEBObserverOf_mDimensionUnitX (self.mModelImageFirstPointDimensionUnitX_property)
  //--- Atomic proxy property: mModelImageFirstPointY
    self.mModelImageFirstPointY_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageFirstPoint {
        return .single (object.mY)
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointY_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageFirstPoint?.mY = inValue
    }
    self.mModelImageFirstPointY_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageFirstPoint?.mY_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageFirstPoint_property.addEBObserverOf_mY (self.mModelImageFirstPointY_property)
  //--- Atomic proxy property: mModelImageFirstPointDimensionUnitY
    self.mModelImageFirstPointDimensionUnitY_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageFirstPoint {
        return .single (object.mDimensionUnitY)
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointDimensionUnitY_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageFirstPoint?.mDimensionUnitY = inValue
    }
    self.mModelImageFirstPointDimensionUnitY_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageFirstPoint?.mDimensionUnitY_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageFirstPoint_property.addEBObserverOf_mDimensionUnitY (self.mModelImageFirstPointDimensionUnitY_property)
  //--- Atomic proxy property: mModelImageFirstPointLocked
    self.mModelImageFirstPointLocked_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageFirstPoint {
        return .single (object.mIsLocked)
      }else{
        return .empty
      }
    }
    self.mModelImageFirstPointLocked_property.mWriteModelFunction = { [weak self] (_ inValue : Bool) in
      self?.mModelImageFirstPoint?.mIsLocked = inValue
    }
    self.mModelImageFirstPointLocked_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Bool, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageFirstPoint?.mIsLocked_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageFirstPoint_property.addEBObserverOf_mIsLocked (self.mModelImageFirstPointLocked_property)
  //--- Atomic proxy property: mModelImageSecondPointX
    self.mModelImageSecondPointX_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageSecondPoint {
        return .single (object.mX)
      }else{
        return .empty
      }
    }
    self.mModelImageSecondPointX_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageSecondPoint?.mX = inValue
    }
    self.mModelImageSecondPointX_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageSecondPoint?.mX_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageSecondPoint_property.addEBObserverOf_mX (self.mModelImageSecondPointX_property)
  //--- Atomic proxy property: mModelImageSecondPointDimensionUnitX
    self.mModelImageSecondPointDimensionUnitX_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageSecondPoint {
        return .single (object.mDimensionUnitX)
      }else{
        return .empty
      }
    }
    self.mModelImageSecondPointDimensionUnitX_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageSecondPoint?.mDimensionUnitX = inValue
    }
    self.mModelImageSecondPointDimensionUnitX_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageSecondPoint?.mDimensionUnitX_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageSecondPoint_property.addEBObserverOf_mDimensionUnitX (self.mModelImageSecondPointDimensionUnitX_property)
  //--- Atomic proxy property: mModelImageSecondPointY
    self.mModelImageSecondPointY_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageSecondPoint {
        return .single (object.mY)
      }else{
        return .empty
      }
    }
    self.mModelImageSecondPointY_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageSecondPoint?.mY = inValue
    }
    self.mModelImageSecondPointY_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageSecondPoint?.mY_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageSecondPoint_property.addEBObserverOf_mY (self.mModelImageSecondPointY_property)
  //--- Atomic proxy property: mModelImageSecondPointDimensionUnitY
    self.mModelImageSecondPointDimensionUnitY_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageSecondPoint {
        return .single (object.mDimensionUnitY)
      }else{
        return .empty
      }
    }
    self.mModelImageSecondPointDimensionUnitY_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mModelImageSecondPoint?.mDimensionUnitY = inValue
    }
    self.mModelImageSecondPointDimensionUnitY_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageSecondPoint?.mDimensionUnitY_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageSecondPoint_property.addEBObserverOf_mDimensionUnitY (self.mModelImageSecondPointDimensionUnitY_property)
  //--- Atomic proxy property: mModelImageSecondPointLocked
    self.mModelImageSecondPointLocked_property.mReadModelFunction = { [weak self] in
      if let object = self?.mModelImageSecondPoint {
        return .single (object.mIsLocked)
      }else{
        return .empty
      }
    }
    self.mModelImageSecondPointLocked_property.mWriteModelFunction = { [weak self] (_ inValue : Bool) in
      self?.mModelImageSecondPoint?.mIsLocked = inValue
    }
    self.mModelImageSecondPointLocked_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Bool, _ inWindow : NSWindow?) -> Bool in
      return self?.mModelImageSecondPoint?.mIsLocked_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mModelImageSecondPoint_property.addEBObserverOf_mIsLocked (self.mModelImageSecondPointLocked_property)
  //--- To one property: mModelImageSecondPoint
    self.mModelImageSecondPoint_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: freePadNumbering
    self.freePadNumbering_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.padNumbering_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.padNumbering_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageRoot_freePadNumbering (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padNumbering_property.addEBObserver (self.freePadNumbering_property)
  //--- Atomic property: counterClockNumbering
    self.counterClockNumbering_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.padNumbering_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.padNumbering_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageRoot_counterClockNumbering (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padNumbering_property.addEBObserver (self.counterClockNumbering_property)
  //--- Atomic property: gridStepMultipliedByDisplayFactor
    self.gridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.gridStep_property_selection.kind ()
        kind &= unwSelf.gridDisplayFactor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.gridStep_property_selection, unwSelf.gridDisplayFactor_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PackageRoot_gridStepMultipliedByDisplayFactor (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.gridStep_property.addEBObserver (self.gridStepMultipliedByDisplayFactor_property)
    self.gridDisplayFactor_property.addEBObserver (self.gridStepMultipliedByDisplayFactor_property)
  //--- To one property: mModelImageFirstPoint
    self.mModelImageFirstPoint_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.showPadNumber_property_selection.kind ()
        kind &= unwSelf.packagePads_property_selection.kind ()
        kind &= unwSelf.packageSlavePads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (g_Preferences!.showPadNumber_property_selection, unwSelf.packagePads_property_selection, unwSelf.packageSlavePads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_PackageRoot_padNumberDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    g_Preferences?.showPadNumber_property.addEBObserver (self.padNumberDisplay_property)
    self.packagePads_property.addEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
    self.packageSlavePads_property.addEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
  //--- Atomic property: backgroundImagePageBackgroundDisplay
    self.backgroundImagePageBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.packageObjects_property_selection.kind ()
        kind &= unwSelf.mModelImageData_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.packageObjects_property_selection, unwSelf.mModelImageData_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PackageRoot_backgroundImagePageBackgroundDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.packageObjects_property.addEBObserverOf_objectDisplay (self.backgroundImagePageBackgroundDisplay_property)
    self.mModelImageData_property.addEBObserver (self.backgroundImagePageBackgroundDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.packageObjects_property_selection.kind ()
        kind &= unwSelf.packageZones_property_selection.kind ()
        kind &= unwSelf.packageZones_property_selection.kind ()
        kind &= unwSelf.packageZones_property_selection.kind ()
        kind &= unwSelf.packageZones_property_selection.kind ()
        kind &= g_Preferences!.padZoneFont_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.packageObjects_property_selection, unwSelf.packageZones_property_selection, unwSelf.packageZones_property_selection, unwSelf.packageZones_property_selection, unwSelf.packageZones_property_selection, g_Preferences!.padZoneFont_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_PackageRoot_issues (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.packageObjects_property.addEBObserverOf_issues (self.issues_property)
    self.packageZones_property.addEBObserverOf_rect (self.issues_property)
    self.packageZones_property.addEBObserverOf_zoneName (self.issues_property)
    self.packageZones_property.addEBObserverOf_xName (self.issues_property)
    self.packageZones_property.addEBObserverOf_yName (self.issues_property)
    g_Preferences?.padZoneFont_property.addEBObserver (self.issues_property)
  //--- Atomic property: noIssue
    self.noIssue_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageRoot_noIssue (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.noIssue_property)
  //--- Install undoers and opposite setter for relationships
    self.packageObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
    self.packagePads_property.setDataProvider (self.packageObjects_property)
    self.packageSlavePads_property.setDataProvider (self.packageObjects_property)
    self.packageZones_property.setDataProvider (self.packageObjects_property)
  //--- Register properties for handling signature
    self.comments_property.setSignatureObserver (observer: self)
    self.counterClockNumberingStartAngle_property.setSignatureObserver (observer: self)
    self.packageObjects_property.setSignatureObserver (observer: self)
    self.program_property.setSignatureObserver (observer: self)
    self.xPlacardUnit_property.setSignatureObserver (observer: self)
    self.yPlacardUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- To many property: packagePads
    self.packageObjects_property.removeEBObserver (self.packagePads_property)
  //--- To many property: packageSlavePads
    self.packageObjects_property.removeEBObserver (self.packageSlavePads_property)
  //--- To many property: packageZones
    self.packageObjects_property.removeEBObserver (self.packageZones_property)
  //--- Atomic proxy property: mModelImageFirstPointX
    self.mModelImageFirstPointX_property.mReadModelFunction = nil
    self.mModelImageFirstPointX_property.mWriteModelFunction = nil
    self.mModelImageFirstPointX_property.mValidateAndWriteModelFunction = nil
    self.mModelImageFirstPoint_property.removeEBObserverOf_mX (self.mModelImageFirstPointX_property)
  //--- Atomic proxy property: mModelImageFirstPointDimensionUnitX
    self.mModelImageFirstPointDimensionUnitX_property.mReadModelFunction = nil
    self.mModelImageFirstPointDimensionUnitX_property.mWriteModelFunction = nil
    self.mModelImageFirstPointDimensionUnitX_property.mValidateAndWriteModelFunction = nil
    self.mModelImageFirstPoint_property.removeEBObserverOf_mDimensionUnitX (self.mModelImageFirstPointDimensionUnitX_property)
  //--- Atomic proxy property: mModelImageFirstPointY
    self.mModelImageFirstPointY_property.mReadModelFunction = nil
    self.mModelImageFirstPointY_property.mWriteModelFunction = nil
    self.mModelImageFirstPointY_property.mValidateAndWriteModelFunction = nil
    self.mModelImageFirstPoint_property.removeEBObserverOf_mY (self.mModelImageFirstPointY_property)
  //--- Atomic proxy property: mModelImageFirstPointDimensionUnitY
    self.mModelImageFirstPointDimensionUnitY_property.mReadModelFunction = nil
    self.mModelImageFirstPointDimensionUnitY_property.mWriteModelFunction = nil
    self.mModelImageFirstPointDimensionUnitY_property.mValidateAndWriteModelFunction = nil
    self.mModelImageFirstPoint_property.removeEBObserverOf_mDimensionUnitY (self.mModelImageFirstPointDimensionUnitY_property)
  //--- Atomic proxy property: mModelImageFirstPointLocked
    self.mModelImageFirstPointLocked_property.mReadModelFunction = nil
    self.mModelImageFirstPointLocked_property.mWriteModelFunction = nil
    self.mModelImageFirstPointLocked_property.mValidateAndWriteModelFunction = nil
    self.mModelImageFirstPoint_property.removeEBObserverOf_mIsLocked (self.mModelImageFirstPointLocked_property)
  //--- Atomic proxy property: mModelImageSecondPointX
    self.mModelImageSecondPointX_property.mReadModelFunction = nil
    self.mModelImageSecondPointX_property.mWriteModelFunction = nil
    self.mModelImageSecondPointX_property.mValidateAndWriteModelFunction = nil
    self.mModelImageSecondPoint_property.removeEBObserverOf_mX (self.mModelImageSecondPointX_property)
  //--- Atomic proxy property: mModelImageSecondPointDimensionUnitX
    self.mModelImageSecondPointDimensionUnitX_property.mReadModelFunction = nil
    self.mModelImageSecondPointDimensionUnitX_property.mWriteModelFunction = nil
    self.mModelImageSecondPointDimensionUnitX_property.mValidateAndWriteModelFunction = nil
    self.mModelImageSecondPoint_property.removeEBObserverOf_mDimensionUnitX (self.mModelImageSecondPointDimensionUnitX_property)
  //--- Atomic proxy property: mModelImageSecondPointY
    self.mModelImageSecondPointY_property.mReadModelFunction = nil
    self.mModelImageSecondPointY_property.mWriteModelFunction = nil
    self.mModelImageSecondPointY_property.mValidateAndWriteModelFunction = nil
    self.mModelImageSecondPoint_property.removeEBObserverOf_mY (self.mModelImageSecondPointY_property)
  //--- Atomic proxy property: mModelImageSecondPointDimensionUnitY
    self.mModelImageSecondPointDimensionUnitY_property.mReadModelFunction = nil
    self.mModelImageSecondPointDimensionUnitY_property.mWriteModelFunction = nil
    self.mModelImageSecondPointDimensionUnitY_property.mValidateAndWriteModelFunction = nil
    self.mModelImageSecondPoint_property.removeEBObserverOf_mDimensionUnitY (self.mModelImageSecondPointDimensionUnitY_property)
  //--- Atomic proxy property: mModelImageSecondPointLocked
    self.mModelImageSecondPointLocked_property.mReadModelFunction = nil
    self.mModelImageSecondPointLocked_property.mWriteModelFunction = nil
    self.mModelImageSecondPointLocked_property.mValidateAndWriteModelFunction = nil
    self.mModelImageSecondPoint_property.removeEBObserverOf_mIsLocked (self.mModelImageSecondPointLocked_property)
    self.padNumbering_property.removeEBObserver (self.freePadNumbering_property)
    self.padNumbering_property.removeEBObserver (self.counterClockNumbering_property)
    self.gridStep_property.removeEBObserver (self.gridStepMultipliedByDisplayFactor_property)
    self.gridDisplayFactor_property.removeEBObserver (self.gridStepMultipliedByDisplayFactor_property)
    g_Preferences?.showPadNumber_property.removeEBObserver (self.padNumberDisplay_property)
    self.packagePads_property.removeEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
    self.packageSlavePads_property.removeEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
    self.packageObjects_property.removeEBObserverOf_objectDisplay (self.backgroundImagePageBackgroundDisplay_property)
    self.mModelImageData_property.removeEBObserver (self.backgroundImagePageBackgroundDisplay_property)
    self.packageObjects_property.removeEBObserverOf_issues (self.issues_property)
    self.packageZones_property.removeEBObserverOf_rect (self.issues_property)
    self.packageZones_property.removeEBObserverOf_zoneName (self.issues_property)
    self.packageZones_property.removeEBObserverOf_xName (self.issues_property)
    self.packageZones_property.removeEBObserverOf_yName (self.issues_property)
    g_Preferences?.padZoneFont_property.removeEBObserver (self.issues_property)
    self.issues_property.removeEBObserver (self.noIssue_property)
    self.packagePads_property.setDataProvider (nil)
    self.packageSlavePads_property.setDataProvider (nil)
    self.packageZones_property.setDataProvider (nil)
  //--- Unregister properties for handling signature
    self.comments_property.setSignatureObserver (observer: nil)
    self.counterClockNumberingStartAngle_property.setSignatureObserver (observer: nil)
    self.packageObjects_property.setSignatureObserver (observer: nil)
    self.program_property.setSignatureObserver (observer: nil)
    self.xPlacardUnit_property.setSignatureObserver (observer: nil)
    self.yPlacardUnit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedPageIndex",
      idx: self.selectedPageIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedPageIndex_property.mObserverExplorer,
      valueExplorer: &self.selectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedInspector",
      idx: self.selectedInspector_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedInspector_property.mObserverExplorer,
      valueExplorer: &self.selectedInspector_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "comments",
      idx: self.comments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.comments_property.mObserverExplorer,
      valueExplorer: &self.comments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "program",
      idx: self.program_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.program_property.mObserverExplorer,
      valueExplorer: &self.program_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalFlip",
      idx: self.horizontalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.horizontalFlip_property.mObserverExplorer,
      valueExplorer: &self.horizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "verticalFlip",
      idx: self.verticalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.verticalFlip_property.mObserverExplorer,
      valueExplorer: &self.verticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStyle",
      idx: self.gridStyle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.gridStyle_property.mObserverExplorer,
      valueExplorer: &self.gridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStep",
      idx: self.gridStep_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.gridStep_property.mObserverExplorer,
      valueExplorer: &self.gridStep_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStepUnit",
      idx: self.gridStepUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.gridStepUnit_property.mObserverExplorer,
      valueExplorer: &self.gridStepUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridDisplayFactor",
      idx: self.gridDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.gridDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.gridDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx: self.zoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.zoom_property.mObserverExplorer,
      valueExplorer: &self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageHorizontalFlip",
      idx: self.mModelImagePageHorizontalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageHorizontalFlip_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageVerticalFlip",
      idx: self.mModelImagePageVerticalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageVerticalFlip_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageGridStyle",
      idx: self.mModelImagePageGridStyle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageGridStyle_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageGridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageGridStep",
      idx: self.mModelImagePageGridStep_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageGridStep_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageGridStep_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageGridStepUnit",
      idx: self.mModelImagePageGridStepUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageGridStepUnit_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageGridStepUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageGridDisplayFactor",
      idx: self.mModelImagePageGridDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageGridDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageGridDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageZoom",
      idx: self.mModelImagePageZoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageZoom_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageXPlacardUnit",
      idx: self.mModelImagePageXPlacardUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageXPlacardUnit_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageXPlacardUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImagePageYPlacardUnit",
      idx: self.mModelImagePageYPlacardUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImagePageYPlacardUnit_property.mObserverExplorer,
      valueExplorer: &self.mModelImagePageYPlacardUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "knobSizeMultpliedByTen",
      idx: self.knobSizeMultpliedByTen_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.knobSizeMultpliedByTen_property.mObserverExplorer,
      valueExplorer: &self.knobSizeMultpliedByTen_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumbering",
      idx: self.padNumbering_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padNumbering_property.mObserverExplorer,
      valueExplorer: &self.padNumbering_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "counterClockNumberingStartAngle",
      idx: self.counterClockNumberingStartAngle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.counterClockNumberingStartAngle_property.mObserverExplorer,
      valueExplorer: &self.counterClockNumberingStartAngle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xPlacardUnit",
      idx: self.xPlacardUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xPlacardUnit_property.mObserverExplorer,
      valueExplorer: &self.xPlacardUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yPlacardUnit",
      idx: self.yPlacardUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yPlacardUnit_property.mObserverExplorer,
      valueExplorer: &self.yPlacardUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mModelImageData",
      idx: self.mModelImageData_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mModelImageData_property.mObserverExplorer,
      valueExplorer: &self.mModelImageData_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "freePadNumbering",
      idx: self.freePadNumbering_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.freePadNumbering_property.mObserverExplorer,
      valueExplorer: &self.freePadNumbering_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "counterClockNumbering",
      idx: self.counterClockNumbering_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.counterClockNumbering_property.mObserverExplorer,
      valueExplorer: &self.counterClockNumbering_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStepMultipliedByDisplayFactor",
      idx: self.gridStepMultipliedByDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.gridStepMultipliedByDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.gridStepMultipliedByDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumberDisplay",
      idx: self.padNumberDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padNumberDisplay_property.mObserverExplorer,
      valueExplorer: &self.padNumberDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backgroundImagePageBackgroundDisplay",
      idx: self.backgroundImagePageBackgroundDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backgroundImagePageBackgroundDisplay_property.mObserverExplorer,
      valueExplorer: &self.backgroundImagePageBackgroundDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "noIssue",
      idx: self.noIssue_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.noIssue_property.mObserverExplorer,
      valueExplorer: &self.noIssue_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "packageObjects",
      idx:packageObjects_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&packageObjects_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mModelImageObjects",
      idx:mModelImageObjects_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mModelImageObjects_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mModelImageSecondPoint",
      idx:self.mModelImageSecondPoint_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mModelImageSecondPoint_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mModelImageFirstPoint",
      idx:self.mModelImageFirstPoint_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mModelImageFirstPoint_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.mObserverExplorer = nil
    self.selectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.mObserverExplorer = nil
    self.selectedInspector_property.mValueExplorer = nil
  //--- Atomic property: comments
    self.comments_property.mObserverExplorer = nil
    self.comments_property.mValueExplorer = nil
  //--- Atomic property: program
    self.program_property.mObserverExplorer = nil
    self.program_property.mValueExplorer = nil
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.mObserverExplorer = nil
    self.horizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.mObserverExplorer = nil
    self.verticalFlip_property.mValueExplorer = nil
  //--- Atomic property: gridStyle
    self.gridStyle_property.mObserverExplorer = nil
    self.gridStyle_property.mValueExplorer = nil
  //--- Atomic property: gridStep
    self.gridStep_property.mObserverExplorer = nil
    self.gridStep_property.mValueExplorer = nil
  //--- Atomic property: gridStepUnit
    self.gridStepUnit_property.mObserverExplorer = nil
    self.gridStepUnit_property.mValueExplorer = nil
  //--- Atomic property: gridDisplayFactor
    self.gridDisplayFactor_property.mObserverExplorer = nil
    self.gridDisplayFactor_property.mValueExplorer = nil
  //--- Atomic property: zoom
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageHorizontalFlip
    self.mModelImagePageHorizontalFlip_property.mObserverExplorer = nil
    self.mModelImagePageHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageVerticalFlip
    self.mModelImagePageVerticalFlip_property.mObserverExplorer = nil
    self.mModelImagePageVerticalFlip_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageGridStyle
    self.mModelImagePageGridStyle_property.mObserverExplorer = nil
    self.mModelImagePageGridStyle_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageGridStep
    self.mModelImagePageGridStep_property.mObserverExplorer = nil
    self.mModelImagePageGridStep_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageGridStepUnit
    self.mModelImagePageGridStepUnit_property.mObserverExplorer = nil
    self.mModelImagePageGridStepUnit_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageGridDisplayFactor
    self.mModelImagePageGridDisplayFactor_property.mObserverExplorer = nil
    self.mModelImagePageGridDisplayFactor_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageZoom
    self.mModelImagePageZoom_property.mObserverExplorer = nil
    self.mModelImagePageZoom_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageXPlacardUnit
    self.mModelImagePageXPlacardUnit_property.mObserverExplorer = nil
    self.mModelImagePageXPlacardUnit_property.mValueExplorer = nil
  //--- Atomic property: mModelImagePageYPlacardUnit
    self.mModelImagePageYPlacardUnit_property.mObserverExplorer = nil
    self.mModelImagePageYPlacardUnit_property.mValueExplorer = nil
  //--- Atomic property: knobSizeMultpliedByTen
    self.knobSizeMultpliedByTen_property.mObserverExplorer = nil
    self.knobSizeMultpliedByTen_property.mValueExplorer = nil
  //--- Atomic property: padNumbering
    self.padNumbering_property.mObserverExplorer = nil
    self.padNumbering_property.mValueExplorer = nil
  //--- Atomic property: counterClockNumberingStartAngle
    self.counterClockNumberingStartAngle_property.mObserverExplorer = nil
    self.counterClockNumberingStartAngle_property.mValueExplorer = nil
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.mObserverExplorer = nil
    self.xPlacardUnit_property.mValueExplorer = nil
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.mObserverExplorer = nil
    self.yPlacardUnit_property.mValueExplorer = nil
  //--- To many property: packageObjects
    self.packageObjects_property.mValueExplorer = nil
  //--- To many property: mModelImageObjects
    self.mModelImageObjects_property.mValueExplorer = nil
  //--- Atomic property: mModelImageData
    self.mModelImageData_property.mObserverExplorer = nil
    self.mModelImageData_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageFirstPointX
    self.mModelImageFirstPointX_property.mObserverExplorer = nil
    self.mModelImageFirstPointX_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageFirstPointDimensionUnitX
    self.mModelImageFirstPointDimensionUnitX_property.mObserverExplorer = nil
    self.mModelImageFirstPointDimensionUnitX_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageFirstPointY
    self.mModelImageFirstPointY_property.mObserverExplorer = nil
    self.mModelImageFirstPointY_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageFirstPointDimensionUnitY
    self.mModelImageFirstPointDimensionUnitY_property.mObserverExplorer = nil
    self.mModelImageFirstPointDimensionUnitY_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageFirstPointLocked
    self.mModelImageFirstPointLocked_property.mObserverExplorer = nil
    self.mModelImageFirstPointLocked_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageSecondPointX
    self.mModelImageSecondPointX_property.mObserverExplorer = nil
    self.mModelImageSecondPointX_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageSecondPointDimensionUnitX
    self.mModelImageSecondPointDimensionUnitX_property.mObserverExplorer = nil
    self.mModelImageSecondPointDimensionUnitX_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageSecondPointY
    self.mModelImageSecondPointY_property.mObserverExplorer = nil
    self.mModelImageSecondPointY_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageSecondPointDimensionUnitY
    self.mModelImageSecondPointDimensionUnitY_property.mObserverExplorer = nil
    self.mModelImageSecondPointDimensionUnitY_property.mValueExplorer = nil
  //--- Atomic proxy property: mModelImageSecondPointLocked
    self.mModelImageSecondPointLocked_property.mObserverExplorer = nil
    self.mModelImageSecondPointLocked_property.mValueExplorer = nil
  //--- To one property: mModelImageSecondPoint
    self.mModelImageSecondPoint_property.mObserverExplorer = nil
    self.mModelImageSecondPoint_property.mValueExplorer = nil
  //--- To one property: mModelImageFirstPoint
    self.mModelImageFirstPoint_property.mObserverExplorer = nil
    self.mModelImageFirstPoint_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.packageObjects = []
    self.mModelImageObjects = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mModelImageSecondPoint = nil
    self.mModelImageFirstPoint = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"selectedPageIndex")
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.storeIn (dictionary: ioDictionary, forKey:"selectedInspector")
  //--- Atomic property: comments
    self.comments_property.storeIn (dictionary: ioDictionary, forKey:"comments")
  //--- Atomic property: program
    self.program_property.storeIn (dictionary: ioDictionary, forKey:"program")
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"horizontalFlip")
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"verticalFlip")
  //--- Atomic property: gridStyle
    self.gridStyle_property.storeIn (dictionary: ioDictionary, forKey:"gridStyle")
  //--- Atomic property: gridStep
    self.gridStep_property.storeIn (dictionary: ioDictionary, forKey:"gridStep")
  //--- Atomic property: gridStepUnit
    self.gridStepUnit_property.storeIn (dictionary: ioDictionary, forKey:"gridStepUnit")
  //--- Atomic property: gridDisplayFactor
    self.gridDisplayFactor_property.storeIn (dictionary: ioDictionary, forKey:"gridDisplayFactor")
  //--- Atomic property: zoom
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey:"zoom")
  //--- Atomic property: mModelImagePageHorizontalFlip
    self.mModelImagePageHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mModelImagePageHorizontalFlip")
  //--- Atomic property: mModelImagePageVerticalFlip
    self.mModelImagePageVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mModelImagePageVerticalFlip")
  //--- Atomic property: mModelImagePageGridStyle
    self.mModelImagePageGridStyle_property.storeIn (dictionary: ioDictionary, forKey:"mModelImagePageGridStyle")
  //--- Atomic property: mModelImagePageGridStep
    self.mModelImagePageGridStep_property.storeIn (dictionary: ioDictionary, forKey:"mModelImagePageGridStep")
  //--- Atomic property: mModelImagePageGridStepUnit
    self.mModelImagePageGridStepUnit_property.storeIn (dictionary: ioDictionary, forKey:"mModelImagePageGridStepUnit")
  //--- Atomic property: mModelImagePageGridDisplayFactor
    self.mModelImagePageGridDisplayFactor_property.storeIn (dictionary: ioDictionary, forKey:"mModelImagePageGridDisplayFactor")
  //--- Atomic property: mModelImagePageZoom
    self.mModelImagePageZoom_property.storeIn (dictionary: ioDictionary, forKey:"mModelImagePageZoom")
  //--- Atomic property: mModelImagePageXPlacardUnit
    self.mModelImagePageXPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey:"mModelImagePageXPlacardUnit")
  //--- Atomic property: mModelImagePageYPlacardUnit
    self.mModelImagePageYPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey:"mModelImagePageYPlacardUnit")
  //--- Atomic property: knobSizeMultpliedByTen
    self.knobSizeMultpliedByTen_property.storeIn (dictionary: ioDictionary, forKey:"knobSizeMultpliedByTen")
  //--- Atomic property: padNumbering
    self.padNumbering_property.storeIn (dictionary: ioDictionary, forKey:"padNumbering")
  //--- Atomic property: counterClockNumberingStartAngle
    self.counterClockNumberingStartAngle_property.storeIn (dictionary: ioDictionary, forKey:"counterClockNumberingStartAngle")
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey:"xPlacardUnit")
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey:"yPlacardUnit")
  //--- To many property: packageObjects
    self.store (
      managedObjectArray: self.packageObjects_property.propval,
      relationshipName: "packageObjects",
      intoDictionary: ioDictionary
    )
  //--- To many property: mModelImageObjects
    self.store (
      managedObjectArray: self.mModelImageObjects_property.propval,
      relationshipName: "mModelImageObjects",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mModelImageData
    self.mModelImageData_property.storeIn (dictionary: ioDictionary, forKey:"mModelImageData")
  //--- To one property: mModelImageSecondPoint
    self.store (managedObject:self.mModelImageSecondPoint_property.propval,
      relationshipName: "mModelImageSecondPoint",
      intoDictionary: ioDictionary)
  //--- To one property: mModelImageFirstPoint
    self.store (managedObject:self.mModelImageFirstPoint_property.propval,
      relationshipName: "mModelImageFirstPoint",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: packageObjects
    self.packageObjects_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "packageObjects",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageObject])
  //--- To many property: mModelImageObjects
    self.mModelImageObjects_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mModelImageObjects",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageModelImagePoint])
  //--- To one property: mModelImageSecondPoint
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mModelImageSecondPoint",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PackageModelImagePoint {
        self.mModelImageSecondPoint_property.setProp (entity)
      }
    }
  //--- To one property: mModelImageFirstPoint
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mModelImageFirstPoint",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PackageModelImagePoint {
        self.mModelImageFirstPoint_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"selectedPageIndex")
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.readFrom (dictionary: inDictionary, forKey:"selectedInspector")
  //--- Atomic property: comments
    self.comments_property.readFrom (dictionary: inDictionary, forKey:"comments")
  //--- Atomic property: program
    self.program_property.readFrom (dictionary: inDictionary, forKey:"program")
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"horizontalFlip")
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.readFrom (dictionary: inDictionary, forKey:"verticalFlip")
  //--- Atomic property: gridStyle
    self.gridStyle_property.readFrom (dictionary: inDictionary, forKey:"gridStyle")
  //--- Atomic property: gridStep
    self.gridStep_property.readFrom (dictionary: inDictionary, forKey:"gridStep")
  //--- Atomic property: gridStepUnit
    self.gridStepUnit_property.readFrom (dictionary: inDictionary, forKey:"gridStepUnit")
  //--- Atomic property: gridDisplayFactor
    self.gridDisplayFactor_property.readFrom (dictionary: inDictionary, forKey:"gridDisplayFactor")
  //--- Atomic property: zoom
    self.zoom_property.readFrom (dictionary: inDictionary, forKey:"zoom")
  //--- Atomic property: mModelImagePageHorizontalFlip
    self.mModelImagePageHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"mModelImagePageHorizontalFlip")
  //--- Atomic property: mModelImagePageVerticalFlip
    self.mModelImagePageVerticalFlip_property.readFrom (dictionary: inDictionary, forKey:"mModelImagePageVerticalFlip")
  //--- Atomic property: mModelImagePageGridStyle
    self.mModelImagePageGridStyle_property.readFrom (dictionary: inDictionary, forKey:"mModelImagePageGridStyle")
  //--- Atomic property: mModelImagePageGridStep
    self.mModelImagePageGridStep_property.readFrom (dictionary: inDictionary, forKey:"mModelImagePageGridStep")
  //--- Atomic property: mModelImagePageGridStepUnit
    self.mModelImagePageGridStepUnit_property.readFrom (dictionary: inDictionary, forKey:"mModelImagePageGridStepUnit")
  //--- Atomic property: mModelImagePageGridDisplayFactor
    self.mModelImagePageGridDisplayFactor_property.readFrom (dictionary: inDictionary, forKey:"mModelImagePageGridDisplayFactor")
  //--- Atomic property: mModelImagePageZoom
    self.mModelImagePageZoom_property.readFrom (dictionary: inDictionary, forKey:"mModelImagePageZoom")
  //--- Atomic property: mModelImagePageXPlacardUnit
    self.mModelImagePageXPlacardUnit_property.readFrom (dictionary: inDictionary, forKey:"mModelImagePageXPlacardUnit")
  //--- Atomic property: mModelImagePageYPlacardUnit
    self.mModelImagePageYPlacardUnit_property.readFrom (dictionary: inDictionary, forKey:"mModelImagePageYPlacardUnit")
  //--- Atomic property: knobSizeMultpliedByTen
    self.knobSizeMultpliedByTen_property.readFrom (dictionary: inDictionary, forKey:"knobSizeMultpliedByTen")
  //--- Atomic property: padNumbering
    self.padNumbering_property.readFrom (dictionary: inDictionary, forKey:"padNumbering")
  //--- Atomic property: counterClockNumberingStartAngle
    self.counterClockNumberingStartAngle_property.readFrom (dictionary: inDictionary, forKey:"counterClockNumberingStartAngle")
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.readFrom (dictionary: inDictionary, forKey:"xPlacardUnit")
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.readFrom (dictionary: inDictionary, forKey:"yPlacardUnit")
  //--- Atomic property: mModelImageData
    self.mModelImageData_property.readFrom (dictionary: inDictionary, forKey:"mModelImageData")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "selectedPageIndex\n"
    ioString += "selectedInspector\n"
    ioString += "comments\n"
    ioString += "program\n"
    ioString += "horizontalFlip\n"
    ioString += "verticalFlip\n"
    ioString += "gridStyle\n"
    ioString += "gridStep\n"
    ioString += "gridStepUnit\n"
    ioString += "gridDisplayFactor\n"
    ioString += "zoom\n"
    ioString += "mModelImagePageHorizontalFlip\n"
    ioString += "mModelImagePageVerticalFlip\n"
    ioString += "mModelImagePageGridStyle\n"
    ioString += "mModelImagePageGridStep\n"
    ioString += "mModelImagePageGridStepUnit\n"
    ioString += "mModelImagePageGridDisplayFactor\n"
    ioString += "mModelImagePageZoom\n"
    ioString += "mModelImagePageXPlacardUnit\n"
    ioString += "mModelImagePageYPlacardUnit\n"
    ioString += "knobSizeMultpliedByTen\n"
    ioString += "padNumbering\n"
    ioString += "counterClockNumberingStartAngle\n"
    ioString += "xPlacardUnit\n"
    ioString += "yPlacardUnit\n"
    ioString += "mModelImageData\n"
  //--- To one relationships
    ioString += "mModelImageSecondPoint\n"
    ioString += "mModelImageFirstPoint\n"
  //--- To many relationships
    ioString += "packageObjects\n"
    ioString += "mModelImageObjects\n"
    ioString += "packagePads\n"
    ioString += "packageSlavePads\n"
    ioString += "packageZones\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.selectedPageIndex.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.selectedInspector.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.comments.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.program.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.horizontalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.verticalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.gridStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.gridStep.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.gridStepUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.gridDisplayFactor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.zoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageHorizontalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageVerticalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageGridStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageGridStep.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageGridStepUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageGridDisplayFactor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageZoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageXPlacardUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImagePageYPlacardUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.knobSizeMultpliedByTen.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.padNumbering.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.counterClockNumberingStartAngle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xPlacardUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yPlacardUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mModelImageData.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mModelImageSecondPoint {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mModelImageFirstPoint {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.packageObjects {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mModelImageObjects {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.packagePads {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.packageSlavePads {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.packageZones {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: packageObjects
    for managedObject in self.packageObjects {
      objects.append (managedObject)
    }
  //--- To many property: mModelImageObjects
    for managedObject in self.mModelImageObjects {
      objects.append (managedObject)
    }
  //--- To many property: packagePads
    for managedObject in self.packagePads {
      objects.append (managedObject)
    }
  //--- To many property: packageSlavePads
    for managedObject in self.packageSlavePads {
      objects.append (managedObject)
    }
  //--- To many property: packageZones
    for managedObject in self.packageZones {
      objects.append (managedObject)
    }
  //--- To one property: mModelImageSecondPoint
    if let object = self.mModelImageSecondPoint {
      objects.append (object)
    }
  //--- To one property: mModelImageFirstPoint
    if let object = self.mModelImageFirstPoint {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: packageObjects
    for managedObject in self.packageObjects {
      objects.append (managedObject)
    }
  //--- To many property: mModelImageObjects
    for managedObject in self.mModelImageObjects {
      objects.append (managedObject)
    }
  //--- To many property: packagePads
    for managedObject in self.packagePads {
      objects.append (managedObject)
    }
  //--- To many property: packageSlavePads
    for managedObject in self.packageSlavePads {
      objects.append (managedObject)
    }
  //--- To many property: packageZones
    for managedObject in self.packageZones {
      objects.append (managedObject)
    }
  //--- To one property: mModelImageSecondPoint
    if let object = self.mModelImageSecondPoint {
      objects.append (object)
    }
  //--- To one property: mModelImageFirstPoint
    if let object = self.mModelImageFirstPoint {
      objects.append (object)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.comments_property.signature ())
    crc.accumulateUInt32 (self.counterClockNumberingStartAngle_property.signature ())
    crc.accumulateUInt32 (self.packageObjects_property.signature ())
    crc.accumulateUInt32 (self.program_property.signature ())
    crc.accumulateUInt32 (self.xPlacardUnit_property.signature ())
    crc.accumulateUInt32 (self.yPlacardUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

