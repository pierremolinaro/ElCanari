//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_selectedPageIndex : class {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_selectedInspector : class {
  var selectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_comments : class {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_program : class {
  var program : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_horizontalFlip : class {
  var horizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_verticalFlip : class {
  var verticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridStyle : class {
  var gridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridStep : class {
  var gridStep : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridStepUnit : class {
  var gridStepUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridDisplayFactor : class {
  var gridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_zoom : class {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_padNumbering : class {
  var padNumbering : PadNumbering { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_xPlacardUnit : class {
  var xPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_yPlacardUnit : class {
  var yPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_freePadNumbering : class {
  var freePadNumbering : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_gridStepMultipliedByDisplayFactor : class {
  var gridStepMultipliedByDisplayFactor : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_padNumberDisplay : class {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageRoot_noIssue : class {
  var noIssue : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageRoot : EBGraphicManagedObject,
         PackageRoot_selectedPageIndex,
         PackageRoot_selectedInspector,
         PackageRoot_comments,
         PackageRoot_program,
         PackageRoot_horizontalFlip,
         PackageRoot_verticalFlip,
         PackageRoot_gridStyle,
         PackageRoot_gridStep,
         PackageRoot_gridStepUnit,
         PackageRoot_gridDisplayFactor,
         PackageRoot_zoom,
         PackageRoot_padNumbering,
         PackageRoot_xPlacardUnit,
         PackageRoot_yPlacardUnit,
         PackageRoot_freePadNumbering,
         PackageRoot_gridStepMultipliedByDisplayFactor,
         PackageRoot_padNumberDisplay,
         PackageRoot_issues,
         PackageRoot_noIssue {

  //····················································································································
  //   Atomic property: selectedPageIndex
  //····················································································································

  var selectedPageIndex_property = EBStoredProperty_Int (0)

  //····················································································································

  var selectedPageIndex : Int {
    get {
      return self.selectedPageIndex_property.propval
    }
    set {
      self.selectedPageIndex_property.setProp (newValue)
    }
  }

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int> {
    return self.selectedPageIndex_property.prop
  }

  //····················································································································
  //   Atomic property: selectedInspector
  //····················································································································

  var selectedInspector_property = EBStoredProperty_Int (0)

  //····················································································································

  var selectedInspector : Int {
    get {
      return self.selectedInspector_property.propval
    }
    set {
      self.selectedInspector_property.setProp (newValue)
    }
  }

  //····················································································································

  var selectedInspector_property_selection : EBSelection <Int> {
    return self.selectedInspector_property.prop
  }

  //····················································································································
  //   Atomic property: comments
  //····················································································································

  var comments_property = EBStoredProperty_String ("")

  //····················································································································

  var comments : String {
    get {
      return self.comments_property.propval
    }
    set {
      self.comments_property.setProp (newValue)
    }
  }

  //····················································································································

  var comments_property_selection : EBSelection <String> {
    return self.comments_property.prop
  }

  //····················································································································
  //   Atomic property: program
  //····················································································································

  var program_property = EBStoredProperty_String ("")

  //····················································································································

  var program : String {
    get {
      return self.program_property.propval
    }
    set {
      self.program_property.setProp (newValue)
    }
  }

  //····················································································································

  var program_property_selection : EBSelection <String> {
    return self.program_property.prop
  }

  //····················································································································
  //   Atomic property: horizontalFlip
  //····················································································································

  var horizontalFlip_property = EBStoredProperty_Bool (false)

  //····················································································································

  var horizontalFlip : Bool {
    get {
      return self.horizontalFlip_property.propval
    }
    set {
      self.horizontalFlip_property.setProp (newValue)
    }
  }

  //····················································································································

  var horizontalFlip_property_selection : EBSelection <Bool> {
    return self.horizontalFlip_property.prop
  }

  //····················································································································
  //   Atomic property: verticalFlip
  //····················································································································

  var verticalFlip_property = EBStoredProperty_Bool (false)

  //····················································································································

  var verticalFlip : Bool {
    get {
      return self.verticalFlip_property.propval
    }
    set {
      self.verticalFlip_property.setProp (newValue)
    }
  }

  //····················································································································

  var verticalFlip_property_selection : EBSelection <Bool> {
    return self.verticalFlip_property.prop
  }

  //····················································································································
  //   Atomic property: gridStyle
  //····················································································································

  var gridStyle_property = EBStoredProperty_GridStyle (GridStyle.line)

  //····················································································································

  var gridStyle : GridStyle {
    get {
      return self.gridStyle_property.propval
    }
    set {
      self.gridStyle_property.setProp (newValue)
    }
  }

  //····················································································································

  var gridStyle_property_selection : EBSelection <GridStyle> {
    return self.gridStyle_property.prop
  }

  //····················································································································
  //   Atomic property: gridStep
  //····················································································································

  var gridStep_property = EBStoredProperty_Int (57150)

  //····················································································································

  var gridStep : Int {
    get {
      return self.gridStep_property.propval
    }
    set {
      self.gridStep_property.setProp (newValue)
    }
  }

  //····················································································································

  var gridStep_property_selection : EBSelection <Int> {
    return self.gridStep_property.prop
  }

  //····················································································································
  //   Atomic property: gridStepUnit
  //····················································································································

  var gridStepUnit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var gridStepUnit : Int {
    get {
      return self.gridStepUnit_property.propval
    }
    set {
      self.gridStepUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var gridStepUnit_property_selection : EBSelection <Int> {
    return self.gridStepUnit_property.prop
  }

  //····················································································································
  //   Atomic property: gridDisplayFactor
  //····················································································································

  var gridDisplayFactor_property = EBStoredProperty_Int (4)

  //····················································································································

  var gridDisplayFactor : Int {
    get {
      return self.gridDisplayFactor_property.propval
    }
    set {
      self.gridDisplayFactor_property.setProp (newValue)
    }
  }

  //····················································································································

  var gridDisplayFactor_property_selection : EBSelection <Int> {
    return self.gridDisplayFactor_property.prop
  }

  //····················································································································
  //   Atomic property: zoom
  //····················································································································

  var zoom_property = EBStoredProperty_Int (600)

  //····················································································································

  var zoom : Int {
    get {
      return self.zoom_property.propval
    }
    set {
      self.zoom_property.setProp (newValue)
    }
  }

  //····················································································································

  var zoom_property_selection : EBSelection <Int> {
    return self.zoom_property.prop
  }

  //····················································································································
  //   Atomic property: padNumbering
  //····················································································································

  var padNumbering_property = EBStoredProperty_PadNumbering (PadNumbering.noNumbering)

  //····················································································································

  var padNumbering : PadNumbering {
    get {
      return self.padNumbering_property.propval
    }
    set {
      self.padNumbering_property.setProp (newValue)
    }
  }

  //····················································································································

  var padNumbering_property_selection : EBSelection <PadNumbering> {
    return self.padNumbering_property.prop
  }

  //····················································································································
  //   Atomic property: xPlacardUnit
  //····················································································································

  var xPlacardUnit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var xPlacardUnit : Int {
    get {
      return self.xPlacardUnit_property.propval
    }
    set {
      self.xPlacardUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var xPlacardUnit_property_selection : EBSelection <Int> {
    return self.xPlacardUnit_property.prop
  }

  //····················································································································
  //   Atomic property: yPlacardUnit
  //····················································································································

  var yPlacardUnit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var yPlacardUnit : Int {
    get {
      return self.yPlacardUnit_property.propval
    }
    set {
      self.yPlacardUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var yPlacardUnit_property_selection : EBSelection <Int> {
    return self.yPlacardUnit_property.prop
  }

  //····················································································································
  //   To many property: packageObjects
  //····················································································································

  var packageObjects_property = StoredArrayOf_PackageObject ()

  //····················································································································

  var packageObjects_property_selection : EBSelection < [PackageObject] > {
      return self.packageObjects_property.prop
  }

  //····················································································································
  //   To many property: packagePads
  //····················································································································

  var packagePads_property = TransientArrayOf_PackagePad ()

  //····················································································································

  var packagePads_property_selection : EBSelection < [PackagePad] > {
      return self.packagePads_property.prop
  }

  //····················································································································
  //   To many property: packageSlavePads
  //····················································································································

  var packageSlavePads_property = TransientArrayOf_PackageSlavePad ()

  //····················································································································

  var packageSlavePads_property_selection : EBSelection < [PackageSlavePad] > {
      return self.packageSlavePads_property.prop
  }

  //····················································································································
  //   To many property: packageZones
  //····················································································································

  var packageZones_property = TransientArrayOf_PackageZone ()

  //····················································································································

  var packageZones_property_selection : EBSelection < [PackageZone] > {
      return self.packageZones_property.prop
  }

  //····················································································································
  //   Transient property: freePadNumbering
  //····················································································································

  var freePadNumbering_property = EBTransientProperty_Bool ()

  //····················································································································

  var freePadNumbering_property_selection : EBSelection <Bool> {
    return self.freePadNumbering_property.prop
  }

  //····················································································································

  var freePadNumbering : Bool? {
    switch self.freePadNumbering_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: gridStepMultipliedByDisplayFactor
  //····················································································································

  var gridStepMultipliedByDisplayFactor_property = EBTransientProperty_Int ()

  //····················································································································

  var gridStepMultipliedByDisplayFactor_property_selection : EBSelection <Int> {
    return self.gridStepMultipliedByDisplayFactor_property.prop
  }

  //····················································································································

  var gridStepMultipliedByDisplayFactor : Int? {
    switch self.gridStepMultipliedByDisplayFactor_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  var padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var padNumberDisplay_property_selection : EBSelection <EBShape> {
    return self.padNumberDisplay_property.prop
  }

  //····················································································································

  var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  var issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray> {
    return self.issues_property.prop
  }

  //····················································································································

  var issues : CanariIssueArray? {
    switch self.issues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: noIssue
  //····················································································································

  var noIssue_property = EBTransientProperty_Bool ()

  //····················································································································

  var noIssue_property_selection : EBSelection <Bool> {
    return self.noIssue_property.prop
  }

  //····················································································································

  var noIssue : Bool? {
    switch self.noIssue_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ undoManager : EBUndoManager?, file: String, _ line : Int) {
    super.init (undoManager, file: file, line)
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.undoManager = self.undoManager
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.undoManager = self.undoManager
  //--- Atomic property: comments
    self.comments_property.undoManager = self.undoManager
  //--- Atomic property: program
    self.program_property.undoManager = self.undoManager
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.undoManager = self.undoManager
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.undoManager = self.undoManager
  //--- Atomic property: gridStyle
    self.gridStyle_property.undoManager = self.undoManager
  //--- Atomic property: gridStep
    self.gridStep_property.undoManager = self.undoManager
  //--- Atomic property: gridStepUnit
    self.gridStepUnit_property.undoManager = self.undoManager
  //--- Atomic property: gridDisplayFactor
    self.gridDisplayFactor_property.undoManager = self.undoManager
  //--- Atomic property: zoom
    self.zoom_property.undoManager = self.undoManager
  //--- Atomic property: padNumbering
    self.padNumbering_property.undoManager = self.undoManager
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.undoManager = self.undoManager
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.undoManager = self.undoManager
  //--- To many property: packageObjects (no option)
    self.packageObjects_property.undoManager = self.undoManager
  //--- Atomic property: freePadNumbering
    self.freePadNumbering_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.padNumbering_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.padNumbering_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageRoot_freePadNumbering (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padNumbering_property.addEBObserver (self.freePadNumbering_property)
  //--- Atomic property: gridStepMultipliedByDisplayFactor
    self.gridStepMultipliedByDisplayFactor_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.gridStep_property_selection.kind ()
        kind &= unwSelf.gridDisplayFactor_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.gridStep_property_selection, unwSelf.gridDisplayFactor_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PackageRoot_gridStepMultipliedByDisplayFactor (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.gridStep_property.addEBObserver (self.gridStepMultipliedByDisplayFactor_property)
    self.gridDisplayFactor_property.addEBObserver (self.gridStepMultipliedByDisplayFactor_property)
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.showPadNumber_property_selection.kind ()
        kind &= unwSelf.packagePads_property_selection.kind ()
        kind &= unwSelf.packageSlavePads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.showPadNumber_property_selection, unwSelf.packagePads_property_selection, unwSelf.packageSlavePads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_PackageRoot_padNumberDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    g_Preferences?.showPadNumber_property.addEBObserver (self.padNumberDisplay_property)
    self.packagePads_property.addEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
    self.packageSlavePads_property.addEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
  //--- Atomic property: issues
    self.issues_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.packageObjects_property_selection.kind ()
        kind &= unwSelf.packageZones_property_selection.kind ()
        kind &= unwSelf.packageZones_property_selection.kind ()
        kind &= unwSelf.packageZones_property_selection.kind ()
        kind &= unwSelf.packageZones_property_selection.kind ()
        kind &= g_Preferences!.padZoneFont_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.packageObjects_property_selection, unwSelf.packageZones_property_selection, unwSelf.packageZones_property_selection, unwSelf.packageZones_property_selection, unwSelf.packageZones_property_selection, g_Preferences!.padZoneFont_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_PackageRoot_issues (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.packageObjects_property.addEBObserverOf_issues (self.issues_property)
    self.packageZones_property.addEBObserverOf_rect (self.issues_property)
    self.packageZones_property.addEBObserverOf_zoneName (self.issues_property)
    self.packageZones_property.addEBObserverOf_xName (self.issues_property)
    self.packageZones_property.addEBObserverOf_yName (self.issues_property)
    g_Preferences?.padZoneFont_property.addEBObserver (self.issues_property)
  //--- Atomic property: noIssue
    self.noIssue_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageRoot_noIssue (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.noIssue_property)
  //--- Install undoers and opposite setter for relationships
    self.packageObjects_property.addEBObserver (self.packagePads_property)
    self.packagePads_property.readModelFunction =  { [weak self] in
      if let model = self?.packageObjects_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let modelArray) :
          var array = [PackagePad] ()
          for baseObject in modelArray {
            if let object = baseObject as? PackagePad {
              array.append (object)
            }
          }
          return .single (array)
        }
      }else{
        return .empty
      }
    }
    self.packageObjects_property.addEBObserver (self.packageSlavePads_property)
    self.packageSlavePads_property.readModelFunction =  { [weak self] in
      if let model = self?.packageObjects_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let modelArray) :
          var array = [PackageSlavePad] ()
          for baseObject in modelArray {
            if let object = baseObject as? PackageSlavePad {
              array.append (object)
            }
          }
          return .single (array)
        }
      }else{
        return .empty
      }
    }
    self.packageObjects_property.addEBObserver (self.packageZones_property)
    self.packageZones_property.readModelFunction =  { [weak self] in
      if let model = self?.packageObjects_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let modelArray) :
          var array = [PackageZone] ()
          for baseObject in modelArray {
            if let object = baseObject as? PackageZone {
              array.append (object)
            }
          }
          return .single (array)
        }
      }else{
        return .empty
      }
    }
  //--- register properties for handling signature
    self.comments_property.setSignatureObserver (observer:self)
    self.packageObjects_property.setSignatureObserver (observer:self)
    self.program_property.setSignatureObserver (observer:self)
    self.xPlacardUnit_property.setSignatureObserver (observer:self)
    self.yPlacardUnit_property.setSignatureObserver (observer:self)
  //--- Extern delegates
  }

  //····················································································································

  deinit {
  //--- Remove observers
  //--- To many property: packagePads
    self.packageObjects_property.removeEBObserver (self.packagePads_property)
  //--- To many property: packageSlavePads
    self.packageObjects_property.removeEBObserver (self.packageSlavePads_property)
  //--- To many property: packageZones
    self.packageObjects_property.removeEBObserver (self.packageZones_property)
    self.padNumbering_property.removeEBObserver (self.freePadNumbering_property)
    self.gridStep_property.removeEBObserver (self.gridStepMultipliedByDisplayFactor_property)
    self.gridDisplayFactor_property.removeEBObserver (self.gridStepMultipliedByDisplayFactor_property)
    g_Preferences?.showPadNumber_property.removeEBObserver (self.padNumberDisplay_property)
    self.packagePads_property.removeEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
    self.packageSlavePads_property.removeEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
    self.packageObjects_property.removeEBObserverOf_issues (self.issues_property)
    self.packageZones_property.removeEBObserverOf_rect (self.issues_property)
    self.packageZones_property.removeEBObserverOf_zoneName (self.issues_property)
    self.packageZones_property.removeEBObserverOf_xName (self.issues_property)
    self.packageZones_property.removeEBObserverOf_yName (self.issues_property)
    g_Preferences?.padZoneFont_property.removeEBObserver (self.issues_property)
    self.issues_property.removeEBObserver (self.noIssue_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedPageIndex",
      idx:self.selectedPageIndex_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedPageIndex_property.mObserverExplorer,
      valueExplorer:&self.selectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedInspector",
      idx:self.selectedInspector_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedInspector_property.mObserverExplorer,
      valueExplorer:&self.selectedInspector_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "comments",
      idx:self.comments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.comments_property.mObserverExplorer,
      valueExplorer:&self.comments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "program",
      idx:self.program_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.program_property.mObserverExplorer,
      valueExplorer:&self.program_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalFlip",
      idx:self.horizontalFlip_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.horizontalFlip_property.mObserverExplorer,
      valueExplorer:&self.horizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "verticalFlip",
      idx:self.verticalFlip_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.verticalFlip_property.mObserverExplorer,
      valueExplorer:&self.verticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStyle",
      idx:self.gridStyle_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.gridStyle_property.mObserverExplorer,
      valueExplorer:&self.gridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStep",
      idx:self.gridStep_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.gridStep_property.mObserverExplorer,
      valueExplorer:&self.gridStep_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStepUnit",
      idx:self.gridStepUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.gridStepUnit_property.mObserverExplorer,
      valueExplorer:&self.gridStepUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridDisplayFactor",
      idx:self.gridDisplayFactor_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.gridDisplayFactor_property.mObserverExplorer,
      valueExplorer:&self.gridDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom_property.mObserverExplorer,
      valueExplorer:&self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumbering",
      idx:self.padNumbering_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padNumbering_property.mObserverExplorer,
      valueExplorer:&self.padNumbering_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xPlacardUnit",
      idx:self.xPlacardUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xPlacardUnit_property.mObserverExplorer,
      valueExplorer:&self.xPlacardUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yPlacardUnit",
      idx:self.yPlacardUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yPlacardUnit_property.mObserverExplorer,
      valueExplorer:&self.yPlacardUnit_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "freePadNumbering",
      idx:self.freePadNumbering_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.freePadNumbering_property.mObserverExplorer,
      valueExplorer:&self.freePadNumbering_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStepMultipliedByDisplayFactor",
      idx:self.gridStepMultipliedByDisplayFactor_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.gridStepMultipliedByDisplayFactor_property.mObserverExplorer,
      valueExplorer:&self.gridStepMultipliedByDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumberDisplay",
      idx:self.padNumberDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padNumberDisplay_property.mObserverExplorer,
      valueExplorer:&self.padNumberDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "noIssue",
      idx:self.noIssue_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.noIssue_property.mObserverExplorer,
      valueExplorer:&self.noIssue_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "packageObjects",
      idx:packageObjects_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&packageObjects_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.mObserverExplorer = nil
    self.selectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.mObserverExplorer = nil
    self.selectedInspector_property.mValueExplorer = nil
  //--- Atomic property: comments
    self.comments_property.mObserverExplorer = nil
    self.comments_property.mValueExplorer = nil
  //--- Atomic property: program
    self.program_property.mObserverExplorer = nil
    self.program_property.mValueExplorer = nil
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.mObserverExplorer = nil
    self.horizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.mObserverExplorer = nil
    self.verticalFlip_property.mValueExplorer = nil
  //--- Atomic property: gridStyle
    self.gridStyle_property.mObserverExplorer = nil
    self.gridStyle_property.mValueExplorer = nil
  //--- Atomic property: gridStep
    self.gridStep_property.mObserverExplorer = nil
    self.gridStep_property.mValueExplorer = nil
  //--- Atomic property: gridStepUnit
    self.gridStepUnit_property.mObserverExplorer = nil
    self.gridStepUnit_property.mValueExplorer = nil
  //--- Atomic property: gridDisplayFactor
    self.gridDisplayFactor_property.mObserverExplorer = nil
    self.gridDisplayFactor_property.mValueExplorer = nil
  //--- Atomic property: zoom
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
  //--- Atomic property: padNumbering
    self.padNumbering_property.mObserverExplorer = nil
    self.padNumbering_property.mValueExplorer = nil
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.mObserverExplorer = nil
    self.xPlacardUnit_property.mValueExplorer = nil
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.mObserverExplorer = nil
    self.yPlacardUnit_property.mValueExplorer = nil
  //--- To many property: packageObjects
    self.packageObjects_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"selectedPageIndex")
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.storeIn (dictionary: ioDictionary, forKey:"selectedInspector")
  //--- Atomic property: comments
    self.comments_property.storeIn (dictionary: ioDictionary, forKey:"comments")
  //--- Atomic property: program
    self.program_property.storeIn (dictionary: ioDictionary, forKey:"program")
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"horizontalFlip")
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"verticalFlip")
  //--- Atomic property: gridStyle
    self.gridStyle_property.storeIn (dictionary: ioDictionary, forKey:"gridStyle")
  //--- Atomic property: gridStep
    self.gridStep_property.storeIn (dictionary: ioDictionary, forKey:"gridStep")
  //--- Atomic property: gridStepUnit
    self.gridStepUnit_property.storeIn (dictionary: ioDictionary, forKey:"gridStepUnit")
  //--- Atomic property: gridDisplayFactor
    self.gridDisplayFactor_property.storeIn (dictionary: ioDictionary, forKey:"gridDisplayFactor")
  //--- Atomic property: zoom
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey:"zoom")
  //--- Atomic property: padNumbering
    self.padNumbering_property.storeIn (dictionary: ioDictionary, forKey:"padNumbering")
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey:"xPlacardUnit")
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey:"yPlacardUnit")
  //--- To many property: packageObjects
    self.store (
      managedObjectArray: packageObjects_property.propval as NSArray,
      relationshipName: "packageObjects",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: packageObjects
    self.packageObjects_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "packageObjects",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageObject])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"selectedPageIndex")
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.readFrom (dictionary: inDictionary, forKey:"selectedInspector")
  //--- Atomic property: comments
    self.comments_property.readFrom (dictionary: inDictionary, forKey:"comments")
  //--- Atomic property: program
    self.program_property.readFrom (dictionary: inDictionary, forKey:"program")
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"horizontalFlip")
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.readFrom (dictionary: inDictionary, forKey:"verticalFlip")
  //--- Atomic property: gridStyle
    self.gridStyle_property.readFrom (dictionary: inDictionary, forKey:"gridStyle")
  //--- Atomic property: gridStep
    self.gridStep_property.readFrom (dictionary: inDictionary, forKey:"gridStep")
  //--- Atomic property: gridStepUnit
    self.gridStepUnit_property.readFrom (dictionary: inDictionary, forKey:"gridStepUnit")
  //--- Atomic property: gridDisplayFactor
    self.gridDisplayFactor_property.readFrom (dictionary: inDictionary, forKey:"gridDisplayFactor")
  //--- Atomic property: zoom
    self.zoom_property.readFrom (dictionary: inDictionary, forKey:"zoom")
  //--- Atomic property: padNumbering
    self.padNumbering_property.readFrom (dictionary: inDictionary, forKey:"padNumbering")
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.readFrom (dictionary: inDictionary, forKey:"xPlacardUnit")
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.readFrom (dictionary: inDictionary, forKey:"yPlacardUnit")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: packageObjects
    for managedObject : EBManagedObject in self.packageObjects_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: packagePads
    for managedObject : EBManagedObject in self.packagePads_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: packageSlavePads
    for managedObject : EBManagedObject in self.packageSlavePads_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: packageZones
    for managedObject : EBManagedObject in self.packageZones_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.comments_property.signature ())
    crc.accumulateUInt32 (self.packageObjects_property.signature ())
    crc.accumulateUInt32 (self.program_property.signature ())
    crc.accumulateUInt32 (self.xPlacardUnit_property.signature ())
    crc.accumulateUInt32 (self.yPlacardUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageRoot : ReadOnlyAbstractArrayProperty <PackageRoot> {

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_selectedPageIndex {
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_selectedPageIndex {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedInspector_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_selectedInspector {
        managedObject.selectedInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedInspector_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_selectedInspector {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_comments {
        managedObject.comments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_comments {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'program' stored property
  //····················································································································

  private var mObserversOf_program = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_program (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_program.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.program_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_program (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_program.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.program_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_program_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_program {
        managedObject.program_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_program_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_program {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.program_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'horizontalFlip' stored property
  //····················································································································

  private var mObserversOf_horizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_horizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_horizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_horizontalFlip_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_horizontalFlip {
        managedObject.horizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_horizontalFlip_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_horizontalFlip {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.horizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'verticalFlip' stored property
  //····················································································································

  private var mObserversOf_verticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_verticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.verticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_verticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.verticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_verticalFlip_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_verticalFlip {
        managedObject.verticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_verticalFlip_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_verticalFlip {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.verticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStyle' stored property
  //····················································································································

  private var mObserversOf_gridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStyle_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_gridStyle {
        managedObject.gridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStyle_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_gridStyle {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStep' stored property
  //····················································································································

  private var mObserversOf_gridStep = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStep (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStep.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStep_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStep (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStep.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStep_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStep_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_gridStep {
        managedObject.gridStep_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStep_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_gridStep {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStepUnit' stored property
  //····················································································································

  private var mObserversOf_gridStepUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStepUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStepUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStepUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStepUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStepUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStepUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStepUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_gridStepUnit {
        managedObject.gridStepUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStepUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_gridStepUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStepUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_gridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridDisplayFactor_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_gridDisplayFactor {
        managedObject.gridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridDisplayFactor_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_gridDisplayFactor {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_zoom {
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_zoom {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumbering' stored property
  //····················································································································

  private var mObserversOf_padNumbering = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumbering (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumbering.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumbering_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumbering (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumbering.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumbering_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumbering_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_padNumbering {
        managedObject.padNumbering_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumbering_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_padNumbering {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padNumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xPlacardUnit' stored property
  //····················································································································

  private var mObserversOf_xPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xPlacardUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPlacardUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xPlacardUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPlacardUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xPlacardUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_xPlacardUnit {
        managedObject.xPlacardUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xPlacardUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_xPlacardUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yPlacardUnit' stored property
  //····················································································································

  private var mObserversOf_yPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yPlacardUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPlacardUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yPlacardUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPlacardUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yPlacardUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_yPlacardUnit {
        managedObject.yPlacardUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yPlacardUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for observer in self.mObserversOf_yPlacardUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'freePadNumbering' transient property
  //····················································································································

  private var mObserversOf_freePadNumbering = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_freePadNumbering (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_freePadNumbering.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.freePadNumbering_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_freePadNumbering (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_freePadNumbering.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.freePadNumbering_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_freePadNumbering_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_freePadNumbering {
        managedObject.freePadNumbering_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_freePadNumbering_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_freePadNumbering {
        managedObject.freePadNumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private var mObserversOf_gridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStepMultipliedByDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStepMultipliedByDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStepMultipliedByDisplayFactor_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_gridStepMultipliedByDisplayFactor {
        managedObject.gridStepMultipliedByDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStepMultipliedByDisplayFactor_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_gridStepMultipliedByDisplayFactor {
        managedObject.gridStepMultipliedByDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_padNumberDisplay {
        managedObject.padNumberDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_padNumberDisplay {
        managedObject.padNumberDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_issues {
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_issues {
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'noIssue' transient property
  //····················································································································

  private var mObserversOf_noIssue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_noIssue.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.noIssue_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_noIssue.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.noIssue_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_noIssue_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_noIssue {
        managedObject.noIssue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_noIssue_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_noIssue {
        managedObject.noIssue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageRoot : ReadOnlyArrayOf_PackageRoot {

  //····················································································································

  var readModelFunction : Optional < () -> EBSelection < [PackageRoot] > >

  //····················································································································

  override var propset : Set <PackageRoot> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [PackageRoot] > {
    self.computeArrayAndSet ()
    return self.prop_cache!  
  }
 
  //····················································································································

  override var propval : [PackageRoot] {
    self.computeArrayAndSet ()
    if let value = self.prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <PackageRoot> ()

  //····················································································································

  private var prop_cache : EBSelection < [PackageRoot] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.readModelFunction, self.prop_cache == nil {
      self.prop_cache = unwrappedComputeFunction ()
      let newSet : Set <PackageRoot>
      switch self.prop_cache! {
      case .multiple, .empty :
        newSet = Set <PackageRoot> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_selectedPageIndex_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectedInspector_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_comments_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_program_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_horizontalFlip_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_verticalFlip_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_gridStyle_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_gridStep_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_gridStepUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_gridDisplayFactor_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_zoom_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padNumbering_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xPlacardUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yPlacardUnit_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_freePadNumbering_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_gridStepMultipliedByDisplayFactor_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_issues_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_noIssue_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_selectedPageIndex_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectedInspector_toElementsOfSet (addedSet)
      self.addEBObserversOf_comments_toElementsOfSet (addedSet)
      self.addEBObserversOf_program_toElementsOfSet (addedSet)
      self.addEBObserversOf_horizontalFlip_toElementsOfSet (addedSet)
      self.addEBObserversOf_verticalFlip_toElementsOfSet (addedSet)
      self.addEBObserversOf_gridStyle_toElementsOfSet (addedSet)
      self.addEBObserversOf_gridStep_toElementsOfSet (addedSet)
      self.addEBObserversOf_gridStepUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_gridDisplayFactor_toElementsOfSet (addedSet)
      self.addEBObserversOf_zoom_toElementsOfSet (addedSet)
      self.addEBObserversOf_padNumbering_toElementsOfSet (addedSet)
      self.addEBObserversOf_xPlacardUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_yPlacardUnit_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_freePadNumbering_toElementsOfSet (addedSet)
      self.addEBObserversOf_gridStepMultipliedByDisplayFactor_toElementsOfSet (addedSet)
      self.addEBObserversOf_padNumberDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_issues_toElementsOfSet (addedSet)
      self.addEBObserversOf_noIssue_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.prop_cache == nil {
      self.prop_cache = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.prop_cache != nil {
      self.prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageRoot : ReadOnlyArrayOf_PackageRoot {

  //····················································································································
 
  func setProp (_ value :  [PackageRoot]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageRoot : ReadWriteArrayOf_PackageRoot, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : PackageRoot?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageRoot] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "PackageRoot") as? PackageRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <PackageRoot> ()
  private var mValue = [PackageRoot] () {
    didSet {
      self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
        self.removeEBObserversOf_selectedPageIndex_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_selectedInspector_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_comments_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_program_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_horizontalFlip_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_verticalFlip_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_gridStyle_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_gridStep_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_gridStepUnit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_gridDisplayFactor_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_zoom_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_padNumbering_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_xPlacardUnit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_yPlacardUnit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_freePadNumbering_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_gridStepMultipliedByDisplayFactor_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_noIssue_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        for managedObject : PackageRoot in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
        self.addEBObserversOf_selectedPageIndex_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_selectedInspector_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_comments_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_program_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_horizontalFlip_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_verticalFlip_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_gridStyle_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_gridStep_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_gridStepUnit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_gridDisplayFactor_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_zoom_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_padNumbering_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_xPlacardUnit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_yPlacardUnit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_freePadNumbering_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_gridStepMultipliedByDisplayFactor_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_padNumberDisplay_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_noIssue_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        self.clearSignatureCache ()
      //--- Write in preferences ?
        if let prefKey = self.mPrefKey {
          var dictionaryArray = [NSDictionary] ()
          for object in self.mValue {
            let d = NSMutableDictionary ()
            object.saveIntoDictionary (d)
            d [kEntityKey] = nil // Remove entity key, not used in preferences
            dictionaryArray.append (d)
          }
          UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
        }
      }
    }
  }

  //····················································································································

  override var prop : EBSelection < [PackageRoot] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageRoot]) { self.mValue = inValue }

  //····················································································································

  override var propval : [PackageRoot] { return self.mValue }

  //····················································································································

  override var propset : Set <PackageRoot> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [PackageRoot]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PackageRoot) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PackageRoot) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
