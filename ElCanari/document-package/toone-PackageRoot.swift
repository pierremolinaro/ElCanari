//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PackageRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PackageRoot : ReadOnlyAbstractObjectProperty <PackageRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackageRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.selectedPageIndex_property.removeEBObserver (self.selectedPageIndex_property) // Stored property
    inOldValue?.selectedInspector_property.removeEBObserver (self.selectedInspector_property) // Stored property
    inOldValue?.comments_property.removeEBObserver (self.comments_property) // Stored property
    inOldValue?.program_property.removeEBObserver (self.program_property) // Stored property
    inOldValue?.horizontalFlip_property.removeEBObserver (self.horizontalFlip_property) // Stored property
    inOldValue?.verticalFlip_property.removeEBObserver (self.verticalFlip_property) // Stored property
    inOldValue?.gridStyle_property.removeEBObserver (self.gridStyle_property) // Stored property
    inOldValue?.gridStep_property.removeEBObserver (self.gridStep_property) // Stored property
    inOldValue?.gridStepUnit_property.removeEBObserver (self.gridStepUnit_property) // Stored property
    inOldValue?.gridDisplayFactor_property.removeEBObserver (self.gridDisplayFactor_property) // Stored property
    inOldValue?.zoom_property.removeEBObserver (self.zoom_property) // Stored property
    inOldValue?.mModelImageOpacity_property.removeEBObserver (self.mModelImageOpacity_property) // Stored property
    inOldValue?.mModelImagePageHorizontalFlip_property.removeEBObserver (self.mModelImagePageHorizontalFlip_property) // Stored property
    inOldValue?.mModelImagePageVerticalFlip_property.removeEBObserver (self.mModelImagePageVerticalFlip_property) // Stored property
    inOldValue?.mModelImagePageGridStyle_property.removeEBObserver (self.mModelImagePageGridStyle_property) // Stored property
    inOldValue?.mModelImagePageGridStep_property.removeEBObserver (self.mModelImagePageGridStep_property) // Stored property
    inOldValue?.mModelImagePageGridStepUnit_property.removeEBObserver (self.mModelImagePageGridStepUnit_property) // Stored property
    inOldValue?.mModelImagePageGridDisplayFactor_property.removeEBObserver (self.mModelImagePageGridDisplayFactor_property) // Stored property
    inOldValue?.mModelImagePageZoom_property.removeEBObserver (self.mModelImagePageZoom_property) // Stored property
    inOldValue?.mModelImagePageXPlacardUnit_property.removeEBObserver (self.mModelImagePageXPlacardUnit_property) // Stored property
    inOldValue?.mModelImagePageYPlacardUnit_property.removeEBObserver (self.mModelImagePageYPlacardUnit_property) // Stored property
    inOldValue?.mModelImageSecondPointXUnit_property.removeEBObserver (self.mModelImageSecondPointXUnit_property) // Stored property
    inOldValue?.mModelImagePSecondointYUnit_property.removeEBObserver (self.mModelImagePSecondointYUnit_property) // Stored property
    inOldValue?.mModelImageFirstPointXOnLock_property.removeEBObserver (self.mModelImageFirstPointXOnLock_property) // Stored property
    inOldValue?.mModelImageFirstPointYOnLock_property.removeEBObserver (self.mModelImageFirstPointYOnLock_property) // Stored property
    inOldValue?.mModelImagePointsDxOnLock_property.removeEBObserver (self.mModelImagePointsDxOnLock_property) // Stored property
    inOldValue?.mModelImagePointsDyOnLock_property.removeEBObserver (self.mModelImagePointsDyOnLock_property) // Stored property
    inOldValue?.mModelImageScale_property.removeEBObserver (self.mModelImageScale_property) // Stored property
    inOldValue?.mModelImageRotationInRadians_property.removeEBObserver (self.mModelImageRotationInRadians_property) // Stored property
    inOldValue?.mDimensionUnitFirstModelPointX_property.removeEBObserver (self.mDimensionUnitFirstModelPointX_property) // Stored property
    inOldValue?.mDimensionUnitFirstModelPointY_property.removeEBObserver (self.mDimensionUnitFirstModelPointY_property) // Stored property
    inOldValue?.mDimensionUnitSecondModelPointDx_property.removeEBObserver (self.mDimensionUnitSecondModelPointDx_property) // Stored property
    inOldValue?.mDimensionUnitSecondModelPointDy_property.removeEBObserver (self.mDimensionUnitSecondModelPointDy_property) // Stored property
    inOldValue?.mModelPointsCircleRadius_property.removeEBObserver (self.mModelPointsCircleRadius_property) // Stored property
    inOldValue?.mPointsAreLocked_property.removeEBObserver (self.mPointsAreLocked_property) // Stored property
    inOldValue?.knobSizeMultpliedByTen_property.removeEBObserver (self.knobSizeMultpliedByTen_property) // Stored property
    inOldValue?.padNumbering_property.removeEBObserver (self.padNumbering_property) // Stored property
    inOldValue?.counterClockNumberingStartAngle_property.removeEBObserver (self.counterClockNumberingStartAngle_property) // Stored property
    inOldValue?.xPlacardUnit_property.removeEBObserver (self.xPlacardUnit_property) // Stored property
    inOldValue?.yPlacardUnit_property.removeEBObserver (self.yPlacardUnit_property) // Stored property
    inOldValue?.mModelImageData_property.removeEBObserver (self.mModelImageData_property) // Stored property
    inOldValue?.freePadNumbering_property.removeEBObserver (self.freePadNumbering_property) // Transient property
    inOldValue?.counterClockNumbering_property.removeEBObserver (self.counterClockNumbering_property) // Transient property
    inOldValue?.gridStepMultipliedByDisplayFactor_property.removeEBObserver (self.gridStepMultipliedByDisplayFactor_property) // Transient property
    inOldValue?.secondPointX_property.removeEBObserver (self.secondPointX_property) // Transient property
    inOldValue?.secondPointY_property.removeEBObserver (self.secondPointY_property) // Transient property
    inOldValue?.lockImageView_property.removeEBObserver (self.lockImageView_property) // Transient property
    inOldValue?.padNumberDisplay_property.removeEBObserver (self.padNumberDisplay_property) // Transient property
    inOldValue?.backgroundImagePageBackgroundDisplay_property.removeEBObserver (self.backgroundImagePageBackgroundDisplay_property) // Transient property
    inOldValue?.modelImageSizeString_property.removeEBObserver (self.modelImageSizeString_property) // Transient property
    inOldValue?.hasModelImage_property.removeEBObserver (self.hasModelImage_property) // Transient property
    inOldValue?.issues_property.removeEBObserver (self.issues_property) // Transient property
    inOldValue?.noIssue_property.removeEBObserver (self.noIssue_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.selectedPageIndex_property.addEBObserver (self.selectedPageIndex_property) // Stored property
    self.mInternalValue?.selectedInspector_property.addEBObserver (self.selectedInspector_property) // Stored property
    self.mInternalValue?.comments_property.addEBObserver (self.comments_property) // Stored property
    self.mInternalValue?.program_property.addEBObserver (self.program_property) // Stored property
    self.mInternalValue?.horizontalFlip_property.addEBObserver (self.horizontalFlip_property) // Stored property
    self.mInternalValue?.verticalFlip_property.addEBObserver (self.verticalFlip_property) // Stored property
    self.mInternalValue?.gridStyle_property.addEBObserver (self.gridStyle_property) // Stored property
    self.mInternalValue?.gridStep_property.addEBObserver (self.gridStep_property) // Stored property
    self.mInternalValue?.gridStepUnit_property.addEBObserver (self.gridStepUnit_property) // Stored property
    self.mInternalValue?.gridDisplayFactor_property.addEBObserver (self.gridDisplayFactor_property) // Stored property
    self.mInternalValue?.zoom_property.addEBObserver (self.zoom_property) // Stored property
    self.mInternalValue?.mModelImageOpacity_property.addEBObserver (self.mModelImageOpacity_property) // Stored property
    self.mInternalValue?.mModelImagePageHorizontalFlip_property.addEBObserver (self.mModelImagePageHorizontalFlip_property) // Stored property
    self.mInternalValue?.mModelImagePageVerticalFlip_property.addEBObserver (self.mModelImagePageVerticalFlip_property) // Stored property
    self.mInternalValue?.mModelImagePageGridStyle_property.addEBObserver (self.mModelImagePageGridStyle_property) // Stored property
    self.mInternalValue?.mModelImagePageGridStep_property.addEBObserver (self.mModelImagePageGridStep_property) // Stored property
    self.mInternalValue?.mModelImagePageGridStepUnit_property.addEBObserver (self.mModelImagePageGridStepUnit_property) // Stored property
    self.mInternalValue?.mModelImagePageGridDisplayFactor_property.addEBObserver (self.mModelImagePageGridDisplayFactor_property) // Stored property
    self.mInternalValue?.mModelImagePageZoom_property.addEBObserver (self.mModelImagePageZoom_property) // Stored property
    self.mInternalValue?.mModelImagePageXPlacardUnit_property.addEBObserver (self.mModelImagePageXPlacardUnit_property) // Stored property
    self.mInternalValue?.mModelImagePageYPlacardUnit_property.addEBObserver (self.mModelImagePageYPlacardUnit_property) // Stored property
    self.mInternalValue?.mModelImageSecondPointXUnit_property.addEBObserver (self.mModelImageSecondPointXUnit_property) // Stored property
    self.mInternalValue?.mModelImagePSecondointYUnit_property.addEBObserver (self.mModelImagePSecondointYUnit_property) // Stored property
    self.mInternalValue?.mModelImageFirstPointXOnLock_property.addEBObserver (self.mModelImageFirstPointXOnLock_property) // Stored property
    self.mInternalValue?.mModelImageFirstPointYOnLock_property.addEBObserver (self.mModelImageFirstPointYOnLock_property) // Stored property
    self.mInternalValue?.mModelImagePointsDxOnLock_property.addEBObserver (self.mModelImagePointsDxOnLock_property) // Stored property
    self.mInternalValue?.mModelImagePointsDyOnLock_property.addEBObserver (self.mModelImagePointsDyOnLock_property) // Stored property
    self.mInternalValue?.mModelImageScale_property.addEBObserver (self.mModelImageScale_property) // Stored property
    self.mInternalValue?.mModelImageRotationInRadians_property.addEBObserver (self.mModelImageRotationInRadians_property) // Stored property
    self.mInternalValue?.mDimensionUnitFirstModelPointX_property.addEBObserver (self.mDimensionUnitFirstModelPointX_property) // Stored property
    self.mInternalValue?.mDimensionUnitFirstModelPointY_property.addEBObserver (self.mDimensionUnitFirstModelPointY_property) // Stored property
    self.mInternalValue?.mDimensionUnitSecondModelPointDx_property.addEBObserver (self.mDimensionUnitSecondModelPointDx_property) // Stored property
    self.mInternalValue?.mDimensionUnitSecondModelPointDy_property.addEBObserver (self.mDimensionUnitSecondModelPointDy_property) // Stored property
    self.mInternalValue?.mModelPointsCircleRadius_property.addEBObserver (self.mModelPointsCircleRadius_property) // Stored property
    self.mInternalValue?.mPointsAreLocked_property.addEBObserver (self.mPointsAreLocked_property) // Stored property
    self.mInternalValue?.knobSizeMultpliedByTen_property.addEBObserver (self.knobSizeMultpliedByTen_property) // Stored property
    self.mInternalValue?.padNumbering_property.addEBObserver (self.padNumbering_property) // Stored property
    self.mInternalValue?.counterClockNumberingStartAngle_property.addEBObserver (self.counterClockNumberingStartAngle_property) // Stored property
    self.mInternalValue?.xPlacardUnit_property.addEBObserver (self.xPlacardUnit_property) // Stored property
    self.mInternalValue?.yPlacardUnit_property.addEBObserver (self.yPlacardUnit_property) // Stored property
    self.mInternalValue?.mModelImageData_property.addEBObserver (self.mModelImageData_property) // Stored property
    self.mInternalValue?.freePadNumbering_property.addEBObserver (self.freePadNumbering_property) // Transient property
    self.mInternalValue?.counterClockNumbering_property.addEBObserver (self.counterClockNumbering_property) // Transient property
    self.mInternalValue?.gridStepMultipliedByDisplayFactor_property.addEBObserver (self.gridStepMultipliedByDisplayFactor_property) // Transient property
    self.mInternalValue?.secondPointX_property.addEBObserver (self.secondPointX_property) // Transient property
    self.mInternalValue?.secondPointY_property.addEBObserver (self.secondPointY_property) // Transient property
    self.mInternalValue?.lockImageView_property.addEBObserver (self.lockImageView_property) // Transient property
    self.mInternalValue?.padNumberDisplay_property.addEBObserver (self.padNumberDisplay_property) // Transient property
    self.mInternalValue?.backgroundImagePageBackgroundDisplay_property.addEBObserver (self.backgroundImagePageBackgroundDisplay_property) // Transient property
    self.mInternalValue?.modelImageSizeString_property.addEBObserver (self.modelImageSizeString_property) // Transient property
    self.mInternalValue?.hasModelImage_property.addEBObserver (self.hasModelImage_property) // Transient property
    self.mInternalValue?.issues_property.addEBObserver (self.issues_property) // Transient property
    self.mInternalValue?.noIssue_property.addEBObserver (self.noIssue_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.selectedPageIndex_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectedPageIndex_property.prop ?? .empty }
    self.selectedPageIndex_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.selectedPageIndex_property.setProp (inValue) }
    self.selectedInspector_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectedInspector_property.prop ?? .empty }
    self.selectedInspector_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.selectedInspector_property.setProp (inValue) }
    self.comments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.comments_property.prop ?? .empty }
    self.comments_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.comments_property.setProp (inValue) }
    self.program_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.program_property.prop ?? .empty }
    self.program_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.program_property.setProp (inValue) }
    self.horizontalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.horizontalFlip_property.prop ?? .empty }
    self.horizontalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.horizontalFlip_property.setProp (inValue) }
    self.verticalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.verticalFlip_property.prop ?? .empty }
    self.verticalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.verticalFlip_property.setProp (inValue) }
    self.gridStyle_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.gridStyle_property.prop ?? .empty }
    self.gridStyle_property.mWriteModelFunction = { [weak self] (inValue : GridStyle) in self?.mInternalValue?.gridStyle_property.setProp (inValue) }
    self.gridStep_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.gridStep_property.prop ?? .empty }
    self.gridStep_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.gridStep_property.setProp (inValue) }
    self.gridStepUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.gridStepUnit_property.prop ?? .empty }
    self.gridStepUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.gridStepUnit_property.setProp (inValue) }
    self.gridDisplayFactor_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.gridDisplayFactor_property.prop ?? .empty }
    self.gridDisplayFactor_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.gridDisplayFactor_property.setProp (inValue) }
    self.zoom_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.zoom_property.prop ?? .empty }
    self.zoom_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.zoom_property.setProp (inValue) }
    self.mModelImageOpacity_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImageOpacity_property.prop ?? .empty }
    self.mModelImageOpacity_property.mWriteModelFunction = { [weak self] (inValue : Double) in self?.mInternalValue?.mModelImageOpacity_property.setProp (inValue) }
    self.mModelImagePageHorizontalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImagePageHorizontalFlip_property.prop ?? .empty }
    self.mModelImagePageHorizontalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mModelImagePageHorizontalFlip_property.setProp (inValue) }
    self.mModelImagePageVerticalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImagePageVerticalFlip_property.prop ?? .empty }
    self.mModelImagePageVerticalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mModelImagePageVerticalFlip_property.setProp (inValue) }
    self.mModelImagePageGridStyle_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImagePageGridStyle_property.prop ?? .empty }
    self.mModelImagePageGridStyle_property.mWriteModelFunction = { [weak self] (inValue : GridStyle) in self?.mInternalValue?.mModelImagePageGridStyle_property.setProp (inValue) }
    self.mModelImagePageGridStep_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImagePageGridStep_property.prop ?? .empty }
    self.mModelImagePageGridStep_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelImagePageGridStep_property.setProp (inValue) }
    self.mModelImagePageGridStepUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImagePageGridStepUnit_property.prop ?? .empty }
    self.mModelImagePageGridStepUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelImagePageGridStepUnit_property.setProp (inValue) }
    self.mModelImagePageGridDisplayFactor_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImagePageGridDisplayFactor_property.prop ?? .empty }
    self.mModelImagePageGridDisplayFactor_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelImagePageGridDisplayFactor_property.setProp (inValue) }
    self.mModelImagePageZoom_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImagePageZoom_property.prop ?? .empty }
    self.mModelImagePageZoom_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelImagePageZoom_property.setProp (inValue) }
    self.mModelImagePageXPlacardUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImagePageXPlacardUnit_property.prop ?? .empty }
    self.mModelImagePageXPlacardUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelImagePageXPlacardUnit_property.setProp (inValue) }
    self.mModelImagePageYPlacardUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImagePageYPlacardUnit_property.prop ?? .empty }
    self.mModelImagePageYPlacardUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelImagePageYPlacardUnit_property.setProp (inValue) }
    self.mModelImageSecondPointXUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImageSecondPointXUnit_property.prop ?? .empty }
    self.mModelImageSecondPointXUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelImageSecondPointXUnit_property.setProp (inValue) }
    self.mModelImagePSecondointYUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImagePSecondointYUnit_property.prop ?? .empty }
    self.mModelImagePSecondointYUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelImagePSecondointYUnit_property.setProp (inValue) }
    self.mModelImageFirstPointXOnLock_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImageFirstPointXOnLock_property.prop ?? .empty }
    self.mModelImageFirstPointXOnLock_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelImageFirstPointXOnLock_property.setProp (inValue) }
    self.mModelImageFirstPointYOnLock_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImageFirstPointYOnLock_property.prop ?? .empty }
    self.mModelImageFirstPointYOnLock_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelImageFirstPointYOnLock_property.setProp (inValue) }
    self.mModelImagePointsDxOnLock_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImagePointsDxOnLock_property.prop ?? .empty }
    self.mModelImagePointsDxOnLock_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelImagePointsDxOnLock_property.setProp (inValue) }
    self.mModelImagePointsDyOnLock_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImagePointsDyOnLock_property.prop ?? .empty }
    self.mModelImagePointsDyOnLock_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelImagePointsDyOnLock_property.setProp (inValue) }
    self.mModelImageScale_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImageScale_property.prop ?? .empty }
    self.mModelImageScale_property.mWriteModelFunction = { [weak self] (inValue : Double) in self?.mInternalValue?.mModelImageScale_property.setProp (inValue) }
    self.mModelImageRotationInRadians_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImageRotationInRadians_property.prop ?? .empty }
    self.mModelImageRotationInRadians_property.mWriteModelFunction = { [weak self] (inValue : Double) in self?.mInternalValue?.mModelImageRotationInRadians_property.setProp (inValue) }
    self.mDimensionUnitFirstModelPointX_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDimensionUnitFirstModelPointX_property.prop ?? .empty }
    self.mDimensionUnitFirstModelPointX_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mDimensionUnitFirstModelPointX_property.setProp (inValue) }
    self.mDimensionUnitFirstModelPointY_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDimensionUnitFirstModelPointY_property.prop ?? .empty }
    self.mDimensionUnitFirstModelPointY_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mDimensionUnitFirstModelPointY_property.setProp (inValue) }
    self.mDimensionUnitSecondModelPointDx_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDimensionUnitSecondModelPointDx_property.prop ?? .empty }
    self.mDimensionUnitSecondModelPointDx_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mDimensionUnitSecondModelPointDx_property.setProp (inValue) }
    self.mDimensionUnitSecondModelPointDy_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDimensionUnitSecondModelPointDy_property.prop ?? .empty }
    self.mDimensionUnitSecondModelPointDy_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mDimensionUnitSecondModelPointDy_property.setProp (inValue) }
    self.mModelPointsCircleRadius_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelPointsCircleRadius_property.prop ?? .empty }
    self.mModelPointsCircleRadius_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mModelPointsCircleRadius_property.setProp (inValue) }
    self.mPointsAreLocked_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mPointsAreLocked_property.prop ?? .empty }
    self.mPointsAreLocked_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mPointsAreLocked_property.setProp (inValue) }
    self.knobSizeMultpliedByTen_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.knobSizeMultpliedByTen_property.prop ?? .empty }
    self.knobSizeMultpliedByTen_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.knobSizeMultpliedByTen_property.setProp (inValue) }
    self.padNumbering_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.padNumbering_property.prop ?? .empty }
    self.padNumbering_property.mWriteModelFunction = { [weak self] (inValue : PadNumbering) in self?.mInternalValue?.padNumbering_property.setProp (inValue) }
    self.counterClockNumberingStartAngle_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.counterClockNumberingStartAngle_property.prop ?? .empty }
    self.counterClockNumberingStartAngle_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.counterClockNumberingStartAngle_property.setProp (inValue) }
    self.xPlacardUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.xPlacardUnit_property.prop ?? .empty }
    self.xPlacardUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.xPlacardUnit_property.setProp (inValue) }
    self.yPlacardUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.yPlacardUnit_property.prop ?? .empty }
    self.yPlacardUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.yPlacardUnit_property.setProp (inValue) }
    self.mModelImageData_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mModelImageData_property.prop ?? .empty }
    self.mModelImageData_property.mWriteModelFunction = { [weak self] (inValue : Data) in self?.mInternalValue?.mModelImageData_property.setProp (inValue) }
    self.freePadNumbering_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.freePadNumbering_property.prop ?? .empty }
    self.counterClockNumbering_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.counterClockNumbering_property.prop ?? .empty }
    self.gridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.gridStepMultipliedByDisplayFactor_property.prop ?? .empty }
    self.secondPointX_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.secondPointX_property.prop ?? .empty }
    self.secondPointY_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.secondPointY_property.prop ?? .empty }
    self.lockImageView_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.lockImageView_property.prop ?? .empty }
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.padNumberDisplay_property.prop ?? .empty }
    self.backgroundImagePageBackgroundDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backgroundImagePageBackgroundDisplay_property.prop ?? .empty }
    self.modelImageSizeString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.modelImageSizeString_property.prop ?? .empty }
    self.hasModelImage_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.hasModelImage_property.prop ?? .empty }
    self.issues_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.issues_property.prop ?? .empty }
    self.noIssue_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.noIssue_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'selectedPageIndex' stored property
  //····················································································································

  let selectedPageIndex_property = EBPropertyProxy_Int ()

  var selectedPageIndex_property_selection : EBSelection <Int> {
    switch (self.selectedPageIndex_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'selectedInspector' stored property
  //····················································································································

  let selectedInspector_property = EBPropertyProxy_Int ()

  var selectedInspector_property_selection : EBSelection <Int> {
    switch (self.selectedInspector_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'comments' stored property
  //····················································································································

  let comments_property = EBPropertyProxy_String ()

  var comments_property_selection : EBSelection <String> {
    switch (self.comments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'program' stored property
  //····················································································································

  let program_property = EBPropertyProxy_String ()

  var program_property_selection : EBSelection <String> {
    switch (self.program_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'horizontalFlip' stored property
  //····················································································································

  let horizontalFlip_property = EBPropertyProxy_Bool ()

  var horizontalFlip_property_selection : EBSelection <Bool> {
    switch (self.horizontalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'verticalFlip' stored property
  //····················································································································

  let verticalFlip_property = EBPropertyProxy_Bool ()

  var verticalFlip_property_selection : EBSelection <Bool> {
    switch (self.verticalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'gridStyle' stored property
  //····················································································································

  let gridStyle_property = EBPropertyProxy_GridStyle ()

  var gridStyle_property_selection : EBSelection <GridStyle> {
    switch (self.gridStyle_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'gridStep' stored property
  //····················································································································

  let gridStep_property = EBPropertyProxy_Int ()

  var gridStep_property_selection : EBSelection <Int> {
    switch (self.gridStep_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'gridStepUnit' stored property
  //····················································································································

  let gridStepUnit_property = EBPropertyProxy_Int ()

  var gridStepUnit_property_selection : EBSelection <Int> {
    switch (self.gridStepUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'gridDisplayFactor' stored property
  //····················································································································

  let gridDisplayFactor_property = EBPropertyProxy_Int ()

  var gridDisplayFactor_property_selection : EBSelection <Int> {
    switch (self.gridDisplayFactor_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'zoom' stored property
  //····················································································································

  let zoom_property = EBPropertyProxy_Int ()

  var zoom_property_selection : EBSelection <Int> {
    switch (self.zoom_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImageOpacity' stored property
  //····················································································································

  let mModelImageOpacity_property = EBPropertyProxy_Double ()

  var mModelImageOpacity_property_selection : EBSelection <Double> {
    switch (self.mModelImageOpacity_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImagePageHorizontalFlip' stored property
  //····················································································································

  let mModelImagePageHorizontalFlip_property = EBPropertyProxy_Bool ()

  var mModelImagePageHorizontalFlip_property_selection : EBSelection <Bool> {
    switch (self.mModelImagePageHorizontalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImagePageVerticalFlip' stored property
  //····················································································································

  let mModelImagePageVerticalFlip_property = EBPropertyProxy_Bool ()

  var mModelImagePageVerticalFlip_property_selection : EBSelection <Bool> {
    switch (self.mModelImagePageVerticalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImagePageGridStyle' stored property
  //····················································································································

  let mModelImagePageGridStyle_property = EBPropertyProxy_GridStyle ()

  var mModelImagePageGridStyle_property_selection : EBSelection <GridStyle> {
    switch (self.mModelImagePageGridStyle_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImagePageGridStep' stored property
  //····················································································································

  let mModelImagePageGridStep_property = EBPropertyProxy_Int ()

  var mModelImagePageGridStep_property_selection : EBSelection <Int> {
    switch (self.mModelImagePageGridStep_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImagePageGridStepUnit' stored property
  //····················································································································

  let mModelImagePageGridStepUnit_property = EBPropertyProxy_Int ()

  var mModelImagePageGridStepUnit_property_selection : EBSelection <Int> {
    switch (self.mModelImagePageGridStepUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImagePageGridDisplayFactor' stored property
  //····················································································································

  let mModelImagePageGridDisplayFactor_property = EBPropertyProxy_Int ()

  var mModelImagePageGridDisplayFactor_property_selection : EBSelection <Int> {
    switch (self.mModelImagePageGridDisplayFactor_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImagePageZoom' stored property
  //····················································································································

  let mModelImagePageZoom_property = EBPropertyProxy_Int ()

  var mModelImagePageZoom_property_selection : EBSelection <Int> {
    switch (self.mModelImagePageZoom_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImagePageXPlacardUnit' stored property
  //····················································································································

  let mModelImagePageXPlacardUnit_property = EBPropertyProxy_Int ()

  var mModelImagePageXPlacardUnit_property_selection : EBSelection <Int> {
    switch (self.mModelImagePageXPlacardUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImagePageYPlacardUnit' stored property
  //····················································································································

  let mModelImagePageYPlacardUnit_property = EBPropertyProxy_Int ()

  var mModelImagePageYPlacardUnit_property_selection : EBSelection <Int> {
    switch (self.mModelImagePageYPlacardUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImageSecondPointXUnit' stored property
  //····················································································································

  let mModelImageSecondPointXUnit_property = EBPropertyProxy_Int ()

  var mModelImageSecondPointXUnit_property_selection : EBSelection <Int> {
    switch (self.mModelImageSecondPointXUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImagePSecondointYUnit' stored property
  //····················································································································

  let mModelImagePSecondointYUnit_property = EBPropertyProxy_Int ()

  var mModelImagePSecondointYUnit_property_selection : EBSelection <Int> {
    switch (self.mModelImagePSecondointYUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImageFirstPointXOnLock' stored property
  //····················································································································

  let mModelImageFirstPointXOnLock_property = EBPropertyProxy_Int ()

  var mModelImageFirstPointXOnLock_property_selection : EBSelection <Int> {
    switch (self.mModelImageFirstPointXOnLock_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImageFirstPointYOnLock' stored property
  //····················································································································

  let mModelImageFirstPointYOnLock_property = EBPropertyProxy_Int ()

  var mModelImageFirstPointYOnLock_property_selection : EBSelection <Int> {
    switch (self.mModelImageFirstPointYOnLock_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImagePointsDxOnLock' stored property
  //····················································································································

  let mModelImagePointsDxOnLock_property = EBPropertyProxy_Int ()

  var mModelImagePointsDxOnLock_property_selection : EBSelection <Int> {
    switch (self.mModelImagePointsDxOnLock_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImagePointsDyOnLock' stored property
  //····················································································································

  let mModelImagePointsDyOnLock_property = EBPropertyProxy_Int ()

  var mModelImagePointsDyOnLock_property_selection : EBSelection <Int> {
    switch (self.mModelImagePointsDyOnLock_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImageScale' stored property
  //····················································································································

  let mModelImageScale_property = EBPropertyProxy_Double ()

  var mModelImageScale_property_selection : EBSelection <Double> {
    switch (self.mModelImageScale_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImageRotationInRadians' stored property
  //····················································································································

  let mModelImageRotationInRadians_property = EBPropertyProxy_Double ()

  var mModelImageRotationInRadians_property_selection : EBSelection <Double> {
    switch (self.mModelImageRotationInRadians_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mDimensionUnitFirstModelPointX' stored property
  //····················································································································

  let mDimensionUnitFirstModelPointX_property = EBPropertyProxy_Int ()

  var mDimensionUnitFirstModelPointX_property_selection : EBSelection <Int> {
    switch (self.mDimensionUnitFirstModelPointX_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mDimensionUnitFirstModelPointY' stored property
  //····················································································································

  let mDimensionUnitFirstModelPointY_property = EBPropertyProxy_Int ()

  var mDimensionUnitFirstModelPointY_property_selection : EBSelection <Int> {
    switch (self.mDimensionUnitFirstModelPointY_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mDimensionUnitSecondModelPointDx' stored property
  //····················································································································

  let mDimensionUnitSecondModelPointDx_property = EBPropertyProxy_Int ()

  var mDimensionUnitSecondModelPointDx_property_selection : EBSelection <Int> {
    switch (self.mDimensionUnitSecondModelPointDx_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mDimensionUnitSecondModelPointDy' stored property
  //····················································································································

  let mDimensionUnitSecondModelPointDy_property = EBPropertyProxy_Int ()

  var mDimensionUnitSecondModelPointDy_property_selection : EBSelection <Int> {
    switch (self.mDimensionUnitSecondModelPointDy_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelPointsCircleRadius' stored property
  //····················································································································

  let mModelPointsCircleRadius_property = EBPropertyProxy_Int ()

  var mModelPointsCircleRadius_property_selection : EBSelection <Int> {
    switch (self.mModelPointsCircleRadius_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mPointsAreLocked' stored property
  //····················································································································

  let mPointsAreLocked_property = EBPropertyProxy_Bool ()

  var mPointsAreLocked_property_selection : EBSelection <Bool> {
    switch (self.mPointsAreLocked_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'knobSizeMultpliedByTen' stored property
  //····················································································································

  let knobSizeMultpliedByTen_property = EBPropertyProxy_Int ()

  var knobSizeMultpliedByTen_property_selection : EBSelection <Int> {
    switch (self.knobSizeMultpliedByTen_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'padNumbering' stored property
  //····················································································································

  let padNumbering_property = EBPropertyProxy_PadNumbering ()

  var padNumbering_property_selection : EBSelection <PadNumbering> {
    switch (self.padNumbering_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'counterClockNumberingStartAngle' stored property
  //····················································································································

  let counterClockNumberingStartAngle_property = EBPropertyProxy_Int ()

  var counterClockNumberingStartAngle_property_selection : EBSelection <Int> {
    switch (self.counterClockNumberingStartAngle_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'xPlacardUnit' stored property
  //····················································································································

  let xPlacardUnit_property = EBPropertyProxy_Int ()

  var xPlacardUnit_property_selection : EBSelection <Int> {
    switch (self.xPlacardUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'yPlacardUnit' stored property
  //····················································································································

  let yPlacardUnit_property = EBPropertyProxy_Int ()

  var yPlacardUnit_property_selection : EBSelection <Int> {
    switch (self.yPlacardUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mModelImageData' stored property
  //····················································································································

  let mModelImageData_property = EBPropertyProxy_Data ()

  var mModelImageData_property_selection : EBSelection <Data> {
    switch (self.mModelImageData_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observers of 'mModelImageFirstPointX' proxy property
  //····················································································································

  private var mObserversOf_mModelImageFirstPointX = EBWeakEventSet ()

  //····················································································································

  var mModelImageFirstPointX_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.mModelImageFirstPointX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageFirstPointX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointX.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageFirstPointX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageFirstPointX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointX.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageFirstPointX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageFirstPointX_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageFirstPointX.apply { (_ observer : EBEvent) in
        managedObject.mModelImageFirstPointX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageFirstPointX_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageFirstPointX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageFirstPointX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageFirstPointY' proxy property
  //····················································································································

  private var mObserversOf_mModelImageFirstPointY = EBWeakEventSet ()

  //····················································································································

  var mModelImageFirstPointY_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.mModelImageFirstPointY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageFirstPointY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointY.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageFirstPointY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageFirstPointY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointY.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageFirstPointY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageFirstPointY_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageFirstPointY.apply { (_ observer : EBEvent) in
        managedObject.mModelImageFirstPointY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageFirstPointY_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageFirstPointY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageFirstPointY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageSecondPointDx' proxy property
  //····················································································································

  private var mObserversOf_mModelImageSecondPointDx = EBWeakEventSet ()

  //····················································································································

  var mModelImageSecondPointDx_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.mModelImageSecondPointDx_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageSecondPointDx (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointDx.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageSecondPointDx_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageSecondPointDx (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointDx.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageSecondPointDx_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageSecondPointDx_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageSecondPointDx.apply { (_ observer : EBEvent) in
        managedObject.mModelImageSecondPointDx_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageSecondPointDx_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageSecondPointDx.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageSecondPointDx_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageSecondPointDy' proxy property
  //····················································································································

  private var mObserversOf_mModelImageSecondPointDy = EBWeakEventSet ()

  //····················································································································

  var mModelImageSecondPointDy_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.mModelImageSecondPointDy_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageSecondPointDy (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointDy.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageSecondPointDy_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageSecondPointDy (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointDy.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageSecondPointDy_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageSecondPointDy_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageSecondPointDy.apply { (_ observer : EBEvent) in
        managedObject.mModelImageSecondPointDy_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageSecondPointDy_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageSecondPointDy.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageSecondPointDy_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observer of 'freePadNumbering' transient property
  //····················································································································

  let freePadNumbering_property = EBTransientProperty_Bool ()

  var freePadNumbering_property_selection : EBSelection <Bool> {
    switch (self.freePadNumbering_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'counterClockNumbering' transient property
  //····················································································································

  let counterClockNumbering_property = EBTransientProperty_Bool ()

  var counterClockNumbering_property_selection : EBSelection <Bool> {
    switch (self.counterClockNumbering_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'gridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  let gridStepMultipliedByDisplayFactor_property = EBTransientProperty_Int ()

  var gridStepMultipliedByDisplayFactor_property_selection : EBSelection <Int> {
    switch (self.gridStepMultipliedByDisplayFactor_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'secondPointX' transient property
  //····················································································································

  let secondPointX_property = EBTransientProperty_Int ()

  var secondPointX_property_selection : EBSelection <Int> {
    switch (self.secondPointX_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'secondPointY' transient property
  //····················································································································

  let secondPointY_property = EBTransientProperty_Int ()

  var secondPointY_property_selection : EBSelection <Int> {
    switch (self.secondPointY_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'lockImageView' transient property
  //····················································································································

  let lockImageView_property = EBTransientProperty_NSImage ()

  var lockImageView_property_selection : EBSelection <NSImage> {
    switch (self.lockImageView_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'padNumberDisplay' transient property
  //····················································································································

  let padNumberDisplay_property = EBTransientProperty_EBShape ()

  var padNumberDisplay_property_selection : EBSelection <EBShape> {
    switch (self.padNumberDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backgroundImagePageBackgroundDisplay' transient property
  //····················································································································

  let backgroundImagePageBackgroundDisplay_property = EBTransientProperty_EBShape ()

  var backgroundImagePageBackgroundDisplay_property_selection : EBSelection <EBShape> {
    switch (self.backgroundImagePageBackgroundDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'modelImageSizeString' transient property
  //····················································································································

  let modelImageSizeString_property = EBTransientProperty_String ()

  var modelImageSizeString_property_selection : EBSelection <String> {
    switch (self.modelImageSizeString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'hasModelImage' transient property
  //····················································································································

  let hasModelImage_property = EBTransientProperty_Bool ()

  var hasModelImage_property_selection : EBSelection <Bool> {
    switch (self.hasModelImage_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'issues' transient property
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    switch (self.issues_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'noIssue' transient property
  //····················································································································

  let noIssue_property = EBTransientProperty_Bool ()

  var noIssue_property_selection : EBSelection <Bool> {
    switch (self.noIssue_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observable toMany property: packageObjects
  //····················································································································

  private var mObserversOf_packageObjects = EBWeakEventSet ()

  //····················································································································

  var packageObjects_property_selection : EBSelection <[PackageObject]> {
    if let model = self.propval {
      switch (model.packageObjects_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_packageObjects (_ inObserver : EBEvent) {
    self.mObserversOf_packageObjects.insert (inObserver)
    if let object = self.propval {
      object.packageObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageObjects (_ inObserver : EBEvent) {
    self.mObserversOf_packageObjects.remove (inObserver)
    if let object = self.propval {
      object.packageObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mModelImageObjects
  //····················································································································

  private var mObserversOf_mModelImageObjects = EBWeakEventSet ()

  //····················································································································

  var mModelImageObjects_property_selection : EBSelection <[PackageModelImageDoublePoint]> {
    if let model = self.propval {
      switch (model.mModelImageObjects_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageObjects (_ inObserver : EBEvent) {
    self.mObserversOf_mModelImageObjects.insert (inObserver)
    if let object = self.propval {
      object.mModelImageObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageObjects (_ inObserver : EBEvent) {
    self.mObserversOf_mModelImageObjects.remove (inObserver)
    if let object = self.propval {
      object.mModelImageObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packagePads
  //····················································································································

  private var mObserversOf_packagePads = EBWeakEventSet ()

  //····················································································································

  var packagePads_property_selection : EBSelection <[PackagePad]> {
    if let model = self.propval {
      switch (model.packagePads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_packagePads (_ inObserver : EBEvent) {
    self.mObserversOf_packagePads.insert (inObserver)
    if let object = self.propval {
      object.packagePads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packagePads (_ inObserver : EBEvent) {
    self.mObserversOf_packagePads.remove (inObserver)
    if let object = self.propval {
      object.packagePads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packageSlavePads
  //····················································································································

  private var mObserversOf_packageSlavePads = EBWeakEventSet ()

  //····················································································································

  var packageSlavePads_property_selection : EBSelection <[PackageSlavePad]> {
    if let model = self.propval {
      switch (model.packageSlavePads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_packageSlavePads (_ inObserver : EBEvent) {
    self.mObserversOf_packageSlavePads.insert (inObserver)
    if let object = self.propval {
      object.packageSlavePads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageSlavePads (_ inObserver : EBEvent) {
    self.mObserversOf_packageSlavePads.remove (inObserver)
    if let object = self.propval {
      object.packageSlavePads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packageZones
  //····················································································································

  private var mObserversOf_packageZones = EBWeakEventSet ()

  //····················································································································

  var packageZones_property_selection : EBSelection <[PackageZone]> {
    if let model = self.propval {
      switch (model.packageZones_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_packageZones (_ inObserver : EBEvent) {
    self.mObserversOf_packageZones.insert (inObserver)
    if let object = self.propval {
      object.packageZones_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageZones (_ inObserver : EBEvent) {
    self.mObserversOf_packageZones.remove (inObserver)
    if let object = self.propval {
      object.packageZones_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject PackageRoot
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_PackageRoot : ReadOnlyObject_PackageRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackageRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackageRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackageRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackageRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackageRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PackageRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PackageRoot : ReadOnlyObject_PackageRoot {

  //····················································································································
 
  func setProp (_ inValue : PackageRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PackageRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PackageRoot : ReadWriteObject_PackageRoot {

  //····················································································································

  private var mModel : ReadWriteObject_PackageRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackageRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackageRoot?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackageRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < PackageRoot? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackageRoot? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PackageRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PackageRoot : ReadWriteObject_PackageRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackageRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackageRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackageRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

