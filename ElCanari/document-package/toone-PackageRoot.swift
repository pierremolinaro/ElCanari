//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PackageRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PackageRoot : ReadOnlyAbstractObjectProperty <PackageRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackageRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.selectedPageIndex_property.removeEBObserversFrom (&self.mObserversOf_selectedPageIndex) // Stored property
    inOldValue?.selectedInspector_property.removeEBObserversFrom (&self.mObserversOf_selectedInspector) // Stored property
    inOldValue?.comments_property.removeEBObserversFrom (&self.mObserversOf_comments) // Stored property
    inOldValue?.program_property.removeEBObserversFrom (&self.mObserversOf_program) // Stored property
    inOldValue?.horizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_horizontalFlip) // Stored property
    inOldValue?.verticalFlip_property.removeEBObserversFrom (&self.mObserversOf_verticalFlip) // Stored property
    inOldValue?.gridStyle_property.removeEBObserversFrom (&self.mObserversOf_gridStyle) // Stored property
    inOldValue?.gridStep_property.removeEBObserversFrom (&self.mObserversOf_gridStep) // Stored property
    inOldValue?.gridStepUnit_property.removeEBObserversFrom (&self.mObserversOf_gridStepUnit) // Stored property
    inOldValue?.gridDisplayFactor_property.removeEBObserversFrom (&self.mObserversOf_gridDisplayFactor) // Stored property
    inOldValue?.zoom_property.removeEBObserversFrom (&self.mObserversOf_zoom) // Stored property
    inOldValue?.mModelImageOpacity_property.removeEBObserversFrom (&self.mObserversOf_mModelImageOpacity) // Stored property
    inOldValue?.mModelImagePageHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mModelImagePageHorizontalFlip) // Stored property
    inOldValue?.mModelImagePageVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mModelImagePageVerticalFlip) // Stored property
    inOldValue?.mModelImagePageGridStyle_property.removeEBObserversFrom (&self.mObserversOf_mModelImagePageGridStyle) // Stored property
    inOldValue?.mModelImagePageGridStep_property.removeEBObserversFrom (&self.mObserversOf_mModelImagePageGridStep) // Stored property
    inOldValue?.mModelImagePageGridStepUnit_property.removeEBObserversFrom (&self.mObserversOf_mModelImagePageGridStepUnit) // Stored property
    inOldValue?.mModelImagePageGridDisplayFactor_property.removeEBObserversFrom (&self.mObserversOf_mModelImagePageGridDisplayFactor) // Stored property
    inOldValue?.mModelImagePageZoom_property.removeEBObserversFrom (&self.mObserversOf_mModelImagePageZoom) // Stored property
    inOldValue?.mModelImagePageXPlacardUnit_property.removeEBObserversFrom (&self.mObserversOf_mModelImagePageXPlacardUnit) // Stored property
    inOldValue?.mModelImagePageYPlacardUnit_property.removeEBObserversFrom (&self.mObserversOf_mModelImagePageYPlacardUnit) // Stored property
    inOldValue?.mModelImageSecondPointXUnit_property.removeEBObserversFrom (&self.mObserversOf_mModelImageSecondPointXUnit) // Stored property
    inOldValue?.mModelImagePSecondointYUnit_property.removeEBObserversFrom (&self.mObserversOf_mModelImagePSecondointYUnit) // Stored property
    inOldValue?.mModelImageFirstPointXOnLock_property.removeEBObserversFrom (&self.mObserversOf_mModelImageFirstPointXOnLock) // Stored property
    inOldValue?.mModelImageFirstPointYOnLock_property.removeEBObserversFrom (&self.mObserversOf_mModelImageFirstPointYOnLock) // Stored property
    inOldValue?.mModelImagePointsDxOnLock_property.removeEBObserversFrom (&self.mObserversOf_mModelImagePointsDxOnLock) // Stored property
    inOldValue?.mModelImagePointsDyOnLock_property.removeEBObserversFrom (&self.mObserversOf_mModelImagePointsDyOnLock) // Stored property
    inOldValue?.mModelImageScale_property.removeEBObserversFrom (&self.mObserversOf_mModelImageScale) // Stored property
    inOldValue?.mModelImageRotationInRadians_property.removeEBObserversFrom (&self.mObserversOf_mModelImageRotationInRadians) // Stored property
    inOldValue?.mDimensionUnitFirstModelPointX_property.removeEBObserversFrom (&self.mObserversOf_mDimensionUnitFirstModelPointX) // Stored property
    inOldValue?.mDimensionUnitFirstModelPointY_property.removeEBObserversFrom (&self.mObserversOf_mDimensionUnitFirstModelPointY) // Stored property
    inOldValue?.mDimensionUnitSecondModelPointDx_property.removeEBObserversFrom (&self.mObserversOf_mDimensionUnitSecondModelPointDx) // Stored property
    inOldValue?.mDimensionUnitSecondModelPointDy_property.removeEBObserversFrom (&self.mObserversOf_mDimensionUnitSecondModelPointDy) // Stored property
    inOldValue?.mModelPointsCircleRadius_property.removeEBObserversFrom (&self.mObserversOf_mModelPointsCircleRadius) // Stored property
    inOldValue?.mPointsAreLocked_property.removeEBObserversFrom (&self.mObserversOf_mPointsAreLocked) // Stored property
    inOldValue?.knobSizeMultpliedByTen_property.removeEBObserversFrom (&self.mObserversOf_knobSizeMultpliedByTen) // Stored property
    inOldValue?.padNumbering_property.removeEBObserversFrom (&self.mObserversOf_padNumbering) // Stored property
    inOldValue?.counterClockNumberingStartAngle_property.removeEBObserversFrom (&self.mObserversOf_counterClockNumberingStartAngle) // Stored property
    inOldValue?.xPlacardUnit_property.removeEBObserversFrom (&self.mObserversOf_xPlacardUnit) // Stored property
    inOldValue?.yPlacardUnit_property.removeEBObserversFrom (&self.mObserversOf_yPlacardUnit) // Stored property
    inOldValue?.mModelImageData_property.removeEBObserversFrom (&self.mObserversOf_mModelImageData) // Stored property
    inOldValue?.freePadNumbering_property.removeEBObserversFrom (&self.mObserversOf_freePadNumbering) // Transient property
    inOldValue?.counterClockNumbering_property.removeEBObserversFrom (&self.mObserversOf_counterClockNumbering) // Transient property
    inOldValue?.gridStepMultipliedByDisplayFactor_property.removeEBObserversFrom (&self.mObserversOf_gridStepMultipliedByDisplayFactor) // Transient property
    inOldValue?.secondPointX_property.removeEBObserversFrom (&self.mObserversOf_secondPointX) // Transient property
    inOldValue?.secondPointY_property.removeEBObserversFrom (&self.mObserversOf_secondPointY) // Transient property
    inOldValue?.lockImageView_property.removeEBObserversFrom (&self.mObserversOf_lockImageView) // Transient property
    inOldValue?.padNumberDisplay_property.removeEBObserversFrom (&self.mObserversOf_padNumberDisplay) // Transient property
    inOldValue?.backgroundImagePageBackgroundDisplay_property.removeEBObserversFrom (&self.mObserversOf_backgroundImagePageBackgroundDisplay) // Transient property
    inOldValue?.modelImageSizeString_property.removeEBObserversFrom (&self.mObserversOf_modelImageSizeString) // Transient property
    inOldValue?.hasModelImage_property.removeEBObserversFrom (&self.mObserversOf_hasModelImage) // Transient property
    inOldValue?.masterPadObjectIndexArray_property.removeEBObserversFrom (&self.mObserversOf_masterPadObjectIndexArray) // Transient property
    inOldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
    inOldValue?.noIssue_property.removeEBObserversFrom (&self.mObserversOf_noIssue) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.selectedPageIndex_property.addEBObserversFrom (&self.mObserversOf_selectedPageIndex) // Stored property
    self.mInternalValue?.selectedInspector_property.addEBObserversFrom (&self.mObserversOf_selectedInspector) // Stored property
    self.mInternalValue?.comments_property.addEBObserversFrom (&self.mObserversOf_comments) // Stored property
    self.mInternalValue?.program_property.addEBObserversFrom (&self.mObserversOf_program) // Stored property
    self.mInternalValue?.horizontalFlip_property.addEBObserversFrom (&self.mObserversOf_horizontalFlip) // Stored property
    self.mInternalValue?.verticalFlip_property.addEBObserversFrom (&self.mObserversOf_verticalFlip) // Stored property
    self.mInternalValue?.gridStyle_property.addEBObserversFrom (&self.mObserversOf_gridStyle) // Stored property
    self.mInternalValue?.gridStep_property.addEBObserversFrom (&self.mObserversOf_gridStep) // Stored property
    self.mInternalValue?.gridStepUnit_property.addEBObserversFrom (&self.mObserversOf_gridStepUnit) // Stored property
    self.mInternalValue?.gridDisplayFactor_property.addEBObserversFrom (&self.mObserversOf_gridDisplayFactor) // Stored property
    self.mInternalValue?.zoom_property.addEBObserversFrom (&self.mObserversOf_zoom) // Stored property
    self.mInternalValue?.mModelImageOpacity_property.addEBObserversFrom (&self.mObserversOf_mModelImageOpacity) // Stored property
    self.mInternalValue?.mModelImagePageHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mModelImagePageHorizontalFlip) // Stored property
    self.mInternalValue?.mModelImagePageVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mModelImagePageVerticalFlip) // Stored property
    self.mInternalValue?.mModelImagePageGridStyle_property.addEBObserversFrom (&self.mObserversOf_mModelImagePageGridStyle) // Stored property
    self.mInternalValue?.mModelImagePageGridStep_property.addEBObserversFrom (&self.mObserversOf_mModelImagePageGridStep) // Stored property
    self.mInternalValue?.mModelImagePageGridStepUnit_property.addEBObserversFrom (&self.mObserversOf_mModelImagePageGridStepUnit) // Stored property
    self.mInternalValue?.mModelImagePageGridDisplayFactor_property.addEBObserversFrom (&self.mObserversOf_mModelImagePageGridDisplayFactor) // Stored property
    self.mInternalValue?.mModelImagePageZoom_property.addEBObserversFrom (&self.mObserversOf_mModelImagePageZoom) // Stored property
    self.mInternalValue?.mModelImagePageXPlacardUnit_property.addEBObserversFrom (&self.mObserversOf_mModelImagePageXPlacardUnit) // Stored property
    self.mInternalValue?.mModelImagePageYPlacardUnit_property.addEBObserversFrom (&self.mObserversOf_mModelImagePageYPlacardUnit) // Stored property
    self.mInternalValue?.mModelImageSecondPointXUnit_property.addEBObserversFrom (&self.mObserversOf_mModelImageSecondPointXUnit) // Stored property
    self.mInternalValue?.mModelImagePSecondointYUnit_property.addEBObserversFrom (&self.mObserversOf_mModelImagePSecondointYUnit) // Stored property
    self.mInternalValue?.mModelImageFirstPointXOnLock_property.addEBObserversFrom (&self.mObserversOf_mModelImageFirstPointXOnLock) // Stored property
    self.mInternalValue?.mModelImageFirstPointYOnLock_property.addEBObserversFrom (&self.mObserversOf_mModelImageFirstPointYOnLock) // Stored property
    self.mInternalValue?.mModelImagePointsDxOnLock_property.addEBObserversFrom (&self.mObserversOf_mModelImagePointsDxOnLock) // Stored property
    self.mInternalValue?.mModelImagePointsDyOnLock_property.addEBObserversFrom (&self.mObserversOf_mModelImagePointsDyOnLock) // Stored property
    self.mInternalValue?.mModelImageScale_property.addEBObserversFrom (&self.mObserversOf_mModelImageScale) // Stored property
    self.mInternalValue?.mModelImageRotationInRadians_property.addEBObserversFrom (&self.mObserversOf_mModelImageRotationInRadians) // Stored property
    self.mInternalValue?.mDimensionUnitFirstModelPointX_property.addEBObserversFrom (&self.mObserversOf_mDimensionUnitFirstModelPointX) // Stored property
    self.mInternalValue?.mDimensionUnitFirstModelPointY_property.addEBObserversFrom (&self.mObserversOf_mDimensionUnitFirstModelPointY) // Stored property
    self.mInternalValue?.mDimensionUnitSecondModelPointDx_property.addEBObserversFrom (&self.mObserversOf_mDimensionUnitSecondModelPointDx) // Stored property
    self.mInternalValue?.mDimensionUnitSecondModelPointDy_property.addEBObserversFrom (&self.mObserversOf_mDimensionUnitSecondModelPointDy) // Stored property
    self.mInternalValue?.mModelPointsCircleRadius_property.addEBObserversFrom (&self.mObserversOf_mModelPointsCircleRadius) // Stored property
    self.mInternalValue?.mPointsAreLocked_property.addEBObserversFrom (&self.mObserversOf_mPointsAreLocked) // Stored property
    self.mInternalValue?.knobSizeMultpliedByTen_property.addEBObserversFrom (&self.mObserversOf_knobSizeMultpliedByTen) // Stored property
    self.mInternalValue?.padNumbering_property.addEBObserversFrom (&self.mObserversOf_padNumbering) // Stored property
    self.mInternalValue?.counterClockNumberingStartAngle_property.addEBObserversFrom (&self.mObserversOf_counterClockNumberingStartAngle) // Stored property
    self.mInternalValue?.xPlacardUnit_property.addEBObserversFrom (&self.mObserversOf_xPlacardUnit) // Stored property
    self.mInternalValue?.yPlacardUnit_property.addEBObserversFrom (&self.mObserversOf_yPlacardUnit) // Stored property
    self.mInternalValue?.mModelImageData_property.addEBObserversFrom (&self.mObserversOf_mModelImageData) // Stored property
    self.mInternalValue?.freePadNumbering_property.addEBObserversFrom (&self.mObserversOf_freePadNumbering) // Transient property
    self.mInternalValue?.counterClockNumbering_property.addEBObserversFrom (&self.mObserversOf_counterClockNumbering) // Transient property
    self.mInternalValue?.gridStepMultipliedByDisplayFactor_property.addEBObserversFrom (&self.mObserversOf_gridStepMultipliedByDisplayFactor) // Transient property
    self.mInternalValue?.secondPointX_property.addEBObserversFrom (&self.mObserversOf_secondPointX) // Transient property
    self.mInternalValue?.secondPointY_property.addEBObserversFrom (&self.mObserversOf_secondPointY) // Transient property
    self.mInternalValue?.lockImageView_property.addEBObserversFrom (&self.mObserversOf_lockImageView) // Transient property
    self.mInternalValue?.padNumberDisplay_property.addEBObserversFrom (&self.mObserversOf_padNumberDisplay) // Transient property
    self.mInternalValue?.backgroundImagePageBackgroundDisplay_property.addEBObserversFrom (&self.mObserversOf_backgroundImagePageBackgroundDisplay) // Transient property
    self.mInternalValue?.modelImageSizeString_property.addEBObserversFrom (&self.mObserversOf_modelImageSizeString) // Transient property
    self.mInternalValue?.hasModelImage_property.addEBObserversFrom (&self.mObserversOf_hasModelImage) // Transient property
    self.mInternalValue?.masterPadObjectIndexArray_property.addEBObserversFrom (&self.mObserversOf_masterPadObjectIndexArray) // Transient property
    self.mInternalValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
    self.mInternalValue?.noIssue_property.addEBObserversFrom (&self.mObserversOf_noIssue) // Transient property
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  var selectedInspector_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedInspector_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedInspector.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedInspector_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedInspector.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedInspector_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedInspector_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedInspector.apply { (_ observer : EBEvent) in
        managedObject.selectedInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedInspector_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_selectedInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  var comments_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.comments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.comments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.comments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_comments.apply { (_ observer : EBEvent) in
        managedObject.comments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_comments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'program' stored property
  //····················································································································

  private var mObserversOf_program = EBWeakEventSet ()

  //····················································································································

  var program_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.program_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_program (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_program.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.program_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_program (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_program.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.program_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_program_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_program.apply { (_ observer : EBEvent) in
        managedObject.program_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_program_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_program.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.program_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'horizontalFlip' stored property
  //····················································································································

  private var mObserversOf_horizontalFlip = EBWeakEventSet ()

  //····················································································································

  var horizontalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.horizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_horizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.horizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_horizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.horizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_horizontalFlip_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_horizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.horizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_horizontalFlip_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_horizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.horizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'verticalFlip' stored property
  //····················································································································

  private var mObserversOf_verticalFlip = EBWeakEventSet ()

  //····················································································································

  var verticalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.verticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_verticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.verticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_verticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.verticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_verticalFlip_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_verticalFlip.apply { (_ observer : EBEvent) in
        managedObject.verticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_verticalFlip_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_verticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.verticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStyle' stored property
  //····················································································································

  private var mObserversOf_gridStyle = EBWeakEventSet ()

  //····················································································································

  var gridStyle_property_selection : EBSelection <GridStyle?> {
    if let model = self.propval {
      switch (model.gridStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.gridStyle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridStyle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStyle_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridStyle.apply { (_ observer : EBEvent) in
        managedObject.gridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStyle_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_gridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStep' stored property
  //····················································································································

  private var mObserversOf_gridStep = EBWeakEventSet ()

  //····················································································································

  var gridStep_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.gridStep_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_gridStep (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStep.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.gridStep_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStep (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStep.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridStep_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStep_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridStep.apply { (_ observer : EBEvent) in
        managedObject.gridStep_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStep_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_gridStep.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStepUnit' stored property
  //····················································································································

  private var mObserversOf_gridStepUnit = EBWeakEventSet ()

  //····················································································································

  var gridStepUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.gridStepUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_gridStepUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStepUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.gridStepUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStepUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStepUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridStepUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStepUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridStepUnit.apply { (_ observer : EBEvent) in
        managedObject.gridStepUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStepUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_gridStepUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStepUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_gridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  var gridDisplayFactor_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.gridDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_gridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.gridDisplayFactor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridDisplayFactor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_gridDisplayFactor_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.gridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridDisplayFactor_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_gridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  var zoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.zoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.zoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.zoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageOpacity' stored property
  //····················································································································

  private var mObserversOf_mModelImageOpacity = EBWeakEventSet ()

  //····················································································································

  var mModelImageOpacity_property_selection : EBSelection <Double?> {
    if let model = self.propval {
      switch (model.mModelImageOpacity_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageOpacity (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageOpacity.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageOpacity_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageOpacity (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageOpacity.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageOpacity_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageOpacity_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageOpacity.apply { (_ observer : EBEvent) in
        managedObject.mModelImageOpacity_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageOpacity_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageOpacity.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageOpacity_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mModelImagePageHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  var mModelImagePageHorizontalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mModelImagePageHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageHorizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageHorizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageHorizontalFlip_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImagePageHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mModelImagePageHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageHorizontalFlip_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImagePageHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImagePageHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mModelImagePageVerticalFlip = EBWeakEventSet ()

  //····················································································································

  var mModelImagePageVerticalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mModelImagePageVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageVerticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageVerticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageVerticalFlip_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImagePageVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mModelImagePageVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageVerticalFlip_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImagePageVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImagePageVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageGridStyle' stored property
  //····················································································································

  private var mObserversOf_mModelImagePageGridStyle = EBWeakEventSet ()

  //····················································································································

  var mModelImagePageGridStyle_property_selection : EBSelection <GridStyle?> {
    if let model = self.propval {
      switch (model.mModelImagePageGridStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageGridStyle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageGridStyle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageGridStyle_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImagePageGridStyle.apply { (_ observer : EBEvent) in
        managedObject.mModelImagePageGridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageGridStyle_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImagePageGridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImagePageGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageGridStep' stored property
  //····················································································································

  private var mObserversOf_mModelImagePageGridStep = EBWeakEventSet ()

  //····················································································································

  var mModelImagePageGridStep_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImagePageGridStep_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageGridStep (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridStep.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageGridStep_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageGridStep (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridStep.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageGridStep_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageGridStep_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImagePageGridStep.apply { (_ observer : EBEvent) in
        managedObject.mModelImagePageGridStep_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageGridStep_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImagePageGridStep.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImagePageGridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageGridStepUnit' stored property
  //····················································································································

  private var mObserversOf_mModelImagePageGridStepUnit = EBWeakEventSet ()

  //····················································································································

  var mModelImagePageGridStepUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImagePageGridStepUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageGridStepUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridStepUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageGridStepUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageGridStepUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridStepUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageGridStepUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageGridStepUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImagePageGridStepUnit.apply { (_ observer : EBEvent) in
        managedObject.mModelImagePageGridStepUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageGridStepUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImagePageGridStepUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImagePageGridStepUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageGridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_mModelImagePageGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  var mModelImagePageGridDisplayFactor_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImagePageGridDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageGridDisplayFactor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageGridDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageGridDisplayFactor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageGridDisplayFactor_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImagePageGridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.mModelImagePageGridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageGridDisplayFactor_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImagePageGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImagePageGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageZoom' stored property
  //····················································································································

  private var mObserversOf_mModelImagePageZoom = EBWeakEventSet ()

  //····················································································································

  var mModelImagePageZoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImagePageZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageZoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageZoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageZoom_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImagePageZoom.apply { (_ observer : EBEvent) in
        managedObject.mModelImagePageZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageZoom_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImagePageZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImagePageZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageXPlacardUnit' stored property
  //····················································································································

  private var mObserversOf_mModelImagePageXPlacardUnit = EBWeakEventSet ()

  //····················································································································

  var mModelImagePageXPlacardUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImagePageXPlacardUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageXPlacardUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageXPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageXPlacardUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageXPlacardUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageXPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageXPlacardUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageXPlacardUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImagePageXPlacardUnit.apply { (_ observer : EBEvent) in
        managedObject.mModelImagePageXPlacardUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageXPlacardUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImagePageXPlacardUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImagePageXPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePageYPlacardUnit' stored property
  //····················································································································

  private var mObserversOf_mModelImagePageYPlacardUnit = EBWeakEventSet ()

  //····················································································································

  var mModelImagePageYPlacardUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImagePageYPlacardUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageYPlacardUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePageYPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageYPlacardUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageYPlacardUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePageYPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageYPlacardUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePageYPlacardUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImagePageYPlacardUnit.apply { (_ observer : EBEvent) in
        managedObject.mModelImagePageYPlacardUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePageYPlacardUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImagePageYPlacardUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImagePageYPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageSecondPointXUnit' stored property
  //····················································································································

  private var mObserversOf_mModelImageSecondPointXUnit = EBWeakEventSet ()

  //····················································································································

  var mModelImageSecondPointXUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImageSecondPointXUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageSecondPointXUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointXUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageSecondPointXUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageSecondPointXUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointXUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageSecondPointXUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageSecondPointXUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageSecondPointXUnit.apply { (_ observer : EBEvent) in
        managedObject.mModelImageSecondPointXUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageSecondPointXUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageSecondPointXUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageSecondPointXUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePSecondointYUnit' stored property
  //····················································································································

  private var mObserversOf_mModelImagePSecondointYUnit = EBWeakEventSet ()

  //····················································································································

  var mModelImagePSecondointYUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImagePSecondointYUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePSecondointYUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePSecondointYUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePSecondointYUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePSecondointYUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePSecondointYUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePSecondointYUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePSecondointYUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImagePSecondointYUnit.apply { (_ observer : EBEvent) in
        managedObject.mModelImagePSecondointYUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePSecondointYUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImagePSecondointYUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImagePSecondointYUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageFirstPointXOnLock' stored property
  //····················································································································

  private var mObserversOf_mModelImageFirstPointXOnLock = EBWeakEventSet ()

  //····················································································································

  var mModelImageFirstPointXOnLock_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImageFirstPointXOnLock_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageFirstPointXOnLock (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointXOnLock.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageFirstPointXOnLock_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageFirstPointXOnLock (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointXOnLock.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageFirstPointXOnLock_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageFirstPointXOnLock_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageFirstPointXOnLock.apply { (_ observer : EBEvent) in
        managedObject.mModelImageFirstPointXOnLock_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageFirstPointXOnLock_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageFirstPointXOnLock.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageFirstPointXOnLock_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageFirstPointYOnLock' stored property
  //····················································································································

  private var mObserversOf_mModelImageFirstPointYOnLock = EBWeakEventSet ()

  //····················································································································

  var mModelImageFirstPointYOnLock_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImageFirstPointYOnLock_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageFirstPointYOnLock (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointYOnLock.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageFirstPointYOnLock_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageFirstPointYOnLock (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointYOnLock.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageFirstPointYOnLock_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageFirstPointYOnLock_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageFirstPointYOnLock.apply { (_ observer : EBEvent) in
        managedObject.mModelImageFirstPointYOnLock_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageFirstPointYOnLock_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageFirstPointYOnLock.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageFirstPointYOnLock_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePointsDxOnLock' stored property
  //····················································································································

  private var mObserversOf_mModelImagePointsDxOnLock = EBWeakEventSet ()

  //····················································································································

  var mModelImagePointsDxOnLock_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImagePointsDxOnLock_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePointsDxOnLock (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePointsDxOnLock.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePointsDxOnLock_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePointsDxOnLock (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePointsDxOnLock.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePointsDxOnLock_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePointsDxOnLock_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImagePointsDxOnLock.apply { (_ observer : EBEvent) in
        managedObject.mModelImagePointsDxOnLock_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePointsDxOnLock_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImagePointsDxOnLock.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImagePointsDxOnLock_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImagePointsDyOnLock' stored property
  //····················································································································

  private var mObserversOf_mModelImagePointsDyOnLock = EBWeakEventSet ()

  //····················································································································

  var mModelImagePointsDyOnLock_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImagePointsDyOnLock_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePointsDyOnLock (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImagePointsDyOnLock.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePointsDyOnLock_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePointsDyOnLock (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImagePointsDyOnLock.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePointsDyOnLock_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImagePointsDyOnLock_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImagePointsDyOnLock.apply { (_ observer : EBEvent) in
        managedObject.mModelImagePointsDyOnLock_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImagePointsDyOnLock_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImagePointsDyOnLock.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImagePointsDyOnLock_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageScale' stored property
  //····················································································································

  private var mObserversOf_mModelImageScale = EBWeakEventSet ()

  //····················································································································

  var mModelImageScale_property_selection : EBSelection <Double?> {
    if let model = self.propval {
      switch (model.mModelImageScale_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageScale (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageScale.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageScale_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageScale (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageScale.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageScale_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageScale_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageScale.apply { (_ observer : EBEvent) in
        managedObject.mModelImageScale_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageScale_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageScale.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageScale_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageRotationInRadians' stored property
  //····················································································································

  private var mObserversOf_mModelImageRotationInRadians = EBWeakEventSet ()

  //····················································································································

  var mModelImageRotationInRadians_property_selection : EBSelection <Double?> {
    if let model = self.propval {
      switch (model.mModelImageRotationInRadians_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageRotationInRadians (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageRotationInRadians.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageRotationInRadians_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageRotationInRadians (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageRotationInRadians.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageRotationInRadians_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageRotationInRadians_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageRotationInRadians.apply { (_ observer : EBEvent) in
        managedObject.mModelImageRotationInRadians_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageRotationInRadians_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageRotationInRadians.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageRotationInRadians_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDimensionUnitFirstModelPointX' stored property
  //····················································································································

  private var mObserversOf_mDimensionUnitFirstModelPointX = EBWeakEventSet ()

  //····················································································································

  var mDimensionUnitFirstModelPointX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDimensionUnitFirstModelPointX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDimensionUnitFirstModelPointX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitFirstModelPointX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDimensionUnitFirstModelPointX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDimensionUnitFirstModelPointX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitFirstModelPointX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDimensionUnitFirstModelPointX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mDimensionUnitFirstModelPointX_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDimensionUnitFirstModelPointX.apply { (_ observer : EBEvent) in
        managedObject.mDimensionUnitFirstModelPointX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDimensionUnitFirstModelPointX_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mDimensionUnitFirstModelPointX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDimensionUnitFirstModelPointX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDimensionUnitFirstModelPointY' stored property
  //····················································································································

  private var mObserversOf_mDimensionUnitFirstModelPointY = EBWeakEventSet ()

  //····················································································································

  var mDimensionUnitFirstModelPointY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDimensionUnitFirstModelPointY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDimensionUnitFirstModelPointY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitFirstModelPointY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDimensionUnitFirstModelPointY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDimensionUnitFirstModelPointY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitFirstModelPointY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDimensionUnitFirstModelPointY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mDimensionUnitFirstModelPointY_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDimensionUnitFirstModelPointY.apply { (_ observer : EBEvent) in
        managedObject.mDimensionUnitFirstModelPointY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDimensionUnitFirstModelPointY_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mDimensionUnitFirstModelPointY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDimensionUnitFirstModelPointY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDimensionUnitSecondModelPointDx' stored property
  //····················································································································

  private var mObserversOf_mDimensionUnitSecondModelPointDx = EBWeakEventSet ()

  //····················································································································

  var mDimensionUnitSecondModelPointDx_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDimensionUnitSecondModelPointDx_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDimensionUnitSecondModelPointDx (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitSecondModelPointDx.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDimensionUnitSecondModelPointDx_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDimensionUnitSecondModelPointDx (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitSecondModelPointDx.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDimensionUnitSecondModelPointDx_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mDimensionUnitSecondModelPointDx_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDimensionUnitSecondModelPointDx.apply { (_ observer : EBEvent) in
        managedObject.mDimensionUnitSecondModelPointDx_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDimensionUnitSecondModelPointDx_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mDimensionUnitSecondModelPointDx.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDimensionUnitSecondModelPointDx_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDimensionUnitSecondModelPointDy' stored property
  //····················································································································

  private var mObserversOf_mDimensionUnitSecondModelPointDy = EBWeakEventSet ()

  //····················································································································

  var mDimensionUnitSecondModelPointDy_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDimensionUnitSecondModelPointDy_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDimensionUnitSecondModelPointDy (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitSecondModelPointDy.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDimensionUnitSecondModelPointDy_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDimensionUnitSecondModelPointDy (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDimensionUnitSecondModelPointDy.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDimensionUnitSecondModelPointDy_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mDimensionUnitSecondModelPointDy_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDimensionUnitSecondModelPointDy.apply { (_ observer : EBEvent) in
        managedObject.mDimensionUnitSecondModelPointDy_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDimensionUnitSecondModelPointDy_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mDimensionUnitSecondModelPointDy.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDimensionUnitSecondModelPointDy_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelPointsCircleRadius' stored property
  //····················································································································

  private var mObserversOf_mModelPointsCircleRadius = EBWeakEventSet ()

  //····················································································································

  var mModelPointsCircleRadius_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelPointsCircleRadius_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelPointsCircleRadius (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelPointsCircleRadius.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelPointsCircleRadius_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelPointsCircleRadius (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelPointsCircleRadius.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelPointsCircleRadius_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelPointsCircleRadius_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelPointsCircleRadius.apply { (_ observer : EBEvent) in
        managedObject.mModelPointsCircleRadius_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelPointsCircleRadius_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelPointsCircleRadius.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelPointsCircleRadius_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPointsAreLocked' stored property
  //····················································································································

  private var mObserversOf_mPointsAreLocked = EBWeakEventSet ()

  //····················································································································

  var mPointsAreLocked_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mPointsAreLocked_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPointsAreLocked (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPointsAreLocked.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPointsAreLocked_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPointsAreLocked (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPointsAreLocked.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPointsAreLocked_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mPointsAreLocked_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mPointsAreLocked.apply { (_ observer : EBEvent) in
        managedObject.mPointsAreLocked_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPointsAreLocked_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mPointsAreLocked.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPointsAreLocked_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'knobSizeMultpliedByTen' stored property
  //····················································································································

  private var mObserversOf_knobSizeMultpliedByTen = EBWeakEventSet ()

  //····················································································································

  var knobSizeMultpliedByTen_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.knobSizeMultpliedByTen_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_knobSizeMultpliedByTen (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_knobSizeMultpliedByTen.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.knobSizeMultpliedByTen_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_knobSizeMultpliedByTen (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_knobSizeMultpliedByTen.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.knobSizeMultpliedByTen_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_knobSizeMultpliedByTen_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_knobSizeMultpliedByTen.apply { (_ observer : EBEvent) in
        managedObject.knobSizeMultpliedByTen_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_knobSizeMultpliedByTen_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_knobSizeMultpliedByTen.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.knobSizeMultpliedByTen_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumbering' stored property
  //····················································································································

  private var mObserversOf_padNumbering = EBWeakEventSet ()

  //····················································································································

  var padNumbering_property_selection : EBSelection <PadNumbering?> {
    if let model = self.propval {
      switch (model.padNumbering_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padNumbering (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumbering.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.padNumbering_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumbering (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumbering.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNumbering_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumbering_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_padNumbering.apply { (_ observer : EBEvent) in
        managedObject.padNumbering_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumbering_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_padNumbering.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padNumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'counterClockNumberingStartAngle' stored property
  //····················································································································

  private var mObserversOf_counterClockNumberingStartAngle = EBWeakEventSet ()

  //····················································································································

  var counterClockNumberingStartAngle_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.counterClockNumberingStartAngle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_counterClockNumberingStartAngle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_counterClockNumberingStartAngle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.counterClockNumberingStartAngle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_counterClockNumberingStartAngle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_counterClockNumberingStartAngle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.counterClockNumberingStartAngle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_counterClockNumberingStartAngle_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_counterClockNumberingStartAngle.apply { (_ observer : EBEvent) in
        managedObject.counterClockNumberingStartAngle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_counterClockNumberingStartAngle_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_counterClockNumberingStartAngle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.counterClockNumberingStartAngle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xPlacardUnit' stored property
  //····················································································································

  private var mObserversOf_xPlacardUnit = EBWeakEventSet ()

  //····················································································································

  var xPlacardUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xPlacardUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xPlacardUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xPlacardUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_xPlacardUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_xPlacardUnit.apply { (_ observer : EBEvent) in
        managedObject.xPlacardUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xPlacardUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_xPlacardUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yPlacardUnit' stored property
  //····················································································································

  private var mObserversOf_yPlacardUnit = EBWeakEventSet ()

  //····················································································································

  var yPlacardUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yPlacardUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yPlacardUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yPlacardUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_yPlacardUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_yPlacardUnit.apply { (_ observer : EBEvent) in
        managedObject.yPlacardUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yPlacardUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_yPlacardUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageData' stored property
  //····················································································································

  private var mObserversOf_mModelImageData = EBWeakEventSet ()

  //····················································································································

  var mModelImageData_property_selection : EBSelection <Data?> {
    if let model = self.propval {
      switch (model.mModelImageData_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageData.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageData_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageData.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageData_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageData_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageData.apply { (_ observer : EBEvent) in
        managedObject.mModelImageData_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageData_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageData.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageData_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mModelImageFirstPointX' proxy property
  //····················································································································

/*  private var mObserversOf_mModelImageFirstPointX = EBWeakEventSet ()

  //····················································································································

  var mModelImageFirstPointX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImageFirstPointX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageFirstPointX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageFirstPointX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageFirstPointX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageFirstPointX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageFirstPointX_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageFirstPointX.apply { (_ observer : EBEvent) in
        managedObject.mModelImageFirstPointX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageFirstPointX_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageFirstPointX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageFirstPointX_property.removeEBObserver (observer)
      }
    }
  } */

  //····················································································································
  //   Observers of 'mModelImageFirstPointY' proxy property
  //····················································································································

/*  private var mObserversOf_mModelImageFirstPointY = EBWeakEventSet ()

  //····················································································································

  var mModelImageFirstPointY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImageFirstPointY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageFirstPointY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageFirstPointY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageFirstPointY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageFirstPointY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageFirstPointY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageFirstPointY_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageFirstPointY.apply { (_ observer : EBEvent) in
        managedObject.mModelImageFirstPointY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageFirstPointY_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageFirstPointY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageFirstPointY_property.removeEBObserver (observer)
      }
    }
  } */

  //····················································································································
  //   Observers of 'mModelImageSecondPointDx' proxy property
  //····················································································································

/*  private var mObserversOf_mModelImageSecondPointDx = EBWeakEventSet ()

  //····················································································································

  var mModelImageSecondPointDx_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImageSecondPointDx_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageSecondPointDx (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointDx.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageSecondPointDx_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageSecondPointDx (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointDx.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageSecondPointDx_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageSecondPointDx_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageSecondPointDx.apply { (_ observer : EBEvent) in
        managedObject.mModelImageSecondPointDx_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageSecondPointDx_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageSecondPointDx.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageSecondPointDx_property.removeEBObserver (observer)
      }
    }
  } */

  //····················································································································
  //   Observers of 'mModelImageSecondPointDy' proxy property
  //····················································································································

/*  private var mObserversOf_mModelImageSecondPointDy = EBWeakEventSet ()

  //····················································································································

  var mModelImageSecondPointDy_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mModelImageSecondPointDy_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageSecondPointDy (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointDy.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageSecondPointDy_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageSecondPointDy (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mModelImageSecondPointDy.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageSecondPointDy_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mModelImageSecondPointDy_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mModelImageSecondPointDy.apply { (_ observer : EBEvent) in
        managedObject.mModelImageSecondPointDy_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mModelImageSecondPointDy_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_mModelImageSecondPointDy.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mModelImageSecondPointDy_property.removeEBObserver (observer)
      }
    }
  } */

  //····················································································································
  //   Observers of 'freePadNumbering' transient property
  //····················································································································

  private var mObserversOf_freePadNumbering = EBWeakEventSet ()

  //····················································································································

  var freePadNumbering_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.freePadNumbering_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_freePadNumbering (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_freePadNumbering.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.freePadNumbering_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_freePadNumbering (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_freePadNumbering.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.freePadNumbering_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_freePadNumbering_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_freePadNumbering.apply { (_ observer : EBEvent) in
        managedObject.freePadNumbering_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_freePadNumbering_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_freePadNumbering.apply { (_ observer : EBEvent) in
        managedObject.freePadNumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'counterClockNumbering' transient property
  //····················································································································

  private var mObserversOf_counterClockNumbering = EBWeakEventSet ()

  //····················································································································

  var counterClockNumbering_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.counterClockNumbering_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_counterClockNumbering (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_counterClockNumbering.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.counterClockNumbering_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_counterClockNumbering (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_counterClockNumbering.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.counterClockNumbering_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_counterClockNumbering_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_counterClockNumbering.apply { (_ observer : EBEvent) in
        managedObject.counterClockNumbering_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_counterClockNumbering_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_counterClockNumbering.apply { (_ observer : EBEvent) in
        managedObject.counterClockNumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private var mObserversOf_gridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  var gridStepMultipliedByDisplayFactor_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.gridStepMultipliedByDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_gridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStepMultipliedByDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStepMultipliedByDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStepMultipliedByDisplayFactor_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.gridStepMultipliedByDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStepMultipliedByDisplayFactor_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.gridStepMultipliedByDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'secondPointX' transient property
  //····················································································································

  private var mObserversOf_secondPointX = EBWeakEventSet ()

  //····················································································································

  var secondPointX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.secondPointX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_secondPointX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_secondPointX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.secondPointX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_secondPointX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_secondPointX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.secondPointX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_secondPointX_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_secondPointX.apply { (_ observer : EBEvent) in
        managedObject.secondPointX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_secondPointX_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_secondPointX.apply { (_ observer : EBEvent) in
        managedObject.secondPointX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'secondPointY' transient property
  //····················································································································

  private var mObserversOf_secondPointY = EBWeakEventSet ()

  //····················································································································

  var secondPointY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.secondPointY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_secondPointY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_secondPointY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.secondPointY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_secondPointY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_secondPointY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.secondPointY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_secondPointY_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_secondPointY.apply { (_ observer : EBEvent) in
        managedObject.secondPointY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_secondPointY_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_secondPointY.apply { (_ observer : EBEvent) in
        managedObject.secondPointY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'lockImageView' transient property
  //····················································································································

  private var mObserversOf_lockImageView = EBWeakEventSet ()

  //····················································································································

  var lockImageView_property_selection : EBSelection <NSImage?> {
    if let model = self.propval {
      switch (model.lockImageView_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_lockImageView (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_lockImageView.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.lockImageView_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_lockImageView (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_lockImageView.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.lockImageView_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_lockImageView_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_lockImageView.apply { (_ observer : EBEvent) in
        managedObject.lockImageView_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_lockImageView_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_lockImageView.apply { (_ observer : EBEvent) in
        managedObject.lockImageView_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  var padNumberDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.padNumberDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNumberDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNumberDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backgroundImagePageBackgroundDisplay' transient property
  //····················································································································

  private var mObserversOf_backgroundImagePageBackgroundDisplay = EBWeakEventSet ()

  //····················································································································

  var backgroundImagePageBackgroundDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.backgroundImagePageBackgroundDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_backgroundImagePageBackgroundDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backgroundImagePageBackgroundDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backgroundImagePageBackgroundDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backgroundImagePageBackgroundDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backgroundImagePageBackgroundDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backgroundImagePageBackgroundDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_backgroundImagePageBackgroundDisplay_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_backgroundImagePageBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.backgroundImagePageBackgroundDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backgroundImagePageBackgroundDisplay_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_backgroundImagePageBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.backgroundImagePageBackgroundDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelImageSizeString' transient property
  //····················································································································

  private var mObserversOf_modelImageSizeString = EBWeakEventSet ()

  //····················································································································

  var modelImageSizeString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.modelImageSizeString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_modelImageSizeString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelImageSizeString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelImageSizeString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelImageSizeString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelImageSizeString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelImageSizeString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_modelImageSizeString_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_modelImageSizeString.apply { (_ observer : EBEvent) in
        managedObject.modelImageSizeString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelImageSizeString_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_modelImageSizeString.apply { (_ observer : EBEvent) in
        managedObject.modelImageSizeString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'hasModelImage' transient property
  //····················································································································

  private var mObserversOf_hasModelImage = EBWeakEventSet ()

  //····················································································································

  var hasModelImage_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.hasModelImage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_hasModelImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_hasModelImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.hasModelImage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_hasModelImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_hasModelImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.hasModelImage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_hasModelImage_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_hasModelImage.apply { (_ observer : EBEvent) in
        managedObject.hasModelImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_hasModelImage_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_hasModelImage.apply { (_ observer : EBEvent) in
        managedObject.hasModelImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'masterPadObjectIndexArray' transient property
  //····················································································································

  private var mObserversOf_masterPadObjectIndexArray = EBWeakEventSet ()

  //····················································································································

  var masterPadObjectIndexArray_property_selection : EBSelection <IntArray?> {
    if let model = self.propval {
      switch (model.masterPadObjectIndexArray_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_masterPadObjectIndexArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_masterPadObjectIndexArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.masterPadObjectIndexArray_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_masterPadObjectIndexArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_masterPadObjectIndexArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.masterPadObjectIndexArray_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_masterPadObjectIndexArray_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_masterPadObjectIndexArray.apply { (_ observer : EBEvent) in
        managedObject.masterPadObjectIndexArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_masterPadObjectIndexArray_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_masterPadObjectIndexArray.apply { (_ observer : EBEvent) in
        managedObject.masterPadObjectIndexArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'noIssue' transient property
  //····················································································································

  private var mObserversOf_noIssue = EBWeakEventSet ()

  //····················································································································

  var noIssue_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.noIssue_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_noIssue.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.noIssue_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_noIssue.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.noIssue_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_noIssue_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_noIssue.apply { (_ observer : EBEvent) in
        managedObject.noIssue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_noIssue_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_noIssue.apply { (_ observer : EBEvent) in
        managedObject.noIssue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: packageObjects
  //····················································································································

  private var mObserversOf_packageObjects = EBWeakEventSet ()

  //····················································································································

  var packageObjects_property_selection : EBSelection <[PackageObject]> {
    if let model = self.propval {
      switch (model.packageObjects_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_packageObjects (_ inObserver : EBEvent) {
    self.mObserversOf_packageObjects.insert (inObserver)
    if let object = self.propval {
      object.packageObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageObjects (_ inObserver : EBEvent) {
    self.mObserversOf_packageObjects.remove (inObserver)
    if let object = self.propval {
      object.packageObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mModelImageObjects
  //····················································································································

  private var mObserversOf_mModelImageObjects = EBWeakEventSet ()

  //····················································································································

  var mModelImageObjects_property_selection : EBSelection <[PackageModelImageDoublePoint]> {
    if let model = self.propval {
      switch (model.mModelImageObjects_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageObjects (_ inObserver : EBEvent) {
    self.mObserversOf_mModelImageObjects.insert (inObserver)
    if let object = self.propval {
      object.mModelImageObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageObjects (_ inObserver : EBEvent) {
    self.mObserversOf_mModelImageObjects.remove (inObserver)
    if let object = self.propval {
      object.mModelImageObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packagePads
  //····················································································································

  private var mObserversOf_packagePads = EBWeakEventSet ()

  //····················································································································

  var packagePads_property_selection : EBSelection <[PackagePad]> {
    if let model = self.propval {
      switch (model.packagePads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_packagePads (_ inObserver : EBEvent) {
    self.mObserversOf_packagePads.insert (inObserver)
    if let object = self.propval {
      object.packagePads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packagePads (_ inObserver : EBEvent) {
    self.mObserversOf_packagePads.remove (inObserver)
    if let object = self.propval {
      object.packagePads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packageSlavePads
  //····················································································································

  private var mObserversOf_packageSlavePads = EBWeakEventSet ()

  //····················································································································

  var packageSlavePads_property_selection : EBSelection <[PackageSlavePad]> {
    if let model = self.propval {
      switch (model.packageSlavePads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_packageSlavePads (_ inObserver : EBEvent) {
    self.mObserversOf_packageSlavePads.insert (inObserver)
    if let object = self.propval {
      object.packageSlavePads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageSlavePads (_ inObserver : EBEvent) {
    self.mObserversOf_packageSlavePads.remove (inObserver)
    if let object = self.propval {
      object.packageSlavePads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packageZones
  //····················································································································

  private var mObserversOf_packageZones = EBWeakEventSet ()

  //····················································································································

  var packageZones_property_selection : EBSelection <[PackageZone]> {
    if let model = self.propval {
      switch (model.packageZones_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_packageZones (_ inObserver : EBEvent) {
    self.mObserversOf_packageZones.insert (inObserver)
    if let object = self.propval {
      object.packageZones_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageZones (_ inObserver : EBEvent) {
    self.mObserversOf_packageZones.remove (inObserver)
    if let object = self.propval {
      object.packageZones_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject PackageRoot
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_PackageRoot : ReadOnlyObject_PackageRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackageRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackageRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackageRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackageRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PackageRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PackageRoot : ReadOnlyObject_PackageRoot {

  //····················································································································
 
  func setProp (_ inValue : PackageRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PackageRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PackageRoot : ReadWriteObject_PackageRoot {

  //····················································································································

  private var mModel : ReadWriteObject_PackageRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackageRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackageRoot?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackageRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < PackageRoot? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackageRoot? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PackageRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PackageRoot : ReadWriteObject_PackageRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackageRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackageRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

