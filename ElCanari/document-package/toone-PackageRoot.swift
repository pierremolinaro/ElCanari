//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PackageRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PackageRoot : ReadOnlyAbstractObjectProperty <PackageRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackageRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
  //--- Add observers to added objects
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private final var selectedPageIndex_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final var selectedPageIndex_property_selection : EBSelection <Int?> { // §
    return self.selectedPageIndex_property.selection
/*    if let model = self.propval {
      switch (model.selectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.selectedPageIndex_property.addEBObserver (inObserver)
/*    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedPageIndex_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.selectedPageIndex_property.removeEBObserver (inObserver)
/*    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedPageIndex_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private final var selectedInspector_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  final var selectedInspector_property_selection : EBSelection <Int?> { // §
    return self.selectedInspector_property.selection
/*    if let model = self.propval {
      switch (model.selectedInspector_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.selectedInspector_property.addEBObserver (inObserver)
/*    self.mObserversOf_selectedInspector.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedInspector_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.selectedInspector_property.removeEBObserver (inObserver)
/*    self.mObserversOf_selectedInspector.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedInspector_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private final var comments_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final var comments_property_selection : EBSelection <String?> { // §
    return self.comments_property.selection
/*    if let model = self.propval {
      switch (model.comments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.comments_property.addEBObserver (inObserver)
/*    self.mObserversOf_comments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.comments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.comments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_comments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.comments_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'program' stored property
  //····················································································································

  private final var program_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_program = EBWeakEventSet ()

  //····················································································································

  final var program_property_selection : EBSelection <String?> { // §
    return self.program_property.selection
/*    if let model = self.propval {
      switch (model.program_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_program (_ inObserver : EBEvent) {
    self.program_property.addEBObserver (inObserver)
/*    self.mObserversOf_program.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.program_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_program (_ inObserver : EBEvent) {
    self.program_property.removeEBObserver (inObserver)
/*    self.mObserversOf_program.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.program_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'horizontalFlip' stored property
  //····················································································································

  private final var horizontalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_horizontalFlip = EBWeakEventSet ()

  //····················································································································

  final var horizontalFlip_property_selection : EBSelection <Bool?> { // §
    return self.horizontalFlip_property.selection
/*    if let model = self.propval {
      switch (model.horizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.horizontalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_horizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.horizontalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.horizontalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_horizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.horizontalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'verticalFlip' stored property
  //····················································································································

  private final var verticalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_verticalFlip = EBWeakEventSet ()

  //····················································································································

  final var verticalFlip_property_selection : EBSelection <Bool?> { // §
    return self.verticalFlip_property.selection
/*    if let model = self.propval {
      switch (model.verticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.verticalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_verticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.verticalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.verticalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_verticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.verticalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'gridStyle' stored property
  //····················································································································

  private final var gridStyle_property = EBGenericTransientProperty <GridStyle?> ()
//  private final var mObserversOf_gridStyle = EBWeakEventSet ()

  //····················································································································

  final var gridStyle_property_selection : EBSelection <GridStyle?> { // §
    return self.gridStyle_property.selection
/*    if let model = self.propval {
      switch (model.gridStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.gridStyle_property.addEBObserver (inObserver)
/*    self.mObserversOf_gridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.gridStyle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.gridStyle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_gridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridStyle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'gridStep' stored property
  //····················································································································

  private final var gridStep_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_gridStep = EBWeakEventSet ()

  //····················································································································

  final var gridStep_property_selection : EBSelection <Int?> { // §
    return self.gridStep_property.selection
/*    if let model = self.propval {
      switch (model.gridStep_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_gridStep (_ inObserver : EBEvent) {
    self.gridStep_property.addEBObserver (inObserver)
/*    self.mObserversOf_gridStep.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.gridStep_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_gridStep (_ inObserver : EBEvent) {
    self.gridStep_property.removeEBObserver (inObserver)
/*    self.mObserversOf_gridStep.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridStep_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'gridStepUnit' stored property
  //····················································································································

  private final var gridStepUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_gridStepUnit = EBWeakEventSet ()

  //····················································································································

  final var gridStepUnit_property_selection : EBSelection <Int?> { // §
    return self.gridStepUnit_property.selection
/*    if let model = self.propval {
      switch (model.gridStepUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_gridStepUnit (_ inObserver : EBEvent) {
    self.gridStepUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_gridStepUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.gridStepUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_gridStepUnit (_ inObserver : EBEvent) {
    self.gridStepUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_gridStepUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridStepUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'gridDisplayFactor' stored property
  //····················································································································

  private final var gridDisplayFactor_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_gridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final var gridDisplayFactor_property_selection : EBSelection <Int?> { // §
    return self.gridDisplayFactor_property.selection
/*    if let model = self.propval {
      switch (model.gridDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_gridDisplayFactor (_ inObserver : EBEvent) {
    self.gridDisplayFactor_property.addEBObserver (inObserver)
/*    self.mObserversOf_gridDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.gridDisplayFactor_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_gridDisplayFactor (_ inObserver : EBEvent) {
    self.gridDisplayFactor_property.removeEBObserver (inObserver)
/*    self.mObserversOf_gridDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridDisplayFactor_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private final var zoom_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final var zoom_property_selection : EBSelection <Int?> { // §
    return self.zoom_property.selection
/*    if let model = self.propval {
      switch (model.zoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.zoom_property.addEBObserver (inObserver)
/*    self.mObserversOf_zoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.zoom_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.zoom_property.removeEBObserver (inObserver)
/*    self.mObserversOf_zoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.zoom_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImageOpacity' stored property
  //····················································································································

  private final var mModelImageOpacity_property = EBGenericTransientProperty <Double?> ()
//  private final var mObserversOf_mModelImageOpacity = EBWeakEventSet ()

  //····················································································································

  final var mModelImageOpacity_property_selection : EBSelection <Double?> { // §
    return self.mModelImageOpacity_property.selection
/*    if let model = self.propval {
      switch (model.mModelImageOpacity_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImageOpacity (_ inObserver : EBEvent) {
    self.mModelImageOpacity_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImageOpacity.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageOpacity_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageOpacity (_ inObserver : EBEvent) {
    self.mModelImageOpacity_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImageOpacity.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageOpacity_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImagePageHorizontalFlip' stored property
  //····················································································································

  private final var mModelImagePageHorizontalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mModelImagePageHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final var mModelImagePageHorizontalFlip_property_selection : EBSelection <Bool?> { // §
    return self.mModelImagePageHorizontalFlip_property.selection
/*    if let model = self.propval {
      switch (model.mModelImagePageHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageHorizontalFlip (_ inObserver : EBEvent) {
    self.mModelImagePageHorizontalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageHorizontalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageHorizontalFlip (_ inObserver : EBEvent) {
    self.mModelImagePageHorizontalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageHorizontalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImagePageVerticalFlip' stored property
  //····················································································································

  private final var mModelImagePageVerticalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mModelImagePageVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final var mModelImagePageVerticalFlip_property_selection : EBSelection <Bool?> { // §
    return self.mModelImagePageVerticalFlip_property.selection
/*    if let model = self.propval {
      switch (model.mModelImagePageVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageVerticalFlip (_ inObserver : EBEvent) {
    self.mModelImagePageVerticalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageVerticalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageVerticalFlip (_ inObserver : EBEvent) {
    self.mModelImagePageVerticalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageVerticalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImagePageGridStyle' stored property
  //····················································································································

  private final var mModelImagePageGridStyle_property = EBGenericTransientProperty <GridStyle?> ()
//  private final var mObserversOf_mModelImagePageGridStyle = EBWeakEventSet ()

  //····················································································································

  final var mModelImagePageGridStyle_property_selection : EBSelection <GridStyle?> { // §
    return self.mModelImagePageGridStyle_property.selection
/*    if let model = self.propval {
      switch (model.mModelImagePageGridStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageGridStyle (_ inObserver : EBEvent) {
    self.mModelImagePageGridStyle_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageGridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageGridStyle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageGridStyle (_ inObserver : EBEvent) {
    self.mModelImagePageGridStyle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageGridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageGridStyle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImagePageGridStep' stored property
  //····················································································································

  private final var mModelImagePageGridStep_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelImagePageGridStep = EBWeakEventSet ()

  //····················································································································

  final var mModelImagePageGridStep_property_selection : EBSelection <Int?> { // §
    return self.mModelImagePageGridStep_property.selection
/*    if let model = self.propval {
      switch (model.mModelImagePageGridStep_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageGridStep (_ inObserver : EBEvent) {
    self.mModelImagePageGridStep_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageGridStep.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageGridStep_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageGridStep (_ inObserver : EBEvent) {
    self.mModelImagePageGridStep_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageGridStep.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageGridStep_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImagePageGridStepUnit' stored property
  //····················································································································

  private final var mModelImagePageGridStepUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelImagePageGridStepUnit = EBWeakEventSet ()

  //····················································································································

  final var mModelImagePageGridStepUnit_property_selection : EBSelection <Int?> { // §
    return self.mModelImagePageGridStepUnit_property.selection
/*    if let model = self.propval {
      switch (model.mModelImagePageGridStepUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageGridStepUnit (_ inObserver : EBEvent) {
    self.mModelImagePageGridStepUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageGridStepUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageGridStepUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageGridStepUnit (_ inObserver : EBEvent) {
    self.mModelImagePageGridStepUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageGridStepUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageGridStepUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImagePageGridDisplayFactor' stored property
  //····················································································································

  private final var mModelImagePageGridDisplayFactor_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelImagePageGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final var mModelImagePageGridDisplayFactor_property_selection : EBSelection <Int?> { // §
    return self.mModelImagePageGridDisplayFactor_property.selection
/*    if let model = self.propval {
      switch (model.mModelImagePageGridDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageGridDisplayFactor (_ inObserver : EBEvent) {
    self.mModelImagePageGridDisplayFactor_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageGridDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageGridDisplayFactor_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageGridDisplayFactor (_ inObserver : EBEvent) {
    self.mModelImagePageGridDisplayFactor_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageGridDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageGridDisplayFactor_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImagePageZoom' stored property
  //····················································································································

  private final var mModelImagePageZoom_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelImagePageZoom = EBWeakEventSet ()

  //····················································································································

  final var mModelImagePageZoom_property_selection : EBSelection <Int?> { // §
    return self.mModelImagePageZoom_property.selection
/*    if let model = self.propval {
      switch (model.mModelImagePageZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageZoom (_ inObserver : EBEvent) {
    self.mModelImagePageZoom_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageZoom_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageZoom (_ inObserver : EBEvent) {
    self.mModelImagePageZoom_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageZoom_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImagePageXPlacardUnit' stored property
  //····················································································································

  private final var mModelImagePageXPlacardUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelImagePageXPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final var mModelImagePageXPlacardUnit_property_selection : EBSelection <Int?> { // §
    return self.mModelImagePageXPlacardUnit_property.selection
/*    if let model = self.propval {
      switch (model.mModelImagePageXPlacardUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageXPlacardUnit (_ inObserver : EBEvent) {
    self.mModelImagePageXPlacardUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageXPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageXPlacardUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageXPlacardUnit (_ inObserver : EBEvent) {
    self.mModelImagePageXPlacardUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageXPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageXPlacardUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImagePageYPlacardUnit' stored property
  //····················································································································

  private final var mModelImagePageYPlacardUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelImagePageYPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final var mModelImagePageYPlacardUnit_property_selection : EBSelection <Int?> { // §
    return self.mModelImagePageYPlacardUnit_property.selection
/*    if let model = self.propval {
      switch (model.mModelImagePageYPlacardUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePageYPlacardUnit (_ inObserver : EBEvent) {
    self.mModelImagePageYPlacardUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageYPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePageYPlacardUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePageYPlacardUnit (_ inObserver : EBEvent) {
    self.mModelImagePageYPlacardUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePageYPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePageYPlacardUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImageSecondPointXUnit' stored property
  //····················································································································

  private final var mModelImageSecondPointXUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelImageSecondPointXUnit = EBWeakEventSet ()

  //····················································································································

  final var mModelImageSecondPointXUnit_property_selection : EBSelection <Int?> { // §
    return self.mModelImageSecondPointXUnit_property.selection
/*    if let model = self.propval {
      switch (model.mModelImageSecondPointXUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImageSecondPointXUnit (_ inObserver : EBEvent) {
    self.mModelImageSecondPointXUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImageSecondPointXUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageSecondPointXUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageSecondPointXUnit (_ inObserver : EBEvent) {
    self.mModelImageSecondPointXUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImageSecondPointXUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageSecondPointXUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImageSecondPointYUnit' stored property
  //····················································································································

  private final var mModelImageSecondPointYUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelImageSecondPointYUnit = EBWeakEventSet ()

  //····················································································································

  final var mModelImageSecondPointYUnit_property_selection : EBSelection <Int?> { // §
    return self.mModelImageSecondPointYUnit_property.selection
/*    if let model = self.propval {
      switch (model.mModelImageSecondPointYUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImageSecondPointYUnit (_ inObserver : EBEvent) {
    self.mModelImageSecondPointYUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImageSecondPointYUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageSecondPointYUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageSecondPointYUnit (_ inObserver : EBEvent) {
    self.mModelImageSecondPointYUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImageSecondPointYUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageSecondPointYUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImageFirstPointXOnLock' stored property
  //····················································································································

  private final var mModelImageFirstPointXOnLock_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelImageFirstPointXOnLock = EBWeakEventSet ()

  //····················································································································

  final var mModelImageFirstPointXOnLock_property_selection : EBSelection <Int?> { // §
    return self.mModelImageFirstPointXOnLock_property.selection
/*    if let model = self.propval {
      switch (model.mModelImageFirstPointXOnLock_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImageFirstPointXOnLock (_ inObserver : EBEvent) {
    self.mModelImageFirstPointXOnLock_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImageFirstPointXOnLock.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageFirstPointXOnLock_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageFirstPointXOnLock (_ inObserver : EBEvent) {
    self.mModelImageFirstPointXOnLock_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImageFirstPointXOnLock.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageFirstPointXOnLock_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImageFirstPointYOnLock' stored property
  //····················································································································

  private final var mModelImageFirstPointYOnLock_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelImageFirstPointYOnLock = EBWeakEventSet ()

  //····················································································································

  final var mModelImageFirstPointYOnLock_property_selection : EBSelection <Int?> { // §
    return self.mModelImageFirstPointYOnLock_property.selection
/*    if let model = self.propval {
      switch (model.mModelImageFirstPointYOnLock_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImageFirstPointYOnLock (_ inObserver : EBEvent) {
    self.mModelImageFirstPointYOnLock_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImageFirstPointYOnLock.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageFirstPointYOnLock_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageFirstPointYOnLock (_ inObserver : EBEvent) {
    self.mModelImageFirstPointYOnLock_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImageFirstPointYOnLock.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageFirstPointYOnLock_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImagePointsDxOnLock' stored property
  //····················································································································

  private final var mModelImagePointsDxOnLock_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelImagePointsDxOnLock = EBWeakEventSet ()

  //····················································································································

  final var mModelImagePointsDxOnLock_property_selection : EBSelection <Int?> { // §
    return self.mModelImagePointsDxOnLock_property.selection
/*    if let model = self.propval {
      switch (model.mModelImagePointsDxOnLock_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePointsDxOnLock (_ inObserver : EBEvent) {
    self.mModelImagePointsDxOnLock_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePointsDxOnLock.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePointsDxOnLock_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePointsDxOnLock (_ inObserver : EBEvent) {
    self.mModelImagePointsDxOnLock_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePointsDxOnLock.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePointsDxOnLock_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImagePointsDyOnLock' stored property
  //····················································································································

  private final var mModelImagePointsDyOnLock_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelImagePointsDyOnLock = EBWeakEventSet ()

  //····················································································································

  final var mModelImagePointsDyOnLock_property_selection : EBSelection <Int?> { // §
    return self.mModelImagePointsDyOnLock_property.selection
/*    if let model = self.propval {
      switch (model.mModelImagePointsDyOnLock_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImagePointsDyOnLock (_ inObserver : EBEvent) {
    self.mModelImagePointsDyOnLock_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePointsDyOnLock.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImagePointsDyOnLock_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImagePointsDyOnLock (_ inObserver : EBEvent) {
    self.mModelImagePointsDyOnLock_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImagePointsDyOnLock.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImagePointsDyOnLock_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImageScale' stored property
  //····················································································································

  private final var mModelImageScale_property = EBGenericTransientProperty <Double?> ()
//  private final var mObserversOf_mModelImageScale = EBWeakEventSet ()

  //····················································································································

  final var mModelImageScale_property_selection : EBSelection <Double?> { // §
    return self.mModelImageScale_property.selection
/*    if let model = self.propval {
      switch (model.mModelImageScale_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImageScale (_ inObserver : EBEvent) {
    self.mModelImageScale_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImageScale.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageScale_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageScale (_ inObserver : EBEvent) {
    self.mModelImageScale_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImageScale.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageScale_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImageRotationInRadians' stored property
  //····················································································································

  private final var mModelImageRotationInRadians_property = EBGenericTransientProperty <Double?> ()
//  private final var mObserversOf_mModelImageRotationInRadians = EBWeakEventSet ()

  //····················································································································

  final var mModelImageRotationInRadians_property_selection : EBSelection <Double?> { // §
    return self.mModelImageRotationInRadians_property.selection
/*    if let model = self.propval {
      switch (model.mModelImageRotationInRadians_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImageRotationInRadians (_ inObserver : EBEvent) {
    self.mModelImageRotationInRadians_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImageRotationInRadians.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageRotationInRadians_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageRotationInRadians (_ inObserver : EBEvent) {
    self.mModelImageRotationInRadians_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImageRotationInRadians.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageRotationInRadians_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mDimensionUnitFirstModelPointX' stored property
  //····················································································································

  private final var mDimensionUnitFirstModelPointX_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mDimensionUnitFirstModelPointX = EBWeakEventSet ()

  //····················································································································

  final var mDimensionUnitFirstModelPointX_property_selection : EBSelection <Int?> { // §
    return self.mDimensionUnitFirstModelPointX_property.selection
/*    if let model = self.propval {
      switch (model.mDimensionUnitFirstModelPointX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mDimensionUnitFirstModelPointX (_ inObserver : EBEvent) {
    self.mDimensionUnitFirstModelPointX_property.addEBObserver (inObserver)
/*    self.mObserversOf_mDimensionUnitFirstModelPointX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDimensionUnitFirstModelPointX_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mDimensionUnitFirstModelPointX (_ inObserver : EBEvent) {
    self.mDimensionUnitFirstModelPointX_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mDimensionUnitFirstModelPointX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDimensionUnitFirstModelPointX_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mDimensionUnitFirstModelPointY' stored property
  //····················································································································

  private final var mDimensionUnitFirstModelPointY_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mDimensionUnitFirstModelPointY = EBWeakEventSet ()

  //····················································································································

  final var mDimensionUnitFirstModelPointY_property_selection : EBSelection <Int?> { // §
    return self.mDimensionUnitFirstModelPointY_property.selection
/*    if let model = self.propval {
      switch (model.mDimensionUnitFirstModelPointY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mDimensionUnitFirstModelPointY (_ inObserver : EBEvent) {
    self.mDimensionUnitFirstModelPointY_property.addEBObserver (inObserver)
/*    self.mObserversOf_mDimensionUnitFirstModelPointY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDimensionUnitFirstModelPointY_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mDimensionUnitFirstModelPointY (_ inObserver : EBEvent) {
    self.mDimensionUnitFirstModelPointY_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mDimensionUnitFirstModelPointY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDimensionUnitFirstModelPointY_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mDimensionUnitSecondModelPointDx' stored property
  //····················································································································

  private final var mDimensionUnitSecondModelPointDx_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mDimensionUnitSecondModelPointDx = EBWeakEventSet ()

  //····················································································································

  final var mDimensionUnitSecondModelPointDx_property_selection : EBSelection <Int?> { // §
    return self.mDimensionUnitSecondModelPointDx_property.selection
/*    if let model = self.propval {
      switch (model.mDimensionUnitSecondModelPointDx_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mDimensionUnitSecondModelPointDx (_ inObserver : EBEvent) {
    self.mDimensionUnitSecondModelPointDx_property.addEBObserver (inObserver)
/*    self.mObserversOf_mDimensionUnitSecondModelPointDx.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDimensionUnitSecondModelPointDx_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mDimensionUnitSecondModelPointDx (_ inObserver : EBEvent) {
    self.mDimensionUnitSecondModelPointDx_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mDimensionUnitSecondModelPointDx.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDimensionUnitSecondModelPointDx_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mDimensionUnitSecondModelPointDy' stored property
  //····················································································································

  private final var mDimensionUnitSecondModelPointDy_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mDimensionUnitSecondModelPointDy = EBWeakEventSet ()

  //····················································································································

  final var mDimensionUnitSecondModelPointDy_property_selection : EBSelection <Int?> { // §
    return self.mDimensionUnitSecondModelPointDy_property.selection
/*    if let model = self.propval {
      switch (model.mDimensionUnitSecondModelPointDy_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mDimensionUnitSecondModelPointDy (_ inObserver : EBEvent) {
    self.mDimensionUnitSecondModelPointDy_property.addEBObserver (inObserver)
/*    self.mObserversOf_mDimensionUnitSecondModelPointDy.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDimensionUnitSecondModelPointDy_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mDimensionUnitSecondModelPointDy (_ inObserver : EBEvent) {
    self.mDimensionUnitSecondModelPointDy_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mDimensionUnitSecondModelPointDy.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDimensionUnitSecondModelPointDy_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelPointsCircleRadius' stored property
  //····················································································································

  private final var mModelPointsCircleRadius_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mModelPointsCircleRadius = EBWeakEventSet ()

  //····················································································································

  final var mModelPointsCircleRadius_property_selection : EBSelection <Int?> { // §
    return self.mModelPointsCircleRadius_property.selection
/*    if let model = self.propval {
      switch (model.mModelPointsCircleRadius_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelPointsCircleRadius (_ inObserver : EBEvent) {
    self.mModelPointsCircleRadius_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelPointsCircleRadius.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelPointsCircleRadius_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelPointsCircleRadius (_ inObserver : EBEvent) {
    self.mModelPointsCircleRadius_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelPointsCircleRadius.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelPointsCircleRadius_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mPointsAreLocked' stored property
  //····················································································································

  private final var mPointsAreLocked_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mPointsAreLocked = EBWeakEventSet ()

  //····················································································································

  final var mPointsAreLocked_property_selection : EBSelection <Bool?> { // §
    return self.mPointsAreLocked_property.selection
/*    if let model = self.propval {
      switch (model.mPointsAreLocked_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mPointsAreLocked (_ inObserver : EBEvent) {
    self.mPointsAreLocked_property.addEBObserver (inObserver)
/*    self.mObserversOf_mPointsAreLocked.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPointsAreLocked_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mPointsAreLocked (_ inObserver : EBEvent) {
    self.mPointsAreLocked_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mPointsAreLocked.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPointsAreLocked_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'knobSizeMultpliedByTen' stored property
  //····················································································································

  private final var knobSizeMultpliedByTen_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_knobSizeMultpliedByTen = EBWeakEventSet ()

  //····················································································································

  final var knobSizeMultpliedByTen_property_selection : EBSelection <Int?> { // §
    return self.knobSizeMultpliedByTen_property.selection
/*    if let model = self.propval {
      switch (model.knobSizeMultpliedByTen_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_knobSizeMultpliedByTen (_ inObserver : EBEvent) {
    self.knobSizeMultpliedByTen_property.addEBObserver (inObserver)
/*    self.mObserversOf_knobSizeMultpliedByTen.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.knobSizeMultpliedByTen_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_knobSizeMultpliedByTen (_ inObserver : EBEvent) {
    self.knobSizeMultpliedByTen_property.removeEBObserver (inObserver)
/*    self.mObserversOf_knobSizeMultpliedByTen.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.knobSizeMultpliedByTen_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'padNumbering' stored property
  //····················································································································

  private final var padNumbering_property = EBGenericTransientProperty <PadNumbering?> ()
//  private final var mObserversOf_padNumbering = EBWeakEventSet ()

  //····················································································································

  final var padNumbering_property_selection : EBSelection <PadNumbering?> { // §
    return self.padNumbering_property.selection
/*    if let model = self.propval {
      switch (model.padNumbering_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_padNumbering (_ inObserver : EBEvent) {
    self.padNumbering_property.addEBObserver (inObserver)
/*    self.mObserversOf_padNumbering.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.padNumbering_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_padNumbering (_ inObserver : EBEvent) {
    self.padNumbering_property.removeEBObserver (inObserver)
/*    self.mObserversOf_padNumbering.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNumbering_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'counterClockNumberingStartAngle' stored property
  //····················································································································

  private final var counterClockNumberingStartAngle_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_counterClockNumberingStartAngle = EBWeakEventSet ()

  //····················································································································

  final var counterClockNumberingStartAngle_property_selection : EBSelection <Int?> { // §
    return self.counterClockNumberingStartAngle_property.selection
/*    if let model = self.propval {
      switch (model.counterClockNumberingStartAngle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_counterClockNumberingStartAngle (_ inObserver : EBEvent) {
    self.counterClockNumberingStartAngle_property.addEBObserver (inObserver)
/*    self.mObserversOf_counterClockNumberingStartAngle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.counterClockNumberingStartAngle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_counterClockNumberingStartAngle (_ inObserver : EBEvent) {
    self.counterClockNumberingStartAngle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_counterClockNumberingStartAngle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.counterClockNumberingStartAngle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'xPlacardUnit' stored property
  //····················································································································

  private final var xPlacardUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_xPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final var xPlacardUnit_property_selection : EBSelection <Int?> { // §
    return self.xPlacardUnit_property.selection
/*    if let model = self.propval {
      switch (model.xPlacardUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.xPlacardUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_xPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xPlacardUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.xPlacardUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_xPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xPlacardUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'yPlacardUnit' stored property
  //····················································································································

  private final var yPlacardUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_yPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final var yPlacardUnit_property_selection : EBSelection <Int?> { // §
    return self.yPlacardUnit_property.selection
/*    if let model = self.propval {
      switch (model.yPlacardUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.yPlacardUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_yPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yPlacardUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.yPlacardUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_yPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yPlacardUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mModelImageData' stored property
  //····················································································································

  private final var mModelImageData_property = EBGenericTransientProperty <Data?> ()
//  private final var mObserversOf_mModelImageData = EBWeakEventSet ()

  //····················································································································

  final var mModelImageData_property_selection : EBSelection <Data?> { // §
    return self.mModelImageData_property.selection
/*    if let model = self.propval {
      switch (model.mModelImageData_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mModelImageData (_ inObserver : EBEvent) {
    self.mModelImageData_property.addEBObserver (inObserver)
/*    self.mObserversOf_mModelImageData.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mModelImageData_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageData (_ inObserver : EBEvent) {
    self.mModelImageData_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mModelImageData.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mModelImageData_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'freePadNumbering' transient property
  //····················································································································

  private final var freePadNumbering_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_freePadNumbering = EBWeakEventSet ()

  //····················································································································

  final var freePadNumbering_property_selection : EBSelection <Bool?> {
    return self.freePadNumbering_property.selection
/*    if let model = self.propval {
      switch (model.freePadNumbering_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_freePadNumbering (_ inObserver : EBEvent) {
    self.freePadNumbering_property.addEBObserver (inObserver)
/*    self.mObserversOf_freePadNumbering.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.freePadNumbering_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_freePadNumbering (_ inObserver : EBEvent) {
    self.freePadNumbering_property.removeEBObserver (inObserver)
/*    self.mObserversOf_freePadNumbering.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.freePadNumbering_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'counterClockNumbering' transient property
  //····················································································································

  private final var counterClockNumbering_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_counterClockNumbering = EBWeakEventSet ()

  //····················································································································

  final var counterClockNumbering_property_selection : EBSelection <Bool?> {
    return self.counterClockNumbering_property.selection
/*    if let model = self.propval {
      switch (model.counterClockNumbering_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_counterClockNumbering (_ inObserver : EBEvent) {
    self.counterClockNumbering_property.addEBObserver (inObserver)
/*    self.mObserversOf_counterClockNumbering.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.counterClockNumbering_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_counterClockNumbering (_ inObserver : EBEvent) {
    self.counterClockNumbering_property.removeEBObserver (inObserver)
/*    self.mObserversOf_counterClockNumbering.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.counterClockNumbering_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'gridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private final var gridStepMultipliedByDisplayFactor_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_gridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final var gridStepMultipliedByDisplayFactor_property_selection : EBSelection <Int?> {
    return self.gridStepMultipliedByDisplayFactor_property.selection
/*    if let model = self.propval {
      switch (model.gridStepMultipliedByDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_gridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.gridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
/*    self.mObserversOf_gridStepMultipliedByDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_gridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.gridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
/*    self.mObserversOf_gridStepMultipliedByDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'secondPointX' transient property
  //····················································································································

  private final var secondPointX_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_secondPointX = EBWeakEventSet ()

  //····················································································································

  final var secondPointX_property_selection : EBSelection <Int?> {
    return self.secondPointX_property.selection
/*    if let model = self.propval {
      switch (model.secondPointX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_secondPointX (_ inObserver : EBEvent) {
    self.secondPointX_property.addEBObserver (inObserver)
/*    self.mObserversOf_secondPointX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.secondPointX_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_secondPointX (_ inObserver : EBEvent) {
    self.secondPointX_property.removeEBObserver (inObserver)
/*    self.mObserversOf_secondPointX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.secondPointX_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'secondPointY' transient property
  //····················································································································

  private final var secondPointY_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_secondPointY = EBWeakEventSet ()

  //····················································································································

  final var secondPointY_property_selection : EBSelection <Int?> {
    return self.secondPointY_property.selection
/*    if let model = self.propval {
      switch (model.secondPointY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_secondPointY (_ inObserver : EBEvent) {
    self.secondPointY_property.addEBObserver (inObserver)
/*    self.mObserversOf_secondPointY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.secondPointY_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_secondPointY (_ inObserver : EBEvent) {
    self.secondPointY_property.removeEBObserver (inObserver)
/*    self.mObserversOf_secondPointY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.secondPointY_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'lockImageView' transient property
  //····················································································································

  private final var lockImageView_property = EBGenericTransientProperty <NSImage?> ()
//  private final var mObserversOf_lockImageView = EBWeakEventSet ()

  //····················································································································

  final var lockImageView_property_selection : EBSelection <NSImage?> {
    return self.lockImageView_property.selection
/*    if let model = self.propval {
      switch (model.lockImageView_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_lockImageView (_ inObserver : EBEvent) {
    self.lockImageView_property.addEBObserver (inObserver)
/*    self.mObserversOf_lockImageView.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.lockImageView_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_lockImageView (_ inObserver : EBEvent) {
    self.lockImageView_property.removeEBObserver (inObserver)
/*    self.mObserversOf_lockImageView.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.lockImageView_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private final var padNumberDisplay_property = EBGenericTransientProperty <EBShape?> ()
//  private final var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  final var padNumberDisplay_property_selection : EBSelection <EBShape?> {
    return self.padNumberDisplay_property.selection
/*    if let model = self.propval {
      switch (model.padNumberDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.padNumberDisplay_property.addEBObserver (inObserver)
/*    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNumberDisplay_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.padNumberDisplay_property.removeEBObserver (inObserver)
/*    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNumberDisplay_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backgroundImagePageBackgroundDisplay' transient property
  //····················································································································

  private final var backgroundImagePageBackgroundDisplay_property = EBGenericTransientProperty <EBShape?> ()
//  private final var mObserversOf_backgroundImagePageBackgroundDisplay = EBWeakEventSet ()

  //····················································································································

  final var backgroundImagePageBackgroundDisplay_property_selection : EBSelection <EBShape?> {
    return self.backgroundImagePageBackgroundDisplay_property.selection
/*    if let model = self.propval {
      switch (model.backgroundImagePageBackgroundDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backgroundImagePageBackgroundDisplay (_ inObserver : EBEvent) {
    self.backgroundImagePageBackgroundDisplay_property.addEBObserver (inObserver)
/*    self.mObserversOf_backgroundImagePageBackgroundDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backgroundImagePageBackgroundDisplay_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backgroundImagePageBackgroundDisplay (_ inObserver : EBEvent) {
    self.backgroundImagePageBackgroundDisplay_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backgroundImagePageBackgroundDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backgroundImagePageBackgroundDisplay_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'modelImageSizeString' transient property
  //····················································································································

  private final var modelImageSizeString_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_modelImageSizeString = EBWeakEventSet ()

  //····················································································································

  final var modelImageSizeString_property_selection : EBSelection <String?> {
    return self.modelImageSizeString_property.selection
/*    if let model = self.propval {
      switch (model.modelImageSizeString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_modelImageSizeString (_ inObserver : EBEvent) {
    self.modelImageSizeString_property.addEBObserver (inObserver)
/*    self.mObserversOf_modelImageSizeString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelImageSizeString_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_modelImageSizeString (_ inObserver : EBEvent) {
    self.modelImageSizeString_property.removeEBObserver (inObserver)
/*    self.mObserversOf_modelImageSizeString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelImageSizeString_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'hasModelImage' transient property
  //····················································································································

  private final var hasModelImage_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_hasModelImage = EBWeakEventSet ()

  //····················································································································

  final var hasModelImage_property_selection : EBSelection <Bool?> {
    return self.hasModelImage_property.selection
/*    if let model = self.propval {
      switch (model.hasModelImage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_hasModelImage (_ inObserver : EBEvent) {
    self.hasModelImage_property.addEBObserver (inObserver)
/*    self.mObserversOf_hasModelImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.hasModelImage_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_hasModelImage (_ inObserver : EBEvent) {
    self.hasModelImage_property.removeEBObserver (inObserver)
/*    self.mObserversOf_hasModelImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.hasModelImage_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'masterPadObjectIndexArray' transient property
  //····················································································································

  private final var masterPadObjectIndexArray_property = EBGenericTransientProperty <IntArray?> ()
//  private final var mObserversOf_masterPadObjectIndexArray = EBWeakEventSet ()

  //····················································································································

  final var masterPadObjectIndexArray_property_selection : EBSelection <IntArray?> {
    return self.masterPadObjectIndexArray_property.selection
/*    if let model = self.propval {
      switch (model.masterPadObjectIndexArray_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_masterPadObjectIndexArray (_ inObserver : EBEvent) {
    self.masterPadObjectIndexArray_property.addEBObserver (inObserver)
/*    self.mObserversOf_masterPadObjectIndexArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.masterPadObjectIndexArray_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_masterPadObjectIndexArray (_ inObserver : EBEvent) {
    self.masterPadObjectIndexArray_property.removeEBObserver (inObserver)
/*    self.mObserversOf_masterPadObjectIndexArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.masterPadObjectIndexArray_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var issues_property = EBGenericTransientProperty <CanariIssueArray?> ()
//  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final var issues_property_selection : EBSelection <CanariIssueArray?> {
    return self.issues_property.selection
/*    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.issues_property.addEBObserver (inObserver)
/*    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.issues_property.removeEBObserver (inObserver)
/*    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'noIssue' transient property
  //····················································································································

  private final var noIssue_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_noIssue = EBWeakEventSet ()

  //····················································································································

  final var noIssue_property_selection : EBSelection <Bool?> {
    return self.noIssue_property.selection
/*    if let model = self.propval {
      switch (model.noIssue_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.noIssue_property.addEBObserver (inObserver)
/*    self.mObserversOf_noIssue.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.noIssue_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.noIssue_property.removeEBObserver (inObserver)
/*    self.mObserversOf_noIssue.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.noIssue_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'segmentedControlSegmentIssueImage' transient property
  //····················································································································

  private final var segmentedControlSegmentIssueImage_property = EBGenericTransientProperty <NSImage?> ()
//  private final var mObserversOf_segmentedControlSegmentIssueImage = EBWeakEventSet ()

  //····················································································································

  final var segmentedControlSegmentIssueImage_property_selection : EBSelection <NSImage?> {
    return self.segmentedControlSegmentIssueImage_property.selection
/*    if let model = self.propval {
      switch (model.segmentedControlSegmentIssueImage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_segmentedControlSegmentIssueImage (_ inObserver : EBEvent) {
    self.segmentedControlSegmentIssueImage_property.addEBObserver (inObserver)
/*    self.mObserversOf_segmentedControlSegmentIssueImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.segmentedControlSegmentIssueImage_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_segmentedControlSegmentIssueImage (_ inObserver : EBEvent) {
    self.segmentedControlSegmentIssueImage_property.removeEBObserver (inObserver)
/*    self.mObserversOf_segmentedControlSegmentIssueImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.segmentedControlSegmentIssueImage_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'segmentedControlSegmentIssueString' transient property
  //····················································································································

  private final var segmentedControlSegmentIssueString_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_segmentedControlSegmentIssueString = EBWeakEventSet ()

  //····················································································································

  final var segmentedControlSegmentIssueString_property_selection : EBSelection <String?> {
    return self.segmentedControlSegmentIssueString_property.selection
/*    if let model = self.propval {
      switch (model.segmentedControlSegmentIssueString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_segmentedControlSegmentIssueString (_ inObserver : EBEvent) {
    self.segmentedControlSegmentIssueString_property.addEBObserver (inObserver)
/*    self.mObserversOf_segmentedControlSegmentIssueString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.segmentedControlSegmentIssueString_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_segmentedControlSegmentIssueString (_ inObserver : EBEvent) {
    self.segmentedControlSegmentIssueString_property.removeEBObserver (inObserver)
/*    self.mObserversOf_segmentedControlSegmentIssueString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.segmentedControlSegmentIssueString_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observable toMany property: mModelImageObjects
  //····················································································································

  private final var mObserversOf_mModelImageObjects = EBWeakEventSet ()

  //····················································································································

  final var mModelImageObjects_property_selection : EBSelection <[PackageModelImageDoublePoint]> {
    if let model = self.propval {
      switch (model.mModelImageObjects_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mModelImageObjects (_ inObserver : EBEvent) {
    self.mObserversOf_mModelImageObjects.insert (inObserver)
    if let object = self.propval {
      object.mModelImageObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mModelImageObjects (_ inObserver : EBEvent) {
    self.mObserversOf_mModelImageObjects.remove (inObserver)
    if let object = self.propval {
      object.mModelImageObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packageObjects
  //····················································································································

  private final var mObserversOf_packageObjects = EBWeakEventSet ()

  //····················································································································

  final var packageObjects_property_selection : EBSelection <[PackageObject]> {
    if let model = self.propval {
      switch (model.packageObjects_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_packageObjects (_ inObserver : EBEvent) {
    self.mObserversOf_packageObjects.insert (inObserver)
    if let object = self.propval {
      object.packageObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageObjects (_ inObserver : EBEvent) {
    self.mObserversOf_packageObjects.remove (inObserver)
    if let object = self.propval {
      object.packageObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packagePads
  //····················································································································

  private final var mObserversOf_packagePads = EBWeakEventSet ()

  //····················································································································

  final var packagePads_property_selection : EBSelection <[PackagePad]> {
    if let model = self.propval {
      switch (model.packagePads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_packagePads (_ inObserver : EBEvent) {
    self.mObserversOf_packagePads.insert (inObserver)
    if let object = self.propval {
      object.packagePads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packagePads (_ inObserver : EBEvent) {
    self.mObserversOf_packagePads.remove (inObserver)
    if let object = self.propval {
      object.packagePads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packageSlavePads
  //····················································································································

  private final var mObserversOf_packageSlavePads = EBWeakEventSet ()

  //····················································································································

  final var packageSlavePads_property_selection : EBSelection <[PackageSlavePad]> {
    if let model = self.propval {
      switch (model.packageSlavePads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_packageSlavePads (_ inObserver : EBEvent) {
    self.mObserversOf_packageSlavePads.insert (inObserver)
    if let object = self.propval {
      object.packageSlavePads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageSlavePads (_ inObserver : EBEvent) {
    self.mObserversOf_packageSlavePads.remove (inObserver)
    if let object = self.propval {
      object.packageSlavePads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: packageZones
  //····················································································································

  private final var mObserversOf_packageZones = EBWeakEventSet ()

  //····················································································································

  final var packageZones_property_selection : EBSelection <[PackageZone]> {
    if let model = self.propval {
      switch (model.packageZones_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_packageZones (_ inObserver : EBEvent) {
    self.mObserversOf_packageZones.insert (inObserver)
    if let object = self.propval {
      object.packageZones_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageZones (_ inObserver : EBEvent) {
    self.mObserversOf_packageZones.remove (inObserver)
    if let object = self.propval {
      object.packageZones_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure selectedPageIndex simple stored property
    self.selectedPageIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.selectedPageIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.selectedPageIndex_property)
  //--- Configure selectedInspector simple stored property
    self.selectedInspector_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.selectedInspector_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.selectedInspector_property)
  //--- Configure comments simple stored property
    self.comments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.comments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.comments_property)
  //--- Configure program simple stored property
    self.program_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.program_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.program_property)
  //--- Configure horizontalFlip simple stored property
    self.horizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.horizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.horizontalFlip_property)
  //--- Configure verticalFlip simple stored property
    self.verticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.verticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.verticalFlip_property)
  //--- Configure gridStyle simple stored property
    self.gridStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.gridStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.gridStyle_property)
  //--- Configure gridStep simple stored property
    self.gridStep_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.gridStep_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.gridStep_property)
  //--- Configure gridStepUnit simple stored property
    self.gridStepUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.gridStepUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.gridStepUnit_property)
  //--- Configure gridDisplayFactor simple stored property
    self.gridDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.gridDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.gridDisplayFactor_property)
  //--- Configure zoom simple stored property
    self.zoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.zoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.zoom_property)
  //--- Configure mModelImageOpacity simple stored property
    self.mModelImageOpacity_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImageOpacity_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImageOpacity_property)
  //--- Configure mModelImagePageHorizontalFlip simple stored property
    self.mModelImagePageHorizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImagePageHorizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImagePageHorizontalFlip_property)
  //--- Configure mModelImagePageVerticalFlip simple stored property
    self.mModelImagePageVerticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImagePageVerticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImagePageVerticalFlip_property)
  //--- Configure mModelImagePageGridStyle simple stored property
    self.mModelImagePageGridStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImagePageGridStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImagePageGridStyle_property)
  //--- Configure mModelImagePageGridStep simple stored property
    self.mModelImagePageGridStep_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImagePageGridStep_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImagePageGridStep_property)
  //--- Configure mModelImagePageGridStepUnit simple stored property
    self.mModelImagePageGridStepUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImagePageGridStepUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImagePageGridStepUnit_property)
  //--- Configure mModelImagePageGridDisplayFactor simple stored property
    self.mModelImagePageGridDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImagePageGridDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImagePageGridDisplayFactor_property)
  //--- Configure mModelImagePageZoom simple stored property
    self.mModelImagePageZoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImagePageZoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImagePageZoom_property)
  //--- Configure mModelImagePageXPlacardUnit simple stored property
    self.mModelImagePageXPlacardUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImagePageXPlacardUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImagePageXPlacardUnit_property)
  //--- Configure mModelImagePageYPlacardUnit simple stored property
    self.mModelImagePageYPlacardUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImagePageYPlacardUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImagePageYPlacardUnit_property)
  //--- Configure mModelImageSecondPointXUnit simple stored property
    self.mModelImageSecondPointXUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImageSecondPointXUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImageSecondPointXUnit_property)
  //--- Configure mModelImageSecondPointYUnit simple stored property
    self.mModelImageSecondPointYUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImageSecondPointYUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImageSecondPointYUnit_property)
  //--- Configure mModelImageFirstPointXOnLock simple stored property
    self.mModelImageFirstPointXOnLock_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImageFirstPointXOnLock_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImageFirstPointXOnLock_property)
  //--- Configure mModelImageFirstPointYOnLock simple stored property
    self.mModelImageFirstPointYOnLock_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImageFirstPointYOnLock_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImageFirstPointYOnLock_property)
  //--- Configure mModelImagePointsDxOnLock simple stored property
    self.mModelImagePointsDxOnLock_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImagePointsDxOnLock_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImagePointsDxOnLock_property)
  //--- Configure mModelImagePointsDyOnLock simple stored property
    self.mModelImagePointsDyOnLock_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImagePointsDyOnLock_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImagePointsDyOnLock_property)
  //--- Configure mModelImageScale simple stored property
    self.mModelImageScale_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImageScale_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImageScale_property)
  //--- Configure mModelImageRotationInRadians simple stored property
    self.mModelImageRotationInRadians_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImageRotationInRadians_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImageRotationInRadians_property)
  //--- Configure mDimensionUnitFirstModelPointX simple stored property
    self.mDimensionUnitFirstModelPointX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDimensionUnitFirstModelPointX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mDimensionUnitFirstModelPointX_property)
  //--- Configure mDimensionUnitFirstModelPointY simple stored property
    self.mDimensionUnitFirstModelPointY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDimensionUnitFirstModelPointY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mDimensionUnitFirstModelPointY_property)
  //--- Configure mDimensionUnitSecondModelPointDx simple stored property
    self.mDimensionUnitSecondModelPointDx_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDimensionUnitSecondModelPointDx_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mDimensionUnitSecondModelPointDx_property)
  //--- Configure mDimensionUnitSecondModelPointDy simple stored property
    self.mDimensionUnitSecondModelPointDy_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDimensionUnitSecondModelPointDy_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mDimensionUnitSecondModelPointDy_property)
  //--- Configure mModelPointsCircleRadius simple stored property
    self.mModelPointsCircleRadius_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelPointsCircleRadius_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelPointsCircleRadius_property)
  //--- Configure mPointsAreLocked simple stored property
    self.mPointsAreLocked_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mPointsAreLocked_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mPointsAreLocked_property)
  //--- Configure knobSizeMultpliedByTen simple stored property
    self.knobSizeMultpliedByTen_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.knobSizeMultpliedByTen_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.knobSizeMultpliedByTen_property)
  //--- Configure padNumbering simple stored property
    self.padNumbering_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.padNumbering_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.padNumbering_property)
  //--- Configure counterClockNumberingStartAngle simple stored property
    self.counterClockNumberingStartAngle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.counterClockNumberingStartAngle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.counterClockNumberingStartAngle_property)
  //--- Configure xPlacardUnit simple stored property
    self.xPlacardUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.xPlacardUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.xPlacardUnit_property)
  //--- Configure yPlacardUnit simple stored property
    self.yPlacardUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.yPlacardUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.yPlacardUnit_property)
  //--- Configure mModelImageData simple stored property
    self.mModelImageData_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mModelImageData_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mModelImageData_property)
  //--- Configure freePadNumbering transient property
    self.freePadNumbering_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.freePadNumbering_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.freePadNumbering_property)
  //--- Configure counterClockNumbering transient property
    self.counterClockNumbering_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.counterClockNumbering_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.counterClockNumbering_property)
  //--- Configure gridStepMultipliedByDisplayFactor transient property
    self.gridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.gridStepMultipliedByDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.gridStepMultipliedByDisplayFactor_property)
  //--- Configure secondPointX transient property
    self.secondPointX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.secondPointX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.secondPointX_property)
  //--- Configure secondPointY transient property
    self.secondPointY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.secondPointY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.secondPointY_property)
  //--- Configure lockImageView transient property
    self.lockImageView_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.lockImageView_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.lockImageView_property)
  //--- Configure padNumberDisplay transient property
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.padNumberDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.padNumberDisplay_property)
  //--- Configure backgroundImagePageBackgroundDisplay transient property
    self.backgroundImagePageBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backgroundImagePageBackgroundDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backgroundImagePageBackgroundDisplay_property)
  //--- Configure modelImageSizeString transient property
    self.modelImageSizeString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.modelImageSizeString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.modelImageSizeString_property)
  //--- Configure hasModelImage transient property
    self.hasModelImage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.hasModelImage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.hasModelImage_property)
  //--- Configure masterPadObjectIndexArray transient property
    self.masterPadObjectIndexArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.masterPadObjectIndexArray_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.masterPadObjectIndexArray_property)
  //--- Configure issues transient property
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.issues_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.issues_property)
  //--- Configure noIssue transient property
    self.noIssue_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.noIssue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.noIssue_property)
  //--- Configure segmentedControlSegmentIssueImage transient property
    self.segmentedControlSegmentIssueImage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.segmentedControlSegmentIssueImage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.segmentedControlSegmentIssueImage_property)
  //--- Configure segmentedControlSegmentIssueString transient property
    self.segmentedControlSegmentIssueString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.segmentedControlSegmentIssueString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.segmentedControlSegmentIssueString_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject PackageRoot
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_PackageRoot : ReadOnlyObject_PackageRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackageRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackageRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackageRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackageRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PackageRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PackageRoot : ReadOnlyObject_PackageRoot {

  //····················································································································
 
  func setProp (_ inValue : PackageRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PackageRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PackageRoot : ReadWriteObject_PackageRoot {

  //····················································································································

  private var mModel : ReadWriteObject_PackageRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackageRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackageRoot?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackageRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < PackageRoot? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackageRoot? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PackageRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PackageRoot : ReadWriteObject_PackageRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackageRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackageRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

