//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(PackageDocument) class PackageDocument : EBManagedDocument {

  //····················································································································
  //   Array controller: mPackageObjectsController
  //····················································································································

  var mPackageObjectsController = ArrayController_PackageDocument_mPackageObjectsController ()

  //····················································································································
  //   Selection controller: mPackageBezierCurveSelectionController
  //····················································································································

  var mPackageBezierCurveSelectionController = SelectionController_PackageDocument_mPackageBezierCurveSelectionController ()

  //····················································································································
  //   Selection controller: mPackageOvalSelectionController
  //····················································································································

  var mPackageOvalSelectionController = SelectionController_PackageDocument_mPackageOvalSelectionController ()

  //····················································································································
  //   Selection controller: mPackageArcSelectionController
  //····················································································································

  var mPackageArcSelectionController = SelectionController_PackageDocument_mPackageArcSelectionController ()

  //····················································································································
  //   Selection controller: mPackagePadSelectionController
  //····················································································································

  var mPackagePadSelectionController = SelectionController_PackageDocument_mPackagePadSelectionController ()

  //····················································································································
  //   Selection controller: mPackageSegmentSelectionController
  //····················································································································

  var mPackageSegmentSelectionController = SelectionController_PackageDocument_mPackageSegmentSelectionController ()

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  var documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.prop
  }

  //····················································································································

    var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusMessage
  //····················································································································

  var mStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  var mStatusMessage_property_selection : EBSelection <String> {
    return self.mStatusMessage_property.prop
  }

  //····················································································································

    var mStatusMessage : String? {
    switch self.mStatusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusImage
  //····················································································································

  var mStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  var mStatusImage_property_selection : EBSelection <NSImage> {
    return self.mStatusImage_property.prop
  }

  //····················································································································

    var mStatusImage : NSImage? {
    switch self.mStatusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddArcButton : CanariDragSourceButton?
  @IBOutlet var mAddBezierButton : CanariDragSourceButton?
  @IBOutlet var mAddOvalButton : CanariDragSourceButton?
  @IBOutlet var mAddPadButton : CanariDragSourceButton?
  @IBOutlet var mAddSegmentButton : CanariDragSourceButton?
  @IBOutlet var mArcAngle : CanariPackageArcAngleTextField?
  @IBOutlet var mArcEndTangentTextField : CanariDimensionTextField?
  @IBOutlet var mArcEndTangentUnitPopUp : EBPopUpButton?
  @IBOutlet var mArcInspectorView : CanariViewWithKeyView?
  @IBOutlet var mArcPathIsClosedSwitch : EBSwitch?
  @IBOutlet var mArcRadiusTextField : CanariDimensionTextField?
  @IBOutlet var mArcRadiusUnitPopUp : EBPopUpButton?
  @IBOutlet var mArcStartAngleSlider : CanariPackageArcAngleSlider?
  @IBOutlet var mArcStartAngleTextField : CanariPackageArcAngleTextField?
  @IBOutlet var mArcStartTangentTextField : CanariDimensionTextField?
  @IBOutlet var mArcStartTangentUnitPopUp : EBPopUpButton?
  @IBOutlet var mArcXCenterTextField : CanariDimensionTextField?
  @IBOutlet var mArcXCenterUnitPopUp : EBPopUpButton?
  @IBOutlet var mArcYCenterTextField : CanariDimensionTextField?
  @IBOutlet var mArcYCenterUnitPopUp : EBPopUpButton?
  @IBOutlet var mAutoNumberingInspectorView : CanariViewWithKeyView?
  @IBOutlet var mBaseInspectorView : NSView?
  @IBOutlet var mBezierCurveCPX1TextField : CanariDimensionTextField?
  @IBOutlet var mBezierCurveCPX1UnitPopUp : EBPopUpButton?
  @IBOutlet var mBezierCurveCPX2TextField : CanariDimensionTextField?
  @IBOutlet var mBezierCurveCPX2UnitPopUp : EBPopUpButton?
  @IBOutlet var mBezierCurveCPY1TextField : CanariDimensionTextField?
  @IBOutlet var mBezierCurveCPY1UnitPopUp : EBPopUpButton?
  @IBOutlet var mBezierCurveCPY2TextField : CanariDimensionTextField?
  @IBOutlet var mBezierCurveCPY2UnitPopUp : EBPopUpButton?
  @IBOutlet var mBezierCurveX1TextField : CanariDimensionTextField?
  @IBOutlet var mBezierCurveX1UnitPopUp : EBPopUpButton?
  @IBOutlet var mBezierCurveX2TextField : CanariDimensionTextField?
  @IBOutlet var mBezierCurveX2UnitPopUp : EBPopUpButton?
  @IBOutlet var mBezierCurveY1TextField : CanariDimensionTextField?
  @IBOutlet var mBezierCurveY1UnitPopUp : EBPopUpButton?
  @IBOutlet var mBezierCurveY2TextField : CanariDimensionTextField?
  @IBOutlet var mBezierCurveY2UnitPopUp : EBPopUpButton?
  @IBOutlet var mBezierInspectorView : CanariViewWithKeyView?
  @IBOutlet var mCommentTextView : EBTextView?
  @IBOutlet var mComposedPackageScrollView : EBScrollView?
  @IBOutlet var mComposedPackageView : EBView?
  @IBOutlet var mCrossColorOfPackageGridColorWell : EBColorWell?
  @IBOutlet var mDeselectIssueButton : EBButton?
  @IBOutlet var mDisplayInspectorView : CanariViewWithKeyView?
  @IBOutlet var mGridStep : EBPopUpButton?
  @IBOutlet var mGridStyle : EBPopUpButton?
  @IBOutlet var mGridZoomInspectorView : CanariViewWithKeyView?
  @IBOutlet var mHorizontalFlip : EBSwitch?
  @IBOutlet var mInfosPageView : CanariViewWithKeyView?
  @IBOutlet var mInspectorSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mIssueInspectorView : CanariViewWithKeyView?
  @IBOutlet var mIssueScrollView : NSScrollView?
  @IBOutlet var mIssueTableView : CanariIssueTableView?
  @IBOutlet var mIssueTextField : EBTextObserverField?
  @IBOutlet var mIssuesInspectorView : CanariViewWithKeyView?
  @IBOutlet var mLineColorOfPackageGridColorWell : EBColorWell?
  @IBOutlet var mMasterView : NSView?
  @IBOutlet var mOvalHeightTextField : CanariDimensionTextField?
  @IBOutlet var mOvalHeightUnitPopUp : EBPopUpButton?
  @IBOutlet var mOvalInspectorView : CanariViewWithKeyView?
  @IBOutlet var mOvalWidthTextField : CanariDimensionTextField?
  @IBOutlet var mOvalWidthUnitPopUp : EBPopUpButton?
  @IBOutlet var mOvalXTextField : CanariDimensionTextField?
  @IBOutlet var mOvalXUnitPopUp : EBPopUpButton?
  @IBOutlet var mOvalYTextField : CanariDimensionTextField?
  @IBOutlet var mOvalYUnitPopUp : EBPopUpButton?
  @IBOutlet var mPackageBackgroundColorColorWell : EBColorWell?
  @IBOutlet var mPackageColorColorWell : EBColorWell?
  @IBOutlet var mPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton?
  @IBOutlet var mPackagePageView : CanariViewWithKeyView?
  @IBOutlet var mPackageShapePopUpButton : EBPopUpButton?
  @IBOutlet var mPackageStylePopUpButton : EBPopUpButton?
  @IBOutlet var mPadAnnularRingTextField : CanariDimensionObserverTextField?
  @IBOutlet var mPadAnnularRingUnitPopUp : EBPopUpButton?
  @IBOutlet var mPadHeightTextField : CanariDimensionTextField?
  @IBOutlet var mPadHeightUnitPopUp : EBPopUpButton?
  @IBOutlet var mPadHoleDiameterTextField : CanariDimensionTextField?
  @IBOutlet var mPadHoleDiameterUnitPopUp : EBPopUpButton?
  @IBOutlet var mPadInspectorView : CanariViewWithKeyView?
  @IBOutlet var mPadNumberTextField : EBIntObserverField?
  @IBOutlet var mPadPageView : CanariViewWithKeyView?
  @IBOutlet var mPadRenumberingPullDownButton : CanariPadRenumberingPullDownButton?
  @IBOutlet var mPadStyleView : NSView?
  @IBOutlet var mPadWidthTextField : CanariDimensionTextField?
  @IBOutlet var mPadWidthUnitPopUp : EBPopUpButton?
  @IBOutlet var mPadXCenterTextField : CanariDimensionTextField?
  @IBOutlet var mPadXCenterUnitPopUp : EBPopUpButton?
  @IBOutlet var mPadYCenterTextField : CanariDimensionTextField?
  @IBOutlet var mPadYCenterUnitPopUp : EBPopUpButton?
  @IBOutlet var mPageSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mProgramPageView : CanariViewWithKeyView?
  @IBOutlet var mResetVersionButton : EBButton?
  @IBOutlet var mSegmentInspectorView : CanariViewWithKeyView?
  @IBOutlet var mSegmentX1TextField : CanariDimensionTextField?
  @IBOutlet var mSegmentX1UnitPopUp : EBPopUpButton?
  @IBOutlet var mSegmentX2TextField : CanariDimensionTextField?
  @IBOutlet var mSegmentX2UnitPopUp : EBPopUpButton?
  @IBOutlet var mSegmentY1TextField : CanariDimensionTextField?
  @IBOutlet var mSegmentY1UnitPopUp : EBPopUpButton?
  @IBOutlet var mSegmentY2TextField : CanariDimensionTextField?
  @IBOutlet var mSegmentY2UnitPopUp : EBPopUpButton?
  @IBOutlet var mSelectedObjectsInspectorView : CanariViewWithKeyView?
  @IBOutlet var mSignatureTextField : CanariSignatureField?
  @IBOutlet var mStatusImageViewInToolbar : EBImageObserverView?
  @IBOutlet var mVersionField : CanariVersionField?
  @IBOutlet var mVerticalFlip : EBSwitch?
  @IBOutlet var mXPlacardUnitPopUpButton : EBPopUpButton?
  @IBOutlet var mYPlacardUnitPopUpButton : EBPopUpButton?

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  var mController_mPadStyleView_hidden : MultipleBindingController_hidden? = nil
  var mController_mDeselectIssueButton_hidden : MultipleBindingController_hidden? = nil
  var mController_mIssueScrollView_hidden : MultipleBindingController_hidden? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: mPackageObjectsController
    self.mPackageObjectsController.addExplorer (name: "mPackageObjectsController", y:&y, view:view)
  //--- Selection controller property: mPackageBezierCurveSelectionController
    self.mPackageBezierCurveSelectionController.addExplorer (name: "mPackageBezierCurveSelectionController", y:&y, view:view)
  //--- Selection controller property: mPackageOvalSelectionController
    self.mPackageOvalSelectionController.addExplorer (name: "mPackageOvalSelectionController", y:&y, view:view)
  //--- Selection controller property: mPackageArcSelectionController
    self.mPackageArcSelectionController.addExplorer (name: "mPackageArcSelectionController", y:&y, view:view)
  //--- Selection controller property: mPackagePadSelectionController
    self.mPackagePadSelectionController.addExplorer (name: "mPackagePadSelectionController", y:&y, view:view)
  //--- Selection controller property: mPackageSegmentSelectionController
    self.mPackageSegmentSelectionController.addExplorer (name: "mPackageSegmentSelectionController", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName : NSNib.Name {
    return NSNib.Name ("PackageDocument")
  }
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "PackageRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : PackageRoot { get { return mRootObject as! PackageRoot } }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
  //--------------------------- Outlet checking
    if let outlet : Any = self.mAddArcButton {
      if !(outlet is CanariDragSourceButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAddArcButton' outlet is not an instance of 'CanariDragSourceButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAddArcButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mAddBezierButton {
      if !(outlet is CanariDragSourceButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAddBezierButton' outlet is not an instance of 'CanariDragSourceButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAddBezierButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mAddOvalButton {
      if !(outlet is CanariDragSourceButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAddOvalButton' outlet is not an instance of 'CanariDragSourceButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAddOvalButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mAddPadButton {
      if !(outlet is CanariDragSourceButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAddPadButton' outlet is not an instance of 'CanariDragSourceButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAddPadButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mAddSegmentButton {
      if !(outlet is CanariDragSourceButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAddSegmentButton' outlet is not an instance of 'CanariDragSourceButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAddSegmentButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcAngle {
      if !(outlet is CanariPackageArcAngleTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcAngle' outlet is not an instance of 'CanariPackageArcAngleTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcAngle' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcEndTangentTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcEndTangentTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcEndTangentTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcEndTangentUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcEndTangentUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcEndTangentUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcPathIsClosedSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcPathIsClosedSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcPathIsClosedSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcRadiusTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcRadiusTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcRadiusTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcRadiusUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcRadiusUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcRadiusUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcStartAngleSlider {
      if !(outlet is CanariPackageArcAngleSlider) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcStartAngleSlider' outlet is not an instance of 'CanariPackageArcAngleSlider'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcStartAngleSlider' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcStartAngleTextField {
      if !(outlet is CanariPackageArcAngleTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcStartAngleTextField' outlet is not an instance of 'CanariPackageArcAngleTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcStartAngleTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcStartTangentTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcStartTangentTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcStartTangentTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcStartTangentUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcStartTangentUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcStartTangentUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcXCenterTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcXCenterTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcXCenterTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcXCenterUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcXCenterUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcXCenterUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcYCenterTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcYCenterTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcYCenterTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mArcYCenterUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mArcYCenterUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mArcYCenterUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mAutoNumberingInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAutoNumberingInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAutoNumberingInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mBaseInspectorView {
      if !(outlet is NSView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBaseInspectorView' outlet is not an instance of 'NSView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBaseInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveCPX1TextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveCPX1TextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveCPX1TextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveCPX1UnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveCPX1UnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveCPX1UnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveCPX2TextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveCPX2TextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveCPX2TextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveCPX2UnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveCPX2UnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveCPX2UnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveCPY1TextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveCPY1TextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveCPY1TextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveCPY1UnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveCPY1UnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveCPY1UnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveCPY2TextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveCPY2TextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveCPY2TextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveCPY2UnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveCPY2UnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveCPY2UnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveX1TextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveX1TextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveX1TextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveX1UnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveX1UnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveX1UnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveX2TextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveX2TextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveX2TextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveX2UnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveX2UnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveX2UnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveY1TextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveY1TextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveY1TextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveY1UnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveY1UnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveY1UnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveY2TextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveY2TextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveY2TextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierCurveY2UnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierCurveY2UnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierCurveY2UnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mBezierInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mBezierInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mBezierInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mCommentTextView {
      if !(outlet is EBTextView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mCommentTextView' outlet is not an instance of 'EBTextView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mCommentTextView' outlet is nil"
      )
    }
    if let outlet : Any = self.mComposedPackageScrollView {
      if !(outlet is EBScrollView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mComposedPackageScrollView' outlet is not an instance of 'EBScrollView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mComposedPackageScrollView' outlet is nil"
      )
    }
    if let outlet : Any = self.mComposedPackageView {
      if !(outlet is EBView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mComposedPackageView' outlet is not an instance of 'EBView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mComposedPackageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mCrossColorOfPackageGridColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mCrossColorOfPackageGridColorWell' outlet is not an instance of 'EBColorWell'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mCrossColorOfPackageGridColorWell' outlet is nil"
      )
    }
    if let outlet : Any = self.mDeselectIssueButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mDeselectIssueButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mDeselectIssueButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mDisplayInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mDisplayInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mDisplayInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mGridStep {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mGridStep' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mGridStep' outlet is nil"
      )
    }
    if let outlet : Any = self.mGridStyle {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mGridStyle' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mGridStyle' outlet is nil"
      )
    }
    if let outlet : Any = self.mGridZoomInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mGridZoomInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mGridZoomInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mHorizontalFlip {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mHorizontalFlip' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mHorizontalFlip' outlet is nil"
      )
    }
    if let outlet : Any = self.mInfosPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mInfosPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mInfosPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mInspectorSegmentedControl {
      if !(outlet is CanariSegmentedControl) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mInspectorSegmentedControl' outlet is not an instance of 'CanariSegmentedControl'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mInspectorSegmentedControl' outlet is nil"
      )
    }
    if let outlet : Any = self.mIssueInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mIssueInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mIssueInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mIssueScrollView {
      if !(outlet is NSScrollView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mIssueScrollView' outlet is not an instance of 'NSScrollView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mIssueScrollView' outlet is nil"
      )
    }
    if let outlet : Any = self.mIssueTableView {
      if !(outlet is CanariIssueTableView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mIssueTableView' outlet is not an instance of 'CanariIssueTableView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mIssueTableView' outlet is nil"
      )
    }
    if let outlet : Any = self.mIssueTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mIssueTextField' outlet is not an instance of 'EBTextObserverField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mIssueTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mIssuesInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mIssuesInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mIssuesInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mLineColorOfPackageGridColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mLineColorOfPackageGridColorWell' outlet is not an instance of 'EBColorWell'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mLineColorOfPackageGridColorWell' outlet is nil"
      )
    }
    if let outlet : Any = self.mMasterView {
      if !(outlet is NSView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mMasterView' outlet is not an instance of 'NSView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mMasterView' outlet is nil"
      )
    }
    if let outlet : Any = self.mOvalHeightTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mOvalHeightTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mOvalHeightTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mOvalHeightUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mOvalHeightUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mOvalHeightUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mOvalInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mOvalInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mOvalInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mOvalWidthTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mOvalWidthTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mOvalWidthTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mOvalWidthUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mOvalWidthUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mOvalWidthUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mOvalXTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mOvalXTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mOvalXTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mOvalXUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mOvalXUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mOvalXUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mOvalYTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mOvalYTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mOvalYTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mOvalYUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mOvalYUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mOvalYUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageBackgroundColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageBackgroundColorColorWell' outlet is not an instance of 'EBColorWell'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageBackgroundColorColorWell' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageColorColorWell' outlet is not an instance of 'EBColorWell'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageColorColorWell' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageDrawingWidthMultipliedByTenPopupButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageDrawingWidthMultipliedByTenPopupButton' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageDrawingWidthMultipliedByTenPopupButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackagePageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackagePageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackagePageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageShapePopUpButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageShapePopUpButton' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageShapePopUpButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageStylePopUpButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageStylePopUpButton' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageStylePopUpButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadAnnularRingTextField {
      if !(outlet is CanariDimensionObserverTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadAnnularRingTextField' outlet is not an instance of 'CanariDimensionObserverTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadAnnularRingTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadAnnularRingUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadAnnularRingUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadAnnularRingUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadHeightTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadHeightTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadHeightTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadHeightUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadHeightUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadHeightUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadHoleDiameterTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadHoleDiameterTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadHoleDiameterTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadHoleDiameterUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadHoleDiameterUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadHoleDiameterUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadNumberTextField {
      if !(outlet is EBIntObserverField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadNumberTextField' outlet is not an instance of 'EBIntObserverField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadNumberTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadRenumberingPullDownButton {
      if !(outlet is CanariPadRenumberingPullDownButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadRenumberingPullDownButton' outlet is not an instance of 'CanariPadRenumberingPullDownButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadRenumberingPullDownButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadStyleView {
      if !(outlet is NSView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadStyleView' outlet is not an instance of 'NSView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadStyleView' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadWidthTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadWidthTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadWidthTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadWidthUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadWidthUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadWidthUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadXCenterTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadXCenterTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadXCenterTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadXCenterUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadXCenterUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadXCenterUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadYCenterTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadYCenterTextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadYCenterTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mPadYCenterUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPadYCenterUnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPadYCenterUnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mPageSegmentedControl {
      if !(outlet is CanariSegmentedControl) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPageSegmentedControl' outlet is not an instance of 'CanariSegmentedControl'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPageSegmentedControl' outlet is nil"
      )
    }
    if let outlet : Any = self.mProgramPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mProgramPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mProgramPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mResetVersionButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mResetVersionButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mResetVersionButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mSegmentInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSegmentInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSegmentInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mSegmentX1TextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSegmentX1TextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSegmentX1TextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mSegmentX1UnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSegmentX1UnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSegmentX1UnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mSegmentX2TextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSegmentX2TextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSegmentX2TextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mSegmentX2UnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSegmentX2UnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSegmentX2UnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mSegmentY1TextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSegmentY1TextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSegmentY1TextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mSegmentY1UnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSegmentY1UnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSegmentY1UnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mSegmentY2TextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSegmentY2TextField' outlet is not an instance of 'CanariDimensionTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSegmentY2TextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mSegmentY2UnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSegmentY2UnitPopUp' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSegmentY2UnitPopUp' outlet is nil"
      )
    }
    if let outlet : Any = self.mSelectedObjectsInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSelectedObjectsInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSelectedObjectsInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mSignatureTextField {
      if !(outlet is CanariSignatureField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSignatureTextField' outlet is not an instance of 'CanariSignatureField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSignatureTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mStatusImageViewInToolbar {
      if !(outlet is EBImageObserverView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mStatusImageViewInToolbar' outlet is not an instance of 'EBImageObserverView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mStatusImageViewInToolbar' outlet is nil"
      )
    }
    if let outlet : Any = self.mVersionField {
      if !(outlet is CanariVersionField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mVersionField' outlet is not an instance of 'CanariVersionField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mVersionField' outlet is nil"
      )
    }
    if let outlet : Any = self.mVerticalFlip {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mVerticalFlip' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mVerticalFlip' outlet is nil"
      )
    }
    if let outlet : Any = self.mXPlacardUnitPopUpButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mXPlacardUnitPopUpButton' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mXPlacardUnitPopUpButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mYPlacardUnitPopUpButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mYPlacardUnitPopUpButton' outlet is not an instance of 'EBPopUpButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mYPlacardUnitPopUpButton' outlet is nil"
      )
    }
  //--- Array controller property: mPackageObjectsController
    self.mPackageObjectsController.bind_model (self.rootObject.packageObjects_property)
  //--- Selection controller property: mPackageBezierCurveSelectionController
    self.mPackageBezierCurveSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property, file: #file, line: #line)
  //--- Selection controller property: mPackageOvalSelectionController
    self.mPackageOvalSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property, file: #file, line: #line)
  //--- Selection controller property: mPackageArcSelectionController
    self.mPackageArcSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property, file: #file, line: #line)
  //--- Selection controller property: mPackagePadSelectionController
    self.mPackagePadSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property, file: #file, line: #line)
  //--- Selection controller property: mPackageSegmentSelectionController
    self.mPackageSegmentSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property, file: #file, line: #line)
  //--- Atomic property: mStatusMessage
    self.mStatusMessage_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageDocument_mStatusMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mStatusMessage_property)
  //--- Atomic property: mStatusImage
    self.mStatusImage_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageDocument_mStatusImage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mStatusImage_property)
    self.mPackageObjectsController.bind_ebView (self.mComposedPackageView)
  //--------------------------- Install regular bindings
    self.mPageSegmentedControl?.bind_selectedPage (self.rootObject.selectedPageIndex_property, file: #file, line: #line)
    self.mSignatureTextField?.bind_signature (self.signatureObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_version (self.versionObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_versionShouldChange (self.versionShouldChangeObserver_property, file: #file, line: #line)
    self.mInspectorSegmentedControl?.bind_selectedPage (self.rootObject.selectedInspector_property, file: #file, line: #line)
    self.mSegmentX1UnitPopUp?.bind_selectedTag (self.mPackageSegmentSelectionController.x1Unit_property, file: #file, line: #line)
    self.mSegmentX1TextField?.bind_dimensionAndUnit (self.mPackageSegmentSelectionController.x1_property, self.mPackageSegmentSelectionController.x1Unit_property, file: #file, line: #line)
    self.mSegmentY1UnitPopUp?.bind_selectedTag (self.mPackageSegmentSelectionController.y1Unit_property, file: #file, line: #line)
    self.mSegmentY1TextField?.bind_dimensionAndUnit (self.mPackageSegmentSelectionController.y1_property, self.mPackageSegmentSelectionController.y1Unit_property, file: #file, line: #line)
    self.mSegmentX2UnitPopUp?.bind_selectedTag (self.mPackageSegmentSelectionController.x2Unit_property, file: #file, line: #line)
    self.mSegmentX2TextField?.bind_dimensionAndUnit (self.mPackageSegmentSelectionController.x2_property, self.mPackageSegmentSelectionController.x2Unit_property, file: #file, line: #line)
    self.mSegmentY2UnitPopUp?.bind_selectedTag (self.mPackageSegmentSelectionController.y2Unit_property, file: #file, line: #line)
    self.mSegmentY2TextField?.bind_dimensionAndUnit (self.mPackageSegmentSelectionController.y2_property, self.mPackageSegmentSelectionController.y2Unit_property, file: #file, line: #line)
    self.mBezierCurveX1UnitPopUp?.bind_selectedTag (self.mPackageBezierCurveSelectionController.x1Unit_property, file: #file, line: #line)
    self.mBezierCurveX1TextField?.bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.x1_property, self.mPackageBezierCurveSelectionController.x1Unit_property, file: #file, line: #line)
    self.mBezierCurveY1UnitPopUp?.bind_selectedTag (self.mPackageBezierCurveSelectionController.y1Unit_property, file: #file, line: #line)
    self.mBezierCurveY1TextField?.bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.y1_property, self.mPackageBezierCurveSelectionController.y1Unit_property, file: #file, line: #line)
    self.mBezierCurveX2UnitPopUp?.bind_selectedTag (self.mPackageBezierCurveSelectionController.x2Unit_property, file: #file, line: #line)
    self.mBezierCurveX2TextField?.bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.x2_property, self.mPackageBezierCurveSelectionController.x2Unit_property, file: #file, line: #line)
    self.mBezierCurveY2UnitPopUp?.bind_selectedTag (self.mPackageBezierCurveSelectionController.y2Unit_property, file: #file, line: #line)
    self.mBezierCurveY2TextField?.bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.y2_property, self.mPackageBezierCurveSelectionController.y2Unit_property, file: #file, line: #line)
    self.mBezierCurveCPX1UnitPopUp?.bind_selectedTag (self.mPackageBezierCurveSelectionController.cpx1Unit_property, file: #file, line: #line)
    self.mBezierCurveCPX1TextField?.bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.cpx1_property, self.mPackageBezierCurveSelectionController.cpx1Unit_property, file: #file, line: #line)
    self.mBezierCurveCPY1UnitPopUp?.bind_selectedTag (self.mPackageBezierCurveSelectionController.cpy1Unit_property, file: #file, line: #line)
    self.mBezierCurveCPY1TextField?.bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.cpy1_property, self.mPackageBezierCurveSelectionController.cpy1Unit_property, file: #file, line: #line)
    self.mBezierCurveCPX2UnitPopUp?.bind_selectedTag (self.mPackageBezierCurveSelectionController.cpx2Unit_property, file: #file, line: #line)
    self.mBezierCurveCPX2TextField?.bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.cpx2_property, self.mPackageBezierCurveSelectionController.cpx2Unit_property, file: #file, line: #line)
    self.mBezierCurveCPY2UnitPopUp?.bind_selectedTag (self.mPackageBezierCurveSelectionController.cpy2Unit_property, file: #file, line: #line)
    self.mBezierCurveCPY2TextField?.bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.cpy2_property, self.mPackageBezierCurveSelectionController.cpy2Unit_property, file: #file, line: #line)
    self.mOvalXUnitPopUp?.bind_selectedTag (self.mPackageOvalSelectionController.xUnit_property, file: #file, line: #line)
    self.mOvalXTextField?.bind_dimensionAndUnit (self.mPackageOvalSelectionController.x_property, self.mPackageOvalSelectionController.xUnit_property, file: #file, line: #line)
    self.mOvalYUnitPopUp?.bind_selectedTag (self.mPackageOvalSelectionController.yUnit_property, file: #file, line: #line)
    self.mOvalYTextField?.bind_dimensionAndUnit (self.mPackageOvalSelectionController.y_property, self.mPackageOvalSelectionController.yUnit_property, file: #file, line: #line)
    self.mOvalWidthUnitPopUp?.bind_selectedTag (self.mPackageOvalSelectionController.widthUnit_property, file: #file, line: #line)
    self.mOvalWidthTextField?.bind_dimensionAndUnit (self.mPackageOvalSelectionController.width_property, self.mPackageOvalSelectionController.widthUnit_property, file: #file, line: #line)
    self.mOvalHeightUnitPopUp?.bind_selectedTag (self.mPackageOvalSelectionController.heightUnit_property, file: #file, line: #line)
    self.mOvalHeightTextField?.bind_dimensionAndUnit (self.mPackageOvalSelectionController.height_property, self.mPackageOvalSelectionController.heightUnit_property, file: #file, line: #line)
    self.mArcRadiusUnitPopUp?.bind_selectedTag (self.mPackageArcSelectionController.radiusUnit_property, file: #file, line: #line)
    self.mArcRadiusTextField?.bind_dimensionAndUnit (self.mPackageArcSelectionController.radius_property, self.mPackageArcSelectionController.radiusUnit_property, file: #file, line: #line)
    self.mArcXCenterUnitPopUp?.bind_selectedTag (self.mPackageArcSelectionController.xCenterUnit_property, file: #file, line: #line)
    self.mArcXCenterTextField?.bind_dimensionAndUnit (self.mPackageArcSelectionController.xCenter_property, self.mPackageArcSelectionController.xCenterUnit_property, file: #file, line: #line)
    self.mArcYCenterUnitPopUp?.bind_selectedTag (self.mPackageArcSelectionController.yCenterUnit_property, file: #file, line: #line)
    self.mArcYCenterTextField?.bind_dimensionAndUnit (self.mPackageArcSelectionController.yCenter_property, self.mPackageArcSelectionController.yCenterUnit_property, file: #file, line: #line)
    self.mArcStartTangentUnitPopUp?.bind_selectedTag (self.mPackageArcSelectionController.startTangentLengthUnit_property, file: #file, line: #line)
    self.mArcStartTangentTextField?.bind_dimensionAndUnit (self.mPackageArcSelectionController.startTangentLength_property, self.mPackageArcSelectionController.startTangentLengthUnit_property, file: #file, line: #line)
    self.mArcEndTangentUnitPopUp?.bind_selectedTag (self.mPackageArcSelectionController.endTangentLengthUnit_property, file: #file, line: #line)
    self.mArcEndTangentTextField?.bind_dimensionAndUnit (self.mPackageArcSelectionController.endTangentLength_property, self.mPackageArcSelectionController.endTangentLengthUnit_property, file: #file, line: #line)
    self.mArcPathIsClosedSwitch?.bind_value (self.mPackageArcSelectionController.pathIsClosed_property, file: #file, line: #line)
    self.mArcStartAngleTextField?.bind_angle (self.mPackageArcSelectionController.startAngle_property, file: #file, line: #line)
    self.mArcStartAngleSlider?.bind_angle (self.mPackageArcSelectionController.startAngle_property, file: #file, line: #line)
    self.mArcAngle?.bind_angle (self.mPackageArcSelectionController.arcAngle_property, file: #file, line: #line)
    self.mPackageShapePopUpButton?.bind_selectedIndex (self.mPackagePadSelectionController.padShape_property, file: #file, line: #line)
    self.mPackageStylePopUpButton?.bind_selectedIndex (self.mPackagePadSelectionController.padStyle_property, file: #file, line: #line)
    self.mPadXCenterUnitPopUp?.bind_selectedTag (self.mPackagePadSelectionController.xCenterUnit_property, file: #file, line: #line)
    self.mPadXCenterTextField?.bind_dimensionAndUnit (self.mPackagePadSelectionController.xCenter_property, self.mPackagePadSelectionController.xCenterUnit_property, file: #file, line: #line)
    self.mPadYCenterUnitPopUp?.bind_selectedTag (self.mPackagePadSelectionController.yCenterUnit_property, file: #file, line: #line)
    self.mPadYCenterTextField?.bind_dimensionAndUnit (self.mPackagePadSelectionController.yCenter_property, self.mPackagePadSelectionController.yCenterUnit_property, file: #file, line: #line)
    self.mPadWidthUnitPopUp?.bind_selectedTag (self.mPackagePadSelectionController.widthUnit_property, file: #file, line: #line)
    self.mPadWidthTextField?.bind_dimensionAndUnit (self.mPackagePadSelectionController.width_property, self.mPackagePadSelectionController.widthUnit_property, file: #file, line: #line)
    self.mPadHeightUnitPopUp?.bind_selectedTag (self.mPackagePadSelectionController.heightUnit_property, file: #file, line: #line)
    self.mPadHeightTextField?.bind_dimensionAndUnit (self.mPackagePadSelectionController.height_property, self.mPackagePadSelectionController.heightUnit_property, file: #file, line: #line)
    self.mPadHoleDiameterUnitPopUp?.bind_selectedTag (self.mPackagePadSelectionController.holeDiameterUnit_property, file: #file, line: #line)
    self.mPadHoleDiameterTextField?.bind_dimensionAndUnit (self.mPackagePadSelectionController.holeDiameter_property, self.mPackagePadSelectionController.holeDiameterUnit_property, file: #file, line: #line)
    self.mPadAnnularRingUnitPopUp?.bind_selectedTag (self.mPackagePadSelectionController.annularRingUnit_property, file: #file, line: #line)
    self.mPadAnnularRingTextField?.bind_dimensionAndUnit (self.mPackagePadSelectionController.annularRing_property, self.mPackagePadSelectionController.annularRingUnit_property, file: #file, line: #line)
    self.mPadNumberTextField?.bind_valueObserver (self.mPackagePadSelectionController.padNumber_property, file: #file, line: #line, autoFormatter:true)
    self.mPadRenumberingPullDownButton?.bind_currentNumber (self.mPackagePadSelectionController.padNumber_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_image (self.mStatusImage_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_tooltip (self.mStatusMessage_property, file: #file, line: #line)
    self.mIssueTextField?.bind_valueObserver (self.mStatusMessage_property, file: #file, line: #line)
    self.mIssueTableView?.bind_issues (self.rootObject.issues_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_horizontalFlip (self.rootObject.horizontalFlip_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_verticalFlip (self.rootObject.verticalFlip_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_gridStyle (self.rootObject.gridStyle_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_gridStepFactor (self.rootObject.gridStep_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_gridLineColor (g_Preferences!.lineColorOfPackageGrid_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_gridCrossColor (g_Preferences!.crossColorOfPackageGrid_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_zoom (self.rootObject.zoom_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_backColor (g_Preferences!.packageBackgroundColor_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_xPlacardUnit (self.rootObject.xPlacardUnit_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_yPlacardUnit (self.rootObject.yPlacardUnit_property, file: #file, line: #line)
    self.mHorizontalFlip?.bind_value (self.rootObject.horizontalFlip_property, file: #file, line: #line)
    self.mVerticalFlip?.bind_value (self.rootObject.verticalFlip_property, file: #file, line: #line)
    self.mGridStyle?.bind_selectedIndex (self.rootObject.gridStyle_property, file: #file, line: #line)
    self.mGridStep?.bind_selectedTag (self.rootObject.gridStep_property, file: #file, line: #line)
    self.mXPlacardUnitPopUpButton?.bind_selectedTag (self.rootObject.xPlacardUnit_property, file: #file, line: #line)
    self.mYPlacardUnitPopUpButton?.bind_selectedTag (self.rootObject.yPlacardUnit_property, file: #file, line: #line)
    self.mCrossColorOfPackageGridColorWell?.bind_color (g_Preferences!.crossColorOfPackageGrid_property, file: #file, line: #line, sendContinously:false)
    self.mLineColorOfPackageGridColorWell?.bind_color (g_Preferences!.lineColorOfPackageGrid_property, file: #file, line: #line, sendContinously:false)
    self.mPackageColorColorWell?.bind_color (g_Preferences!.packageColor_property, file: #file, line: #line, sendContinously:false)
    self.mPackageBackgroundColorColorWell?.bind_color (g_Preferences!.packageBackgroundColor_property, file: #file, line: #line, sendContinously:false)
    self.mPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (g_Preferences!.packageDrawingWidthMultipliedByTen_property, file: #file, line: #line)
    self.mCommentTextView?.bind_value (self.rootObject.comments_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return !self.mPackagePadSelectionController.padIsTraversing_property_selection
        },
        outlet:self.mPadStyleView
      )
      self.mPackagePadSelectionController.padIsTraversing_property.addEBObserver (controller)
      mController_mPadStyleView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return self.rootObject.noIssue_property_selection
        },
        outlet:self.mDeselectIssueButton
      )
      self.rootObject.noIssue_property.addEBObserver (controller)
      mController_mDeselectIssueButton_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return self.rootObject.noIssue_property_selection
        },
        outlet:self.mIssueScrollView
      )
      self.rootObject.noIssue_property.addEBObserver (controller)
      mController_mIssueScrollView_hidden = controller
    }
  //--------------------------- Set targets / actions
    self.mResetVersionButton?.target = self
    self.mResetVersionButton?.action = #selector (PackageDocument.resetVersionAction (_:))
  //--------------------------- Update display
    super.windowControllerDidLoadNib (aController)
    flushEvents ()
  }

  //····················································································································
  //   removeWindowController
  //····················································································································

  override func removeUserInterface () {
  //--------------------------- Unbind regular bindings
    self.mPageSegmentedControl?.unbind_selectedPage ()
    self.mSignatureTextField?.unbind_signature ()
    self.mVersionField?.unbind_version ()
    self.mVersionField?.unbind_versionShouldChange ()
    self.mInspectorSegmentedControl?.unbind_selectedPage ()
    self.mSegmentX1UnitPopUp?.unbind_selectedTag ()
    self.mSegmentX1TextField?.unbind_dimensionAndUnit ()
    self.mSegmentY1UnitPopUp?.unbind_selectedTag ()
    self.mSegmentY1TextField?.unbind_dimensionAndUnit ()
    self.mSegmentX2UnitPopUp?.unbind_selectedTag ()
    self.mSegmentX2TextField?.unbind_dimensionAndUnit ()
    self.mSegmentY2UnitPopUp?.unbind_selectedTag ()
    self.mSegmentY2TextField?.unbind_dimensionAndUnit ()
    self.mBezierCurveX1UnitPopUp?.unbind_selectedTag ()
    self.mBezierCurveX1TextField?.unbind_dimensionAndUnit ()
    self.mBezierCurveY1UnitPopUp?.unbind_selectedTag ()
    self.mBezierCurveY1TextField?.unbind_dimensionAndUnit ()
    self.mBezierCurveX2UnitPopUp?.unbind_selectedTag ()
    self.mBezierCurveX2TextField?.unbind_dimensionAndUnit ()
    self.mBezierCurveY2UnitPopUp?.unbind_selectedTag ()
    self.mBezierCurveY2TextField?.unbind_dimensionAndUnit ()
    self.mBezierCurveCPX1UnitPopUp?.unbind_selectedTag ()
    self.mBezierCurveCPX1TextField?.unbind_dimensionAndUnit ()
    self.mBezierCurveCPY1UnitPopUp?.unbind_selectedTag ()
    self.mBezierCurveCPY1TextField?.unbind_dimensionAndUnit ()
    self.mBezierCurveCPX2UnitPopUp?.unbind_selectedTag ()
    self.mBezierCurveCPX2TextField?.unbind_dimensionAndUnit ()
    self.mBezierCurveCPY2UnitPopUp?.unbind_selectedTag ()
    self.mBezierCurveCPY2TextField?.unbind_dimensionAndUnit ()
    self.mOvalXUnitPopUp?.unbind_selectedTag ()
    self.mOvalXTextField?.unbind_dimensionAndUnit ()
    self.mOvalYUnitPopUp?.unbind_selectedTag ()
    self.mOvalYTextField?.unbind_dimensionAndUnit ()
    self.mOvalWidthUnitPopUp?.unbind_selectedTag ()
    self.mOvalWidthTextField?.unbind_dimensionAndUnit ()
    self.mOvalHeightUnitPopUp?.unbind_selectedTag ()
    self.mOvalHeightTextField?.unbind_dimensionAndUnit ()
    self.mArcRadiusUnitPopUp?.unbind_selectedTag ()
    self.mArcRadiusTextField?.unbind_dimensionAndUnit ()
    self.mArcXCenterUnitPopUp?.unbind_selectedTag ()
    self.mArcXCenterTextField?.unbind_dimensionAndUnit ()
    self.mArcYCenterUnitPopUp?.unbind_selectedTag ()
    self.mArcYCenterTextField?.unbind_dimensionAndUnit ()
    self.mArcStartTangentUnitPopUp?.unbind_selectedTag ()
    self.mArcStartTangentTextField?.unbind_dimensionAndUnit ()
    self.mArcEndTangentUnitPopUp?.unbind_selectedTag ()
    self.mArcEndTangentTextField?.unbind_dimensionAndUnit ()
    self.mArcPathIsClosedSwitch?.unbind_value ()
    self.mArcStartAngleTextField?.unbind_angle ()
    self.mArcStartAngleSlider?.unbind_angle ()
    self.mArcAngle?.unbind_angle ()
    self.mPackageShapePopUpButton?.unbind_selectedIndex ()
    self.mPackageStylePopUpButton?.unbind_selectedIndex ()
    self.mPadXCenterUnitPopUp?.unbind_selectedTag ()
    self.mPadXCenterTextField?.unbind_dimensionAndUnit ()
    self.mPadYCenterUnitPopUp?.unbind_selectedTag ()
    self.mPadYCenterTextField?.unbind_dimensionAndUnit ()
    self.mPadWidthUnitPopUp?.unbind_selectedTag ()
    self.mPadWidthTextField?.unbind_dimensionAndUnit ()
    self.mPadHeightUnitPopUp?.unbind_selectedTag ()
    self.mPadHeightTextField?.unbind_dimensionAndUnit ()
    self.mPadHoleDiameterUnitPopUp?.unbind_selectedTag ()
    self.mPadHoleDiameterTextField?.unbind_dimensionAndUnit ()
    self.mPadAnnularRingUnitPopUp?.unbind_selectedTag ()
    self.mPadAnnularRingTextField?.unbind_dimensionAndUnit ()
    self.mPadNumberTextField?.unbind_valueObserver ()
    self.mPadRenumberingPullDownButton?.unbind_currentNumber ()
    self.mStatusImageViewInToolbar?.unbind_image ()
    self.mStatusImageViewInToolbar?.unbind_tooltip ()
    self.mIssueTextField?.unbind_valueObserver ()
    self.mIssueTableView?.unbind_issues ()
    self.mComposedPackageView?.unbind_horizontalFlip ()
    self.mComposedPackageView?.unbind_verticalFlip ()
    self.mComposedPackageView?.unbind_gridStyle ()
    self.mComposedPackageView?.unbind_gridStepFactor ()
    self.mComposedPackageView?.unbind_gridLineColor ()
    self.mComposedPackageView?.unbind_gridCrossColor ()
    self.mComposedPackageView?.unbind_zoom ()
    self.mComposedPackageView?.unbind_backColor ()
    self.mComposedPackageView?.unbind_xPlacardUnit ()
    self.mComposedPackageView?.unbind_yPlacardUnit ()
    self.mHorizontalFlip?.unbind_value ()
    self.mVerticalFlip?.unbind_value ()
    self.mGridStyle?.unbind_selectedIndex ()
    self.mGridStep?.unbind_selectedTag ()
    self.mXPlacardUnitPopUpButton?.unbind_selectedTag ()
    self.mYPlacardUnitPopUpButton?.unbind_selectedTag ()
    self.mCrossColorOfPackageGridColorWell?.unbind_color ()
    self.mLineColorOfPackageGridColorWell?.unbind_color ()
    self.mPackageColorColorWell?.unbind_color ()
    self.mPackageBackgroundColorColorWell?.unbind_color ()
    self.mPackageDrawingWidthMultipliedByTenPopupButton?.unbind_selectedTag ()
    self.mCommentTextView?.unbind_value ()
  //--------------------------- Unbind multiple bindings
    self.self.mPackagePadSelectionController.padIsTraversing_property.removeEBObserver (self.mController_mPadStyleView_hidden!)
    self.mController_mPadStyleView_hidden = nil
    self.self.rootObject.noIssue_property.removeEBObserver (self.mController_mDeselectIssueButton_hidden!)
    self.mController_mDeselectIssueButton_hidden = nil
    self.self.rootObject.noIssue_property.removeEBObserver (self.mController_mIssueScrollView_hidden!)
    self.mController_mIssueScrollView_hidden = nil
  //--------------------------- Unbind array controllers
    self.mPackageObjectsController.unbind_ebView (self.mComposedPackageView)
  //--- Array controller property: mPackageObjectsController
    self.mPackageObjectsController.unbind_model ()
  //--- Selection controller property: mPackageBezierCurveSelectionController
    self.mPackageBezierCurveSelectionController.unbind_selection ()
  //--- Selection controller property: mPackageOvalSelectionController
    self.mPackageOvalSelectionController.unbind_selection ()
  //--- Selection controller property: mPackageArcSelectionController
    self.mPackageArcSelectionController.unbind_selection ()
  //--- Selection controller property: mPackagePadSelectionController
    self.mPackagePadSelectionController.unbind_selection ()
  //--- Selection controller property: mPackageSegmentSelectionController
    self.mPackageSegmentSelectionController.unbind_selection ()
    self.rootObject.issues_property.removeEBObserver (self.mStatusMessage_property)
    self.rootObject.issues_property.removeEBObserver (self.mStatusImage_property)
  //--------------------------- Remove targets / actions
    self.mResetVersionButton?.target = nil
  //--------------------------- Clean up outlets
    self.mAddArcButton?.ebCleanUp ()
    self.mAddBezierButton?.ebCleanUp ()
    self.mAddOvalButton?.ebCleanUp ()
    self.mAddPadButton?.ebCleanUp ()
    self.mAddSegmentButton?.ebCleanUp ()
    self.mArcAngle?.ebCleanUp ()
    self.mArcEndTangentTextField?.ebCleanUp ()
    self.mArcEndTangentUnitPopUp?.ebCleanUp ()
    self.mArcInspectorView?.ebCleanUp ()
    self.mArcPathIsClosedSwitch?.ebCleanUp ()
    self.mArcRadiusTextField?.ebCleanUp ()
    self.mArcRadiusUnitPopUp?.ebCleanUp ()
    self.mArcStartAngleSlider?.ebCleanUp ()
    self.mArcStartAngleTextField?.ebCleanUp ()
    self.mArcStartTangentTextField?.ebCleanUp ()
    self.mArcStartTangentUnitPopUp?.ebCleanUp ()
    self.mArcXCenterTextField?.ebCleanUp ()
    self.mArcXCenterUnitPopUp?.ebCleanUp ()
    self.mArcYCenterTextField?.ebCleanUp ()
    self.mArcYCenterUnitPopUp?.ebCleanUp ()
    self.mAutoNumberingInspectorView?.ebCleanUp ()
    self.mBaseInspectorView?.ebCleanUp ()
    self.mBezierCurveCPX1TextField?.ebCleanUp ()
    self.mBezierCurveCPX1UnitPopUp?.ebCleanUp ()
    self.mBezierCurveCPX2TextField?.ebCleanUp ()
    self.mBezierCurveCPX2UnitPopUp?.ebCleanUp ()
    self.mBezierCurveCPY1TextField?.ebCleanUp ()
    self.mBezierCurveCPY1UnitPopUp?.ebCleanUp ()
    self.mBezierCurveCPY2TextField?.ebCleanUp ()
    self.mBezierCurveCPY2UnitPopUp?.ebCleanUp ()
    self.mBezierCurveX1TextField?.ebCleanUp ()
    self.mBezierCurveX1UnitPopUp?.ebCleanUp ()
    self.mBezierCurveX2TextField?.ebCleanUp ()
    self.mBezierCurveX2UnitPopUp?.ebCleanUp ()
    self.mBezierCurveY1TextField?.ebCleanUp ()
    self.mBezierCurveY1UnitPopUp?.ebCleanUp ()
    self.mBezierCurveY2TextField?.ebCleanUp ()
    self.mBezierCurveY2UnitPopUp?.ebCleanUp ()
    self.mBezierInspectorView?.ebCleanUp ()
    self.mCommentTextView?.ebCleanUp ()
    self.mComposedPackageScrollView?.ebCleanUp ()
    self.mComposedPackageView?.ebCleanUp ()
    self.mCrossColorOfPackageGridColorWell?.ebCleanUp ()
    self.mDeselectIssueButton?.ebCleanUp ()
    self.mDisplayInspectorView?.ebCleanUp ()
    self.mGridStep?.ebCleanUp ()
    self.mGridStyle?.ebCleanUp ()
    self.mGridZoomInspectorView?.ebCleanUp ()
    self.mHorizontalFlip?.ebCleanUp ()
    self.mInfosPageView?.ebCleanUp ()
    self.mInspectorSegmentedControl?.ebCleanUp ()
    self.mIssueInspectorView?.ebCleanUp ()
    self.mIssueScrollView?.ebCleanUp ()
    self.mIssueTableView?.ebCleanUp ()
    self.mIssueTextField?.ebCleanUp ()
    self.mIssuesInspectorView?.ebCleanUp ()
    self.mLineColorOfPackageGridColorWell?.ebCleanUp ()
    self.mMasterView?.ebCleanUp ()
    self.mOvalHeightTextField?.ebCleanUp ()
    self.mOvalHeightUnitPopUp?.ebCleanUp ()
    self.mOvalInspectorView?.ebCleanUp ()
    self.mOvalWidthTextField?.ebCleanUp ()
    self.mOvalWidthUnitPopUp?.ebCleanUp ()
    self.mOvalXTextField?.ebCleanUp ()
    self.mOvalXUnitPopUp?.ebCleanUp ()
    self.mOvalYTextField?.ebCleanUp ()
    self.mOvalYUnitPopUp?.ebCleanUp ()
    self.mPackageBackgroundColorColorWell?.ebCleanUp ()
    self.mPackageColorColorWell?.ebCleanUp ()
    self.mPackageDrawingWidthMultipliedByTenPopupButton?.ebCleanUp ()
    self.mPackagePageView?.ebCleanUp ()
    self.mPackageShapePopUpButton?.ebCleanUp ()
    self.mPackageStylePopUpButton?.ebCleanUp ()
    self.mPadAnnularRingTextField?.ebCleanUp ()
    self.mPadAnnularRingUnitPopUp?.ebCleanUp ()
    self.mPadHeightTextField?.ebCleanUp ()
    self.mPadHeightUnitPopUp?.ebCleanUp ()
    self.mPadHoleDiameterTextField?.ebCleanUp ()
    self.mPadHoleDiameterUnitPopUp?.ebCleanUp ()
    self.mPadInspectorView?.ebCleanUp ()
    self.mPadNumberTextField?.ebCleanUp ()
    self.mPadPageView?.ebCleanUp ()
    self.mPadRenumberingPullDownButton?.ebCleanUp ()
    self.mPadStyleView?.ebCleanUp ()
    self.mPadWidthTextField?.ebCleanUp ()
    self.mPadWidthUnitPopUp?.ebCleanUp ()
    self.mPadXCenterTextField?.ebCleanUp ()
    self.mPadXCenterUnitPopUp?.ebCleanUp ()
    self.mPadYCenterTextField?.ebCleanUp ()
    self.mPadYCenterUnitPopUp?.ebCleanUp ()
    self.mPageSegmentedControl?.ebCleanUp ()
    self.mProgramPageView?.ebCleanUp ()
    self.mResetVersionButton?.ebCleanUp ()
    self.mSegmentInspectorView?.ebCleanUp ()
    self.mSegmentX1TextField?.ebCleanUp ()
    self.mSegmentX1UnitPopUp?.ebCleanUp ()
    self.mSegmentX2TextField?.ebCleanUp ()
    self.mSegmentX2UnitPopUp?.ebCleanUp ()
    self.mSegmentY1TextField?.ebCleanUp ()
    self.mSegmentY1UnitPopUp?.ebCleanUp ()
    self.mSegmentY2TextField?.ebCleanUp ()
    self.mSegmentY2UnitPopUp?.ebCleanUp ()
    self.mSelectedObjectsInspectorView?.ebCleanUp ()
    self.mSignatureTextField?.ebCleanUp ()
    self.mStatusImageViewInToolbar?.ebCleanUp ()
    self.mVersionField?.ebCleanUp ()
    self.mVerticalFlip?.ebCleanUp ()
    self.mXPlacardUnitPopUpButton?.ebCleanUp ()
    self.mYPlacardUnitPopUpButton?.ebCleanUp ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

