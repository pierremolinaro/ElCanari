//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PackageDimension 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PackageDimension : ReadOnlyAbstractObjectProperty <PackageDimension> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackageDimension?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
 //     oldValue.y1_property.removeEBObserversFrom (&self.mObserversOf_y1) // Stored property
 //     oldValue.x2_property.removeEBObserversFrom (&self.mObserversOf_x2) // Stored property
 //     oldValue.y2_property.removeEBObserversFrom (&self.mObserversOf_y2) // Stored property
 //     oldValue.xDimension_property.removeEBObserversFrom (&self.mObserversOf_xDimension) // Stored property
 //     oldValue.yDimension_property.removeEBObserversFrom (&self.mObserversOf_yDimension) // Stored property
 //     oldValue.x1Unit_property.removeEBObserversFrom (&self.mObserversOf_x1Unit) // Stored property
 //     oldValue.y1Unit_property.removeEBObserversFrom (&self.mObserversOf_y1Unit) // Stored property
 //     oldValue.x2Unit_property.removeEBObserversFrom (&self.mObserversOf_x2Unit) // Stored property
 //     oldValue.y2Unit_property.removeEBObserversFrom (&self.mObserversOf_y2Unit) // Stored property
 //     oldValue.xDimensionUnit_property.removeEBObserversFrom (&self.mObserversOf_xDimensionUnit) // Stored property
 //     oldValue.yDimensionUnit_property.removeEBObserversFrom (&self.mObserversOf_yDimensionUnit) // Stored property
 //     oldValue.distanceUnit_property.removeEBObserversFrom (&self.mObserversOf_distanceUnit) // Stored property
 //     oldValue.drawDimensionBackground_property.removeEBObserversFrom (&self.mObserversOf_drawDimensionBackground) // Stored property
 //     oldValue.x1_property.removeEBObserversFrom (&self.mObserversOf_x1) // Stored property
      oldValue.distanceInCanariUnit_property.removeEBObserversFrom (&self.mObserversOf_distanceInCanariUnit) // Transient property
      oldValue.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
      oldValue.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
      oldValue.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
 //     newValue.y1_property.addEBObserversFrom (&self.mObserversOf_y1) // Stored property
 //     newValue.x2_property.addEBObserversFrom (&self.mObserversOf_x2) // Stored property
 //     newValue.y2_property.addEBObserversFrom (&self.mObserversOf_y2) // Stored property
 //     newValue.xDimension_property.addEBObserversFrom (&self.mObserversOf_xDimension) // Stored property
 //     newValue.yDimension_property.addEBObserversFrom (&self.mObserversOf_yDimension) // Stored property
 //     newValue.x1Unit_property.addEBObserversFrom (&self.mObserversOf_x1Unit) // Stored property
 //     newValue.y1Unit_property.addEBObserversFrom (&self.mObserversOf_y1Unit) // Stored property
 //     newValue.x2Unit_property.addEBObserversFrom (&self.mObserversOf_x2Unit) // Stored property
 //     newValue.y2Unit_property.addEBObserversFrom (&self.mObserversOf_y2Unit) // Stored property
 //     newValue.xDimensionUnit_property.addEBObserversFrom (&self.mObserversOf_xDimensionUnit) // Stored property
 //     newValue.yDimensionUnit_property.addEBObserversFrom (&self.mObserversOf_yDimensionUnit) // Stored property
 //     newValue.distanceUnit_property.addEBObserversFrom (&self.mObserversOf_distanceUnit) // Stored property
 //     newValue.drawDimensionBackground_property.addEBObserversFrom (&self.mObserversOf_drawDimensionBackground) // Stored property
 //     newValue.x1_property.addEBObserversFrom (&self.mObserversOf_x1) // Stored property
      newValue.distanceInCanariUnit_property.addEBObserversFrom (&self.mObserversOf_distanceInCanariUnit) // Transient property
      newValue.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
      newValue.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
      newValue.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'y1' stored property
  //····················································································································

  private final var y1_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_y1 = EBWeakEventSet ()

  //····················································································································

  final var y1_property_selection : EBSelection <Int?> { // §
    return self.y1_property.selection
/*    if let model = self.propval {
      switch (model.y1_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.y1_property.addEBObserver (inObserver)
/*    self.mObserversOf_y1.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.y1_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.y1_property.removeEBObserver (inObserver)
/*    self.mObserversOf_y1.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.y1_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'x2' stored property
  //····················································································································

  private final var x2_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_x2 = EBWeakEventSet ()

  //····················································································································

  final var x2_property_selection : EBSelection <Int?> { // §
    return self.x2_property.selection
/*    if let model = self.propval {
      switch (model.x2_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.x2_property.addEBObserver (inObserver)
/*    self.mObserversOf_x2.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.x2_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.x2_property.removeEBObserver (inObserver)
/*    self.mObserversOf_x2.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.x2_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'y2' stored property
  //····················································································································

  private final var y2_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_y2 = EBWeakEventSet ()

  //····················································································································

  final var y2_property_selection : EBSelection <Int?> { // §
    return self.y2_property.selection
/*    if let model = self.propval {
      switch (model.y2_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.y2_property.addEBObserver (inObserver)
/*    self.mObserversOf_y2.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.y2_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.y2_property.removeEBObserver (inObserver)
/*    self.mObserversOf_y2.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.y2_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'xDimension' stored property
  //····················································································································

  private final var xDimension_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_xDimension = EBWeakEventSet ()

  //····················································································································

  final var xDimension_property_selection : EBSelection <Int?> { // §
    return self.xDimension_property.selection
/*    if let model = self.propval {
      switch (model.xDimension_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_xDimension (_ inObserver : EBEvent) {
    self.xDimension_property.addEBObserver (inObserver)
/*    self.mObserversOf_xDimension.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xDimension_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_xDimension (_ inObserver : EBEvent) {
    self.xDimension_property.removeEBObserver (inObserver)
/*    self.mObserversOf_xDimension.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xDimension_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'yDimension' stored property
  //····················································································································

  private final var yDimension_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_yDimension = EBWeakEventSet ()

  //····················································································································

  final var yDimension_property_selection : EBSelection <Int?> { // §
    return self.yDimension_property.selection
/*    if let model = self.propval {
      switch (model.yDimension_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_yDimension (_ inObserver : EBEvent) {
    self.yDimension_property.addEBObserver (inObserver)
/*    self.mObserversOf_yDimension.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yDimension_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_yDimension (_ inObserver : EBEvent) {
    self.yDimension_property.removeEBObserver (inObserver)
/*    self.mObserversOf_yDimension.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yDimension_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'x1Unit' stored property
  //····················································································································

  private final var x1Unit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_x1Unit = EBWeakEventSet ()

  //····················································································································

  final var x1Unit_property_selection : EBSelection <Int?> { // §
    return self.x1Unit_property.selection
/*    if let model = self.propval {
      switch (model.x1Unit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_x1Unit (_ inObserver : EBEvent) {
    self.x1Unit_property.addEBObserver (inObserver)
/*    self.mObserversOf_x1Unit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.x1Unit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_x1Unit (_ inObserver : EBEvent) {
    self.x1Unit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_x1Unit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.x1Unit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'y1Unit' stored property
  //····················································································································

  private final var y1Unit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_y1Unit = EBWeakEventSet ()

  //····················································································································

  final var y1Unit_property_selection : EBSelection <Int?> { // §
    return self.y1Unit_property.selection
/*    if let model = self.propval {
      switch (model.y1Unit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_y1Unit (_ inObserver : EBEvent) {
    self.y1Unit_property.addEBObserver (inObserver)
/*    self.mObserversOf_y1Unit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.y1Unit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_y1Unit (_ inObserver : EBEvent) {
    self.y1Unit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_y1Unit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.y1Unit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'x2Unit' stored property
  //····················································································································

  private final var x2Unit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_x2Unit = EBWeakEventSet ()

  //····················································································································

  final var x2Unit_property_selection : EBSelection <Int?> { // §
    return self.x2Unit_property.selection
/*    if let model = self.propval {
      switch (model.x2Unit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_x2Unit (_ inObserver : EBEvent) {
    self.x2Unit_property.addEBObserver (inObserver)
/*    self.mObserversOf_x2Unit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.x2Unit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_x2Unit (_ inObserver : EBEvent) {
    self.x2Unit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_x2Unit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.x2Unit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'y2Unit' stored property
  //····················································································································

  private final var y2Unit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_y2Unit = EBWeakEventSet ()

  //····················································································································

  final var y2Unit_property_selection : EBSelection <Int?> { // §
    return self.y2Unit_property.selection
/*    if let model = self.propval {
      switch (model.y2Unit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_y2Unit (_ inObserver : EBEvent) {
    self.y2Unit_property.addEBObserver (inObserver)
/*    self.mObserversOf_y2Unit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.y2Unit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_y2Unit (_ inObserver : EBEvent) {
    self.y2Unit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_y2Unit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.y2Unit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'xDimensionUnit' stored property
  //····················································································································

  private final var xDimensionUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_xDimensionUnit = EBWeakEventSet ()

  //····················································································································

  final var xDimensionUnit_property_selection : EBSelection <Int?> { // §
    return self.xDimensionUnit_property.selection
/*    if let model = self.propval {
      switch (model.xDimensionUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_xDimensionUnit (_ inObserver : EBEvent) {
    self.xDimensionUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_xDimensionUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xDimensionUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_xDimensionUnit (_ inObserver : EBEvent) {
    self.xDimensionUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_xDimensionUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xDimensionUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'yDimensionUnit' stored property
  //····················································································································

  private final var yDimensionUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_yDimensionUnit = EBWeakEventSet ()

  //····················································································································

  final var yDimensionUnit_property_selection : EBSelection <Int?> { // §
    return self.yDimensionUnit_property.selection
/*    if let model = self.propval {
      switch (model.yDimensionUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_yDimensionUnit (_ inObserver : EBEvent) {
    self.yDimensionUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_yDimensionUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yDimensionUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_yDimensionUnit (_ inObserver : EBEvent) {
    self.yDimensionUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_yDimensionUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yDimensionUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'distanceUnit' stored property
  //····················································································································

  private final var distanceUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_distanceUnit = EBWeakEventSet ()

  //····················································································································

  final var distanceUnit_property_selection : EBSelection <Int?> { // §
    return self.distanceUnit_property.selection
/*    if let model = self.propval {
      switch (model.distanceUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_distanceUnit (_ inObserver : EBEvent) {
    self.distanceUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_distanceUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.distanceUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_distanceUnit (_ inObserver : EBEvent) {
    self.distanceUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_distanceUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.distanceUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawDimensionBackground' stored property
  //····················································································································

  private final var drawDimensionBackground_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawDimensionBackground = EBWeakEventSet ()

  //····················································································································

  final var drawDimensionBackground_property_selection : EBSelection <Bool?> { // §
    return self.drawDimensionBackground_property.selection
/*    if let model = self.propval {
      switch (model.drawDimensionBackground_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_drawDimensionBackground (_ inObserver : EBEvent) {
    self.drawDimensionBackground_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawDimensionBackground.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawDimensionBackground_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawDimensionBackground (_ inObserver : EBEvent) {
    self.drawDimensionBackground_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawDimensionBackground.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawDimensionBackground_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'x1' stored property
  //····················································································································

  private final var x1_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_x1 = EBWeakEventSet ()

  //····················································································································

  final var x1_property_selection : EBSelection <Int?> { // §
    return self.x1_property.selection
/*    if let model = self.propval {
      switch (model.x1_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.x1_property.addEBObserver (inObserver)
/*    self.mObserversOf_x1.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.x1_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.x1_property.removeEBObserver (inObserver)
/*    self.mObserversOf_x1.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.x1_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'distanceInCanariUnit' transient property
  //····················································································································

  private final var mObserversOf_distanceInCanariUnit = EBWeakEventSet ()

  //····················································································································

  final var distanceInCanariUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.distanceInCanariUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_distanceInCanariUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_distanceInCanariUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.distanceInCanariUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_distanceInCanariUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_distanceInCanariUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.distanceInCanariUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure y1 simple stored property
    self.y1_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.y1_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.y1_property)
  //--- Configure x2 simple stored property
    self.x2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.x2_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.x2_property)
  //--- Configure y2 simple stored property
    self.y2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.y2_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.y2_property)
  //--- Configure xDimension simple stored property
    self.xDimension_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.xDimension_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.xDimension_property)
  //--- Configure yDimension simple stored property
    self.yDimension_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.yDimension_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.yDimension_property)
  //--- Configure x1Unit simple stored property
    self.x1Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.x1Unit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.x1Unit_property)
  //--- Configure y1Unit simple stored property
    self.y1Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.y1Unit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.y1Unit_property)
  //--- Configure x2Unit simple stored property
    self.x2Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.x2Unit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.x2Unit_property)
  //--- Configure y2Unit simple stored property
    self.y2Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.y2Unit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.y2Unit_property)
  //--- Configure xDimensionUnit simple stored property
    self.xDimensionUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.xDimensionUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.xDimensionUnit_property)
  //--- Configure yDimensionUnit simple stored property
    self.yDimensionUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.yDimensionUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.yDimensionUnit_property)
  //--- Configure distanceUnit simple stored property
    self.distanceUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.distanceUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.distanceUnit_property)
  //--- Configure drawDimensionBackground simple stored property
    self.drawDimensionBackground_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawDimensionBackground_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.drawDimensionBackground_property)
  //--- Configure x1 simple stored property
    self.x1_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.x1_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.x1_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject PackageDimension
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_PackageDimension : ReadOnlyObject_PackageDimension {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackageDimension? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackageDimension?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackageDimension? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageDimension? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackageDimension? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PackageDimension
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PackageDimension : ReadOnlyObject_PackageDimension {

  //····················································································································
 
  func setProp (_ inValue : PackageDimension?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PackageDimension
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PackageDimension : ReadWriteObject_PackageDimension {

  //····················································································································

  private var mModel : ReadWriteObject_PackageDimension? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackageDimension?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackageDimension?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackageDimension?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < PackageDimension? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackageDimension? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PackageDimension 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PackageDimension : ReadWriteObject_PackageDimension, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageDimension) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageDimension) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageDimension) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageDimension) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageDimension?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageDimension? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackageDimension?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackageDimension? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

