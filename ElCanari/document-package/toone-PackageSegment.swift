//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PackageSegment 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PackageSegment : ReadOnlyAbstractObjectProperty <PackageSegment> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackageSegment?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
 //     oldValue.y1_property.removeEBObserversFrom (&self.mObserversOf_y1) // Stored property
 //     oldValue.x2_property.removeEBObserversFrom (&self.mObserversOf_x2) // Stored property
 //     oldValue.y2_property.removeEBObserversFrom (&self.mObserversOf_y2) // Stored property
 //     oldValue.x1Unit_property.removeEBObserversFrom (&self.mObserversOf_x1Unit) // Stored property
 //     oldValue.y1Unit_property.removeEBObserversFrom (&self.mObserversOf_y1Unit) // Stored property
 //     oldValue.x2Unit_property.removeEBObserversFrom (&self.mObserversOf_x2Unit) // Stored property
 //     oldValue.y2Unit_property.removeEBObserversFrom (&self.mObserversOf_y2Unit) // Stored property
 //     oldValue.lengthUnit_property.removeEBObserversFrom (&self.mObserversOf_lengthUnit) // Stored property
 //     oldValue.x1_property.removeEBObserversFrom (&self.mObserversOf_x1) // Stored property
      oldValue.strokeBezierPath_property.removeEBObserversFrom (&self.mObserversOf_strokeBezierPath) // Transient property
      oldValue.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
      oldValue.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
      oldValue.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
      oldValue.lengthInCanariUnit_property.removeEBObserversFrom (&self.mObserversOf_lengthInCanariUnit) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
 //     newValue.y1_property.addEBObserversFrom (&self.mObserversOf_y1) // Stored property
 //     newValue.x2_property.addEBObserversFrom (&self.mObserversOf_x2) // Stored property
 //     newValue.y2_property.addEBObserversFrom (&self.mObserversOf_y2) // Stored property
 //     newValue.x1Unit_property.addEBObserversFrom (&self.mObserversOf_x1Unit) // Stored property
 //     newValue.y1Unit_property.addEBObserversFrom (&self.mObserversOf_y1Unit) // Stored property
 //     newValue.x2Unit_property.addEBObserversFrom (&self.mObserversOf_x2Unit) // Stored property
 //     newValue.y2Unit_property.addEBObserversFrom (&self.mObserversOf_y2Unit) // Stored property
 //     newValue.lengthUnit_property.addEBObserversFrom (&self.mObserversOf_lengthUnit) // Stored property
 //     newValue.x1_property.addEBObserversFrom (&self.mObserversOf_x1) // Stored property
      newValue.strokeBezierPath_property.addEBObserversFrom (&self.mObserversOf_strokeBezierPath) // Transient property
      newValue.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
      newValue.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
      newValue.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
      newValue.lengthInCanariUnit_property.addEBObserversFrom (&self.mObserversOf_lengthInCanariUnit) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'y1' stored property
  //····················································································································

  private final var y1_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_y1 = EBWeakEventSet ()

  //····················································································································

  final var y1_property_selection : EBSelection <Int?> { // §
    return self.y1_property.selection
/*    if let model = self.propval {
      switch (model.y1_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.y1_property.addEBObserver (inObserver)
/*    self.mObserversOf_y1.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.y1_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.y1_property.removeEBObserver (inObserver)
/*    self.mObserversOf_y1.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.y1_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'x2' stored property
  //····················································································································

  private final var x2_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_x2 = EBWeakEventSet ()

  //····················································································································

  final var x2_property_selection : EBSelection <Int?> { // §
    return self.x2_property.selection
/*    if let model = self.propval {
      switch (model.x2_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.x2_property.addEBObserver (inObserver)
/*    self.mObserversOf_x2.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.x2_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.x2_property.removeEBObserver (inObserver)
/*    self.mObserversOf_x2.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.x2_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'y2' stored property
  //····················································································································

  private final var y2_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_y2 = EBWeakEventSet ()

  //····················································································································

  final var y2_property_selection : EBSelection <Int?> { // §
    return self.y2_property.selection
/*    if let model = self.propval {
      switch (model.y2_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.y2_property.addEBObserver (inObserver)
/*    self.mObserversOf_y2.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.y2_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.y2_property.removeEBObserver (inObserver)
/*    self.mObserversOf_y2.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.y2_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'x1Unit' stored property
  //····················································································································

  private final var x1Unit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_x1Unit = EBWeakEventSet ()

  //····················································································································

  final var x1Unit_property_selection : EBSelection <Int?> { // §
    return self.x1Unit_property.selection
/*    if let model = self.propval {
      switch (model.x1Unit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_x1Unit (_ inObserver : EBEvent) {
    self.x1Unit_property.addEBObserver (inObserver)
/*    self.mObserversOf_x1Unit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.x1Unit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_x1Unit (_ inObserver : EBEvent) {
    self.x1Unit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_x1Unit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.x1Unit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'y1Unit' stored property
  //····················································································································

  private final var y1Unit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_y1Unit = EBWeakEventSet ()

  //····················································································································

  final var y1Unit_property_selection : EBSelection <Int?> { // §
    return self.y1Unit_property.selection
/*    if let model = self.propval {
      switch (model.y1Unit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_y1Unit (_ inObserver : EBEvent) {
    self.y1Unit_property.addEBObserver (inObserver)
/*    self.mObserversOf_y1Unit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.y1Unit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_y1Unit (_ inObserver : EBEvent) {
    self.y1Unit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_y1Unit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.y1Unit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'x2Unit' stored property
  //····················································································································

  private final var x2Unit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_x2Unit = EBWeakEventSet ()

  //····················································································································

  final var x2Unit_property_selection : EBSelection <Int?> { // §
    return self.x2Unit_property.selection
/*    if let model = self.propval {
      switch (model.x2Unit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_x2Unit (_ inObserver : EBEvent) {
    self.x2Unit_property.addEBObserver (inObserver)
/*    self.mObserversOf_x2Unit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.x2Unit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_x2Unit (_ inObserver : EBEvent) {
    self.x2Unit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_x2Unit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.x2Unit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'y2Unit' stored property
  //····················································································································

  private final var y2Unit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_y2Unit = EBWeakEventSet ()

  //····················································································································

  final var y2Unit_property_selection : EBSelection <Int?> { // §
    return self.y2Unit_property.selection
/*    if let model = self.propval {
      switch (model.y2Unit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_y2Unit (_ inObserver : EBEvent) {
    self.y2Unit_property.addEBObserver (inObserver)
/*    self.mObserversOf_y2Unit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.y2Unit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_y2Unit (_ inObserver : EBEvent) {
    self.y2Unit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_y2Unit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.y2Unit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'lengthUnit' stored property
  //····················································································································

  private final var lengthUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_lengthUnit = EBWeakEventSet ()

  //····················································································································

  final var lengthUnit_property_selection : EBSelection <Int?> { // §
    return self.lengthUnit_property.selection
/*    if let model = self.propval {
      switch (model.lengthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_lengthUnit (_ inObserver : EBEvent) {
    self.lengthUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_lengthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.lengthUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_lengthUnit (_ inObserver : EBEvent) {
    self.lengthUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_lengthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.lengthUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'x1' stored property
  //····················································································································

  private final var x1_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_x1 = EBWeakEventSet ()

  //····················································································································

  final var x1_property_selection : EBSelection <Int?> { // §
    return self.x1_property.selection
/*    if let model = self.propval {
      switch (model.x1_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.x1_property.addEBObserver (inObserver)
/*    self.mObserversOf_x1.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.x1_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.x1_property.removeEBObserver (inObserver)
/*    self.mObserversOf_x1.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.x1_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private final var mObserversOf_strokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final var strokeBezierPath_property_selection : EBSelection <NSBezierPath?> {
    if let model = self.propval {
      switch (model.strokeBezierPath_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.strokeBezierPath_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.strokeBezierPath_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'lengthInCanariUnit' transient property
  //····················································································································

  private final var mObserversOf_lengthInCanariUnit = EBWeakEventSet ()

  //····················································································································

  final var lengthInCanariUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.lengthInCanariUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_lengthInCanariUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_lengthInCanariUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.lengthInCanariUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_lengthInCanariUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_lengthInCanariUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.lengthInCanariUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure y1 simple stored property
    self.y1_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.y1_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.y1_property)
  //--- Configure x2 simple stored property
    self.x2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.x2_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.x2_property)
  //--- Configure y2 simple stored property
    self.y2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.y2_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.y2_property)
  //--- Configure x1Unit simple stored property
    self.x1Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.x1Unit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.x1Unit_property)
  //--- Configure y1Unit simple stored property
    self.y1Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.y1Unit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.y1Unit_property)
  //--- Configure x2Unit simple stored property
    self.x2Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.x2Unit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.x2Unit_property)
  //--- Configure y2Unit simple stored property
    self.y2Unit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.y2Unit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.y2Unit_property)
  //--- Configure lengthUnit simple stored property
    self.lengthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.lengthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.lengthUnit_property)
  //--- Configure x1 simple stored property
    self.x1_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.x1_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.x1_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject PackageSegment
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_PackageSegment : ReadOnlyObject_PackageSegment {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackageSegment? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackageSegment?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackageSegment? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageSegment? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackageSegment? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PackageSegment
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PackageSegment : ReadOnlyObject_PackageSegment {

  //····················································································································
 
  func setProp (_ inValue : PackageSegment?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PackageSegment
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PackageSegment : ReadWriteObject_PackageSegment {

  //····················································································································

  private var mModel : ReadWriteObject_PackageSegment? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackageSegment?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackageSegment?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackageSegment?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < PackageSegment? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackageSegment? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PackageSegment 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PackageSegment : ReadWriteObject_PackageSegment, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageSegment) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageSegment) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageSegment) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageSegment) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageSegment?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageSegment? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackageSegment?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackageSegment? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

