//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func transient_PackagePad_objectDisplay (
       _ self_xCenter : Int,             
       _ self_yCenter : Int,             
       _ self_width : Int,               
       _ self_height : Int,              
       _ self_holeDiameter : Int,        
       _ self_padShape : PadShape,       
       _ self_padStyle : PadStyle,       
       _ prefs_frontSidePadColor : NSColor,
       _ prefs_displayPackageFrontSidePads : Bool,
       _ prefs_backSidePadColor : NSColor,
       _ prefs_displayPackageBackSidePads : Bool
) -> EBShape {
//--- START OF USER ZONE 2
    let xCenter = canariUnitToCocoa (self_xCenter)
    let yCenter = canariUnitToCocoa (self_yCenter)
    let width = canariUnitToCocoa (self_width)
    let height = canariUnitToCocoa (self_height)
    let holeDiameter = canariUnitToCocoa (self_holeDiameter)
    let rPad = NSRect (x: xCenter - width / 2.0, y: yCenter - height / 2.0, width: width, height: height)
    var bp : EBBezierPath
    switch self_padShape {
    case .rect :
      bp = EBBezierPath (rect: rPad)
    case .round :
      if width < height {
        bp = EBBezierPath (roundedRect: rPad, xRadius: width / 2.0, yRadius: width / 2.0)
      }else if width > height {
        bp = EBBezierPath (roundedRect: rPad, xRadius: height / 2.0, yRadius: height / 2.0)
      }else{
        bp = EBBezierPath (ovalIn: rPad)
      }
    case .octo :
      bp = EBBezierPath (octogonInRect: rPad)
    }
    switch self_padStyle {
    case .traversing :
      let rHole = NSRect (x: xCenter - holeDiameter / 2.0, y: yCenter - holeDiameter / 2.0, width: holeDiameter, height: holeDiameter)
      bp.appendOval (in: rHole)
      bp.windingRule = .evenOdd
      if prefs_displayPackageFrontSidePads {
        return EBFilledBezierPathShape ([bp], prefs_frontSidePadColor)
      }else if prefs_displayPackageBackSidePads {
        return EBFilledBezierPathShape ([bp], prefs_backSidePadColor)
      }else{
        return EBShape ()
      }
    case .surface :
      if prefs_displayPackageFrontSidePads {
        return EBFilledBezierPathShape ([bp], prefs_frontSidePadColor)
      }else{
        return EBShape ()
      }
    }
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
