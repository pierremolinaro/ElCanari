//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func transient_PackageArc_objectDisplay (
       _ self_xCenter : Int,             
       _ self_yCenter : Int,             
       _ self_radius : Int,              
       _ self_startAngle : Int,          
       _ self_arcAngle : Int,            
       _ self_pathIsClosed : Bool,       
       _ self_startTangentLength : Int,  
       _ self_endTangentLength : Int,    
       _ prefs_packageColor : NSColor,   
       _ prefs_packageDrawingWidthMultipliedByTen : Int
) -> EBShape {
//--- START OF USER ZONE 2
  let center = CanariPoint (x: self_xCenter, y: self_yCenter).cocoaPoint ()
  let radius = canariUnitToCocoa (self_radius)
  let startTangentLength = canariUnitToCocoa (self_startTangentLength)
  let endTangentLength = canariUnitToCocoa (self_endTangentLength)
  let startAngle = packageArcAngleToCocoaDegrees (self_startAngle)
  let arcAngle = CGFloat (self_arcAngle) / 1000.0
  let bp = NSBezierPath (
    arcWithTangentFromCenter: center,
    radius: radius,
    startAngleInDegrees: startAngle,
    arcAngleInDegrees: arcAngle,
    startTangentLength: startTangentLength,
    endTangentLength: endTangentLength,
    pathIsClosed: self_pathIsClosed
  )
  bp.lineWidth = CGFloat (prefs_packageDrawingWidthMultipliedByTen) / 10.0
  bp.lineCapStyle = .round
  return EBStrokeBezierPathShape ([bp], prefs_packageColor)
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
