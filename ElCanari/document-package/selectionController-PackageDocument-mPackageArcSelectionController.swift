//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    SelectionController_PackageDocument_mPackageArcSelectionController                                               *
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_PackageDocument_mPackageArcSelectionController : EBObject {

  //····················································································································
  //   Selection observable property: arcAngle
  //····················································································································

  var arcAngle_property = EBPropertyProxy_Int ()

  var arcAngle_property_selection : EBSelection <Int> {
    get {
      return self.arcAngle_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: endTangent
  //····················································································································

  var endTangent_property = EBPropertyProxy_Int ()

  var endTangent_property_selection : EBSelection <Int> {
    get {
      return self.endTangent_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: endTangentUnit
  //····················································································································

  var endTangentUnit_property = EBPropertyProxy_Int ()

  var endTangentUnit_property_selection : EBSelection <Int> {
    get {
      return self.endTangentUnit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  var issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    get {
      return self.issues_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  var objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    get {
      return self.objectDisplay_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: pathIsClosed
  //····················································································································

  var pathIsClosed_property = EBPropertyProxy_Bool ()

  var pathIsClosed_property_selection : EBSelection <Bool> {
    get {
      return self.pathIsClosed_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: radius
  //····················································································································

  var radius_property = EBPropertyProxy_Int ()

  var radius_property_selection : EBSelection <Int> {
    get {
      return self.radius_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: radiusUnit
  //····················································································································

  var radiusUnit_property = EBPropertyProxy_Int ()

  var radiusUnit_property_selection : EBSelection <Int> {
    get {
      return self.radiusUnit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  var selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    get {
      return self.selectionDisplay_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: startAngle
  //····················································································································

  var startAngle_property = EBPropertyProxy_Int ()

  var startAngle_property_selection : EBSelection <Int> {
    get {
      return self.startAngle_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: startTangent
  //····················································································································

  var startTangent_property = EBPropertyProxy_Int ()

  var startTangent_property_selection : EBSelection <Int> {
    get {
      return self.startTangent_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: startTangentUnit
  //····················································································································

  var startTangentUnit_property = EBPropertyProxy_Int ()

  var startTangentUnit_property_selection : EBSelection <Int> {
    get {
      return self.startTangentUnit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: xCenter
  //····················································································································

  var xCenter_property = EBPropertyProxy_Int ()

  var xCenter_property_selection : EBSelection <Int> {
    get {
      return self.xCenter_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: xCenterUnit
  //····················································································································

  var xCenterUnit_property = EBPropertyProxy_Int ()

  var xCenterUnit_property_selection : EBSelection <Int> {
    get {
      return self.xCenterUnit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: yCenter
  //····················································································································

  var yCenter_property = EBPropertyProxy_Int ()

  var yCenter_property_selection : EBSelection <Int> {
    get {
      return self.yCenter_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: yCenterUnit
  //····················································································································

  var yCenterUnit_property = EBPropertyProxy_Int ()

  var yCenterUnit_property_selection : EBSelection <Int> {
    get {
      return self.yCenterUnit_property.prop
    }
  }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   private var mModel : ReadOnlyArrayOf_PackageObject? = nil
   private var mActualModel = TransientArrayOf_PackageArc ()

  //····················································································································

  func bind_selection (model : ReadOnlyArrayOf_PackageObject, file : String, line : Int) {
    self.mModel = model
    self.mActualModel.readModelFunction = { [weak self] () -> EBSelection < [PackageArc] > in
      if let model = self?.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = [PackageArc] ()
          for baseObject in v {
            if let object = baseObject as? PackageArc {
              s.append (object)
            }
          }
          return .single (s)
        }
      }else{
        return .empty
      }
    }
    model.addEBObserver (self.mActualModel)
    self.bind_property_arcAngle (model: self.mActualModel)
    self.bind_property_endTangent (model: self.mActualModel)
    self.bind_property_endTangentUnit (model: self.mActualModel)
    self.bind_property_issues (model: self.mActualModel)
    self.bind_property_objectDisplay (model: self.mActualModel)
    self.bind_property_pathIsClosed (model: self.mActualModel)
    self.bind_property_radius (model: self.mActualModel)
    self.bind_property_radiusUnit (model: self.mActualModel)
    self.bind_property_selectionDisplay (model: self.mActualModel)
    self.bind_property_startAngle (model: self.mActualModel)
    self.bind_property_startTangent (model: self.mActualModel)
    self.bind_property_startTangentUnit (model: self.mActualModel)
    self.bind_property_xCenter (model: self.mActualModel)
    self.bind_property_xCenterUnit (model: self.mActualModel)
    self.bind_property_yCenter (model: self.mActualModel)
    self.bind_property_yCenterUnit (model: self.mActualModel)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  func unbind_selection () {
    self.mModel?.removeEBObserver (self.mActualModel)
    self.mActualModel.readModelFunction = nil
  //--- arcAngle
    self.arcAngle_property.readModelFunction = nil 
    self.arcAngle_property.writeModelFunction = nil 
    self.arcAngle_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_arcAngle (self.arcAngle_property)
  //--- endTangent
    self.endTangent_property.readModelFunction = nil 
    self.endTangent_property.writeModelFunction = nil 
    self.endTangent_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_endTangent (self.endTangent_property)
  //--- endTangentUnit
    self.endTangentUnit_property.readModelFunction = nil 
    self.endTangentUnit_property.writeModelFunction = nil 
    self.endTangentUnit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_endTangentUnit (self.endTangentUnit_property)
  //--- issues
    self.issues_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_issues (self.issues_property)
  //--- objectDisplay
    self.objectDisplay_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- pathIsClosed
    self.pathIsClosed_property.readModelFunction = nil 
    self.pathIsClosed_property.writeModelFunction = nil 
    self.pathIsClosed_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_pathIsClosed (self.pathIsClosed_property)
  //--- radius
    self.radius_property.readModelFunction = nil 
    self.radius_property.writeModelFunction = nil 
    self.radius_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_radius (self.radius_property)
  //--- radiusUnit
    self.radiusUnit_property.readModelFunction = nil 
    self.radiusUnit_property.writeModelFunction = nil 
    self.radiusUnit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_radiusUnit (self.radiusUnit_property)
  //--- selectionDisplay
    self.selectionDisplay_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- startAngle
    self.startAngle_property.readModelFunction = nil 
    self.startAngle_property.writeModelFunction = nil 
    self.startAngle_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_startAngle (self.startAngle_property)
  //--- startTangent
    self.startTangent_property.readModelFunction = nil 
    self.startTangent_property.writeModelFunction = nil 
    self.startTangent_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_startTangent (self.startTangent_property)
  //--- startTangentUnit
    self.startTangentUnit_property.readModelFunction = nil 
    self.startTangentUnit_property.writeModelFunction = nil 
    self.startTangentUnit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_startTangentUnit (self.startTangentUnit_property)
  //--- xCenter
    self.xCenter_property.readModelFunction = nil 
    self.xCenter_property.writeModelFunction = nil 
    self.xCenter_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_xCenter (self.xCenter_property)
  //--- xCenterUnit
    self.xCenterUnit_property.readModelFunction = nil 
    self.xCenterUnit_property.writeModelFunction = nil 
    self.xCenterUnit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_xCenterUnit (self.xCenterUnit_property)
  //--- yCenter
    self.yCenter_property.readModelFunction = nil 
    self.yCenter_property.writeModelFunction = nil 
    self.yCenter_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_yCenter (self.yCenter_property)
  //--- yCenterUnit
    self.yCenterUnit_property.readModelFunction = nil 
    self.yCenterUnit_property.writeModelFunction = nil 
    self.yCenterUnit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_yCenterUnit (self.yCenterUnit_property)
  //---
    self.mModel = nil    
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (ebObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_PackageDocument_mPackageArcSelectionController.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    self.mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    self.mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "arcAngle",
      idx:self.arcAngle_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.arcAngle_property.mObserverExplorer,
      valueExplorer:&self.arcAngle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "endTangent",
      idx:self.endTangent_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.endTangent_property.mObserverExplorer,
      valueExplorer:&self.endTangent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "endTangentUnit",
      idx:self.endTangentUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.endTangentUnit_property.mObserverExplorer,
      valueExplorer:&self.endTangentUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pathIsClosed",
      idx:self.pathIsClosed_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.pathIsClosed_property.mObserverExplorer,
      valueExplorer:&self.pathIsClosed_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "radius",
      idx:self.radius_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.radius_property.mObserverExplorer,
      valueExplorer:&self.radius_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "radiusUnit",
      idx:self.radiusUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.radiusUnit_property.mObserverExplorer,
      valueExplorer:&self.radiusUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "startAngle",
      idx:self.startAngle_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.startAngle_property.mObserverExplorer,
      valueExplorer:&self.startAngle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "startTangent",
      idx:self.startTangent_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.startTangent_property.mObserverExplorer,
      valueExplorer:&self.startTangent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "startTangentUnit",
      idx:self.startTangentUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.startTangentUnit_property.mObserverExplorer,
      valueExplorer:&self.startTangentUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenter",
      idx:self.xCenter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenter_property.mObserverExplorer,
      valueExplorer:&self.xCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenterUnit",
      idx:self.xCenterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenterUnit_property.mObserverExplorer,
      valueExplorer:&self.xCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenter",
      idx:self.yCenter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenter_property.mObserverExplorer,
      valueExplorer:&self.yCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenterUnit",
      idx:self.yCenterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenterUnit_property.mObserverExplorer,
      valueExplorer:&self.yCenterUnit_property.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    self.mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = self.mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_PackageDocument_mPackageArcSelectionController.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (ebObjectIndex) + className
    self.mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    self.mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  @objc func showObjectWindowFromExplorerButton (_ : Any) {
    if self.mExplorerWindow == nil {
      self.buildExplorerWindow ()
    }
    self.mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  @objc func deleteSelectionControllerWindowAction (_ : Any) {
    self.clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    if let closeButton = self.mExplorerWindow?.standardWindowButton (.closeButton) {
      closeButton.target = nil
    }
    self.mExplorerWindow?.orderOut (nil)
    self.mExplorerWindow = nil
  }

  //···················································································································*

  private final func bind_property_arcAngle (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_arcAngle (self.arcAngle_property)
    self.arcAngle_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.arcAngle_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.arcAngle_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.arcAngle_property.setProp (inValue)
          }
        }
      }
    }
    self.arcAngle_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.arcAngle_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_endTangent (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_endTangent (self.endTangent_property)
    self.endTangent_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.endTangent_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.endTangent_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.endTangent_property.setProp (inValue)
          }
        }
      }
    }
    self.endTangent_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.endTangent_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_endTangentUnit (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_endTangentUnit (self.endTangentUnit_property)
    self.endTangentUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.endTangentUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.endTangentUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.endTangentUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.endTangentUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.endTangentUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_issues (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_issues (self.issues_property)
    self.issues_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_objectDisplay (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_pathIsClosed (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_pathIsClosed (self.pathIsClosed_property)
    self.pathIsClosed_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.pathIsClosed_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.pathIsClosed_property.writeModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.pathIsClosed_property.setProp (inValue)
          }
        }
      }
    }
    self.pathIsClosed_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.pathIsClosed_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_radius (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_radius (self.radius_property)
    self.radius_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.radius_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.radius_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.radius_property.setProp (inValue)
          }
        }
      }
    }
    self.radius_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.radius_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_radiusUnit (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_radiusUnit (self.radiusUnit_property)
    self.radiusUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.radiusUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.radiusUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.radiusUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.radiusUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.radiusUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_selectionDisplay (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_startAngle (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_startAngle (self.startAngle_property)
    self.startAngle_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.startAngle_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.startAngle_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.startAngle_property.setProp (inValue)
          }
        }
      }
    }
    self.startAngle_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.startAngle_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_startTangent (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_startTangent (self.startTangent_property)
    self.startTangent_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.startTangent_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.startTangent_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.startTangent_property.setProp (inValue)
          }
        }
      }
    }
    self.startTangent_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.startTangent_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_startTangentUnit (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_startTangentUnit (self.startTangentUnit_property)
    self.startTangentUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.startTangentUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.startTangentUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.startTangentUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.startTangentUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.startTangentUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_xCenter (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_xCenter (self.xCenter_property)
    self.xCenter_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xCenter_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xCenter_property.setProp (inValue)
          }
        }
      }
    }
    self.xCenter_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xCenter_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_xCenterUnit (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_xCenterUnit (self.xCenterUnit_property)
    self.xCenterUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xCenterUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenterUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xCenterUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.xCenterUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xCenterUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_yCenter (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_yCenter (self.yCenter_property)
    self.yCenter_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yCenter_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yCenter_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yCenter_property.setProp (inValue)
          }
        }
      }
    }
    self.yCenter_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yCenter_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_yCenterUnit (model : ReadOnlyArrayOf_PackageArc) {
    model.addEBObserverOf_yCenterUnit (self.yCenterUnit_property)
    self.yCenterUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yCenterUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yCenterUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yCenterUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.yCenterUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yCenterUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

