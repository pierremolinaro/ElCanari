//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

@objc(AutoLayoutPackageDocument) class AutoLayoutPackageDocument : AutoLayoutPackageDocumentSuperClass, NSToolbarDelegate {

  //····················································································································
  //   Array controller: mModelImageObjectsController
  //····················································································································

  var mModelImageObjectsController = Controller_AutoLayoutPackageDocument_mModelImageObjectsController ()

  //····················································································································
  //   Array controller: mPackageObjectsController
  //····················································································································

  var mPackageObjectsController = Controller_AutoLayoutPackageDocument_mPackageObjectsController ()

  //····················································································································
  //   Selection controller: mPackageSegmentSelectionController
  //····················································································································

  var mPackageSegmentSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageSegmentSelectionController ()

  //····················································································································
  //   Selection controller: mPackageBezierCurveSelectionController
  //····················································································································

  var mPackageBezierCurveSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageBezierCurveSelectionController ()

  //····················································································································
  //   Selection controller: mPackageOvalSelectionController
  //····················································································································

  var mPackageOvalSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageOvalSelectionController ()

  //····················································································································
  //   Selection controller: mPackageArcSelectionController
  //····················································································································

  var mPackageArcSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageArcSelectionController ()

  //····················································································································
  //   Selection controller: mPackageGuideSelectionController
  //····················································································································

  var mPackageGuideSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageGuideSelectionController ()

  //····················································································································
  //   Selection controller: mPackageDimensionSelectionController
  //····················································································································

  var mPackageDimensionSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageDimensionSelectionController ()

  //····················································································································
  //   Selection controller: mPackageZoneSelectionController
  //····················································································································

  var mPackageZoneSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageZoneSelectionController ()

  //····················································································································
  //   Selection controller: mPackagePadSelectionController
  //····················································································································

  var mPackagePadSelectionController = SelectionController_AutoLayoutPackageDocument_mPackagePadSelectionController ()

  //····················································································································
  //   Selection controller: mPackageSlavePadSelectionController
  //····················································································································

  var mPackageSlavePadSelectionController = SelectionController_AutoLayoutPackageDocument_mPackageSlavePadSelectionController ()

  //····················································································································
  //   Transient property: addSegmentButtonImage
  //····················································································································

  final let addSegmentButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addSegmentButtonImage_property_selection : EBSelection <NSImage> {
    return self.addSegmentButtonImage_property.selection
  }

  //····················································································································

  final var addSegmentButtonImage : NSImage? {
    switch self.addSegmentButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addBezierButtonImage
  //····················································································································

  final let addBezierButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addBezierButtonImage_property_selection : EBSelection <NSImage> {
    return self.addBezierButtonImage_property.selection
  }

  //····················································································································

  final var addBezierButtonImage : NSImage? {
    switch self.addBezierButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addOvalButtonImage
  //····················································································································

  final let addOvalButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addOvalButtonImage_property_selection : EBSelection <NSImage> {
    return self.addOvalButtonImage_property.selection
  }

  //····················································································································

  final var addOvalButtonImage : NSImage? {
    switch self.addOvalButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addArcButtonImage
  //····················································································································

  final let addArcButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addArcButtonImage_property_selection : EBSelection <NSImage> {
    return self.addArcButtonImage_property.selection
  }

  //····················································································································

  final var addArcButtonImage : NSImage? {
    switch self.addArcButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addMasterPadButtonImage
  //····················································································································

  final let addMasterPadButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addMasterPadButtonImage_property_selection : EBSelection <NSImage> {
    return self.addMasterPadButtonImage_property.selection
  }

  //····················································································································

  final var addMasterPadButtonImage : NSImage? {
    switch self.addMasterPadButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addSlavePadButtonImage
  //····················································································································

  final let addSlavePadButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addSlavePadButtonImage_property_selection : EBSelection <NSImage> {
    return self.addSlavePadButtonImage_property.selection
  }

  //····················································································································

  final var addSlavePadButtonImage : NSImage? {
    switch self.addSlavePadButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addGuideButtonImage
  //····················································································································

  final let addGuideButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addGuideButtonImage_property_selection : EBSelection <NSImage> {
    return self.addGuideButtonImage_property.selection
  }

  //····················································································································

  final var addGuideButtonImage : NSImage? {
    switch self.addGuideButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addDimensionButtonImage
  //····················································································································

  final let addDimensionButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addDimensionButtonImage_property_selection : EBSelection <NSImage> {
    return self.addDimensionButtonImage_property.selection
  }

  //····················································································································

  final var addDimensionButtonImage : NSImage? {
    switch self.addDimensionButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addZoneButtonImage
  //····················································································································

  final let addZoneButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addZoneButtonImage_property_selection : EBSelection <NSImage> {
    return self.addZoneButtonImage_property.selection
  }

  //····················································································································

  final var addZoneButtonImage : NSImage? {
    switch self.addZoneButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  final let documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.selection
  }

  //····················································································································

  final var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: statusImage
  //····················································································································

  final let statusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var statusImage_property_selection : EBSelection <NSImage> {
    return self.statusImage_property.selection
  }

  //····················································································································

  final var statusImage : NSImage? {
    switch self.statusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: statusMessage
  //····················································································································

  final let statusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var statusMessage_property_selection : EBSelection <String> {
    return self.statusMessage_property.selection
  }

  //····················································································································

  final var statusMessage : String? {
    switch self.statusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: metadataStatus
  //····················································································································

  final let metadataStatus_property = EBTransientProperty_MetadataStatus ()

  //····················································································································

  final var metadataStatus_property_selection : EBSelection <MetadataStatus> {
    return self.metadataStatus_property.selection
  }

  //····················································································································

  final var metadataStatus : MetadataStatus? {
    switch self.metadataStatus_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································

  weak final var mPackageGraphicView : AutoLayoutGraphicView? = nil
  weak final var mPackageIssueTableView : AutoLayoutCanariIssueTableView? = nil
  weak final var mProgramErrorTextField : AutoLayoutLabel? = nil
  weak final var mProgramTextView : AutoLayoutTextView? = nil
  weak final var mZoneForbiddenPadNumberTableView : AutoLayoutOneStringArrayTableView? = nil

  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override final var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  final func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: mModelImageObjectsController
    self.mModelImageObjectsController.addExplorer (name: "mModelImageObjectsController", y:&y, view:view)
  //--- Array controller property: mPackageObjectsController
    self.mPackageObjectsController.addExplorer (name: "mPackageObjectsController", y:&y, view:view)
  //--- Selection controller property: mPackageSegmentSelectionController
    self.mPackageSegmentSelectionController.addExplorer (name: "mPackageSegmentSelectionController", y:&y, view:view)
  //--- Selection controller property: mPackageBezierCurveSelectionController
    self.mPackageBezierCurveSelectionController.addExplorer (name: "mPackageBezierCurveSelectionController", y:&y, view:view)
  //--- Selection controller property: mPackageOvalSelectionController
    self.mPackageOvalSelectionController.addExplorer (name: "mPackageOvalSelectionController", y:&y, view:view)
  //--- Selection controller property: mPackageArcSelectionController
    self.mPackageArcSelectionController.addExplorer (name: "mPackageArcSelectionController", y:&y, view:view)
  //--- Selection controller property: mPackageGuideSelectionController
    self.mPackageGuideSelectionController.addExplorer (name: "mPackageGuideSelectionController", y:&y, view:view)
  //--- Selection controller property: mPackageDimensionSelectionController
    self.mPackageDimensionSelectionController.addExplorer (name: "mPackageDimensionSelectionController", y:&y, view:view)
  //--- Selection controller property: mPackageZoneSelectionController
    self.mPackageZoneSelectionController.addExplorer (name: "mPackageZoneSelectionController", y:&y, view:view)
  //--- Selection controller property: mPackagePadSelectionController
    self.mPackagePadSelectionController.addExplorer (name: "mPackagePadSelectionController", y:&y, view:view)
  //--- Selection controller property: mPackageSlavePadSelectionController
    self.mPackageSlavePadSelectionController.addExplorer (name: "mPackageSlavePadSelectionController", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "PackageRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : PackageRoot { return self.mRootObject as! PackageRoot }

  //····················································································································
  //    VIEW mPageMasterView
  //····················································································································

  let mPageMasterView : AutoLayoutAbstractStackView = AutoLayoutVerticalStackView ()

  //····················································································································
  //    VIEW mModelImagePage
  //····················································································································

  lazy var mModelImagePage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutTwoColumnsGridView ()
      .set (width: 250)
      .set (margins: 20)
      .add (left: self.computeImplicitView_0 (), right: self.computeImplicitView_1 ())
      .add (left: self.computeImplicitView_2 (), right: self.computeImplicitView_3 ())
      .add (left: self.computeImplicitView_4 (), right: self.computeImplicitView_5 ())
      .add (left: self.computeImplicitView_6 (), right: self.computeImplicitView_7 ())
      .add (left: self.computeImplicitView_8 (), right: self.computeImplicitView_9 ())
      .add (left: self.computeImplicitView_10 (), right: self.computeImplicitView_11 ())
      .add (left: self.computeImplicitView_12 (), right: self.computeImplicitView_13 ())
      .add (left: self.computeImplicitView_14 (), right: self.computeImplicitView_15 ())
      .add (left: self.computeImplicitView_16 (), right: self.computeImplicitView_17 ())
      .add (left: self.computeImplicitView_18 (), right: self.computeImplicitView_19 ())
      .add (left: self.computeImplicitView_20 (), right: self.computeImplicitView_21 ())
      .add (left: self.computeImplicitView_22 (), right: self.computeImplicitView_23 ())
      .add (left: self.computeImplicitView_24 (), right: self.computeImplicitView_25 ())
      .add (left: self.computeImplicitView_26 (), right: self.computeImplicitView_27 ())
      .add (left: self.computeImplicitView_28 (), right: self.computeImplicitView_29 ())
      .add (single: self.computeImplicitView_30 ())
      .flexibleSpace ()
    hStackView.appendView (view_0)
    let view_1 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
      .bind_backgroundImageData (self.rootObject.mModelImageData_property)
      .bind_underObjectsDisplay (self.rootObject.backgroundImagePageBackgroundDisplay_property)
      .bind_horizontalFlip (self.rootObject.mModelImagePageHorizontalFlip_property)
      .bind_verticalFlip (self.rootObject.mModelImagePageVerticalFlip_property)
      .bind_mouseGrid (self.rootObject.mModelImagePageGridStep_property)
      .bind_gridStep (self.rootObject.mModelImagePageGridStep_property)
      .bind_arrowKeyMagnitude (self.rootObject.mModelImagePageGridStep_property)
      .bind_gridStyle (self.rootObject.mModelImagePageGridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.mModelImagePageGridDisplayFactor_property)
      .bind_gridLineColor (preferences_lineColorOfPackageGrid_property)
      .bind_gridCrossColor (preferences_crossColorOfPackageGrid_property)
      .bind_zoom (self.rootObject.mModelImagePageZoom_property)
      .bind_backColor (preferences_packageBackgroundColor_property)
      .bind_xPlacardUnit (self.rootObject.mModelImagePageXPlacardUnit_property)
      .bind_yPlacardUnit (self.rootObject.mModelImagePageYPlacardUnit_property)
      .bind_graphic_controller (self.mModelImageObjectsController)
    hStackView.appendView (view_1)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mPackagePageInspectorMasterView
  //····················································································································

  let mPackagePageInspectorMasterView : AutoLayoutAbstractStackView = AutoLayoutVerticalStackView ()

  //····················································································································
  //    VIEW mPackagePage
  //····················································································································

  lazy var mPackagePage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
      .set (margins: 20)
      .set (spacing: 12)
    do{
      let view_0_0 = AutoLayoutHorizontalStackView ()
        .set (spacing: 0)
      do{
        let view_0_0_0 = AutoLayoutDragSourceButton (tooltip: "Add Segment")
          .bind_image (self.addSegmentButtonImage_property)
        self.configure_addPackageSegment (view_0_0_0) // Configurator
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_1)
        let view_0_0_2 = AutoLayoutDragSourceButton (tooltip: "Add Bezier")
          .bind_image (self.addBezierButtonImage_property)
        self.configure_addPackageBezier (view_0_0_2) // Configurator
        view_0_0.appendView (view_0_0_2)
        let view_0_0_3 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_3)
        let view_0_0_4 = AutoLayoutDragSourceButton (tooltip: "Add Oval")
          .bind_image (self.addOvalButtonImage_property)
        self.configure_addPackageOval (view_0_0_4) // Configurator
        view_0_0.appendView (view_0_0_4)
        let view_0_0_5 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_5)
        let view_0_0_6 = AutoLayoutDragSourceButton (tooltip: "Add Arc")
          .bind_image (self.addArcButtonImage_property)
        self.configure_addPackageArc (view_0_0_6) // Configurator
        view_0_0.appendView (view_0_0_6)
        let view_0_0_7 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_7)
        let view_0_0_8 = AutoLayoutDragSourceButton (tooltip: "Add Master Pad")
          .bind_image (self.addMasterPadButtonImage_property)
        self.configure_addPackageMasterPad (view_0_0_8) // Configurator
        view_0_0.appendView (view_0_0_8)
        let view_0_0_9 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_9)
        let view_0_0_10 = AutoLayoutDragSourceButton (tooltip: "Add Slave Pad")
          .bind_image (self.addSlavePadButtonImage_property)
          .bind_enabled (
            observedObjects: [self.rootObject.packagePads_property.count_property],
            computeFunction: { return (self.rootObject.packagePads_property.count_property_selection > EBSelection.single (0)) }
          )
        self.configure_addPackageSlavePad (view_0_0_10) // Configurator
        view_0_0.appendView (view_0_0_10)
        let view_0_0_11 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_11)
        let view_0_0_12 = AutoLayoutDragSourceButton (tooltip: "Add Zone")
          .bind_image (self.addZoneButtonImage_property)
        self.configure_addPackageZone (view_0_0_12) // Configurator
        view_0_0.appendView (view_0_0_12)
        let view_0_0_13 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_13)
        let view_0_0_14 = AutoLayoutDragSourceButton (tooltip: "Add Guide")
          .bind_image (self.addGuideButtonImage_property)
        self.configure_addPackageGuide (view_0_0_14) // Configurator
        view_0_0.appendView (view_0_0_14)
        let view_0_0_15 = AutoLayoutFlexibleSpace ()
        view_0_0.appendView (view_0_0_15)
        let view_0_0_16 = AutoLayoutDragSourceButton (tooltip: "Add Dimension")
          .bind_image (self.addDimensionButtonImage_property)
        self.configure_addPackageDimension (view_0_0_16) // Configurator
        view_0_0.appendView (view_0_0_16)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutTwoColumnsGridView ()
        .add (left: self.computeImplicitView_31 (), right: self.computeImplicitView_32 ())
        .add (left: self.computeImplicitView_33 (), right: self.computeImplicitView_34 ())
        .add (left: self.computeImplicitView_35 (), right: self.computeImplicitView_36 ())
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutSegmentedControlWithPages (documentView: self.mPackagePageInspectorMasterView, equalWidth: true)
        .makeWidthExpandable ()
        .addPage (title: "", pageView: self.mSelectedObjectsInspectorView)
        .addPage (title: "", pageView: self.mGridZoomInspectorView)
        .addPage (title: "", pageView: self.mDisplayInspectorView)
        .addPage (title: "", pageView: self.mIssuesInspectorView)
        .bind_selectedPage (self.rootObject.selectedInspector_property)
        .bind_segmentImage (self.rootObject.segmentedControlSegmentIssueImage_property, segmentIndex:3)
        .bind_segmentTitle (self.rootObject.segmentedControlSegmentIssueString_property, segmentIndex:3)
      self.configure_packagePageSegmentedControl (view_0_2) // Configurator
      view_0.appendView (view_0_2)
      let view_0_3 = self.mPackagePageInspectorMasterView
      view_0.appendView (view_0_3)
    }
    hStackView.appendView (view_0)
    let view_1 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
      .bind_foregroundImageData (self.rootObject.mModelImageData_property)
      .bind_foregroundImageOpacity (self.rootObject.mModelImageOpacity_property)
      .bind_horizontalFlip (self.rootObject.horizontalFlip_property)
      .bind_verticalFlip (self.rootObject.verticalFlip_property)
      .bind_overObjectsDisplay (self.rootObject.padNumberDisplay_property)
      .bind_mouseGrid (self.rootObject.gridStep_property)
      .bind_gridStep (self.rootObject.gridStep_property)
      .bind_arrowKeyMagnitude (self.rootObject.gridStep_property)
      .bind_shiftArrowKeyMagnitude (self.rootObject.gridStepMultipliedByDisplayFactor_property)
      .bind_gridStyle (self.rootObject.gridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.gridDisplayFactor_property)
      .bind_gridLineColor (preferences_lineColorOfPackageGrid_property)
      .bind_gridCrossColor (preferences_crossColorOfPackageGrid_property)
      .bind_zoom (self.rootObject.zoom_property)
      .bind_backColor (preferences_packageBackgroundColor_property)
      .bind_xPlacardUnit (self.rootObject.xPlacardUnit_property)
      .bind_yPlacardUnit (self.rootObject.yPlacardUnit_property)
      .bind_graphic_controller (self.mPackageObjectsController)
    self.mPackageGraphicView = view_1 // Outlet
    self.configure_packageGraphicView (view_1) // Configurator
    hStackView.appendView (view_1)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mIssuesInspectorView
  //····················································································································

  lazy var mIssuesInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutLabel (small: true)
        .bind_title (self.statusMessage_property)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutCanariIssueTableView ()
      .bind_issues (self.rootObject.issues_property)
    self.mPackageIssueTableView = view_1 // Outlet
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSelectedObjectsInspectorView
  //····················································································································

  lazy var mSelectedObjectsInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutObjectInspectorView ()
      .addObjectInspector (forEntity: PackageSegment.self, inspectorView: self.mSegmentInspectorView)
      .addObjectInspector (forEntity: PackageBezier.self, inspectorView: self.mBezierCurveInspectorView)
      .addObjectInspector (forEntity: PackageOval.self, inspectorView: self.mOvalInspectorView)
      .addObjectInspector (forEntity: PackageArc.self, inspectorView: self.mArcInspectorView)
      .addObjectInspector (forEntity: PackagePad.self, inspectorView: self.mMasterPadInspectorView)
      .addObjectInspector (forEntity: PackageSlavePad.self, inspectorView: self.mSlavePadInspectorView)
      .addObjectInspector (forEntity: PackageGuide.self, inspectorView: self.mGuideInspectorView)
      .addObjectInspector (forEntity: PackageDimension.self, inspectorView: self.mDimensionInspectorView)
      .addObjectInspector (forEntity: PackageZone.self, inspectorView: self.mZoneInspectorView)
      .bind_graphic_controller (self.mPackageObjectsController)
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSegmentInspectorView
  //····················································································································

  lazy var mSegmentInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Segment inspector", bold: true, small: true)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .add (left: self.computeImplicitView_37 (), right: self.computeImplicitView_38 ())
      .add (left: self.computeImplicitView_39 (), right: self.computeImplicitView_40 ())
      .add (left: self.computeImplicitView_41 (), right: self.computeImplicitView_42 ())
      .add (left: self.computeImplicitView_43 (), right: self.computeImplicitView_44 ())
      .add (left: self.computeImplicitView_45 (), right: self.computeImplicitView_46 ())
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mBezierCurveInspectorView
  //····················································································································

  lazy var mBezierCurveInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Bezier Curve Inspector", bold: true, small: true)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .add (left: self.computeImplicitView_47 (), right: self.computeImplicitView_48 ())
      .add (left: self.computeImplicitView_49 (), right: self.computeImplicitView_50 ())
      .add (left: self.computeImplicitView_51 (), right: self.computeImplicitView_52 ())
      .add (left: self.computeImplicitView_53 (), right: self.computeImplicitView_54 ())
      .add (left: self.computeImplicitView_55 (), right: self.computeImplicitView_56 ())
      .add (left: self.computeImplicitView_57 (), right: self.computeImplicitView_58 ())
      .add (left: self.computeImplicitView_59 (), right: self.computeImplicitView_60 ())
      .add (left: self.computeImplicitView_61 (), right: self.computeImplicitView_62 ())
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mOvalInspectorView
  //····················································································································

  lazy var mOvalInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Oval Inspector", bold: true, small: true)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .add (left: self.computeImplicitView_63 (), right: self.computeImplicitView_64 ())
      .add (left: self.computeImplicitView_65 (), right: self.computeImplicitView_66 ())
      .add (left: self.computeImplicitView_67 (), right: self.computeImplicitView_68 ())
      .add (left: self.computeImplicitView_69 (), right: self.computeImplicitView_70 ())
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mArcInspectorView
  //····················································································································

  lazy var mArcInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Arc Inspector", bold: true, small: true)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .add (left: self.computeImplicitView_71 (), right: self.computeImplicitView_72 ())
      .add (left: self.computeImplicitView_73 (), right: self.computeImplicitView_74 ())
      .add (left: self.computeImplicitView_75 (), right: self.computeImplicitView_76 ())
      .add (left: self.computeImplicitView_77 (), right: self.computeImplicitView_78 ())
      .add (left: self.computeImplicitView_79 (), right: self.computeImplicitView_80 ())
      .add (left: self.computeImplicitView_81 (), right: self.computeImplicitView_82 ())
      .add (left: self.computeImplicitView_83 (), right: self.computeImplicitView_84 ())
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutSwitch (title: "Path is Closed", small: true)
        .bind_value (self.mPackageArcSelectionController.pathIsClosed_property)
      view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutFlexibleSpace ()
      view_2.appendView (view_2_1)
    }
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mGuideInspectorView
  //····················································································································

  lazy var mGuideInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Guide Inspector", bold: true, small: true)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .add (left: self.computeImplicitView_85 (), right: self.computeImplicitView_86 ())
      .add (left: self.computeImplicitView_87 (), right: self.computeImplicitView_88 ())
      .add (left: self.computeImplicitView_89 (), right: self.computeImplicitView_90 ())
      .add (left: self.computeImplicitView_91 (), right: self.computeImplicitView_92 ())
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDimensionInspectorView
  //····················································································································

  lazy var mDimensionInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Dimension Inspector", bold: true, small: true)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .add (left: self.computeImplicitView_93 (), right: self.computeImplicitView_94 ())
      .add (left: self.computeImplicitView_95 (), right: self.computeImplicitView_96 ())
      .add (left: self.computeImplicitView_97 (), right: self.computeImplicitView_98 ())
      .add (left: self.computeImplicitView_99 (), right: self.computeImplicitView_100 ())
      .add (left: self.computeImplicitView_101 (), right: self.computeImplicitView_102 ())
      .add (left: self.computeImplicitView_103 (), right: self.computeImplicitView_104 ())
      .add (left: self.computeImplicitView_105 (), right: self.computeImplicitView_106 ())
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutButton (title: "Set Label at Mid X", small: true)
      .makeWidthExpandable ()
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutPackageDocument.setDimensionTextOriginAtMidXAction (_:))
      )
    vStackView.appendView (view_2)
    let view_3 = AutoLayoutButton (title: "Set Label at Mid Y", small: true)
      .makeWidthExpandable ()
      .bind_run (
        target: self,
        selector: #selector (AutoLayoutPackageDocument.setDimensionTextOriginAtMidYAction (_:))
      )
    vStackView.appendView (view_3)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mZoneInspectorView
  //····················································································································

  lazy var mZoneInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Zone Inspector", bold: true, small: true)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .add (left: self.computeImplicitView_107 (), right: self.computeImplicitView_108 ())
      .add (left: self.computeImplicitView_109 (), right: self.computeImplicitView_110 ())
      .add (left: self.computeImplicitView_111 (), right: self.computeImplicitView_112 ())
      .add (left: self.computeImplicitView_113 (), right: self.computeImplicitView_114 ())
      .add (left: self.computeImplicitView_115 (), right: self.computeImplicitView_116 ())
      .add (left: self.computeImplicitView_117 (), right: self.computeImplicitView_118 ())
      .separator ()
      .add (left: self.computeImplicitView_119 (), right: self.computeImplicitView_120 ())
      .add (single: self.computeImplicitView_121 ())
      .separator ()
      .add (left: self.computeImplicitView_122 (), right: self.computeImplicitView_123 ())
      .separator ()
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutVerticalStackView ()
      do{
        let view_2_0_0 = AutoLayoutButton (title: "+", small: true)
          .set (width: 32)
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutPackageDocument.addZoneForbiddenPadNumberAction (_:))
          )
        view_2_0.appendView (view_2_0_0)
        let view_2_0_1 = AutoLayoutButton (title: "-", small: true)
          .set (width: 32)
          .bind_enabled (
            observedObjects: [self.mPackageZoneSelectionController.emptyForbiddenPadArray_property],
            computeFunction: { return !self.mPackageZoneSelectionController.emptyForbiddenPadArray_property_selection }
          )
          .bind_run (
            target: self,
            selector: #selector (AutoLayoutPackageDocument.removeZoneForbiddenPadNumberAction (_:))
          )
        view_2_0.appendView (view_2_0_1)
        let view_2_0_2 = AutoLayoutFlexibleSpace ()
        view_2_0.appendView (view_2_0_2)
      }
      view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutOneStringArrayTableView ()
        .bind_array (self.mPackageZoneSelectionController.forbiddenPadArray_property)
      self.mZoneForbiddenPadNumberTableView = view_2_1 // Outlet
      view_2.appendView (view_2_1)
    }
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mMasterPadInspectorView
  //····················································································································

  lazy var mMasterPadInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Master Pad Inspector", bold: true, small: true)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .add (left: self.computeImplicitView_124 (), right: self.computeImplicitView_125 ())
      .add (left: self.computeImplicitView_126 (), right: self.computeImplicitView_127 ())
      .add (left: self.computeImplicitView_128 (), right: self.computeImplicitView_129 ())
      .add (left: self.computeImplicitView_130 (), right: self.computeImplicitView_131 ())
      .add (left: self.computeImplicitView_132 (), right: self.computeImplicitView_133 ())
      .add (left: self.computeImplicitView_134 (), right: self.computeImplicitView_135 ())
      .add (left: self.computeImplicitView_136 (), right: self.computeImplicitView_137 ())
      .add (left: self.computeImplicitView_138 (), right: self.computeImplicitView_139 ())
      .add (left: self.computeImplicitView_140 (), right: self.computeImplicitView_141 ())
      .separator ()
      .add (left: self.computeImplicitView_142 (), right: self.computeImplicitView_143 ())
      .add (left: self.computeImplicitView_144 (), right: self.computeImplicitView_145 ())
      .separator ()
      .add (left: self.computeImplicitView_146 (), right: self.computeImplicitView_147 ())
      .add (single: self.computeImplicitView_148 ())
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSlavePadInspectorView
  //····················································································································

  lazy var mSlavePadInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Slave Pad Inspector", bold: true, small: true)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTwoColumnsGridView ()
      .add (left: self.computeImplicitView_149 (), right: self.computeImplicitView_150 ())
      .add (left: self.computeImplicitView_151 (), right: self.computeImplicitView_152 ())
      .add (left: self.computeImplicitView_153 (), right: self.computeImplicitView_154 ())
      .add (left: self.computeImplicitView_155 (), right: self.computeImplicitView_156 ())
      .add (left: self.computeImplicitView_157 (), right: self.computeImplicitView_158 ())
      .add (left: self.computeImplicitView_159 (), right: self.computeImplicitView_160 ())
      .add (left: self.computeImplicitView_161 (), right: self.computeImplicitView_162 ())
      .add (left: self.computeImplicitView_163 (), right: self.computeImplicitView_164 ())
      .add (left: self.computeImplicitView_165 (), right: self.computeImplicitView_166 ())
      .separator ()
      .add (left: self.computeImplicitView_167 (), right: self.computeImplicitView_168 ())
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mGridZoomInspectorView
  //····················································································································

  lazy var mGridZoomInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutTwoColumnsGridView ()
      .add (left: self.computeImplicitView_169 (), right: self.computeImplicitView_170 ())
      .add (left: self.computeImplicitView_171 (), right: self.computeImplicitView_172 ())
      .add (left: self.computeImplicitView_173 (), right: self.computeImplicitView_174 ())
      .add (left: self.computeImplicitView_175 (), right: self.computeImplicitView_176 ())
      .add (left: self.computeImplicitView_177 (), right: self.computeImplicitView_178 ())
      .add (left: self.computeImplicitView_179 (), right: self.computeImplicitView_180 ())
      .add (left: self.computeImplicitView_181 (), right: self.computeImplicitView_182 ())
      .add (left: self.computeImplicitView_183 (), right: self.computeImplicitView_184 ())
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDisplayInspectorView
  //····················································································································

  lazy var mDisplayInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutTwoColumnsGridView ()
        .add (left: self.computeImplicitView_185 (), right: self.computeImplicitView_186 ())
        .add (left: self.computeImplicitView_187 (), right: self.computeImplicitView_188 ())
        .add (left: self.computeImplicitView_189 (), right: self.computeImplicitView_190 ())
        .add (left: self.computeImplicitView_191 (), right: self.computeImplicitView_192 ())
        .add (left: self.computeImplicitView_193 (), right: self.computeImplicitView_194 ())
        .add (left: self.computeImplicitView_195 (), right: self.computeImplicitView_196 ())
        .add (left: self.computeImplicitView_197 (), right: self.computeImplicitView_198 ())
        .add (left: self.computeImplicitView_199 (), right: self.computeImplicitView_200 ())
        .add (left: self.computeImplicitView_201 (), right: self.computeImplicitView_202 ())
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mProgramPage
  //····················································································································

  lazy var mProgramPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 20)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Load from Design", small: true)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutPackageDocument.loadFromDesignAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutButton (title: "Run", small: true)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutPackageDocument.runProgramAction (_:))
        )
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutButton (title: "Clear Error", small: true)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutPackageDocument.clearProgramErrorAction (_:))
        )
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutLabel (small: true)
        .setRedTextColor ()
      self.mProgramErrorTextField = view_0_3 // Outlet
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_4)
      let view_0_5 = AutoLayoutHelpButton (small: true)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutPackageDocument.programHelpAction (_:))
        )
      view_0.appendView (view_0_5)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutTextView (editable: true)
      .bind_value (self.rootObject.program_property)
    self.mProgramTextView = view_1 // Outlet
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mInfosPage
  //····················································································································

  lazy var mInfosPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 20)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Reset Version and Signature", small: true)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutPackageDocument.resetVersionAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_1)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutVerticalStackView ()
      do{
        let view_1_0_0 = AutoLayoutStaticLabel (title: "Comments", bold: true, small: false)
        view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutFlexibleSpace ()
        view_1_0.appendView (view_1_0_1)
      }
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutTextView (editable: true)
        .bind_value (self.rootObject.comments_property)
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    IMPLICIT VIEW 0
  //····················································································································

  fileprivate final func computeImplicitView_0 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Style", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 1
  //····················································································································

  fileprivate final func computeImplicitView_1 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles ())
      .bind_selectedIndex (self.rootObject.mModelImagePageGridStyle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 2
  //····················································································································

  fileprivate final func computeImplicitView_2 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Display", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 3
  //····················································································································

  fileprivate final func computeImplicitView_3 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton ()
      .add (title: "1 Step", withTag: 1)
      .add (title: "2 Steps", withTag: 2)
      .add (title: "5 Steps", withTag: 5)
      .add (title: "8 Steps", withTag: 8)
      .add (title: "10 Steps", withTag: 10)
      .add (title: "12 Steps", withTag: 12)
      .add (title: "15 Steps", withTag: 15)
      .add (title: "20 Steps", withTag: 20)
      .add (title: "25 Steps", withTag: 25)
      .add (title: "50 Steps", withTag: 50)
      .add (title: "100 Steps", withTag: 100)
      .add (title: "200 Steps", withTag: 200)
      .bind_selectedTag (self.rootObject.mModelImagePageGridDisplayFactor_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 4
  //····················································································································

  fileprivate final func computeImplicitView_4 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Step", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 5
  //····················································································································

  fileprivate final func computeImplicitView_5 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.rootObject.mModelImagePageGridStep_property, self.rootObject.mModelImagePageGridStepUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 6
  //····················································································································

  fileprivate final func computeImplicitView_6 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Flip", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 7
  //····················································································································

  fileprivate final func computeImplicitView_7 () -> NSView {
    let view = AutoLayoutSwitch (title: "Horizontal", small: true)
      .bind_value (self.rootObject.mModelImagePageHorizontalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 8
  //····················································································································

  fileprivate final func computeImplicitView_8 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 9
  //····················································································································

  fileprivate final func computeImplicitView_9 () -> NSView {
    let view = AutoLayoutSwitch (title: "Vertical", small: true)
      .bind_value (self.rootObject.mModelImagePageVerticalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 10
  //····················································································································

  fileprivate final func computeImplicitView_10 () -> NSView {
    let view = AutoLayoutStaticLabels (left: "Placard", right: "X", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 11
  //····················································································································

  fileprivate final func computeImplicitView_11 () -> NSView {
    let view = AutoLayoutCanariUnitPopUpButton ()
      .bind_unit (self.rootObject.mModelImagePageXPlacardUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 12
  //····················································································································

  fileprivate final func computeImplicitView_12 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 13
  //····················································································································

  fileprivate final func computeImplicitView_13 () -> NSView {
    let view = AutoLayoutCanariUnitPopUpButton ()
      .bind_unit (self.rootObject.mModelImagePageYPlacardUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 14
  //····················································································································

  fileprivate final func computeImplicitView_14 () -> NSView {
    let view = AutoLayoutPullDownButton (title: "Action", small: true)
      .add (item: AutoLayoutMenuItemDescriptor (title: "Paste Model Image", target: self, selector: #selector (AutoLayoutPackageDocument.loadModelImageFromPasteboardAction (_:)), observedObjects: [self.rootObject.hasModelImage_property], computeFunction: { return !self.rootObject.hasModelImage_property_selection }))
      .add (item: AutoLayoutMenuItemDescriptor (title: "Load DIL16 Embedded Model Image", target: self, selector: #selector (AutoLayoutPackageDocument.loadDIL16ModelImageFromResourcesAction (_:)), observedObjects: [self.rootObject.hasModelImage_property], computeFunction: { return !self.rootObject.hasModelImage_property_selection }))
      .add (item: AutoLayoutMenuItemDescriptor (title: "Remove Model Image", target: self, selector: #selector (AutoLayoutPackageDocument.removeModelImageAction (_:)), observedObjects: [self.rootObject.hasModelImage_property], computeFunction: { return self.rootObject.hasModelImage_property_selection }))
      .add (item: AutoLayoutMenuItemDescriptor (title: "Reset Green and Brown Points", target: self, selector: #selector (AutoLayoutPackageDocument.resetModelImagePointsAction (_:)), observedObjects: [self.rootObject.hasModelImage_property], computeFunction: { return self.rootObject.hasModelImage_property_selection }))
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 15
  //····················································································································

  fileprivate final func computeImplicitView_15 () -> NSView {
    let view = AutoLayoutLabel (small: true)
      .bind_title (self.rootObject.modelImageSizeString_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 16
  //····················································································································

  fileprivate final func computeImplicitView_16 () -> NSView {
    let view = AutoLayoutStaticLabels (left: "Green", right: "X", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 17
  //····················································································································

  fileprivate final func computeImplicitView_17 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.rootObject.mModelImageFirstPointX_property, self.rootObject.mDimensionUnitFirstModelPointX_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 18
  //····················································································································

  fileprivate final func computeImplicitView_18 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 19
  //····················································································································

  fileprivate final func computeImplicitView_19 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.rootObject.mModelImageFirstPointY_property, self.rootObject.mDimensionUnitFirstModelPointY_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 20
  //····················································································································

  fileprivate final func computeImplicitView_20 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "∆X", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 21
  //····················································································································

  fileprivate final func computeImplicitView_21 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.rootObject.mModelImageSecondPointDx_property, self.rootObject.mDimensionUnitSecondModelPointDx_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 22
  //····················································································································

  fileprivate final func computeImplicitView_22 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "∆Y", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 23
  //····················································································································

  fileprivate final func computeImplicitView_23 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.rootObject.mModelImageSecondPointDy_property, self.rootObject.mDimensionUnitSecondModelPointDy_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 24
  //····················································································································

  fileprivate final func computeImplicitView_24 () -> NSView {
    let view = AutoLayoutStaticLabels (left: "Brown", right: "X", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 25
  //····················································································································

  fileprivate final func computeImplicitView_25 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.rootObject.secondPointX_property, self.rootObject.mModelImageSecondPointXUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 26
  //····················································································································

  fileprivate final func computeImplicitView_26 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 27
  //····················································································································

  fileprivate final func computeImplicitView_27 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.rootObject.secondPointY_property, self.rootObject.mModelImageSecondPointXUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 28
  //····················································································································

  fileprivate final func computeImplicitView_28 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "PointSize", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 29
  //····················································································································

  fileprivate final func computeImplicitView_29 () -> NSView {
    let view = AutoLayoutLinearSlider (min: 1, max: 61, ticks: 19)
      .bind_intValue (self.rootObject.mModelPointsCircleRadius_property, sendContinously:true)
      .bind_enabled (
        observedObjects: [self.rootObject.hasModelImage_property],
        computeFunction: { return self.rootObject.hasModelImage_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 30
  //····················································································································

  fileprivate final func computeImplicitView_30 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutButton (title: "Lock Points to Model Image", small: true)
        .bind_enabled (
          observedObjects: [self.rootObject.hasModelImage_property, self.rootObject.mPointsAreLocked_property],
          computeFunction: { return (!self.rootObject.mPointsAreLocked_property_selection && self.rootObject.hasModelImage_property_selection) }
        )
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutPackageDocument.lockImagePointsAction (_:))
        )
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
      let view_2 = AutoLayoutImageObserverView (small: true)
        .bind_image (self.rootObject.lockImageView_property)
      view.appendView (view_2)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 31
  //····················································································································

  fileprivate final func computeImplicitView_31 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Model Image Opacity", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 32
  //····················································································································

  fileprivate final func computeImplicitView_32 () -> NSView {
    let view = AutoLayoutLinearSlider (min: 0, max: 1, ticks: 11)
      .bind_doubleValue (self.rootObject.mModelImageOpacity_property, sendContinously:true)
      .bind_enabled (
        observedObjects: [self.rootObject.hasModelImage_property],
        computeFunction: { return self.rootObject.hasModelImage_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 33
  //····················································································································

  fileprivate final func computeImplicitView_33 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Auto Numbers", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 34
  //····················································································································

  fileprivate final func computeImplicitView_34 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: PadNumbering.popupTitles ())
      .bind_selectedIndex (self.rootObject.padNumbering_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 35
  //····················································································································

  fileprivate final func computeImplicitView_35 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 36
  //····················································································································

  fileprivate final func computeImplicitView_36 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutStaticLabel (title: "From", bold: false, small: true)
        .bind_enabled (
          observedObjects: [self.rootObject.counterClockNumbering_property],
          computeFunction: { return self.rootObject.counterClockNumbering_property_selection }
        )
      view.appendView (view_0)
      let view_1 = AutoLayoutIntField (width: 45)
        .set (min: 0)
        .set (max: 360)
        .set (format: "##0°")
        .bind_value (self.rootObject.counterClockNumberingStartAngle_property, sendContinously:true)
        .bind_enabled (
          observedObjects: [self.rootObject.counterClockNumbering_property],
          computeFunction: { return self.rootObject.counterClockNumbering_property_selection }
        )
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 37
  //····················································································································

  fileprivate final func computeImplicitView_37 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "First Point", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 38
  //····················································································································

  fileprivate final func computeImplicitView_38 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageSegmentSelectionController.x1_property, self.mPackageSegmentSelectionController.x1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 39
  //····················································································································

  fileprivate final func computeImplicitView_39 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 40
  //····················································································································

  fileprivate final func computeImplicitView_40 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageSegmentSelectionController.y1_property, self.mPackageSegmentSelectionController.y1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 41
  //····················································································································

  fileprivate final func computeImplicitView_41 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Second Point", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 42
  //····················································································································

  fileprivate final func computeImplicitView_42 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageSegmentSelectionController.x2_property, self.mPackageSegmentSelectionController.x2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 43
  //····················································································································

  fileprivate final func computeImplicitView_43 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 44
  //····················································································································

  fileprivate final func computeImplicitView_44 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageSegmentSelectionController.y2_property, self.mPackageSegmentSelectionController.y2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 45
  //····················································································································

  fileprivate final func computeImplicitView_45 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Length", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 46
  //····················································································································

  fileprivate final func computeImplicitView_46 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageSegmentSelectionController.lengthInCanariUnit_property, self.mPackageSegmentSelectionController.lengthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 47
  //····················································································································

  fileprivate final func computeImplicitView_47 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "First End", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 48
  //····················································································································

  fileprivate final func computeImplicitView_48 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.x1_property, self.mPackageBezierCurveSelectionController.x1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 49
  //····················································································································

  fileprivate final func computeImplicitView_49 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 50
  //····················································································································

  fileprivate final func computeImplicitView_50 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.y1_property, self.mPackageBezierCurveSelectionController.y1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 51
  //····················································································································

  fileprivate final func computeImplicitView_51 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Second End", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 52
  //····················································································································

  fileprivate final func computeImplicitView_52 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.x2_property, self.mPackageBezierCurveSelectionController.x2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 53
  //····················································································································

  fileprivate final func computeImplicitView_53 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 54
  //····················································································································

  fileprivate final func computeImplicitView_54 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.y2_property, self.mPackageBezierCurveSelectionController.y2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 55
  //····················································································································

  fileprivate final func computeImplicitView_55 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "First Control", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 56
  //····················································································································

  fileprivate final func computeImplicitView_56 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.cpx1_property, self.mPackageBezierCurveSelectionController.cpx1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 57
  //····················································································································

  fileprivate final func computeImplicitView_57 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 58
  //····················································································································

  fileprivate final func computeImplicitView_58 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.cpy1_property, self.mPackageBezierCurveSelectionController.cpy1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 59
  //····················································································································

  fileprivate final func computeImplicitView_59 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Second Control", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 60
  //····················································································································

  fileprivate final func computeImplicitView_60 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.cpx2_property, self.mPackageBezierCurveSelectionController.cpx2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 61
  //····················································································································

  fileprivate final func computeImplicitView_61 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 62
  //····················································································································

  fileprivate final func computeImplicitView_62 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageBezierCurveSelectionController.cpy2_property, self.mPackageBezierCurveSelectionController.cpy2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 63
  //····················································································································

  fileprivate final func computeImplicitView_63 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Bottom Left", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 64
  //····················································································································

  fileprivate final func computeImplicitView_64 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageOvalSelectionController.x_property, self.mPackageOvalSelectionController.xUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 65
  //····················································································································

  fileprivate final func computeImplicitView_65 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 66
  //····················································································································

  fileprivate final func computeImplicitView_66 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageOvalSelectionController.y_property, self.mPackageOvalSelectionController.yUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 67
  //····················································································································

  fileprivate final func computeImplicitView_67 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Width", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 68
  //····················································································································

  fileprivate final func computeImplicitView_68 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageOvalSelectionController.width_property, self.mPackageOvalSelectionController.widthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 69
  //····················································································································

  fileprivate final func computeImplicitView_69 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Height", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 70
  //····················································································································

  fileprivate final func computeImplicitView_70 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageOvalSelectionController.height_property, self.mPackageOvalSelectionController.heightUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 71
  //····················································································································

  fileprivate final func computeImplicitView_71 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Center", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 72
  //····················································································································

  fileprivate final func computeImplicitView_72 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageArcSelectionController.xCenter_property, self.mPackageArcSelectionController.xCenterUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 73
  //····················································································································

  fileprivate final func computeImplicitView_73 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 74
  //····················································································································

  fileprivate final func computeImplicitView_74 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageArcSelectionController.yCenter_property, self.mPackageArcSelectionController.yCenterUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 75
  //····················································································································

  fileprivate final func computeImplicitView_75 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Radius", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 76
  //····················································································································

  fileprivate final func computeImplicitView_76 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageArcSelectionController.radius_property, self.mPackageArcSelectionController.radiusUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 77
  //····················································································································

  fileprivate final func computeImplicitView_77 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Start Angle", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 78
  //····················································································································

  fileprivate final func computeImplicitView_78 () -> NSView {
    let view = AutoLayoutCanariAngleFieldAndSlider ()
      .bind_angle (self.mPackageArcSelectionController.startAngle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 79
  //····················································································································

  fileprivate final func computeImplicitView_79 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Angle", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 80
  //····················································································································

  fileprivate final func computeImplicitView_80 () -> NSView {
    let view = AutoLayoutCanariAngleField ()
      .bind_angle (self.mPackageArcSelectionController.arcAngle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 81
  //····················································································································

  fileprivate final func computeImplicitView_81 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Start Tangent", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 82
  //····················································································································

  fileprivate final func computeImplicitView_82 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageArcSelectionController.startTangent_property, self.mPackageArcSelectionController.startTangentUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 83
  //····················································································································

  fileprivate final func computeImplicitView_83 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "End Tangent", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 84
  //····················································································································

  fileprivate final func computeImplicitView_84 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageArcSelectionController.endTangent_property, self.mPackageArcSelectionController.endTangentUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 85
  //····················································································································

  fileprivate final func computeImplicitView_85 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "First Point", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 86
  //····················································································································

  fileprivate final func computeImplicitView_86 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageGuideSelectionController.x1_property, self.mPackageGuideSelectionController.x1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 87
  //····················································································································

  fileprivate final func computeImplicitView_87 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 88
  //····················································································································

  fileprivate final func computeImplicitView_88 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageGuideSelectionController.y1_property, self.mPackageGuideSelectionController.y1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 89
  //····················································································································

  fileprivate final func computeImplicitView_89 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Second Point", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 90
  //····················································································································

  fileprivate final func computeImplicitView_90 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageGuideSelectionController.x2_property, self.mPackageGuideSelectionController.x2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 91
  //····················································································································

  fileprivate final func computeImplicitView_91 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 92
  //····················································································································

  fileprivate final func computeImplicitView_92 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageGuideSelectionController.y2_property, self.mPackageGuideSelectionController.y2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 93
  //····················································································································

  fileprivate final func computeImplicitView_93 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "First Point", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 94
  //····················································································································

  fileprivate final func computeImplicitView_94 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.x1_property, self.mPackageDimensionSelectionController.x1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 95
  //····················································································································

  fileprivate final func computeImplicitView_95 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 96
  //····················································································································

  fileprivate final func computeImplicitView_96 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.y1_property, self.mPackageDimensionSelectionController.y1Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 97
  //····················································································································

  fileprivate final func computeImplicitView_97 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Second Point", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 98
  //····················································································································

  fileprivate final func computeImplicitView_98 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.x2_property, self.mPackageDimensionSelectionController.x2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 99
  //····················································································································

  fileprivate final func computeImplicitView_99 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 100
  //····················································································································

  fileprivate final func computeImplicitView_100 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.y2_property, self.mPackageDimensionSelectionController.y2Unit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 101
  //····················································································································

  fileprivate final func computeImplicitView_101 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Distance", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 102
  //····················································································································

  fileprivate final func computeImplicitView_102 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.distanceInCanariUnit_property, self.mPackageDimensionSelectionController.distanceUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 103
  //····················································································································

  fileprivate final func computeImplicitView_103 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Label", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 104
  //····················································································································

  fileprivate final func computeImplicitView_104 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.xDimension_property, self.mPackageDimensionSelectionController.xDimensionUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 105
  //····················································································································

  fileprivate final func computeImplicitView_105 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 106
  //····················································································································

  fileprivate final func computeImplicitView_106 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageDimensionSelectionController.yDimension_property, self.mPackageDimensionSelectionController.yDimensionUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 107
  //····················································································································

  fileprivate final func computeImplicitView_107 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Bottom Left", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 108
  //····················································································································

  fileprivate final func computeImplicitView_108 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageZoneSelectionController.x_property, self.mPackageZoneSelectionController.xUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 109
  //····················································································································

  fileprivate final func computeImplicitView_109 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 110
  //····················································································································

  fileprivate final func computeImplicitView_110 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageZoneSelectionController.y_property, self.mPackageZoneSelectionController.yUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 111
  //····················································································································

  fileprivate final func computeImplicitView_111 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Width", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 112
  //····················································································································

  fileprivate final func computeImplicitView_112 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageZoneSelectionController.width_property, self.mPackageZoneSelectionController.widthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 113
  //····················································································································

  fileprivate final func computeImplicitView_113 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Height", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 114
  //····················································································································

  fileprivate final func computeImplicitView_114 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageZoneSelectionController.height_property, self.mPackageZoneSelectionController.heightUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 115
  //····················································································································

  fileprivate final func computeImplicitView_115 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Label", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 116
  //····················································································································

  fileprivate final func computeImplicitView_116 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageZoneSelectionController.xName_property, self.mPackageZoneSelectionController.xNameUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 117
  //····················································································································

  fileprivate final func computeImplicitView_117 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 118
  //····················································································································

  fileprivate final func computeImplicitView_118 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageZoneSelectionController.yName_property, self.mPackageZoneSelectionController.yNameUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 119
  //····················································································································

  fileprivate final func computeImplicitView_119 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Name", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 120
  //····················································································································

  fileprivate final func computeImplicitView_120 () -> NSView {
    let view = AutoLayoutTextField (small: true)
      .bind_value (self.mPackageZoneSelectionController.zoneName_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 121
  //····················································································································

  fileprivate final func computeImplicitView_121 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutSwitch (title: "Show Zone Name", small: true)
        .bind_value (self.mPackageZoneSelectionController.displayZoneName_property)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 122
  //····················································································································

  fileprivate final func computeImplicitView_122 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Auto Numbering", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 123
  //····················································································································

  fileprivate final func computeImplicitView_123 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: PadNumbering.popupTitles ())
      .bind_selectedIndex (self.mPackageZoneSelectionController.zoneNumbering_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 124
  //····················································································································

  fileprivate final func computeImplicitView_124 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Center", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 125
  //····················································································································

  fileprivate final func computeImplicitView_125 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackagePadSelectionController.xCenter_property, self.mPackagePadSelectionController.xCenterUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 126
  //····················································································································

  fileprivate final func computeImplicitView_126 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 127
  //····················································································································

  fileprivate final func computeImplicitView_127 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackagePadSelectionController.yCenter_property, self.mPackagePadSelectionController.yCenterUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 128
  //····················································································································

  fileprivate final func computeImplicitView_128 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Width", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 129
  //····················································································································

  fileprivate final func computeImplicitView_129 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackagePadSelectionController.width_property, self.mPackagePadSelectionController.widthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 130
  //····················································································································

  fileprivate final func computeImplicitView_130 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Height", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 131
  //····················································································································

  fileprivate final func computeImplicitView_131 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackagePadSelectionController.height_property, self.mPackagePadSelectionController.heightUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 132
  //····················································································································

  fileprivate final func computeImplicitView_132 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Shape", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 133
  //····················································································································

  fileprivate final func computeImplicitView_133 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: PadShape.popupTitles ())
      .bind_selectedIndex (self.mPackagePadSelectionController.padShape_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 134
  //····················································································································

  fileprivate final func computeImplicitView_134 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Style", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 135
  //····················································································································

  fileprivate final func computeImplicitView_135 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: PadStyle.popupTitles ())
      .bind_selectedIndex (self.mPackagePadSelectionController.padStyle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 136
  //····················································································································

  fileprivate final func computeImplicitView_136 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Hole Width", bold: false, small: true)
      .bind_hidden (
        observedObjects: [self.mPackagePadSelectionController.padIsTraversing_property],
        computeFunction: { return !self.mPackagePadSelectionController.padIsTraversing_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 137
  //····················································································································

  fileprivate final func computeImplicitView_137 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackagePadSelectionController.holeWidth_property, self.mPackagePadSelectionController.holeWidthUnit_property)
      .bind_hidden (
        observedObjects: [self.mPackagePadSelectionController.padIsTraversing_property],
        computeFunction: { return !self.mPackagePadSelectionController.padIsTraversing_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 138
  //····················································································································

  fileprivate final func computeImplicitView_138 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Hole Height", bold: false, small: true)
      .bind_hidden (
        observedObjects: [self.mPackagePadSelectionController.padIsTraversing_property],
        computeFunction: { return !self.mPackagePadSelectionController.padIsTraversing_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 139
  //····················································································································

  fileprivate final func computeImplicitView_139 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackagePadSelectionController.holeHeight_property, self.mPackagePadSelectionController.holeHeightUnit_property)
      .bind_hidden (
        observedObjects: [self.mPackagePadSelectionController.padIsTraversing_property],
        computeFunction: { return !self.mPackagePadSelectionController.padIsTraversing_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 140
  //····················································································································

  fileprivate final func computeImplicitView_140 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Annular Ring", bold: false, small: true)
      .bind_hidden (
        observedObjects: [self.mPackagePadSelectionController.padIsTraversing_property],
        computeFunction: { return !self.mPackagePadSelectionController.padIsTraversing_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 141
  //····················································································································

  fileprivate final func computeImplicitView_141 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackagePadSelectionController.annularRing_property, self.mPackagePadSelectionController.annularRingUnit_property)
      .bind_hidden (
        observedObjects: [self.mPackagePadSelectionController.padIsTraversing_property],
        computeFunction: { return !self.mPackagePadSelectionController.padIsTraversing_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 142
  //····················································································································

  fileprivate final func computeImplicitView_142 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Zone", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 143
  //····················································································································

  fileprivate final func computeImplicitView_143 () -> NSView {
    let view = AutoLayoutTextObserverField (small: true)
      .bind_observedValue (self.mPackagePadSelectionController.zoneName_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 144
  //····················································································································

  fileprivate final func computeImplicitView_144 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pad Number", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 145
  //····················································································································

  fileprivate final func computeImplicitView_145 () -> NSView {
    let view = AutoLayoutIntObserverField (small: true)
      .bind_observedValue (self.mPackagePadSelectionController.padNumber_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 146
  //····················································································································

  fileprivate final func computeImplicitView_146 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Slave Pads", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 147
  //····················································································································

  fileprivate final func computeImplicitView_147 () -> NSView {
    let view = AutoLayoutIntObserverField (small: true)
      .bind_observedValue (self.mPackagePadSelectionController.slavePadCount_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 148
  //····················································································································

  fileprivate final func computeImplicitView_148 () -> NSView {
    let view = AutoLayoutCanariPadRenumberPullDownButton ()
      .bind_currentNumber (self.mPackagePadSelectionController.padNumber_property)
      .bind_currentZoneName (self.mPackagePadSelectionController.zoneName_property)
      .bind_enabled (
        observedObjects: [self.mPackagePadSelectionController.noZone_property, self.mPackagePadSelectionController.zoneAllowsManualRenumbering_property, self.rootObject.freePadNumbering_property],
        computeFunction: { return ((self.mPackagePadSelectionController.noZone_property_selection && self.rootObject.freePadNumbering_property_selection) || self.mPackagePadSelectionController.zoneAllowsManualRenumbering_property_selection) }
      )
    self.configure_configurePadRenumberPullDownButton (view) // Configurator
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 149
  //····················································································································

  fileprivate final func computeImplicitView_149 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Center", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 150
  //····················································································································

  fileprivate final func computeImplicitView_150 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.xCenter_property, self.mPackageSlavePadSelectionController.xCenterUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 151
  //····················································································································

  fileprivate final func computeImplicitView_151 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 152
  //····················································································································

  fileprivate final func computeImplicitView_152 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.yCenter_property, self.mPackageSlavePadSelectionController.yCenterUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 153
  //····················································································································

  fileprivate final func computeImplicitView_153 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Width", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 154
  //····················································································································

  fileprivate final func computeImplicitView_154 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.width_property, self.mPackageSlavePadSelectionController.widthUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 155
  //····················································································································

  fileprivate final func computeImplicitView_155 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Height", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 156
  //····················································································································

  fileprivate final func computeImplicitView_156 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.height_property, self.mPackageSlavePadSelectionController.heightUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 157
  //····················································································································

  fileprivate final func computeImplicitView_157 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Shape", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 158
  //····················································································································

  fileprivate final func computeImplicitView_158 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: PadShape.popupTitles ())
      .bind_selectedIndex (self.mPackageSlavePadSelectionController.padShape_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 159
  //····················································································································

  fileprivate final func computeImplicitView_159 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Style", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 160
  //····················································································································

  fileprivate final func computeImplicitView_160 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: SlavePadStyle.popupTitles ())
      .bind_selectedIndex (self.mPackageSlavePadSelectionController.padStyle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 161
  //····················································································································

  fileprivate final func computeImplicitView_161 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Hole Width", bold: false, small: true)
      .bind_hidden (
        observedObjects: [self.mPackageSlavePadSelectionController.padIsTraversing_property],
        computeFunction: { return !self.mPackageSlavePadSelectionController.padIsTraversing_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 162
  //····················································································································

  fileprivate final func computeImplicitView_162 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.holeWidth_property, self.mPackageSlavePadSelectionController.holeWidthUnit_property)
      .bind_hidden (
        observedObjects: [self.mPackageSlavePadSelectionController.padIsTraversing_property],
        computeFunction: { return !self.mPackageSlavePadSelectionController.padIsTraversing_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 163
  //····················································································································

  fileprivate final func computeImplicitView_163 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Hole Height", bold: false, small: true)
      .bind_hidden (
        observedObjects: [self.mPackageSlavePadSelectionController.padIsTraversing_property],
        computeFunction: { return !self.mPackageSlavePadSelectionController.padIsTraversing_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 164
  //····················································································································

  fileprivate final func computeImplicitView_164 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.holeHeight_property, self.mPackageSlavePadSelectionController.holeHeightUnit_property)
      .bind_hidden (
        observedObjects: [self.mPackageSlavePadSelectionController.padIsTraversing_property],
        computeFunction: { return !self.mPackageSlavePadSelectionController.padIsTraversing_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 165
  //····················································································································

  fileprivate final func computeImplicitView_165 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Annular Ring", bold: false, small: true)
      .bind_hidden (
        observedObjects: [self.mPackageSlavePadSelectionController.padIsTraversing_property],
        computeFunction: { return !self.mPackageSlavePadSelectionController.padIsTraversing_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 166
  //····················································································································

  fileprivate final func computeImplicitView_166 () -> NSView {
    let view = AutoLayoutCanariObservedDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.mPackageSlavePadSelectionController.annularRing_property, self.mPackageSlavePadSelectionController.annularRingUnit_property)
      .bind_hidden (
        observedObjects: [self.mPackageSlavePadSelectionController.padIsTraversing_property],
        computeFunction: { return !self.mPackageSlavePadSelectionController.padIsTraversing_property_selection }
      )
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 167
  //····················································································································

  fileprivate final func computeImplicitView_167 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Linked to Pad", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 168
  //····················································································································

  fileprivate final func computeImplicitView_168 () -> NSView {
    let view = AutoLayoutCanariSlavePadAssignPopUpButton ()
      .bind_masterPadName (self.mPackageSlavePadSelectionController.masterPadNameWithZoneName_property)
      .bind_masterPadObjectIndexArray (self.rootObject.masterPadObjectIndexArray_property)
    self.configure_configureSlavePadAssignPopUpButton (view) // Configurator
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 169
  //····················································································································

  fileprivate final func computeImplicitView_169 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Style", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 170
  //····················································································································

  fileprivate final func computeImplicitView_170 () -> NSView {
    let view = AutoLayoutEnumPopUpButton (titles: GridStyle.popupTitles ())
      .bind_selectedIndex (self.rootObject.gridStyle_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 171
  //····················································································································

  fileprivate final func computeImplicitView_171 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Display", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 172
  //····················································································································

  fileprivate final func computeImplicitView_172 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton ()
      .add (title: "1 Step", withTag: 1)
      .add (title: "2 Steps", withTag: 2)
      .add (title: "5 Steps", withTag: 5)
      .add (title: "8 Steps", withTag: 8)
      .add (title: "10 Steps", withTag: 10)
      .bind_selectedTag (self.rootObject.gridDisplayFactor_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 173
  //····················································································································

  fileprivate final func computeImplicitView_173 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Grid Step", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 174
  //····················································································································

  fileprivate final func computeImplicitView_174 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp ()
      .bind_dimensionAndUnit (self.rootObject.gridStep_property, self.rootObject.gridStepUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 175
  //····················································································································

  fileprivate final func computeImplicitView_175 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Flip", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 176
  //····················································································································

  fileprivate final func computeImplicitView_176 () -> NSView {
    let view = AutoLayoutSwitch (title: "Horizontal", small: true)
      .bind_value (self.rootObject.horizontalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 177
  //····················································································································

  fileprivate final func computeImplicitView_177 () -> NSView {
    let view = AutoLayoutFlexibleSpace ()
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 178
  //····················································································································

  fileprivate final func computeImplicitView_178 () -> NSView {
    let view = AutoLayoutSwitch (title: "Vertical", small: true)
      .bind_value (self.rootObject.verticalFlip_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 179
  //····················································································································

  fileprivate final func computeImplicitView_179 () -> NSView {
    let view = AutoLayoutStaticLabels (left: "Placard", right: "X", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 180
  //····················································································································

  fileprivate final func computeImplicitView_180 () -> NSView {
    let view = AutoLayoutCanariUnitPopUpButton ()
      .bind_unit (self.rootObject.xPlacardUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 181
  //····················································································································

  fileprivate final func computeImplicitView_181 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Y", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 182
  //····················································································································

  fileprivate final func computeImplicitView_182 () -> NSView {
    let view = AutoLayoutCanariUnitPopUpButton ()
      .bind_unit (self.rootObject.yPlacardUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 183
  //····················································································································

  fileprivate final func computeImplicitView_183 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Knob Size", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 184
  //····················································································································

  fileprivate final func computeImplicitView_184 () -> NSView {
    let view = AutoLayoutLinearSlider (min: 7, max: 41, ticks: 18)
      .bind_intValue (self.rootObject.knobSizeMultpliedByTen_property, sendContinously:true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 185
  //····················································································································

  fileprivate final func computeImplicitView_185 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Background", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 186
  //····················································································································

  fileprivate final func computeImplicitView_186 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .bind_color (preferences_packageBackgroundColor_property, sendContinously:false)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 187
  //····················································································································

  fileprivate final func computeImplicitView_187 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Cross Grid", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 188
  //····················································································································

  fileprivate final func computeImplicitView_188 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .bind_color (preferences_crossColorOfPackageGrid_property, sendContinously:false)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 189
  //····················································································································

  fileprivate final func computeImplicitView_189 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Line Grid", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 190
  //····················································································································

  fileprivate final func computeImplicitView_190 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .bind_color (preferences_lineColorOfPackageGrid_property, sendContinously:false)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 191
  //····················································································································

  fileprivate final func computeImplicitView_191 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Package", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 192
  //····················································································································

  fileprivate final func computeImplicitView_192 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .bind_color (preferences_packageColor_property, sendContinously:false)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 193
  //····················································································································

  fileprivate final func computeImplicitView_193 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Line Width", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 194
  //····················································································································

  fileprivate final func computeImplicitView_194 () -> NSView {
    let view = AutoLayoutTaggedPopUpButton ()
      .add (title: "0.5 Point", withTag: 5)
      .add (title: "1.0 Point", withTag: 10)
      .add (title: "1.5 Point", withTag: 15)
      .add (title: "2.0 Points", withTag: 20)
      .add (title: "2.5 Points", withTag: 25)
      .bind_selectedTag (preferences_packageDrawingWidthMultipliedByTen_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 195
  //····················································································································

  fileprivate final func computeImplicitView_195 () -> NSView {
    let view = AutoLayoutSwitch (title: "Pad Numbers", small: true)
      .bind_value (preferences_showPadNumber_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 196
  //····················································································································

  fileprivate final func computeImplicitView_196 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .bind_color (preferences_padNumberColor_property, sendContinously:false)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 197
  //····················································································································

  fileprivate final func computeImplicitView_197 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Pad Font", bold: false, small: true)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 198
  //····················································································································

  fileprivate final func computeImplicitView_198 () -> NSView {
    let view = AutoLayoutFontButton ()
      .bind_fontValue (preferences_padNumberFont_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 199
  //····················································································································

  fileprivate final func computeImplicitView_199 () -> NSView {
    let view = AutoLayoutSwitch (title: "Top Side Pads", small: true)
      .bind_value (preferences_displayPackageFrontSidePads_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 200
  //····················································································································

  fileprivate final func computeImplicitView_200 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .bind_color (preferences_frontSidePadColor_property, sendContinously:false)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 201
  //····················································································································

  fileprivate final func computeImplicitView_201 () -> NSView {
    let view = AutoLayoutSwitch (title: "Back Side Pads", small: true)
      .bind_value (preferences_displayPackageFrontSidePads_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 202
  //····················································································································

  fileprivate final func computeImplicitView_202 () -> NSView {
    let view = AutoLayoutHorizontalStackView ()
    do{
      let view_0 = AutoLayoutColorWell ()
        .bind_color (preferences_backSidePadColor_property, sendContinously:false)
      view.appendView (view_0)
      let view_1 = AutoLayoutFlexibleSpace ()
      view.appendView (view_1)
    }
    return view
  }

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
  //--- Build tool bar
    let toolbar = NSToolbar (identifier: NSToolbar.Identifier ("AutoLayoutPackageDocument"))
    toolbar.allowsUserCustomization = false
    toolbar.displayMode = .default
    toolbar.delegate = self
    self.windowForSheet?.toolbar = toolbar
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.mPageMasterView
  //--- Call outlet linkers
    self.linker_issueTableViewToGraphicView (self.mPackageIssueTableView, self.mPackageGraphicView)
  //--- Assign main view to window
    self.windowForSheet?.contentView = mainView
  }
  
  //····················································································································
  //    Toolbar
  //····················································································································
  
  final func toolbarAllowedItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return self.toolbarDefaultItemIdentifiers (toolbar)
  }

  //····················································································································

  final func toolbarDefaultItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return [NSToolbarItem.Identifier ("0"), NSToolbarItem.Identifier ("1"), NSToolbarItem.Identifier ("2"), .flexibleSpace, NSToolbarItem.Identifier ("4")]
  }

  //····················································································································

  final func toolbar (_ toolbar: NSToolbar,
                      itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,
                      willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {
    switch itemIdentifier.rawValue {
    case "0" :
      let itemId = NSToolbarItem.Identifier ("0")
      let toolbarItem = NSToolbarItem (itemIdentifier: itemId)
      toolbarItem.label = "Page"
      toolbarItem.isEnabled = true
      let view = AutoLayoutSegmentedControlWithPages (documentView: self.mPageMasterView, equalWidth: false)
        .addPage (title: "Model Image", pageView: self.mModelImagePage)
        .addPage (title: "Package", pageView: self.mPackagePage)
        .addPage (title: "Program", pageView: self.mProgramPage)
        .addPage (title: "Infos", pageView: self.mInfosPage)
        .bind_selectedPage (self.rootObject.selectedPageIndex_property)
      toolbarItem.view = view
      return toolbarItem
    case "1" :
      let itemId = NSToolbarItem.Identifier ("1")
      let toolbarItem = NSToolbarItem (itemIdentifier: itemId)
      toolbarItem.label = "Signature"
      toolbarItem.isEnabled = true
      let view = AutoLayoutSignatureField ()
        .bind_signature (self.signatureObserver_property)
      toolbarItem.view = view
      return toolbarItem
    case "2" :
      let itemId = NSToolbarItem.Identifier ("2")
      let toolbarItem = NSToolbarItem (itemIdentifier: itemId)
      toolbarItem.label = "Version"
      toolbarItem.isEnabled = true
      let view = AutoLayoutVersionField ()
        .bind_version (self.versionObserver_property)
        .bind_versionShouldChange (self.versionShouldChangeObserver_property)
      toolbarItem.view = view
      return toolbarItem
    case NSToolbarItem.Identifier.flexibleSpace.rawValue :
      return NSToolbarItem (itemIdentifier: .flexibleSpace)
    case "4" :
      let itemId = NSToolbarItem.Identifier ("4")
      let toolbarItem = NSToolbarItem (itemIdentifier: itemId)
      toolbarItem.label = "Status"
      toolbarItem.isEnabled = true
      let view = AutoLayoutImageObserverView (small: false)
        .bind_image (self.statusImage_property)
        .bind_tooltip (self.statusMessage_property)
      toolbarItem.view = view
      return toolbarItem
    default :
      return nil
    }
  }

  //····················································································································
  //    check outlet connections
  //····················································································································

//  private func checkOutletConnections () {
//    let start = Date ()
//    if LOG_OPERATION_DURATION {
//      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
//      Swift.print ("Check outlet connections \(durationMS) ms")
//    }
//  }
  
  //····················································································································
  
  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: mModelImageObjectsController
    self.mModelImageObjectsController.bind_model (self.rootObject.mModelImageObjects_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: mPackageObjectsController
    self.mPackageObjectsController.bind_model (self.rootObject.packageObjects_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mPackageSegmentSelectionController
    self.mPackageSegmentSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mPackageBezierCurveSelectionController
    self.mPackageBezierCurveSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mPackageOvalSelectionController
    self.mPackageOvalSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mPackageArcSelectionController
    self.mPackageArcSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mPackageGuideSelectionController
    self.mPackageGuideSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mPackageDimensionSelectionController
    self.mPackageDimensionSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mPackageZoneSelectionController
    self.mPackageZoneSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mPackagePadSelectionController
    self.mPackagePadSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mPackageSlavePadSelectionController
    self.mPackageSlavePadSelectionController.bind_selection (model: self.mPackageObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addSegmentButtonImage
    self.addSegmentButtonImage_property.mReadModelFunction = {
        let kind = preferences_packageColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_packageColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutPackageDocument_addSegmentButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_packageColor_property.addEBObserver (self.addSegmentButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addBezierButtonImage
    self.addBezierButtonImage_property.mReadModelFunction = {
        let kind = preferences_packageColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_packageColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutPackageDocument_addBezierButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_packageColor_property.addEBObserver (self.addBezierButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addOvalButtonImage
    self.addOvalButtonImage_property.mReadModelFunction = {
        let kind = preferences_packageColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_packageColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutPackageDocument_addOvalButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_packageColor_property.addEBObserver (self.addOvalButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addArcButtonImage
    self.addArcButtonImage_property.mReadModelFunction = {
        let kind = preferences_packageColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_packageColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutPackageDocument_addArcButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_packageColor_property.addEBObserver (self.addArcButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addMasterPadButtonImage
    self.addMasterPadButtonImage_property.mReadModelFunction = {
        let kind = preferences_frontSidePadColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_frontSidePadColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutPackageDocument_addMasterPadButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_frontSidePadColor_property.addEBObserver (self.addMasterPadButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addSlavePadButtonImage
    self.addSlavePadButtonImage_property.mReadModelFunction = {
        let kind = preferences_frontSidePadColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_frontSidePadColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutPackageDocument_addSlavePadButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_frontSidePadColor_property.addEBObserver (self.addSlavePadButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addGuideButtonImage
    self.addGuideButtonImage_property.mReadModelFunction = {
        let kind = preferences_packageGuideColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_packageGuideColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutPackageDocument_addGuideButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_packageGuideColor_property.addEBObserver (self.addGuideButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addDimensionButtonImage
    self.addDimensionButtonImage_property.mReadModelFunction = {
        let kind = preferences_packageDimensionColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_packageDimensionColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutPackageDocument_addDimensionButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_packageDimensionColor_property.addEBObserver (self.addDimensionButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addZoneButtonImage
    self.addZoneButtonImage_property.mReadModelFunction = {
        let kind = preferences_padZoneColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_padZoneColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutPackageDocument_addZoneButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_padZoneColor_property.addEBObserver (self.addZoneButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusImage
    self.statusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutPackageDocument_statusImage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.statusImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutPackageDocument_statusMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.statusMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: metadataStatus
    self.metadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutPackageDocument_metadataStatus (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.metadataStatus_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································
  
/*  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
  //--------------------------- Install ebView bindings
  //--------------------------- Install regular bindings
  //--------------------------- Install multiple bindings
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  } */

  //····················································································································
  
/*  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  } */

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Clean up auto layout views
    self.mPageMasterView.ebCleanUp ()
    self.mModelImagePage.ebCleanUp ()
    self.mPackagePageInspectorMasterView.ebCleanUp ()
    self.mPackagePage.ebCleanUp ()
    self.mIssuesInspectorView.ebCleanUp ()
    self.mSelectedObjectsInspectorView.ebCleanUp ()
    self.mSegmentInspectorView.ebCleanUp ()
    self.mBezierCurveInspectorView.ebCleanUp ()
    self.mOvalInspectorView.ebCleanUp ()
    self.mArcInspectorView.ebCleanUp ()
    self.mGuideInspectorView.ebCleanUp ()
    self.mDimensionInspectorView.ebCleanUp ()
    self.mZoneInspectorView.ebCleanUp ()
    self.mMasterPadInspectorView.ebCleanUp ()
    self.mSlavePadInspectorView.ebCleanUp ()
    self.mGridZoomInspectorView.ebCleanUp ()
    self.mDisplayInspectorView.ebCleanUp ()
    self.mProgramPage.ebCleanUp ()
    self.mInfosPage.ebCleanUp ()
    let toolbarItems = self.windowForSheet?.toolbar?.items ?? []
    for item in toolbarItems {
      item.view?.ebCleanUp ()
    }
  //--------------------------- Unbind regular bindings
  //--------------------------- Unbind multiple bindings
  //--------------------------- Unbind array controllers
  //--- Array controller property: mModelImageObjectsController
    self.mModelImageObjectsController.unbind_model ()
  //--- Array controller property: mPackageObjectsController
    self.mPackageObjectsController.unbind_model ()
  //--- Selection controller property: mPackageSegmentSelectionController
    self.mPackageSegmentSelectionController.unbind_selection ()
  //--- Selection controller property: mPackageBezierCurveSelectionController
    self.mPackageBezierCurveSelectionController.unbind_selection ()
  //--- Selection controller property: mPackageOvalSelectionController
    self.mPackageOvalSelectionController.unbind_selection ()
  //--- Selection controller property: mPackageArcSelectionController
    self.mPackageArcSelectionController.unbind_selection ()
  //--- Selection controller property: mPackageGuideSelectionController
    self.mPackageGuideSelectionController.unbind_selection ()
  //--- Selection controller property: mPackageDimensionSelectionController
    self.mPackageDimensionSelectionController.unbind_selection ()
  //--- Selection controller property: mPackageZoneSelectionController
    self.mPackageZoneSelectionController.unbind_selection ()
  //--- Selection controller property: mPackagePadSelectionController
    self.mPackagePadSelectionController.unbind_selection ()
  //--- Selection controller property: mPackageSlavePadSelectionController
    self.mPackageSlavePadSelectionController.unbind_selection ()
    // preferences_packageColor_property.removeEBObserver (self.addSegmentButtonImage_property)
    // preferences_packageColor_property.removeEBObserver (self.addBezierButtonImage_property)
    // preferences_packageColor_property.removeEBObserver (self.addOvalButtonImage_property)
    // preferences_packageColor_property.removeEBObserver (self.addArcButtonImage_property)
    // preferences_frontSidePadColor_property.removeEBObserver (self.addMasterPadButtonImage_property)
    // preferences_frontSidePadColor_property.removeEBObserver (self.addSlavePadButtonImage_property)
    // preferences_packageGuideColor_property.removeEBObserver (self.addGuideButtonImage_property)
    // preferences_packageDimensionColor_property.removeEBObserver (self.addDimensionButtonImage_property)
    // preferences_padZoneColor_property.removeEBObserver (self.addZoneButtonImage_property)
    // self.rootObject.issues_property.removeEBObserver (self.statusImage_property)
    // self.rootObject.issues_property.removeEBObserver (self.statusMessage_property)
    // self.rootObject.issues_property.removeEBObserver (self.metadataStatus_property)
  //--------------------------- Remove targets / actions
  //--------------------------- Clean up outlets
  //--------------------------- Detach outlets
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

