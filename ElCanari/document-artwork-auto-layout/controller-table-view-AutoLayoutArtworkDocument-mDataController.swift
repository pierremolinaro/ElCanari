//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    Auto Layout Table View Controller AutoLayoutArtworkDocument mDataController
//----------------------------------------------------------------------------------------------------------------------

final class Controller_AutoLayoutArtworkDocument_mDataController
                                       : ReadOnlyAbstractGenericRelationshipProperty, AutoLayoutTableViewDelegate {
 
  //····················································································································
  //    Constant properties
  //····················································································································

  private let allowsEmptySelection = false
  private let allowsMultipleSelection = false

  //····················································································································
  //   Sorted Array
  //····················································································································

  let sortedArray_property = TransientArrayOf_ArtworkFileGenerationParameters ()

  //····················································································································

  var sortedArray : [ArtworkFileGenerationParameters] { return self.sortedArray_property.propval }

  //····················································································································

  private var mSortDescriptorArray = [NSSortDescriptor] ()

  //····················································································································
  //    Model
  //····················································································································

  private var mModel : ReadWriteArrayOf_ArtworkFileGenerationParameters? = nil

  //····················································································································

//  var objects : [ArtworkFileGenerationParameters] {
//    if let objects = self.mModel?.propval {
//      return objects
//    }else{
//      return []
//    }
//  }

  //····················································································································

//  var objectCount : Int {
//    if let objects = self.mModel?.propval {
//      return objects.count
//    }else{
//      return 0
//    }
//  }

  //····················································································································

  final func bind_model (_ inModel : ReadWriteArrayOf_ArtworkFileGenerationParameters, _ inUndoManager : EBUndoManager) {
    self.mModel = inModel
    self.mUndoManager = inUndoManager
  //--- Sort descriptors
//    self.mSortDescriptorArray = []
//    self.mSortDescriptorArray.append (NSSortDescriptor (key: "name", ascending: true))
    self.sortedArray_property.setDataProvider (
      inModel,
      sortCallback: { (left, right) in self.isOrderedBefore (left, right) },
      addSortObserversCallback: { (observer) in
        inModel.addEBObserverOf_name (observer)
      },
      removeSortObserversCallback: {(observer) in
        inModel.removeEBObserverOf_name (observer)
      }
    )
    inModel.attachClient (self)
  }

  //····················································································································

  func isOrderedBefore (_ left : ArtworkFileGenerationParameters, _ right : ArtworkFileGenerationParameters) -> Bool {
    var order = ComparisonResult.orderedSame
    Swift.print ("BEGIN SORT")
    for sortDescriptor in self.mSortDescriptorArray {
      Swift.print ("  \(sortDescriptor.key) \(sortDescriptor.ascending)")
      if sortDescriptor.key == "name" {
        order = compare_String_properties (left.name_property, right.name_property)
      }
      // Swift.print ("key \(sortDescriptor.key), ascending \(sortDescriptor.ascending), order \(order.rawValue)")
      if !sortDescriptor.ascending {
        switch order {
        case .orderedAscending : order = .orderedDescending
        case .orderedSame : ()
        case .orderedDescending : order = .orderedAscending
        }
      }
      if order != .orderedSame {
        break // Exit from for
      }
    }
    Swift.print ("END SORT")
    return order == .orderedAscending
  }

  //····················································································································

  final func unbind_model () {
    self.sortedArray_property.resetDataProvider ()
    self.mModel?.detachClient (self)
//    for tvc in self.mTableViewDataSourceControllerArray {
//      self.sortedArray_property.removeEBObserver (tvc)
//    }
//    for tvc in self.mTableViewSelectionControllerArray {
//      self.mInternalSelectedArrayProperty.removeEBObserver (tvc)
//    }
  //---
    self.mModel = nil
    self.mUndoManager = nil
 }

  //····················································································································
  //    Observing model change
  //····················································································································

  override func notifyModelDidChange () {
    super.notifyModelDidChange ()
 //   NSLog ("self.sortedArray \(self.sortedArray.count)")
//    let oldSelectionSet = self.selectedSet
//    var newSelectedArray = [ArtworkFileGenerationParameters] ()
//    for object in self.sortedArray {
//      if oldSelectionSet.contains (object) {
//        newSelectedArray.append (object)
//      }
//    }
//    self.mInternalSelectedArrayProperty.setProp (newSelectedArray)
    for tableView in self.mTableViewArray {
      tableView.reloadData ()
    }
  }

  //····················································································································
  //    Undo manager
  //····················································································································

  private var mUndoManager : EBUndoManager? = nil
  var ebUndoManager : EBUndoManager? { return self.mUndoManager }

  //····················································································································
  //   Selected Array
  //····················································································································

  private let mInternalSelectedArrayProperty = StandAloneArrayOf_ArtworkFileGenerationParameters ()

  //····················································································································

  var selectedArray_property : ReadOnlyArrayOf_ArtworkFileGenerationParameters { return self.mInternalSelectedArrayProperty }

  //····················································································································

  var selectedArray : [ArtworkFileGenerationParameters] { return self.selectedArray_property.propval }
 
  //····················································································································

  var selectedSet : Set <ArtworkFileGenerationParameters> { return Set (self.selectedArray) }

  //····················································································································

  var selectedIndexesSet : Set <Int> {
    var result = Set <Int> ()
    var idx = 0
    for object in self.mModel?.propval ?? [] {
      if self.selectedSet.contains (object) {
        result.insert (idx)
      }
      idx += 1
    }
    return result
  }

  //····················································································································

/*  func setSelection (_ inObjects : [ArtworkFileGenerationParameters]) {
    self.mInternalSelectedArrayProperty.setProp (inObjects)
  } */

  //····················································································································
  //    Explorer
  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
  }

  //····················································································································
  //    bind_tableView
  //····················································································································

  private var mTableViewArray = [AutoLayoutTableView] ()
  private var mColumnObserver_name = EBOutletEvent ()

  //····················································································································

  final func bind_tableView (_ inTableView : AutoLayoutTableView) {
    inTableView.configure (
      allowsEmptySelection: allowsEmptySelection,
      allowsMultipleSelection: allowsMultipleSelection,
      delegate: self
    )
  //--- Configure 'name' column
    _ = inTableView.addTextColumn (valueGetterDelegate: { [weak self] in return self?.sortedArray [$0].name },
                                   valueSetterDelegate: { [weak self] (inRowIndex, inNewValue) in self?.sortedArray [inRowIndex].name = inNewValue },
                                   sortDescriptor: NSSortDescriptor (key: "name", ascending: true),
                                   title: "Name",
                                   headerAlignment: .left,
                                   contentAlignment: .left
    )
    self.mModel?.addEBObserverOf_name (self.mColumnObserver_name)
    self.mColumnObserver_name.mEventCallBack = { [weak self] in
      for tableView in self?.mTableViewArray ?? [] {
        tableView.reloadData ()
      }
    }
  //---
    self.mTableViewArray.append (inTableView)
  //---
    inTableView.reloadData ()
  }

  //····················································································································
 
/*  final func unbind_tableView (_ inTableView : EBTableView?) {
    if let tableView = inTableView, let idx = self.mTableViewArray.firstIndex (of:tableView) {
      self.sortedArray_property.removeEBObserver (self.mTableViewDataSourceControllerArray [idx])
      self.mInternalSelectedArrayProperty.removeEBObserver (self.mTableViewSelectionControllerArray [idx])
      self.mTableViewArray.remove (at: idx)
      self.mTableViewDataSourceControllerArray.remove (at: idx)
      self.mTableViewSelectionControllerArray.remove (at: idx)
    }
  } */

  //····················································································································
  //   Select a single object
  //····················································································································

/*  func select (object inObject: ArtworkFileGenerationParameters) {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        ()
      case .single (let objectArray) :
        if objectArray.contains (inObject) {
          self.mInternalSelectedArrayProperty.setProp ([inObject])
        }
      }
    }
  } */

  //····················································································································


  //····················································································································
  // IMPLEMENTATION OF AutoLayoutTableViewDelegate
  //····················································································································

  func rowCount () -> Int {
    return self.sortedArray.count
  }

  //····················································································································

  func tableViewSelectionDidChange (selectedRows inSelectedRows : IndexSet) {
    switch self.sortedArray_property.selection {
    case .empty, .multiple :
      ()
    case .single (let v) :
      var newSelectedObjects = [ArtworkFileGenerationParameters] ()
      for index in inSelectedRows {
        newSelectedObjects.append (v [index])
      }
      self.mInternalSelectedArrayProperty.setProp (newSelectedObjects)
    }
  }

  //····················································································································

  func sortDescriptorsDidChangeTo (_ inSortDescriptors : [NSSortDescriptor]) {
    self.mSortDescriptorArray = inSortDescriptors
 //   self.sortedArray_property.notifyModelDidChange ()
    self.mModel?.notifyModelDidChange ()
  }

  //····················································································································

  func indexesOfSelectedObjects () -> IndexSet {
    var indexSet = IndexSet ()
    var idx = 0
    let selectedObjectSet = Set (self.selectedArray)
    for object in self.sortedArray {
      if selectedObjectSet.contains (object) {
        indexSet.insert (idx)
      }
      idx += 1
    }
    return indexSet
  }

  //····················································································································

  final func addEntry () {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        ()
      case .single (let v) :
        let newObject = ArtworkFileGenerationParameters (self.ebUndoManager)
        var array = v
        array.append (newObject)
        model.setProp (array)
      //--- New object is the selection
        self.mInternalSelectedArrayProperty.setProp ([newObject])
      }
    }
  }

  //····················································································································

  func removeSelectedEntries () {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        ()
      case .single (let model_prop) :
        switch self.sortedArray_property.selection {
        case .empty, .multiple :
          ()
        case .single (let sortedArray_prop) :
        //------------- Find the object to be selected after selected object removing
        //--- Dictionary of object sorted indexes
          var sortedObjectDictionary = [ArtworkFileGenerationParameters : Int] ()
          for (index, object) in sortedArray_prop.enumerated () {
            sortedObjectDictionary [object] = index
          }
          var indexArrayOfSelectedObjects = [Int] ()
          for object in self.selectedSet {
            let index = sortedObjectDictionary [object]
            if let idx = index {
              indexArrayOfSelectedObjects.append (idx)
            }
          }
        //--- Sort
          indexArrayOfSelectedObjects.sort { $0 < $1 }
        //--- Find the first index of a non selected object
          var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
          for index in indexArrayOfSelectedObjects {
            if newSelectionIndex < index {
              ()
            }else{
              newSelectionIndex = index + 1
            }
          }
          var newSelectedObject : ArtworkFileGenerationParameters? = nil
          if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray_prop.count) {
            newSelectedObject = sortedArray_prop [newSelectionIndex]
          }
        //----------------------------------------- Remove selected object
        //--- Dictionary of object absolute indexes
          var objectDictionary = [ArtworkFileGenerationParameters : Int] ()
          for (index, object) in model_prop.enumerated () {
            objectDictionary [object] = index
          }
        //--- Build selected objects index array
          var selectedObjectIndexArray = [Int] ()
          for object in self.selectedSet {
            let index = objectDictionary [object]
            if let idx = index {
              selectedObjectIndexArray.append (idx)
            }
          }
        //--- Sort in reverse order
          selectedObjectIndexArray.sort { $1 < $0 }
        //--- Remove objects, in reverse of order of their index
          var newObjectArray = model_prop
          for index in selectedObjectIndexArray {
            newObjectArray.remove (at: index)
          }
        //----------------------------------------- Set new object array
          model.setProp (newObjectArray)
        //----------------------------------------- Set new selection
          if let object = newSelectedObject {
            self.mInternalSelectedArrayProperty.setProp ([object])
          }else{
            self.mInternalSelectedArrayProperty.setProp ([])
          }
        }
      }
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
