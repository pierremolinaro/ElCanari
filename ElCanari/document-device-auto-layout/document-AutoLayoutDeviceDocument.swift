//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

@objc(AutoLayoutDeviceDocument) class AutoLayoutDeviceDocument : EBAutoLayoutManagedDocument, NSToolbarDelegate {

  //····················································································································
  //   Array controller: packageController
  //····················································································································

  var packageController = Controller_AutoLayoutDeviceDocument_packageController ()

  //····················································································································
  //   Array controller: documentationController
  //····················································································································

  var documentationController = Controller_AutoLayoutDeviceDocument_documentationController ()

  //····················································································································
  //   Array controller: symbolDisplayController
  //····················································································································

  var symbolDisplayController = Controller_AutoLayoutDeviceDocument_symbolDisplayController ()

  //····················································································································
  //   Selection controller: symbolInstanceSelection
  //····················································································································

  var symbolInstanceSelection = SelectionController_AutoLayoutDeviceDocument_symbolInstanceSelection ()

  //····················································································································
  //   Array controller: packageDisplayController
  //····················································································································

  var packageDisplayController = Controller_AutoLayoutDeviceDocument_packageDisplayController ()

  //····················································································································
  //   Array controller: symbolTypeController
  //····················································································································

  var symbolTypeController = Controller_AutoLayoutDeviceDocument_symbolTypeController ()

  //····················································································································
  //   Selection controller: symbolTypeSelection
  //····················································································································

  var symbolTypeSelection = SelectionController_AutoLayoutDeviceDocument_symbolTypeSelection ()

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  final let documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFilePath : String? {
    switch self.documentFilePath_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: assignmentInhibitionMessage
  //····················································································································

  final let assignmentInhibitionMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var assignmentInhibitionMessage : String? {
    switch self.assignmentInhibitionMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasUnconnectedPin
  //····················································································································

  final let hasUnconnectedPin_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasUnconnectedPin : Bool? {
    switch self.hasUnconnectedPin_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusMessage
  //····················································································································

  final let mStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var mStatusMessage : String? {
    switch self.mStatusMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mMetadataStatus
  //····················································································································

  final let mMetadataStatus_property = EBTransientProperty_MetadataStatus ()

  //····················································································································

  final var mMetadataStatus : MetadataStatus? {
    switch self.mMetadataStatus_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasUnconnectedPad
  //····················································································································

  final let hasUnconnectedPad_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasUnconnectedPad : Bool? {
    switch self.hasUnconnectedPad_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasAssignedPadProxies
  //····················································································································

  final let hasAssignedPadProxies_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasAssignedPadProxies : Bool? {
    switch self.hasAssignedPadProxies_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusImage
  //····················································································································

  final let mStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var mStatusImage : NSImage? {
    switch self.mStatusImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet final var mAddPackageFromLibraryButton : EBButton? = nil
  @IBOutlet final var mAddSymbolFromLibraryButton : EBButton? = nil
  @IBOutlet final var mAssignedPadProxyTableView : AssignedPadProxysInDeviceTableView? = nil
  @IBOutlet final var mAssignmentSplitView : NSSplitView? = nil
  @IBOutlet final var mBindButton : EBButton? = nil
  @IBOutlet final var mComposedPackageView : EBEnclosingGraphicView? = nil
  @IBOutlet final var mComposedSymbolView : EBEnclosingGraphicView? = nil
  @IBOutlet final var mCopyImageButton : EBButton? = nil
  @IBOutlet final var mEditSelectedPackagesButton : EBButton? = nil
  @IBOutlet final var mEditSelectedSymbolsButton : EBButton? = nil
  @IBOutlet final var mExportSelectedPackagesButton : EBButton? = nil
  @IBOutlet final var mExportSelectedSymbolsButton : EBButton? = nil
  @IBOutlet final var mInconsistentPackagePadNameSetsMessageScrollView : NSScrollView? = nil
  @IBOutlet final var mInconsistentPackagePadNameSetsMessageTextView : EBTextObserverView? = nil
  @IBOutlet final var mInconsistentPadNameSetTextField : EBTextObserverField? = nil
  @IBOutlet final var mInconsistentSymbolNameMessageScrollView : NSScrollView? = nil
  @IBOutlet final var mInconsistentSymbolNameMessageTextView : EBTextObserverView? = nil
  @IBOutlet final var mNCButton : EBButton? = nil
  @IBOutlet final var mPackageBackPadsColorWell : EBColorWell? = nil
  @IBOutlet final var mPackageDisplayHorizontalFlipSwitch : EBSwitch? = nil
  @IBOutlet final var mPackageDisplayVerticalFlipSwitch : EBSwitch? = nil
  @IBOutlet final var mPackageFrontPadsColorWell : EBColorWell? = nil
  @IBOutlet final var mPackageNumbersColorWell : EBColorWell? = nil
  @IBOutlet final var mPackagesColorWell : EBColorWell? = nil
  @IBOutlet final var mPasteImageButton : EBButton? = nil
  @IBOutlet final var mRemoveImageButton : EBButton? = nil
  @IBOutlet final var mRemoveSelectedDocButton : EBButton? = nil
  @IBOutlet final var mRemoveUselessSymbolTypeButton : EBButton? = nil
  @IBOutlet final var mRepresentationImageView : DeviceDroppableImageView? = nil
  @IBOutlet final var mResetSelectedPackageVersionButton : EBButton? = nil
  @IBOutlet final var mResetSelectedSymbolVersionButton : EBButton? = nil
  @IBOutlet final var mResetSymbolAndPackagesVersionButton : EBButton? = nil
  @IBOutlet final var mSaveDocButton : EBButton? = nil
  @IBOutlet final var mShowDocButton : EBButton? = nil
  @IBOutlet final var mShowPackageBackPadsSwitch : EBSwitch? = nil
  @IBOutlet final var mShowPackageFrontPadsSwitch : EBSwitch? = nil
  @IBOutlet final var mShowPackagePadNumbersSwitch : EBSwitch? = nil
  @IBOutlet final var mShowPackagesSwitch : EBSwitch? = nil
  @IBOutlet final var mSymbolDisplayHorizontalFlipSwitch : EBSwitch? = nil
  @IBOutlet final var mSymbolDisplayVerticalFlipSwitch : EBSwitch? = nil
  @IBOutlet final var mSymbolErrorMessageTitleTextField : NSTextField? = nil
  @IBOutlet final var mSymbolNameTextField : EBTextField? = nil
  @IBOutlet final var mSymbolTypeTextField : EBTextObserverField? = nil
  @IBOutlet final var mTitleTextField : EBTextField? = nil
  @IBOutlet final var mUnbindAllButton : EBButton? = nil
  @IBOutlet final var mUnbindButton : EBButton? = nil
  @IBOutlet final var mUnconnectedPadsInDeviceTableView : UnconnectedPadsInDeviceTableView? = nil
  @IBOutlet final var mUnconnectedSymbolPinsInDeviceTableView : UnconnectedSymbolPinsInDeviceTableView? = nil
  @IBOutlet final var mUpdateSelectedPackagesButton : EBButton? = nil
  @IBOutlet final var mUpdateSelectedSymbolsButton : EBButton? = nil
  @IBOutlet final var mUpdateSymbolAndPackagesButton : EBButton? = nil

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

//  var mController_mCopyImageButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mRemoveImageButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mRemoveSelectedDocButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mShowDocButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mSaveDocButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mInconsistentSymbolNameMessageScrollView_hidden : MultipleBindingController_hidden? = nil
//  var mController_mSymbolErrorMessageTitleTextField_hidden : MultipleBindingController_hidden? = nil
//  var mController_mInconsistentPackagePadNameSetsMessageScrollView_hidden : MultipleBindingController_hidden? = nil
//  var mController_mResetSymbolAndPackagesVersionButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mUpdateSymbolAndPackagesButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mResetSelectedSymbolVersionButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mEditSelectedSymbolsButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mExportSelectedSymbolsButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mUpdateSelectedSymbolsButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mRemoveUselessSymbolTypeButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mResetSelectedPackageVersionButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mEditSelectedPackagesButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mExportSelectedPackagesButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mUpdateSelectedPackagesButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mInconsistentPadNameSetTextField_hidden : MultipleBindingController_hidden? = nil
//  var mController_mAssignmentSplitView_hidden : MultipleBindingController_hidden? = nil
//  var mController_mBindButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mNCButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mUnbindButton_enabled : MultipleBindingController_enabled? = nil
//  var mController_mUnbindAllButton_enabled : MultipleBindingController_enabled? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override final var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  final func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: packageController
    self.packageController.addExplorer (name: "packageController", y:&y, view:view)
  //--- Array controller property: documentationController
    self.documentationController.addExplorer (name: "documentationController", y:&y, view:view)
  //--- Array controller property: symbolDisplayController
    self.symbolDisplayController.addExplorer (name: "symbolDisplayController", y:&y, view:view)
  //--- Selection controller property: symbolInstanceSelection
    self.symbolInstanceSelection.addExplorer (name: "symbolInstanceSelection", y:&y, view:view)
  //--- Array controller property: packageDisplayController
    self.packageDisplayController.addExplorer (name: "packageDisplayController", y:&y, view:view)
  //--- Array controller property: symbolTypeController
    self.symbolTypeController.addExplorer (name: "symbolTypeController", y:&y, view:view)
  //--- Selection controller property: symbolTypeSelection
    self.symbolTypeSelection.addExplorer (name: "symbolTypeSelection", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "DeviceRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : DeviceRoot { return self.mRootObject as! DeviceRoot }

  //····················································································································
  //    VIEW mPageMasterView
  //····················································································································

  lazy var mPageMasterView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDocumentMainView
  //····················································································································

  lazy var mDocumentMainView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mPageMasterView, equalWidth: false, small: false)
          .addPage (title: "Description", tooltip: "Device Description", pageView: self.mDescriptionPage)
          .addPage (title: "Symbols", tooltip: "Device Symbols", pageView: self.mSymbolsPage)
          .addPage (title: "Packages", tooltip: "Device Available Packages", pageView: self.mPackagesPage)
          .addPage (title: "Assignments", tooltip: "Pin / Pad Assignments", pageView: self.mAssignmentsPage)
          .addPage (title: "Library", tooltip: "Device Embedded Library", pageView: self.mLibraryPage)
          .addPage (title: "Infos", tooltip: "Device Informations", pageView: self.mInfosPage)
          .bind_selectedPage (self.rootObject.mSelectedPageIndex_property)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_0_1_0 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_0)
          let view_0_0_1_1 = AutoLayoutStaticLabel (title: "Page", bold: false, small: true)
          view_0_0_1.appendView (view_0_0_1_1)
          let view_0_0_1_2 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_2)
        }
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutSignatureField (small: false)
          .bind_signature (self.signatureObserver_property)
        view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutStaticLabel (title: "Signature", bold: false, small: true)
          .set (alignment: .center)
          .makeWidthExpandable ()
        view_0_1.appendView (view_0_1_1)
      }
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutVersionField (small: false)
          .bind_version (self.versionObserver_property)
          .bind_versionShouldChange (self.versionShouldChangeObserver_property)
        view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutStaticLabel (title: "Version", bold: false, small: true)
          .set (alignment: .center)
          .makeWidthExpandable ()
        view_0_2.appendView (view_0_2_1)
      }
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_4_0_0 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_0)
          let view_0_4_0_1 = AutoLayoutImageObserverView (small: false)
            .bind_image (self.mStatusImage_property)
            .bind_tooltip (self.mStatusMessage_property)
          view_0_4_0.appendView (view_0_4_0_1)
          let view_0_4_0_2 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_2)
        }
        view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutStaticLabel (title: "Status", bold: false, small: true)
          .set (alignment: .center)
        view_0_4.appendView (view_0_4_1)
      }
      view_0.appendView (view_0_4)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_1)
    let view_2 = mPageMasterView
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDescriptionPage
  //····················································································································

  lazy var mDescriptionPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSymbolsPage
  //····················································································································

  lazy var mSymbolsPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mPackagesPage
  //····················································································································

  lazy var mPackagesPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mLibraryPage
  //····················································································································

  lazy var mLibraryPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mAssignmentsPage
  //····················································································································

  lazy var mAssignmentsPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mInfosPage
  //····················································································································

  lazy var mInfosPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (leftMargin: 20)
      .set (rightMargin: 20)
      .set (bottomMargin: 20)
      .set (topMargin: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
      .setFirstBaselineAlignment ()
    do{
      let view_0_0 = AutoLayoutStaticLabel (title: "Device Prefix", bold: false, small: true)
        .set (width: 84)
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutTextField (width: 56, small: true)
        .bind_value (self.rootObject.mPrefix_property, sendContinously:true)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutStaticLabel (title: "This field only accepts lowercase abd uppercase ASCII letters.", bold: false, small: true)
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutButton (title: "Reset Version and Signature", small: true)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutDeviceDocument.resetVersionAction (_:))
        )
      view_0.appendView (view_0_4)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView ()
      .equalHeight ()
    do{
      let view_1_0 = AutoLayoutHorizontalStackView ()
      do{
        let view_1_0_0 = AutoLayoutVerticalStackView ()
          .set (width: 84)
        do{
          let view_1_0_0_0 = AutoLayoutStaticLabel (title: "Status", bold: false, small: true)
          view_1_0_0.appendView (view_1_0_0_0)
          let view_1_0_0_1 = AutoLayoutFlexibleSpace ()
          view_1_0_0.appendView (view_1_0_0_1)
        }
        view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutTextObserverView ()
          .bind_observedValue (self.mStatusMessage_property)
        view_1_0.appendView (view_1_0_1)
      }
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutHorizontalStackView ()
      do{
        let view_1_1_0 = AutoLayoutVerticalStackView ()
          .set (width: 84)
        do{
          let view_1_1_0_0 = AutoLayoutStaticLabel (title: "Comments", bold: false, small: true)
          view_1_1_0.appendView (view_1_1_0_0)
          let view_1_1_0_1 = AutoLayoutFlexibleSpace ()
          view_1_1_0.appendView (view_1_1_0_1)
        }
        view_1_1.appendView (view_1_1_0)
        let view_1_1_1 = AutoLayoutTextView ()
          .bind_value (self.rootObject.mComments_property)
        view_1_1.appendView (view_1_1_1)
      }
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.mDocumentMainView
  //--- Call outlet linkers
  //--- Assign main view to window
    self.windowForSheet?.contentView = mainView
  }
  
  //····················································································································
  //    Toolbar
  //····················································································································
  
  final func toolbarAllowedItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return self.toolbarDefaultItemIdentifiers (toolbar)
  }

  //····················································································································

  final func toolbarDefaultItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return []
  }

  //····················································································································

  final func toolbar (_ toolbar: NSToolbar,
                      itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,
                      willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {
    switch itemIdentifier.rawValue {
    default :
      return nil
    }
  }

  //····················································································································
  //    check outlet connections
  //····················································································································

//  private func checkOutletConnections () {
//    let start = Date ()
//    checkOutletConnection (self.mAddPackageFromLibraryButton, "mAddPackageFromLibraryButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mAddSymbolFromLibraryButton, "mAddSymbolFromLibraryButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mAssignedPadProxyTableView, "mAssignedPadProxyTableView", AssignedPadProxysInDeviceTableView.self, #file, #line)
//    checkOutletConnection (self.mAssignmentSplitView, "mAssignmentSplitView", NSSplitView.self, #file, #line)
//    checkOutletConnection (self.mBindButton, "mBindButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mComposedPackageView, "mComposedPackageView", EBEnclosingGraphicView.self, #file, #line)
//    checkOutletConnection (self.mComposedSymbolView, "mComposedSymbolView", EBEnclosingGraphicView.self, #file, #line)
//    checkOutletConnection (self.mCopyImageButton, "mCopyImageButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mEditSelectedPackagesButton, "mEditSelectedPackagesButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mEditSelectedSymbolsButton, "mEditSelectedSymbolsButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mExportSelectedPackagesButton, "mExportSelectedPackagesButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mExportSelectedSymbolsButton, "mExportSelectedSymbolsButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mInconsistentPackagePadNameSetsMessageScrollView, "mInconsistentPackagePadNameSetsMessageScrollView", NSScrollView.self, #file, #line)
//    checkOutletConnection (self.mInconsistentPackagePadNameSetsMessageTextView, "mInconsistentPackagePadNameSetsMessageTextView", EBTextObserverView.self, #file, #line)
//    checkOutletConnection (self.mInconsistentPadNameSetTextField, "mInconsistentPadNameSetTextField", EBTextObserverField.self, #file, #line)
//    checkOutletConnection (self.mInconsistentSymbolNameMessageScrollView, "mInconsistentSymbolNameMessageScrollView", NSScrollView.self, #file, #line)
//    checkOutletConnection (self.mInconsistentSymbolNameMessageTextView, "mInconsistentSymbolNameMessageTextView", EBTextObserverView.self, #file, #line)
//    checkOutletConnection (self.mNCButton, "mNCButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mPackageBackPadsColorWell, "mPackageBackPadsColorWell", EBColorWell.self, #file, #line)
//    checkOutletConnection (self.mPackageDisplayHorizontalFlipSwitch, "mPackageDisplayHorizontalFlipSwitch", EBSwitch.self, #file, #line)
//    checkOutletConnection (self.mPackageDisplayVerticalFlipSwitch, "mPackageDisplayVerticalFlipSwitch", EBSwitch.self, #file, #line)
//    checkOutletConnection (self.mPackageFrontPadsColorWell, "mPackageFrontPadsColorWell", EBColorWell.self, #file, #line)
//    checkOutletConnection (self.mPackageNumbersColorWell, "mPackageNumbersColorWell", EBColorWell.self, #file, #line)
//    checkOutletConnection (self.mPackagesColorWell, "mPackagesColorWell", EBColorWell.self, #file, #line)
//    checkOutletConnection (self.mPasteImageButton, "mPasteImageButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mRemoveImageButton, "mRemoveImageButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mRemoveSelectedDocButton, "mRemoveSelectedDocButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mRemoveUselessSymbolTypeButton, "mRemoveUselessSymbolTypeButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mRepresentationImageView, "mRepresentationImageView", DeviceDroppableImageView.self, #file, #line)
//    checkOutletConnection (self.mResetSelectedPackageVersionButton, "mResetSelectedPackageVersionButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mResetSelectedSymbolVersionButton, "mResetSelectedSymbolVersionButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mResetSymbolAndPackagesVersionButton, "mResetSymbolAndPackagesVersionButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mSaveDocButton, "mSaveDocButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mShowDocButton, "mShowDocButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mShowPackageBackPadsSwitch, "mShowPackageBackPadsSwitch", EBSwitch.self, #file, #line)
//    checkOutletConnection (self.mShowPackageFrontPadsSwitch, "mShowPackageFrontPadsSwitch", EBSwitch.self, #file, #line)
//    checkOutletConnection (self.mShowPackagePadNumbersSwitch, "mShowPackagePadNumbersSwitch", EBSwitch.self, #file, #line)
//    checkOutletConnection (self.mShowPackagesSwitch, "mShowPackagesSwitch", EBSwitch.self, #file, #line)
//    checkOutletConnection (self.mSymbolDisplayHorizontalFlipSwitch, "mSymbolDisplayHorizontalFlipSwitch", EBSwitch.self, #file, #line)
//    checkOutletConnection (self.mSymbolDisplayVerticalFlipSwitch, "mSymbolDisplayVerticalFlipSwitch", EBSwitch.self, #file, #line)
//    checkOutletConnection (self.mSymbolErrorMessageTitleTextField, "mSymbolErrorMessageTitleTextField", NSTextField.self, #file, #line)
//    checkOutletConnection (self.mSymbolNameTextField, "mSymbolNameTextField", EBTextField.self, #file, #line)
//    checkOutletConnection (self.mSymbolTypeTextField, "mSymbolTypeTextField", EBTextObserverField.self, #file, #line)
//    checkOutletConnection (self.mTitleTextField, "mTitleTextField", EBTextField.self, #file, #line)
//    checkOutletConnection (self.mUnbindAllButton, "mUnbindAllButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mUnbindButton, "mUnbindButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mUnconnectedPadsInDeviceTableView, "mUnconnectedPadsInDeviceTableView", UnconnectedPadsInDeviceTableView.self, #file, #line)
//    checkOutletConnection (self.mUnconnectedSymbolPinsInDeviceTableView, "mUnconnectedSymbolPinsInDeviceTableView", UnconnectedSymbolPinsInDeviceTableView.self, #file, #line)
//    checkOutletConnection (self.mUpdateSelectedPackagesButton, "mUpdateSelectedPackagesButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mUpdateSelectedSymbolsButton, "mUpdateSelectedSymbolsButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mUpdateSymbolAndPackagesButton, "mUpdateSymbolAndPackagesButton", EBButton.self, #file, #line)
//    if LOG_OPERATION_DURATION {
//      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
//      Swift.print ("Check outlet connections \(durationMS) ms")
//    }
//  }
  
  //····················································································································
  
  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: packageController
    self.packageController.bind_model (self.rootObject.mPackages_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: documentationController
    self.documentationController.bind_model (self.rootObject.mDocs_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: symbolDisplayController
    self.symbolDisplayController.bind_model (self.rootObject.mSymbolInstances_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: symbolInstanceSelection
    self.symbolInstanceSelection.bind_selection (model: self.symbolDisplayController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: packageDisplayController
    self.packageDisplayController.bind_model (self.rootObject.mPackages_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: symbolTypeController
    self.symbolTypeController.bind_model (self.rootObject.mSymbolTypes_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: symbolTypeSelection
    self.symbolTypeSelection.bind_selection (model: self.symbolTypeController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: assignmentInhibitionMessage
    self.assignmentInhibitionMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.inconsistentPackagePadNameSetsMessage_property.selection, unwSelf.rootObject.inconsistentSymbolNameSetMessage_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_AutoLayoutDeviceDocument_assignmentInhibitionMessage (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.inconsistentPackagePadNameSetsMessage_property.addEBObserver (self.assignmentInhibitionMessage_property)
    self.rootObject.inconsistentSymbolNameSetMessage_property.addEBObserver (self.assignmentInhibitionMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: hasUnconnectedPin
    self.hasUnconnectedPin_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.unconnectedPins_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_hasUnconnectedPin (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unconnectedPins_property.addEBObserver (self.hasUnconnectedPin_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mStatusMessage
    self.mStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_mStatusMessage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mStatusMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mMetadataStatus
    self.mMetadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_mMetadataStatus (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mMetadataStatus_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: hasUnconnectedPad
    self.hasUnconnectedPad_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.unconnectedPads_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_hasUnconnectedPad (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unconnectedPads_property.addEBObserver (self.hasUnconnectedPad_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: hasAssignedPadProxies
    self.hasAssignedPadProxies_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.assignedPadProxies_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_hasAssignedPadProxies (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.assignedPadProxies_property.addEBObserver (self.hasAssignedPadProxies_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mStatusImage
    self.mStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.issues_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutDeviceDocument_mStatusImage (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mStatusImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································
  
/*  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
  //--------------------------- Install ebView bindings
    self.symbolDisplayController.bind_ebView (self.mComposedSymbolView)
    self.packageDisplayController.bind_ebView (self.mComposedPackageView)
  //--------------------------- Install regular bindings
    self.mTitleTextField?.bind_value (self.rootObject.mTitle_property, file: #file, line: #line, sendContinously:true)
    self.mRepresentationImageView?.bind_imageData (self.rootObject.mImageData_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_horizontalFlip (self.rootObject.mSymbolDisplayHorizontalFlip_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_verticalFlip (self.rootObject.mSymbolDisplayVerticalFlip_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_zoom (self.rootObject.mSymbolDisplayZoom_property, file: #file, line: #line)
    self.mSymbolDisplayHorizontalFlipSwitch?.bind_value (self.rootObject.mSymbolDisplayHorizontalFlip_property, file: #file, line: #line)
    self.mSymbolDisplayVerticalFlipSwitch?.bind_value (self.rootObject.mSymbolDisplayVerticalFlip_property, file: #file, line: #line)
    self.mInconsistentSymbolNameMessageTextView?.bind_valueObserver (self.rootObject.inconsistentSymbolNameSetMessage_property, file: #file, line: #line)
    self.mSymbolTypeTextField?.bind_valueObserver (self.symbolInstanceSelection.symbolTypeName_property, file: #file, line: #line)
    self.mSymbolNameTextField?.bind_value (self.symbolInstanceSelection.mInstanceName_property, file: #file, line: #line, sendContinously:true)
    self.mComposedPackageView?.bind_horizontalFlip (self.rootObject.mPackageDisplayHorizontalFlip_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_verticalFlip (self.rootObject.mPackageDisplayVerticalFlip_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_zoom (self.rootObject.mPackageDisplayZoom_property, file: #file, line: #line)
    self.mPackageDisplayHorizontalFlipSwitch?.bind_value (self.rootObject.mPackageDisplayHorizontalFlip_property, file: #file, line: #line)
    self.mPackageDisplayVerticalFlipSwitch?.bind_value (self.rootObject.mPackageDisplayVerticalFlip_property, file: #file, line: #line)
    self.mShowPackagesSwitch?.bind_value (self.rootObject.mShowPackages_property, file: #file, line: #line)
    self.mPackagesColorWell?.bind_color (preferences_packageColor_property, file: #file, line: #line, sendContinously:false)
    self.mShowPackagePadNumbersSwitch?.bind_value (self.rootObject.mShowPackagePadNumbers_property, file: #file, line: #line)
    self.mPackageNumbersColorWell?.bind_color (preferences_padNumberColor_property, file: #file, line: #line, sendContinously:false)
    self.mShowPackageFrontPadsSwitch?.bind_value (self.rootObject.mShowPackageFrontPads_property, file: #file, line: #line)
    self.mPackageFrontPadsColorWell?.bind_color (preferences_frontSidePadColor_property, file: #file, line: #line, sendContinously:false)
    self.mShowPackageBackPadsSwitch?.bind_value (self.rootObject.mShowPackageBackPads_property, file: #file, line: #line)
    self.mPackageBackPadsColorWell?.bind_color (preferences_backSidePadColor_property, file: #file, line: #line, sendContinously:false)
    self.mInconsistentPackagePadNameSetsMessageTextView?.bind_valueObserver (self.rootObject.inconsistentPackagePadNameSetsMessage_property, file: #file, line: #line)
    self.mInconsistentPadNameSetTextField?.bind_valueObserver (self.assignmentInhibitionMessage_property, file: #file, line: #line)
    self.mUnconnectedPadsInDeviceTableView?.bind_unconnectedPads (self.rootObject.unconnectedPads_property, file: #file, line: #line)
    self.mUnconnectedSymbolPinsInDeviceTableView?.bind_unconnectedPins (self.rootObject.unconnectedPins_property, file: #file, line: #line)
    self.mAssignedPadProxyTableView?.bind_assignedPadProxies (self.rootObject.assignedPadProxies_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .id (self.rootObject.imageIsValid_property)ø}
        outlet: self.mCopyImageButton
      )
      self.mController_mCopyImageButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .id (self.rootObject.imageIsValid_property)ø}
        outlet: self.mRemoveImageButton
      )
      self.mController_mRemoveImageButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.documentationController.selectedArray_property.count_property), .gt, .literalInt (0))ø}
        outlet: self.mRemoveSelectedDocButton
      )
      self.mController_mRemoveSelectedDocButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.documentationController.selectedArray_property.count_property), .gt, .literalInt (0))ø}
        outlet: self.mShowDocButton
      )
      self.mController_mShowDocButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.documentationController.selectedArray_property.count_property), .gt, .literalInt (0))ø}
        outlet: self.mSaveDocButton
      )
      self.mController_mSaveDocButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .id (self.rootObject.symbolNameAreConsistent_property)ø}
        outlet: self.mInconsistentSymbolNameMessageScrollView
      )
      self.mController_mInconsistentSymbolNameMessageScrollView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .id (self.rootObject.symbolNameAreConsistent_property)ø}
        outlet: self.mSymbolErrorMessageTitleTextField
      )
      self.mController_mSymbolErrorMessageTitleTextField_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .id (self.rootObject.packagePadNameSetsAreConsistent_property)ø}
        outlet: self.mInconsistentPackagePadNameSetsMessageScrollView
      )
      self.mController_mInconsistentPackagePadNameSetsMessageScrollView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .boolcmp (.intcmp (.id (self.rootObject.mPackages_property.count_property), .gt, .literalInt (0)), .and, .intcmp (.id (self.rootObject.mSymbolTypes_property.count_property), .gt, .literalInt (0)))ø}
        outlet: self.mResetSymbolAndPackagesVersionButton
      )
      self.mController_mResetSymbolAndPackagesVersionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .boolcmp (.intcmp (.id (self.rootObject.mPackages_property.count_property), .gt, .literalInt (0)), .and, .intcmp (.id (self.rootObject.mSymbolTypes_property.count_property), .gt, .literalInt (0)))ø}
        outlet: self.mUpdateSymbolAndPackagesButton
      )
      self.mController_mUpdateSymbolAndPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0))ø}
        outlet: self.mResetSelectedSymbolVersionButton
      )
      self.mController_mResetSelectedSymbolVersionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0))ø}
        outlet: self.mEditSelectedSymbolsButton
      )
      self.mController_mEditSelectedSymbolsButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0))ø}
        outlet: self.mExportSelectedSymbolsButton
      )
      self.mController_mExportSelectedSymbolsButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.symbolTypeController.selectedArray_property.count_property), .gt, .literalInt (0))ø}
        outlet: self.mUpdateSelectedSymbolsButton
      )
      self.mController_mUpdateSelectedSymbolsButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .boolcmp (.intcmp (.id (self.symbolTypeController.selectedArray_property.count_property), .eq, .literalInt (1)), .and, .intcmp (.id (self.symbolTypeSelection.instanceCount_property), .eq, .literalInt (0)))ø}
        outlet: self.mRemoveUselessSymbolTypeButton
      )
      self.mController_mRemoveUselessSymbolTypeButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0))ø}
        outlet: self.mResetSelectedPackageVersionButton
      )
      self.mController_mResetSelectedPackageVersionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0))ø}
        outlet: self.mEditSelectedPackagesButton
      )
      self.mController_mEditSelectedPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0))ø}
        outlet: self.mExportSelectedPackagesButton
      )
      self.mController_mExportSelectedPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .intcmp (.id (self.packageController.selectedArray_property.count_property), .gt, .literalInt (0))ø}
        outlet: self.mUpdateSelectedPackagesButton
      )
      self.mController_mUpdateSelectedPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .boolcmp (.id (self.rootObject.packagePadNameSetsAreConsistent_property), .and, .id (self.rootObject.symbolNameAreConsistent_property))ø}
        outlet: self.mInconsistentPadNameSetTextField
      )
      self.mController_mInconsistentPadNameSetTextField_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: .boolcmp (.not (.id (self.rootObject.packagePadNameSetsAreConsistent_property)), .or, .not (.id (self.rootObject.symbolNameAreConsistent_property)))ø}
        outlet: self.mAssignmentSplitView
      )
      self.mController_mAssignmentSplitView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .boolcmp (.id (self.hasUnconnectedPad_property), .and, .id (self.hasUnconnectedPin_property))ø}
        outlet: self.mBindButton
      )
      self.mController_mBindButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .id (self.hasUnconnectedPad_property)ø}
        outlet: self.mNCButton
      )
      self.mController_mNCButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .id (self.hasAssignedPadProxies_property)ø}
        outlet: self.mUnbindButton
      )
      self.mController_mUnbindButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: .id (self.hasAssignedPadProxies_property)ø}
        outlet: self.mUnbindAllButton
      )
      self.mController_mUnbindAllButton_enabled = controller
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  } */

  //····················································································································
  
/*  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    self.mPasteImageButton?.target = self
    self.mPasteImageButton?.action = #selector (AutoLayoutDeviceDocument.pasteImageAction (_:))
    self.mCopyImageButton?.target = self
    self.mCopyImageButton?.action = #selector (AutoLayoutDeviceDocument.copyImageAction (_:))
    self.mRemoveImageButton?.target = self
    self.mRemoveImageButton?.action = #selector (AutoLayoutDeviceDocument.removeImageAction (_:))
    self.mRemoveSelectedDocButton?.target = documentationController
    self.mRemoveSelectedDocButton?.action = #selector (Controller_AutoLayoutDeviceDocument_documentationController.remove (_:))
    self.mShowDocButton?.target = self
    self.mShowDocButton?.action = #selector (AutoLayoutDeviceDocument.showDocAction (_:))
    self.mSaveDocButton?.target = self
    self.mSaveDocButton?.action = #selector (AutoLayoutDeviceDocument.saveDocAction (_:))
    self.mAddSymbolFromLibraryButton?.target = self
    self.mAddSymbolFromLibraryButton?.action = #selector (AutoLayoutDeviceDocument.addSymbolFromLibraryAction (_:))
    self.mAddPackageFromLibraryButton?.target = self
    self.mAddPackageFromLibraryButton?.action = #selector (AutoLayoutDeviceDocument.addPackageFromLibraryAction (_:))
    self.mResetSymbolAndPackagesVersionButton?.target = self
    self.mResetSymbolAndPackagesVersionButton?.action = #selector (AutoLayoutDeviceDocument.resetSymbolsAndPackagesVersion (_:))
    self.mUpdateSymbolAndPackagesButton?.target = self
    self.mUpdateSymbolAndPackagesButton?.action = #selector (AutoLayoutDeviceDocument.updateSymbolsAndPackagesAction (_:))
    self.mResetSelectedSymbolVersionButton?.target = self
    self.mResetSelectedSymbolVersionButton?.action = #selector (AutoLayoutDeviceDocument.resetSelectedSymbolVersion (_:))
    self.mEditSelectedSymbolsButton?.target = self
    self.mEditSelectedSymbolsButton?.action = #selector (AutoLayoutDeviceDocument.editSelectedSymbols (_:))
    self.mExportSelectedSymbolsButton?.target = self
    self.mExportSelectedSymbolsButton?.action = #selector (AutoLayoutDeviceDocument.exportSelectedSymbols (_:))
    self.mUpdateSelectedSymbolsButton?.target = self
    self.mUpdateSelectedSymbolsButton?.action = #selector (AutoLayoutDeviceDocument.updateSelectedSymbols (_:))
    self.mRemoveUselessSymbolTypeButton?.target = self
    self.mRemoveUselessSymbolTypeButton?.action = #selector (AutoLayoutDeviceDocument.removeUselessSymbolTypeAction (_:))
    self.mResetSelectedPackageVersionButton?.target = self
    self.mResetSelectedPackageVersionButton?.action = #selector (AutoLayoutDeviceDocument.resetSelectedPackageVersion (_:))
    self.mEditSelectedPackagesButton?.target = self
    self.mEditSelectedPackagesButton?.action = #selector (AutoLayoutDeviceDocument.editSelectedPackages (_:))
    self.mExportSelectedPackagesButton?.target = self
    self.mExportSelectedPackagesButton?.action = #selector (AutoLayoutDeviceDocument.exportSelectedPackages (_:))
    self.mUpdateSelectedPackagesButton?.target = self
    self.mUpdateSelectedPackagesButton?.action = #selector (AutoLayoutDeviceDocument.updateSelectedPackages (_:))
    self.mBindButton?.target = self
    self.mBindButton?.action = #selector (AutoLayoutDeviceDocument.performBindAction (_:))
    self.mNCButton?.target = self
    self.mNCButton?.action = #selector (AutoLayoutDeviceDocument.performNCAction (_:))
    self.mUnbindButton?.target = self
    self.mUnbindButton?.action = #selector (AutoLayoutDeviceDocument.performUnbindAction (_:))
    self.mUnbindAllButton?.target = self
    self.mUnbindAllButton?.action = #selector (AutoLayoutDeviceDocument.performUnbindAllAction (_:))
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  } */

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Clean up auto layout views
    self.mPageMasterView.ebCleanUp ()
    self.mDocumentMainView.ebCleanUp ()
    self.mDescriptionPage.ebCleanUp ()
    self.mSymbolsPage.ebCleanUp ()
    self.mPackagesPage.ebCleanUp ()
    self.mLibraryPage.ebCleanUp ()
    self.mAssignmentsPage.ebCleanUp ()
    self.mInfosPage.ebCleanUp ()
    let toolbarItems = self.windowForSheet?.toolbar?.items ?? []
    for item in toolbarItems {
      item.view?.ebCleanUp ()
    }
  //--------------------------- Unbind regular bindings
    self.mTitleTextField?.unbind_value ()
    self.mRepresentationImageView?.unbind_imageData ()
    self.mComposedSymbolView?.unbind_horizontalFlip ()
    self.mComposedSymbolView?.unbind_verticalFlip ()
    self.mComposedSymbolView?.unbind_zoom ()
    self.mSymbolDisplayHorizontalFlipSwitch?.unbind_value ()
    self.mSymbolDisplayVerticalFlipSwitch?.unbind_value ()
    self.mInconsistentSymbolNameMessageTextView?.unbind_valueObserver ()
    self.mSymbolTypeTextField?.unbind_valueObserver ()
    self.mSymbolNameTextField?.unbind_value ()
    self.mComposedPackageView?.unbind_horizontalFlip ()
    self.mComposedPackageView?.unbind_verticalFlip ()
    self.mComposedPackageView?.unbind_zoom ()
    self.mPackageDisplayHorizontalFlipSwitch?.unbind_value ()
    self.mPackageDisplayVerticalFlipSwitch?.unbind_value ()
    self.mShowPackagesSwitch?.unbind_value ()
    self.mPackagesColorWell?.unbind_color ()
    self.mShowPackagePadNumbersSwitch?.unbind_value ()
    self.mPackageNumbersColorWell?.unbind_color ()
    self.mShowPackageFrontPadsSwitch?.unbind_value ()
    self.mPackageFrontPadsColorWell?.unbind_color ()
    self.mShowPackageBackPadsSwitch?.unbind_value ()
    self.mPackageBackPadsColorWell?.unbind_color ()
    self.mInconsistentPackagePadNameSetsMessageTextView?.unbind_valueObserver ()
    self.mInconsistentPadNameSetTextField?.unbind_valueObserver ()
    self.mUnconnectedPadsInDeviceTableView?.unbind_unconnectedPads ()
    self.mUnconnectedSymbolPinsInDeviceTableView?.unbind_unconnectedPins ()
    self.mAssignedPadProxyTableView?.unbind_assignedPadProxies ()
  //--------------------------- Unbind multiple bindings
  //--------------------------- Unbind array controllers
    self.symbolDisplayController.unbind_ebView (self.mComposedSymbolView)
    self.packageDisplayController.unbind_ebView (self.mComposedPackageView)
  //--- Array controller property: packageController
    self.packageController.unbind_model ()
  //--- Array controller property: documentationController
    self.documentationController.unbind_model ()
  //--- Array controller property: symbolDisplayController
    self.symbolDisplayController.unbind_model ()
  //--- Selection controller property: symbolInstanceSelection
    self.symbolInstanceSelection.unbind_selection ()
  //--- Array controller property: packageDisplayController
    self.packageDisplayController.unbind_model ()
  //--- Array controller property: symbolTypeController
    self.symbolTypeController.unbind_model ()
  //--- Selection controller property: symbolTypeSelection
    self.symbolTypeSelection.unbind_selection ()
    // self.rootObject.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (self.assignmentInhibitionMessage_property)
    // self.rootObject.inconsistentSymbolNameSetMessage_property.removeEBObserver (self.assignmentInhibitionMessage_property)
    // self.rootObject.unconnectedPins_property.removeEBObserver (self.hasUnconnectedPin_property)
    // self.rootObject.issues_property.removeEBObserver (self.mStatusMessage_property)
    // self.rootObject.issues_property.removeEBObserver (self.mMetadataStatus_property)
    // self.rootObject.unconnectedPads_property.removeEBObserver (self.hasUnconnectedPad_property)
    // self.rootObject.assignedPadProxies_property.removeEBObserver (self.hasAssignedPadProxies_property)
    // self.rootObject.issues_property.removeEBObserver (self.mStatusImage_property)
  //--------------------------- Remove targets / actions
    self.mPasteImageButton?.target = nil
    self.mCopyImageButton?.target = nil
    self.mRemoveImageButton?.target = nil
    self.mRemoveSelectedDocButton?.target = nil
    self.mShowDocButton?.target = nil
    self.mSaveDocButton?.target = nil
    self.mAddSymbolFromLibraryButton?.target = nil
    self.mAddPackageFromLibraryButton?.target = nil
    self.mResetSymbolAndPackagesVersionButton?.target = nil
    self.mUpdateSymbolAndPackagesButton?.target = nil
    self.mResetSelectedSymbolVersionButton?.target = nil
    self.mEditSelectedSymbolsButton?.target = nil
    self.mExportSelectedSymbolsButton?.target = nil
    self.mUpdateSelectedSymbolsButton?.target = nil
    self.mRemoveUselessSymbolTypeButton?.target = nil
    self.mResetSelectedPackageVersionButton?.target = nil
    self.mEditSelectedPackagesButton?.target = nil
    self.mExportSelectedPackagesButton?.target = nil
    self.mUpdateSelectedPackagesButton?.target = nil
    self.mBindButton?.target = nil
    self.mNCButton?.target = nil
    self.mUnbindButton?.target = nil
    self.mUnbindAllButton?.target = nil
  //--------------------------- Clean up outlets
    self.mAddPackageFromLibraryButton?.ebCleanUp ()
    self.mAddSymbolFromLibraryButton?.ebCleanUp ()
    self.mAssignedPadProxyTableView?.ebCleanUp ()
    self.mAssignmentSplitView?.ebCleanUp ()
    self.mBindButton?.ebCleanUp ()
    self.mComposedPackageView?.ebCleanUp ()
    self.mComposedSymbolView?.ebCleanUp ()
    self.mCopyImageButton?.ebCleanUp ()
    self.mEditSelectedPackagesButton?.ebCleanUp ()
    self.mEditSelectedSymbolsButton?.ebCleanUp ()
    self.mExportSelectedPackagesButton?.ebCleanUp ()
    self.mExportSelectedSymbolsButton?.ebCleanUp ()
    self.mInconsistentPackagePadNameSetsMessageScrollView?.ebCleanUp ()
    self.mInconsistentPackagePadNameSetsMessageTextView?.ebCleanUp ()
    self.mInconsistentPadNameSetTextField?.ebCleanUp ()
    self.mInconsistentSymbolNameMessageScrollView?.ebCleanUp ()
    self.mInconsistentSymbolNameMessageTextView?.ebCleanUp ()
    self.mNCButton?.ebCleanUp ()
    self.mPackageBackPadsColorWell?.ebCleanUp ()
    self.mPackageDisplayHorizontalFlipSwitch?.ebCleanUp ()
    self.mPackageDisplayVerticalFlipSwitch?.ebCleanUp ()
    self.mPackageFrontPadsColorWell?.ebCleanUp ()
    self.mPackageNumbersColorWell?.ebCleanUp ()
    self.mPackagesColorWell?.ebCleanUp ()
    self.mPasteImageButton?.ebCleanUp ()
    self.mRemoveImageButton?.ebCleanUp ()
    self.mRemoveSelectedDocButton?.ebCleanUp ()
    self.mRemoveUselessSymbolTypeButton?.ebCleanUp ()
    self.mRepresentationImageView?.ebCleanUp ()
    self.mResetSelectedPackageVersionButton?.ebCleanUp ()
    self.mResetSelectedSymbolVersionButton?.ebCleanUp ()
    self.mResetSymbolAndPackagesVersionButton?.ebCleanUp ()
    self.mSaveDocButton?.ebCleanUp ()
    self.mShowDocButton?.ebCleanUp ()
    self.mShowPackageBackPadsSwitch?.ebCleanUp ()
    self.mShowPackageFrontPadsSwitch?.ebCleanUp ()
    self.mShowPackagePadNumbersSwitch?.ebCleanUp ()
    self.mShowPackagesSwitch?.ebCleanUp ()
    self.mSymbolDisplayHorizontalFlipSwitch?.ebCleanUp ()
    self.mSymbolDisplayVerticalFlipSwitch?.ebCleanUp ()
    self.mSymbolErrorMessageTitleTextField?.ebCleanUp ()
    self.mSymbolNameTextField?.ebCleanUp ()
    self.mSymbolTypeTextField?.ebCleanUp ()
    self.mTitleTextField?.ebCleanUp ()
    self.mUnbindAllButton?.ebCleanUp ()
    self.mUnbindButton?.ebCleanUp ()
    self.mUnconnectedPadsInDeviceTableView?.ebCleanUp ()
    self.mUnconnectedSymbolPinsInDeviceTableView?.ebCleanUp ()
    self.mUpdateSelectedPackagesButton?.ebCleanUp ()
    self.mUpdateSelectedSymbolsButton?.ebCleanUp ()
    self.mUpdateSymbolAndPackagesButton?.ebCleanUp ()
  //--------------------------- Detach outlets
    self.mAddPackageFromLibraryButton = nil
    self.mAddSymbolFromLibraryButton = nil
    self.mAssignedPadProxyTableView = nil
    self.mAssignmentSplitView = nil
    self.mBindButton = nil
    self.mComposedPackageView = nil
    self.mComposedSymbolView = nil
    self.mCopyImageButton = nil
    self.mEditSelectedPackagesButton = nil
    self.mEditSelectedSymbolsButton = nil
    self.mExportSelectedPackagesButton = nil
    self.mExportSelectedSymbolsButton = nil
    self.mInconsistentPackagePadNameSetsMessageScrollView = nil
    self.mInconsistentPackagePadNameSetsMessageTextView = nil
    self.mInconsistentPadNameSetTextField = nil
    self.mInconsistentSymbolNameMessageScrollView = nil
    self.mInconsistentSymbolNameMessageTextView = nil
    self.mNCButton = nil
    self.mPackageBackPadsColorWell = nil
    self.mPackageDisplayHorizontalFlipSwitch = nil
    self.mPackageDisplayVerticalFlipSwitch = nil
    self.mPackageFrontPadsColorWell = nil
    self.mPackageNumbersColorWell = nil
    self.mPackagesColorWell = nil
    self.mPasteImageButton = nil
    self.mRemoveImageButton = nil
    self.mRemoveSelectedDocButton = nil
    self.mRemoveUselessSymbolTypeButton = nil
    self.mRepresentationImageView = nil
    self.mResetSelectedPackageVersionButton = nil
    self.mResetSelectedSymbolVersionButton = nil
    self.mResetSymbolAndPackagesVersionButton = nil
    self.mSaveDocButton = nil
    self.mShowDocButton = nil
    self.mShowPackageBackPadsSwitch = nil
    self.mShowPackageFrontPadsSwitch = nil
    self.mShowPackagePadNumbersSwitch = nil
    self.mShowPackagesSwitch = nil
    self.mSymbolDisplayHorizontalFlipSwitch = nil
    self.mSymbolDisplayVerticalFlipSwitch = nil
    self.mSymbolErrorMessageTitleTextField = nil
    self.mSymbolNameTextField = nil
    self.mSymbolTypeTextField = nil
    self.mTitleTextField = nil
    self.mUnbindAllButton = nil
    self.mUnbindButton = nil
    self.mUnconnectedPadsInDeviceTableView = nil
    self.mUnconnectedSymbolPinsInDeviceTableView = nil
    self.mUpdateSelectedPackagesButton = nil
    self.mUpdateSelectedSymbolsButton = nil
    self.mUpdateSymbolAndPackagesButton = nil
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

