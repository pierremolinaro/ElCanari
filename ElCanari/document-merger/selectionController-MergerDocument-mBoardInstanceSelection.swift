//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    SelectionController_MergerDocument_mBoardInstanceSelection                                                       *
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(SelectionController_MergerDocument_mBoardInstanceSelection)
final class SelectionController_MergerDocument_mBoardInstanceSelection : EBObject {
  private var mModel : ReadOnlyArrayOf_MergerBoardInstance?

  //····················································································································
  //   SELECTION OBSERVABLE PROPERTIES
  //····················································································································

  var backComponentNameDisplay_property = EBTransientProperty_CALayer ()

  var backComponentNameDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backComponentNameDisplay_property.prop
    }
  }
  var backComponentValueDisplay_property = EBTransientProperty_CALayer ()

  var backComponentValueDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backComponentValueDisplay_property.prop
    }
  }
  var backLayoutTextsLayerDisplay_property = EBTransientProperty_CALayer ()

  var backLayoutTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backLayoutTextsLayerDisplay_property.prop
    }
  }
  var backLegendLinesLayerDisplay_property = EBTransientProperty_CALayer ()

  var backLegendLinesLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backLegendLinesLayerDisplay_property.prop
    }
  }
  var backLegendTextsLayerDisplay_property = EBTransientProperty_CALayer ()

  var backLegendTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backLegendTextsLayerDisplay_property.prop
    }
  }
  var backPackagesDisplay_property = EBTransientProperty_CALayer ()

  var backPackagesDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backPackagesDisplay_property.prop
    }
  }
  var backPadsDisplay_property = EBTransientProperty_CALayer ()

  var backPadsDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backPadsDisplay_property.prop
    }
  }
  var backTracksDisplay_property = EBTransientProperty_CALayer ()

  var backTracksDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backTracksDisplay_property.prop
    }
  }
  var backgroundLayerDisplay_property = EBTransientProperty_CALayer ()

  var backgroundLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backgroundLayerDisplay_property.prop
    }
  }
  var boardLimitWidth_property = EBTransientProperty_Int ()

  var boardLimitWidth_property_selection : EBSelection <Int> {
    get {
      return self.boardLimitWidth_property.prop
    }
  }
  var boardLimitsDisplay_property = EBTransientProperty_CALayer ()

  var boardLimitsDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.boardLimitsDisplay_property.prop
    }
  }
  var frontComponentNameDisplay_property = EBTransientProperty_CALayer ()

  var frontComponentNameDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontComponentNameDisplay_property.prop
    }
  }
  var frontComponentValueDisplay_property = EBTransientProperty_CALayer ()

  var frontComponentValueDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontComponentValueDisplay_property.prop
    }
  }
  var frontLayoutTextsLayerDisplay_property = EBTransientProperty_CALayer ()

  var frontLayoutTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontLayoutTextsLayerDisplay_property.prop
    }
  }
  var frontLegendLinesLayerDisplay_property = EBTransientProperty_CALayer ()

  var frontLegendLinesLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontLegendLinesLayerDisplay_property.prop
    }
  }
  var frontLegendTextsLayerDisplay_property = EBTransientProperty_CALayer ()

  var frontLegendTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontLegendTextsLayerDisplay_property.prop
    }
  }
  var frontPackagesDisplay_property = EBTransientProperty_CALayer ()

  var frontPackagesDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontPackagesDisplay_property.prop
    }
  }
  var frontPadsDisplay_property = EBTransientProperty_CALayer ()

  var frontPadsDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontPadsDisplay_property.prop
    }
  }
  var frontTracksDisplay_property = EBTransientProperty_CALayer ()

  var frontTracksDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontTracksDisplay_property.prop
    }
  }
  var holeLayerDisplay_property = EBTransientProperty_CALayer ()

  var holeLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.holeLayerDisplay_property.prop
    }
  }
  var instanceLayerDisplay_property = EBTransientProperty_CALayer ()

  var instanceLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.instanceLayerDisplay_property.prop
    }
  }
  var instanceRect_property = EBTransientProperty_CanariBoardRect ()

  var instanceRect_property_selection : EBSelection <CanariBoardRect> {
    get {
      return self.instanceRect_property.prop
    }
  }
  var selectionLayer_property = EBTransientProperty_CALayer ()

  var selectionLayer_property_selection : EBSelection <CALayer> {
    get {
      return self.selectionLayer_property.prop
    }
  }
  var viaLayerDisplay_property = EBTransientProperty_CALayer ()

  var viaLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.viaLayerDisplay_property.prop
    }
  }
  var x_property = EBPropertyProxy_Int ()

  var x_property_selection : EBSelection <Int> {
    get {
      return self.x_property.prop
    }
  }
  var y_property = EBPropertyProxy_Int ()

  var y_property_selection : EBSelection <Int> {
    get {
      return self.y_property.prop
    }
  }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  func bind_selection (model : ReadOnlyArrayOf_MergerBoardInstance, file:String, line:Int) {
    mModel = model
    bind_property_backComponentNameDisplay (model: model)
    bind_property_backComponentValueDisplay (model: model)
    bind_property_backLayoutTextsLayerDisplay (model: model)
    bind_property_backLegendLinesLayerDisplay (model: model)
    bind_property_backLegendTextsLayerDisplay (model: model)
    bind_property_backPackagesDisplay (model: model)
    bind_property_backPadsDisplay (model: model)
    bind_property_backTracksDisplay (model: model)
    bind_property_backgroundLayerDisplay (model: model)
    bind_property_boardLimitWidth (model: model)
    bind_property_boardLimitsDisplay (model: model)
    bind_property_frontComponentNameDisplay (model: model)
    bind_property_frontComponentValueDisplay (model: model)
    bind_property_frontLayoutTextsLayerDisplay (model: model)
    bind_property_frontLegendLinesLayerDisplay (model: model)
    bind_property_frontLegendTextsLayerDisplay (model: model)
    bind_property_frontPackagesDisplay (model: model)
    bind_property_frontPadsDisplay (model: model)
    bind_property_frontTracksDisplay (model: model)
    bind_property_holeLayerDisplay (model: model)
    bind_property_instanceLayerDisplay (model: model)
    bind_property_instanceRect (model: model)
    bind_property_selectionLayer (model: model)
    bind_property_viaLayerDisplay (model: model)
    bind_property_x (model: model)
    bind_property_y (model: model)
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize ())
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (mEasyBindingsObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_MergerDocument_mBoardInstanceSelection.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "x",
      idx:self.x_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x_property.mObserverExplorer,
      valueExplorer:&self.x_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y",
      idx:self.y_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y_property.mObserverExplorer,
      valueExplorer:&self.y_property.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_MergerDocument_mBoardInstanceSelection.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (mEasyBindingsObjectIndex) + className
    mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  func showObjectWindowFromExplorerButton (_ : Any) {
    if mExplorerWindow == nil {
      buildExplorerWindow ()
    }
    mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  func deleteSelectionControllerWindowAction (_ : Any) {
    clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    let closeButton = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton!.target = nil
    mExplorerWindow?.orderOut (nil)
    mExplorerWindow = nil
  }

  //···················································································································*

  private final func bind_property_backComponentNameDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_backComponentNameDisplay (self.backComponentNameDisplay_property)
    self.backComponentNameDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentNameDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentValueDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_backComponentValueDisplay (self.backComponentValueDisplay_property)
    self.backComponentValueDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentValueDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLayoutTextsLayerDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_backLayoutTextsLayerDisplay (self.backLayoutTextsLayerDisplay_property)
    self.backLayoutTextsLayerDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLayoutTextsLayerDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLegendLinesLayerDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_backLegendLinesLayerDisplay (self.backLegendLinesLayerDisplay_property)
    self.backLegendLinesLayerDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLegendLinesLayerDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backLegendTextsLayerDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_backLegendTextsLayerDisplay (self.backLegendTextsLayerDisplay_property)
    self.backLegendTextsLayerDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backLegendTextsLayerDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPackagesDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_backPackagesDisplay (self.backPackagesDisplay_property)
    self.backPackagesDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPackagesDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPadsDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_backPadsDisplay (self.backPadsDisplay_property)
    self.backPadsDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPadsDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backTracksDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_backTracksDisplay (self.backTracksDisplay_property)
    self.backTracksDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backTracksDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_backgroundLayerDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_backgroundLayerDisplay (self.backgroundLayerDisplay_property)
    self.backgroundLayerDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backgroundLayerDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardLimitWidth (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_boardLimitWidth (self.boardLimitWidth_property)
    self.boardLimitWidth_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardLimitWidth_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardLimitsDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_boardLimitsDisplay (self.boardLimitsDisplay_property)
    self.boardLimitsDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardLimitsDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentNameDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_frontComponentNameDisplay (self.frontComponentNameDisplay_property)
    self.frontComponentNameDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentNameDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentValueDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_frontComponentValueDisplay (self.frontComponentValueDisplay_property)
    self.frontComponentValueDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentValueDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLayoutTextsLayerDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_frontLayoutTextsLayerDisplay (self.frontLayoutTextsLayerDisplay_property)
    self.frontLayoutTextsLayerDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLayoutTextsLayerDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLegendLinesLayerDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_frontLegendLinesLayerDisplay (self.frontLegendLinesLayerDisplay_property)
    self.frontLegendLinesLayerDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLegendLinesLayerDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontLegendTextsLayerDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_frontLegendTextsLayerDisplay (self.frontLegendTextsLayerDisplay_property)
    self.frontLegendTextsLayerDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontLegendTextsLayerDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPackagesDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_frontPackagesDisplay (self.frontPackagesDisplay_property)
    self.frontPackagesDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPackagesDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPadsDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_frontPadsDisplay (self.frontPadsDisplay_property)
    self.frontPadsDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPadsDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontTracksDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_frontTracksDisplay (self.frontTracksDisplay_property)
    self.frontTracksDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontTracksDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_holeLayerDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_holeLayerDisplay (self.holeLayerDisplay_property)
    self.holeLayerDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holeLayerDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_instanceLayerDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_instanceLayerDisplay (self.instanceLayerDisplay_property)
    self.instanceLayerDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.instanceLayerDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_instanceRect (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_instanceRect (self.instanceRect_property)
    self.instanceRect_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CanariBoardRect> ()
          var isMultipleSelection = false
          for object in v {
            switch object.instanceRect_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_selectionLayer (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_selectionLayer (self.selectionLayer_property)
    self.selectionLayer_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionLayer_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_viaLayerDisplay (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_viaLayerDisplay (self.viaLayerDisplay_property)
    self.viaLayerDisplay_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<CALayer> ()
          var isMultipleSelection = false
          for object in v {
            switch object.viaLayerDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_x (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_x (self.x_property)
    self.x_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x_property.setProp (inValue)
          }
        }
      }
    }
    self.x_property.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.x_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_y (model : ReadOnlyArrayOf_MergerBoardInstance) {
    model.addEBObserverOf_y (self.y_property)
    self.y_property.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y_property.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y_property.setProp (inValue)
          }
        }
      }
    }
    self.y_property.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.y_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }



  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  func unbind_selection () {
  //--- backComponentNameDisplay
    self.backComponentNameDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_backComponentNameDisplay (self.backComponentNameDisplay_property)
  //--- backComponentValueDisplay
    self.backComponentValueDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_backComponentValueDisplay (self.backComponentValueDisplay_property)
  //--- backLayoutTextsLayerDisplay
    self.backLayoutTextsLayerDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_backLayoutTextsLayerDisplay (self.backLayoutTextsLayerDisplay_property)
  //--- backLegendLinesLayerDisplay
    self.backLegendLinesLayerDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_backLegendLinesLayerDisplay (self.backLegendLinesLayerDisplay_property)
  //--- backLegendTextsLayerDisplay
    self.backLegendTextsLayerDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_backLegendTextsLayerDisplay (self.backLegendTextsLayerDisplay_property)
  //--- backPackagesDisplay
    self.backPackagesDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_backPackagesDisplay (self.backPackagesDisplay_property)
  //--- backPadsDisplay
    self.backPadsDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_backPadsDisplay (self.backPadsDisplay_property)
  //--- backTracksDisplay
    self.backTracksDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_backTracksDisplay (self.backTracksDisplay_property)
  //--- backgroundLayerDisplay
    self.backgroundLayerDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_backgroundLayerDisplay (self.backgroundLayerDisplay_property)
  //--- boardLimitWidth
    self.boardLimitWidth_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_boardLimitWidth (self.boardLimitWidth_property)
  //--- boardLimitsDisplay
    self.boardLimitsDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_boardLimitsDisplay (self.boardLimitsDisplay_property)
  //--- frontComponentNameDisplay
    self.frontComponentNameDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontComponentNameDisplay (self.frontComponentNameDisplay_property)
  //--- frontComponentValueDisplay
    self.frontComponentValueDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontComponentValueDisplay (self.frontComponentValueDisplay_property)
  //--- frontLayoutTextsLayerDisplay
    self.frontLayoutTextsLayerDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontLayoutTextsLayerDisplay (self.frontLayoutTextsLayerDisplay_property)
  //--- frontLegendLinesLayerDisplay
    self.frontLegendLinesLayerDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontLegendLinesLayerDisplay (self.frontLegendLinesLayerDisplay_property)
  //--- frontLegendTextsLayerDisplay
    self.frontLegendTextsLayerDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontLegendTextsLayerDisplay (self.frontLegendTextsLayerDisplay_property)
  //--- frontPackagesDisplay
    self.frontPackagesDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontPackagesDisplay (self.frontPackagesDisplay_property)
  //--- frontPadsDisplay
    self.frontPadsDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontPadsDisplay (self.frontPadsDisplay_property)
  //--- frontTracksDisplay
    self.frontTracksDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_frontTracksDisplay (self.frontTracksDisplay_property)
  //--- holeLayerDisplay
    self.holeLayerDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_holeLayerDisplay (self.holeLayerDisplay_property)
  //--- instanceLayerDisplay
    self.instanceLayerDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_instanceLayerDisplay (self.instanceLayerDisplay_property)
  //--- instanceRect
    self.instanceRect_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_instanceRect (self.instanceRect_property)
  //--- selectionLayer
    self.selectionLayer_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_selectionLayer (self.selectionLayer_property)
  //--- viaLayerDisplay
    self.viaLayerDisplay_property.readModelFunction = nil 
    self.mModel?.removeEBObserverOf_viaLayerDisplay (self.viaLayerDisplay_property)
  //--- x
    self.x_property.readModelFunction = nil 
    self.x_property.writeModelFunction = nil 
    self.x_property.validateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_x (self.x_property)
  //--- y
    self.y_property.readModelFunction = nil 
    self.y_property.writeModelFunction = nil 
    self.y_property.validateAndWriteModelFunction = nil 
    self.mModel?.removeEBObserverOf_y (self.y_property)
  //---
    mModel = nil    
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

