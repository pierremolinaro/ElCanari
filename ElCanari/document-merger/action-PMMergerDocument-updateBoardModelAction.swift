//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension PMMergerDocument {
  func updateBoardModelAction (_ sender : NSObject) {
//--- START OF USER ZONE 2
    let selectedModels : EBSelection < [BoardModelEntity] > = mBoardModelController.selectedArray.prop
    switch selectedModels {
    case .single (let models) :
      if models.count == 1 {
        let updatedBoardModel = models [0]
        let boardModelName : String = updatedBoardModel.name.propval
      //--- Dialog
        if let window = self.windowForSheet {
          let openPanel = NSOpenPanel ()
          openPanel.canChooseFiles = true
          openPanel.canChooseDirectories = false
          openPanel.allowsMultipleSelection = false
          openPanel.allowedFileTypes = ["ElCanariBoardArchive"]
          openPanel.delegate = OpenPanelDelegateForUpdatingBoardModels (boardModelName)
          openPanel.beginSheetModal (for: window, completionHandler: { (returnCode : Int) in
            releaseOpenPanelDelegateForUdatingBoardModel ()
            if returnCode == NSFileHandlingPanelOKButton {
              if let url = openPanel.url, url.isFileURL {
                let filePath = url.path
              //--- Load file, as plist
                let optionalFileData : Data? = FileManager ().contents (atPath: filePath)
                if let fileData = optionalFileData {
                  do {
                    let optionalBoardArchiveDictionary = try PropertyListSerialization.propertyList (
                      from: fileData,
                      options: [],
                      format: nil
                    )
                    if let boardArchiveDictionary = optionalBoardArchiveDictionary as? NSDictionary {
                      let s = filePath.lastPathComponent.deletingPathExtension
                      let possibleBoardModel = self.parseBoardModel (fromDictionary: boardArchiveDictionary, named : s)
                      if let newBoardModel = possibleBoardModel {
                        updatedBoardModel.artworkName = newBoardModel.artworkName
                        updatedBoardModel.boardWidth = newBoardModel.boardWidth
                        updatedBoardModel.boardWidthUnit = newBoardModel.boardWidthUnit
                        updatedBoardModel.boardHeight = newBoardModel.boardHeight
                        updatedBoardModel.boardHeightUnit = newBoardModel.boardHeightUnit
                        updatedBoardModel.zoom = newBoardModel.zoom

                        let moc = self.managedObjectContext ()

                        var newArray = newBoardModel.frontLegendTexts.propval
                        var oldArray = updatedBoardModel.frontLegendTexts.propval
                        newBoardModel.frontLegendTexts.setProp ([])
                        moc.removeManagedObjects (oldArray)
                        updatedBoardModel.frontLegendTexts.setProp (newArray)

                        newArray = newBoardModel.frontLayoutTexts.propval
                        oldArray = updatedBoardModel.frontLayoutTexts.propval
                        newBoardModel.frontLayoutTexts.setProp ([])
                        moc.removeManagedObjects (oldArray)
                        updatedBoardModel.frontLayoutTexts.setProp (newArray)

                        newArray = newBoardModel.backLegendTexts.propval
                        oldArray = updatedBoardModel.backLegendTexts.propval
                        newBoardModel.backLegendTexts.setProp ([])
                        moc.removeManagedObjects (oldArray)
                        updatedBoardModel.backLegendTexts.setProp (newArray)

                        newArray = newBoardModel.backLayoutTexts.propval
                        oldArray = updatedBoardModel.backLayoutTexts.propval
                        newBoardModel.backLayoutTexts.setProp ([])
                        moc.removeManagedObjects (oldArray)
                        updatedBoardModel.backLayoutTexts.setProp (newArray)

                        let newViaArray = newBoardModel.vias.propval
                        let oldViaArray = updatedBoardModel.vias.propval
                        newBoardModel.vias.setProp ([])
                        moc.removeManagedObjects (oldViaArray)
                        updatedBoardModel.vias.setProp (newViaArray)

                        let newPadArray = newBoardModel.pads.propval
                        let oldPadArray = updatedBoardModel.pads.propval
                        newBoardModel.pads.setProp ([])
                        moc.removeManagedObjects (oldPadArray)
                        updatedBoardModel.pads.setProp (newPadArray)

                        newArray = newBoardModel.backComponentNames.propval
                        oldArray = updatedBoardModel.backComponentNames.propval
                        newBoardModel.backComponentNames.setProp ([])
                        moc.removeManagedObjects (oldArray)
                        updatedBoardModel.backComponentNames.setProp (newArray)

                        newArray = newBoardModel.frontComponentNames.propval
                        oldArray = updatedBoardModel.frontComponentNames.propval
                        newBoardModel.frontComponentNames.setProp ([])
                        moc.removeManagedObjects (oldArray)
                        updatedBoardModel.frontComponentNames.setProp (newArray)

                        newArray = newBoardModel.frontComponentValues.propval
                        oldArray = updatedBoardModel.frontComponentValues.propval
                        newBoardModel.frontComponentValues.setProp ([])
                        moc.removeManagedObjects (oldArray)
                        updatedBoardModel.frontComponentValues.setProp (newArray)

                        newArray = newBoardModel.backComponentValues.propval
                        oldArray = updatedBoardModel.backComponentValues.propval
                        newBoardModel.backComponentValues.setProp ([])
                        moc.removeManagedObjects (oldArray)
                        updatedBoardModel.backComponentValues.setProp (newArray)

                        newArray = newBoardModel.backTracks.propval
                        oldArray = updatedBoardModel.backTracks.propval
                        newBoardModel.backTracks.setProp ([])
                        moc.removeManagedObjects (oldArray)
                        updatedBoardModel.backTracks.setProp (newArray)

                        newArray = newBoardModel.frontTracks.propval
                        oldArray = updatedBoardModel.frontTracks.propval
                        newBoardModel.frontTracks.setProp ([])
                        moc.removeManagedObjects (oldArray)
                        updatedBoardModel.frontTracks.setProp (newArray)

                        newArray = newBoardModel.frontPackages.propval
                        oldArray = updatedBoardModel.frontPackages.propval
                        newBoardModel.frontPackages.setProp ([])
                        moc.removeManagedObjects (oldArray)
                        updatedBoardModel.frontPackages.setProp (newArray)

                        newArray = newBoardModel.backPackages.propval
                        oldArray = updatedBoardModel.backPackages.propval
                        newBoardModel.backPackages.setProp ([])
                        moc.removeManagedObjects (oldArray)
                        updatedBoardModel.backPackages.setProp (newArray)

                        moc.removeManagedObject (newBoardModel)
                      }
                    }else{
                      NSLog ("Invalid dictionary!")
                    }
                  }catch let error {
                    window.presentError (error)
                  }
                }else{ // Cannot read file
                  let alert = NSAlert ()
                  alert.messageText = "Cannot read file"
                  alert.addButton (withTitle: "Ok")
                  alert.informativeText = "The file \(filePath) cannot be read."
                  alert.beginSheetModal (for: window, completionHandler: {(NSModalResponse) in})
                }
              }else{
                NSLog ("Not a file URL!")
              }
            }
          })
        }
      }
    default :
      break
    }
//--- END OF USER ZONE 2
  }
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
