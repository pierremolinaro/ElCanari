//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardModelEntity : ReadOnlyAbstractArrayProperty <BoardModelEntity> {

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_artworkName.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.artworkName.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_artworkName.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.artworkName.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_artworkName {
        managedObject.artworkName.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_artworkName {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.artworkName.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_name.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.name.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_name.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.name.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_name {
        managedObject.name.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_name {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidth' stored property
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidth.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardWidth.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidth.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardWidth.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidth_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidth {
        managedObject.boardWidth.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidth_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidth.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidthUnit.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidthUnit.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidthUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidthUnit {
        managedObject.boardWidthUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidthUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidthUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeight' stored property
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeight.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardHeight.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeight.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardHeight.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeight_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeight {
        managedObject.boardHeight.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeight_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardHeight {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeight.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeightUnit.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeightUnit.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeightUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeightUnit {
        managedObject.boardHeightUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeightUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardHeightUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeightUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.zoom.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.zoom.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_zoom {
        managedObject.zoom.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_zoom {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'horizontalFlip' stored property
  //····················································································································

  private var mObserversOf_horizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_horizontalFlip.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.horizontalFlip.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_horizontalFlip.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.horizontalFlip.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_horizontalFlip_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_horizontalFlip {
        managedObject.horizontalFlip.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_horizontalFlip_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_horizontalFlip {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.horizontalFlip.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'verticalFlip' stored property
  //····················································································································

  private var mObserversOf_verticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_verticalFlip.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.verticalFlip.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_verticalFlip.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.verticalFlip.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_verticalFlip_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_verticalFlip {
        managedObject.verticalFlip.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_verticalFlip_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_verticalFlip {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.verticalFlip.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'displayPads' stored property
  //····················································································································

  private var mObserversOf_displayPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_displayPads.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.displayPads.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_displayPads.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.displayPads.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayPads_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_displayPads {
        managedObject.displayPads.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayPads_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_displayPads {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.displayPads.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'displayHoles' stored property
  //····················································································································

  private var mObserversOf_displayHoles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayHoles (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_displayHoles.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.displayHoles.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayHoles (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_displayHoles.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.displayHoles.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayHoles_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_displayHoles {
        managedObject.displayHoles.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayHoles_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_displayHoles {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.displayHoles.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'displayFrontComponentNames' stored property
  //····················································································································

  private var mObserversOf_displayFrontComponentNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayFrontComponentNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_displayFrontComponentNames.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.displayFrontComponentNames.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayFrontComponentNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_displayFrontComponentNames.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.displayFrontComponentNames.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayFrontComponentNames_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_displayFrontComponentNames {
        managedObject.displayFrontComponentNames.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayFrontComponentNames_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_displayFrontComponentNames {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.displayFrontComponentNames.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'displayBackComponentNames' stored property
  //····················································································································

  private var mObserversOf_displayBackComponentNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayBackComponentNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_displayBackComponentNames.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.displayBackComponentNames.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayBackComponentNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_displayBackComponentNames.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.displayBackComponentNames.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayBackComponentNames_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_displayBackComponentNames {
        managedObject.displayBackComponentNames.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayBackComponentNames_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_displayBackComponentNames {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.displayBackComponentNames.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'displayFrontTracks' stored property
  //····················································································································

  private var mObserversOf_displayFrontTracks = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayFrontTracks (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_displayFrontTracks.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.displayFrontTracks.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayFrontTracks (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_displayFrontTracks.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.displayFrontTracks.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayFrontTracks_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_displayFrontTracks {
        managedObject.displayFrontTracks.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayFrontTracks_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_displayFrontTracks {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.displayFrontTracks.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'displayBackTracks' stored property
  //····················································································································

  private var mObserversOf_displayBackTracks = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_displayBackTracks (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_displayBackTracks.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.displayBackTracks.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_displayBackTracks (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_displayBackTracks.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.displayBackTracks.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_displayBackTracks_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_displayBackTracks {
        managedObject.displayBackTracks.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_displayBackTracks_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_displayBackTracks {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.displayBackTracks.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaCount' transient property
  //····················································································································

  private var mObserversOf_viaCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaCount.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.viaCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaCount.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.viaCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaCount {
        managedObject.viaCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaCount {
        managedObject.viaCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentCount' transient property
  //····················································································································

  private var mObserversOf_componentCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_componentCount.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.componentCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_componentCount.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.componentCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_componentCount {
        managedObject.componentCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_componentCount {
        managedObject.componentCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaShapes' transient property
  //····················································································································

  private var mObserversOf_viaShapes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaShapes.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.viaShapes.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaShapes.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.viaShapes.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaShapes_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapes {
        managedObject.viaShapes.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaShapes_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapes {
        managedObject.viaShapes.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegmentsCount' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameSegmentsCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegmentsCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameSegmentsCount.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegmentsCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegmentsCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameSegmentsCount.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegmentsCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameSegmentsCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegmentsCount {
        managedObject.frontComponentNameSegmentsCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameSegmentsCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegmentsCount {
        managedObject.frontComponentNameSegmentsCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_backComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameSegments.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameSegments.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegments {
        managedObject.backComponentNameSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegments {
        managedObject.backComponentNameSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameSegmentsCount' transient property
  //····················································································································

  private var mObserversOf_backComponentNameSegmentsCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameSegmentsCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameSegmentsCount.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegmentsCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegmentsCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameSegmentsCount.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegmentsCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameSegmentsCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegmentsCount {
        managedObject.backComponentNameSegmentsCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameSegmentsCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegmentsCount {
        managedObject.backComponentNameSegmentsCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTrackSegments' transient property
  //····················································································································

  private var mObserversOf_backTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTrackSegments.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.backTrackSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTrackSegments.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.backTrackSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTrackSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegments {
        managedObject.backTrackSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTrackSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegments {
        managedObject.backTrackSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTracksSegmentsCount' transient property
  //····················································································································

  private var mObserversOf_backTracksSegmentsCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTracksSegmentsCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTracksSegmentsCount.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.backTracksSegmentsCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracksSegmentsCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTracksSegmentsCount.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.backTracksSegmentsCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTracksSegmentsCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksSegmentsCount {
        managedObject.backTracksSegmentsCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTracksSegmentsCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksSegmentsCount {
        managedObject.backTracksSegmentsCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTrackSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backTrackSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTrackSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.backTrackSegmentsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTrackSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.backTrackSegmentsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTrackSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegmentsForDisplay {
        managedObject.backTrackSegmentsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTrackSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegmentsForDisplay {
        managedObject.backTrackSegmentsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTrackSegments' transient property
  //····················································································································

  private var mObserversOf_frontTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTrackSegments.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTrackSegments.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTrackSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegments {
        managedObject.frontTrackSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTrackSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegments {
        managedObject.frontTrackSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTracksSegmentsCount' transient property
  //····················································································································

  private var mObserversOf_frontTracksSegmentsCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTracksSegmentsCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTracksSegmentsCount.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.frontTracksSegmentsCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksSegmentsCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTracksSegmentsCount.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.frontTracksSegmentsCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTracksSegmentsCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksSegmentsCount {
        managedObject.frontTracksSegmentsCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTracksSegmentsCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksSegmentsCount {
        managedObject.frontTracksSegmentsCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTrackSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontTrackSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTrackSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.frontTrackSegmentsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTrackSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.frontTrackSegmentsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTrackSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegmentsForDisplay {
        managedObject.frontTrackSegmentsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTrackSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegmentsForDisplay {
        managedObject.frontTrackSegmentsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_BoardModelEntity : ReadOnlyArrayOf_BoardModelEntity {

  var readModelFunction : Optional<() -> EBProperty < [BoardModelEntity] > >

  private var prop_cache : EBProperty < [BoardModelEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <BoardModelEntity> ()

  override var prop : EBProperty < [BoardModelEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <BoardModelEntity>
        switch prop_cache! {
        case .multipleSelection, .noSelection :
          newSet = Set <BoardModelEntity> ()
        case .singleSelection (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_artworkName_fromElementsOfSet (removedSet)
        removeEBObserversOf_name_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeight_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeightUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedSet)
        removeEBObserversOf_horizontalFlip_fromElementsOfSet (removedSet)
        removeEBObserversOf_verticalFlip_fromElementsOfSet (removedSet)
        removeEBObserversOf_displayPads_fromElementsOfSet (removedSet)
        removeEBObserversOf_displayHoles_fromElementsOfSet (removedSet)
        removeEBObserversOf_displayFrontComponentNames_fromElementsOfSet (removedSet)
        removeEBObserversOf_displayBackComponentNames_fromElementsOfSet (removedSet)
        removeEBObserversOf_displayFrontTracks_fromElementsOfSet (removedSet)
        removeEBObserversOf_displayBackTracks_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_viaCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_componentCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_viaShapes_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameSegmentsCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameSegmentsCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTrackSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTracksSegmentsCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTrackSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTrackSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTracksSegmentsCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTrackSegmentsForDisplay_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_artworkName_toElementsOfSet (addedSet)
        addEBObserversOf_name_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeight_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeightUnit_toElementsOfSet (addedSet)
        addEBObserversOf_zoom_toElementsOfSet (addedSet)
        addEBObserversOf_horizontalFlip_toElementsOfSet (addedSet)
        addEBObserversOf_verticalFlip_toElementsOfSet (addedSet)
        addEBObserversOf_displayPads_toElementsOfSet (addedSet)
        addEBObserversOf_displayHoles_toElementsOfSet (addedSet)
        addEBObserversOf_displayFrontComponentNames_toElementsOfSet (addedSet)
        addEBObserversOf_displayBackComponentNames_toElementsOfSet (addedSet)
        addEBObserversOf_displayFrontTracks_toElementsOfSet (addedSet)
        addEBObserversOf_displayBackTracks_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_viaCount_toElementsOfSet (addedSet)
        addEBObserversOf_componentCount_toElementsOfSet (addedSet)
        addEBObserversOf_viaShapes_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameSegmentsCount_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameSegmentsCount_toElementsOfSet (addedSet)
        addEBObserversOf_backTrackSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backTracksSegmentsCount_toElementsOfSet (addedSet)
        addEBObserversOf_backTrackSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontTrackSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontTracksSegmentsCount_toElementsOfSet (addedSet)
        addEBObserversOf_frontTrackSegmentsForDisplay_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_artworkName : class {
  var artworkName : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_name : class {
  var name : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardWidth : class {
  var boardWidth : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardWidthUnit : class {
  var boardWidthUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardHeight : class {
  var boardHeight : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardHeightUnit : class {
  var boardHeightUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_zoom : class {
  var zoom : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_horizontalFlip : class {
  var horizontalFlip : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_verticalFlip : class {
  var verticalFlip : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_displayPads : class {
  var displayPads : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_displayHoles : class {
  var displayHoles : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_displayFrontComponentNames : class {
  var displayFrontComponentNames : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_displayBackComponentNames : class {
  var displayBackComponentNames : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_displayFrontTracks : class {
  var displayFrontTracks : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_displayBackTracks : class {
  var displayBackTracks : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_viaCount : class {
  var viaCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_componentCount : class {
  var componentCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_viaShapes : class {
  var viaShapes : EBTransientProperty_MergerViaShapeArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentNameSegments : class {
  var frontComponentNameSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentNameSegmentsCount : class {
  var frontComponentNameSegmentsCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentNameSegments : class {
  var backComponentNameSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentNameSegmentsCount : class {
  var backComponentNameSegmentsCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backTrackSegments : class {
  var backTrackSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backTracksSegmentsCount : class {
  var backTracksSegmentsCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backTrackSegmentsForDisplay : class {
  var backTrackSegmentsForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontTrackSegments : class {
  var frontTrackSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontTracksSegmentsCount : class {
  var frontTracksSegmentsCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontTrackSegmentsForDisplay : class {
  var frontTrackSegmentsForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontTracks : ReadOnlyArrayOf_BoardModelFrontTrackSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelFrontTrackSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship proxy: frontTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ToManyRelationshipProxy_BoardModelEntity_frontTracks : ToManyRelationshipReadWrite_BoardModelEntity_frontTracks {
  private var mModel : ToManyRelationshipReadWrite_BoardModelEntity_frontTracks?

  //····················································································································
  
  final func setModel (model : ToManyRelationshipReadWrite_BoardModelEntity_frontTracks?) {
    mModel = model
  }

  //····················································································································
  
  override var prop : EBProperty < [BoardModelFrontTrackSegmentEntity] > {
    get {
      return mModel?.prop ?? .noSelection
    }
  }
 
   //····················································································································
 
  override func setProp (_ value : [BoardModelFrontTrackSegmentEntity]) {
    switch self.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let array) :
      mModel?.setProp (array)
    }
  }
 
  //····················································································································

}
*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontTracks :
ToManyRelationshipReadWrite_BoardModelEntity_frontTracks, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelFrontTrackSegmentEntity> ()
  private var mValue = [BoardModelFrontTrackSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myModel.owner = nil ;
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelFrontTrackSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myModel.setProp (owner)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBProperty < [BoardModelFrontTrackSegmentEntity] > {
    get {
      return .singleSelection (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelFrontTrackSegmentEntity]) { mValue = value }

  var propval : [BoardModelFrontTrackSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelFrontTrackSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelFrontTrackSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelFrontTrackSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backTracks : ReadOnlyArrayOf_BoardModelBackTrackSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelBackTrackSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship proxy: backTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ToManyRelationshipProxy_BoardModelEntity_backTracks : ToManyRelationshipReadWrite_BoardModelEntity_backTracks {
  private var mModel : ToManyRelationshipReadWrite_BoardModelEntity_backTracks?

  //····················································································································
  
  final func setModel (model : ToManyRelationshipReadWrite_BoardModelEntity_backTracks?) {
    mModel = model
  }

  //····················································································································
  
  override var prop : EBProperty < [BoardModelBackTrackSegmentEntity] > {
    get {
      return mModel?.prop ?? .noSelection
    }
  }
 
   //····················································································································
 
  override func setProp (_ value : [BoardModelBackTrackSegmentEntity]) {
    switch self.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let array) :
      mModel?.setProp (array)
    }
  }
 
  //····················································································································

}
*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backTracks :
ToManyRelationshipReadWrite_BoardModelEntity_backTracks, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelBackTrackSegmentEntity> ()
  private var mValue = [BoardModelBackTrackSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myModel.owner = nil ;
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelBackTrackSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myModel.setProp (owner)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBProperty < [BoardModelBackTrackSegmentEntity] > {
    get {
      return .singleSelection (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelBackTrackSegmentEntity]) { mValue = value }

  var propval : [BoardModelBackTrackSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelBackTrackSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelBackTrackSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelBackTrackSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_vias : ReadOnlyArrayOf_BoardModelViaEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelViaEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship proxy: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ToManyRelationshipProxy_BoardModelEntity_vias : ToManyRelationshipReadWrite_BoardModelEntity_vias {
  private var mModel : ToManyRelationshipReadWrite_BoardModelEntity_vias?

  //····················································································································
  
  final func setModel (model : ToManyRelationshipReadWrite_BoardModelEntity_vias?) {
    mModel = model
  }

  //····················································································································
  
  override var prop : EBProperty < [BoardModelViaEntity] > {
    get {
      return mModel?.prop ?? .noSelection
    }
  }
 
   //····················································································································
 
  override func setProp (_ value : [BoardModelViaEntity]) {
    switch self.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let array) :
      mModel?.setProp (array)
    }
  }
 
  //····················································································································

}
*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_vias :
ToManyRelationshipReadWrite_BoardModelEntity_vias, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelViaEntity> ()
  private var mValue = [BoardModelViaEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myModel.owner = nil ;
        }
        removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelViaEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myModel.setProp (owner)
        }
        addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBProperty < [BoardModelViaEntity] > {
    get {
      return .singleSelection (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelViaEntity]) { mValue = value }

  var propval : [BoardModelViaEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelViaEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelViaEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelViaEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: packages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_packages : ReadOnlyArrayOf_BoardModelPackageEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelPackageEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship proxy: packages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ToManyRelationshipProxy_BoardModelEntity_packages : ToManyRelationshipReadWrite_BoardModelEntity_packages {
  private var mModel : ToManyRelationshipReadWrite_BoardModelEntity_packages?

  //····················································································································
  
  final func setModel (model : ToManyRelationshipReadWrite_BoardModelEntity_packages?) {
    mModel = model
  }

  //····················································································································
  
  override var prop : EBProperty < [BoardModelPackageEntity] > {
    get {
      return mModel?.prop ?? .noSelection
    }
  }
 
   //····················································································································
 
  override func setProp (_ value : [BoardModelPackageEntity]) {
    switch self.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let array) :
      mModel?.setProp (array)
    }
  }
 
  //····················································································································

}
*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: packages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_packages :
ToManyRelationshipReadWrite_BoardModelEntity_packages, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelPackageEntity> ()
  private var mValue = [BoardModelPackageEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myModel.owner = nil ;
        }
        removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_name_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padRotation_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_side_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelPackageEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myModel.setProp (owner)
        }
        addEBObserversOf_backComponentNameSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentNameSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_name_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padRotation_toElementsOfSet (addedObjectSet)
        addEBObserversOf_side_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBProperty < [BoardModelPackageEntity] > {
    get {
      return .singleSelection (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelPackageEntity]) { mValue = value }

  var propval : [BoardModelPackageEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelPackageEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelPackageEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelPackageEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: myArtwork
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_BoardModelEntity_myArtwork : EBAbstractProperty {
  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : BoardModelEntity? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : MergerRootEntity? {
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.boardModels.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          unwrappedValue.boardModels.add (unwrappedOwner)
        }
      //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : MergerRootEntity? { get { return mValue } }

  var prop : EBProperty <MergerRootEntity?> { get { return .singleSelection (mValue) } }

  func setProp (_ value : MergerRootEntity?) { mValue = value }

  //····················································································································

  func performUndo (_ oldValue : MergerRootEntity?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MergerRootEntity) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : MergerRootEntity) {
    mValue = object
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardModelEntity : EBManagedObject, BoardModelEntity_artworkName, BoardModelEntity_name, BoardModelEntity_boardWidth, BoardModelEntity_boardWidthUnit, BoardModelEntity_boardHeight, BoardModelEntity_boardHeightUnit, BoardModelEntity_zoom, BoardModelEntity_horizontalFlip, BoardModelEntity_verticalFlip, BoardModelEntity_displayPads, BoardModelEntity_displayHoles, BoardModelEntity_displayFrontComponentNames, BoardModelEntity_displayBackComponentNames, BoardModelEntity_displayFrontTracks, BoardModelEntity_displayBackTracks, BoardModelEntity_viaCount, BoardModelEntity_componentCount, BoardModelEntity_viaShapes, BoardModelEntity_frontComponentNameSegments, BoardModelEntity_frontComponentNameSegmentsCount, BoardModelEntity_backComponentNameSegments, BoardModelEntity_backComponentNameSegmentsCount, BoardModelEntity_backTrackSegments, BoardModelEntity_backTracksSegmentsCount, BoardModelEntity_backTrackSegmentsForDisplay, BoardModelEntity_frontTrackSegments, BoardModelEntity_frontTracksSegmentsCount, BoardModelEntity_frontTrackSegmentsForDisplay
{

  //····················································································································
  //    Properties
  //····················································································································

  var artworkName = EBStoredProperty_String ("")

  var name = EBStoredProperty_String ("")

  var boardWidth = EBStoredProperty_Int (0)

  var boardWidthUnit = EBStoredProperty_Int (0)

  var boardHeight = EBStoredProperty_Int (0)

  var boardHeightUnit = EBStoredProperty_Int (0)

  var zoom = EBStoredProperty_Int (100)

  var horizontalFlip = EBStoredProperty_Bool (false)

  var verticalFlip = EBStoredProperty_Bool (false)

  var displayPads = EBStoredProperty_Bool (true)

  var displayHoles = EBStoredProperty_Bool (true)

  var displayFrontComponentNames = EBStoredProperty_Bool (true)

  var displayBackComponentNames = EBStoredProperty_Bool (true)

  var displayFrontTracks = EBStoredProperty_Bool (true)

  var displayBackTracks = EBStoredProperty_Bool (true)

  //····················································································································
  //    Transient properties
  //····················································································································

  var viaCount = EBTransientProperty_Int ()
  var componentCount = EBTransientProperty_Int ()
  var viaShapes = EBTransientProperty_MergerViaShapeArray ()
  var frontComponentNameSegments = EBTransientProperty_MergerSegmentArray ()
  var frontComponentNameSegmentsCount = EBTransientProperty_Int ()
  var backComponentNameSegments = EBTransientProperty_MergerSegmentArray ()
  var backComponentNameSegmentsCount = EBTransientProperty_Int ()
  var backTrackSegments = EBTransientProperty_MergerSegmentArray ()
  var backTracksSegmentsCount = EBTransientProperty_Int ()
  var backTrackSegmentsForDisplay = EBTransientProperty_MergerSegmentArray ()
  var frontTrackSegments = EBTransientProperty_MergerSegmentArray ()
  var frontTracksSegmentsCount = EBTransientProperty_Int ()
  var frontTrackSegmentsForDisplay = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //    Relationships
  //····················································································································

  var frontTracks = ToManyRelationship_BoardModelEntity_frontTracks ()
  var backTracks = ToManyRelationship_BoardModelEntity_backTracks ()
  var vias = ToManyRelationship_BoardModelEntity_vias ()
  var packages = ToManyRelationship_BoardModelEntity_packages ()
  var myArtwork = ToOneRelationship_BoardModelEntity_myArtwork ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    viaCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.vias.count.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.vias.count.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (v0)
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    componentCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.packages.count.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.packages.count.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (v0)
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    viaShapes.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.vias.prop.kind ()
        kind &= unwSelf.vias.prop.kind ()
        kind &= unwSelf.vias.prop.kind ()
        kind &= unwSelf.vias.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.vias.prop, unwSelf.vias.prop, unwSelf.vias.prop, unwSelf.vias.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1), .singleSelection (let v2), .singleSelection (let v3)) :
            return .singleSelection (compute_BoardModelEntity_viaShapes (v0, v1, v2, v3))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    frontComponentNameSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.packages.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.packages.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_BoardModelEntity_frontComponentNameSegments (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    frontComponentNameSegmentsCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontComponentNameSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.frontComponentNameSegments.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_BoardModelEntity_frontComponentNameSegmentsCount (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    backComponentNameSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.packages.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.packages.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_BoardModelEntity_backComponentNameSegments (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    backComponentNameSegmentsCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backComponentNameSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.backComponentNameSegments.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_BoardModelEntity_backComponentNameSegmentsCount (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    backTrackSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backTracks.prop.kind ()
        kind &= unwSelf.backTracks.prop.kind ()
        kind &= unwSelf.backTracks.prop.kind ()
        kind &= unwSelf.backTracks.prop.kind ()
        kind &= unwSelf.backTracks.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.backTracks.prop, unwSelf.backTracks.prop, unwSelf.backTracks.prop, unwSelf.backTracks.prop, unwSelf.backTracks.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1), .singleSelection (let v2), .singleSelection (let v3), .singleSelection (let v4)) :
            return .singleSelection (compute_BoardModelEntity_backTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    backTracksSegmentsCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backTrackSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.backTrackSegments.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_BoardModelEntity_backTracksSegmentsCount (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    backTrackSegmentsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.displayBackTracks.prop.kind ()
        kind &= unwSelf.backTrackSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.displayBackTracks.prop, unwSelf.backTrackSegments.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1)) :
            return .singleSelection (compute_BoardModelEntity_backTrackSegmentsForDisplay (v0, v1))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    frontTrackSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontTracks.prop.kind ()
        kind &= unwSelf.frontTracks.prop.kind ()
        kind &= unwSelf.frontTracks.prop.kind ()
        kind &= unwSelf.frontTracks.prop.kind ()
        kind &= unwSelf.frontTracks.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.frontTracks.prop, unwSelf.frontTracks.prop, unwSelf.frontTracks.prop, unwSelf.frontTracks.prop, unwSelf.frontTracks.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1), .singleSelection (let v2), .singleSelection (let v3), .singleSelection (let v4)) :
            return .singleSelection (compute_BoardModelEntity_frontTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    frontTracksSegmentsCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontTrackSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.frontTrackSegments.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_BoardModelEntity_frontTracksSegmentsCount (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    frontTrackSegmentsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.displayFrontTracks.prop.kind ()
        kind &= unwSelf.frontTrackSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.displayFrontTracks.prop, unwSelf.frontTrackSegments.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1)) :
            return .singleSelection (compute_BoardModelEntity_frontTrackSegmentsForDisplay (v0, v1))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  //--- Install property observers for transients
    vias.addEBObserver (viaCount)
    packages.addEBObserver (componentCount)
    vias.addEBObserverOf_x (viaShapes)
    vias.addEBObserverOf_y (viaShapes)
    vias.addEBObserverOf_holeDiameter (viaShapes)
    vias.addEBObserverOf_padDiameter (viaShapes)
    packages.addEBObserverOf_frontComponentNameSegments (frontComponentNameSegments)
    frontComponentNameSegments.addEBObserver (frontComponentNameSegmentsCount)
    packages.addEBObserverOf_backComponentNameSegments (backComponentNameSegments)
    backComponentNameSegments.addEBObserver (backComponentNameSegmentsCount)
    backTracks.addEBObserverOf_x1 (backTrackSegments)
    backTracks.addEBObserverOf_y1 (backTrackSegments)
    backTracks.addEBObserverOf_x2 (backTrackSegments)
    backTracks.addEBObserverOf_y2 (backTrackSegments)
    backTracks.addEBObserverOf_width (backTrackSegments)
    backTrackSegments.addEBObserver (backTracksSegmentsCount)
    displayBackTracks.addEBObserver (backTrackSegmentsForDisplay)
    backTrackSegments.addEBObserver (backTrackSegmentsForDisplay)
    frontTracks.addEBObserverOf_x1 (frontTrackSegments)
    frontTracks.addEBObserverOf_y1 (frontTrackSegments)
    frontTracks.addEBObserverOf_x2 (frontTrackSegments)
    frontTracks.addEBObserverOf_y2 (frontTrackSegments)
    frontTracks.addEBObserverOf_width (frontTrackSegments)
    frontTrackSegments.addEBObserver (frontTracksSegmentsCount)
    displayFrontTracks.addEBObserver (frontTrackSegmentsForDisplay)
    frontTrackSegments.addEBObserver (frontTrackSegmentsForDisplay)
  //--- Install undoers for properties
    self.artworkName.undoManager = undoManager ()
    self.name.undoManager = undoManager ()
    self.boardWidth.undoManager = undoManager ()
    self.boardWidthUnit.undoManager = undoManager ()
    self.boardHeight.undoManager = undoManager ()
    self.boardHeightUnit.undoManager = undoManager ()
    self.zoom.undoManager = undoManager ()
    self.horizontalFlip.undoManager = undoManager ()
    self.verticalFlip.undoManager = undoManager ()
    self.displayPads.undoManager = undoManager ()
    self.displayHoles.undoManager = undoManager ()
    self.displayFrontComponentNames.undoManager = undoManager ()
    self.displayBackComponentNames.undoManager = undoManager ()
    self.displayFrontTracks.undoManager = undoManager ()
    self.displayBackTracks.undoManager = undoManager ()
  //--- Install owner for relationships
    myArtwork.owner = self
    frontTracks.owner = self
    backTracks.owner = self
    vias.owner = self
    packages.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    vias.removeEBObserver (viaCount)
    packages.removeEBObserver (componentCount)
    vias.removeEBObserverOf_x (viaShapes)
    vias.removeEBObserverOf_y (viaShapes)
    vias.removeEBObserverOf_holeDiameter (viaShapes)
    vias.removeEBObserverOf_padDiameter (viaShapes)
    packages.removeEBObserverOf_frontComponentNameSegments (frontComponentNameSegments)
    frontComponentNameSegments.removeEBObserver (frontComponentNameSegmentsCount)
    packages.removeEBObserverOf_backComponentNameSegments (backComponentNameSegments)
    backComponentNameSegments.removeEBObserver (backComponentNameSegmentsCount)
    backTracks.removeEBObserverOf_x1 (backTrackSegments)
    backTracks.removeEBObserverOf_y1 (backTrackSegments)
    backTracks.removeEBObserverOf_x2 (backTrackSegments)
    backTracks.removeEBObserverOf_y2 (backTrackSegments)
    backTracks.removeEBObserverOf_width (backTrackSegments)
    backTrackSegments.removeEBObserver (backTracksSegmentsCount)
    displayBackTracks.removeEBObserver (backTrackSegmentsForDisplay)
    backTrackSegments.removeEBObserver (backTrackSegmentsForDisplay)
    frontTracks.removeEBObserverOf_x1 (frontTrackSegments)
    frontTracks.removeEBObserverOf_y1 (frontTrackSegments)
    frontTracks.removeEBObserverOf_x2 (frontTrackSegments)
    frontTracks.removeEBObserverOf_y2 (frontTrackSegments)
    frontTracks.removeEBObserverOf_width (frontTrackSegments)
    frontTrackSegments.removeEBObserver (frontTracksSegmentsCount)
    displayFrontTracks.removeEBObserver (frontTrackSegmentsForDisplay)
    frontTrackSegments.removeEBObserver (frontTrackSegmentsForDisplay)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "artworkName",
      idx:self.artworkName.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.artworkName.mObserverExplorer,
      valueExplorer:&self.artworkName.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name.mObserverExplorer,
      valueExplorer:&self.name.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidth",
      idx:self.boardWidth.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidth.mObserverExplorer,
      valueExplorer:&self.boardWidth.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidthUnit",
      idx:self.boardWidthUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidthUnit.mObserverExplorer,
      valueExplorer:&self.boardWidthUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeight",
      idx:self.boardHeight.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeight.mObserverExplorer,
      valueExplorer:&self.boardHeight.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeightUnit",
      idx:self.boardHeightUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeightUnit.mObserverExplorer,
      valueExplorer:&self.boardHeightUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom.mObserverExplorer,
      valueExplorer:&self.zoom.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalFlip",
      idx:self.horizontalFlip.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.horizontalFlip.mObserverExplorer,
      valueExplorer:&self.horizontalFlip.mValueExplorer
    )
    createEntryForPropertyNamed (
      "verticalFlip",
      idx:self.verticalFlip.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.verticalFlip.mObserverExplorer,
      valueExplorer:&self.verticalFlip.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayPads",
      idx:self.displayPads.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayPads.mObserverExplorer,
      valueExplorer:&self.displayPads.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayHoles",
      idx:self.displayHoles.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayHoles.mObserverExplorer,
      valueExplorer:&self.displayHoles.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayFrontComponentNames",
      idx:self.displayFrontComponentNames.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayFrontComponentNames.mObserverExplorer,
      valueExplorer:&self.displayFrontComponentNames.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayBackComponentNames",
      idx:self.displayBackComponentNames.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayBackComponentNames.mObserverExplorer,
      valueExplorer:&self.displayBackComponentNames.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayFrontTracks",
      idx:self.displayFrontTracks.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayFrontTracks.mObserverExplorer,
      valueExplorer:&self.displayFrontTracks.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayBackTracks",
      idx:self.displayBackTracks.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayBackTracks.mObserverExplorer,
      valueExplorer:&self.displayBackTracks.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "viaCount",
      idx:self.viaCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaCount.mObserverExplorer,
      valueExplorer:&self.viaCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentCount",
      idx:self.componentCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.componentCount.mObserverExplorer,
      valueExplorer:&self.componentCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaShapes",
      idx:self.viaShapes.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaShapes.mObserverExplorer,
      valueExplorer:&self.viaShapes.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameSegments",
      idx:self.frontComponentNameSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameSegments.mObserverExplorer,
      valueExplorer:&self.frontComponentNameSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameSegmentsCount",
      idx:self.frontComponentNameSegmentsCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameSegmentsCount.mObserverExplorer,
      valueExplorer:&self.frontComponentNameSegmentsCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameSegments",
      idx:self.backComponentNameSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameSegments.mObserverExplorer,
      valueExplorer:&self.backComponentNameSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameSegmentsCount",
      idx:self.backComponentNameSegmentsCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameSegmentsCount.mObserverExplorer,
      valueExplorer:&self.backComponentNameSegmentsCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTrackSegments",
      idx:self.backTrackSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTrackSegments.mObserverExplorer,
      valueExplorer:&self.backTrackSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTracksSegmentsCount",
      idx:self.backTracksSegmentsCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTracksSegmentsCount.mObserverExplorer,
      valueExplorer:&self.backTracksSegmentsCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTrackSegmentsForDisplay",
      idx:self.backTrackSegmentsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTrackSegmentsForDisplay.mObserverExplorer,
      valueExplorer:&self.backTrackSegmentsForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTrackSegments",
      idx:self.frontTrackSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTrackSegments.mObserverExplorer,
      valueExplorer:&self.frontTrackSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTracksSegmentsCount",
      idx:self.frontTracksSegmentsCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTracksSegmentsCount.mObserverExplorer,
      valueExplorer:&self.frontTracksSegmentsCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTrackSegmentsForDisplay",
      idx:self.frontTrackSegmentsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTrackSegmentsForDisplay.mObserverExplorer,
      valueExplorer:&self.frontTrackSegmentsForDisplay.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "frontTracks",
      idx:frontTracks.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontTracks.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backTracks",
      idx:backTracks.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backTracks.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "vias",
      idx:vias.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&vias.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "packages",
      idx:packages.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&packages.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "myArtwork",
      idx:myArtwork.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&myArtwork.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.artworkName.mObserverExplorer = nil
    self.artworkName.mValueExplorer = nil
    self.name.mObserverExplorer = nil
    self.name.mValueExplorer = nil
    self.boardWidth.mObserverExplorer = nil
    self.boardWidth.mValueExplorer = nil
    self.boardWidthUnit.mObserverExplorer = nil
    self.boardWidthUnit.mValueExplorer = nil
    self.boardHeight.mObserverExplorer = nil
    self.boardHeight.mValueExplorer = nil
    self.boardHeightUnit.mObserverExplorer = nil
    self.boardHeightUnit.mValueExplorer = nil
    self.zoom.mObserverExplorer = nil
    self.zoom.mValueExplorer = nil
    self.horizontalFlip.mObserverExplorer = nil
    self.horizontalFlip.mValueExplorer = nil
    self.verticalFlip.mObserverExplorer = nil
    self.verticalFlip.mValueExplorer = nil
    self.displayPads.mObserverExplorer = nil
    self.displayPads.mValueExplorer = nil
    self.displayHoles.mObserverExplorer = nil
    self.displayHoles.mValueExplorer = nil
    self.displayFrontComponentNames.mObserverExplorer = nil
    self.displayFrontComponentNames.mValueExplorer = nil
    self.displayBackComponentNames.mObserverExplorer = nil
    self.displayBackComponentNames.mValueExplorer = nil
    self.displayFrontTracks.mObserverExplorer = nil
    self.displayFrontTracks.mValueExplorer = nil
    self.displayBackTracks.mObserverExplorer = nil
    self.displayBackTracks.mValueExplorer = nil
    myArtwork.mObserverExplorer = nil
    myArtwork.mValueExplorer = nil
    // frontTracks.mObserverExplorer = nil
    frontTracks.mValueExplorer = nil
    // backTracks.mObserverExplorer = nil
    backTracks.mValueExplorer = nil
    // vias.mObserverExplorer = nil
    vias.mValueExplorer = nil
    // packages.mObserverExplorer = nil
    packages.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.artworkName.storeIn (dictionary: ioDictionary, forKey: "artworkName")
    self.name.storeIn (dictionary: ioDictionary, forKey: "name")
    self.boardWidth.storeIn (dictionary: ioDictionary, forKey: "boardWidth")
    self.boardWidthUnit.storeIn (dictionary: ioDictionary, forKey: "boardWidthUnit")
    self.boardHeight.storeIn (dictionary: ioDictionary, forKey: "boardHeight")
    self.boardHeightUnit.storeIn (dictionary: ioDictionary, forKey: "boardHeightUnit")
    self.zoom.storeIn (dictionary: ioDictionary, forKey: "zoom")
    self.horizontalFlip.storeIn (dictionary: ioDictionary, forKey: "horizontalFlip")
    self.verticalFlip.storeIn (dictionary: ioDictionary, forKey: "verticalFlip")
    self.displayPads.storeIn (dictionary: ioDictionary, forKey: "displayPads")
    self.displayHoles.storeIn (dictionary: ioDictionary, forKey: "displayHoles")
    self.displayFrontComponentNames.storeIn (dictionary: ioDictionary, forKey: "displayFrontComponentNames")
    self.displayBackComponentNames.storeIn (dictionary: ioDictionary, forKey: "displayBackComponentNames")
    self.displayFrontTracks.storeIn (dictionary: ioDictionary, forKey: "displayFrontTracks")
    self.displayBackTracks.storeIn (dictionary: ioDictionary, forKey: "displayBackTracks")
    store (managedObjectArray: frontTracks.propval as NSArray, relationshipName:"frontTracks", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backTracks.propval as NSArray, relationshipName:"backTracks", intoDictionary: ioDictionary) ;
    store (managedObjectArray: vias.propval as NSArray, relationshipName:"vias", intoDictionary: ioDictionary) ;
    store (managedObjectArray: packages.propval as NSArray, relationshipName:"packages", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.artworkName.readFrom (dictionary: inDictionary, forKey:"artworkName")
    self.name.readFrom (dictionary: inDictionary, forKey:"name")
    self.boardWidth.readFrom (dictionary: inDictionary, forKey:"boardWidth")
    self.boardWidthUnit.readFrom (dictionary: inDictionary, forKey:"boardWidthUnit")
    self.boardHeight.readFrom (dictionary: inDictionary, forKey:"boardHeight")
    self.boardHeightUnit.readFrom (dictionary: inDictionary, forKey:"boardHeightUnit")
    self.zoom.readFrom (dictionary: inDictionary, forKey:"zoom")
    self.horizontalFlip.readFrom (dictionary: inDictionary, forKey:"horizontalFlip")
    self.verticalFlip.readFrom (dictionary: inDictionary, forKey:"verticalFlip")
    self.displayPads.readFrom (dictionary: inDictionary, forKey:"displayPads")
    self.displayHoles.readFrom (dictionary: inDictionary, forKey:"displayHoles")
    self.displayFrontComponentNames.readFrom (dictionary: inDictionary, forKey:"displayFrontComponentNames")
    self.displayBackComponentNames.readFrom (dictionary: inDictionary, forKey:"displayBackComponentNames")
    self.displayFrontTracks.readFrom (dictionary: inDictionary, forKey:"displayFrontTracks")
    self.displayBackTracks.readFrom (dictionary: inDictionary, forKey:"displayBackTracks")
    frontTracks.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelFrontTrackSegmentEntity])
    backTracks.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelBackTrackSegmentEntity])
    vias.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "vias",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelViaEntity])
    packages.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "packages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelPackageEntity])
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    frontTracks.setProp (Array ())
    backTracks.setProp (Array ())
    vias.setProp (Array ())
    packages.setProp (Array ())
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
    myArtwork.setProp (nil)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in frontTracks.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in backTracks.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in vias.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in packages.propval {
      objects.append (managedObject)
    }
    if let object = myArtwork.propval {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

