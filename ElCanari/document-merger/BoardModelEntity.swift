//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardModelEntity : ReadOnlyAbstractArrayProperty <BoardModelEntity> {

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_artworkName.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.artworkName.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_artworkName.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.artworkName.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_artworkName {
        managedObject.artworkName.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_artworkName {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.artworkName.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_name.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.name.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_name.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.name.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_name {
        managedObject.name.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_name {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidth' stored property
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidth.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardWidth.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidth.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardWidth.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidth_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidth {
        managedObject.boardWidth.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidth_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidth.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidthUnit.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidthUnit.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidthUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidthUnit {
        managedObject.boardWidthUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidthUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidthUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeight' stored property
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeight.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardHeight.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeight.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardHeight.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeight_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeight {
        managedObject.boardHeight.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeight_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardHeight {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeight.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeightUnit.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeightUnit.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeightUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeightUnit {
        managedObject.boardHeightUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeightUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardHeightUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeightUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'trackCount' transient property
  //····················································································································

  private var mObserversOf_trackCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_trackCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_trackCount.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.trackCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_trackCount.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.trackCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_trackCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_trackCount {
        managedObject.trackCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_trackCount {
        managedObject.trackCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaCount' transient property
  //····················································································································

  private var mObserversOf_viaCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaCount.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.viaCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaCount.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.viaCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaCount {
        managedObject.viaCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaCount {
        managedObject.viaCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentCount' transient property
  //····················································································································

  private var mObserversOf_componentCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_componentCount.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.componentCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_componentCount.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.componentCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_componentCount {
        managedObject.componentCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_componentCount {
        managedObject.componentCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_BoardModelEntity : ReadOnlyArrayOf_BoardModelEntity {

  var readModelFunction : Optional<() -> EBProperty < [BoardModelEntity] > >

  private var prop_cache : EBProperty < [BoardModelEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <BoardModelEntity> ()

  override var prop : EBProperty < [BoardModelEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <BoardModelEntity>
        switch prop_cache! {
        case .multipleSelection, .noSelection :
          newSet = Set <BoardModelEntity> ()
        case .singleSelection (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
        removeEBObserversOf_artworkName_fromElementsOfSet (removedSet)
        removeEBObserversOf_name_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeight_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeightUnit_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
        addEBObserversOf_artworkName_toElementsOfSet (addedSet)
        addEBObserversOf_name_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeight_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeightUnit_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_artworkName : class {
  var artworkName : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_name : class {
  var name : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardWidth : class {
  var boardWidth : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardWidthUnit : class {
  var boardWidthUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardHeight : class {
  var boardHeight : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardHeightUnit : class {
  var boardHeightUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_trackCount : class {
  var trackCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_viaCount : class {
  var viaCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_componentCount : class {
  var componentCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: tracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_tracks : ReadOnlyArrayOf_BoardModelTrackSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelTrackSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship proxy: tracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ToManyRelationshipProxy_BoardModelEntity_tracks : ToManyRelationshipReadWrite_BoardModelEntity_tracks {
  private var mModel : ToManyRelationshipReadWrite_BoardModelEntity_tracks?

  //····················································································································
  
  final func setModel (model : ToManyRelationshipReadWrite_BoardModelEntity_tracks?) {
    mModel = model
  }

  //····················································································································
  
  override var prop : EBProperty < [BoardModelTrackSegmentEntity] > {
    get {
      return mModel?.prop ?? .noSelection
    }
  }
 
   //····················································································································
 
  override func setProp (_ value : [BoardModelTrackSegmentEntity]) {
    switch self.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let array) :
      mModel?.setProp (array)
    }
  }
 
  //····················································································································

}
*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: tracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_tracks :
ToManyRelationshipReadWrite_BoardModelEntity_tracks, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelTrackSegmentEntity> ()
  private var mValue = [BoardModelTrackSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myModel.owner = nil ;
        }
        removeEBObserversOf_side_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelTrackSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myModel.setProp (owner)
        }
        addEBObserversOf_side_toElementsOfSet (addedObjectSet)
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBProperty < [BoardModelTrackSegmentEntity] > {
    get {
      return .singleSelection (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelTrackSegmentEntity]) { mValue = value }

  var propval : [BoardModelTrackSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelTrackSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelTrackSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelTrackSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_vias : ReadOnlyArrayOf_BoardModelViaEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelViaEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship proxy: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ToManyRelationshipProxy_BoardModelEntity_vias : ToManyRelationshipReadWrite_BoardModelEntity_vias {
  private var mModel : ToManyRelationshipReadWrite_BoardModelEntity_vias?

  //····················································································································
  
  final func setModel (model : ToManyRelationshipReadWrite_BoardModelEntity_vias?) {
    mModel = model
  }

  //····················································································································
  
  override var prop : EBProperty < [BoardModelViaEntity] > {
    get {
      return mModel?.prop ?? .noSelection
    }
  }
 
   //····················································································································
 
  override func setProp (_ value : [BoardModelViaEntity]) {
    switch self.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let array) :
      mModel?.setProp (array)
    }
  }
 
  //····················································································································

}
*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_vias :
ToManyRelationshipReadWrite_BoardModelEntity_vias, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelViaEntity> ()
  private var mValue = [BoardModelViaEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myModel.owner = nil ;
        }
        removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viaShape_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelViaEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myModel.setProp (owner)
        }
        addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viaShape_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBProperty < [BoardModelViaEntity] > {
    get {
      return .singleSelection (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelViaEntity]) { mValue = value }

  var propval : [BoardModelViaEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelViaEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelViaEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelViaEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: packages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_packages : ReadOnlyArrayOf_BoardModelPackageEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelPackageEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship proxy: packages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ToManyRelationshipProxy_BoardModelEntity_packages : ToManyRelationshipReadWrite_BoardModelEntity_packages {
  private var mModel : ToManyRelationshipReadWrite_BoardModelEntity_packages?

  //····················································································································
  
  final func setModel (model : ToManyRelationshipReadWrite_BoardModelEntity_packages?) {
    mModel = model
  }

  //····················································································································
  
  override var prop : EBProperty < [BoardModelPackageEntity] > {
    get {
      return mModel?.prop ?? .noSelection
    }
  }
 
   //····················································································································
 
  override func setProp (_ value : [BoardModelPackageEntity]) {
    switch self.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let array) :
      mModel?.setProp (array)
    }
  }
 
  //····················································································································

}
*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: packages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_packages :
ToManyRelationshipReadWrite_BoardModelEntity_packages, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelPackageEntity> ()
  private var mValue = [BoardModelPackageEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myModel.owner = nil ;
        }
        removeEBObserversOf_name_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padCount_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padRotation_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelPackageEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myModel.setProp (owner)
        }
        addEBObserversOf_name_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padCount_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padRotation_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBProperty < [BoardModelPackageEntity] > {
    get {
      return .singleSelection (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelPackageEntity]) { mValue = value }

  var propval : [BoardModelPackageEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelPackageEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelPackageEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelPackageEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: myArtwork
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_BoardModelEntity_myArtwork : EBAbstractProperty {
  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : BoardModelEntity? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : MergerRootEntity? {
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.boardModels.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          unwrappedValue.boardModels.add (unwrappedOwner)
        }
      //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : MergerRootEntity? { get { return mValue } }

  var prop : EBProperty <MergerRootEntity?> { get { return .singleSelection (mValue) } }

  func setProp (_ value : MergerRootEntity?) { mValue = value }

  //····················································································································

  func performUndo (_ oldValue : MergerRootEntity?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MergerRootEntity) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : MergerRootEntity) {
    mValue = object
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardModelEntity : EBManagedObject, BoardModelEntity_artworkName, BoardModelEntity_name, BoardModelEntity_boardWidth, BoardModelEntity_boardWidthUnit, BoardModelEntity_boardHeight, BoardModelEntity_boardHeightUnit, BoardModelEntity_trackCount, BoardModelEntity_viaCount, BoardModelEntity_componentCount
{

  //····················································································································
  //    Properties
  //····················································································································

  var artworkName = EBStoredProperty_String ("")

  var name = EBStoredProperty_String ("")

  var boardWidth = EBStoredProperty_Int (0)

  var boardWidthUnit = EBStoredProperty_Int (0)

  var boardHeight = EBStoredProperty_Int (0)

  var boardHeightUnit = EBStoredProperty_Int (0)

  //····················································································································
  //    Transient properties
  //····················································································································

  var trackCount = EBTransientProperty_Int ()
  var viaCount = EBTransientProperty_Int ()
  var componentCount = EBTransientProperty_Int ()

  //····················································································································
  //    Relationships
  //····················································································································

  var tracks = ToManyRelationship_BoardModelEntity_tracks ()
  var vias = ToManyRelationship_BoardModelEntity_vias ()
  var packages = ToManyRelationship_BoardModelEntity_packages ()
  var myArtwork = ToOneRelationship_BoardModelEntity_myArtwork ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    trackCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.tracks.count.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.tracks.count.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_BoardModelEntity_trackCount (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    viaCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.vias.count.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.vias.count.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_BoardModelEntity_viaCount (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    componentCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.packages.count.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.packages.count.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_BoardModelEntity_componentCount (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  //--- Install property observers for transients
    tracks.addEBObserver (trackCount)
    vias.addEBObserver (viaCount)
    packages.addEBObserver (componentCount)
  //--- Install undoers for properties
    self.artworkName.undoManager = undoManager ()
    self.name.undoManager = undoManager ()
    self.boardWidth.undoManager = undoManager ()
    self.boardWidthUnit.undoManager = undoManager ()
    self.boardHeight.undoManager = undoManager ()
    self.boardHeightUnit.undoManager = undoManager ()
  //--- Install owner for relationships
    myArtwork.owner = self
    tracks.owner = self
    vias.owner = self
    packages.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    tracks.removeEBObserver (trackCount)
    vias.removeEBObserver (viaCount)
    packages.removeEBObserver (componentCount)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "artworkName",
      idx:self.artworkName.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.artworkName.mObserverExplorer,
      valueExplorer:&self.artworkName.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name.mObserverExplorer,
      valueExplorer:&self.name.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidth",
      idx:self.boardWidth.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidth.mObserverExplorer,
      valueExplorer:&self.boardWidth.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidthUnit",
      idx:self.boardWidthUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidthUnit.mObserverExplorer,
      valueExplorer:&self.boardWidthUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeight",
      idx:self.boardHeight.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeight.mObserverExplorer,
      valueExplorer:&self.boardHeight.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeightUnit",
      idx:self.boardHeightUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeightUnit.mObserverExplorer,
      valueExplorer:&self.boardHeightUnit.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "tracks",
      idx:tracks.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&tracks.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "vias",
      idx:vias.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&vias.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "packages",
      idx:packages.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&packages.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "myArtwork",
      idx:myArtwork.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&myArtwork.mValueExplorer
    )
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.artworkName.mObserverExplorer = nil
    self.artworkName.mValueExplorer = nil
    self.name.mObserverExplorer = nil
    self.name.mValueExplorer = nil
    self.boardWidth.mObserverExplorer = nil
    self.boardWidth.mValueExplorer = nil
    self.boardWidthUnit.mObserverExplorer = nil
    self.boardWidthUnit.mValueExplorer = nil
    self.boardHeight.mObserverExplorer = nil
    self.boardHeight.mValueExplorer = nil
    self.boardHeightUnit.mObserverExplorer = nil
    self.boardHeightUnit.mValueExplorer = nil
    myArtwork.mObserverExplorer = nil
    myArtwork.mValueExplorer = nil
    // tracks.mObserverExplorer = nil
    tracks.mValueExplorer = nil
    // vias.mObserverExplorer = nil
    vias.mValueExplorer = nil
    // packages.mObserverExplorer = nil
    packages.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.artworkName.storeIn (dictionary: ioDictionary, forKey: "artworkName")
    self.name.storeIn (dictionary: ioDictionary, forKey: "name")
    self.boardWidth.storeIn (dictionary: ioDictionary, forKey: "boardWidth")
    self.boardWidthUnit.storeIn (dictionary: ioDictionary, forKey: "boardWidthUnit")
    self.boardHeight.storeIn (dictionary: ioDictionary, forKey: "boardHeight")
    self.boardHeightUnit.storeIn (dictionary: ioDictionary, forKey: "boardHeightUnit")
    store (managedObjectArray: tracks.propval as NSArray, relationshipName:"tracks", intoDictionary: ioDictionary) ;
    store (managedObjectArray: vias.propval as NSArray, relationshipName:"vias", intoDictionary: ioDictionary) ;
    store (managedObjectArray: packages.propval as NSArray, relationshipName:"packages", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.artworkName.readFrom (dictionary: inDictionary, forKey:"artworkName")
    self.name.readFrom (dictionary: inDictionary, forKey:"name")
    self.boardWidth.readFrom (dictionary: inDictionary, forKey:"boardWidth")
    self.boardWidthUnit.readFrom (dictionary: inDictionary, forKey:"boardWidthUnit")
    self.boardHeight.readFrom (dictionary: inDictionary, forKey:"boardHeight")
    self.boardHeightUnit.readFrom (dictionary: inDictionary, forKey:"boardHeightUnit")
    tracks.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "tracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelTrackSegmentEntity])
    vias.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "vias",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelViaEntity])
    packages.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "packages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelPackageEntity])
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    tracks.setProp (Array ())
    vias.setProp (Array ())
    packages.setProp (Array ())
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
    myArtwork.setProp (nil)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in tracks.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in vias.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in packages.propval {
      objects.append (managedObject)
    }
    if let object = myArtwork.propval {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

