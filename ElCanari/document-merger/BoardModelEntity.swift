//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardModelEntity : EBManagedObject,
  BoardModelEntity_artworkName,
  BoardModelEntity_name,
  BoardModelEntity_boardWidth,
  BoardModelEntity_boardWidthUnit,
  BoardModelEntity_boardHeight,
  BoardModelEntity_boardHeightUnit,
  BoardModelEntity_zoom,
  BoardModelEntity_boardLimitWidth,
  BoardModelEntity_boardLimitWidthUnit,
  BoardModelEntity_frontLegendTextsSegments,
  BoardModelEntity_frontLegendTextsSegmentsForDisplay,
  BoardModelEntity_frontLayoutTextsSegments,
  BoardModelEntity_frontLayoutTextsSegmentsForDisplay,
  BoardModelEntity_backLegendTextsSegments,
  BoardModelEntity_backLegendTextsSegmentsForDisplay,
  BoardModelEntity_backLayoutTextsSegments,
  BoardModelEntity_backLayoutTextsSegmentsForDisplay,
  BoardModelEntity_padsHoles,
  BoardModelEntity_viasHoles,
  BoardModelEntity_holes,
  BoardModelEntity_holesForDisplay,
  BoardModelEntity_viaShapes,
  BoardModelEntity_viaShapesForDisplay,
  BoardModelEntity_frontPads,
  BoardModelEntity_frontPadsForDisplay,
  BoardModelEntity_backPads,
  BoardModelEntity_backPadsForDisplay,
  BoardModelEntity_boardLimits,
  BoardModelEntity_backComponentNameSegments,
  BoardModelEntity_backComponentNameSegmentsCount,
  BoardModelEntity_backComponentNameSegmentsForDisplay,
  BoardModelEntity_frontComponentNameSegments,
  BoardModelEntity_frontComponentNameSegmentsCount,
  BoardModelEntity_frontComponentNameSegmentsForDisplay,
  BoardModelEntity_frontComponentValueSegments,
  BoardModelEntity_frontComponentValueSegmentsCount,
  BoardModelEntity_frontComponentValuesForDisplay,
  BoardModelEntity_backComponentValueSegments,
  BoardModelEntity_backComponentValueSegmentsCount,
  BoardModelEntity_backComponentValuesForDisplay,
  BoardModelEntity_backTrackSegments,
  BoardModelEntity_backTracksSegmentsCount,
  BoardModelEntity_backTrackSegmentsForDisplay,
  BoardModelEntity_frontTrackSegments,
  BoardModelEntity_frontTracksSegmentsCount,
  BoardModelEntity_frontTrackSegmentsForDisplay,
  BoardModelEntity_frontPackagesSegments,
  BoardModelEntity_frontPackageSegmentsCount,
  BoardModelEntity_frontPackagesSegmentsForDisplay,
  BoardModelEntity_backPackagesSegments,
  BoardModelEntity_backPackageSegmentsCount,
  BoardModelEntity_backPackagesSegmentsForDisplay {

  //····················································································································
  //   Accessing artworkName stored property
  //····················································································································

  var artworkName_value : String {
    get {
      return self.artworkName.propval
    }
    set {
      self.artworkName.setProp (newValue)
    }
  }

  var artworkName_prop : EBSelection <String> {
    get {
      return self.artworkName.prop
    }
  }

  //····················································································································
  //   Accessing name stored property
  //····················································································································

  var name_value : String {
    get {
      return self.name.propval
    }
    set {
      self.name.setProp (newValue)
    }
  }

  var name_prop : EBSelection <String> {
    get {
      return self.name.prop
    }
  }

  //····················································································································
  //   Accessing boardWidth stored property
  //····················································································································

  var boardWidth_value : Int {
    get {
      return self.boardWidth.propval
    }
    set {
      self.boardWidth.setProp (newValue)
    }
  }

  var boardWidth_prop : EBSelection <Int> {
    get {
      return self.boardWidth.prop
    }
  }

  //····················································································································
  //   Accessing boardWidthUnit stored property
  //····················································································································

  var boardWidthUnit_value : Int {
    get {
      return self.boardWidthUnit.propval
    }
    set {
      self.boardWidthUnit.setProp (newValue)
    }
  }

  var boardWidthUnit_prop : EBSelection <Int> {
    get {
      return self.boardWidthUnit.prop
    }
  }

  //····················································································································
  //   Accessing boardHeight stored property
  //····················································································································

  var boardHeight_value : Int {
    get {
      return self.boardHeight.propval
    }
    set {
      self.boardHeight.setProp (newValue)
    }
  }

  var boardHeight_prop : EBSelection <Int> {
    get {
      return self.boardHeight.prop
    }
  }

  //····················································································································
  //   Accessing boardHeightUnit stored property
  //····················································································································

  var boardHeightUnit_value : Int {
    get {
      return self.boardHeightUnit.propval
    }
    set {
      self.boardHeightUnit.setProp (newValue)
    }
  }

  var boardHeightUnit_prop : EBSelection <Int> {
    get {
      return self.boardHeightUnit.prop
    }
  }

  //····················································································································
  //   Accessing zoom stored property
  //····················································································································

  var zoom_value : Int {
    get {
      return self.zoom.propval
    }
    set {
      self.zoom.setProp (newValue)
    }
  }

  var zoom_prop : EBSelection <Int> {
    get {
      return self.zoom.prop
    }
  }

  //····················································································································
  //   Accessing boardLimitWidth stored property
  //····················································································································

  var boardLimitWidth_value : Int {
    get {
      return self.boardLimitWidth.propval
    }
    set {
      self.boardLimitWidth.setProp (newValue)
    }
  }

  var boardLimitWidth_prop : EBSelection <Int> {
    get {
      return self.boardLimitWidth.prop
    }
  }

  //····················································································································
  //   Accessing boardLimitWidthUnit stored property
  //····················································································································

  var boardLimitWidthUnit_value : Int {
    get {
      return self.boardLimitWidthUnit.propval
    }
    set {
      self.boardLimitWidthUnit.setProp (newValue)
    }
  }

  var boardLimitWidthUnit_prop : EBSelection <Int> {
    get {
      return self.boardLimitWidthUnit.prop
    }
  }

  //····················································································································
  //   Accessing frontLegendTextsSegments transient property
  //····················································································································

  var frontLegendTextsSegments_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLegendTextsSegments.prop
    }
  }

  //····················································································································
  //   Accessing frontLegendTextsSegmentsForDisplay transient property
  //····················································································································

  var frontLegendTextsSegmentsForDisplay_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLegendTextsSegmentsForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing frontLayoutTextsSegments transient property
  //····················································································································

  var frontLayoutTextsSegments_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLayoutTextsSegments.prop
    }
  }

  //····················································································································
  //   Accessing frontLayoutTextsSegmentsForDisplay transient property
  //····················································································································

  var frontLayoutTextsSegmentsForDisplay_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLayoutTextsSegmentsForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing backLegendTextsSegments transient property
  //····················································································································

  var backLegendTextsSegments_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.backLegendTextsSegments.prop
    }
  }

  //····················································································································
  //   Accessing backLegendTextsSegmentsForDisplay transient property
  //····················································································································

  var backLegendTextsSegmentsForDisplay_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.backLegendTextsSegmentsForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing backLayoutTextsSegments transient property
  //····················································································································

  var backLayoutTextsSegments_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.backLayoutTextsSegments.prop
    }
  }

  //····················································································································
  //   Accessing backLayoutTextsSegmentsForDisplay transient property
  //····················································································································

  var backLayoutTextsSegmentsForDisplay_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.backLayoutTextsSegmentsForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing padsHoles transient property
  //····················································································································

  var padsHoles_prop : EBSelection <MergerHoleArray> {
    get {
      return self.padsHoles.prop
    }
  }

  //····················································································································
  //   Accessing viasHoles transient property
  //····················································································································

  var viasHoles_prop : EBSelection <MergerHoleArray> {
    get {
      return self.viasHoles.prop
    }
  }

  //····················································································································
  //   Accessing holes transient property
  //····················································································································

  var holes_prop : EBSelection <MergerHoleArray> {
    get {
      return self.holes.prop
    }
  }

  //····················································································································
  //   Accessing holesForDisplay transient property
  //····················································································································

  var holesForDisplay_prop : EBSelection <MergerHoleArray> {
    get {
      return self.holesForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing viaShapes transient property
  //····················································································································

  var viaShapes_prop : EBSelection <MergerViaShapeArray> {
    get {
      return self.viaShapes.prop
    }
  }

  //····················································································································
  //   Accessing viaShapesForDisplay transient property
  //····················································································································

  var viaShapesForDisplay_prop : EBSelection <MergerViaShapeArray> {
    get {
      return self.viaShapesForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing frontPads transient property
  //····················································································································

  var frontPads_prop : EBSelection <MergerPadArray> {
    get {
      return self.frontPads.prop
    }
  }

  //····················································································································
  //   Accessing frontPadsForDisplay transient property
  //····················································································································

  var frontPadsForDisplay_prop : EBSelection <MergerPadArray> {
    get {
      return self.frontPadsForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing backPads transient property
  //····················································································································

  var backPads_prop : EBSelection <MergerPadArray> {
    get {
      return self.backPads.prop
    }
  }

  //····················································································································
  //   Accessing backPadsForDisplay transient property
  //····················································································································

  var backPadsForDisplay_prop : EBSelection <MergerPadArray> {
    get {
      return self.backPadsForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing boardLimits transient property
  //····················································································································

  var boardLimits_prop : EBSelection <MergerBoardLimits> {
    get {
      return self.boardLimits.prop
    }
  }

  //····················································································································
  //   Accessing backComponentNameSegments transient property
  //····················································································································

  var backComponentNameSegments_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.backComponentNameSegments.prop
    }
  }

  //····················································································································
  //   Accessing backComponentNameSegmentsCount transient property
  //····················································································································

  var backComponentNameSegmentsCount_prop : EBSelection <Int> {
    get {
      return self.backComponentNameSegmentsCount.prop
    }
  }

  //····················································································································
  //   Accessing backComponentNameSegmentsForDisplay transient property
  //····················································································································

  var backComponentNameSegmentsForDisplay_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.backComponentNameSegmentsForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing frontComponentNameSegments transient property
  //····················································································································

  var frontComponentNameSegments_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.frontComponentNameSegments.prop
    }
  }

  //····················································································································
  //   Accessing frontComponentNameSegmentsCount transient property
  //····················································································································

  var frontComponentNameSegmentsCount_prop : EBSelection <Int> {
    get {
      return self.frontComponentNameSegmentsCount.prop
    }
  }

  //····················································································································
  //   Accessing frontComponentNameSegmentsForDisplay transient property
  //····················································································································

  var frontComponentNameSegmentsForDisplay_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.frontComponentNameSegmentsForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing frontComponentValueSegments transient property
  //····················································································································

  var frontComponentValueSegments_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.frontComponentValueSegments.prop
    }
  }

  //····················································································································
  //   Accessing frontComponentValueSegmentsCount transient property
  //····················································································································

  var frontComponentValueSegmentsCount_prop : EBSelection <Int> {
    get {
      return self.frontComponentValueSegmentsCount.prop
    }
  }

  //····················································································································
  //   Accessing frontComponentValuesForDisplay transient property
  //····················································································································

  var frontComponentValuesForDisplay_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.frontComponentValuesForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing backComponentValueSegments transient property
  //····················································································································

  var backComponentValueSegments_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.backComponentValueSegments.prop
    }
  }

  //····················································································································
  //   Accessing backComponentValueSegmentsCount transient property
  //····················································································································

  var backComponentValueSegmentsCount_prop : EBSelection <Int> {
    get {
      return self.backComponentValueSegmentsCount.prop
    }
  }

  //····················································································································
  //   Accessing backComponentValuesForDisplay transient property
  //····················································································································

  var backComponentValuesForDisplay_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.backComponentValuesForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing backTrackSegments transient property
  //····················································································································

  var backTrackSegments_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.backTrackSegments.prop
    }
  }

  //····················································································································
  //   Accessing backTracksSegmentsCount transient property
  //····················································································································

  var backTracksSegmentsCount_prop : EBSelection <Int> {
    get {
      return self.backTracksSegmentsCount.prop
    }
  }

  //····················································································································
  //   Accessing backTrackSegmentsForDisplay transient property
  //····················································································································

  var backTrackSegmentsForDisplay_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.backTrackSegmentsForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing frontTrackSegments transient property
  //····················································································································

  var frontTrackSegments_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.frontTrackSegments.prop
    }
  }

  //····················································································································
  //   Accessing frontTracksSegmentsCount transient property
  //····················································································································

  var frontTracksSegmentsCount_prop : EBSelection <Int> {
    get {
      return self.frontTracksSegmentsCount.prop
    }
  }

  //····················································································································
  //   Accessing frontTrackSegmentsForDisplay transient property
  //····················································································································

  var frontTrackSegmentsForDisplay_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.frontTrackSegmentsForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing frontPackagesSegments transient property
  //····················································································································

  var frontPackagesSegments_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.frontPackagesSegments.prop
    }
  }

  //····················································································································
  //   Accessing frontPackageSegmentsCount transient property
  //····················································································································

  var frontPackageSegmentsCount_prop : EBSelection <Int> {
    get {
      return self.frontPackageSegmentsCount.prop
    }
  }

  //····················································································································
  //   Accessing frontPackagesSegmentsForDisplay transient property
  //····················································································································

  var frontPackagesSegmentsForDisplay_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.frontPackagesSegmentsForDisplay.prop
    }
  }

  //····················································································································
  //   Accessing backPackagesSegments transient property
  //····················································································································

  var backPackagesSegments_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.backPackagesSegments.prop
    }
  }

  //····················································································································
  //   Accessing backPackageSegmentsCount transient property
  //····················································································································

  var backPackageSegmentsCount_prop : EBSelection <Int> {
    get {
      return self.backPackageSegmentsCount.prop
    }
  }

  //····················································································································
  //   Accessing backPackagesSegmentsForDisplay transient property
  //····················································································································

  var backPackagesSegmentsForDisplay_prop : EBSelection <MergerSegmentArray> {
    get {
      return self.backPackagesSegmentsForDisplay.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var artworkName = EBStoredProperty_String ("")
  var name = EBStoredProperty_String ("")
  var boardWidth = EBStoredProperty_Int (0)
  var boardWidthUnit = EBStoredProperty_Int (0)
  var boardHeight = EBStoredProperty_Int (0)
  var boardHeightUnit = EBStoredProperty_Int (0)
  var zoom = EBStoredProperty_Int (0)
  var boardLimitWidth = EBStoredProperty_Int (0)
  var boardLimitWidthUnit = EBStoredProperty_Int (0)

  //····················································································································
  //    Transient properties
  //····················································································································

  var frontLegendTextsSegments = EBTransientProperty_MergerSegmentArray ()
  var frontLegendTextsSegmentsForDisplay = EBTransientProperty_MergerSegmentArray ()
  var frontLayoutTextsSegments = EBTransientProperty_MergerSegmentArray ()
  var frontLayoutTextsSegmentsForDisplay = EBTransientProperty_MergerSegmentArray ()
  var backLegendTextsSegments = EBTransientProperty_MergerSegmentArray ()
  var backLegendTextsSegmentsForDisplay = EBTransientProperty_MergerSegmentArray ()
  var backLayoutTextsSegments = EBTransientProperty_MergerSegmentArray ()
  var backLayoutTextsSegmentsForDisplay = EBTransientProperty_MergerSegmentArray ()
  var padsHoles = EBTransientProperty_MergerHoleArray ()
  var viasHoles = EBTransientProperty_MergerHoleArray ()
  var holes = EBTransientProperty_MergerHoleArray ()
  var holesForDisplay = EBTransientProperty_MergerHoleArray ()
  var viaShapes = EBTransientProperty_MergerViaShapeArray ()
  var viaShapesForDisplay = EBTransientProperty_MergerViaShapeArray ()
  var frontPads = EBTransientProperty_MergerPadArray ()
  var frontPadsForDisplay = EBTransientProperty_MergerPadArray ()
  var backPads = EBTransientProperty_MergerPadArray ()
  var backPadsForDisplay = EBTransientProperty_MergerPadArray ()
  var boardLimits = EBTransientProperty_MergerBoardLimits ()
  var backComponentNameSegments = EBTransientProperty_MergerSegmentArray ()
  var backComponentNameSegmentsCount = EBTransientProperty_Int ()
  var backComponentNameSegmentsForDisplay = EBTransientProperty_MergerSegmentArray ()
  var frontComponentNameSegments = EBTransientProperty_MergerSegmentArray ()
  var frontComponentNameSegmentsCount = EBTransientProperty_Int ()
  var frontComponentNameSegmentsForDisplay = EBTransientProperty_MergerSegmentArray ()
  var frontComponentValueSegments = EBTransientProperty_MergerSegmentArray ()
  var frontComponentValueSegmentsCount = EBTransientProperty_Int ()
  var frontComponentValuesForDisplay = EBTransientProperty_MergerSegmentArray ()
  var backComponentValueSegments = EBTransientProperty_MergerSegmentArray ()
  var backComponentValueSegmentsCount = EBTransientProperty_Int ()
  var backComponentValuesForDisplay = EBTransientProperty_MergerSegmentArray ()
  var backTrackSegments = EBTransientProperty_MergerSegmentArray ()
  var backTracksSegmentsCount = EBTransientProperty_Int ()
  var backTrackSegmentsForDisplay = EBTransientProperty_MergerSegmentArray ()
  var frontTrackSegments = EBTransientProperty_MergerSegmentArray ()
  var frontTracksSegmentsCount = EBTransientProperty_Int ()
  var frontTrackSegmentsForDisplay = EBTransientProperty_MergerSegmentArray ()
  var frontPackagesSegments = EBTransientProperty_MergerSegmentArray ()
  var frontPackageSegmentsCount = EBTransientProperty_Int ()
  var frontPackagesSegmentsForDisplay = EBTransientProperty_MergerSegmentArray ()
  var backPackagesSegments = EBTransientProperty_MergerSegmentArray ()
  var backPackageSegmentsCount = EBTransientProperty_Int ()
  var backPackagesSegmentsForDisplay = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //    Relationships
  //····················································································································

  var frontLegendTexts = ToManyRelationship_BoardModelEntity_frontLegendTexts ()
  var frontLayoutTexts = ToManyRelationship_BoardModelEntity_frontLayoutTexts ()
  var backLegendTexts = ToManyRelationship_BoardModelEntity_backLegendTexts ()
  var backLayoutTexts = ToManyRelationship_BoardModelEntity_backLayoutTexts ()
  var vias = ToManyRelationship_BoardModelEntity_vias ()
  var pads = ToManyRelationship_BoardModelEntity_pads ()
  var backComponentNames = ToManyRelationship_BoardModelEntity_backComponentNames ()
  var frontComponentNames = ToManyRelationship_BoardModelEntity_frontComponentNames ()
  var frontComponentValues = ToManyRelationship_BoardModelEntity_frontComponentValues ()
  var backComponentValues = ToManyRelationship_BoardModelEntity_backComponentValues ()
  var backTracks = ToManyRelationship_BoardModelEntity_backTracks ()
  var frontTracks = ToManyRelationship_BoardModelEntity_frontTracks ()
  var frontPackages = ToManyRelationship_BoardModelEntity_frontPackages ()
  var backPackages = ToManyRelationship_BoardModelEntity_backPackages ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    frontLegendTextsSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLegendTexts.prop.kind ()
        kind &= unwSelf.frontLegendTexts.prop.kind ()
        kind &= unwSelf.frontLegendTexts.prop.kind ()
        kind &= unwSelf.frontLegendTexts.prop.kind ()
        kind &= unwSelf.frontLegendTexts.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLegendTexts.prop, unwSelf.frontLegendTexts.prop, unwSelf.frontLegendTexts.prop, unwSelf.frontLegendTexts.prop, unwSelf.frontLegendTexts.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontLegendTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontLegendTextsSegmentsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontLegendTexts.prop.kind ()
        kind &= unwSelf.frontLegendTextsSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontLegendTexts.prop, unwSelf.frontLegendTextsSegments.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontLegendTextsSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontLayoutTextsSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLayoutTexts.prop.kind ()
        kind &= unwSelf.frontLayoutTexts.prop.kind ()
        kind &= unwSelf.frontLayoutTexts.prop.kind ()
        kind &= unwSelf.frontLayoutTexts.prop.kind ()
        kind &= unwSelf.frontLayoutTexts.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLayoutTexts.prop, unwSelf.frontLayoutTexts.prop, unwSelf.frontLayoutTexts.prop, unwSelf.frontLayoutTexts.prop, unwSelf.frontLayoutTexts.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontLayoutTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontLayoutTextsSegmentsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontLayoutTexts.prop.kind ()
        kind &= unwSelf.frontLayoutTextsSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontLayoutTexts.prop, unwSelf.frontLayoutTextsSegments.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontLayoutTextsSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backLegendTextsSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLegendTexts.prop.kind ()
        kind &= unwSelf.backLegendTexts.prop.kind ()
        kind &= unwSelf.backLegendTexts.prop.kind ()
        kind &= unwSelf.backLegendTexts.prop.kind ()
        kind &= unwSelf.backLegendTexts.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLegendTexts.prop, unwSelf.backLegendTexts.prop, unwSelf.backLegendTexts.prop, unwSelf.backLegendTexts.prop, unwSelf.backLegendTexts.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backLegendTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backLegendTextsSegmentsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackLegendTexts.prop.kind ()
        kind &= unwSelf.backLegendTextsSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackLegendTexts.prop, unwSelf.backLegendTextsSegments.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backLegendTextsSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backLayoutTextsSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLayoutTexts.prop.kind ()
        kind &= unwSelf.backLayoutTexts.prop.kind ()
        kind &= unwSelf.backLayoutTexts.prop.kind ()
        kind &= unwSelf.backLayoutTexts.prop.kind ()
        kind &= unwSelf.backLayoutTexts.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLayoutTexts.prop, unwSelf.backLayoutTexts.prop, unwSelf.backLayoutTexts.prop, unwSelf.backLayoutTexts.prop, unwSelf.backLayoutTexts.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backLayoutTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backLayoutTextsSegmentsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackLayoutTexts.prop.kind ()
        kind &= unwSelf.backLayoutTextsSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackLayoutTexts.prop, unwSelf.backLayoutTextsSegments.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backLayoutTextsSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    padsHoles.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModelEntity_padsHoles (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    viasHoles.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.vias.prop.kind ()
        kind &= unwSelf.vias.prop.kind ()
        kind &= unwSelf.vias.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.vias.prop, unwSelf.vias.prop, unwSelf.vias.prop) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModelEntity_viasHoles (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    holes.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.padsHoles.prop.kind ()
        kind &= unwSelf.viasHoles.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.padsHoles.prop, unwSelf.viasHoles.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_holes (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    holesForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayHoles.prop.kind ()
        kind &= unwSelf.holes.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayHoles.prop, unwSelf.holes.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_holesForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    viaShapes.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.vias.prop.kind ()
        kind &= unwSelf.vias.prop.kind ()
        kind &= unwSelf.vias.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.vias.prop, unwSelf.vias.prop, unwSelf.vias.prop) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModelEntity_viaShapes (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    viaShapesForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayVias.prop.kind ()
        kind &= unwSelf.viaShapes.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayVias.prop, unwSelf.viaShapes.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_viaShapesForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontPads.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (compute_BoardModelEntity_frontPads (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontPadsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontPads.prop.kind ()
        kind &= unwSelf.frontPads.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontPads.prop, unwSelf.frontPads.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontPadsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backPads.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        kind &= unwSelf.pads.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop, unwSelf.pads.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (compute_BoardModelEntity_backPads (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backPadsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackPads.prop.kind ()
        kind &= unwSelf.backPads.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackPads.prop, unwSelf.backPads.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backPadsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    boardLimits.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardWidth.prop.kind ()
        kind &= unwSelf.boardHeight.prop.kind ()
        kind &= unwSelf.boardLimitWidth.prop.kind ()
        kind &= g_Preferences!.mergerDisplayBoardLimits.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardWidth.prop, unwSelf.boardHeight.prop, unwSelf.boardLimitWidth.prop, g_Preferences!.mergerDisplayBoardLimits.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (compute_BoardModelEntity_boardLimits (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backComponentNameSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backComponentNames.prop.kind ()
        kind &= unwSelf.backComponentNames.prop.kind ()
        kind &= unwSelf.backComponentNames.prop.kind ()
        kind &= unwSelf.backComponentNames.prop.kind ()
        kind &= unwSelf.backComponentNames.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentNames.prop, unwSelf.backComponentNames.prop, unwSelf.backComponentNames.prop, unwSelf.backComponentNames.prop, unwSelf.backComponentNames.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backComponentNameSegmentsCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backComponentNameSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentNameSegments.prop) {
          case (.single (let v0)) :
            return .single (compute_BoardModelEntity_backComponentNameSegmentsCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backComponentNameSegmentsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackComponentNames.prop.kind ()
        kind &= unwSelf.backComponentNameSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackComponentNames.prop, unwSelf.backComponentNameSegments.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backComponentNameSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontComponentNameSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontComponentNames.prop.kind ()
        kind &= unwSelf.frontComponentNames.prop.kind ()
        kind &= unwSelf.frontComponentNames.prop.kind ()
        kind &= unwSelf.frontComponentNames.prop.kind ()
        kind &= unwSelf.frontComponentNames.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentNames.prop, unwSelf.frontComponentNames.prop, unwSelf.frontComponentNames.prop, unwSelf.frontComponentNames.prop, unwSelf.frontComponentNames.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontComponentNameSegmentsCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontComponentNameSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentNameSegments.prop) {
          case (.single (let v0)) :
            return .single (compute_BoardModelEntity_frontComponentNameSegmentsCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontComponentNameSegmentsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontComponentNames.prop.kind ()
        kind &= unwSelf.frontComponentNameSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontComponentNames.prop, unwSelf.frontComponentNameSegments.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontComponentNameSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontComponentValueSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontComponentValues.prop.kind ()
        kind &= unwSelf.frontComponentValues.prop.kind ()
        kind &= unwSelf.frontComponentValues.prop.kind ()
        kind &= unwSelf.frontComponentValues.prop.kind ()
        kind &= unwSelf.frontComponentValues.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentValues.prop, unwSelf.frontComponentValues.prop, unwSelf.frontComponentValues.prop, unwSelf.frontComponentValues.prop, unwSelf.frontComponentValues.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontComponentValueSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontComponentValueSegmentsCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontComponentValueSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentValueSegments.prop) {
          case (.single (let v0)) :
            return .single (compute_BoardModelEntity_frontComponentValueSegmentsCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontComponentValuesForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontComponentValues.prop.kind ()
        kind &= unwSelf.frontComponentValueSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontComponentValues.prop, unwSelf.frontComponentValueSegments.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontComponentValuesForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backComponentValueSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backComponentValues.prop.kind ()
        kind &= unwSelf.backComponentValues.prop.kind ()
        kind &= unwSelf.backComponentValues.prop.kind ()
        kind &= unwSelf.backComponentValues.prop.kind ()
        kind &= unwSelf.backComponentValues.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentValues.prop, unwSelf.backComponentValues.prop, unwSelf.backComponentValues.prop, unwSelf.backComponentValues.prop, unwSelf.backComponentValues.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backComponentValueSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backComponentValueSegmentsCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backComponentValueSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentValueSegments.prop) {
          case (.single (let v0)) :
            return .single (compute_BoardModelEntity_backComponentValueSegmentsCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backComponentValuesForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackComponentValues.prop.kind ()
        kind &= unwSelf.backComponentValueSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackComponentValues.prop, unwSelf.backComponentValueSegments.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backComponentValuesForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backTrackSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backTracks.prop.kind ()
        kind &= unwSelf.backTracks.prop.kind ()
        kind &= unwSelf.backTracks.prop.kind ()
        kind &= unwSelf.backTracks.prop.kind ()
        kind &= unwSelf.backTracks.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backTracks.prop, unwSelf.backTracks.prop, unwSelf.backTracks.prop, unwSelf.backTracks.prop, unwSelf.backTracks.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backTracksSegmentsCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backTrackSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backTrackSegments.prop) {
          case (.single (let v0)) :
            return .single (compute_BoardModelEntity_backTracksSegmentsCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backTrackSegmentsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackLayoutTracks.prop.kind ()
        kind &= unwSelf.backTrackSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackLayoutTracks.prop, unwSelf.backTrackSegments.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backTrackSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontTrackSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontTracks.prop.kind ()
        kind &= unwSelf.frontTracks.prop.kind ()
        kind &= unwSelf.frontTracks.prop.kind ()
        kind &= unwSelf.frontTracks.prop.kind ()
        kind &= unwSelf.frontTracks.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontTracks.prop, unwSelf.frontTracks.prop, unwSelf.frontTracks.prop, unwSelf.frontTracks.prop, unwSelf.frontTracks.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontTracksSegmentsCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontTrackSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontTrackSegments.prop) {
          case (.single (let v0)) :
            return .single (compute_BoardModelEntity_frontTracksSegmentsCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontTrackSegmentsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontLayoutTracks.prop.kind ()
        kind &= unwSelf.frontTrackSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontLayoutTracks.prop, unwSelf.frontTrackSegments.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontTrackSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontPackagesSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontPackages.prop.kind ()
        kind &= unwSelf.frontPackages.prop.kind ()
        kind &= unwSelf.frontPackages.prop.kind ()
        kind &= unwSelf.frontPackages.prop.kind ()
        kind &= unwSelf.frontPackages.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontPackages.prop, unwSelf.frontPackages.prop, unwSelf.frontPackages.prop, unwSelf.frontPackages.prop, unwSelf.frontPackages.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontPackagesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontPackageSegmentsCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontPackagesSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontPackagesSegments.prop) {
          case (.single (let v0)) :
            return .single (compute_BoardModelEntity_frontPackageSegmentsCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    frontPackagesSegmentsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontPackages.prop.kind ()
        kind &= unwSelf.frontPackagesSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontPackages.prop, unwSelf.frontPackagesSegments.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontPackagesSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backPackagesSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backPackages.prop.kind ()
        kind &= unwSelf.backPackages.prop.kind ()
        kind &= unwSelf.backPackages.prop.kind ()
        kind &= unwSelf.backPackages.prop.kind ()
        kind &= unwSelf.backPackages.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backPackages.prop, unwSelf.backPackages.prop, unwSelf.backPackages.prop, unwSelf.backPackages.prop, unwSelf.backPackages.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backPackagesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backPackageSegmentsCount.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backPackagesSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backPackagesSegments.prop) {
          case (.single (let v0)) :
            return .single (compute_BoardModelEntity_backPackageSegmentsCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    backPackagesSegmentsForDisplay.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackPackages.prop.kind ()
        kind &= unwSelf.backPackagesSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackPackages.prop, unwSelf.backPackagesSegments.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backPackagesSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--- Install property observers for transients
    frontLegendTexts.addEBObserverOf_x1 (frontLegendTextsSegments)
    frontLegendTexts.addEBObserverOf_y1 (frontLegendTextsSegments)
    frontLegendTexts.addEBObserverOf_x2 (frontLegendTextsSegments)
    frontLegendTexts.addEBObserverOf_y2 (frontLegendTextsSegments)
    frontLegendTexts.addEBObserverOf_width (frontLegendTextsSegments)
    g_Preferences?.mergerDisplayFrontLegendTexts.addEBObserver (frontLegendTextsSegmentsForDisplay)
    frontLegendTextsSegments.addEBObserver (frontLegendTextsSegmentsForDisplay)
    frontLayoutTexts.addEBObserverOf_x1 (frontLayoutTextsSegments)
    frontLayoutTexts.addEBObserverOf_y1 (frontLayoutTextsSegments)
    frontLayoutTexts.addEBObserverOf_x2 (frontLayoutTextsSegments)
    frontLayoutTexts.addEBObserverOf_y2 (frontLayoutTextsSegments)
    frontLayoutTexts.addEBObserverOf_width (frontLayoutTextsSegments)
    g_Preferences?.mergerDisplayFrontLayoutTexts.addEBObserver (frontLayoutTextsSegmentsForDisplay)
    frontLayoutTextsSegments.addEBObserver (frontLayoutTextsSegmentsForDisplay)
    backLegendTexts.addEBObserverOf_x1 (backLegendTextsSegments)
    backLegendTexts.addEBObserverOf_y1 (backLegendTextsSegments)
    backLegendTexts.addEBObserverOf_x2 (backLegendTextsSegments)
    backLegendTexts.addEBObserverOf_y2 (backLegendTextsSegments)
    backLegendTexts.addEBObserverOf_width (backLegendTextsSegments)
    g_Preferences?.mergerDisplayBackLegendTexts.addEBObserver (backLegendTextsSegmentsForDisplay)
    backLegendTextsSegments.addEBObserver (backLegendTextsSegmentsForDisplay)
    backLayoutTexts.addEBObserverOf_x1 (backLayoutTextsSegments)
    backLayoutTexts.addEBObserverOf_y1 (backLayoutTextsSegments)
    backLayoutTexts.addEBObserverOf_x2 (backLayoutTextsSegments)
    backLayoutTexts.addEBObserverOf_y2 (backLayoutTextsSegments)
    backLayoutTexts.addEBObserverOf_width (backLayoutTextsSegments)
    g_Preferences?.mergerDisplayBackLayoutTexts.addEBObserver (backLayoutTextsSegmentsForDisplay)
    backLayoutTextsSegments.addEBObserver (backLayoutTextsSegmentsForDisplay)
    pads.addEBObserverOf_x (padsHoles)
    pads.addEBObserverOf_y (padsHoles)
    pads.addEBObserverOf_holeDiameter (padsHoles)
    vias.addEBObserverOf_x (viasHoles)
    vias.addEBObserverOf_y (viasHoles)
    vias.addEBObserverOf_holeDiameter (viasHoles)
    padsHoles.addEBObserver (holes)
    viasHoles.addEBObserver (holes)
    g_Preferences?.mergerDisplayHoles.addEBObserver (holesForDisplay)
    holes.addEBObserver (holesForDisplay)
    vias.addEBObserverOf_x (viaShapes)
    vias.addEBObserverOf_y (viaShapes)
    vias.addEBObserverOf_padDiameter (viaShapes)
    g_Preferences?.mergerDisplayVias.addEBObserver (viaShapesForDisplay)
    viaShapes.addEBObserver (viaShapesForDisplay)
    pads.addEBObserverOf_x (frontPads)
    pads.addEBObserverOf_y (frontPads)
    pads.addEBObserverOf_width (frontPads)
    pads.addEBObserverOf_height (frontPads)
    pads.addEBObserverOf_holeDiameter (frontPads)
    pads.addEBObserverOf_shape (frontPads)
    pads.addEBObserverOf_side (frontPads)
    pads.addEBObserverOf_rotation (frontPads)
    g_Preferences?.mergerDisplayFrontPads.addEBObserver (frontPadsForDisplay)
    frontPads.addEBObserver (frontPadsForDisplay)
    pads.addEBObserverOf_x (backPads)
    pads.addEBObserverOf_y (backPads)
    pads.addEBObserverOf_width (backPads)
    pads.addEBObserverOf_height (backPads)
    pads.addEBObserverOf_holeDiameter (backPads)
    pads.addEBObserverOf_shape (backPads)
    pads.addEBObserverOf_side (backPads)
    pads.addEBObserverOf_rotation (backPads)
    g_Preferences?.mergerDisplayBackPads.addEBObserver (backPadsForDisplay)
    backPads.addEBObserver (backPadsForDisplay)
    boardWidth.addEBObserver (boardLimits)
    boardHeight.addEBObserver (boardLimits)
    boardLimitWidth.addEBObserver (boardLimits)
    g_Preferences?.mergerDisplayBoardLimits.addEBObserver (boardLimits)
    backComponentNames.addEBObserverOf_x1 (backComponentNameSegments)
    backComponentNames.addEBObserverOf_y1 (backComponentNameSegments)
    backComponentNames.addEBObserverOf_x2 (backComponentNameSegments)
    backComponentNames.addEBObserverOf_y2 (backComponentNameSegments)
    backComponentNames.addEBObserverOf_width (backComponentNameSegments)
    backComponentNameSegments.addEBObserver (backComponentNameSegmentsCount)
    g_Preferences?.mergerDisplayBackComponentNames.addEBObserver (backComponentNameSegmentsForDisplay)
    backComponentNameSegments.addEBObserver (backComponentNameSegmentsForDisplay)
    frontComponentNames.addEBObserverOf_x1 (frontComponentNameSegments)
    frontComponentNames.addEBObserverOf_y1 (frontComponentNameSegments)
    frontComponentNames.addEBObserverOf_x2 (frontComponentNameSegments)
    frontComponentNames.addEBObserverOf_y2 (frontComponentNameSegments)
    frontComponentNames.addEBObserverOf_width (frontComponentNameSegments)
    frontComponentNameSegments.addEBObserver (frontComponentNameSegmentsCount)
    g_Preferences?.mergerDisplayFrontComponentNames.addEBObserver (frontComponentNameSegmentsForDisplay)
    frontComponentNameSegments.addEBObserver (frontComponentNameSegmentsForDisplay)
    frontComponentValues.addEBObserverOf_x1 (frontComponentValueSegments)
    frontComponentValues.addEBObserverOf_y1 (frontComponentValueSegments)
    frontComponentValues.addEBObserverOf_x2 (frontComponentValueSegments)
    frontComponentValues.addEBObserverOf_y2 (frontComponentValueSegments)
    frontComponentValues.addEBObserverOf_width (frontComponentValueSegments)
    frontComponentValueSegments.addEBObserver (frontComponentValueSegmentsCount)
    g_Preferences?.mergerDisplayFrontComponentValues.addEBObserver (frontComponentValuesForDisplay)
    frontComponentValueSegments.addEBObserver (frontComponentValuesForDisplay)
    backComponentValues.addEBObserverOf_x1 (backComponentValueSegments)
    backComponentValues.addEBObserverOf_y1 (backComponentValueSegments)
    backComponentValues.addEBObserverOf_x2 (backComponentValueSegments)
    backComponentValues.addEBObserverOf_y2 (backComponentValueSegments)
    backComponentValues.addEBObserverOf_width (backComponentValueSegments)
    backComponentValueSegments.addEBObserver (backComponentValueSegmentsCount)
    g_Preferences?.mergerDisplayBackComponentValues.addEBObserver (backComponentValuesForDisplay)
    backComponentValueSegments.addEBObserver (backComponentValuesForDisplay)
    backTracks.addEBObserverOf_x1 (backTrackSegments)
    backTracks.addEBObserverOf_y1 (backTrackSegments)
    backTracks.addEBObserverOf_x2 (backTrackSegments)
    backTracks.addEBObserverOf_y2 (backTrackSegments)
    backTracks.addEBObserverOf_width (backTrackSegments)
    backTrackSegments.addEBObserver (backTracksSegmentsCount)
    g_Preferences?.mergerDisplayBackLayoutTracks.addEBObserver (backTrackSegmentsForDisplay)
    backTrackSegments.addEBObserver (backTrackSegmentsForDisplay)
    frontTracks.addEBObserverOf_x1 (frontTrackSegments)
    frontTracks.addEBObserverOf_y1 (frontTrackSegments)
    frontTracks.addEBObserverOf_x2 (frontTrackSegments)
    frontTracks.addEBObserverOf_y2 (frontTrackSegments)
    frontTracks.addEBObserverOf_width (frontTrackSegments)
    frontTrackSegments.addEBObserver (frontTracksSegmentsCount)
    g_Preferences?.mergerDisplayFrontLayoutTracks.addEBObserver (frontTrackSegmentsForDisplay)
    frontTrackSegments.addEBObserver (frontTrackSegmentsForDisplay)
    frontPackages.addEBObserverOf_x1 (frontPackagesSegments)
    frontPackages.addEBObserverOf_y1 (frontPackagesSegments)
    frontPackages.addEBObserverOf_x2 (frontPackagesSegments)
    frontPackages.addEBObserverOf_y2 (frontPackagesSegments)
    frontPackages.addEBObserverOf_width (frontPackagesSegments)
    frontPackagesSegments.addEBObserver (frontPackageSegmentsCount)
    g_Preferences?.mergerDisplayFrontPackages.addEBObserver (frontPackagesSegmentsForDisplay)
    frontPackagesSegments.addEBObserver (frontPackagesSegmentsForDisplay)
    backPackages.addEBObserverOf_x1 (backPackagesSegments)
    backPackages.addEBObserverOf_y1 (backPackagesSegments)
    backPackages.addEBObserverOf_x2 (backPackagesSegments)
    backPackages.addEBObserverOf_y2 (backPackagesSegments)
    backPackages.addEBObserverOf_width (backPackagesSegments)
    backPackagesSegments.addEBObserver (backPackageSegmentsCount)
    g_Preferences?.mergerDisplayBackPackages.addEBObserver (backPackagesSegmentsForDisplay)
    backPackagesSegments.addEBObserver (backPackagesSegmentsForDisplay)
  //--- Install undoers for properties
    self.artworkName.undoManager = undoManager ()
    self.name.undoManager = undoManager ()
    self.boardWidth.undoManager = undoManager ()
    self.boardWidthUnit.undoManager = undoManager ()
    self.boardHeight.undoManager = undoManager ()
    self.boardHeightUnit.undoManager = undoManager ()
    self.zoom.undoManager = undoManager ()
    self.boardLimitWidth.undoManager = undoManager ()
    self.boardLimitWidthUnit.undoManager = undoManager ()
  //--- Install owner for relationships
    frontLegendTexts.owner = self
    frontLayoutTexts.owner = self
    backLegendTexts.owner = self
    backLayoutTexts.owner = self
    vias.owner = self
    pads.owner = self
    backComponentNames.owner = self
    frontComponentNames.owner = self
    frontComponentValues.owner = self
    backComponentValues.owner = self
    backTracks.owner = self
    frontTracks.owner = self
    frontPackages.owner = self
    backPackages.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    frontLegendTexts.removeEBObserverOf_x1 (frontLegendTextsSegments)
    frontLegendTexts.removeEBObserverOf_y1 (frontLegendTextsSegments)
    frontLegendTexts.removeEBObserverOf_x2 (frontLegendTextsSegments)
    frontLegendTexts.removeEBObserverOf_y2 (frontLegendTextsSegments)
    frontLegendTexts.removeEBObserverOf_width (frontLegendTextsSegments)
    g_Preferences?.mergerDisplayFrontLegendTexts.removeEBObserver (frontLegendTextsSegmentsForDisplay)
    frontLegendTextsSegments.removeEBObserver (frontLegendTextsSegmentsForDisplay)
    frontLayoutTexts.removeEBObserverOf_x1 (frontLayoutTextsSegments)
    frontLayoutTexts.removeEBObserverOf_y1 (frontLayoutTextsSegments)
    frontLayoutTexts.removeEBObserverOf_x2 (frontLayoutTextsSegments)
    frontLayoutTexts.removeEBObserverOf_y2 (frontLayoutTextsSegments)
    frontLayoutTexts.removeEBObserverOf_width (frontLayoutTextsSegments)
    g_Preferences?.mergerDisplayFrontLayoutTexts.removeEBObserver (frontLayoutTextsSegmentsForDisplay)
    frontLayoutTextsSegments.removeEBObserver (frontLayoutTextsSegmentsForDisplay)
    backLegendTexts.removeEBObserverOf_x1 (backLegendTextsSegments)
    backLegendTexts.removeEBObserverOf_y1 (backLegendTextsSegments)
    backLegendTexts.removeEBObserverOf_x2 (backLegendTextsSegments)
    backLegendTexts.removeEBObserverOf_y2 (backLegendTextsSegments)
    backLegendTexts.removeEBObserverOf_width (backLegendTextsSegments)
    g_Preferences?.mergerDisplayBackLegendTexts.removeEBObserver (backLegendTextsSegmentsForDisplay)
    backLegendTextsSegments.removeEBObserver (backLegendTextsSegmentsForDisplay)
    backLayoutTexts.removeEBObserverOf_x1 (backLayoutTextsSegments)
    backLayoutTexts.removeEBObserverOf_y1 (backLayoutTextsSegments)
    backLayoutTexts.removeEBObserverOf_x2 (backLayoutTextsSegments)
    backLayoutTexts.removeEBObserverOf_y2 (backLayoutTextsSegments)
    backLayoutTexts.removeEBObserverOf_width (backLayoutTextsSegments)
    g_Preferences?.mergerDisplayBackLayoutTexts.removeEBObserver (backLayoutTextsSegmentsForDisplay)
    backLayoutTextsSegments.removeEBObserver (backLayoutTextsSegmentsForDisplay)
    pads.removeEBObserverOf_x (padsHoles)
    pads.removeEBObserverOf_y (padsHoles)
    pads.removeEBObserverOf_holeDiameter (padsHoles)
    vias.removeEBObserverOf_x (viasHoles)
    vias.removeEBObserverOf_y (viasHoles)
    vias.removeEBObserverOf_holeDiameter (viasHoles)
    padsHoles.removeEBObserver (holes)
    viasHoles.removeEBObserver (holes)
    g_Preferences?.mergerDisplayHoles.removeEBObserver (holesForDisplay)
    holes.removeEBObserver (holesForDisplay)
    vias.removeEBObserverOf_x (viaShapes)
    vias.removeEBObserverOf_y (viaShapes)
    vias.removeEBObserverOf_padDiameter (viaShapes)
    g_Preferences?.mergerDisplayVias.removeEBObserver (viaShapesForDisplay)
    viaShapes.removeEBObserver (viaShapesForDisplay)
    pads.removeEBObserverOf_x (frontPads)
    pads.removeEBObserverOf_y (frontPads)
    pads.removeEBObserverOf_width (frontPads)
    pads.removeEBObserverOf_height (frontPads)
    pads.removeEBObserverOf_holeDiameter (frontPads)
    pads.removeEBObserverOf_shape (frontPads)
    pads.removeEBObserverOf_side (frontPads)
    pads.removeEBObserverOf_rotation (frontPads)
    g_Preferences?.mergerDisplayFrontPads.removeEBObserver (frontPadsForDisplay)
    frontPads.removeEBObserver (frontPadsForDisplay)
    pads.removeEBObserverOf_x (backPads)
    pads.removeEBObserverOf_y (backPads)
    pads.removeEBObserverOf_width (backPads)
    pads.removeEBObserverOf_height (backPads)
    pads.removeEBObserverOf_holeDiameter (backPads)
    pads.removeEBObserverOf_shape (backPads)
    pads.removeEBObserverOf_side (backPads)
    pads.removeEBObserverOf_rotation (backPads)
    g_Preferences?.mergerDisplayBackPads.removeEBObserver (backPadsForDisplay)
    backPads.removeEBObserver (backPadsForDisplay)
    boardWidth.removeEBObserver (boardLimits)
    boardHeight.removeEBObserver (boardLimits)
    boardLimitWidth.removeEBObserver (boardLimits)
    g_Preferences?.mergerDisplayBoardLimits.removeEBObserver (boardLimits)
    backComponentNames.removeEBObserverOf_x1 (backComponentNameSegments)
    backComponentNames.removeEBObserverOf_y1 (backComponentNameSegments)
    backComponentNames.removeEBObserverOf_x2 (backComponentNameSegments)
    backComponentNames.removeEBObserverOf_y2 (backComponentNameSegments)
    backComponentNames.removeEBObserverOf_width (backComponentNameSegments)
    backComponentNameSegments.removeEBObserver (backComponentNameSegmentsCount)
    g_Preferences?.mergerDisplayBackComponentNames.removeEBObserver (backComponentNameSegmentsForDisplay)
    backComponentNameSegments.removeEBObserver (backComponentNameSegmentsForDisplay)
    frontComponentNames.removeEBObserverOf_x1 (frontComponentNameSegments)
    frontComponentNames.removeEBObserverOf_y1 (frontComponentNameSegments)
    frontComponentNames.removeEBObserverOf_x2 (frontComponentNameSegments)
    frontComponentNames.removeEBObserverOf_y2 (frontComponentNameSegments)
    frontComponentNames.removeEBObserverOf_width (frontComponentNameSegments)
    frontComponentNameSegments.removeEBObserver (frontComponentNameSegmentsCount)
    g_Preferences?.mergerDisplayFrontComponentNames.removeEBObserver (frontComponentNameSegmentsForDisplay)
    frontComponentNameSegments.removeEBObserver (frontComponentNameSegmentsForDisplay)
    frontComponentValues.removeEBObserverOf_x1 (frontComponentValueSegments)
    frontComponentValues.removeEBObserverOf_y1 (frontComponentValueSegments)
    frontComponentValues.removeEBObserverOf_x2 (frontComponentValueSegments)
    frontComponentValues.removeEBObserverOf_y2 (frontComponentValueSegments)
    frontComponentValues.removeEBObserverOf_width (frontComponentValueSegments)
    frontComponentValueSegments.removeEBObserver (frontComponentValueSegmentsCount)
    g_Preferences?.mergerDisplayFrontComponentValues.removeEBObserver (frontComponentValuesForDisplay)
    frontComponentValueSegments.removeEBObserver (frontComponentValuesForDisplay)
    backComponentValues.removeEBObserverOf_x1 (backComponentValueSegments)
    backComponentValues.removeEBObserverOf_y1 (backComponentValueSegments)
    backComponentValues.removeEBObserverOf_x2 (backComponentValueSegments)
    backComponentValues.removeEBObserverOf_y2 (backComponentValueSegments)
    backComponentValues.removeEBObserverOf_width (backComponentValueSegments)
    backComponentValueSegments.removeEBObserver (backComponentValueSegmentsCount)
    g_Preferences?.mergerDisplayBackComponentValues.removeEBObserver (backComponentValuesForDisplay)
    backComponentValueSegments.removeEBObserver (backComponentValuesForDisplay)
    backTracks.removeEBObserverOf_x1 (backTrackSegments)
    backTracks.removeEBObserverOf_y1 (backTrackSegments)
    backTracks.removeEBObserverOf_x2 (backTrackSegments)
    backTracks.removeEBObserverOf_y2 (backTrackSegments)
    backTracks.removeEBObserverOf_width (backTrackSegments)
    backTrackSegments.removeEBObserver (backTracksSegmentsCount)
    g_Preferences?.mergerDisplayBackLayoutTracks.removeEBObserver (backTrackSegmentsForDisplay)
    backTrackSegments.removeEBObserver (backTrackSegmentsForDisplay)
    frontTracks.removeEBObserverOf_x1 (frontTrackSegments)
    frontTracks.removeEBObserverOf_y1 (frontTrackSegments)
    frontTracks.removeEBObserverOf_x2 (frontTrackSegments)
    frontTracks.removeEBObserverOf_y2 (frontTrackSegments)
    frontTracks.removeEBObserverOf_width (frontTrackSegments)
    frontTrackSegments.removeEBObserver (frontTracksSegmentsCount)
    g_Preferences?.mergerDisplayFrontLayoutTracks.removeEBObserver (frontTrackSegmentsForDisplay)
    frontTrackSegments.removeEBObserver (frontTrackSegmentsForDisplay)
    frontPackages.removeEBObserverOf_x1 (frontPackagesSegments)
    frontPackages.removeEBObserverOf_y1 (frontPackagesSegments)
    frontPackages.removeEBObserverOf_x2 (frontPackagesSegments)
    frontPackages.removeEBObserverOf_y2 (frontPackagesSegments)
    frontPackages.removeEBObserverOf_width (frontPackagesSegments)
    frontPackagesSegments.removeEBObserver (frontPackageSegmentsCount)
    g_Preferences?.mergerDisplayFrontPackages.removeEBObserver (frontPackagesSegmentsForDisplay)
    frontPackagesSegments.removeEBObserver (frontPackagesSegmentsForDisplay)
    backPackages.removeEBObserverOf_x1 (backPackagesSegments)
    backPackages.removeEBObserverOf_y1 (backPackagesSegments)
    backPackages.removeEBObserverOf_x2 (backPackagesSegments)
    backPackages.removeEBObserverOf_y2 (backPackagesSegments)
    backPackages.removeEBObserverOf_width (backPackagesSegments)
    backPackagesSegments.removeEBObserver (backPackageSegmentsCount)
    g_Preferences?.mergerDisplayBackPackages.removeEBObserver (backPackagesSegmentsForDisplay)
    backPackagesSegments.removeEBObserver (backPackagesSegmentsForDisplay)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "artworkName",
      idx:self.artworkName.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.artworkName.mObserverExplorer,
      valueExplorer:&self.artworkName.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name.mObserverExplorer,
      valueExplorer:&self.name.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidth",
      idx:self.boardWidth.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidth.mObserverExplorer,
      valueExplorer:&self.boardWidth.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidthUnit",
      idx:self.boardWidthUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidthUnit.mObserverExplorer,
      valueExplorer:&self.boardWidthUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeight",
      idx:self.boardHeight.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeight.mObserverExplorer,
      valueExplorer:&self.boardHeight.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeightUnit",
      idx:self.boardHeightUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeightUnit.mObserverExplorer,
      valueExplorer:&self.boardHeightUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom.mObserverExplorer,
      valueExplorer:&self.zoom.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidth",
      idx:self.boardLimitWidth.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidth.mObserverExplorer,
      valueExplorer:&self.boardLimitWidth.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidthUnit",
      idx:self.boardLimitWidthUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidthUnit.mObserverExplorer,
      valueExplorer:&self.boardLimitWidthUnit.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "frontLegendTextsSegments",
      idx:self.frontLegendTextsSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendTextsSegments.mObserverExplorer,
      valueExplorer:&self.frontLegendTextsSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsSegmentsForDisplay",
      idx:self.frontLegendTextsSegmentsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendTextsSegmentsForDisplay.mObserverExplorer,
      valueExplorer:&self.frontLegendTextsSegmentsForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsSegments",
      idx:self.frontLayoutTextsSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLayoutTextsSegments.mObserverExplorer,
      valueExplorer:&self.frontLayoutTextsSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsSegmentsForDisplay",
      idx:self.frontLayoutTextsSegmentsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLayoutTextsSegmentsForDisplay.mObserverExplorer,
      valueExplorer:&self.frontLayoutTextsSegmentsForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsSegments",
      idx:self.backLegendTextsSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendTextsSegments.mObserverExplorer,
      valueExplorer:&self.backLegendTextsSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsSegmentsForDisplay",
      idx:self.backLegendTextsSegmentsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendTextsSegmentsForDisplay.mObserverExplorer,
      valueExplorer:&self.backLegendTextsSegmentsForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsSegments",
      idx:self.backLayoutTextsSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLayoutTextsSegments.mObserverExplorer,
      valueExplorer:&self.backLayoutTextsSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsSegmentsForDisplay",
      idx:self.backLayoutTextsSegmentsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLayoutTextsSegmentsForDisplay.mObserverExplorer,
      valueExplorer:&self.backLayoutTextsSegmentsForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padsHoles",
      idx:self.padsHoles.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padsHoles.mObserverExplorer,
      valueExplorer:&self.padsHoles.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viasHoles",
      idx:self.viasHoles.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viasHoles.mObserverExplorer,
      valueExplorer:&self.viasHoles.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holes",
      idx:self.holes.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holes.mObserverExplorer,
      valueExplorer:&self.holes.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holesForDisplay",
      idx:self.holesForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holesForDisplay.mObserverExplorer,
      valueExplorer:&self.holesForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaShapes",
      idx:self.viaShapes.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaShapes.mObserverExplorer,
      valueExplorer:&self.viaShapes.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaShapesForDisplay",
      idx:self.viaShapesForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaShapesForDisplay.mObserverExplorer,
      valueExplorer:&self.viaShapesForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPads",
      idx:self.frontPads.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPads.mObserverExplorer,
      valueExplorer:&self.frontPads.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPadsForDisplay",
      idx:self.frontPadsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPadsForDisplay.mObserverExplorer,
      valueExplorer:&self.frontPadsForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPads",
      idx:self.backPads.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPads.mObserverExplorer,
      valueExplorer:&self.backPads.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPadsForDisplay",
      idx:self.backPadsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPadsForDisplay.mObserverExplorer,
      valueExplorer:&self.backPadsForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimits",
      idx:self.boardLimits.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimits.mObserverExplorer,
      valueExplorer:&self.boardLimits.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameSegments",
      idx:self.backComponentNameSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameSegments.mObserverExplorer,
      valueExplorer:&self.backComponentNameSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameSegmentsCount",
      idx:self.backComponentNameSegmentsCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameSegmentsCount.mObserverExplorer,
      valueExplorer:&self.backComponentNameSegmentsCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameSegmentsForDisplay",
      idx:self.backComponentNameSegmentsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameSegmentsForDisplay.mObserverExplorer,
      valueExplorer:&self.backComponentNameSegmentsForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameSegments",
      idx:self.frontComponentNameSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameSegments.mObserverExplorer,
      valueExplorer:&self.frontComponentNameSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameSegmentsCount",
      idx:self.frontComponentNameSegmentsCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameSegmentsCount.mObserverExplorer,
      valueExplorer:&self.frontComponentNameSegmentsCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameSegmentsForDisplay",
      idx:self.frontComponentNameSegmentsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameSegmentsForDisplay.mObserverExplorer,
      valueExplorer:&self.frontComponentNameSegmentsForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValueSegments",
      idx:self.frontComponentValueSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValueSegments.mObserverExplorer,
      valueExplorer:&self.frontComponentValueSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValueSegmentsCount",
      idx:self.frontComponentValueSegmentsCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValueSegmentsCount.mObserverExplorer,
      valueExplorer:&self.frontComponentValueSegmentsCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValuesForDisplay",
      idx:self.frontComponentValuesForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValuesForDisplay.mObserverExplorer,
      valueExplorer:&self.frontComponentValuesForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValueSegments",
      idx:self.backComponentValueSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValueSegments.mObserverExplorer,
      valueExplorer:&self.backComponentValueSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValueSegmentsCount",
      idx:self.backComponentValueSegmentsCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValueSegmentsCount.mObserverExplorer,
      valueExplorer:&self.backComponentValueSegmentsCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValuesForDisplay",
      idx:self.backComponentValuesForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValuesForDisplay.mObserverExplorer,
      valueExplorer:&self.backComponentValuesForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTrackSegments",
      idx:self.backTrackSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTrackSegments.mObserverExplorer,
      valueExplorer:&self.backTrackSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTracksSegmentsCount",
      idx:self.backTracksSegmentsCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTracksSegmentsCount.mObserverExplorer,
      valueExplorer:&self.backTracksSegmentsCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTrackSegmentsForDisplay",
      idx:self.backTrackSegmentsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTrackSegmentsForDisplay.mObserverExplorer,
      valueExplorer:&self.backTrackSegmentsForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTrackSegments",
      idx:self.frontTrackSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTrackSegments.mObserverExplorer,
      valueExplorer:&self.frontTrackSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTracksSegmentsCount",
      idx:self.frontTracksSegmentsCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTracksSegmentsCount.mObserverExplorer,
      valueExplorer:&self.frontTracksSegmentsCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTrackSegmentsForDisplay",
      idx:self.frontTrackSegmentsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTrackSegmentsForDisplay.mObserverExplorer,
      valueExplorer:&self.frontTrackSegmentsForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesSegments",
      idx:self.frontPackagesSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackagesSegments.mObserverExplorer,
      valueExplorer:&self.frontPackagesSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackageSegmentsCount",
      idx:self.frontPackageSegmentsCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackageSegmentsCount.mObserverExplorer,
      valueExplorer:&self.frontPackageSegmentsCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesSegmentsForDisplay",
      idx:self.frontPackagesSegmentsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackagesSegmentsForDisplay.mObserverExplorer,
      valueExplorer:&self.frontPackagesSegmentsForDisplay.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesSegments",
      idx:self.backPackagesSegments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackagesSegments.mObserverExplorer,
      valueExplorer:&self.backPackagesSegments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackageSegmentsCount",
      idx:self.backPackageSegmentsCount.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackageSegmentsCount.mObserverExplorer,
      valueExplorer:&self.backPackageSegmentsCount.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesSegmentsForDisplay",
      idx:self.backPackagesSegmentsForDisplay.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackagesSegmentsForDisplay.mObserverExplorer,
      valueExplorer:&self.backPackagesSegmentsForDisplay.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "frontLegendTexts",
      idx:frontLegendTexts.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLegendTexts.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontLayoutTexts",
      idx:frontLayoutTexts.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLayoutTexts.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLegendTexts",
      idx:backLegendTexts.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLegendTexts.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLayoutTexts",
      idx:backLayoutTexts.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLayoutTexts.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "vias",
      idx:vias.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&vias.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "pads",
      idx:pads.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&pads.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backComponentNames",
      idx:backComponentNames.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backComponentNames.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontComponentNames",
      idx:frontComponentNames.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontComponentNames.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontComponentValues",
      idx:frontComponentValues.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontComponentValues.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backComponentValues",
      idx:backComponentValues.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backComponentValues.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backTracks",
      idx:backTracks.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backTracks.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontTracks",
      idx:frontTracks.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontTracks.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontPackages",
      idx:frontPackages.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontPackages.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backPackages",
      idx:backPackages.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backPackages.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.artworkName.mObserverExplorer = nil
    self.artworkName.mValueExplorer = nil
    self.name.mObserverExplorer = nil
    self.name.mValueExplorer = nil
    self.boardWidth.mObserverExplorer = nil
    self.boardWidth.mValueExplorer = nil
    self.boardWidthUnit.mObserverExplorer = nil
    self.boardWidthUnit.mValueExplorer = nil
    self.boardHeight.mObserverExplorer = nil
    self.boardHeight.mValueExplorer = nil
    self.boardHeightUnit.mObserverExplorer = nil
    self.boardHeightUnit.mValueExplorer = nil
    self.zoom.mObserverExplorer = nil
    self.zoom.mValueExplorer = nil
    self.boardLimitWidth.mObserverExplorer = nil
    self.boardLimitWidth.mValueExplorer = nil
    self.boardLimitWidthUnit.mObserverExplorer = nil
    self.boardLimitWidthUnit.mValueExplorer = nil
    // frontLegendTexts.mObserverExplorer = nil
    frontLegendTexts.mValueExplorer = nil
    // frontLayoutTexts.mObserverExplorer = nil
    frontLayoutTexts.mValueExplorer = nil
    // backLegendTexts.mObserverExplorer = nil
    backLegendTexts.mValueExplorer = nil
    // backLayoutTexts.mObserverExplorer = nil
    backLayoutTexts.mValueExplorer = nil
    // vias.mObserverExplorer = nil
    vias.mValueExplorer = nil
    // pads.mObserverExplorer = nil
    pads.mValueExplorer = nil
    // backComponentNames.mObserverExplorer = nil
    backComponentNames.mValueExplorer = nil
    // frontComponentNames.mObserverExplorer = nil
    frontComponentNames.mValueExplorer = nil
    // frontComponentValues.mObserverExplorer = nil
    frontComponentValues.mValueExplorer = nil
    // backComponentValues.mObserverExplorer = nil
    backComponentValues.mValueExplorer = nil
    // backTracks.mObserverExplorer = nil
    backTracks.mValueExplorer = nil
    // frontTracks.mObserverExplorer = nil
    frontTracks.mValueExplorer = nil
    // frontPackages.mObserverExplorer = nil
    frontPackages.mValueExplorer = nil
    // backPackages.mObserverExplorer = nil
    backPackages.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.artworkName.storeIn (dictionary: ioDictionary, forKey: "artworkName")
    self.name.storeIn (dictionary: ioDictionary, forKey: "name")
    self.boardWidth.storeIn (dictionary: ioDictionary, forKey: "boardWidth")
    self.boardWidthUnit.storeIn (dictionary: ioDictionary, forKey: "boardWidthUnit")
    self.boardHeight.storeIn (dictionary: ioDictionary, forKey: "boardHeight")
    self.boardHeightUnit.storeIn (dictionary: ioDictionary, forKey: "boardHeightUnit")
    self.zoom.storeIn (dictionary: ioDictionary, forKey: "zoom")
    self.boardLimitWidth.storeIn (dictionary: ioDictionary, forKey: "boardLimitWidth")
    self.boardLimitWidthUnit.storeIn (dictionary: ioDictionary, forKey: "boardLimitWidthUnit")
    store (managedObjectArray: frontLegendTexts.propval as NSArray, relationshipName:"frontLegendTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontLayoutTexts.propval as NSArray, relationshipName:"frontLayoutTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backLegendTexts.propval as NSArray, relationshipName:"backLegendTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backLayoutTexts.propval as NSArray, relationshipName:"backLayoutTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: vias.propval as NSArray, relationshipName:"vias", intoDictionary: ioDictionary) ;
    store (managedObjectArray: pads.propval as NSArray, relationshipName:"pads", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backComponentNames.propval as NSArray, relationshipName:"backComponentNames", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontComponentNames.propval as NSArray, relationshipName:"frontComponentNames", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontComponentValues.propval as NSArray, relationshipName:"frontComponentValues", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backComponentValues.propval as NSArray, relationshipName:"backComponentValues", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backTracks.propval as NSArray, relationshipName:"backTracks", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontTracks.propval as NSArray, relationshipName:"frontTracks", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontPackages.propval as NSArray, relationshipName:"frontPackages", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backPackages.propval as NSArray, relationshipName:"backPackages", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.artworkName.readFrom (dictionary: inDictionary, forKey:"artworkName")
    self.name.readFrom (dictionary: inDictionary, forKey:"name")
    self.boardWidth.readFrom (dictionary: inDictionary, forKey:"boardWidth")
    self.boardWidthUnit.readFrom (dictionary: inDictionary, forKey:"boardWidthUnit")
    self.boardHeight.readFrom (dictionary: inDictionary, forKey:"boardHeight")
    self.boardHeightUnit.readFrom (dictionary: inDictionary, forKey:"boardHeightUnit")
    self.zoom.readFrom (dictionary: inDictionary, forKey:"zoom")
    self.boardLimitWidth.readFrom (dictionary: inDictionary, forKey:"boardLimitWidth")
    self.boardLimitWidthUnit.readFrom (dictionary: inDictionary, forKey:"boardLimitWidthUnit")
    frontLegendTexts.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLegendTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    frontLayoutTexts.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLayoutTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    backLegendTexts.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLegendTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    backLayoutTexts.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLayoutTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    vias.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "vias",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelViaEntity])
    pads.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "pads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelPadEntity])
    backComponentNames.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    frontComponentNames.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    frontComponentValues.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    backComponentValues.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    backTracks.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    frontTracks.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    frontPackages.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    backPackages.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    do{
      let objects = self.frontLegendTexts.propval
      self.frontLegendTexts.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontLayoutTexts.propval
      self.frontLayoutTexts.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backLegendTexts.propval
      self.backLegendTexts.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backLayoutTexts.propval
      self.backLayoutTexts.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.vias.propval
      self.vias.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.pads.propval
      self.pads.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backComponentNames.propval
      self.backComponentNames.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontComponentNames.propval
      self.frontComponentNames.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontComponentValues.propval
      self.frontComponentValues.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backComponentValues.propval
      self.backComponentValues.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backTracks.propval
      self.backTracks.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontTracks.propval
      self.frontTracks.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontPackages.propval
      self.frontPackages.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backPackages.propval
      self.backPackages.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    frontLegendTexts.setProp (Array ())
    frontLayoutTexts.setProp (Array ())
    backLegendTexts.setProp (Array ())
    backLayoutTexts.setProp (Array ())
    vias.setProp (Array ())
    pads.setProp (Array ())
    backComponentNames.setProp (Array ())
    frontComponentNames.setProp (Array ())
    frontComponentValues.setProp (Array ())
    backComponentValues.setProp (Array ())
    backTracks.setProp (Array ())
    frontTracks.setProp (Array ())
    frontPackages.setProp (Array ())
    backPackages.setProp (Array ())
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in frontLegendTexts.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in frontLayoutTexts.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in backLegendTexts.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in backLayoutTexts.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in vias.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in pads.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in backComponentNames.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in frontComponentNames.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in frontComponentValues.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in backComponentValues.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in backTracks.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in frontTracks.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in frontPackages.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in backPackages.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardModelEntity : ReadOnlyAbstractArrayProperty <BoardModelEntity> {

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_artworkName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_artworkName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_artworkName {
        managedObject.artworkName.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_artworkName {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.artworkName.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_name.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_name.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_name {
        managedObject.name.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_name {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidth' stored property
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidth_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidth {
        managedObject.boardWidth.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidth_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidth.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidthUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidthUnit {
        managedObject.boardWidthUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidthUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidthUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeight' stored property
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeight_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeight {
        managedObject.boardHeight.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeight_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardHeight {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeight.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeightUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeightUnit {
        managedObject.boardHeightUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeightUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardHeightUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeightUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_zoom {
        managedObject.zoom.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_zoom {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidth_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidth {
        managedObject.boardLimitWidth.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidth_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardLimitWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidth.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidthUnit {
        managedObject.boardLimitWidthUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardLimitWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidthUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsSegments' transient property
  //····················································································································

  private var mObserversOf_frontLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegments {
        managedObject.frontLegendTextsSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegments {
        managedObject.frontLegendTextsSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontLegendTextsSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegmentsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegmentsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegmentsForDisplay {
        managedObject.frontLegendTextsSegmentsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegmentsForDisplay {
        managedObject.frontLegendTextsSegmentsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsSegments' transient property
  //····················································································································

  private var mObserversOf_frontLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegments {
        managedObject.frontLayoutTextsSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegments {
        managedObject.frontLayoutTextsSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontLayoutTextsSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegmentsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegmentsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegmentsForDisplay {
        managedObject.frontLayoutTextsSegmentsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegmentsForDisplay {
        managedObject.frontLayoutTextsSegmentsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsSegments' transient property
  //····················································································································

  private var mObserversOf_backLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegments {
        managedObject.backLegendTextsSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegments {
        managedObject.backLegendTextsSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backLegendTextsSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendTextsSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegmentsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendTextsSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegmentsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegmentsForDisplay {
        managedObject.backLegendTextsSegmentsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegmentsForDisplay {
        managedObject.backLegendTextsSegmentsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsSegments' transient property
  //····················································································································

  private var mObserversOf_backLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegments {
        managedObject.backLayoutTextsSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegments {
        managedObject.backLayoutTextsSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backLayoutTextsSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegmentsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegmentsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegmentsForDisplay {
        managedObject.backLayoutTextsSegmentsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegmentsForDisplay {
        managedObject.backLayoutTextsSegmentsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padsHoles' transient property
  //····················································································································

  private var mObserversOf_padsHoles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padsHoles (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_padsHoles.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padsHoles.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padsHoles (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_padsHoles.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padsHoles.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padsHoles_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_padsHoles {
        managedObject.padsHoles.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padsHoles_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_padsHoles {
        managedObject.padsHoles.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viasHoles' transient property
  //····················································································································

  private var mObserversOf_viasHoles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viasHoles (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viasHoles.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasHoles.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viasHoles (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viasHoles.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasHoles.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viasHoles_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viasHoles {
        managedObject.viasHoles.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viasHoles_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viasHoles {
        managedObject.viasHoles.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holes' transient property
  //····················································································································

  private var mObserversOf_holes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_holes.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holes.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_holes.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holes.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holes_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holes {
        managedObject.holes.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holes_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holes {
        managedObject.holes.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holesForDisplay' transient property
  //····················································································································

  private var mObserversOf_holesForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holesForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_holesForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holesForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holesForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_holesForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holesForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holesForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holesForDisplay {
        managedObject.holesForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holesForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holesForDisplay {
        managedObject.holesForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaShapes' transient property
  //····················································································································

  private var mObserversOf_viaShapes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaShapes.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapes.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaShapes.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapes.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaShapes_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapes {
        managedObject.viaShapes.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaShapes_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapes {
        managedObject.viaShapes.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaShapesForDisplay' transient property
  //····················································································································

  private var mObserversOf_viaShapesForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaShapesForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaShapesForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapesForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapesForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaShapesForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapesForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaShapesForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapesForDisplay {
        managedObject.viaShapesForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaShapesForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapesForDisplay {
        managedObject.viaShapesForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPads' transient property
  //····················································································································

  private var mObserversOf_frontPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPads.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPads.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPads_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPads {
        managedObject.frontPads.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPads_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPads {
        managedObject.frontPads.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPadsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontPadsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPadsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPadsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPadsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPadsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsForDisplay {
        managedObject.frontPadsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPadsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsForDisplay {
        managedObject.frontPadsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPads' transient property
  //····················································································································

  private var mObserversOf_backPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPads.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPads.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPads_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPads {
        managedObject.backPads.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPads_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPads {
        managedObject.backPads.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPadsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backPadsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPadsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPadsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPadsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPadsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsForDisplay {
        managedObject.backPadsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPadsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsForDisplay {
        managedObject.backPadsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimits' transient property
  //····················································································································

  private var mObserversOf_boardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimits.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimits.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimits.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimits.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimits_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimits {
        managedObject.boardLimits.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimits_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimits {
        managedObject.boardLimits.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_backComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegments {
        managedObject.backComponentNameSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegments {
        managedObject.backComponentNameSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameSegmentsCount' transient property
  //····················································································································

  private var mObserversOf_backComponentNameSegmentsCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameSegmentsCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameSegmentsCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegmentsCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegmentsCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameSegmentsCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegmentsCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameSegmentsCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegmentsCount {
        managedObject.backComponentNameSegmentsCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameSegmentsCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegmentsCount {
        managedObject.backComponentNameSegmentsCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backComponentNameSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegmentsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegmentsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegmentsForDisplay {
        managedObject.backComponentNameSegmentsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegmentsForDisplay {
        managedObject.backComponentNameSegmentsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegmentsCount' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameSegmentsCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegmentsCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameSegmentsCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegmentsCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegmentsCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameSegmentsCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegmentsCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameSegmentsCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegmentsCount {
        managedObject.frontComponentNameSegmentsCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameSegmentsCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegmentsCount {
        managedObject.frontComponentNameSegmentsCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegmentsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegmentsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegmentsForDisplay {
        managedObject.frontComponentNameSegmentsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegmentsForDisplay {
        managedObject.frontComponentNameSegmentsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValueSegments' transient property
  //····················································································································

  private var mObserversOf_frontComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValueSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValueSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValueSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueSegments {
        managedObject.frontComponentValueSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueSegments {
        managedObject.frontComponentValueSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValueSegmentsCount' transient property
  //····················································································································

  private var mObserversOf_frontComponentValueSegmentsCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValueSegmentsCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValueSegmentsCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegmentsCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueSegmentsCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValueSegmentsCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegmentsCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValueSegmentsCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueSegmentsCount {
        managedObject.frontComponentValueSegmentsCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValueSegmentsCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueSegmentsCount {
        managedObject.frontComponentValueSegmentsCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValuesForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontComponentValuesForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValuesForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValuesForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValuesForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValuesForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValuesForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValuesForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValuesForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValuesForDisplay {
        managedObject.frontComponentValuesForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValuesForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValuesForDisplay {
        managedObject.frontComponentValuesForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValueSegments' transient property
  //····················································································································

  private var mObserversOf_backComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValueSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValueSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValueSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueSegments {
        managedObject.backComponentValueSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueSegments {
        managedObject.backComponentValueSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValueSegmentsCount' transient property
  //····················································································································

  private var mObserversOf_backComponentValueSegmentsCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValueSegmentsCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValueSegmentsCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegmentsCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueSegmentsCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValueSegmentsCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegmentsCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValueSegmentsCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueSegmentsCount {
        managedObject.backComponentValueSegmentsCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValueSegmentsCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueSegmentsCount {
        managedObject.backComponentValueSegmentsCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValuesForDisplay' transient property
  //····················································································································

  private var mObserversOf_backComponentValuesForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValuesForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValuesForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValuesForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValuesForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValuesForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValuesForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValuesForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValuesForDisplay {
        managedObject.backComponentValuesForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValuesForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValuesForDisplay {
        managedObject.backComponentValuesForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTrackSegments' transient property
  //····················································································································

  private var mObserversOf_backTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTrackSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTrackSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTrackSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegments {
        managedObject.backTrackSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTrackSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegments {
        managedObject.backTrackSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTracksSegmentsCount' transient property
  //····················································································································

  private var mObserversOf_backTracksSegmentsCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTracksSegmentsCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTracksSegmentsCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksSegmentsCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracksSegmentsCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTracksSegmentsCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksSegmentsCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTracksSegmentsCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksSegmentsCount {
        managedObject.backTracksSegmentsCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTracksSegmentsCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksSegmentsCount {
        managedObject.backTracksSegmentsCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTrackSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backTrackSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTrackSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegmentsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTrackSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegmentsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTrackSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegmentsForDisplay {
        managedObject.backTrackSegmentsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTrackSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegmentsForDisplay {
        managedObject.backTrackSegmentsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTrackSegments' transient property
  //····················································································································

  private var mObserversOf_frontTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTrackSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTrackSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTrackSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegments {
        managedObject.frontTrackSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTrackSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegments {
        managedObject.frontTrackSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTracksSegmentsCount' transient property
  //····················································································································

  private var mObserversOf_frontTracksSegmentsCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTracksSegmentsCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTracksSegmentsCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksSegmentsCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksSegmentsCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTracksSegmentsCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksSegmentsCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTracksSegmentsCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksSegmentsCount {
        managedObject.frontTracksSegmentsCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTracksSegmentsCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksSegmentsCount {
        managedObject.frontTracksSegmentsCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTrackSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontTrackSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTrackSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegmentsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTrackSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegmentsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTrackSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegmentsForDisplay {
        managedObject.frontTrackSegmentsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTrackSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegmentsForDisplay {
        managedObject.frontTrackSegmentsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesSegments' transient property
  //····················································································································

  private var mObserversOf_frontPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackagesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackagesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegments {
        managedObject.frontPackagesSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegments {
        managedObject.frontPackagesSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackageSegmentsCount' transient property
  //····················································································································

  private var mObserversOf_frontPackageSegmentsCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackageSegmentsCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackageSegmentsCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackageSegmentsCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackageSegmentsCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackageSegmentsCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackageSegmentsCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackageSegmentsCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackageSegmentsCount {
        managedObject.frontPackageSegmentsCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackageSegmentsCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackageSegmentsCount {
        managedObject.frontPackageSegmentsCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontPackagesSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackagesSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegmentsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackagesSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegmentsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegmentsForDisplay {
        managedObject.frontPackagesSegmentsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegmentsForDisplay {
        managedObject.frontPackagesSegmentsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesSegments' transient property
  //····················································································································

  private var mObserversOf_backPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackagesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackagesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegments {
        managedObject.backPackagesSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegments {
        managedObject.backPackagesSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackageSegmentsCount' transient property
  //····················································································································

  private var mObserversOf_backPackageSegmentsCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackageSegmentsCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackageSegmentsCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackageSegmentsCount.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackageSegmentsCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackageSegmentsCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackageSegmentsCount.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackageSegmentsCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackageSegmentsCount {
        managedObject.backPackageSegmentsCount.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackageSegmentsCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackageSegmentsCount {
        managedObject.backPackageSegmentsCount.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backPackagesSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackagesSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegmentsForDisplay.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackagesSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegmentsForDisplay.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegmentsForDisplay {
        managedObject.backPackagesSegmentsForDisplay.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegmentsForDisplay {
        managedObject.backPackagesSegmentsForDisplay.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_BoardModelEntity : ReadOnlyArrayOf_BoardModelEntity {

  var readModelFunction : Optional<() -> EBSelection < [BoardModelEntity] > >

  private var prop_cache : EBSelection < [BoardModelEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <BoardModelEntity> ()

  override var prop : EBSelection < [BoardModelEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <BoardModelEntity>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <BoardModelEntity> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_artworkName_fromElementsOfSet (removedSet)
        removeEBObserversOf_name_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeight_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeightUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendTextsSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLayoutTextsSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendTextsSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLayoutTextsSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_padsHoles_fromElementsOfSet (removedSet)
        removeEBObserversOf_viasHoles_fromElementsOfSet (removedSet)
        removeEBObserversOf_holes_fromElementsOfSet (removedSet)
        removeEBObserversOf_holesForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_viaShapes_fromElementsOfSet (removedSet)
        removeEBObserversOf_viaShapesForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPads_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPadsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPads_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPadsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimits_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameSegmentsCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameSegmentsCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValueSegmentsCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValuesForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValueSegmentsCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValuesForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTrackSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTracksSegmentsCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTrackSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTrackSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTracksSegmentsCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTrackSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackageSegmentsCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackagesSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackagesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackageSegmentsCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackagesSegmentsForDisplay_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_artworkName_toElementsOfSet (addedSet)
        addEBObserversOf_name_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeight_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeightUnit_toElementsOfSet (addedSet)
        addEBObserversOf_zoom_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendTextsSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontLayoutTextsSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendTextsSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backLayoutTextsSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_padsHoles_toElementsOfSet (addedSet)
        addEBObserversOf_viasHoles_toElementsOfSet (addedSet)
        addEBObserversOf_holes_toElementsOfSet (addedSet)
        addEBObserversOf_holesForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_viaShapes_toElementsOfSet (addedSet)
        addEBObserversOf_viaShapesForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontPads_toElementsOfSet (addedSet)
        addEBObserversOf_frontPadsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backPads_toElementsOfSet (addedSet)
        addEBObserversOf_backPadsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimits_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameSegmentsCount_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameSegmentsCount_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValueSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValueSegmentsCount_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValuesForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValueSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValueSegmentsCount_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValuesForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backTrackSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backTracksSegmentsCount_toElementsOfSet (addedSet)
        addEBObserversOf_backTrackSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontTrackSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontTracksSegmentsCount_toElementsOfSet (addedSet)
        addEBObserversOf_frontTrackSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackagesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackageSegmentsCount_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackagesSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backPackagesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backPackageSegmentsCount_toElementsOfSet (addedSet)
        addEBObserversOf_backPackagesSegmentsForDisplay_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_artworkName : class {
  var artworkName : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_name : class {
  var name : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardWidth : class {
  var boardWidth : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardWidthUnit : class {
  var boardWidthUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardHeight : class {
  var boardHeight : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardHeightUnit : class {
  var boardHeightUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_zoom : class {
  var zoom : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardLimitWidth : class {
  var boardLimitWidth : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardLimitWidthUnit : class {
  var boardLimitWidthUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontLegendTextsSegments : class {
  var frontLegendTextsSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontLegendTextsSegmentsForDisplay : class {
  var frontLegendTextsSegmentsForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontLayoutTextsSegments : class {
  var frontLayoutTextsSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontLayoutTextsSegmentsForDisplay : class {
  var frontLayoutTextsSegmentsForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backLegendTextsSegments : class {
  var backLegendTextsSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backLegendTextsSegmentsForDisplay : class {
  var backLegendTextsSegmentsForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backLayoutTextsSegments : class {
  var backLayoutTextsSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backLayoutTextsSegmentsForDisplay : class {
  var backLayoutTextsSegmentsForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_padsHoles : class {
  var padsHoles : EBTransientProperty_MergerHoleArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_viasHoles : class {
  var viasHoles : EBTransientProperty_MergerHoleArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_holes : class {
  var holes : EBTransientProperty_MergerHoleArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_holesForDisplay : class {
  var holesForDisplay : EBTransientProperty_MergerHoleArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_viaShapes : class {
  var viaShapes : EBTransientProperty_MergerViaShapeArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_viaShapesForDisplay : class {
  var viaShapesForDisplay : EBTransientProperty_MergerViaShapeArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPads : class {
  var frontPads : EBTransientProperty_MergerPadArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPadsForDisplay : class {
  var frontPadsForDisplay : EBTransientProperty_MergerPadArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPads : class {
  var backPads : EBTransientProperty_MergerPadArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPadsForDisplay : class {
  var backPadsForDisplay : EBTransientProperty_MergerPadArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardLimits : class {
  var boardLimits : EBTransientProperty_MergerBoardLimits { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentNameSegments : class {
  var backComponentNameSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentNameSegmentsCount : class {
  var backComponentNameSegmentsCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentNameSegmentsForDisplay : class {
  var backComponentNameSegmentsForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentNameSegments : class {
  var frontComponentNameSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentNameSegmentsCount : class {
  var frontComponentNameSegmentsCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentNameSegmentsForDisplay : class {
  var frontComponentNameSegmentsForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentValueSegments : class {
  var frontComponentValueSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentValueSegmentsCount : class {
  var frontComponentValueSegmentsCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentValuesForDisplay : class {
  var frontComponentValuesForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentValueSegments : class {
  var backComponentValueSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentValueSegmentsCount : class {
  var backComponentValueSegmentsCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentValuesForDisplay : class {
  var backComponentValuesForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backTrackSegments : class {
  var backTrackSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backTracksSegmentsCount : class {
  var backTracksSegmentsCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backTrackSegmentsForDisplay : class {
  var backTrackSegmentsForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontTrackSegments : class {
  var frontTrackSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontTracksSegmentsCount : class {
  var frontTracksSegmentsCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontTrackSegmentsForDisplay : class {
  var frontTrackSegmentsForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPackagesSegments : class {
  var frontPackagesSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPackageSegmentsCount : class {
  var frontPackageSegmentsCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPackagesSegmentsForDisplay : class {
  var frontPackagesSegmentsForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPackagesSegments : class {
  var backPackagesSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPackageSegmentsCount : class {
  var backPackageSegmentsCount : EBTransientProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPackagesSegmentsForDisplay : class {
  var backPackagesSegmentsForDisplay : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontLegendTexts : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontLegendTexts :
ToManyRelationshipReadWrite_BoardModelEntity_frontLegendTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontLayoutTexts : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontLayoutTexts :
ToManyRelationshipReadWrite_BoardModelEntity_frontLayoutTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backLegendTexts : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backLegendTexts :
ToManyRelationshipReadWrite_BoardModelEntity_backLegendTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backLayoutTexts : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backLayoutTexts :
ToManyRelationshipReadWrite_BoardModelEntity_backLayoutTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_vias : ReadOnlyArrayOf_BoardModelViaEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelViaEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_vias :
ToManyRelationshipReadWrite_BoardModelEntity_vias, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelViaEntity> ()
  private var mValue = [BoardModelViaEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelViaEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [BoardModelViaEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelViaEntity]) { mValue = value }

  var propval : [BoardModelViaEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelViaEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelViaEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelViaEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: pads
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_pads : ReadOnlyArrayOf_BoardModelPadEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelPadEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: pads
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_pads :
ToManyRelationshipReadWrite_BoardModelEntity_pads, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelPadEntity> ()
  private var mValue = [BoardModelPadEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_height_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_rotation_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_shape_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_side_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelPadEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_height_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_rotation_toElementsOfSet (addedObjectSet)
        addEBObserversOf_shape_toElementsOfSet (addedObjectSet)
        addEBObserversOf_side_toElementsOfSet (addedObjectSet)
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [BoardModelPadEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelPadEntity]) { mValue = value }

  var propval : [BoardModelPadEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelPadEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelPadEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelPadEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backComponentNames : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backComponentNames :
ToManyRelationshipReadWrite_BoardModelEntity_backComponentNames, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontComponentNames : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontComponentNames :
ToManyRelationshipReadWrite_BoardModelEntity_frontComponentNames, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontComponentValues : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontComponentValues :
ToManyRelationshipReadWrite_BoardModelEntity_frontComponentValues, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backComponentValues : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backComponentValues :
ToManyRelationshipReadWrite_BoardModelEntity_backComponentValues, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backTracks : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backTracks :
ToManyRelationshipReadWrite_BoardModelEntity_backTracks, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontTracks : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontTracks :
ToManyRelationshipReadWrite_BoardModelEntity_frontTracks, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontPackages : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontPackages :
ToManyRelationshipReadWrite_BoardModelEntity_frontPackages, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backPackages : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backPackages :
ToManyRelationshipReadWrite_BoardModelEntity_backPackages, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

