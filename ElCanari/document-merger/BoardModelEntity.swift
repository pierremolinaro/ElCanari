//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardModelEntity : EBManagedObject,
  BoardModelEntity_artworkName,
  BoardModelEntity_name,
  BoardModelEntity_modelWidth,
  BoardModelEntity_modelWidthUnit,
  BoardModelEntity_modelHeight,
  BoardModelEntity_modelHeightUnit,
  BoardModelEntity_zoom,
  BoardModelEntity_boardLimitWidth,
  BoardModelEntity_boardLimitWidthUnit,
  BoardModelEntity_instanceCount,
  BoardModelEntity_frontLegendTextsSegments,
  BoardModelEntity_frontLegendTextsLayerDisplay,
  BoardModelEntity_frontLayoutTextsSegments,
  BoardModelEntity_frontLayoutTextsLayerDisplay,
  BoardModelEntity_backLegendTextsSegments,
  BoardModelEntity_backLegendTextsLayerDisplay,
  BoardModelEntity_backLayoutTextsSegments,
  BoardModelEntity_backLayoutTextsLayerDisplay,
  BoardModelEntity_padsHoles,
  BoardModelEntity_viasHoles,
  BoardModelEntity_holes,
  BoardModelEntity_holeLayerDisplay,
  BoardModelEntity_viaShapes,
  BoardModelEntity_viaLayerDisplay,
  BoardModelEntity_frontPads,
  BoardModelEntity_frontPadsDisplay,
  BoardModelEntity_backPads,
  BoardModelEntity_backPadsDisplay,
  BoardModelEntity_boardLimits,
  BoardModelEntity_boardLimitsDisplay,
  BoardModelEntity_backComponentNameSegments,
  BoardModelEntity_backComponentNameDisplay,
  BoardModelEntity_frontComponentNameSegments,
  BoardModelEntity_frontComponentNameDisplay,
  BoardModelEntity_frontComponentValueSegments,
  BoardModelEntity_frontComponentValueDisplay,
  BoardModelEntity_backComponentValueSegments,
  BoardModelEntity_backComponentValueDisplay,
  BoardModelEntity_backTrackSegments,
  BoardModelEntity_backTracksDisplay,
  BoardModelEntity_frontTrackSegments,
  BoardModelEntity_frontTracksDisplay,
  BoardModelEntity_frontPackagesSegments,
  BoardModelEntity_frontPackagesDisplay,
  BoardModelEntity_backPackagesSegments,
  BoardModelEntity_backPackagesDisplay,
  BoardModelEntity_modelLayerDisplay {

  //····················································································································
  //   Accessing artworkName stored property
  //····················································································································

  var artworkName : String {
    get {
      return self.artworkName_property.propval
    }
    set {
      self.artworkName_property.setProp (newValue)
    }
  }

  var artworkName_property_selection : EBSelection <String> {
    get {
      return self.artworkName_property.prop
    }
  }

  //····················································································································
  //   Accessing name stored property
  //····················································································································

  var name : String {
    get {
      return self.name_property.propval
    }
    set {
      self.name_property.setProp (newValue)
    }
  }

  var name_property_selection : EBSelection <String> {
    get {
      return self.name_property.prop
    }
  }

  //····················································································································
  //   Accessing modelWidth stored property
  //····················································································································

  var modelWidth : Int {
    get {
      return self.modelWidth_property.propval
    }
    set {
      self.modelWidth_property.setProp (newValue)
    }
  }

  var modelWidth_property_selection : EBSelection <Int> {
    get {
      return self.modelWidth_property.prop
    }
  }

  //····················································································································
  //   Accessing modelWidthUnit stored property
  //····················································································································

  var modelWidthUnit : Int {
    get {
      return self.modelWidthUnit_property.propval
    }
    set {
      self.modelWidthUnit_property.setProp (newValue)
    }
  }

  var modelWidthUnit_property_selection : EBSelection <Int> {
    get {
      return self.modelWidthUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing modelHeight stored property
  //····················································································································

  var modelHeight : Int {
    get {
      return self.modelHeight_property.propval
    }
    set {
      self.modelHeight_property.setProp (newValue)
    }
  }

  var modelHeight_property_selection : EBSelection <Int> {
    get {
      return self.modelHeight_property.prop
    }
  }

  //····················································································································
  //   Accessing modelHeightUnit stored property
  //····················································································································

  var modelHeightUnit : Int {
    get {
      return self.modelHeightUnit_property.propval
    }
    set {
      self.modelHeightUnit_property.setProp (newValue)
    }
  }

  var modelHeightUnit_property_selection : EBSelection <Int> {
    get {
      return self.modelHeightUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing zoom stored property
  //····················································································································

  var zoom : Int {
    get {
      return self.zoom_property.propval
    }
    set {
      self.zoom_property.setProp (newValue)
    }
  }

  var zoom_property_selection : EBSelection <Int> {
    get {
      return self.zoom_property.prop
    }
  }

  //····················································································································
  //   Accessing boardLimitWidth stored property
  //····················································································································

  var boardLimitWidth : Int {
    get {
      return self.boardLimitWidth_property.propval
    }
    set {
      self.boardLimitWidth_property.setProp (newValue)
    }
  }

  var boardLimitWidth_property_selection : EBSelection <Int> {
    get {
      return self.boardLimitWidth_property.prop
    }
  }

  //····················································································································
  //   Accessing boardLimitWidthUnit stored property
  //····················································································································

  var boardLimitWidthUnit : Int {
    get {
      return self.boardLimitWidthUnit_property.propval
    }
    set {
      self.boardLimitWidthUnit_property.setProp (newValue)
    }
  }

  var boardLimitWidthUnit_property_selection : EBSelection <Int> {
    get {
      return self.boardLimitWidthUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing instanceCount transient property
  //····················································································································

  var instanceCount_property_selection : EBSelection <Int> {
    get {
      return self.instanceCount_property.prop
    }
  }

  var instanceCount : EBSelection <Int> {
    get {
      return instanceCount_property_selection
    }
  }

  //····················································································································
  //   Accessing frontLegendTextsSegments transient property
  //····················································································································

  var frontLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLegendTextsSegments_property.prop
    }
  }

  var frontLegendTextsSegments : EBSelection <MergerSegmentArray> {
    get {
      return frontLegendTextsSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing frontLegendTextsLayerDisplay transient property
  //····················································································································

  var frontLegendTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontLegendTextsLayerDisplay_property.prop
    }
  }

  var frontLegendTextsLayerDisplay : EBSelection <CALayer> {
    get {
      return frontLegendTextsLayerDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing frontLayoutTextsSegments transient property
  //····················································································································

  var frontLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLayoutTextsSegments_property.prop
    }
  }

  var frontLayoutTextsSegments : EBSelection <MergerSegmentArray> {
    get {
      return frontLayoutTextsSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing frontLayoutTextsLayerDisplay transient property
  //····················································································································

  var frontLayoutTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontLayoutTextsLayerDisplay_property.prop
    }
  }

  var frontLayoutTextsLayerDisplay : EBSelection <CALayer> {
    get {
      return frontLayoutTextsLayerDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backLegendTextsSegments transient property
  //····················································································································

  var backLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backLegendTextsSegments_property.prop
    }
  }

  var backLegendTextsSegments : EBSelection <MergerSegmentArray> {
    get {
      return backLegendTextsSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing backLegendTextsLayerDisplay transient property
  //····················································································································

  var backLegendTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backLegendTextsLayerDisplay_property.prop
    }
  }

  var backLegendTextsLayerDisplay : EBSelection <CALayer> {
    get {
      return backLegendTextsLayerDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backLayoutTextsSegments transient property
  //····················································································································

  var backLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backLayoutTextsSegments_property.prop
    }
  }

  var backLayoutTextsSegments : EBSelection <MergerSegmentArray> {
    get {
      return backLayoutTextsSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing backLayoutTextsLayerDisplay transient property
  //····················································································································

  var backLayoutTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backLayoutTextsLayerDisplay_property.prop
    }
  }

  var backLayoutTextsLayerDisplay : EBSelection <CALayer> {
    get {
      return backLayoutTextsLayerDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing padsHoles transient property
  //····················································································································

  var padsHoles_property_selection : EBSelection <MergerHoleArray> {
    get {
      return self.padsHoles_property.prop
    }
  }

  var padsHoles : EBSelection <MergerHoleArray> {
    get {
      return padsHoles_property_selection
    }
  }

  //····················································································································
  //   Accessing viasHoles transient property
  //····················································································································

  var viasHoles_property_selection : EBSelection <MergerHoleArray> {
    get {
      return self.viasHoles_property.prop
    }
  }

  var viasHoles : EBSelection <MergerHoleArray> {
    get {
      return viasHoles_property_selection
    }
  }

  //····················································································································
  //   Accessing holes transient property
  //····················································································································

  var holes_property_selection : EBSelection <MergerHoleArray> {
    get {
      return self.holes_property.prop
    }
  }

  var holes : EBSelection <MergerHoleArray> {
    get {
      return holes_property_selection
    }
  }

  //····················································································································
  //   Accessing holeLayerDisplay transient property
  //····················································································································

  var holeLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.holeLayerDisplay_property.prop
    }
  }

  var holeLayerDisplay : EBSelection <CALayer> {
    get {
      return holeLayerDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing viaShapes transient property
  //····················································································································

  var viaShapes_property_selection : EBSelection <MergerViaShapeArray> {
    get {
      return self.viaShapes_property.prop
    }
  }

  var viaShapes : EBSelection <MergerViaShapeArray> {
    get {
      return viaShapes_property_selection
    }
  }

  //····················································································································
  //   Accessing viaLayerDisplay transient property
  //····················································································································

  var viaLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.viaLayerDisplay_property.prop
    }
  }

  var viaLayerDisplay : EBSelection <CALayer> {
    get {
      return viaLayerDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing frontPads transient property
  //····················································································································

  var frontPads_property_selection : EBSelection <MergerPadArray> {
    get {
      return self.frontPads_property.prop
    }
  }

  var frontPads : EBSelection <MergerPadArray> {
    get {
      return frontPads_property_selection
    }
  }

  //····················································································································
  //   Accessing frontPadsDisplay transient property
  //····················································································································

  var frontPadsDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontPadsDisplay_property.prop
    }
  }

  var frontPadsDisplay : EBSelection <CALayer> {
    get {
      return frontPadsDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backPads transient property
  //····················································································································

  var backPads_property_selection : EBSelection <MergerPadArray> {
    get {
      return self.backPads_property.prop
    }
  }

  var backPads : EBSelection <MergerPadArray> {
    get {
      return backPads_property_selection
    }
  }

  //····················································································································
  //   Accessing backPadsDisplay transient property
  //····················································································································

  var backPadsDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backPadsDisplay_property.prop
    }
  }

  var backPadsDisplay : EBSelection <CALayer> {
    get {
      return backPadsDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing boardLimits transient property
  //····················································································································

  var boardLimits_property_selection : EBSelection <MergerBoardLimits> {
    get {
      return self.boardLimits_property.prop
    }
  }

  var boardLimits : EBSelection <MergerBoardLimits> {
    get {
      return boardLimits_property_selection
    }
  }

  //····················································································································
  //   Accessing boardLimitsDisplay transient property
  //····················································································································

  var boardLimitsDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.boardLimitsDisplay_property.prop
    }
  }

  var boardLimitsDisplay : EBSelection <CALayer> {
    get {
      return boardLimitsDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backComponentNameSegments transient property
  //····················································································································

  var backComponentNameSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backComponentNameSegments_property.prop
    }
  }

  var backComponentNameSegments : EBSelection <MergerSegmentArray> {
    get {
      return backComponentNameSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing backComponentNameDisplay transient property
  //····················································································································

  var backComponentNameDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backComponentNameDisplay_property.prop
    }
  }

  var backComponentNameDisplay : EBSelection <CALayer> {
    get {
      return backComponentNameDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing frontComponentNameSegments transient property
  //····················································································································

  var frontComponentNameSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontComponentNameSegments_property.prop
    }
  }

  var frontComponentNameSegments : EBSelection <MergerSegmentArray> {
    get {
      return frontComponentNameSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing frontComponentNameDisplay transient property
  //····················································································································

  var frontComponentNameDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontComponentNameDisplay_property.prop
    }
  }

  var frontComponentNameDisplay : EBSelection <CALayer> {
    get {
      return frontComponentNameDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing frontComponentValueSegments transient property
  //····················································································································

  var frontComponentValueSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontComponentValueSegments_property.prop
    }
  }

  var frontComponentValueSegments : EBSelection <MergerSegmentArray> {
    get {
      return frontComponentValueSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing frontComponentValueDisplay transient property
  //····················································································································

  var frontComponentValueDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontComponentValueDisplay_property.prop
    }
  }

  var frontComponentValueDisplay : EBSelection <CALayer> {
    get {
      return frontComponentValueDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backComponentValueSegments transient property
  //····················································································································

  var backComponentValueSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backComponentValueSegments_property.prop
    }
  }

  var backComponentValueSegments : EBSelection <MergerSegmentArray> {
    get {
      return backComponentValueSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing backComponentValueDisplay transient property
  //····················································································································

  var backComponentValueDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backComponentValueDisplay_property.prop
    }
  }

  var backComponentValueDisplay : EBSelection <CALayer> {
    get {
      return backComponentValueDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backTrackSegments transient property
  //····················································································································

  var backTrackSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backTrackSegments_property.prop
    }
  }

  var backTrackSegments : EBSelection <MergerSegmentArray> {
    get {
      return backTrackSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing backTracksDisplay transient property
  //····················································································································

  var backTracksDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backTracksDisplay_property.prop
    }
  }

  var backTracksDisplay : EBSelection <CALayer> {
    get {
      return backTracksDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing frontTrackSegments transient property
  //····················································································································

  var frontTrackSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontTrackSegments_property.prop
    }
  }

  var frontTrackSegments : EBSelection <MergerSegmentArray> {
    get {
      return frontTrackSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing frontTracksDisplay transient property
  //····················································································································

  var frontTracksDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontTracksDisplay_property.prop
    }
  }

  var frontTracksDisplay : EBSelection <CALayer> {
    get {
      return frontTracksDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing frontPackagesSegments transient property
  //····················································································································

  var frontPackagesSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontPackagesSegments_property.prop
    }
  }

  var frontPackagesSegments : EBSelection <MergerSegmentArray> {
    get {
      return frontPackagesSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing frontPackagesDisplay transient property
  //····················································································································

  var frontPackagesDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontPackagesDisplay_property.prop
    }
  }

  var frontPackagesDisplay : EBSelection <CALayer> {
    get {
      return frontPackagesDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backPackagesSegments transient property
  //····················································································································

  var backPackagesSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backPackagesSegments_property.prop
    }
  }

  var backPackagesSegments : EBSelection <MergerSegmentArray> {
    get {
      return backPackagesSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing backPackagesDisplay transient property
  //····················································································································

  var backPackagesDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backPackagesDisplay_property.prop
    }
  }

  var backPackagesDisplay : EBSelection <CALayer> {
    get {
      return backPackagesDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing modelLayerDisplay transient property
  //····················································································································

  var modelLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.modelLayerDisplay_property.prop
    }
  }

  var modelLayerDisplay : EBSelection <CALayer> {
    get {
      return modelLayerDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing myInstances toMany relationship
  //····················································································································

  var myInstances_property_selection : EBSelection < [MergerBoardInstanceEntity] > {
    get {
      return self.myInstances_property.prop
    }
  }

  //····················································································································
  //   Accessing frontLegendTexts toMany relationship
  //····················································································································

  var frontLegendTexts_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.frontLegendTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing frontLayoutTexts toMany relationship
  //····················································································································

  var frontLayoutTexts_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.frontLayoutTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing backLegendTexts toMany relationship
  //····················································································································

  var backLegendTexts_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.backLegendTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing backLayoutTexts toMany relationship
  //····················································································································

  var backLayoutTexts_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.backLayoutTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing vias toMany relationship
  //····················································································································

  var vias_property_selection : EBSelection < [BoardModelViaEntity] > {
    get {
      return self.vias_property.prop
    }
  }

  //····················································································································
  //   Accessing pads toMany relationship
  //····················································································································

  var pads_property_selection : EBSelection < [BoardModelPadEntity] > {
    get {
      return self.pads_property.prop
    }
  }

  //····················································································································
  //   Accessing backComponentNames toMany relationship
  //····················································································································

  var backComponentNames_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.backComponentNames_property.prop
    }
  }

  //····················································································································
  //   Accessing frontComponentNames toMany relationship
  //····················································································································

  var frontComponentNames_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.frontComponentNames_property.prop
    }
  }

  //····················································································································
  //   Accessing frontComponentValues toMany relationship
  //····················································································································

  var frontComponentValues_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.frontComponentValues_property.prop
    }
  }

  //····················································································································
  //   Accessing backComponentValues toMany relationship
  //····················································································································

  var backComponentValues_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.backComponentValues_property.prop
    }
  }

  //····················································································································
  //   Accessing backTracks toMany relationship
  //····················································································································

  var backTracks_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.backTracks_property.prop
    }
  }

  //····················································································································
  //   Accessing frontTracks toMany relationship
  //····················································································································

  var frontTracks_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.frontTracks_property.prop
    }
  }

  //····················································································································
  //   Accessing frontPackages toMany relationship
  //····················································································································

  var frontPackages_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.frontPackages_property.prop
    }
  }

  //····················································································································
  //   Accessing backPackages toMany relationship
  //····················································································································

  var backPackages_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.backPackages_property.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var artworkName_property = EBStoredProperty_String ("")
  var name_property = EBStoredProperty_String ("")
  var modelWidth_property = EBStoredProperty_Int (0)
  var modelWidthUnit_property = EBStoredProperty_Int (0)
  var modelHeight_property = EBStoredProperty_Int (0)
  var modelHeightUnit_property = EBStoredProperty_Int (0)
  var zoom_property = EBStoredProperty_Int (0)
  var boardLimitWidth_property = EBStoredProperty_Int (0)
  var boardLimitWidthUnit_property = EBStoredProperty_Int (0)

  //····················································································································
  //    Transient properties
  //····················································································································

  var instanceCount_property = EBTransientProperty_Int ()
  var frontLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontLegendTextsLayerDisplay_property = EBTransientProperty_CALayer ()
  var frontLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontLayoutTextsLayerDisplay_property = EBTransientProperty_CALayer ()
  var backLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backLegendTextsLayerDisplay_property = EBTransientProperty_CALayer ()
  var backLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backLayoutTextsLayerDisplay_property = EBTransientProperty_CALayer ()
  var padsHoles_property = EBTransientProperty_MergerHoleArray ()
  var viasHoles_property = EBTransientProperty_MergerHoleArray ()
  var holes_property = EBTransientProperty_MergerHoleArray ()
  var holeLayerDisplay_property = EBTransientProperty_CALayer ()
  var viaShapes_property = EBTransientProperty_MergerViaShapeArray ()
  var viaLayerDisplay_property = EBTransientProperty_CALayer ()
  var frontPads_property = EBTransientProperty_MergerPadArray ()
  var frontPadsDisplay_property = EBTransientProperty_CALayer ()
  var backPads_property = EBTransientProperty_MergerPadArray ()
  var backPadsDisplay_property = EBTransientProperty_CALayer ()
  var boardLimits_property = EBTransientProperty_MergerBoardLimits ()
  var boardLimitsDisplay_property = EBTransientProperty_CALayer ()
  var backComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backComponentNameDisplay_property = EBTransientProperty_CALayer ()
  var frontComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontComponentNameDisplay_property = EBTransientProperty_CALayer ()
  var frontComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontComponentValueDisplay_property = EBTransientProperty_CALayer ()
  var backComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backComponentValueDisplay_property = EBTransientProperty_CALayer ()
  var backTrackSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backTracksDisplay_property = EBTransientProperty_CALayer ()
  var frontTrackSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontTracksDisplay_property = EBTransientProperty_CALayer ()
  var frontPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontPackagesDisplay_property = EBTransientProperty_CALayer ()
  var backPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backPackagesDisplay_property = EBTransientProperty_CALayer ()
  var modelLayerDisplay_property = EBTransientProperty_CALayer ()

  //····················································································································
  //    Relationships
  //····················································································································

  var myInstances_property = ToManyRelationship_BoardModelEntity_myInstances ()
  var frontLegendTexts_property = ToManyRelationship_BoardModelEntity_frontLegendTexts ()
  var frontLayoutTexts_property = ToManyRelationship_BoardModelEntity_frontLayoutTexts ()
  var backLegendTexts_property = ToManyRelationship_BoardModelEntity_backLegendTexts ()
  var backLayoutTexts_property = ToManyRelationship_BoardModelEntity_backLayoutTexts ()
  var vias_property = ToManyRelationship_BoardModelEntity_vias ()
  var pads_property = ToManyRelationship_BoardModelEntity_pads ()
  var backComponentNames_property = ToManyRelationship_BoardModelEntity_backComponentNames ()
  var frontComponentNames_property = ToManyRelationship_BoardModelEntity_frontComponentNames ()
  var frontComponentValues_property = ToManyRelationship_BoardModelEntity_frontComponentValues ()
  var backComponentValues_property = ToManyRelationship_BoardModelEntity_backComponentValues ()
  var backTracks_property = ToManyRelationship_BoardModelEntity_backTracks ()
  var frontTracks_property = ToManyRelationship_BoardModelEntity_frontTracks ()
  var frontPackages_property = ToManyRelationship_BoardModelEntity_frontPackages ()
  var backPackages_property = ToManyRelationship_BoardModelEntity_backPackages ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    self.instanceCount_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.myInstances_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.myInstances_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (v0)
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontLegendTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTextsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontLegendTexts_property_selection, unwSelf.frontLegendTextsSegments_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontLegendTextsLayerDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontLayoutTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTextsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontLayoutTexts_property_selection, unwSelf.frontLayoutTextsSegments_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontLayoutTextsLayerDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backLegendTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendTextsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackLegendTexts_property_selection, unwSelf.backLegendTextsSegments_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backLegendTextsLayerDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backLayoutTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTextsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackLayoutTexts_property_selection, unwSelf.backLayoutTextsSegments_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backLayoutTextsLayerDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padsHoles_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModelEntity_padsHoles (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viasHoles_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.vias_property_selection, unwSelf.vias_property_selection, unwSelf.vias_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModelEntity_viasHoles (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.holes_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.padsHoles_property_selection.kind ()
        kind &= unwSelf.viasHoles_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.padsHoles_property_selection, unwSelf.viasHoles_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_holes (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.holeLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayHoles_property_selection.kind ()
        kind &= unwSelf.holes_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayHoles_property_selection, unwSelf.holes_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_holeLayerDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viaShapes_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.vias_property_selection, unwSelf.vias_property_selection, unwSelf.vias_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModelEntity_viaShapes (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viaLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayVias_property_selection.kind ()
        kind &= unwSelf.viaShapes_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayVias_property_selection, unwSelf.viaShapes_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_viaLayerDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPads_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (compute_BoardModelEntity_frontPads (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPadsDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontPads_property_selection, unwSelf.frontPads_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontPadsDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPads_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (compute_BoardModelEntity_backPads (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPadsDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackPads_property_selection, unwSelf.backPads_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backPadsDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardLimits_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        kind &= unwSelf.boardLimitWidth_property_selection.kind ()
        kind &= g_Preferences!.mergerDisplayBoardLimits_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection, unwSelf.boardLimitWidth_property_selection, g_Preferences!.mergerDisplayBoardLimits_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (compute_BoardModelEntity_boardLimits (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardLimitsDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBoardLimits_property_selection.kind ()
        kind &= unwSelf.boardLimits_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBoardLimits_property_selection, unwSelf.boardLimits_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_boardLimitsDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentNameSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentNameDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNameSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackComponentNames_property_selection, unwSelf.backComponentNameSegments_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backComponentNameDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNameSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNameDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNameSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontComponentNames_property_selection, unwSelf.frontComponentNameSegments_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontComponentNameDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValueSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontComponentValueSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValueDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValueSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontComponentValues_property_selection, unwSelf.frontComponentValueSegments_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontComponentValueDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentValueSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backComponentValueSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentValueDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValueSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackComponentValues_property_selection, unwSelf.backComponentValueSegments_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backComponentValueDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backTrackSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backTracksDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackLayoutTracks_property_selection.kind ()
        kind &= unwSelf.backTrackSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackLayoutTracks_property_selection, unwSelf.backTrackSegments_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backTracksDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontTrackSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontTracksDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontLayoutTracks_property_selection.kind ()
        kind &= unwSelf.frontTrackSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontLayoutTracks_property_selection, unwSelf.frontTrackSegments_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontTracksDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPackagesSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontPackagesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPackagesDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackagesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontPackages_property_selection, unwSelf.frontPackagesSegments_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontPackagesDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPackagesSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backPackagesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPackagesDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackPackages_property_selection.kind ()
        kind &= unwSelf.backPackagesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackPackages_property_selection, unwSelf.backPackagesSegments_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backPackagesDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.modelLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLegendTextsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.backLayoutTextsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.frontLegendTextsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.frontLayoutTextsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.holeLayerDisplay_property_selection.kind ()
        kind &= unwSelf.viaLayerDisplay_property_selection.kind ()
        kind &= unwSelf.frontPadsDisplay_property_selection.kind ()
        kind &= unwSelf.backPadsDisplay_property_selection.kind ()
        kind &= unwSelf.boardLimitsDisplay_property_selection.kind ()
        kind &= unwSelf.backComponentNameDisplay_property_selection.kind ()
        kind &= unwSelf.frontComponentNameDisplay_property_selection.kind ()
        kind &= unwSelf.frontComponentValueDisplay_property_selection.kind ()
        kind &= unwSelf.backComponentValueDisplay_property_selection.kind ()
        kind &= unwSelf.backTracksDisplay_property_selection.kind ()
        kind &= unwSelf.frontTracksDisplay_property_selection.kind ()
        kind &= unwSelf.frontPackagesDisplay_property_selection.kind ()
        kind &= unwSelf.backPackagesDisplay_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLegendTextsLayerDisplay_property_selection, unwSelf.backLayoutTextsLayerDisplay_property_selection, unwSelf.frontLegendTextsLayerDisplay_property_selection, unwSelf.frontLayoutTextsLayerDisplay_property_selection, unwSelf.holeLayerDisplay_property_selection, unwSelf.viaLayerDisplay_property_selection, unwSelf.frontPadsDisplay_property_selection, unwSelf.backPadsDisplay_property_selection, unwSelf.boardLimitsDisplay_property_selection, unwSelf.backComponentNameDisplay_property_selection, unwSelf.frontComponentNameDisplay_property_selection, unwSelf.frontComponentValueDisplay_property_selection, unwSelf.backComponentValueDisplay_property_selection, unwSelf.backTracksDisplay_property_selection, unwSelf.frontTracksDisplay_property_selection, unwSelf.frontPackagesDisplay_property_selection, unwSelf.backPackagesDisplay_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16)) :
            return .single (compute_BoardModelEntity_modelLayerDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--- Install property observers for transients
    self.myInstances_property.addEBObserver (self.instanceCount_property)
    self.frontLegendTexts_property.addEBObserverOf_x1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_y1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_x2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_y2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_width (self.frontLegendTextsSegments_property)
    g_Preferences?.mergerDisplayFrontLegendTexts_property.addEBObserver (self.frontLegendTextsLayerDisplay_property)
    self.frontLegendTextsSegments_property.addEBObserver (self.frontLegendTextsLayerDisplay_property)
    self.frontLayoutTexts_property.addEBObserverOf_x1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_y1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_x2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_y2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_width (self.frontLayoutTextsSegments_property)
    g_Preferences?.mergerDisplayFrontLayoutTexts_property.addEBObserver (self.frontLayoutTextsLayerDisplay_property)
    self.frontLayoutTextsSegments_property.addEBObserver (self.frontLayoutTextsLayerDisplay_property)
    self.backLegendTexts_property.addEBObserverOf_x1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_y1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_x2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_y2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_width (self.backLegendTextsSegments_property)
    g_Preferences?.mergerDisplayBackLegendTexts_property.addEBObserver (self.backLegendTextsLayerDisplay_property)
    self.backLegendTextsSegments_property.addEBObserver (self.backLegendTextsLayerDisplay_property)
    self.backLayoutTexts_property.addEBObserverOf_x1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_y1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_x2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_y2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_width (self.backLayoutTextsSegments_property)
    g_Preferences?.mergerDisplayBackLayoutTexts_property.addEBObserver (self.backLayoutTextsLayerDisplay_property)
    self.backLayoutTextsSegments_property.addEBObserver (self.backLayoutTextsLayerDisplay_property)
    self.pads_property.addEBObserverOf_x (self.padsHoles_property)
    self.pads_property.addEBObserverOf_y (self.padsHoles_property)
    self.pads_property.addEBObserverOf_holeDiameter (self.padsHoles_property)
    self.vias_property.addEBObserverOf_x (self.viasHoles_property)
    self.vias_property.addEBObserverOf_y (self.viasHoles_property)
    self.vias_property.addEBObserverOf_holeDiameter (self.viasHoles_property)
    self.padsHoles_property.addEBObserver (self.holes_property)
    self.viasHoles_property.addEBObserver (self.holes_property)
    g_Preferences?.mergerDisplayHoles_property.addEBObserver (self.holeLayerDisplay_property)
    self.holes_property.addEBObserver (self.holeLayerDisplay_property)
    self.vias_property.addEBObserverOf_x (self.viaShapes_property)
    self.vias_property.addEBObserverOf_y (self.viaShapes_property)
    self.vias_property.addEBObserverOf_padDiameter (self.viaShapes_property)
    g_Preferences?.mergerDisplayVias_property.addEBObserver (self.viaLayerDisplay_property)
    self.viaShapes_property.addEBObserver (self.viaLayerDisplay_property)
    self.pads_property.addEBObserverOf_x (self.frontPads_property)
    self.pads_property.addEBObserverOf_y (self.frontPads_property)
    self.pads_property.addEBObserverOf_width (self.frontPads_property)
    self.pads_property.addEBObserverOf_height (self.frontPads_property)
    self.pads_property.addEBObserverOf_holeDiameter (self.frontPads_property)
    self.pads_property.addEBObserverOf_shape (self.frontPads_property)
    self.pads_property.addEBObserverOf_side (self.frontPads_property)
    self.pads_property.addEBObserverOf_rotation (self.frontPads_property)
    g_Preferences?.mergerDisplayFrontPads_property.addEBObserver (self.frontPadsDisplay_property)
    self.frontPads_property.addEBObserver (self.frontPadsDisplay_property)
    self.pads_property.addEBObserverOf_x (self.backPads_property)
    self.pads_property.addEBObserverOf_y (self.backPads_property)
    self.pads_property.addEBObserverOf_width (self.backPads_property)
    self.pads_property.addEBObserverOf_height (self.backPads_property)
    self.pads_property.addEBObserverOf_holeDiameter (self.backPads_property)
    self.pads_property.addEBObserverOf_shape (self.backPads_property)
    self.pads_property.addEBObserverOf_side (self.backPads_property)
    self.pads_property.addEBObserverOf_rotation (self.backPads_property)
    g_Preferences?.mergerDisplayBackPads_property.addEBObserver (self.backPadsDisplay_property)
    self.backPads_property.addEBObserver (self.backPadsDisplay_property)
    self.modelWidth_property.addEBObserver (self.boardLimits_property)
    self.modelHeight_property.addEBObserver (self.boardLimits_property)
    self.boardLimitWidth_property.addEBObserver (self.boardLimits_property)
    g_Preferences?.mergerDisplayBoardLimits_property.addEBObserver (self.boardLimits_property)
    g_Preferences?.mergerDisplayBoardLimits_property.addEBObserver (self.boardLimitsDisplay_property)
    self.boardLimits_property.addEBObserver (self.boardLimitsDisplay_property)
    self.backComponentNames_property.addEBObserverOf_x1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_y1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_x2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_y2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_width (self.backComponentNameSegments_property)
    g_Preferences?.mergerDisplayBackComponentNames_property.addEBObserver (self.backComponentNameDisplay_property)
    self.backComponentNameSegments_property.addEBObserver (self.backComponentNameDisplay_property)
    self.frontComponentNames_property.addEBObserverOf_x1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_y1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_x2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_y2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_width (self.frontComponentNameSegments_property)
    g_Preferences?.mergerDisplayFrontComponentNames_property.addEBObserver (self.frontComponentNameDisplay_property)
    self.frontComponentNameSegments_property.addEBObserver (self.frontComponentNameDisplay_property)
    self.frontComponentValues_property.addEBObserverOf_x1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_y1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_x2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_y2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_width (self.frontComponentValueSegments_property)
    g_Preferences?.mergerDisplayFrontComponentValues_property.addEBObserver (self.frontComponentValueDisplay_property)
    self.frontComponentValueSegments_property.addEBObserver (self.frontComponentValueDisplay_property)
    self.backComponentValues_property.addEBObserverOf_x1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_y1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_x2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_y2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_width (self.backComponentValueSegments_property)
    g_Preferences?.mergerDisplayBackComponentValues_property.addEBObserver (self.backComponentValueDisplay_property)
    self.backComponentValueSegments_property.addEBObserver (self.backComponentValueDisplay_property)
    self.backTracks_property.addEBObserverOf_x1 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_y1 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_x2 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_y2 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_width (self.backTrackSegments_property)
    g_Preferences?.mergerDisplayBackLayoutTracks_property.addEBObserver (self.backTracksDisplay_property)
    self.backTrackSegments_property.addEBObserver (self.backTracksDisplay_property)
    self.frontTracks_property.addEBObserverOf_x1 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_y1 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_x2 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_y2 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_width (self.frontTrackSegments_property)
    g_Preferences?.mergerDisplayFrontLayoutTracks_property.addEBObserver (self.frontTracksDisplay_property)
    self.frontTrackSegments_property.addEBObserver (self.frontTracksDisplay_property)
    self.frontPackages_property.addEBObserverOf_x1 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_y1 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_x2 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_y2 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_width (self.frontPackagesSegments_property)
    g_Preferences?.mergerDisplayFrontPackages_property.addEBObserver (self.frontPackagesDisplay_property)
    self.frontPackagesSegments_property.addEBObserver (self.frontPackagesDisplay_property)
    self.backPackages_property.addEBObserverOf_x1 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_y1 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_x2 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_y2 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_width (self.backPackagesSegments_property)
    g_Preferences?.mergerDisplayBackPackages_property.addEBObserver (self.backPackagesDisplay_property)
    self.backPackagesSegments_property.addEBObserver (self.backPackagesDisplay_property)
    self.backLegendTextsLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backLayoutTextsLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontLegendTextsLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontLayoutTextsLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.holeLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.viaLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontPadsDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backPadsDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.boardLimitsDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backComponentNameDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontComponentNameDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontComponentValueDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backComponentValueDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backTracksDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontTracksDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontPackagesDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backPackagesDisplay_property.addEBObserver (self.modelLayerDisplay_property)
  //--- Install undoers for properties
    self.artworkName_property.undoManager = undoManager ()
    self.name_property.undoManager = undoManager ()
    self.modelWidth_property.undoManager = undoManager ()
    self.modelWidthUnit_property.undoManager = undoManager ()
    self.modelHeight_property.undoManager = undoManager ()
    self.modelHeightUnit_property.undoManager = undoManager ()
    self.zoom_property.undoManager = undoManager ()
    self.boardLimitWidth_property.undoManager = undoManager ()
    self.boardLimitWidthUnit_property.undoManager = undoManager ()
  //--- Install owner for relationships
    self.myInstances_property.owner = self
    self.frontLegendTexts_property.owner = self
    self.frontLayoutTexts_property.owner = self
    self.backLegendTexts_property.owner = self
    self.backLayoutTexts_property.owner = self
    self.vias_property.owner = self
    self.pads_property.owner = self
    self.backComponentNames_property.owner = self
    self.frontComponentNames_property.owner = self
    self.frontComponentValues_property.owner = self
    self.backComponentValues_property.owner = self
    self.backTracks_property.owner = self
    self.frontTracks_property.owner = self
    self.frontPackages_property.owner = self
    self.backPackages_property.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.myInstances_property.removeEBObserver (self.instanceCount_property)
    self.frontLegendTexts_property.removeEBObserverOf_x1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_y1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_x2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_y2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_width (self.frontLegendTextsSegments_property)
    g_Preferences?.mergerDisplayFrontLegendTexts_property.removeEBObserver (self.frontLegendTextsLayerDisplay_property)
    self.frontLegendTextsSegments_property.removeEBObserver (self.frontLegendTextsLayerDisplay_property)
    self.frontLayoutTexts_property.removeEBObserverOf_x1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_y1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_x2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_y2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_width (self.frontLayoutTextsSegments_property)
    g_Preferences?.mergerDisplayFrontLayoutTexts_property.removeEBObserver (self.frontLayoutTextsLayerDisplay_property)
    self.frontLayoutTextsSegments_property.removeEBObserver (self.frontLayoutTextsLayerDisplay_property)
    self.backLegendTexts_property.removeEBObserverOf_x1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_y1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_x2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_y2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_width (self.backLegendTextsSegments_property)
    g_Preferences?.mergerDisplayBackLegendTexts_property.removeEBObserver (self.backLegendTextsLayerDisplay_property)
    self.backLegendTextsSegments_property.removeEBObserver (self.backLegendTextsLayerDisplay_property)
    self.backLayoutTexts_property.removeEBObserverOf_x1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_y1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_x2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_y2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_width (self.backLayoutTextsSegments_property)
    g_Preferences?.mergerDisplayBackLayoutTexts_property.removeEBObserver (self.backLayoutTextsLayerDisplay_property)
    self.backLayoutTextsSegments_property.removeEBObserver (self.backLayoutTextsLayerDisplay_property)
    self.pads_property.removeEBObserverOf_x (self.padsHoles_property)
    self.pads_property.removeEBObserverOf_y (self.padsHoles_property)
    self.pads_property.removeEBObserverOf_holeDiameter (self.padsHoles_property)
    self.vias_property.removeEBObserverOf_x (self.viasHoles_property)
    self.vias_property.removeEBObserverOf_y (self.viasHoles_property)
    self.vias_property.removeEBObserverOf_holeDiameter (self.viasHoles_property)
    self.padsHoles_property.removeEBObserver (self.holes_property)
    self.viasHoles_property.removeEBObserver (self.holes_property)
    g_Preferences?.mergerDisplayHoles_property.removeEBObserver (self.holeLayerDisplay_property)
    self.holes_property.removeEBObserver (self.holeLayerDisplay_property)
    self.vias_property.removeEBObserverOf_x (self.viaShapes_property)
    self.vias_property.removeEBObserverOf_y (self.viaShapes_property)
    self.vias_property.removeEBObserverOf_padDiameter (self.viaShapes_property)
    g_Preferences?.mergerDisplayVias_property.removeEBObserver (self.viaLayerDisplay_property)
    self.viaShapes_property.removeEBObserver (self.viaLayerDisplay_property)
    self.pads_property.removeEBObserverOf_x (self.frontPads_property)
    self.pads_property.removeEBObserverOf_y (self.frontPads_property)
    self.pads_property.removeEBObserverOf_width (self.frontPads_property)
    self.pads_property.removeEBObserverOf_height (self.frontPads_property)
    self.pads_property.removeEBObserverOf_holeDiameter (self.frontPads_property)
    self.pads_property.removeEBObserverOf_shape (self.frontPads_property)
    self.pads_property.removeEBObserverOf_side (self.frontPads_property)
    self.pads_property.removeEBObserverOf_rotation (self.frontPads_property)
    g_Preferences?.mergerDisplayFrontPads_property.removeEBObserver (self.frontPadsDisplay_property)
    self.frontPads_property.removeEBObserver (self.frontPadsDisplay_property)
    self.pads_property.removeEBObserverOf_x (self.backPads_property)
    self.pads_property.removeEBObserverOf_y (self.backPads_property)
    self.pads_property.removeEBObserverOf_width (self.backPads_property)
    self.pads_property.removeEBObserverOf_height (self.backPads_property)
    self.pads_property.removeEBObserverOf_holeDiameter (self.backPads_property)
    self.pads_property.removeEBObserverOf_shape (self.backPads_property)
    self.pads_property.removeEBObserverOf_side (self.backPads_property)
    self.pads_property.removeEBObserverOf_rotation (self.backPads_property)
    g_Preferences?.mergerDisplayBackPads_property.removeEBObserver (self.backPadsDisplay_property)
    self.backPads_property.removeEBObserver (self.backPadsDisplay_property)
    self.modelWidth_property.removeEBObserver (self.boardLimits_property)
    self.modelHeight_property.removeEBObserver (self.boardLimits_property)
    self.boardLimitWidth_property.removeEBObserver (self.boardLimits_property)
    g_Preferences?.mergerDisplayBoardLimits_property.removeEBObserver (self.boardLimits_property)
    g_Preferences?.mergerDisplayBoardLimits_property.removeEBObserver (self.boardLimitsDisplay_property)
    self.boardLimits_property.removeEBObserver (self.boardLimitsDisplay_property)
    self.backComponentNames_property.removeEBObserverOf_x1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_y1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_x2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_y2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_width (self.backComponentNameSegments_property)
    g_Preferences?.mergerDisplayBackComponentNames_property.removeEBObserver (self.backComponentNameDisplay_property)
    self.backComponentNameSegments_property.removeEBObserver (self.backComponentNameDisplay_property)
    self.frontComponentNames_property.removeEBObserverOf_x1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_y1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_x2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_y2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_width (self.frontComponentNameSegments_property)
    g_Preferences?.mergerDisplayFrontComponentNames_property.removeEBObserver (self.frontComponentNameDisplay_property)
    self.frontComponentNameSegments_property.removeEBObserver (self.frontComponentNameDisplay_property)
    self.frontComponentValues_property.removeEBObserverOf_x1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_y1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_x2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_y2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_width (self.frontComponentValueSegments_property)
    g_Preferences?.mergerDisplayFrontComponentValues_property.removeEBObserver (self.frontComponentValueDisplay_property)
    self.frontComponentValueSegments_property.removeEBObserver (self.frontComponentValueDisplay_property)
    self.backComponentValues_property.removeEBObserverOf_x1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_y1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_x2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_y2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_width (self.backComponentValueSegments_property)
    g_Preferences?.mergerDisplayBackComponentValues_property.removeEBObserver (self.backComponentValueDisplay_property)
    self.backComponentValueSegments_property.removeEBObserver (self.backComponentValueDisplay_property)
    self.backTracks_property.removeEBObserverOf_x1 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_y1 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_x2 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_y2 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_width (self.backTrackSegments_property)
    g_Preferences?.mergerDisplayBackLayoutTracks_property.removeEBObserver (self.backTracksDisplay_property)
    self.backTrackSegments_property.removeEBObserver (self.backTracksDisplay_property)
    self.frontTracks_property.removeEBObserverOf_x1 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_y1 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_x2 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_y2 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_width (self.frontTrackSegments_property)
    g_Preferences?.mergerDisplayFrontLayoutTracks_property.removeEBObserver (self.frontTracksDisplay_property)
    self.frontTrackSegments_property.removeEBObserver (self.frontTracksDisplay_property)
    self.frontPackages_property.removeEBObserverOf_x1 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_y1 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_x2 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_y2 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_width (self.frontPackagesSegments_property)
    g_Preferences?.mergerDisplayFrontPackages_property.removeEBObserver (self.frontPackagesDisplay_property)
    self.frontPackagesSegments_property.removeEBObserver (self.frontPackagesDisplay_property)
    self.backPackages_property.removeEBObserverOf_x1 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_y1 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_x2 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_y2 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_width (self.backPackagesSegments_property)
    g_Preferences?.mergerDisplayBackPackages_property.removeEBObserver (self.backPackagesDisplay_property)
    self.backPackagesSegments_property.removeEBObserver (self.backPackagesDisplay_property)
    self.backLegendTextsLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backLayoutTextsLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontLegendTextsLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontLayoutTextsLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.holeLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.viaLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontPadsDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backPadsDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.boardLimitsDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backComponentNameDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontComponentNameDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontComponentValueDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backComponentValueDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backTracksDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontTracksDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontPackagesDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backPackagesDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "artworkName",
      idx:self.artworkName_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.artworkName_property.mObserverExplorer,
      valueExplorer:&self.artworkName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name_property.mObserverExplorer,
      valueExplorer:&self.name_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelWidth",
      idx:self.modelWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelWidth_property.mObserverExplorer,
      valueExplorer:&self.modelWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelWidthUnit",
      idx:self.modelWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.modelWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelHeight",
      idx:self.modelHeight_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelHeight_property.mObserverExplorer,
      valueExplorer:&self.modelHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelHeightUnit",
      idx:self.modelHeightUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelHeightUnit_property.mObserverExplorer,
      valueExplorer:&self.modelHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom_property.mObserverExplorer,
      valueExplorer:&self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidth",
      idx:self.boardLimitWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidth_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidthUnit",
      idx:self.boardLimitWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidthUnit_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "instanceCount",
      idx:self.instanceCount_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceCount_property.mObserverExplorer,
      valueExplorer:&self.instanceCount_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsSegments",
      idx:self.frontLegendTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.frontLegendTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsLayerDisplay",
      idx:self.frontLegendTextsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendTextsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontLegendTextsLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsSegments",
      idx:self.frontLayoutTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLayoutTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.frontLayoutTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsLayerDisplay",
      idx:self.frontLayoutTextsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLayoutTextsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontLayoutTextsLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsSegments",
      idx:self.backLegendTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.backLegendTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsLayerDisplay",
      idx:self.backLegendTextsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendTextsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.backLegendTextsLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsSegments",
      idx:self.backLayoutTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLayoutTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.backLayoutTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsLayerDisplay",
      idx:self.backLayoutTextsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLayoutTextsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.backLayoutTextsLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padsHoles",
      idx:self.padsHoles_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padsHoles_property.mObserverExplorer,
      valueExplorer:&self.padsHoles_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viasHoles",
      idx:self.viasHoles_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viasHoles_property.mObserverExplorer,
      valueExplorer:&self.viasHoles_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holes",
      idx:self.holes_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holes_property.mObserverExplorer,
      valueExplorer:&self.holes_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeLayerDisplay",
      idx:self.holeLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.holeLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaShapes",
      idx:self.viaShapes_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaShapes_property.mObserverExplorer,
      valueExplorer:&self.viaShapes_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaLayerDisplay",
      idx:self.viaLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.viaLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPads",
      idx:self.frontPads_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPads_property.mObserverExplorer,
      valueExplorer:&self.frontPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPadsDisplay",
      idx:self.frontPadsDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPadsDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontPadsDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPads",
      idx:self.backPads_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPads_property.mObserverExplorer,
      valueExplorer:&self.backPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPadsDisplay",
      idx:self.backPadsDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPadsDisplay_property.mObserverExplorer,
      valueExplorer:&self.backPadsDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimits",
      idx:self.boardLimits_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimits_property.mObserverExplorer,
      valueExplorer:&self.boardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitsDisplay",
      idx:self.boardLimitsDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitsDisplay_property.mObserverExplorer,
      valueExplorer:&self.boardLimitsDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameSegments",
      idx:self.backComponentNameSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameSegments_property.mObserverExplorer,
      valueExplorer:&self.backComponentNameSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameDisplay",
      idx:self.backComponentNameDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameDisplay_property.mObserverExplorer,
      valueExplorer:&self.backComponentNameDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameSegments",
      idx:self.frontComponentNameSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameSegments_property.mObserverExplorer,
      valueExplorer:&self.frontComponentNameSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameDisplay",
      idx:self.frontComponentNameDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontComponentNameDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValueSegments",
      idx:self.frontComponentValueSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValueSegments_property.mObserverExplorer,
      valueExplorer:&self.frontComponentValueSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValueDisplay",
      idx:self.frontComponentValueDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValueDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontComponentValueDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValueSegments",
      idx:self.backComponentValueSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValueSegments_property.mObserverExplorer,
      valueExplorer:&self.backComponentValueSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValueDisplay",
      idx:self.backComponentValueDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValueDisplay_property.mObserverExplorer,
      valueExplorer:&self.backComponentValueDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTrackSegments",
      idx:self.backTrackSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTrackSegments_property.mObserverExplorer,
      valueExplorer:&self.backTrackSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTracksDisplay",
      idx:self.backTracksDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTracksDisplay_property.mObserverExplorer,
      valueExplorer:&self.backTracksDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTrackSegments",
      idx:self.frontTrackSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTrackSegments_property.mObserverExplorer,
      valueExplorer:&self.frontTrackSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTracksDisplay",
      idx:self.frontTracksDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTracksDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontTracksDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesSegments",
      idx:self.frontPackagesSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackagesSegments_property.mObserverExplorer,
      valueExplorer:&self.frontPackagesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesDisplay",
      idx:self.frontPackagesDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackagesDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontPackagesDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesSegments",
      idx:self.backPackagesSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackagesSegments_property.mObserverExplorer,
      valueExplorer:&self.backPackagesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesDisplay",
      idx:self.backPackagesDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackagesDisplay_property.mObserverExplorer,
      valueExplorer:&self.backPackagesDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelLayerDisplay",
      idx:self.modelLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.modelLayerDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "myInstances",
      idx:myInstances_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&myInstances_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontLegendTexts",
      idx:frontLegendTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLegendTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontLayoutTexts",
      idx:frontLayoutTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLayoutTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLegendTexts",
      idx:backLegendTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLegendTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLayoutTexts",
      idx:backLayoutTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLayoutTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "vias",
      idx:vias_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&vias_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "pads",
      idx:pads_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&pads_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backComponentNames",
      idx:backComponentNames_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backComponentNames_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontComponentNames",
      idx:frontComponentNames_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontComponentNames_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontComponentValues",
      idx:frontComponentValues_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontComponentValues_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backComponentValues",
      idx:backComponentValues_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backComponentValues_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backTracks",
      idx:backTracks_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backTracks_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontTracks",
      idx:frontTracks_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontTracks_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontPackages",
      idx:frontPackages_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontPackages_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backPackages",
      idx:backPackages_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backPackages_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.artworkName_property.mObserverExplorer = nil
    self.artworkName_property.mValueExplorer = nil
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
    self.modelWidth_property.mObserverExplorer = nil
    self.modelWidth_property.mValueExplorer = nil
    self.modelWidthUnit_property.mObserverExplorer = nil
    self.modelWidthUnit_property.mValueExplorer = nil
    self.modelHeight_property.mObserverExplorer = nil
    self.modelHeight_property.mValueExplorer = nil
    self.modelHeightUnit_property.mObserverExplorer = nil
    self.modelHeightUnit_property.mValueExplorer = nil
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
    self.boardLimitWidth_property.mObserverExplorer = nil
    self.boardLimitWidth_property.mValueExplorer = nil
    self.boardLimitWidthUnit_property.mObserverExplorer = nil
    self.boardLimitWidthUnit_property.mValueExplorer = nil
    self.myInstances_property.mValueExplorer = nil
    self.frontLegendTexts_property.mValueExplorer = nil
    self.frontLayoutTexts_property.mValueExplorer = nil
    self.backLegendTexts_property.mValueExplorer = nil
    self.backLayoutTexts_property.mValueExplorer = nil
    self.vias_property.mValueExplorer = nil
    self.pads_property.mValueExplorer = nil
    self.backComponentNames_property.mValueExplorer = nil
    self.frontComponentNames_property.mValueExplorer = nil
    self.frontComponentValues_property.mValueExplorer = nil
    self.backComponentValues_property.mValueExplorer = nil
    self.backTracks_property.mValueExplorer = nil
    self.frontTracks_property.mValueExplorer = nil
    self.frontPackages_property.mValueExplorer = nil
    self.backPackages_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.artworkName_property.storeIn (dictionary: ioDictionary, forKey: "artworkName")
    self.name_property.storeIn (dictionary: ioDictionary, forKey: "name")
    self.modelWidth_property.storeIn (dictionary: ioDictionary, forKey: "modelWidth")
    self.modelWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "modelWidthUnit")
    self.modelHeight_property.storeIn (dictionary: ioDictionary, forKey: "modelHeight")
    self.modelHeightUnit_property.storeIn (dictionary: ioDictionary, forKey: "modelHeightUnit")
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey: "zoom")
    self.boardLimitWidth_property.storeIn (dictionary: ioDictionary, forKey: "boardLimitWidth")
    self.boardLimitWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "boardLimitWidthUnit")
    store (managedObjectArray: myInstances_property.propval as NSArray, relationshipName:"myInstances", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontLegendTexts_property.propval as NSArray, relationshipName:"frontLegendTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontLayoutTexts_property.propval as NSArray, relationshipName:"frontLayoutTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backLegendTexts_property.propval as NSArray, relationshipName:"backLegendTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backLayoutTexts_property.propval as NSArray, relationshipName:"backLayoutTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: vias_property.propval as NSArray, relationshipName:"vias", intoDictionary: ioDictionary) ;
    store (managedObjectArray: pads_property.propval as NSArray, relationshipName:"pads", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backComponentNames_property.propval as NSArray, relationshipName:"backComponentNames", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontComponentNames_property.propval as NSArray, relationshipName:"frontComponentNames", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontComponentValues_property.propval as NSArray, relationshipName:"frontComponentValues", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backComponentValues_property.propval as NSArray, relationshipName:"backComponentValues", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backTracks_property.propval as NSArray, relationshipName:"backTracks", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontTracks_property.propval as NSArray, relationshipName:"frontTracks", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontPackages_property.propval as NSArray, relationshipName:"frontPackages", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backPackages_property.propval as NSArray, relationshipName:"backPackages", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.artworkName_property.readFrom (dictionary: inDictionary, forKey:"artworkName")
    self.name_property.readFrom (dictionary: inDictionary, forKey:"name")
    self.modelWidth_property.readFrom (dictionary: inDictionary, forKey:"modelWidth")
    self.modelWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"modelWidthUnit")
    self.modelHeight_property.readFrom (dictionary: inDictionary, forKey:"modelHeight")
    self.modelHeightUnit_property.readFrom (dictionary: inDictionary, forKey:"modelHeightUnit")
    self.zoom_property.readFrom (dictionary: inDictionary, forKey:"zoom")
    self.boardLimitWidth_property.readFrom (dictionary: inDictionary, forKey:"boardLimitWidth")
    self.boardLimitWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"boardLimitWidthUnit")
    self.myInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "myInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [MergerBoardInstanceEntity])
    self.frontLegendTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLegendTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.frontLayoutTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLayoutTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.backLegendTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLegendTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.backLayoutTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLayoutTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.vias_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "vias",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelViaEntity])
    self.pads_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "pads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelPadEntity])
    self.backComponentNames_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.frontComponentNames_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.frontComponentValues_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.backComponentValues_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.backTracks_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.frontTracks_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.frontPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.backPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    self.myInstances_property.setProp ([]) // Set relationships to nil
    do{
      let objects = self.frontLegendTexts_property.propval
      self.frontLegendTexts_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontLayoutTexts_property.propval
      self.frontLayoutTexts_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backLegendTexts_property.propval
      self.backLegendTexts_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backLayoutTexts_property.propval
      self.backLayoutTexts_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.vias_property.propval
      self.vias_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.pads_property.propval
      self.pads_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backComponentNames_property.propval
      self.backComponentNames_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontComponentNames_property.propval
      self.frontComponentNames_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontComponentValues_property.propval
      self.frontComponentValues_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backComponentValues_property.propval
      self.backComponentValues_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backTracks_property.propval
      self.backTracks_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontTracks_property.propval
      self.frontTracks_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontPackages_property.propval
      self.frontPackages_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backPackages_property.propval
      self.backPackages_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    self.myInstances_property.setProp ([])
    self.frontLegendTexts_property.setProp ([])
    self.frontLayoutTexts_property.setProp ([])
    self.backLegendTexts_property.setProp ([])
    self.backLayoutTexts_property.setProp ([])
    self.vias_property.setProp ([])
    self.pads_property.setProp ([])
    self.backComponentNames_property.setProp ([])
    self.frontComponentNames_property.setProp ([])
    self.frontComponentValues_property.setProp ([])
    self.backComponentValues_property.setProp ([])
    self.backTracks_property.setProp ([])
    self.frontTracks_property.setProp ([])
    self.frontPackages_property.setProp ([])
    self.backPackages_property.setProp ([])
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in self.myInstances_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontLegendTexts_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontLayoutTexts_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backLegendTexts_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backLayoutTexts_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.vias_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.pads_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backComponentNames_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontComponentNames_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontComponentValues_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backComponentValues_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backTracks_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontTracks_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontPackages_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backPackages_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardModelEntity : ReadOnlyAbstractArrayProperty <BoardModelEntity> {

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_artworkName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_artworkName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_artworkName {
        managedObject.artworkName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_artworkName {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.artworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_name.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_name.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_name {
        managedObject.name_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_name {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelWidth' stored property
  //····················································································································

  private var mObserversOf_modelWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelWidth_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelWidth {
        managedObject.modelWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelWidth_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_modelWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelWidthUnit' stored property
  //····················································································································

  private var mObserversOf_modelWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelWidthUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelWidthUnit {
        managedObject.modelWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelWidthUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_modelWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelHeight' stored property
  //····················································································································

  private var mObserversOf_modelHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelHeight_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelHeight {
        managedObject.modelHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelHeight_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_modelHeight {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelHeightUnit' stored property
  //····················································································································

  private var mObserversOf_modelHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelHeightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelHeightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelHeightUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelHeightUnit {
        managedObject.modelHeightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelHeightUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_modelHeightUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_zoom {
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_zoom {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidth_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidth {
        managedObject.boardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidth_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardLimitWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidthUnit {
        managedObject.boardLimitWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardLimitWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceCount' transient property
  //····················································································································

  private var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instanceCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instanceCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceCount {
        managedObject.instanceCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceCount {
        managedObject.instanceCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsSegments' transient property
  //····················································································································

  private var mObserversOf_frontLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegments {
        managedObject.frontLegendTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegments {
        managedObject.frontLegendTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_frontLegendTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendTextsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendTextsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsLayerDisplay {
        managedObject.frontLegendTextsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsLayerDisplay {
        managedObject.frontLegendTextsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsSegments' transient property
  //····················································································································

  private var mObserversOf_frontLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegments {
        managedObject.frontLayoutTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegments {
        managedObject.frontLayoutTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_frontLayoutTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLayoutTextsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLayoutTextsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsLayerDisplay {
        managedObject.frontLayoutTextsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsLayerDisplay {
        managedObject.frontLayoutTextsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsSegments' transient property
  //····················································································································

  private var mObserversOf_backLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegments {
        managedObject.backLegendTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegments {
        managedObject.backLegendTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_backLegendTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendTextsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendTextsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsLayerDisplay {
        managedObject.backLegendTextsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsLayerDisplay {
        managedObject.backLegendTextsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsSegments' transient property
  //····················································································································

  private var mObserversOf_backLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegments {
        managedObject.backLayoutTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegments {
        managedObject.backLayoutTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_backLayoutTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLayoutTextsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLayoutTextsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsLayerDisplay {
        managedObject.backLayoutTextsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsLayerDisplay {
        managedObject.backLayoutTextsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padsHoles' transient property
  //····················································································································

  private var mObserversOf_padsHoles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padsHoles (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_padsHoles.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padsHoles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padsHoles (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_padsHoles.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padsHoles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padsHoles_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_padsHoles {
        managedObject.padsHoles_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padsHoles_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_padsHoles {
        managedObject.padsHoles_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viasHoles' transient property
  //····················································································································

  private var mObserversOf_viasHoles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viasHoles (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viasHoles.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasHoles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viasHoles (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viasHoles.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasHoles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viasHoles_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viasHoles {
        managedObject.viasHoles_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viasHoles_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viasHoles {
        managedObject.viasHoles_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holes' transient property
  //····················································································································

  private var mObserversOf_holes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_holes.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holes_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_holes.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holes_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holes_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holes {
        managedObject.holes_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holes_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holes {
        managedObject.holes_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_holeLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_holeLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_holeLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holeLayerDisplay {
        managedObject.holeLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holeLayerDisplay {
        managedObject.holeLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaShapes' transient property
  //····················································································································

  private var mObserversOf_viaShapes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaShapes.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapes_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaShapes.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapes_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaShapes_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapes {
        managedObject.viaShapes_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaShapes_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapes {
        managedObject.viaShapes_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_viaLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaLayerDisplay {
        managedObject.viaLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaLayerDisplay {
        managedObject.viaLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPads' transient property
  //····················································································································

  private var mObserversOf_frontPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPads_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPads {
        managedObject.frontPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPads_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPads {
        managedObject.frontPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPadsDisplay' transient property
  //····················································································································

  private var mObserversOf_frontPadsDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPadsDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPadsDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPadsDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPadsDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsDisplay {
        managedObject.frontPadsDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPadsDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsDisplay {
        managedObject.frontPadsDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPads' transient property
  //····················································································································

  private var mObserversOf_backPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPads_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPads {
        managedObject.backPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPads_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPads {
        managedObject.backPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPadsDisplay' transient property
  //····················································································································

  private var mObserversOf_backPadsDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPadsDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPadsDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPadsDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPadsDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsDisplay {
        managedObject.backPadsDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPadsDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsDisplay {
        managedObject.backPadsDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimits' transient property
  //····················································································································

  private var mObserversOf_boardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimits.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimits_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimits.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimits_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimits_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimits {
        managedObject.boardLimits_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimits_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimits {
        managedObject.boardLimits_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitsDisplay' transient property
  //····················································································································

  private var mObserversOf_boardLimitsDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitsDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitsDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitsDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitsDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitsDisplay {
        managedObject.boardLimitsDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitsDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitsDisplay {
        managedObject.boardLimitsDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_backComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegments {
        managedObject.backComponentNameSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegments {
        managedObject.backComponentNameSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameDisplay' transient property
  //····················································································································

  private var mObserversOf_backComponentNameDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameDisplay {
        managedObject.backComponentNameDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameDisplay {
        managedObject.backComponentNameDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameDisplay' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameDisplay {
        managedObject.frontComponentNameDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameDisplay {
        managedObject.frontComponentNameDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValueSegments' transient property
  //····················································································································

  private var mObserversOf_frontComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValueSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValueSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValueSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueSegments {
        managedObject.frontComponentValueSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueSegments {
        managedObject.frontComponentValueSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValueDisplay' transient property
  //····················································································································

  private var mObserversOf_frontComponentValueDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValueDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValueDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValueDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValueDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueDisplay {
        managedObject.frontComponentValueDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValueDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueDisplay {
        managedObject.frontComponentValueDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValueSegments' transient property
  //····················································································································

  private var mObserversOf_backComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValueSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValueSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValueSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueSegments {
        managedObject.backComponentValueSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueSegments {
        managedObject.backComponentValueSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValueDisplay' transient property
  //····················································································································

  private var mObserversOf_backComponentValueDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValueDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValueDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValueDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValueDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueDisplay {
        managedObject.backComponentValueDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValueDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueDisplay {
        managedObject.backComponentValueDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTrackSegments' transient property
  //····················································································································

  private var mObserversOf_backTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTrackSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTrackSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTrackSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegments {
        managedObject.backTrackSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTrackSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegments {
        managedObject.backTrackSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTracksDisplay' transient property
  //····················································································································

  private var mObserversOf_backTracksDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTracksDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTracksDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracksDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTracksDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTracksDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksDisplay {
        managedObject.backTracksDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTracksDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksDisplay {
        managedObject.backTracksDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTrackSegments' transient property
  //····················································································································

  private var mObserversOf_frontTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTrackSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTrackSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTrackSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegments {
        managedObject.frontTrackSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTrackSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegments {
        managedObject.frontTrackSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTracksDisplay' transient property
  //····················································································································

  private var mObserversOf_frontTracksDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTracksDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTracksDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTracksDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTracksDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksDisplay {
        managedObject.frontTracksDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTracksDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksDisplay {
        managedObject.frontTracksDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesSegments' transient property
  //····················································································································

  private var mObserversOf_frontPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackagesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackagesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegments {
        managedObject.frontPackagesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegments {
        managedObject.frontPackagesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesDisplay' transient property
  //····················································································································

  private var mObserversOf_frontPackagesDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackagesDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackagesDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesDisplay {
        managedObject.frontPackagesDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesDisplay {
        managedObject.frontPackagesDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesSegments' transient property
  //····················································································································

  private var mObserversOf_backPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackagesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackagesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegments {
        managedObject.backPackagesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegments {
        managedObject.backPackagesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesDisplay' transient property
  //····················································································································

  private var mObserversOf_backPackagesDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackagesDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackagesDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesDisplay {
        managedObject.backPackagesDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesDisplay {
        managedObject.backPackagesDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_modelLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelLayerDisplay {
        managedObject.modelLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelLayerDisplay {
        managedObject.modelLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_BoardModelEntity : ReadOnlyArrayOf_BoardModelEntity {

  var readModelFunction : Optional<() -> EBSelection < [BoardModelEntity] > >

  private var prop_cache : EBSelection < [BoardModelEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <BoardModelEntity> ()

  override var prop : EBSelection < [BoardModelEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <BoardModelEntity>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <BoardModelEntity> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_artworkName_fromElementsOfSet (removedSet)
        removeEBObserversOf_name_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelHeight_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelHeightUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_instanceCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendTextsLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLayoutTextsLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendTextsLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLayoutTextsLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_padsHoles_fromElementsOfSet (removedSet)
        removeEBObserversOf_viasHoles_fromElementsOfSet (removedSet)
        removeEBObserversOf_holes_fromElementsOfSet (removedSet)
        removeEBObserversOf_holeLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_viaShapes_fromElementsOfSet (removedSet)
        removeEBObserversOf_viaLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPads_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPadsDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPads_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPadsDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimits_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitsDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValueDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValueDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTrackSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTracksDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTrackSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTracksDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackagesDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackagesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackagesDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelLayerDisplay_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_artworkName_toElementsOfSet (addedSet)
        addEBObserversOf_name_toElementsOfSet (addedSet)
        addEBObserversOf_modelWidth_toElementsOfSet (addedSet)
        addEBObserversOf_modelWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_modelHeight_toElementsOfSet (addedSet)
        addEBObserversOf_modelHeightUnit_toElementsOfSet (addedSet)
        addEBObserversOf_zoom_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_instanceCount_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendTextsLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontLayoutTextsLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendTextsLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backLayoutTextsLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_padsHoles_toElementsOfSet (addedSet)
        addEBObserversOf_viasHoles_toElementsOfSet (addedSet)
        addEBObserversOf_holes_toElementsOfSet (addedSet)
        addEBObserversOf_holeLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_viaShapes_toElementsOfSet (addedSet)
        addEBObserversOf_viaLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontPads_toElementsOfSet (addedSet)
        addEBObserversOf_frontPadsDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backPads_toElementsOfSet (addedSet)
        addEBObserversOf_backPadsDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimits_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitsDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValueSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValueDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValueSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValueDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backTrackSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backTracksDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontTrackSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontTracksDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackagesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackagesDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backPackagesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backPackagesDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_modelLayerDisplay_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_artworkName : class {
  var artworkName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_name : class {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_modelWidth : class {
  var modelWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_modelWidthUnit : class {
  var modelWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_modelHeight : class {
  var modelHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_modelHeightUnit : class {
  var modelHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_zoom : class {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardLimitWidth : class {
  var boardLimitWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardLimitWidthUnit : class {
  var boardLimitWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_instanceCount : class {
  var instanceCount : EBSelection < Int > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontLegendTextsSegments : class {
  var frontLegendTextsSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontLegendTextsLayerDisplay : class {
  var frontLegendTextsLayerDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontLayoutTextsSegments : class {
  var frontLayoutTextsSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontLayoutTextsLayerDisplay : class {
  var frontLayoutTextsLayerDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backLegendTextsSegments : class {
  var backLegendTextsSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backLegendTextsLayerDisplay : class {
  var backLegendTextsLayerDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backLayoutTextsSegments : class {
  var backLayoutTextsSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backLayoutTextsLayerDisplay : class {
  var backLayoutTextsLayerDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_padsHoles : class {
  var padsHoles : EBSelection < MergerHoleArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_viasHoles : class {
  var viasHoles : EBSelection < MergerHoleArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_holes : class {
  var holes : EBSelection < MergerHoleArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_holeLayerDisplay : class {
  var holeLayerDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_viaShapes : class {
  var viaShapes : EBSelection < MergerViaShapeArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_viaLayerDisplay : class {
  var viaLayerDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPads : class {
  var frontPads : EBSelection < MergerPadArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPadsDisplay : class {
  var frontPadsDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPads : class {
  var backPads : EBSelection < MergerPadArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPadsDisplay : class {
  var backPadsDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardLimits : class {
  var boardLimits : EBSelection < MergerBoardLimits > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardLimitsDisplay : class {
  var boardLimitsDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentNameSegments : class {
  var backComponentNameSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentNameDisplay : class {
  var backComponentNameDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentNameSegments : class {
  var frontComponentNameSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentNameDisplay : class {
  var frontComponentNameDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentValueSegments : class {
  var frontComponentValueSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentValueDisplay : class {
  var frontComponentValueDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentValueSegments : class {
  var backComponentValueSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentValueDisplay : class {
  var backComponentValueDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backTrackSegments : class {
  var backTrackSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backTracksDisplay : class {
  var backTracksDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontTrackSegments : class {
  var frontTrackSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontTracksDisplay : class {
  var frontTracksDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPackagesSegments : class {
  var frontPackagesSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPackagesDisplay : class {
  var frontPackagesDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPackagesSegments : class {
  var backPackagesSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPackagesDisplay : class {
  var backPackagesDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_modelLayerDisplay : class {
  var modelLayerDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: myInstances
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_myInstances : ReadOnlyArrayOf_MergerBoardInstanceEntity {

  //····················································································································
 
  func setProp (_ value :  [MergerBoardInstanceEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: myInstances
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_myInstances :
ToManyRelationshipReadWrite_BoardModelEntity_myInstances, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<MergerBoardInstanceEntity> ()
  private var mValue = [MergerBoardInstanceEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myModel_property.owner = nil ;
        }
        removeEBObserversOf_backComponentNameDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentValueDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLayoutTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPackagesDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPadsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backTracksDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentNameDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentValueDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLayoutTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPackagesDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPadsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontTracksDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holeLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_instanceLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_instanceRect_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viaLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : MergerBoardInstanceEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myModel_property.setProp (owner)
        }
        addEBObserversOf_backComponentNameDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentValueDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLayoutTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPackagesDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPadsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backTracksDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentNameDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentValueDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLayoutTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPackagesDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPadsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontTracksDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holeLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_instanceLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_instanceRect_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viaLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [MergerBoardInstanceEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [MergerBoardInstanceEntity]) { mValue = value }

  var propval : [MergerBoardInstanceEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [MergerBoardInstanceEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MergerBoardInstanceEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : MergerBoardInstanceEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontLegendTexts : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontLegendTexts :
ToManyRelationshipReadWrite_BoardModelEntity_frontLegendTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontLayoutTexts : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontLayoutTexts :
ToManyRelationshipReadWrite_BoardModelEntity_frontLayoutTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backLegendTexts : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backLegendTexts :
ToManyRelationshipReadWrite_BoardModelEntity_backLegendTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backLayoutTexts : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backLayoutTexts :
ToManyRelationshipReadWrite_BoardModelEntity_backLayoutTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_vias : ReadOnlyArrayOf_BoardModelViaEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelViaEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_vias :
ToManyRelationshipReadWrite_BoardModelEntity_vias, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelViaEntity> ()
  private var mValue = [BoardModelViaEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelViaEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [BoardModelViaEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelViaEntity]) { mValue = value }

  var propval : [BoardModelViaEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelViaEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelViaEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelViaEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: pads
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_pads : ReadOnlyArrayOf_BoardModelPadEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelPadEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: pads
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_pads :
ToManyRelationshipReadWrite_BoardModelEntity_pads, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelPadEntity> ()
  private var mValue = [BoardModelPadEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_height_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_rotation_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_shape_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_side_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelPadEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_height_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_rotation_toElementsOfSet (addedObjectSet)
        addEBObserversOf_shape_toElementsOfSet (addedObjectSet)
        addEBObserversOf_side_toElementsOfSet (addedObjectSet)
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [BoardModelPadEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelPadEntity]) { mValue = value }

  var propval : [BoardModelPadEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelPadEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelPadEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelPadEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backComponentNames : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backComponentNames :
ToManyRelationshipReadWrite_BoardModelEntity_backComponentNames, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontComponentNames : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontComponentNames :
ToManyRelationshipReadWrite_BoardModelEntity_frontComponentNames, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontComponentValues : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontComponentValues :
ToManyRelationshipReadWrite_BoardModelEntity_frontComponentValues, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backComponentValues : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backComponentValues :
ToManyRelationshipReadWrite_BoardModelEntity_backComponentValues, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backTracks : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backTracks :
ToManyRelationshipReadWrite_BoardModelEntity_backTracks, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontTracks : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontTracks :
ToManyRelationshipReadWrite_BoardModelEntity_frontTracks, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontPackages : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontPackages :
ToManyRelationshipReadWrite_BoardModelEntity_frontPackages, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backPackages : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backPackages :
ToManyRelationshipReadWrite_BoardModelEntity_backPackages, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

