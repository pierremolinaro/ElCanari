//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardModelEntity : EBManagedObject,
  BoardModelEntity_artworkName,
  BoardModelEntity_name,
  BoardModelEntity_boardWidth,
  BoardModelEntity_boardWidthUnit,
  BoardModelEntity_boardHeight,
  BoardModelEntity_boardHeightUnit,
  BoardModelEntity_zoom,
  BoardModelEntity_boardLimitWidth,
  BoardModelEntity_boardLimitWidthUnit,
  BoardModelEntity_instanceCount,
  BoardModelEntity_frontLegendTextsSegments,
  BoardModelEntity_frontLegendTextsSegmentsForDisplay,
  BoardModelEntity_frontLayoutTextsSegments,
  BoardModelEntity_frontLayoutTextsSegmentsForDisplay,
  BoardModelEntity_backLegendTextsSegments,
  BoardModelEntity_backLegendTextsSegmentsForDisplay,
  BoardModelEntity_backLayoutTextsSegments,
  BoardModelEntity_backLayoutTextsSegmentsForDisplay,
  BoardModelEntity_padsHoles,
  BoardModelEntity_viasHoles,
  BoardModelEntity_holes,
  BoardModelEntity_holesForDisplay,
  BoardModelEntity_viaShapes,
  BoardModelEntity_viaShapesForDisplay,
  BoardModelEntity_frontPads,
  BoardModelEntity_frontPadsForDisplay,
  BoardModelEntity_backPads,
  BoardModelEntity_backPadsForDisplay,
  BoardModelEntity_boardLimits,
  BoardModelEntity_backComponentNameSegments,
  BoardModelEntity_backComponentNameSegmentsForDisplay,
  BoardModelEntity_frontComponentNameSegments,
  BoardModelEntity_frontComponentNameSegmentsForDisplay,
  BoardModelEntity_frontComponentValueSegments,
  BoardModelEntity_frontComponentValuesForDisplay,
  BoardModelEntity_backComponentValueSegments,
  BoardModelEntity_backComponentValuesForDisplay,
  BoardModelEntity_backTrackSegments,
  BoardModelEntity_backTrackSegmentsForDisplay,
  BoardModelEntity_frontTrackSegments,
  BoardModelEntity_frontTrackSegmentsForDisplay,
  BoardModelEntity_frontPackagesSegments,
  BoardModelEntity_frontPackagesSegmentsForDisplay,
  BoardModelEntity_backPackagesSegments,
  BoardModelEntity_backPackagesSegmentsForDisplay {

  //····················································································································
  //   Accessing artworkName stored property
  //····················································································································

  var artworkName : String {
    get {
      return self.artworkName_property.propval
    }
    set {
      self.artworkName_property.setProp (newValue)
    }
  }

  var artworkName_property_selection : EBSelection <String> {
    get {
      return self.artworkName_property.prop
    }
  }

  //····················································································································
  //   Accessing name stored property
  //····················································································································

  var name : String {
    get {
      return self.name_property.propval
    }
    set {
      self.name_property.setProp (newValue)
    }
  }

  var name_property_selection : EBSelection <String> {
    get {
      return self.name_property.prop
    }
  }

  //····················································································································
  //   Accessing boardWidth stored property
  //····················································································································

  var boardWidth : Int {
    get {
      return self.boardWidth_property.propval
    }
    set {
      self.boardWidth_property.setProp (newValue)
    }
  }

  var boardWidth_property_selection : EBSelection <Int> {
    get {
      return self.boardWidth_property.prop
    }
  }

  //····················································································································
  //   Accessing boardWidthUnit stored property
  //····················································································································

  var boardWidthUnit : Int {
    get {
      return self.boardWidthUnit_property.propval
    }
    set {
      self.boardWidthUnit_property.setProp (newValue)
    }
  }

  var boardWidthUnit_property_selection : EBSelection <Int> {
    get {
      return self.boardWidthUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing boardHeight stored property
  //····················································································································

  var boardHeight : Int {
    get {
      return self.boardHeight_property.propval
    }
    set {
      self.boardHeight_property.setProp (newValue)
    }
  }

  var boardHeight_property_selection : EBSelection <Int> {
    get {
      return self.boardHeight_property.prop
    }
  }

  //····················································································································
  //   Accessing boardHeightUnit stored property
  //····················································································································

  var boardHeightUnit : Int {
    get {
      return self.boardHeightUnit_property.propval
    }
    set {
      self.boardHeightUnit_property.setProp (newValue)
    }
  }

  var boardHeightUnit_property_selection : EBSelection <Int> {
    get {
      return self.boardHeightUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing zoom stored property
  //····················································································································

  var zoom : Int {
    get {
      return self.zoom_property.propval
    }
    set {
      self.zoom_property.setProp (newValue)
    }
  }

  var zoom_property_selection : EBSelection <Int> {
    get {
      return self.zoom_property.prop
    }
  }

  //····················································································································
  //   Accessing boardLimitWidth stored property
  //····················································································································

  var boardLimitWidth : Int {
    get {
      return self.boardLimitWidth_property.propval
    }
    set {
      self.boardLimitWidth_property.setProp (newValue)
    }
  }

  var boardLimitWidth_property_selection : EBSelection <Int> {
    get {
      return self.boardLimitWidth_property.prop
    }
  }

  //····················································································································
  //   Accessing boardLimitWidthUnit stored property
  //····················································································································

  var boardLimitWidthUnit : Int {
    get {
      return self.boardLimitWidthUnit_property.propval
    }
    set {
      self.boardLimitWidthUnit_property.setProp (newValue)
    }
  }

  var boardLimitWidthUnit_property_selection : EBSelection <Int> {
    get {
      return self.boardLimitWidthUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing instanceCount transient property
  //····················································································································

  var instanceCount_property_selection : EBSelection <Int> {
    get {
      return self.instanceCount_property.prop
    }
  }

  var instanceCount : EBSelection <Int> {
    get {
      return instanceCount_property_selection
    }
  }

  //····················································································································
  //   Accessing frontLegendTextsSegments transient property
  //····················································································································

  var frontLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLegendTextsSegments_property.prop
    }
  }

  var frontLegendTextsSegments : EBSelection <MergerSegmentArray> {
    get {
      return frontLegendTextsSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing frontLegendTextsSegmentsForDisplay transient property
  //····················································································································

  var frontLegendTextsSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLegendTextsSegmentsForDisplay_property.prop
    }
  }

  var frontLegendTextsSegmentsForDisplay : EBSelection <MergerSegmentArray> {
    get {
      return frontLegendTextsSegmentsForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing frontLayoutTextsSegments transient property
  //····················································································································

  var frontLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLayoutTextsSegments_property.prop
    }
  }

  var frontLayoutTextsSegments : EBSelection <MergerSegmentArray> {
    get {
      return frontLayoutTextsSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing frontLayoutTextsSegmentsForDisplay transient property
  //····················································································································

  var frontLayoutTextsSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLayoutTextsSegmentsForDisplay_property.prop
    }
  }

  var frontLayoutTextsSegmentsForDisplay : EBSelection <MergerSegmentArray> {
    get {
      return frontLayoutTextsSegmentsForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backLegendTextsSegments transient property
  //····················································································································

  var backLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backLegendTextsSegments_property.prop
    }
  }

  var backLegendTextsSegments : EBSelection <MergerSegmentArray> {
    get {
      return backLegendTextsSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing backLegendTextsSegmentsForDisplay transient property
  //····················································································································

  var backLegendTextsSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backLegendTextsSegmentsForDisplay_property.prop
    }
  }

  var backLegendTextsSegmentsForDisplay : EBSelection <MergerSegmentArray> {
    get {
      return backLegendTextsSegmentsForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backLayoutTextsSegments transient property
  //····················································································································

  var backLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backLayoutTextsSegments_property.prop
    }
  }

  var backLayoutTextsSegments : EBSelection <MergerSegmentArray> {
    get {
      return backLayoutTextsSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing backLayoutTextsSegmentsForDisplay transient property
  //····················································································································

  var backLayoutTextsSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backLayoutTextsSegmentsForDisplay_property.prop
    }
  }

  var backLayoutTextsSegmentsForDisplay : EBSelection <MergerSegmentArray> {
    get {
      return backLayoutTextsSegmentsForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing padsHoles transient property
  //····················································································································

  var padsHoles_property_selection : EBSelection <MergerHoleArray> {
    get {
      return self.padsHoles_property.prop
    }
  }

  var padsHoles : EBSelection <MergerHoleArray> {
    get {
      return padsHoles_property_selection
    }
  }

  //····················································································································
  //   Accessing viasHoles transient property
  //····················································································································

  var viasHoles_property_selection : EBSelection <MergerHoleArray> {
    get {
      return self.viasHoles_property.prop
    }
  }

  var viasHoles : EBSelection <MergerHoleArray> {
    get {
      return viasHoles_property_selection
    }
  }

  //····················································································································
  //   Accessing holes transient property
  //····················································································································

  var holes_property_selection : EBSelection <MergerHoleArray> {
    get {
      return self.holes_property.prop
    }
  }

  var holes : EBSelection <MergerHoleArray> {
    get {
      return holes_property_selection
    }
  }

  //····················································································································
  //   Accessing holesForDisplay transient property
  //····················································································································

  var holesForDisplay_property_selection : EBSelection <MergerHoleArray> {
    get {
      return self.holesForDisplay_property.prop
    }
  }

  var holesForDisplay : EBSelection <MergerHoleArray> {
    get {
      return holesForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing viaShapes transient property
  //····················································································································

  var viaShapes_property_selection : EBSelection <MergerViaShapeArray> {
    get {
      return self.viaShapes_property.prop
    }
  }

  var viaShapes : EBSelection <MergerViaShapeArray> {
    get {
      return viaShapes_property_selection
    }
  }

  //····················································································································
  //   Accessing viaShapesForDisplay transient property
  //····················································································································

  var viaShapesForDisplay_property_selection : EBSelection <MergerViaShapeArray> {
    get {
      return self.viaShapesForDisplay_property.prop
    }
  }

  var viaShapesForDisplay : EBSelection <MergerViaShapeArray> {
    get {
      return viaShapesForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing frontPads transient property
  //····················································································································

  var frontPads_property_selection : EBSelection <MergerPadArray> {
    get {
      return self.frontPads_property.prop
    }
  }

  var frontPads : EBSelection <MergerPadArray> {
    get {
      return frontPads_property_selection
    }
  }

  //····················································································································
  //   Accessing frontPadsForDisplay transient property
  //····················································································································

  var frontPadsForDisplay_property_selection : EBSelection <MergerPadArray> {
    get {
      return self.frontPadsForDisplay_property.prop
    }
  }

  var frontPadsForDisplay : EBSelection <MergerPadArray> {
    get {
      return frontPadsForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backPads transient property
  //····················································································································

  var backPads_property_selection : EBSelection <MergerPadArray> {
    get {
      return self.backPads_property.prop
    }
  }

  var backPads : EBSelection <MergerPadArray> {
    get {
      return backPads_property_selection
    }
  }

  //····················································································································
  //   Accessing backPadsForDisplay transient property
  //····················································································································

  var backPadsForDisplay_property_selection : EBSelection <MergerPadArray> {
    get {
      return self.backPadsForDisplay_property.prop
    }
  }

  var backPadsForDisplay : EBSelection <MergerPadArray> {
    get {
      return backPadsForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing boardLimits transient property
  //····················································································································

  var boardLimits_property_selection : EBSelection <MergerBoardLimits> {
    get {
      return self.boardLimits_property.prop
    }
  }

  var boardLimits : EBSelection <MergerBoardLimits> {
    get {
      return boardLimits_property_selection
    }
  }

  //····················································································································
  //   Accessing backComponentNameSegments transient property
  //····················································································································

  var backComponentNameSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backComponentNameSegments_property.prop
    }
  }

  var backComponentNameSegments : EBSelection <MergerSegmentArray> {
    get {
      return backComponentNameSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing backComponentNameSegmentsForDisplay transient property
  //····················································································································

  var backComponentNameSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backComponentNameSegmentsForDisplay_property.prop
    }
  }

  var backComponentNameSegmentsForDisplay : EBSelection <MergerSegmentArray> {
    get {
      return backComponentNameSegmentsForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing frontComponentNameSegments transient property
  //····················································································································

  var frontComponentNameSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontComponentNameSegments_property.prop
    }
  }

  var frontComponentNameSegments : EBSelection <MergerSegmentArray> {
    get {
      return frontComponentNameSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing frontComponentNameSegmentsForDisplay transient property
  //····················································································································

  var frontComponentNameSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontComponentNameSegmentsForDisplay_property.prop
    }
  }

  var frontComponentNameSegmentsForDisplay : EBSelection <MergerSegmentArray> {
    get {
      return frontComponentNameSegmentsForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing frontComponentValueSegments transient property
  //····················································································································

  var frontComponentValueSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontComponentValueSegments_property.prop
    }
  }

  var frontComponentValueSegments : EBSelection <MergerSegmentArray> {
    get {
      return frontComponentValueSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing frontComponentValuesForDisplay transient property
  //····················································································································

  var frontComponentValuesForDisplay_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontComponentValuesForDisplay_property.prop
    }
  }

  var frontComponentValuesForDisplay : EBSelection <MergerSegmentArray> {
    get {
      return frontComponentValuesForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backComponentValueSegments transient property
  //····················································································································

  var backComponentValueSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backComponentValueSegments_property.prop
    }
  }

  var backComponentValueSegments : EBSelection <MergerSegmentArray> {
    get {
      return backComponentValueSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing backComponentValuesForDisplay transient property
  //····················································································································

  var backComponentValuesForDisplay_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backComponentValuesForDisplay_property.prop
    }
  }

  var backComponentValuesForDisplay : EBSelection <MergerSegmentArray> {
    get {
      return backComponentValuesForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backTrackSegments transient property
  //····················································································································

  var backTrackSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backTrackSegments_property.prop
    }
  }

  var backTrackSegments : EBSelection <MergerSegmentArray> {
    get {
      return backTrackSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing backTrackSegmentsForDisplay transient property
  //····················································································································

  var backTrackSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backTrackSegmentsForDisplay_property.prop
    }
  }

  var backTrackSegmentsForDisplay : EBSelection <MergerSegmentArray> {
    get {
      return backTrackSegmentsForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing frontTrackSegments transient property
  //····················································································································

  var frontTrackSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontTrackSegments_property.prop
    }
  }

  var frontTrackSegments : EBSelection <MergerSegmentArray> {
    get {
      return frontTrackSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing frontTrackSegmentsForDisplay transient property
  //····················································································································

  var frontTrackSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontTrackSegmentsForDisplay_property.prop
    }
  }

  var frontTrackSegmentsForDisplay : EBSelection <MergerSegmentArray> {
    get {
      return frontTrackSegmentsForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing frontPackagesSegments transient property
  //····················································································································

  var frontPackagesSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontPackagesSegments_property.prop
    }
  }

  var frontPackagesSegments : EBSelection <MergerSegmentArray> {
    get {
      return frontPackagesSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing frontPackagesSegmentsForDisplay transient property
  //····················································································································

  var frontPackagesSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontPackagesSegmentsForDisplay_property.prop
    }
  }

  var frontPackagesSegmentsForDisplay : EBSelection <MergerSegmentArray> {
    get {
      return frontPackagesSegmentsForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing backPackagesSegments transient property
  //····················································································································

  var backPackagesSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backPackagesSegments_property.prop
    }
  }

  var backPackagesSegments : EBSelection <MergerSegmentArray> {
    get {
      return backPackagesSegments_property_selection
    }
  }

  //····················································································································
  //   Accessing backPackagesSegmentsForDisplay transient property
  //····················································································································

  var backPackagesSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backPackagesSegmentsForDisplay_property.prop
    }
  }

  var backPackagesSegmentsForDisplay : EBSelection <MergerSegmentArray> {
    get {
      return backPackagesSegmentsForDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing myInstances toMany relationship
  //····················································································································

  var myInstances_property_selection : EBSelection < [MergerBoardInstanceEntity] > {
    get {
      return self.myInstances_property.prop
    }
  }

  //····················································································································
  //   Accessing frontLegendTexts toMany relationship
  //····················································································································

  var frontLegendTexts_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.frontLegendTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing frontLayoutTexts toMany relationship
  //····················································································································

  var frontLayoutTexts_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.frontLayoutTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing backLegendTexts toMany relationship
  //····················································································································

  var backLegendTexts_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.backLegendTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing backLayoutTexts toMany relationship
  //····················································································································

  var backLayoutTexts_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.backLayoutTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing vias toMany relationship
  //····················································································································

  var vias_property_selection : EBSelection < [BoardModelViaEntity] > {
    get {
      return self.vias_property.prop
    }
  }

  //····················································································································
  //   Accessing pads toMany relationship
  //····················································································································

  var pads_property_selection : EBSelection < [BoardModelPadEntity] > {
    get {
      return self.pads_property.prop
    }
  }

  //····················································································································
  //   Accessing backComponentNames toMany relationship
  //····················································································································

  var backComponentNames_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.backComponentNames_property.prop
    }
  }

  //····················································································································
  //   Accessing frontComponentNames toMany relationship
  //····················································································································

  var frontComponentNames_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.frontComponentNames_property.prop
    }
  }

  //····················································································································
  //   Accessing frontComponentValues toMany relationship
  //····················································································································

  var frontComponentValues_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.frontComponentValues_property.prop
    }
  }

  //····················································································································
  //   Accessing backComponentValues toMany relationship
  //····················································································································

  var backComponentValues_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.backComponentValues_property.prop
    }
  }

  //····················································································································
  //   Accessing backTracks toMany relationship
  //····················································································································

  var backTracks_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.backTracks_property.prop
    }
  }

  //····················································································································
  //   Accessing frontTracks toMany relationship
  //····················································································································

  var frontTracks_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.frontTracks_property.prop
    }
  }

  //····················································································································
  //   Accessing frontPackages toMany relationship
  //····················································································································

  var frontPackages_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.frontPackages_property.prop
    }
  }

  //····················································································································
  //   Accessing backPackages toMany relationship
  //····················································································································

  var backPackages_property_selection : EBSelection < [CanariSegmentEntity] > {
    get {
      return self.backPackages_property.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var artworkName_property = EBStoredProperty_String ("")
  var name_property = EBStoredProperty_String ("")
  var boardWidth_property = EBStoredProperty_Int (0)
  var boardWidthUnit_property = EBStoredProperty_Int (0)
  var boardHeight_property = EBStoredProperty_Int (0)
  var boardHeightUnit_property = EBStoredProperty_Int (0)
  var zoom_property = EBStoredProperty_Int (0)
  var boardLimitWidth_property = EBStoredProperty_Int (0)
  var boardLimitWidthUnit_property = EBStoredProperty_Int (0)

  //····················································································································
  //    Transient properties
  //····················································································································

  var instanceCount_property = EBTransientProperty_Int ()
  var frontLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontLegendTextsSegmentsForDisplay_property = EBTransientProperty_MergerSegmentArray ()
  var frontLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontLayoutTextsSegmentsForDisplay_property = EBTransientProperty_MergerSegmentArray ()
  var backLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backLegendTextsSegmentsForDisplay_property = EBTransientProperty_MergerSegmentArray ()
  var backLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backLayoutTextsSegmentsForDisplay_property = EBTransientProperty_MergerSegmentArray ()
  var padsHoles_property = EBTransientProperty_MergerHoleArray ()
  var viasHoles_property = EBTransientProperty_MergerHoleArray ()
  var holes_property = EBTransientProperty_MergerHoleArray ()
  var holesForDisplay_property = EBTransientProperty_MergerHoleArray ()
  var viaShapes_property = EBTransientProperty_MergerViaShapeArray ()
  var viaShapesForDisplay_property = EBTransientProperty_MergerViaShapeArray ()
  var frontPads_property = EBTransientProperty_MergerPadArray ()
  var frontPadsForDisplay_property = EBTransientProperty_MergerPadArray ()
  var backPads_property = EBTransientProperty_MergerPadArray ()
  var backPadsForDisplay_property = EBTransientProperty_MergerPadArray ()
  var boardLimits_property = EBTransientProperty_MergerBoardLimits ()
  var backComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backComponentNameSegmentsForDisplay_property = EBTransientProperty_MergerSegmentArray ()
  var frontComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontComponentNameSegmentsForDisplay_property = EBTransientProperty_MergerSegmentArray ()
  var frontComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontComponentValuesForDisplay_property = EBTransientProperty_MergerSegmentArray ()
  var backComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backComponentValuesForDisplay_property = EBTransientProperty_MergerSegmentArray ()
  var backTrackSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backTrackSegmentsForDisplay_property = EBTransientProperty_MergerSegmentArray ()
  var frontTrackSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontTrackSegmentsForDisplay_property = EBTransientProperty_MergerSegmentArray ()
  var frontPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontPackagesSegmentsForDisplay_property = EBTransientProperty_MergerSegmentArray ()
  var backPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backPackagesSegmentsForDisplay_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //    Relationships
  //····················································································································

  var myInstances_property = ToManyRelationship_BoardModelEntity_myInstances ()
  var frontLegendTexts_property = ToManyRelationship_BoardModelEntity_frontLegendTexts ()
  var frontLayoutTexts_property = ToManyRelationship_BoardModelEntity_frontLayoutTexts ()
  var backLegendTexts_property = ToManyRelationship_BoardModelEntity_backLegendTexts ()
  var backLayoutTexts_property = ToManyRelationship_BoardModelEntity_backLayoutTexts ()
  var vias_property = ToManyRelationship_BoardModelEntity_vias ()
  var pads_property = ToManyRelationship_BoardModelEntity_pads ()
  var backComponentNames_property = ToManyRelationship_BoardModelEntity_backComponentNames ()
  var frontComponentNames_property = ToManyRelationship_BoardModelEntity_frontComponentNames ()
  var frontComponentValues_property = ToManyRelationship_BoardModelEntity_frontComponentValues ()
  var backComponentValues_property = ToManyRelationship_BoardModelEntity_backComponentValues ()
  var backTracks_property = ToManyRelationship_BoardModelEntity_backTracks ()
  var frontTracks_property = ToManyRelationship_BoardModelEntity_frontTracks ()
  var frontPackages_property = ToManyRelationship_BoardModelEntity_frontPackages ()
  var backPackages_property = ToManyRelationship_BoardModelEntity_backPackages ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    self.instanceCount_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.myInstances_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.myInstances_property.count_property.prop) {
          case (.single (let v0)) :
            return .single (v0)
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLegendTexts_property.prop, unwSelf.frontLegendTexts_property.prop, unwSelf.frontLegendTexts_property.prop, unwSelf.frontLegendTexts_property.prop, unwSelf.frontLegendTexts_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontLegendTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTextsSegmentsForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontLegendTexts_property.prop, unwSelf.frontLegendTextsSegments_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontLegendTextsSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLayoutTexts_property.prop, unwSelf.frontLayoutTexts_property.prop, unwSelf.frontLayoutTexts_property.prop, unwSelf.frontLayoutTexts_property.prop, unwSelf.frontLayoutTexts_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontLayoutTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTextsSegmentsForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontLayoutTexts_property.prop, unwSelf.frontLayoutTextsSegments_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontLayoutTextsSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLegendTexts_property.prop, unwSelf.backLegendTexts_property.prop, unwSelf.backLegendTexts_property.prop, unwSelf.backLegendTexts_property.prop, unwSelf.backLegendTexts_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backLegendTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendTextsSegmentsForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackLegendTexts_property.prop, unwSelf.backLegendTextsSegments_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backLegendTextsSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLayoutTexts_property.prop, unwSelf.backLayoutTexts_property.prop, unwSelf.backLayoutTexts_property.prop, unwSelf.backLayoutTexts_property.prop, unwSelf.backLayoutTexts_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backLayoutTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTextsSegmentsForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackLayoutTexts_property.prop, unwSelf.backLayoutTextsSegments_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backLayoutTextsSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padsHoles_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModelEntity_padsHoles (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viasHoles_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.vias_property.prop, unwSelf.vias_property.prop, unwSelf.vias_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModelEntity_viasHoles (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.holes_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.padsHoles_property_selection.kind ()
        kind &= unwSelf.viasHoles_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.padsHoles_property.prop, unwSelf.viasHoles_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_holes (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.holesForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayHoles_property_selection.kind ()
        kind &= unwSelf.holes_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayHoles_property.prop, unwSelf.holes_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_holesForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viaShapes_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.vias_property.prop, unwSelf.vias_property.prop, unwSelf.vias_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModelEntity_viaShapes (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viaShapesForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayVias_property_selection.kind ()
        kind &= unwSelf.viaShapes_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayVias_property.prop, unwSelf.viaShapes_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_viaShapesForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPads_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (compute_BoardModelEntity_frontPads (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPadsForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontPads_property.prop, unwSelf.frontPads_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontPadsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPads_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop, unwSelf.pads_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (compute_BoardModelEntity_backPads (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPadsForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackPads_property.prop, unwSelf.backPads_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backPadsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardLimits_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardWidth_property_selection.kind ()
        kind &= unwSelf.boardHeight_property_selection.kind ()
        kind &= unwSelf.boardLimitWidth_property_selection.kind ()
        kind &= g_Preferences!.mergerDisplayBoardLimits_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardWidth_property.prop, unwSelf.boardHeight_property.prop, unwSelf.boardLimitWidth_property.prop, g_Preferences!.mergerDisplayBoardLimits_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (compute_BoardModelEntity_boardLimits (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentNameSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentNames_property.prop, unwSelf.backComponentNames_property.prop, unwSelf.backComponentNames_property.prop, unwSelf.backComponentNames_property.prop, unwSelf.backComponentNames_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentNameSegmentsForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNameSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackComponentNames_property.prop, unwSelf.backComponentNameSegments_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backComponentNameSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNameSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentNames_property.prop, unwSelf.frontComponentNames_property.prop, unwSelf.frontComponentNames_property.prop, unwSelf.frontComponentNames_property.prop, unwSelf.frontComponentNames_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNameSegmentsForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNameSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontComponentNames_property.prop, unwSelf.frontComponentNameSegments_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontComponentNameSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValueSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentValues_property.prop, unwSelf.frontComponentValues_property.prop, unwSelf.frontComponentValues_property.prop, unwSelf.frontComponentValues_property.prop, unwSelf.frontComponentValues_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontComponentValueSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValuesForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValueSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontComponentValues_property.prop, unwSelf.frontComponentValueSegments_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontComponentValuesForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentValueSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentValues_property.prop, unwSelf.backComponentValues_property.prop, unwSelf.backComponentValues_property.prop, unwSelf.backComponentValues_property.prop, unwSelf.backComponentValues_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backComponentValueSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentValuesForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValueSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackComponentValues_property.prop, unwSelf.backComponentValueSegments_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backComponentValuesForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backTrackSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backTracks_property.prop, unwSelf.backTracks_property.prop, unwSelf.backTracks_property.prop, unwSelf.backTracks_property.prop, unwSelf.backTracks_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backTrackSegmentsForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackLayoutTracks_property_selection.kind ()
        kind &= unwSelf.backTrackSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackLayoutTracks_property.prop, unwSelf.backTrackSegments_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backTrackSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontTrackSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontTracks_property.prop, unwSelf.frontTracks_property.prop, unwSelf.frontTracks_property.prop, unwSelf.frontTracks_property.prop, unwSelf.frontTracks_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontTrackSegmentsForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontLayoutTracks_property_selection.kind ()
        kind &= unwSelf.frontTrackSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontLayoutTracks_property.prop, unwSelf.frontTrackSegments_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontTrackSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPackagesSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontPackages_property.prop, unwSelf.frontPackages_property.prop, unwSelf.frontPackages_property.prop, unwSelf.frontPackages_property.prop, unwSelf.frontPackages_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_frontPackagesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPackagesSegmentsForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayFrontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackagesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayFrontPackages_property.prop, unwSelf.frontPackagesSegments_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_frontPackagesSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPackagesSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backPackages_property.prop, unwSelf.backPackages_property.prop, unwSelf.backPackages_property.prop, unwSelf.backPackages_property.prop, unwSelf.backPackages_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModelEntity_backPackagesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPackagesSegmentsForDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerDisplayBackPackages_property_selection.kind ()
        kind &= unwSelf.backPackagesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerDisplayBackPackages_property.prop, unwSelf.backPackagesSegments_property.prop) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModelEntity_backPackagesSegmentsForDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--- Install property observers for transients
    self.myInstances_property.addEBObserver (self.instanceCount_property)
    self.frontLegendTexts_property.addEBObserverOf_x1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_y1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_x2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_y2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_width (self.frontLegendTextsSegments_property)
    g_Preferences?.mergerDisplayFrontLegendTexts_property.addEBObserver (self.frontLegendTextsSegmentsForDisplay_property)
    self.frontLegendTextsSegments_property.addEBObserver (self.frontLegendTextsSegmentsForDisplay_property)
    self.frontLayoutTexts_property.addEBObserverOf_x1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_y1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_x2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_y2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_width (self.frontLayoutTextsSegments_property)
    g_Preferences?.mergerDisplayFrontLayoutTexts_property.addEBObserver (self.frontLayoutTextsSegmentsForDisplay_property)
    self.frontLayoutTextsSegments_property.addEBObserver (self.frontLayoutTextsSegmentsForDisplay_property)
    self.backLegendTexts_property.addEBObserverOf_x1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_y1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_x2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_y2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_width (self.backLegendTextsSegments_property)
    g_Preferences?.mergerDisplayBackLegendTexts_property.addEBObserver (self.backLegendTextsSegmentsForDisplay_property)
    self.backLegendTextsSegments_property.addEBObserver (self.backLegendTextsSegmentsForDisplay_property)
    self.backLayoutTexts_property.addEBObserverOf_x1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_y1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_x2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_y2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_width (self.backLayoutTextsSegments_property)
    g_Preferences?.mergerDisplayBackLayoutTexts_property.addEBObserver (self.backLayoutTextsSegmentsForDisplay_property)
    self.backLayoutTextsSegments_property.addEBObserver (self.backLayoutTextsSegmentsForDisplay_property)
    self.pads_property.addEBObserverOf_x (self.padsHoles_property)
    self.pads_property.addEBObserverOf_y (self.padsHoles_property)
    self.pads_property.addEBObserverOf_holeDiameter (self.padsHoles_property)
    self.vias_property.addEBObserverOf_x (self.viasHoles_property)
    self.vias_property.addEBObserverOf_y (self.viasHoles_property)
    self.vias_property.addEBObserverOf_holeDiameter (self.viasHoles_property)
    self.padsHoles_property.addEBObserver (self.holes_property)
    self.viasHoles_property.addEBObserver (self.holes_property)
    g_Preferences?.mergerDisplayHoles_property.addEBObserver (self.holesForDisplay_property)
    self.holes_property.addEBObserver (self.holesForDisplay_property)
    self.vias_property.addEBObserverOf_x (self.viaShapes_property)
    self.vias_property.addEBObserverOf_y (self.viaShapes_property)
    self.vias_property.addEBObserverOf_padDiameter (self.viaShapes_property)
    g_Preferences?.mergerDisplayVias_property.addEBObserver (self.viaShapesForDisplay_property)
    self.viaShapes_property.addEBObserver (self.viaShapesForDisplay_property)
    self.pads_property.addEBObserverOf_x (self.frontPads_property)
    self.pads_property.addEBObserverOf_y (self.frontPads_property)
    self.pads_property.addEBObserverOf_width (self.frontPads_property)
    self.pads_property.addEBObserverOf_height (self.frontPads_property)
    self.pads_property.addEBObserverOf_holeDiameter (self.frontPads_property)
    self.pads_property.addEBObserverOf_shape (self.frontPads_property)
    self.pads_property.addEBObserverOf_side (self.frontPads_property)
    self.pads_property.addEBObserverOf_rotation (self.frontPads_property)
    g_Preferences?.mergerDisplayFrontPads_property.addEBObserver (self.frontPadsForDisplay_property)
    self.frontPads_property.addEBObserver (self.frontPadsForDisplay_property)
    self.pads_property.addEBObserverOf_x (self.backPads_property)
    self.pads_property.addEBObserverOf_y (self.backPads_property)
    self.pads_property.addEBObserverOf_width (self.backPads_property)
    self.pads_property.addEBObserverOf_height (self.backPads_property)
    self.pads_property.addEBObserverOf_holeDiameter (self.backPads_property)
    self.pads_property.addEBObserverOf_shape (self.backPads_property)
    self.pads_property.addEBObserverOf_side (self.backPads_property)
    self.pads_property.addEBObserverOf_rotation (self.backPads_property)
    g_Preferences?.mergerDisplayBackPads_property.addEBObserver (self.backPadsForDisplay_property)
    self.backPads_property.addEBObserver (self.backPadsForDisplay_property)
    self.boardWidth_property.addEBObserver (self.boardLimits_property)
    self.boardHeight_property.addEBObserver (self.boardLimits_property)
    self.boardLimitWidth_property.addEBObserver (self.boardLimits_property)
    g_Preferences?.mergerDisplayBoardLimits_property.addEBObserver (self.boardLimits_property)
    self.backComponentNames_property.addEBObserverOf_x1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_y1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_x2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_y2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_width (self.backComponentNameSegments_property)
    g_Preferences?.mergerDisplayBackComponentNames_property.addEBObserver (self.backComponentNameSegmentsForDisplay_property)
    self.backComponentNameSegments_property.addEBObserver (self.backComponentNameSegmentsForDisplay_property)
    self.frontComponentNames_property.addEBObserverOf_x1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_y1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_x2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_y2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_width (self.frontComponentNameSegments_property)
    g_Preferences?.mergerDisplayFrontComponentNames_property.addEBObserver (self.frontComponentNameSegmentsForDisplay_property)
    self.frontComponentNameSegments_property.addEBObserver (self.frontComponentNameSegmentsForDisplay_property)
    self.frontComponentValues_property.addEBObserverOf_x1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_y1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_x2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_y2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_width (self.frontComponentValueSegments_property)
    g_Preferences?.mergerDisplayFrontComponentValues_property.addEBObserver (self.frontComponentValuesForDisplay_property)
    self.frontComponentValueSegments_property.addEBObserver (self.frontComponentValuesForDisplay_property)
    self.backComponentValues_property.addEBObserverOf_x1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_y1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_x2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_y2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_width (self.backComponentValueSegments_property)
    g_Preferences?.mergerDisplayBackComponentValues_property.addEBObserver (self.backComponentValuesForDisplay_property)
    self.backComponentValueSegments_property.addEBObserver (self.backComponentValuesForDisplay_property)
    self.backTracks_property.addEBObserverOf_x1 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_y1 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_x2 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_y2 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_width (self.backTrackSegments_property)
    g_Preferences?.mergerDisplayBackLayoutTracks_property.addEBObserver (self.backTrackSegmentsForDisplay_property)
    self.backTrackSegments_property.addEBObserver (self.backTrackSegmentsForDisplay_property)
    self.frontTracks_property.addEBObserverOf_x1 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_y1 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_x2 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_y2 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_width (self.frontTrackSegments_property)
    g_Preferences?.mergerDisplayFrontLayoutTracks_property.addEBObserver (self.frontTrackSegmentsForDisplay_property)
    self.frontTrackSegments_property.addEBObserver (self.frontTrackSegmentsForDisplay_property)
    self.frontPackages_property.addEBObserverOf_x1 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_y1 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_x2 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_y2 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_width (self.frontPackagesSegments_property)
    g_Preferences?.mergerDisplayFrontPackages_property.addEBObserver (self.frontPackagesSegmentsForDisplay_property)
    self.frontPackagesSegments_property.addEBObserver (self.frontPackagesSegmentsForDisplay_property)
    self.backPackages_property.addEBObserverOf_x1 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_y1 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_x2 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_y2 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_width (self.backPackagesSegments_property)
    g_Preferences?.mergerDisplayBackPackages_property.addEBObserver (self.backPackagesSegmentsForDisplay_property)
    self.backPackagesSegments_property.addEBObserver (self.backPackagesSegmentsForDisplay_property)
  //--- Install undoers for properties
    self.artworkName_property.undoManager = undoManager ()
    self.name_property.undoManager = undoManager ()
    self.boardWidth_property.undoManager = undoManager ()
    self.boardWidthUnit_property.undoManager = undoManager ()
    self.boardHeight_property.undoManager = undoManager ()
    self.boardHeightUnit_property.undoManager = undoManager ()
    self.zoom_property.undoManager = undoManager ()
    self.boardLimitWidth_property.undoManager = undoManager ()
    self.boardLimitWidthUnit_property.undoManager = undoManager ()
  //--- Install owner for relationships
    self.myInstances_property.owner = self
    self.frontLegendTexts_property.owner = self
    self.frontLayoutTexts_property.owner = self
    self.backLegendTexts_property.owner = self
    self.backLayoutTexts_property.owner = self
    self.vias_property.owner = self
    self.pads_property.owner = self
    self.backComponentNames_property.owner = self
    self.frontComponentNames_property.owner = self
    self.frontComponentValues_property.owner = self
    self.backComponentValues_property.owner = self
    self.backTracks_property.owner = self
    self.frontTracks_property.owner = self
    self.frontPackages_property.owner = self
    self.backPackages_property.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.myInstances_property.removeEBObserver (self.instanceCount_property)
    self.frontLegendTexts_property.removeEBObserverOf_x1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_y1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_x2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_y2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_width (self.frontLegendTextsSegments_property)
    g_Preferences?.mergerDisplayFrontLegendTexts_property.removeEBObserver (self.frontLegendTextsSegmentsForDisplay_property)
    self.frontLegendTextsSegments_property.removeEBObserver (self.frontLegendTextsSegmentsForDisplay_property)
    self.frontLayoutTexts_property.removeEBObserverOf_x1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_y1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_x2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_y2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_width (self.frontLayoutTextsSegments_property)
    g_Preferences?.mergerDisplayFrontLayoutTexts_property.removeEBObserver (self.frontLayoutTextsSegmentsForDisplay_property)
    self.frontLayoutTextsSegments_property.removeEBObserver (self.frontLayoutTextsSegmentsForDisplay_property)
    self.backLegendTexts_property.removeEBObserverOf_x1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_y1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_x2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_y2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_width (self.backLegendTextsSegments_property)
    g_Preferences?.mergerDisplayBackLegendTexts_property.removeEBObserver (self.backLegendTextsSegmentsForDisplay_property)
    self.backLegendTextsSegments_property.removeEBObserver (self.backLegendTextsSegmentsForDisplay_property)
    self.backLayoutTexts_property.removeEBObserverOf_x1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_y1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_x2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_y2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_width (self.backLayoutTextsSegments_property)
    g_Preferences?.mergerDisplayBackLayoutTexts_property.removeEBObserver (self.backLayoutTextsSegmentsForDisplay_property)
    self.backLayoutTextsSegments_property.removeEBObserver (self.backLayoutTextsSegmentsForDisplay_property)
    self.pads_property.removeEBObserverOf_x (self.padsHoles_property)
    self.pads_property.removeEBObserverOf_y (self.padsHoles_property)
    self.pads_property.removeEBObserverOf_holeDiameter (self.padsHoles_property)
    self.vias_property.removeEBObserverOf_x (self.viasHoles_property)
    self.vias_property.removeEBObserverOf_y (self.viasHoles_property)
    self.vias_property.removeEBObserverOf_holeDiameter (self.viasHoles_property)
    self.padsHoles_property.removeEBObserver (self.holes_property)
    self.viasHoles_property.removeEBObserver (self.holes_property)
    g_Preferences?.mergerDisplayHoles_property.removeEBObserver (self.holesForDisplay_property)
    self.holes_property.removeEBObserver (self.holesForDisplay_property)
    self.vias_property.removeEBObserverOf_x (self.viaShapes_property)
    self.vias_property.removeEBObserverOf_y (self.viaShapes_property)
    self.vias_property.removeEBObserverOf_padDiameter (self.viaShapes_property)
    g_Preferences?.mergerDisplayVias_property.removeEBObserver (self.viaShapesForDisplay_property)
    self.viaShapes_property.removeEBObserver (self.viaShapesForDisplay_property)
    self.pads_property.removeEBObserverOf_x (self.frontPads_property)
    self.pads_property.removeEBObserverOf_y (self.frontPads_property)
    self.pads_property.removeEBObserverOf_width (self.frontPads_property)
    self.pads_property.removeEBObserverOf_height (self.frontPads_property)
    self.pads_property.removeEBObserverOf_holeDiameter (self.frontPads_property)
    self.pads_property.removeEBObserverOf_shape (self.frontPads_property)
    self.pads_property.removeEBObserverOf_side (self.frontPads_property)
    self.pads_property.removeEBObserverOf_rotation (self.frontPads_property)
    g_Preferences?.mergerDisplayFrontPads_property.removeEBObserver (self.frontPadsForDisplay_property)
    self.frontPads_property.removeEBObserver (self.frontPadsForDisplay_property)
    self.pads_property.removeEBObserverOf_x (self.backPads_property)
    self.pads_property.removeEBObserverOf_y (self.backPads_property)
    self.pads_property.removeEBObserverOf_width (self.backPads_property)
    self.pads_property.removeEBObserverOf_height (self.backPads_property)
    self.pads_property.removeEBObserverOf_holeDiameter (self.backPads_property)
    self.pads_property.removeEBObserverOf_shape (self.backPads_property)
    self.pads_property.removeEBObserverOf_side (self.backPads_property)
    self.pads_property.removeEBObserverOf_rotation (self.backPads_property)
    g_Preferences?.mergerDisplayBackPads_property.removeEBObserver (self.backPadsForDisplay_property)
    self.backPads_property.removeEBObserver (self.backPadsForDisplay_property)
    self.boardWidth_property.removeEBObserver (self.boardLimits_property)
    self.boardHeight_property.removeEBObserver (self.boardLimits_property)
    self.boardLimitWidth_property.removeEBObserver (self.boardLimits_property)
    g_Preferences?.mergerDisplayBoardLimits_property.removeEBObserver (self.boardLimits_property)
    self.backComponentNames_property.removeEBObserverOf_x1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_y1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_x2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_y2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_width (self.backComponentNameSegments_property)
    g_Preferences?.mergerDisplayBackComponentNames_property.removeEBObserver (self.backComponentNameSegmentsForDisplay_property)
    self.backComponentNameSegments_property.removeEBObserver (self.backComponentNameSegmentsForDisplay_property)
    self.frontComponentNames_property.removeEBObserverOf_x1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_y1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_x2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_y2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_width (self.frontComponentNameSegments_property)
    g_Preferences?.mergerDisplayFrontComponentNames_property.removeEBObserver (self.frontComponentNameSegmentsForDisplay_property)
    self.frontComponentNameSegments_property.removeEBObserver (self.frontComponentNameSegmentsForDisplay_property)
    self.frontComponentValues_property.removeEBObserverOf_x1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_y1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_x2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_y2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_width (self.frontComponentValueSegments_property)
    g_Preferences?.mergerDisplayFrontComponentValues_property.removeEBObserver (self.frontComponentValuesForDisplay_property)
    self.frontComponentValueSegments_property.removeEBObserver (self.frontComponentValuesForDisplay_property)
    self.backComponentValues_property.removeEBObserverOf_x1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_y1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_x2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_y2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_width (self.backComponentValueSegments_property)
    g_Preferences?.mergerDisplayBackComponentValues_property.removeEBObserver (self.backComponentValuesForDisplay_property)
    self.backComponentValueSegments_property.removeEBObserver (self.backComponentValuesForDisplay_property)
    self.backTracks_property.removeEBObserverOf_x1 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_y1 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_x2 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_y2 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_width (self.backTrackSegments_property)
    g_Preferences?.mergerDisplayBackLayoutTracks_property.removeEBObserver (self.backTrackSegmentsForDisplay_property)
    self.backTrackSegments_property.removeEBObserver (self.backTrackSegmentsForDisplay_property)
    self.frontTracks_property.removeEBObserverOf_x1 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_y1 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_x2 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_y2 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_width (self.frontTrackSegments_property)
    g_Preferences?.mergerDisplayFrontLayoutTracks_property.removeEBObserver (self.frontTrackSegmentsForDisplay_property)
    self.frontTrackSegments_property.removeEBObserver (self.frontTrackSegmentsForDisplay_property)
    self.frontPackages_property.removeEBObserverOf_x1 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_y1 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_x2 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_y2 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_width (self.frontPackagesSegments_property)
    g_Preferences?.mergerDisplayFrontPackages_property.removeEBObserver (self.frontPackagesSegmentsForDisplay_property)
    self.frontPackagesSegments_property.removeEBObserver (self.frontPackagesSegmentsForDisplay_property)
    self.backPackages_property.removeEBObserverOf_x1 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_y1 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_x2 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_y2 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_width (self.backPackagesSegments_property)
    g_Preferences?.mergerDisplayBackPackages_property.removeEBObserver (self.backPackagesSegmentsForDisplay_property)
    self.backPackagesSegments_property.removeEBObserver (self.backPackagesSegmentsForDisplay_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "artworkName",
      idx:self.artworkName_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.artworkName_property.mObserverExplorer,
      valueExplorer:&self.artworkName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name_property.mObserverExplorer,
      valueExplorer:&self.name_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidth",
      idx:self.boardWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidth_property.mObserverExplorer,
      valueExplorer:&self.boardWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidthUnit",
      idx:self.boardWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.boardWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeight",
      idx:self.boardHeight_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeight_property.mObserverExplorer,
      valueExplorer:&self.boardHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeightUnit",
      idx:self.boardHeightUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeightUnit_property.mObserverExplorer,
      valueExplorer:&self.boardHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom_property.mObserverExplorer,
      valueExplorer:&self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidth",
      idx:self.boardLimitWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidth_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidthUnit",
      idx:self.boardLimitWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidthUnit_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "instanceCount",
      idx:self.instanceCount_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceCount_property.mObserverExplorer,
      valueExplorer:&self.instanceCount_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsSegments",
      idx:self.frontLegendTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.frontLegendTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsSegmentsForDisplay",
      idx:self.frontLegendTextsSegmentsForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendTextsSegmentsForDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontLegendTextsSegmentsForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsSegments",
      idx:self.frontLayoutTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLayoutTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.frontLayoutTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsSegmentsForDisplay",
      idx:self.frontLayoutTextsSegmentsForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLayoutTextsSegmentsForDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontLayoutTextsSegmentsForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsSegments",
      idx:self.backLegendTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.backLegendTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsSegmentsForDisplay",
      idx:self.backLegendTextsSegmentsForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendTextsSegmentsForDisplay_property.mObserverExplorer,
      valueExplorer:&self.backLegendTextsSegmentsForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsSegments",
      idx:self.backLayoutTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLayoutTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.backLayoutTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsSegmentsForDisplay",
      idx:self.backLayoutTextsSegmentsForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLayoutTextsSegmentsForDisplay_property.mObserverExplorer,
      valueExplorer:&self.backLayoutTextsSegmentsForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padsHoles",
      idx:self.padsHoles_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padsHoles_property.mObserverExplorer,
      valueExplorer:&self.padsHoles_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viasHoles",
      idx:self.viasHoles_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viasHoles_property.mObserverExplorer,
      valueExplorer:&self.viasHoles_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holes",
      idx:self.holes_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holes_property.mObserverExplorer,
      valueExplorer:&self.holes_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holesForDisplay",
      idx:self.holesForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holesForDisplay_property.mObserverExplorer,
      valueExplorer:&self.holesForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaShapes",
      idx:self.viaShapes_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaShapes_property.mObserverExplorer,
      valueExplorer:&self.viaShapes_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaShapesForDisplay",
      idx:self.viaShapesForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaShapesForDisplay_property.mObserverExplorer,
      valueExplorer:&self.viaShapesForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPads",
      idx:self.frontPads_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPads_property.mObserverExplorer,
      valueExplorer:&self.frontPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPadsForDisplay",
      idx:self.frontPadsForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPadsForDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontPadsForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPads",
      idx:self.backPads_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPads_property.mObserverExplorer,
      valueExplorer:&self.backPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPadsForDisplay",
      idx:self.backPadsForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPadsForDisplay_property.mObserverExplorer,
      valueExplorer:&self.backPadsForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimits",
      idx:self.boardLimits_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimits_property.mObserverExplorer,
      valueExplorer:&self.boardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameSegments",
      idx:self.backComponentNameSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameSegments_property.mObserverExplorer,
      valueExplorer:&self.backComponentNameSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameSegmentsForDisplay",
      idx:self.backComponentNameSegmentsForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameSegmentsForDisplay_property.mObserverExplorer,
      valueExplorer:&self.backComponentNameSegmentsForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameSegments",
      idx:self.frontComponentNameSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameSegments_property.mObserverExplorer,
      valueExplorer:&self.frontComponentNameSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameSegmentsForDisplay",
      idx:self.frontComponentNameSegmentsForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameSegmentsForDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontComponentNameSegmentsForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValueSegments",
      idx:self.frontComponentValueSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValueSegments_property.mObserverExplorer,
      valueExplorer:&self.frontComponentValueSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValuesForDisplay",
      idx:self.frontComponentValuesForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValuesForDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontComponentValuesForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValueSegments",
      idx:self.backComponentValueSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValueSegments_property.mObserverExplorer,
      valueExplorer:&self.backComponentValueSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValuesForDisplay",
      idx:self.backComponentValuesForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValuesForDisplay_property.mObserverExplorer,
      valueExplorer:&self.backComponentValuesForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTrackSegments",
      idx:self.backTrackSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTrackSegments_property.mObserverExplorer,
      valueExplorer:&self.backTrackSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTrackSegmentsForDisplay",
      idx:self.backTrackSegmentsForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTrackSegmentsForDisplay_property.mObserverExplorer,
      valueExplorer:&self.backTrackSegmentsForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTrackSegments",
      idx:self.frontTrackSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTrackSegments_property.mObserverExplorer,
      valueExplorer:&self.frontTrackSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTrackSegmentsForDisplay",
      idx:self.frontTrackSegmentsForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTrackSegmentsForDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontTrackSegmentsForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesSegments",
      idx:self.frontPackagesSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackagesSegments_property.mObserverExplorer,
      valueExplorer:&self.frontPackagesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesSegmentsForDisplay",
      idx:self.frontPackagesSegmentsForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackagesSegmentsForDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontPackagesSegmentsForDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesSegments",
      idx:self.backPackagesSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackagesSegments_property.mObserverExplorer,
      valueExplorer:&self.backPackagesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesSegmentsForDisplay",
      idx:self.backPackagesSegmentsForDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackagesSegmentsForDisplay_property.mObserverExplorer,
      valueExplorer:&self.backPackagesSegmentsForDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "myInstances",
      idx:myInstances_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&myInstances_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontLegendTexts",
      idx:frontLegendTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLegendTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontLayoutTexts",
      idx:frontLayoutTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLayoutTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLegendTexts",
      idx:backLegendTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLegendTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLayoutTexts",
      idx:backLayoutTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLayoutTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "vias",
      idx:vias_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&vias_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "pads",
      idx:pads_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&pads_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backComponentNames",
      idx:backComponentNames_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backComponentNames_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontComponentNames",
      idx:frontComponentNames_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontComponentNames_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontComponentValues",
      idx:frontComponentValues_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontComponentValues_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backComponentValues",
      idx:backComponentValues_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backComponentValues_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backTracks",
      idx:backTracks_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backTracks_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontTracks",
      idx:frontTracks_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontTracks_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontPackages",
      idx:frontPackages_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontPackages_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backPackages",
      idx:backPackages_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backPackages_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.artworkName_property.mObserverExplorer = nil
    self.artworkName_property.mValueExplorer = nil
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
    self.boardWidth_property.mObserverExplorer = nil
    self.boardWidth_property.mValueExplorer = nil
    self.boardWidthUnit_property.mObserverExplorer = nil
    self.boardWidthUnit_property.mValueExplorer = nil
    self.boardHeight_property.mObserverExplorer = nil
    self.boardHeight_property.mValueExplorer = nil
    self.boardHeightUnit_property.mObserverExplorer = nil
    self.boardHeightUnit_property.mValueExplorer = nil
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
    self.boardLimitWidth_property.mObserverExplorer = nil
    self.boardLimitWidth_property.mValueExplorer = nil
    self.boardLimitWidthUnit_property.mObserverExplorer = nil
    self.boardLimitWidthUnit_property.mValueExplorer = nil
    self.myInstances_property.mValueExplorer = nil
    self.frontLegendTexts_property.mValueExplorer = nil
    self.frontLayoutTexts_property.mValueExplorer = nil
    self.backLegendTexts_property.mValueExplorer = nil
    self.backLayoutTexts_property.mValueExplorer = nil
    self.vias_property.mValueExplorer = nil
    self.pads_property.mValueExplorer = nil
    self.backComponentNames_property.mValueExplorer = nil
    self.frontComponentNames_property.mValueExplorer = nil
    self.frontComponentValues_property.mValueExplorer = nil
    self.backComponentValues_property.mValueExplorer = nil
    self.backTracks_property.mValueExplorer = nil
    self.frontTracks_property.mValueExplorer = nil
    self.frontPackages_property.mValueExplorer = nil
    self.backPackages_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.artworkName_property.storeIn (dictionary: ioDictionary, forKey: "artworkName")
    self.name_property.storeIn (dictionary: ioDictionary, forKey: "name")
    self.boardWidth_property.storeIn (dictionary: ioDictionary, forKey: "boardWidth")
    self.boardWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "boardWidthUnit")
    self.boardHeight_property.storeIn (dictionary: ioDictionary, forKey: "boardHeight")
    self.boardHeightUnit_property.storeIn (dictionary: ioDictionary, forKey: "boardHeightUnit")
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey: "zoom")
    self.boardLimitWidth_property.storeIn (dictionary: ioDictionary, forKey: "boardLimitWidth")
    self.boardLimitWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "boardLimitWidthUnit")
    store (managedObjectArray: myInstances_property.propval as NSArray, relationshipName:"myInstances", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontLegendTexts_property.propval as NSArray, relationshipName:"frontLegendTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontLayoutTexts_property.propval as NSArray, relationshipName:"frontLayoutTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backLegendTexts_property.propval as NSArray, relationshipName:"backLegendTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backLayoutTexts_property.propval as NSArray, relationshipName:"backLayoutTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: vias_property.propval as NSArray, relationshipName:"vias", intoDictionary: ioDictionary) ;
    store (managedObjectArray: pads_property.propval as NSArray, relationshipName:"pads", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backComponentNames_property.propval as NSArray, relationshipName:"backComponentNames", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontComponentNames_property.propval as NSArray, relationshipName:"frontComponentNames", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontComponentValues_property.propval as NSArray, relationshipName:"frontComponentValues", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backComponentValues_property.propval as NSArray, relationshipName:"backComponentValues", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backTracks_property.propval as NSArray, relationshipName:"backTracks", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontTracks_property.propval as NSArray, relationshipName:"frontTracks", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontPackages_property.propval as NSArray, relationshipName:"frontPackages", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backPackages_property.propval as NSArray, relationshipName:"backPackages", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.artworkName_property.readFrom (dictionary: inDictionary, forKey:"artworkName")
    self.name_property.readFrom (dictionary: inDictionary, forKey:"name")
    self.boardWidth_property.readFrom (dictionary: inDictionary, forKey:"boardWidth")
    self.boardWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"boardWidthUnit")
    self.boardHeight_property.readFrom (dictionary: inDictionary, forKey:"boardHeight")
    self.boardHeightUnit_property.readFrom (dictionary: inDictionary, forKey:"boardHeightUnit")
    self.zoom_property.readFrom (dictionary: inDictionary, forKey:"zoom")
    self.boardLimitWidth_property.readFrom (dictionary: inDictionary, forKey:"boardLimitWidth")
    self.boardLimitWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"boardLimitWidthUnit")
    self.myInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "myInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [MergerBoardInstanceEntity])
    self.frontLegendTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLegendTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.frontLayoutTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLayoutTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.backLegendTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLegendTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.backLayoutTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLayoutTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.vias_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "vias",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelViaEntity])
    self.pads_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "pads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelPadEntity])
    self.backComponentNames_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.frontComponentNames_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.frontComponentValues_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.backComponentValues_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.backTracks_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.frontTracks_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.frontPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
    self.backPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegmentEntity])
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    self.myInstances_property.setProp ([]) // Set relationships to nil
    do{
      let objects = self.frontLegendTexts_property.propval
      self.frontLegendTexts_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontLayoutTexts_property.propval
      self.frontLayoutTexts_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backLegendTexts_property.propval
      self.backLegendTexts_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backLayoutTexts_property.propval
      self.backLayoutTexts_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.vias_property.propval
      self.vias_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.pads_property.propval
      self.pads_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backComponentNames_property.propval
      self.backComponentNames_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontComponentNames_property.propval
      self.frontComponentNames_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontComponentValues_property.propval
      self.frontComponentValues_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backComponentValues_property.propval
      self.backComponentValues_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backTracks_property.propval
      self.backTracks_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontTracks_property.propval
      self.frontTracks_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontPackages_property.propval
      self.frontPackages_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backPackages_property.propval
      self.backPackages_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    self.myInstances_property.setProp ([])
    self.frontLegendTexts_property.setProp ([])
    self.frontLayoutTexts_property.setProp ([])
    self.backLegendTexts_property.setProp ([])
    self.backLayoutTexts_property.setProp ([])
    self.vias_property.setProp ([])
    self.pads_property.setProp ([])
    self.backComponentNames_property.setProp ([])
    self.frontComponentNames_property.setProp ([])
    self.frontComponentValues_property.setProp ([])
    self.backComponentValues_property.setProp ([])
    self.backTracks_property.setProp ([])
    self.frontTracks_property.setProp ([])
    self.frontPackages_property.setProp ([])
    self.backPackages_property.setProp ([])
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in self.myInstances_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontLegendTexts_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontLayoutTexts_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backLegendTexts_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backLayoutTexts_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.vias_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.pads_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backComponentNames_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontComponentNames_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontComponentValues_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backComponentValues_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backTracks_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontTracks_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontPackages_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backPackages_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardModelEntity : ReadOnlyAbstractArrayProperty <BoardModelEntity> {

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_artworkName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_artworkName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_artworkName {
        managedObject.artworkName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_artworkName {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.artworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_name.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_name.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_name {
        managedObject.name_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_name {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidth' stored property
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidth_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidth {
        managedObject.boardWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidth_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidthUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidthUnit {
        managedObject.boardWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidthUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeight' stored property
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeight_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeight {
        managedObject.boardHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeight_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardHeight {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeightUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeightUnit {
        managedObject.boardHeightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeightUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardHeightUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_zoom {
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_zoom {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidth_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidth {
        managedObject.boardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidth_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardLimitWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidthUnit {
        managedObject.boardLimitWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for observer in mObserversOf_boardLimitWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceCount' transient property
  //····················································································································

  private var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instanceCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instanceCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceCount_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceCount {
        managedObject.instanceCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceCount_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceCount {
        managedObject.instanceCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsSegments' transient property
  //····················································································································

  private var mObserversOf_frontLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegments {
        managedObject.frontLegendTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegments {
        managedObject.frontLegendTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontLegendTextsSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegmentsForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegmentsForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegmentsForDisplay {
        managedObject.frontLegendTextsSegmentsForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegmentsForDisplay {
        managedObject.frontLegendTextsSegmentsForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsSegments' transient property
  //····················································································································

  private var mObserversOf_frontLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegments {
        managedObject.frontLayoutTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegments {
        managedObject.frontLayoutTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontLayoutTextsSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegmentsForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegmentsForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegmentsForDisplay {
        managedObject.frontLayoutTextsSegmentsForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegmentsForDisplay {
        managedObject.frontLayoutTextsSegmentsForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsSegments' transient property
  //····················································································································

  private var mObserversOf_backLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegments {
        managedObject.backLegendTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegments {
        managedObject.backLegendTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backLegendTextsSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendTextsSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegmentsForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendTextsSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegmentsForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegmentsForDisplay {
        managedObject.backLegendTextsSegmentsForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegmentsForDisplay {
        managedObject.backLegendTextsSegmentsForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsSegments' transient property
  //····················································································································

  private var mObserversOf_backLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegments {
        managedObject.backLayoutTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegments {
        managedObject.backLayoutTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backLayoutTextsSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegmentsForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegmentsForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegmentsForDisplay {
        managedObject.backLayoutTextsSegmentsForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegmentsForDisplay {
        managedObject.backLayoutTextsSegmentsForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padsHoles' transient property
  //····················································································································

  private var mObserversOf_padsHoles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padsHoles (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_padsHoles.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padsHoles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padsHoles (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_padsHoles.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padsHoles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padsHoles_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_padsHoles {
        managedObject.padsHoles_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padsHoles_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_padsHoles {
        managedObject.padsHoles_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viasHoles' transient property
  //····················································································································

  private var mObserversOf_viasHoles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viasHoles (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viasHoles.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasHoles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viasHoles (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viasHoles.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasHoles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viasHoles_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viasHoles {
        managedObject.viasHoles_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viasHoles_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viasHoles {
        managedObject.viasHoles_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holes' transient property
  //····················································································································

  private var mObserversOf_holes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_holes.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holes_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_holes.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holes_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holes_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holes {
        managedObject.holes_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holes_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holes {
        managedObject.holes_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holesForDisplay' transient property
  //····················································································································

  private var mObserversOf_holesForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holesForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_holesForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holesForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holesForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_holesForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holesForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holesForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holesForDisplay {
        managedObject.holesForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holesForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holesForDisplay {
        managedObject.holesForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaShapes' transient property
  //····················································································································

  private var mObserversOf_viaShapes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaShapes.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapes_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaShapes.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapes_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaShapes_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapes {
        managedObject.viaShapes_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaShapes_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapes {
        managedObject.viaShapes_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaShapesForDisplay' transient property
  //····················································································································

  private var mObserversOf_viaShapesForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaShapesForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaShapesForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapesForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapesForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaShapesForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapesForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaShapesForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapesForDisplay {
        managedObject.viaShapesForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaShapesForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapesForDisplay {
        managedObject.viaShapesForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPads' transient property
  //····················································································································

  private var mObserversOf_frontPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPads_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPads {
        managedObject.frontPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPads_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPads {
        managedObject.frontPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPadsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontPadsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPadsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPadsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPadsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPadsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsForDisplay {
        managedObject.frontPadsForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPadsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsForDisplay {
        managedObject.frontPadsForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPads' transient property
  //····················································································································

  private var mObserversOf_backPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPads_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPads {
        managedObject.backPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPads_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPads {
        managedObject.backPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPadsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backPadsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPadsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPadsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPadsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPadsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsForDisplay {
        managedObject.backPadsForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPadsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsForDisplay {
        managedObject.backPadsForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimits' transient property
  //····················································································································

  private var mObserversOf_boardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimits.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimits_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimits.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimits_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimits_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimits {
        managedObject.boardLimits_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimits_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimits {
        managedObject.boardLimits_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_backComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegments {
        managedObject.backComponentNameSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegments {
        managedObject.backComponentNameSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backComponentNameSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegmentsForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegmentsForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegmentsForDisplay {
        managedObject.backComponentNameSegmentsForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegmentsForDisplay {
        managedObject.backComponentNameSegmentsForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegmentsForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegmentsForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegmentsForDisplay {
        managedObject.frontComponentNameSegmentsForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegmentsForDisplay {
        managedObject.frontComponentNameSegmentsForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValueSegments' transient property
  //····················································································································

  private var mObserversOf_frontComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValueSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValueSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValueSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueSegments {
        managedObject.frontComponentValueSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueSegments {
        managedObject.frontComponentValueSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValuesForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontComponentValuesForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValuesForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValuesForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValuesForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValuesForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValuesForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValuesForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValuesForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValuesForDisplay {
        managedObject.frontComponentValuesForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValuesForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValuesForDisplay {
        managedObject.frontComponentValuesForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValueSegments' transient property
  //····················································································································

  private var mObserversOf_backComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValueSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValueSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValueSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueSegments {
        managedObject.backComponentValueSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueSegments {
        managedObject.backComponentValueSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValuesForDisplay' transient property
  //····················································································································

  private var mObserversOf_backComponentValuesForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValuesForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValuesForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValuesForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValuesForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValuesForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValuesForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValuesForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValuesForDisplay {
        managedObject.backComponentValuesForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValuesForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValuesForDisplay {
        managedObject.backComponentValuesForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTrackSegments' transient property
  //····················································································································

  private var mObserversOf_backTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTrackSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTrackSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTrackSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegments {
        managedObject.backTrackSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTrackSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegments {
        managedObject.backTrackSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTrackSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backTrackSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTrackSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegmentsForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTrackSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegmentsForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTrackSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegmentsForDisplay {
        managedObject.backTrackSegmentsForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTrackSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegmentsForDisplay {
        managedObject.backTrackSegmentsForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTrackSegments' transient property
  //····················································································································

  private var mObserversOf_frontTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTrackSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTrackSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTrackSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegments {
        managedObject.frontTrackSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTrackSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegments {
        managedObject.frontTrackSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTrackSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontTrackSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTrackSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegmentsForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTrackSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegmentsForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTrackSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegmentsForDisplay {
        managedObject.frontTrackSegmentsForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTrackSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegmentsForDisplay {
        managedObject.frontTrackSegmentsForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesSegments' transient property
  //····················································································································

  private var mObserversOf_frontPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackagesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackagesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegments {
        managedObject.frontPackagesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegments {
        managedObject.frontPackagesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_frontPackagesSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackagesSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegmentsForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackagesSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegmentsForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegmentsForDisplay {
        managedObject.frontPackagesSegmentsForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegmentsForDisplay {
        managedObject.frontPackagesSegmentsForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesSegments' transient property
  //····················································································································

  private var mObserversOf_backPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackagesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackagesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesSegments_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegments {
        managedObject.backPackagesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesSegments_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegments {
        managedObject.backPackagesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesSegmentsForDisplay' transient property
  //····················································································································

  private var mObserversOf_backPackagesSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesSegmentsForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackagesSegmentsForDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegmentsForDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegmentsForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackagesSegmentsForDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegmentsForDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesSegmentsForDisplay_toElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegmentsForDisplay {
        managedObject.backPackagesSegmentsForDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesSegmentsForDisplay_fromElementsOfSet (_ inSet : Set<BoardModelEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegmentsForDisplay {
        managedObject.backPackagesSegmentsForDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_BoardModelEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_BoardModelEntity : ReadOnlyArrayOf_BoardModelEntity {

  var readModelFunction : Optional<() -> EBSelection < [BoardModelEntity] > >

  private var prop_cache : EBSelection < [BoardModelEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <BoardModelEntity> ()

  override var prop : EBSelection < [BoardModelEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <BoardModelEntity>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <BoardModelEntity> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_artworkName_fromElementsOfSet (removedSet)
        removeEBObserversOf_name_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeight_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeightUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_instanceCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendTextsSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLayoutTextsSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendTextsSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLayoutTextsSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_padsHoles_fromElementsOfSet (removedSet)
        removeEBObserversOf_viasHoles_fromElementsOfSet (removedSet)
        removeEBObserversOf_holes_fromElementsOfSet (removedSet)
        removeEBObserversOf_holesForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_viaShapes_fromElementsOfSet (removedSet)
        removeEBObserversOf_viaShapesForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPads_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPadsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPads_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPadsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimits_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValuesForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValuesForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTrackSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTrackSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTrackSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTrackSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackagesSegmentsForDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackagesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackagesSegmentsForDisplay_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_artworkName_toElementsOfSet (addedSet)
        addEBObserversOf_name_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeight_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeightUnit_toElementsOfSet (addedSet)
        addEBObserversOf_zoom_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_instanceCount_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendTextsSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontLayoutTextsSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendTextsSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backLayoutTextsSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_padsHoles_toElementsOfSet (addedSet)
        addEBObserversOf_viasHoles_toElementsOfSet (addedSet)
        addEBObserversOf_holes_toElementsOfSet (addedSet)
        addEBObserversOf_holesForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_viaShapes_toElementsOfSet (addedSet)
        addEBObserversOf_viaShapesForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontPads_toElementsOfSet (addedSet)
        addEBObserversOf_frontPadsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backPads_toElementsOfSet (addedSet)
        addEBObserversOf_backPadsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimits_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValueSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValuesForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValueSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValuesForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backTrackSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backTrackSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontTrackSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontTrackSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackagesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackagesSegmentsForDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backPackagesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backPackagesSegmentsForDisplay_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_artworkName : class {
  var artworkName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_name : class {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardWidth : class {
  var boardWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardWidthUnit : class {
  var boardWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardHeight : class {
  var boardHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardHeightUnit : class {
  var boardHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_zoom : class {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardLimitWidth : class {
  var boardLimitWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardLimitWidthUnit : class {
  var boardLimitWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_instanceCount : class {
//  var instanceCount_property_selection : EBSelection < Int > { get }
  var instanceCount : EBSelection < Int > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontLegendTextsSegments : class {
//  var frontLegendTextsSegments_property_selection : EBSelection < MergerSegmentArray > { get }
  var frontLegendTextsSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontLegendTextsSegmentsForDisplay : class {
//  var frontLegendTextsSegmentsForDisplay_property_selection : EBSelection < MergerSegmentArray > { get }
  var frontLegendTextsSegmentsForDisplay : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontLayoutTextsSegments : class {
//  var frontLayoutTextsSegments_property_selection : EBSelection < MergerSegmentArray > { get }
  var frontLayoutTextsSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontLayoutTextsSegmentsForDisplay : class {
//  var frontLayoutTextsSegmentsForDisplay_property_selection : EBSelection < MergerSegmentArray > { get }
  var frontLayoutTextsSegmentsForDisplay : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backLegendTextsSegments : class {
//  var backLegendTextsSegments_property_selection : EBSelection < MergerSegmentArray > { get }
  var backLegendTextsSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backLegendTextsSegmentsForDisplay : class {
//  var backLegendTextsSegmentsForDisplay_property_selection : EBSelection < MergerSegmentArray > { get }
  var backLegendTextsSegmentsForDisplay : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backLayoutTextsSegments : class {
//  var backLayoutTextsSegments_property_selection : EBSelection < MergerSegmentArray > { get }
  var backLayoutTextsSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backLayoutTextsSegmentsForDisplay : class {
//  var backLayoutTextsSegmentsForDisplay_property_selection : EBSelection < MergerSegmentArray > { get }
  var backLayoutTextsSegmentsForDisplay : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_padsHoles : class {
//  var padsHoles_property_selection : EBSelection < MergerHoleArray > { get }
  var padsHoles : EBSelection < MergerHoleArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_viasHoles : class {
//  var viasHoles_property_selection : EBSelection < MergerHoleArray > { get }
  var viasHoles : EBSelection < MergerHoleArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_holes : class {
//  var holes_property_selection : EBSelection < MergerHoleArray > { get }
  var holes : EBSelection < MergerHoleArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_holesForDisplay : class {
//  var holesForDisplay_property_selection : EBSelection < MergerHoleArray > { get }
  var holesForDisplay : EBSelection < MergerHoleArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_viaShapes : class {
//  var viaShapes_property_selection : EBSelection < MergerViaShapeArray > { get }
  var viaShapes : EBSelection < MergerViaShapeArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_viaShapesForDisplay : class {
//  var viaShapesForDisplay_property_selection : EBSelection < MergerViaShapeArray > { get }
  var viaShapesForDisplay : EBSelection < MergerViaShapeArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPads : class {
//  var frontPads_property_selection : EBSelection < MergerPadArray > { get }
  var frontPads : EBSelection < MergerPadArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPadsForDisplay : class {
//  var frontPadsForDisplay_property_selection : EBSelection < MergerPadArray > { get }
  var frontPadsForDisplay : EBSelection < MergerPadArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPads : class {
//  var backPads_property_selection : EBSelection < MergerPadArray > { get }
  var backPads : EBSelection < MergerPadArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPadsForDisplay : class {
//  var backPadsForDisplay_property_selection : EBSelection < MergerPadArray > { get }
  var backPadsForDisplay : EBSelection < MergerPadArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_boardLimits : class {
//  var boardLimits_property_selection : EBSelection < MergerBoardLimits > { get }
  var boardLimits : EBSelection < MergerBoardLimits > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentNameSegments : class {
//  var backComponentNameSegments_property_selection : EBSelection < MergerSegmentArray > { get }
  var backComponentNameSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentNameSegmentsForDisplay : class {
//  var backComponentNameSegmentsForDisplay_property_selection : EBSelection < MergerSegmentArray > { get }
  var backComponentNameSegmentsForDisplay : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentNameSegments : class {
//  var frontComponentNameSegments_property_selection : EBSelection < MergerSegmentArray > { get }
  var frontComponentNameSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentNameSegmentsForDisplay : class {
//  var frontComponentNameSegmentsForDisplay_property_selection : EBSelection < MergerSegmentArray > { get }
  var frontComponentNameSegmentsForDisplay : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentValueSegments : class {
//  var frontComponentValueSegments_property_selection : EBSelection < MergerSegmentArray > { get }
  var frontComponentValueSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontComponentValuesForDisplay : class {
//  var frontComponentValuesForDisplay_property_selection : EBSelection < MergerSegmentArray > { get }
  var frontComponentValuesForDisplay : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentValueSegments : class {
//  var backComponentValueSegments_property_selection : EBSelection < MergerSegmentArray > { get }
  var backComponentValueSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backComponentValuesForDisplay : class {
//  var backComponentValuesForDisplay_property_selection : EBSelection < MergerSegmentArray > { get }
  var backComponentValuesForDisplay : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backTrackSegments : class {
//  var backTrackSegments_property_selection : EBSelection < MergerSegmentArray > { get }
  var backTrackSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backTrackSegmentsForDisplay : class {
//  var backTrackSegmentsForDisplay_property_selection : EBSelection < MergerSegmentArray > { get }
  var backTrackSegmentsForDisplay : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontTrackSegments : class {
//  var frontTrackSegments_property_selection : EBSelection < MergerSegmentArray > { get }
  var frontTrackSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontTrackSegmentsForDisplay : class {
//  var frontTrackSegmentsForDisplay_property_selection : EBSelection < MergerSegmentArray > { get }
  var frontTrackSegmentsForDisplay : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPackagesSegments : class {
//  var frontPackagesSegments_property_selection : EBSelection < MergerSegmentArray > { get }
  var frontPackagesSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_frontPackagesSegmentsForDisplay : class {
//  var frontPackagesSegmentsForDisplay_property_selection : EBSelection < MergerSegmentArray > { get }
  var frontPackagesSegmentsForDisplay : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPackagesSegments : class {
//  var backPackagesSegments_property_selection : EBSelection < MergerSegmentArray > { get }
  var backPackagesSegments : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelEntity_backPackagesSegmentsForDisplay : class {
//  var backPackagesSegmentsForDisplay_property_selection : EBSelection < MergerSegmentArray > { get }
  var backPackagesSegmentsForDisplay : EBSelection < MergerSegmentArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: myInstances
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_myInstances : ReadOnlyArrayOf_MergerBoardInstanceEntity {

  //····················································································································
 
  func setProp (_ value :  [MergerBoardInstanceEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: myInstances
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_myInstances :
ToManyRelationshipReadWrite_BoardModelEntity_myInstances, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<MergerBoardInstanceEntity> ()
  private var mValue = [MergerBoardInstanceEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myModel_property.owner = nil ;
        }
        removeEBObserversOf_instanceRect_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : MergerBoardInstanceEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myModel_property.setProp (owner)
        }
        addEBObserversOf_instanceRect_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [MergerBoardInstanceEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [MergerBoardInstanceEntity]) { mValue = value }

  var propval : [MergerBoardInstanceEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [MergerBoardInstanceEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MergerBoardInstanceEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : MergerBoardInstanceEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontLegendTexts : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontLegendTexts :
ToManyRelationshipReadWrite_BoardModelEntity_frontLegendTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontLayoutTexts : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontLayoutTexts :
ToManyRelationshipReadWrite_BoardModelEntity_frontLayoutTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backLegendTexts : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backLegendTexts :
ToManyRelationshipReadWrite_BoardModelEntity_backLegendTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backLayoutTexts : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backLayoutTexts :
ToManyRelationshipReadWrite_BoardModelEntity_backLayoutTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_vias : ReadOnlyArrayOf_BoardModelViaEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelViaEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_vias :
ToManyRelationshipReadWrite_BoardModelEntity_vias, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelViaEntity> ()
  private var mValue = [BoardModelViaEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelViaEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [BoardModelViaEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelViaEntity]) { mValue = value }

  var propval : [BoardModelViaEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelViaEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelViaEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelViaEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: pads
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_pads : ReadOnlyArrayOf_BoardModelPadEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelPadEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: pads
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_pads :
ToManyRelationshipReadWrite_BoardModelEntity_pads, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelPadEntity> ()
  private var mValue = [BoardModelPadEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_height_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_rotation_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_shape_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_side_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelPadEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_height_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_rotation_toElementsOfSet (addedObjectSet)
        addEBObserversOf_shape_toElementsOfSet (addedObjectSet)
        addEBObserversOf_side_toElementsOfSet (addedObjectSet)
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [BoardModelPadEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelPadEntity]) { mValue = value }

  var propval : [BoardModelPadEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelPadEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelPadEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelPadEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backComponentNames : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backComponentNames :
ToManyRelationshipReadWrite_BoardModelEntity_backComponentNames, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontComponentNames : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontComponentNames :
ToManyRelationshipReadWrite_BoardModelEntity_frontComponentNames, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontComponentValues : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontComponentValues :
ToManyRelationshipReadWrite_BoardModelEntity_frontComponentValues, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backComponentValues : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backComponentValues :
ToManyRelationshipReadWrite_BoardModelEntity_backComponentValues, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backTracks : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backTracks :
ToManyRelationshipReadWrite_BoardModelEntity_backTracks, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontTracks : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontTracks :
ToManyRelationshipReadWrite_BoardModelEntity_frontTracks, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_frontPackages : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_frontPackages :
ToManyRelationshipReadWrite_BoardModelEntity_frontPackages, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelEntity_backPackages : ReadOnlyArrayOf_CanariSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [CanariSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelEntity_backPackages :
ToManyRelationshipReadWrite_BoardModelEntity_backPackages, EBSignatureObserverProtocol {
  weak var owner : BoardModelEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<CanariSegmentEntity> ()
  private var mValue = [CanariSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegmentEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [CanariSegmentEntity]) { mValue = value }

  var propval : [CanariSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

