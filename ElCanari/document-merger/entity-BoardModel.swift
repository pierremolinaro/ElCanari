//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_name : class {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelWidth : class {
  var modelWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelWidthUnit : class {
  var modelWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelHeight : class {
  var modelHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelHeightUnit : class {
  var modelHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_zoom : class {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelLimitWidth : class {
  var modelLimitWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelLimitWidthUnit : class {
  var modelLimitWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_artworkName : class {
  var artworkName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelRect : class {
  var modelRect : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLegendLinesSegments : class {
  var frontLegendLinesSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLegendLinesBezierPaths : class {
  var frontLegendLinesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLegendLinesSegments : class {
  var backLegendLinesSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLegendLinesBezierPaths : class {
  var backLegendLinesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLegendTextsSegments : class {
  var frontLegendTextsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLegendTextsBezierPaths : class {
  var frontLegendTextsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLayoutTextsSegments : class {
  var frontLayoutTextsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLayoutTextsBezierPaths : class {
  var frontLayoutTextsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLegendTextsSegments : class {
  var backLegendTextsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLegendTextsBezierPaths : class {
  var backLegendTextsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLayoutTextsSegments : class {
  var backLayoutTextsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLayoutTextsBezierPaths : class {
  var backLayoutTextsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_internalBoardsLimitsSegments : class {
  var internalBoardsLimitsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_internalBoardsLimitsBezierPaths : class {
  var internalBoardsLimitsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_drillSegments : class {
  var drillSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_holesBezierPaths : class {
  var holesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_viaShapes : class {
  var viaShapes : MergerViaShapeArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_viasBezierPaths : class {
  var viasBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontPadArray : class {
  var frontPadArray : MergerPadArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontPadsBezierPaths : class {
  var frontPadsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backPadArray : class {
  var backPadArray : MergerPadArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backPadsBezierPaths : class {
  var backPadsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_boardLimits : class {
  var boardLimits : MergerBoardLimits? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_boardLimitsBezierPaths : class {
  var boardLimitsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backComponentNameSegments : class {
  var backComponentNameSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backComponentNamesBezierPaths : class {
  var backComponentNamesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontComponentNameSegments : class {
  var frontComponentNameSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontComponentNamesBezierPaths : class {
  var frontComponentNamesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontComponentValueSegments : class {
  var frontComponentValueSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontComponentValuesBezierPaths : class {
  var frontComponentValuesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backComponentValueSegments : class {
  var backComponentValueSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backComponentValuesBezierPaths : class {
  var backComponentValuesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backTrackSegments : class {
  var backTrackSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backTracksBezierPaths : class {
  var backTracksBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontTrackSegments : class {
  var frontTrackSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontTracksBezierPaths : class {
  var frontTracksBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontPackagesSegments : class {
  var frontPackagesSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontPackagesBezierPaths : class {
  var frontPackagesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backPackagesSegments : class {
  var backPackagesSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backPackagesBezierPaths : class {
  var backPackagesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_imageForModel : class {
  var imageForModel : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_imageForInstances : class {
  var imageForInstances : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_instanceCount : class {
  var instanceCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardModel : EBManagedObject,
         BoardModel_name,
         BoardModel_modelWidth,
         BoardModel_modelWidthUnit,
         BoardModel_modelHeight,
         BoardModel_modelHeightUnit,
         BoardModel_zoom,
         BoardModel_modelLimitWidth,
         BoardModel_modelLimitWidthUnit,
         BoardModel_artworkName,
         BoardModel_modelRect,
         BoardModel_frontLegendLinesSegments,
         BoardModel_frontLegendLinesBezierPaths,
         BoardModel_backLegendLinesSegments,
         BoardModel_backLegendLinesBezierPaths,
         BoardModel_frontLegendTextsSegments,
         BoardModel_frontLegendTextsBezierPaths,
         BoardModel_frontLayoutTextsSegments,
         BoardModel_frontLayoutTextsBezierPaths,
         BoardModel_backLegendTextsSegments,
         BoardModel_backLegendTextsBezierPaths,
         BoardModel_backLayoutTextsSegments,
         BoardModel_backLayoutTextsBezierPaths,
         BoardModel_internalBoardsLimitsSegments,
         BoardModel_internalBoardsLimitsBezierPaths,
         BoardModel_drillSegments,
         BoardModel_holesBezierPaths,
         BoardModel_viaShapes,
         BoardModel_viasBezierPaths,
         BoardModel_frontPadArray,
         BoardModel_frontPadsBezierPaths,
         BoardModel_backPadArray,
         BoardModel_backPadsBezierPaths,
         BoardModel_boardLimits,
         BoardModel_boardLimitsBezierPaths,
         BoardModel_backComponentNameSegments,
         BoardModel_backComponentNamesBezierPaths,
         BoardModel_frontComponentNameSegments,
         BoardModel_frontComponentNamesBezierPaths,
         BoardModel_frontComponentValueSegments,
         BoardModel_frontComponentValuesBezierPaths,
         BoardModel_backComponentValueSegments,
         BoardModel_backComponentValuesBezierPaths,
         BoardModel_backTrackSegments,
         BoardModel_backTracksBezierPaths,
         BoardModel_frontTrackSegments,
         BoardModel_frontTracksBezierPaths,
         BoardModel_frontPackagesSegments,
         BoardModel_frontPackagesBezierPaths,
         BoardModel_backPackagesSegments,
         BoardModel_backPackagesBezierPaths,
         BoardModel_imageForModel,
         BoardModel_imageForInstances,
         BoardModel_instanceCount {

  //····················································································································
  //   Atomic property: name
  //····················································································································

  var name_property = EBStoredProperty_String ("")

  //····················································································································

  var name : String {
    get {
      return self.name_property.propval
    }
    set {
      self.name_property.setProp (newValue)
    }
  }

  //····················································································································

  var name_property_selection : EBSelection <String> {
    return self.name_property.prop
  }

  //····················································································································
  //   Atomic property: modelWidth
  //····················································································································

  var modelWidth_property = EBStoredProperty_Int (0)

  //····················································································································

  var modelWidth : Int {
    get {
      return self.modelWidth_property.propval
    }
    set {
      self.modelWidth_property.setProp (newValue)
    }
  }

  //····················································································································

  var modelWidth_property_selection : EBSelection <Int> {
    return self.modelWidth_property.prop
  }

  //····················································································································
  //   Atomic property: modelWidthUnit
  //····················································································································

  var modelWidthUnit_property = EBStoredProperty_Int (0)

  //····················································································································

  var modelWidthUnit : Int {
    get {
      return self.modelWidthUnit_property.propval
    }
    set {
      self.modelWidthUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var modelWidthUnit_property_selection : EBSelection <Int> {
    return self.modelWidthUnit_property.prop
  }

  //····················································································································
  //   Atomic property: modelHeight
  //····················································································································

  var modelHeight_property = EBStoredProperty_Int (0)

  //····················································································································

  var modelHeight : Int {
    get {
      return self.modelHeight_property.propval
    }
    set {
      self.modelHeight_property.setProp (newValue)
    }
  }

  //····················································································································

  var modelHeight_property_selection : EBSelection <Int> {
    return self.modelHeight_property.prop
  }

  //····················································································································
  //   Atomic property: modelHeightUnit
  //····················································································································

  var modelHeightUnit_property = EBStoredProperty_Int (0)

  //····················································································································

  var modelHeightUnit : Int {
    get {
      return self.modelHeightUnit_property.propval
    }
    set {
      self.modelHeightUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var modelHeightUnit_property_selection : EBSelection <Int> {
    return self.modelHeightUnit_property.prop
  }

  //····················································································································
  //   Atomic property: zoom
  //····················································································································

  var zoom_property = EBStoredProperty_Int (0)

  //····················································································································

  var zoom : Int {
    get {
      return self.zoom_property.propval
    }
    set {
      self.zoom_property.setProp (newValue)
    }
  }

  //····················································································································

  var zoom_property_selection : EBSelection <Int> {
    return self.zoom_property.prop
  }

  //····················································································································
  //   To many property: frontLegendLines
  //····················································································································

  var frontLegendLines_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var frontLegendLines_property_selection : EBSelection < [SegmentEntity] > {
      return self.frontLegendLines_property.prop
  }

  //····················································································································
  //   To many property: backLegendLines
  //····················································································································

  var backLegendLines_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var backLegendLines_property_selection : EBSelection < [SegmentEntity] > {
      return self.backLegendLines_property.prop
  }

  //····················································································································
  //   To many property: frontLegendTexts
  //····················································································································

  var frontLegendTexts_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var frontLegendTexts_property_selection : EBSelection < [SegmentEntity] > {
      return self.frontLegendTexts_property.prop
  }

  //····················································································································
  //   To many property: frontLayoutTexts
  //····················································································································

  var frontLayoutTexts_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var frontLayoutTexts_property_selection : EBSelection < [SegmentEntity] > {
      return self.frontLayoutTexts_property.prop
  }

  //····················································································································
  //   To many property: backLegendTexts
  //····················································································································

  var backLegendTexts_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var backLegendTexts_property_selection : EBSelection < [SegmentEntity] > {
      return self.backLegendTexts_property.prop
  }

  //····················································································································
  //   To many property: backLayoutTexts
  //····················································································································

  var backLayoutTexts_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var backLayoutTexts_property_selection : EBSelection < [SegmentEntity] > {
      return self.backLayoutTexts_property.prop
  }

  //····················································································································
  //   To many property: internalBoardsLimits
  //····················································································································

  var internalBoardsLimits_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var internalBoardsLimits_property_selection : EBSelection < [SegmentEntity] > {
      return self.internalBoardsLimits_property.prop
  }

  //····················································································································
  //   To many property: drills
  //····················································································································

  var drills_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var drills_property_selection : EBSelection < [SegmentEntity] > {
      return self.drills_property.prop
  }

  //····················································································································
  //   To many property: vias
  //····················································································································

  var vias_property = StoredArrayOf_BoardModelVia ()

  //····················································································································

  var vias_property_selection : EBSelection < [BoardModelVia] > {
      return self.vias_property.prop
  }

  //····················································································································
  //   To many property: frontPads
  //····················································································································

  var frontPads_property = StoredArrayOf_BoardModelPad ()

  //····················································································································

  var frontPads_property_selection : EBSelection < [BoardModelPad] > {
      return self.frontPads_property.prop
  }

  //····················································································································
  //   To many property: backPads
  //····················································································································

  var backPads_property = StoredArrayOf_BoardModelPad ()

  //····················································································································

  var backPads_property_selection : EBSelection < [BoardModelPad] > {
      return self.backPads_property.prop
  }

  //····················································································································
  //   Atomic property: modelLimitWidth
  //····················································································································

  var modelLimitWidth_property = EBStoredProperty_Int (0)

  //····················································································································

  var modelLimitWidth : Int {
    get {
      return self.modelLimitWidth_property.propval
    }
    set {
      self.modelLimitWidth_property.setProp (newValue)
    }
  }

  //····················································································································

  var modelLimitWidth_property_selection : EBSelection <Int> {
    return self.modelLimitWidth_property.prop
  }

  //····················································································································
  //   Atomic property: modelLimitWidthUnit
  //····················································································································

  var modelLimitWidthUnit_property = EBStoredProperty_Int (0)

  //····················································································································

  var modelLimitWidthUnit : Int {
    get {
      return self.modelLimitWidthUnit_property.propval
    }
    set {
      self.modelLimitWidthUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var modelLimitWidthUnit_property_selection : EBSelection <Int> {
    return self.modelLimitWidthUnit_property.prop
  }

  //····················································································································
  //   To many property: backComponentNames
  //····················································································································

  var backComponentNames_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var backComponentNames_property_selection : EBSelection < [SegmentEntity] > {
      return self.backComponentNames_property.prop
  }

  //····················································································································
  //   To many property: frontComponentNames
  //····················································································································

  var frontComponentNames_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var frontComponentNames_property_selection : EBSelection < [SegmentEntity] > {
      return self.frontComponentNames_property.prop
  }

  //····················································································································
  //   To many property: frontComponentValues
  //····················································································································

  var frontComponentValues_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var frontComponentValues_property_selection : EBSelection < [SegmentEntity] > {
      return self.frontComponentValues_property.prop
  }

  //····················································································································
  //   To many property: backComponentValues
  //····················································································································

  var backComponentValues_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var backComponentValues_property_selection : EBSelection < [SegmentEntity] > {
      return self.backComponentValues_property.prop
  }

  //····················································································································
  //   To many property: backTracks
  //····················································································································

  var backTracks_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var backTracks_property_selection : EBSelection < [SegmentEntity] > {
      return self.backTracks_property.prop
  }

  //····················································································································
  //   To many property: frontTracks
  //····················································································································

  var frontTracks_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var frontTracks_property_selection : EBSelection < [SegmentEntity] > {
      return self.frontTracks_property.prop
  }

  //····················································································································
  //   To many property: frontPackages
  //····················································································································

  var frontPackages_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var frontPackages_property_selection : EBSelection < [SegmentEntity] > {
      return self.frontPackages_property.prop
  }

  //····················································································································
  //   To many property: backPackages
  //····················································································································

  var backPackages_property = StoredArrayOf_SegmentEntity ()

  //····················································································································

  var backPackages_property_selection : EBSelection < [SegmentEntity] > {
      return self.backPackages_property.prop
  }

  //····················································································································
  //   Atomic property: artworkName
  //····················································································································

  var artworkName_property = EBStoredProperty_String ("")

  //····················································································································

  var artworkName : String {
    get {
      return self.artworkName_property.propval
    }
    set {
      self.artworkName_property.setProp (newValue)
    }
  }

  //····················································································································

  var artworkName_property_selection : EBSelection <String> {
    return self.artworkName_property.prop
  }

  //····················································································································
  //   To many property: myInstances
  //····················································································································

  var myInstances_property = StoredArrayOf_MergerBoardInstance ()

  //····················································································································

  var myInstances_property_selection : EBSelection < [MergerBoardInstance] > {
      return self.myInstances_property.prop
  }

  //····················································································································
  //   Transient property: modelRect
  //····················································································································

  var modelRect_property = EBTransientProperty_CanariRect ()

  //····················································································································

  var modelRect_property_selection : EBSelection <CanariRect> {
    return self.modelRect_property.prop
  }

  //····················································································································

    var modelRect : CanariRect? {
    switch self.modelRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLegendLinesSegments
  //····················································································································

  var frontLegendLinesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontLegendLinesSegments_property.prop
  }

  //····················································································································

    var frontLegendLinesSegments : MergerSegmentArray? {
    switch self.frontLegendLinesSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLegendLinesBezierPaths
  //····················································································································

  var frontLegendLinesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontLegendLinesBezierPaths_property.prop
  }

  //····················································································································

    var frontLegendLinesBezierPaths : BezierPathArray? {
    switch self.frontLegendLinesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLegendLinesSegments
  //····················································································································

  var backLegendLinesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backLegendLinesSegments_property.prop
  }

  //····················································································································

    var backLegendLinesSegments : MergerSegmentArray? {
    switch self.backLegendLinesSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLegendLinesBezierPaths
  //····················································································································

  var backLegendLinesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backLegendLinesBezierPaths_property.prop
  }

  //····················································································································

    var backLegendLinesBezierPaths : BezierPathArray? {
    switch self.backLegendLinesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLegendTextsSegments
  //····················································································································

  var frontLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontLegendTextsSegments_property.prop
  }

  //····················································································································

    var frontLegendTextsSegments : MergerSegmentArray? {
    switch self.frontLegendTextsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLegendTextsBezierPaths
  //····················································································································

  var frontLegendTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontLegendTextsBezierPaths_property.prop
  }

  //····················································································································

    var frontLegendTextsBezierPaths : BezierPathArray? {
    switch self.frontLegendTextsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLayoutTextsSegments
  //····················································································································

  var frontLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontLayoutTextsSegments_property.prop
  }

  //····················································································································

    var frontLayoutTextsSegments : MergerSegmentArray? {
    switch self.frontLayoutTextsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLayoutTextsBezierPaths
  //····················································································································

  var frontLayoutTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontLayoutTextsBezierPaths_property.prop
  }

  //····················································································································

    var frontLayoutTextsBezierPaths : BezierPathArray? {
    switch self.frontLayoutTextsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLegendTextsSegments
  //····················································································································

  var backLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backLegendTextsSegments_property.prop
  }

  //····················································································································

    var backLegendTextsSegments : MergerSegmentArray? {
    switch self.backLegendTextsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLegendTextsBezierPaths
  //····················································································································

  var backLegendTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backLegendTextsBezierPaths_property.prop
  }

  //····················································································································

    var backLegendTextsBezierPaths : BezierPathArray? {
    switch self.backLegendTextsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLayoutTextsSegments
  //····················································································································

  var backLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backLayoutTextsSegments_property.prop
  }

  //····················································································································

    var backLayoutTextsSegments : MergerSegmentArray? {
    switch self.backLayoutTextsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLayoutTextsBezierPaths
  //····················································································································

  var backLayoutTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backLayoutTextsBezierPaths_property.prop
  }

  //····················································································································

    var backLayoutTextsBezierPaths : BezierPathArray? {
    switch self.backLayoutTextsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: internalBoardsLimitsSegments
  //····················································································································

  var internalBoardsLimitsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var internalBoardsLimitsSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.internalBoardsLimitsSegments_property.prop
  }

  //····················································································································

    var internalBoardsLimitsSegments : MergerSegmentArray? {
    switch self.internalBoardsLimitsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: internalBoardsLimitsBezierPaths
  //····················································································································

  var internalBoardsLimitsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var internalBoardsLimitsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.internalBoardsLimitsBezierPaths_property.prop
  }

  //····················································································································

    var internalBoardsLimitsBezierPaths : BezierPathArray? {
    switch self.internalBoardsLimitsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: drillSegments
  //····················································································································

  var drillSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var drillSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.drillSegments_property.prop
  }

  //····················································································································

    var drillSegments : MergerSegmentArray? {
    switch self.drillSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: holesBezierPaths
  //····················································································································

  var holesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var holesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.holesBezierPaths_property.prop
  }

  //····················································································································

    var holesBezierPaths : BezierPathArray? {
    switch self.holesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viaShapes
  //····················································································································

  var viaShapes_property = EBTransientProperty_MergerViaShapeArray ()

  //····················································································································

  var viaShapes_property_selection : EBSelection <MergerViaShapeArray> {
    return self.viaShapes_property.prop
  }

  //····················································································································

    var viaShapes : MergerViaShapeArray? {
    switch self.viaShapes_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viasBezierPaths
  //····················································································································

  var viasBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var viasBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.viasBezierPaths_property.prop
  }

  //····················································································································

    var viasBezierPaths : BezierPathArray? {
    switch self.viasBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontPadArray
  //····················································································································

  var frontPadArray_property = EBTransientProperty_MergerPadArray ()

  //····················································································································

  var frontPadArray_property_selection : EBSelection <MergerPadArray> {
    return self.frontPadArray_property.prop
  }

  //····················································································································

    var frontPadArray : MergerPadArray? {
    switch self.frontPadArray_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontPadsBezierPaths
  //····················································································································

  var frontPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontPadsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontPadsBezierPaths_property.prop
  }

  //····················································································································

    var frontPadsBezierPaths : BezierPathArray? {
    switch self.frontPadsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backPadArray
  //····················································································································

  var backPadArray_property = EBTransientProperty_MergerPadArray ()

  //····················································································································

  var backPadArray_property_selection : EBSelection <MergerPadArray> {
    return self.backPadArray_property.prop
  }

  //····················································································································

    var backPadArray : MergerPadArray? {
    switch self.backPadArray_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backPadsBezierPaths
  //····················································································································

  var backPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backPadsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backPadsBezierPaths_property.prop
  }

  //····················································································································

    var backPadsBezierPaths : BezierPathArray? {
    switch self.backPadsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardLimits
  //····················································································································

  var boardLimits_property = EBTransientProperty_MergerBoardLimits ()

  //····················································································································

  var boardLimits_property_selection : EBSelection <MergerBoardLimits> {
    return self.boardLimits_property.prop
  }

  //····················································································································

    var boardLimits : MergerBoardLimits? {
    switch self.boardLimits_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardLimitsBezierPaths
  //····················································································································

  var boardLimitsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var boardLimitsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.boardLimitsBezierPaths_property.prop
  }

  //····················································································································

    var boardLimitsBezierPaths : BezierPathArray? {
    switch self.boardLimitsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backComponentNameSegments
  //····················································································································

  var backComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backComponentNameSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backComponentNameSegments_property.prop
  }

  //····················································································································

    var backComponentNameSegments : MergerSegmentArray? {
    switch self.backComponentNameSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backComponentNamesBezierPaths
  //····················································································································

  var backComponentNamesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backComponentNamesBezierPaths_property.prop
  }

  //····················································································································

    var backComponentNamesBezierPaths : BezierPathArray? {
    switch self.backComponentNamesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontComponentNameSegments
  //····················································································································

  var frontComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontComponentNameSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontComponentNameSegments_property.prop
  }

  //····················································································································

    var frontComponentNameSegments : MergerSegmentArray? {
    switch self.frontComponentNameSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontComponentNamesBezierPaths
  //····················································································································

  var frontComponentNamesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontComponentNamesBezierPaths_property.prop
  }

  //····················································································································

    var frontComponentNamesBezierPaths : BezierPathArray? {
    switch self.frontComponentNamesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontComponentValueSegments
  //····················································································································

  var frontComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontComponentValueSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontComponentValueSegments_property.prop
  }

  //····················································································································

    var frontComponentValueSegments : MergerSegmentArray? {
    switch self.frontComponentValueSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontComponentValuesBezierPaths
  //····················································································································

  var frontComponentValuesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontComponentValuesBezierPaths_property.prop
  }

  //····················································································································

    var frontComponentValuesBezierPaths : BezierPathArray? {
    switch self.frontComponentValuesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backComponentValueSegments
  //····················································································································

  var backComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backComponentValueSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backComponentValueSegments_property.prop
  }

  //····················································································································

    var backComponentValueSegments : MergerSegmentArray? {
    switch self.backComponentValueSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backComponentValuesBezierPaths
  //····················································································································

  var backComponentValuesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backComponentValuesBezierPaths_property.prop
  }

  //····················································································································

    var backComponentValuesBezierPaths : BezierPathArray? {
    switch self.backComponentValuesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backTrackSegments
  //····················································································································

  var backTrackSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backTrackSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backTrackSegments_property.prop
  }

  //····················································································································

    var backTrackSegments : MergerSegmentArray? {
    switch self.backTrackSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backTracksBezierPaths
  //····················································································································

  var backTracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backTracksBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backTracksBezierPaths_property.prop
  }

  //····················································································································

    var backTracksBezierPaths : BezierPathArray? {
    switch self.backTracksBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontTrackSegments
  //····················································································································

  var frontTrackSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontTrackSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontTrackSegments_property.prop
  }

  //····················································································································

    var frontTrackSegments : MergerSegmentArray? {
    switch self.frontTrackSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontTracksBezierPaths
  //····················································································································

  var frontTracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontTracksBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontTracksBezierPaths_property.prop
  }

  //····················································································································

    var frontTracksBezierPaths : BezierPathArray? {
    switch self.frontTracksBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontPackagesSegments
  //····················································································································

  var frontPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontPackagesSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontPackagesSegments_property.prop
  }

  //····················································································································

    var frontPackagesSegments : MergerSegmentArray? {
    switch self.frontPackagesSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontPackagesBezierPaths
  //····················································································································

  var frontPackagesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontPackagesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontPackagesBezierPaths_property.prop
  }

  //····················································································································

    var frontPackagesBezierPaths : BezierPathArray? {
    switch self.frontPackagesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backPackagesSegments
  //····················································································································

  var backPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backPackagesSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backPackagesSegments_property.prop
  }

  //····················································································································

    var backPackagesSegments : MergerSegmentArray? {
    switch self.backPackagesSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backPackagesBezierPaths
  //····················································································································

  var backPackagesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backPackagesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backPackagesBezierPaths_property.prop
  }

  //····················································································································

    var backPackagesBezierPaths : BezierPathArray? {
    switch self.backPackagesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: imageForModel
  //····················································································································

  var imageForModel_property = EBTransientProperty_EBShape ()

  //····················································································································

  var imageForModel_property_selection : EBSelection <EBShape> {
    return self.imageForModel_property.prop
  }

  //····················································································································

    var imageForModel : EBShape? {
    switch self.imageForModel_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: imageForInstances
  //····················································································································

  var imageForInstances_property = EBTransientProperty_EBShape ()

  //····················································································································

  var imageForInstances_property_selection : EBSelection <EBShape> {
    return self.imageForInstances_property.prop
  }

  //····················································································································

    var imageForInstances : EBShape? {
    switch self.imageForInstances_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: instanceCount
  //····················································································································

  var instanceCount_property = EBTransientProperty_Int ()

  //····················································································································

  var instanceCount_property_selection : EBSelection <Int> {
    return self.instanceCount_property.prop
  }

  //····················································································································

    var instanceCount : Int? {
    switch self.instanceCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext, file: String, _ line : Int) {
    super.init (managedObjectContext:managedObjectContext, file: file, line)
  //--- Atomic property: name
    self.name_property.undoManager = self.undoManager
  //--- Atomic property: modelWidth
    self.modelWidth_property.undoManager = self.undoManager
  //--- Atomic property: modelWidthUnit
    self.modelWidthUnit_property.undoManager = self.undoManager
  //--- Atomic property: modelHeight
    self.modelHeight_property.undoManager = self.undoManager
  //--- Atomic property: modelHeightUnit
    self.modelHeightUnit_property.undoManager = self.undoManager
  //--- Atomic property: zoom
    self.zoom_property.undoManager = self.undoManager
  //--- To many property: frontLegendLines
    self.frontLegendLines_property.undoManager = self.undoManager
  //--- To many property: backLegendLines
    self.backLegendLines_property.undoManager = self.undoManager
  //--- To many property: frontLegendTexts
    self.frontLegendTexts_property.undoManager = self.undoManager
  //--- To many property: frontLayoutTexts
    self.frontLayoutTexts_property.undoManager = self.undoManager
  //--- To many property: backLegendTexts
    self.backLegendTexts_property.undoManager = self.undoManager
  //--- To many property: backLayoutTexts
    self.backLayoutTexts_property.undoManager = self.undoManager
  //--- To many property: internalBoardsLimits
    self.internalBoardsLimits_property.undoManager = self.undoManager
  //--- To many property: drills
    self.drills_property.undoManager = self.undoManager
  //--- To many property: vias
    self.vias_property.undoManager = self.undoManager
  //--- To many property: frontPads
    self.frontPads_property.undoManager = self.undoManager
  //--- To many property: backPads
    self.backPads_property.undoManager = self.undoManager
  //--- Atomic property: modelLimitWidth
    self.modelLimitWidth_property.undoManager = self.undoManager
  //--- Atomic property: modelLimitWidthUnit
    self.modelLimitWidthUnit_property.undoManager = self.undoManager
  //--- To many property: backComponentNames
    self.backComponentNames_property.undoManager = self.undoManager
  //--- To many property: frontComponentNames
    self.frontComponentNames_property.undoManager = self.undoManager
  //--- To many property: frontComponentValues
    self.frontComponentValues_property.undoManager = self.undoManager
  //--- To many property: backComponentValues
    self.backComponentValues_property.undoManager = self.undoManager
  //--- To many property: backTracks
    self.backTracks_property.undoManager = self.undoManager
  //--- To many property: frontTracks
    self.frontTracks_property.undoManager = self.undoManager
  //--- To many property: frontPackages
    self.frontPackages_property.undoManager = self.undoManager
  //--- To many property: backPackages
    self.backPackages_property.undoManager = self.undoManager
  //--- Atomic property: artworkName
    self.artworkName_property.undoManager = self.undoManager
  //--- To many property: myInstances
    self.myInstances_property.undoManager = self.undoManager
    self.myInstances_property.setOppositeRelationship = { [weak self] (_ inManagedObject :MergerBoardInstance?) in
      inManagedObject?.myModel_property.setProp (self)
    }
  //--- Atomic property: modelRect
    self.modelRect_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardModel_modelRect (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.modelWidth_property.addEBObserver (self.modelRect_property)
    self.modelHeight_property.addEBObserver (self.modelRect_property)
  //--- Atomic property: frontLegendLinesSegments
    self.frontLegendLinesSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLines_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLegendLines_property_selection, unwSelf.frontLegendLines_property_selection, unwSelf.frontLegendLines_property_selection, unwSelf.frontLegendLines_property_selection, unwSelf.frontLegendLines_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontLegendLinesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendLines_property.addEBObserverOf_x1 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.addEBObserverOf_y1 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.addEBObserverOf_x2 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.addEBObserverOf_y2 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.addEBObserverOf_width (self.frontLegendLinesSegments_property)
  //--- Atomic property: frontLegendLinesBezierPaths
    self.frontLegendLinesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontLegendLinesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLegendLinesSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendLinesSegments_property.addEBObserver (self.frontLegendLinesBezierPaths_property)
  //--- Atomic property: backLegendLinesSegments
    self.backLegendLinesSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLines_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLegendLines_property_selection, unwSelf.backLegendLines_property_selection, unwSelf.backLegendLines_property_selection, unwSelf.backLegendLines_property_selection, unwSelf.backLegendLines_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backLegendLinesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendLines_property.addEBObserverOf_x1 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.addEBObserverOf_y1 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.addEBObserverOf_x2 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.addEBObserverOf_y2 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.addEBObserverOf_width (self.backLegendLinesSegments_property)
  //--- Atomic property: backLegendLinesBezierPaths
    self.backLegendLinesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backLegendLinesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLegendLinesSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendLinesSegments_property.addEBObserver (self.backLegendLinesBezierPaths_property)
  //--- Atomic property: frontLegendTextsSegments
    self.frontLegendTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontLegendTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTexts_property.addEBObserverOf_x1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_y1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_x2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_y2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_width (self.frontLegendTextsSegments_property)
  //--- Atomic property: frontLegendTextsBezierPaths
    self.frontLegendTextsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLegendTextsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTextsSegments_property.addEBObserver (self.frontLegendTextsBezierPaths_property)
  //--- Atomic property: frontLayoutTextsSegments
    self.frontLayoutTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontLayoutTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTexts_property.addEBObserverOf_x1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_y1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_x2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_y2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_width (self.frontLayoutTextsSegments_property)
  //--- Atomic property: frontLayoutTextsBezierPaths
    self.frontLayoutTextsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLayoutTextsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTextsSegments_property.addEBObserver (self.frontLayoutTextsBezierPaths_property)
  //--- Atomic property: backLegendTextsSegments
    self.backLegendTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backLegendTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendTexts_property.addEBObserverOf_x1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_y1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_x2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_y2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_width (self.backLegendTextsSegments_property)
  //--- Atomic property: backLegendTextsBezierPaths
    self.backLegendTextsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLegendTextsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendTextsSegments_property.addEBObserver (self.backLegendTextsBezierPaths_property)
  //--- Atomic property: backLayoutTextsSegments
    self.backLayoutTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backLayoutTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTexts_property.addEBObserverOf_x1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_y1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_x2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_y2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_width (self.backLayoutTextsSegments_property)
  //--- Atomic property: backLayoutTextsBezierPaths
    self.backLayoutTextsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLayoutTextsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTextsSegments_property.addEBObserver (self.backLayoutTextsBezierPaths_property)
  //--- Atomic property: internalBoardsLimitsSegments
    self.internalBoardsLimitsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.internalBoardsLimits_property_selection.kind ()
        kind &= unwSelf.internalBoardsLimits_property_selection.kind ()
        kind &= unwSelf.internalBoardsLimits_property_selection.kind ()
        kind &= unwSelf.internalBoardsLimits_property_selection.kind ()
        kind &= unwSelf.internalBoardsLimits_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.internalBoardsLimits_property_selection, unwSelf.internalBoardsLimits_property_selection, unwSelf.internalBoardsLimits_property_selection, unwSelf.internalBoardsLimits_property_selection, unwSelf.internalBoardsLimits_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_internalBoardsLimitsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.internalBoardsLimits_property.addEBObserverOf_x1 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.addEBObserverOf_y1 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.addEBObserverOf_x2 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.addEBObserverOf_y2 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.addEBObserverOf_width (self.internalBoardsLimitsSegments_property)
  //--- Atomic property: internalBoardsLimitsBezierPaths
    self.internalBoardsLimitsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.internalBoardsLimitsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.internalBoardsLimitsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.internalBoardsLimitsSegments_property.addEBObserver (self.internalBoardsLimitsBezierPaths_property)
  //--- Atomic property: drillSegments
    self.drillSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.drills_property_selection.kind ()
        kind &= unwSelf.drills_property_selection.kind ()
        kind &= unwSelf.drills_property_selection.kind ()
        kind &= unwSelf.drills_property_selection.kind ()
        kind &= unwSelf.drills_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.drills_property_selection, unwSelf.drills_property_selection, unwSelf.drills_property_selection, unwSelf.drills_property_selection, unwSelf.drills_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_drillSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.drills_property.addEBObserverOf_x1 (self.drillSegments_property)
    self.drills_property.addEBObserverOf_y1 (self.drillSegments_property)
    self.drills_property.addEBObserverOf_x2 (self.drillSegments_property)
    self.drills_property.addEBObserverOf_y2 (self.drillSegments_property)
    self.drills_property.addEBObserverOf_width (self.drillSegments_property)
  //--- Atomic property: holesBezierPaths
    self.holesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.drillSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.drillSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.drillSegments_property.addEBObserver (self.holesBezierPaths_property)
  //--- Atomic property: viaShapes
    self.viaShapes_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.vias_property_selection, unwSelf.vias_property_selection, unwSelf.vias_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_BoardModel_viaShapes (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.vias_property.addEBObserverOf_x (self.viaShapes_property)
    self.vias_property.addEBObserverOf_y (self.viaShapes_property)
    self.vias_property.addEBObserverOf_padDiameter (self.viaShapes_property)
  //--- Atomic property: viasBezierPaths
    self.viasBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.viaShapes_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.viaShapes_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_viasBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viaShapes_property.addEBObserver (self.viasBezierPaths_property)
  //--- Atomic property: frontPadArray
    self.frontPadArray_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontPads_property_selection, unwSelf.frontPads_property_selection, unwSelf.frontPads_property_selection, unwSelf.frontPads_property_selection, unwSelf.frontPads_property_selection, unwSelf.frontPads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_BoardModel_frontPadArray (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPads_property.addEBObserverOf_x (self.frontPadArray_property)
    self.frontPads_property.addEBObserverOf_y (self.frontPadArray_property)
    self.frontPads_property.addEBObserverOf_width (self.frontPadArray_property)
    self.frontPads_property.addEBObserverOf_height (self.frontPadArray_property)
    self.frontPads_property.addEBObserverOf_shape (self.frontPadArray_property)
    self.frontPads_property.addEBObserverOf_rotation (self.frontPadArray_property)
  //--- Atomic property: frontPadsBezierPaths
    self.frontPadsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontPadArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontPadArray_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_frontPadsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPadArray_property.addEBObserver (self.frontPadsBezierPaths_property)
  //--- Atomic property: backPadArray
    self.backPadArray_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backPads_property_selection, unwSelf.backPads_property_selection, unwSelf.backPads_property_selection, unwSelf.backPads_property_selection, unwSelf.backPads_property_selection, unwSelf.backPads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_BoardModel_backPadArray (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPads_property.addEBObserverOf_x (self.backPadArray_property)
    self.backPads_property.addEBObserverOf_y (self.backPadArray_property)
    self.backPads_property.addEBObserverOf_width (self.backPadArray_property)
    self.backPads_property.addEBObserverOf_height (self.backPadArray_property)
    self.backPads_property.addEBObserverOf_shape (self.backPadArray_property)
    self.backPads_property.addEBObserverOf_rotation (self.backPadArray_property)
  //--- Atomic property: backPadsBezierPaths
    self.backPadsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backPadArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backPadArray_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_backPadsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPadArray_property.addEBObserver (self.backPadsBezierPaths_property)
  //--- Atomic property: boardLimits
    self.boardLimits_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        kind &= unwSelf.modelLimitWidth_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBoardLimits_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection, unwSelf.modelLimitWidth_property_selection, g_Preferences!.mergerModelViewDisplayBoardLimits_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_BoardModel_boardLimits (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.modelWidth_property.addEBObserver (self.boardLimits_property)
    self.modelHeight_property.addEBObserver (self.boardLimits_property)
    self.modelLimitWidth_property.addEBObserver (self.boardLimits_property)
    g_Preferences?.mergerModelViewDisplayBoardLimits_property.addEBObserver (self.boardLimits_property)
  //--- Atomic property: boardLimitsBezierPaths
    self.boardLimitsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        kind &= unwSelf.modelLimitWidth_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection, unwSelf.modelLimitWidth_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_BoardModel_boardLimitsBezierPaths (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.modelWidth_property.addEBObserver (self.boardLimitsBezierPaths_property)
    self.modelHeight_property.addEBObserver (self.boardLimitsBezierPaths_property)
    self.modelLimitWidth_property.addEBObserver (self.boardLimitsBezierPaths_property)
  //--- Atomic property: backComponentNameSegments
    self.backComponentNameSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentNames_property.addEBObserverOf_x1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_y1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_x2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_y2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_width (self.backComponentNameSegments_property)
  //--- Atomic property: backComponentNamesBezierPaths
    self.backComponentNamesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backComponentNameSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentNameSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentNameSegments_property.addEBObserver (self.backComponentNamesBezierPaths_property)
  //--- Atomic property: frontComponentNameSegments
    self.frontComponentNameSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNames_property.addEBObserverOf_x1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_y1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_x2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_y2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_width (self.frontComponentNameSegments_property)
  //--- Atomic property: frontComponentNamesBezierPaths
    self.frontComponentNamesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontComponentNameSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentNameSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNameSegments_property.addEBObserver (self.frontComponentNamesBezierPaths_property)
  //--- Atomic property: frontComponentValueSegments
    self.frontComponentValueSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontComponentValueSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValues_property.addEBObserverOf_x1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_y1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_x2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_y2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_width (self.frontComponentValueSegments_property)
  //--- Atomic property: frontComponentValuesBezierPaths
    self.frontComponentValuesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontComponentValueSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentValueSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValueSegments_property.addEBObserver (self.frontComponentValuesBezierPaths_property)
  //--- Atomic property: backComponentValueSegments
    self.backComponentValueSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backComponentValueSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentValues_property.addEBObserverOf_x1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_y1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_x2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_y2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_width (self.backComponentValueSegments_property)
  //--- Atomic property: backComponentValuesBezierPaths
    self.backComponentValuesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backComponentValueSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentValueSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentValueSegments_property.addEBObserver (self.backComponentValuesBezierPaths_property)
  //--- Atomic property: backTrackSegments
    self.backTrackSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backTracks_property.addEBObserverOf_x1 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_y1 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_x2 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_y2 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_width (self.backTrackSegments_property)
  //--- Atomic property: backTracksBezierPaths
    self.backTracksBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backTrackSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backTrackSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backTrackSegments_property.addEBObserver (self.backTracksBezierPaths_property)
  //--- Atomic property: frontTrackSegments
    self.frontTrackSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontTracks_property.addEBObserverOf_x1 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_y1 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_x2 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_y2 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_width (self.frontTrackSegments_property)
  //--- Atomic property: frontTracksBezierPaths
    self.frontTracksBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontTrackSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontTrackSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontTrackSegments_property.addEBObserver (self.frontTracksBezierPaths_property)
  //--- Atomic property: frontPackagesSegments
    self.frontPackagesSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontPackagesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPackages_property.addEBObserverOf_x1 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_y1 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_x2 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_y2 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_width (self.frontPackagesSegments_property)
  //--- Atomic property: frontPackagesBezierPaths
    self.frontPackagesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontPackagesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontPackagesSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPackagesSegments_property.addEBObserver (self.frontPackagesBezierPaths_property)
  //--- Atomic property: backPackagesSegments
    self.backPackagesSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backPackagesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPackages_property.addEBObserverOf_x1 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_y1 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_x2 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_y2 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_width (self.backPackagesSegments_property)
  //--- Atomic property: backPackagesBezierPaths
    self.backPackagesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backPackagesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backPackagesSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_segmentsToBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPackagesSegments_property.addEBObserver (self.backPackagesBezierPaths_property)
  //--- Atomic property: imageForModel
    self.imageForModel_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackground_property_selection.kind ()
        kind &= unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        kind &= unwSelf.boardLimitsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBoardLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBoardLimits_property_selection.kind ()
        kind &= unwSelf.internalBoardsLimitsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayInternalBoardsLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerColorInternalBoardsLimits_property_selection.kind ()
        kind &= unwSelf.frontTracksBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontTracks_property_selection.kind ()
        kind &= unwSelf.backTracksBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackTracks_property_selection.kind ()
        kind &= unwSelf.frontPadsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontPads_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontPads_property_selection.kind ()
        kind &= unwSelf.backPadsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackPads_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackPads_property_selection.kind ()
        kind &= unwSelf.viasBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayVias_property_selection.kind ()
        kind &= g_Preferences!.mergerColorVias_property_selection.kind ()
        kind &= unwSelf.holesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayHoles_property_selection.kind ()
        kind &= g_Preferences!.mergerColorHoles_property_selection.kind ()
        kind &= unwSelf.frontLegendLinesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLinesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backComponentNamesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNamesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentValuesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValuesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackComponentValues_property_selection.kind ()
        kind &= unwSelf.frontPackagesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontPackages_property_selection.kind ()
        kind &= unwSelf.backPackagesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackPackages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackground_property_selection, unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection, unwSelf.boardLimitsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBoardLimits_property_selection, g_Preferences!.mergerColorBoardLimits_property_selection, unwSelf.internalBoardsLimitsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayInternalBoardsLimits_property_selection, g_Preferences!.mergerColorInternalBoardsLimits_property_selection, unwSelf.frontTracksBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontTracks_property_selection, g_Preferences!.mergerColorFrontTracks_property_selection, unwSelf.backTracksBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackTracks_property_selection, g_Preferences!.mergerColorBackTracks_property_selection, unwSelf.frontPadsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontPads_property_selection, g_Preferences!.mergerColorFrontPads_property_selection, unwSelf.backPadsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackPads_property_selection, g_Preferences!.mergerColorBackPads_property_selection, unwSelf.viasBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayVias_property_selection, g_Preferences!.mergerColorVias_property_selection, unwSelf.holesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayHoles_property_selection, g_Preferences!.mergerColorHoles_property_selection, unwSelf.frontLegendLinesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontLegendLines_property_selection, g_Preferences!.mergerColorFrontLegendLines_property_selection, unwSelf.backLegendLinesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackLegendLines_property_selection, g_Preferences!.mergerColorBackLegendLines_property_selection, unwSelf.frontLegendTextsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontLegendTexts_property_selection, g_Preferences!.mergerColorFrontLegendTexts_property_selection, unwSelf.frontLayoutTextsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontLayoutTexts_property_selection, g_Preferences!.mergerColorFrontLayoutTexts_property_selection, unwSelf.backLegendTextsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackLegendTexts_property_selection, g_Preferences!.mergerColorBackLegendTexts_property_selection, unwSelf.backLayoutTextsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackLayoutTexts_property_selection, g_Preferences!.mergerColorBackLayoutTexts_property_selection, unwSelf.backComponentNamesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackComponentNames_property_selection, g_Preferences!.mergerColorBackComponentNames_property_selection, unwSelf.frontComponentNamesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontComponentNames_property_selection, g_Preferences!.mergerColorFrontComponentNames_property_selection, unwSelf.frontComponentValuesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontComponentValues_property_selection, g_Preferences!.mergerColorFrontComponentValues_property_selection, unwSelf.backComponentValuesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackComponentValues_property_selection, g_Preferences!.mergerColorBackComponentValues_property_selection, unwSelf.frontPackagesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontPackages_property_selection, g_Preferences!.mergerColorFrontPackages_property_selection, unwSelf.backPackagesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackPackages_property_selection, g_Preferences!.mergerColorBackPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16), .single (let v17), .single (let v18), .single (let v19), .single (let v20), .single (let v21), .single (let v22), .single (let v23), .single (let v24), .single (let v25), .single (let v26), .single (let v27), .single (let v28), .single (let v29), .single (let v30), .single (let v31), .single (let v32), .single (let v33), .single (let v34), .single (let v35), .single (let v36), .single (let v37), .single (let v38), .single (let v39), .single (let v40), .single (let v41), .single (let v42), .single (let v43), .single (let v44), .single (let v45), .single (let v46), .single (let v47), .single (let v48), .single (let v49), .single (let v50), .single (let v51), .single (let v52), .single (let v53), .single (let v54), .single (let v55), .single (let v56), .single (let v57), .single (let v58), .single (let v59), .single (let v60), .single (let v61), .single (let v62)) :
            return .single (transient_BoardModel_imageForModel (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    g_Preferences?.mergerColorBackground_property.addEBObserver (self.imageForModel_property)
    self.modelWidth_property.addEBObserver (self.imageForModel_property)
    self.modelHeight_property.addEBObserver (self.imageForModel_property)
    self.boardLimitsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBoardLimits_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBoardLimits_property.addEBObserver (self.imageForModel_property)
    self.internalBoardsLimitsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayInternalBoardsLimits_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorInternalBoardsLimits_property.addEBObserver (self.imageForModel_property)
    self.frontTracksBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontTracks_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontTracks_property.addEBObserver (self.imageForModel_property)
    self.backTracksBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackTracks_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackTracks_property.addEBObserver (self.imageForModel_property)
    self.frontPadsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontPads_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontPads_property.addEBObserver (self.imageForModel_property)
    self.backPadsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackPads_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackPads_property.addEBObserver (self.imageForModel_property)
    self.viasBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayVias_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorVias_property.addEBObserver (self.imageForModel_property)
    self.holesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayHoles_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorHoles_property.addEBObserver (self.imageForModel_property)
    self.frontLegendLinesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontLegendLines_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontLegendLines_property.addEBObserver (self.imageForModel_property)
    self.backLegendLinesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackLegendLines_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackLegendLines_property.addEBObserver (self.imageForModel_property)
    self.frontLegendTextsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontLegendTexts_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.addEBObserver (self.imageForModel_property)
    self.frontLayoutTextsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontLayoutTexts_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.addEBObserver (self.imageForModel_property)
    self.backLegendTextsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackLegendTexts_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackLegendTexts_property.addEBObserver (self.imageForModel_property)
    self.backLayoutTextsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackLayoutTexts_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.addEBObserver (self.imageForModel_property)
    self.backComponentNamesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackComponentNames_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackComponentNames_property.addEBObserver (self.imageForModel_property)
    self.frontComponentNamesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontComponentNames_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontComponentNames_property.addEBObserver (self.imageForModel_property)
    self.frontComponentValuesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontComponentValues_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontComponentValues_property.addEBObserver (self.imageForModel_property)
    self.backComponentValuesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackComponentValues_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackComponentValues_property.addEBObserver (self.imageForModel_property)
    self.frontPackagesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontPackages_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontPackages_property.addEBObserver (self.imageForModel_property)
    self.backPackagesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackPackages_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackPackages_property.addEBObserver (self.imageForModel_property)
  //--- Atomic property: imageForInstances
    self.imageForInstances_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackground_property_selection.kind ()
        kind &= unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        kind &= unwSelf.frontTracksBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontTracks_property_selection.kind ()
        kind &= unwSelf.backTracksBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackTracks_property_selection.kind ()
        kind &= unwSelf.internalBoardsLimitsBezierPaths_property_selection.kind ()
        kind &= unwSelf.boardLimitsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayInternalBoardsLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerColorInternalBoardsLimits_property_selection.kind ()
        kind &= unwSelf.frontPadsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontPads_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontPads_property_selection.kind ()
        kind &= unwSelf.backPadsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackPads_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackPads_property_selection.kind ()
        kind &= unwSelf.viasBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayVias_property_selection.kind ()
        kind &= g_Preferences!.mergerColorVias_property_selection.kind ()
        kind &= unwSelf.holesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayHoles_property_selection.kind ()
        kind &= g_Preferences!.mergerColorHoles_property_selection.kind ()
        kind &= unwSelf.frontLegendLinesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLinesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backComponentNamesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNamesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentValuesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValuesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackComponentValues_property_selection.kind ()
        kind &= unwSelf.frontPackagesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontPackages_property_selection.kind ()
        kind &= unwSelf.backPackagesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackPackages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackground_property_selection, unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection, unwSelf.frontTracksBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontTracks_property_selection, g_Preferences!.mergerColorFrontTracks_property_selection, unwSelf.backTracksBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackTracks_property_selection, g_Preferences!.mergerColorBackTracks_property_selection, unwSelf.internalBoardsLimitsBezierPaths_property_selection, unwSelf.boardLimitsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayInternalBoardsLimits_property_selection, g_Preferences!.mergerColorInternalBoardsLimits_property_selection, unwSelf.frontPadsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontPads_property_selection, g_Preferences!.mergerColorFrontPads_property_selection, unwSelf.backPadsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackPads_property_selection, g_Preferences!.mergerColorBackPads_property_selection, unwSelf.viasBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayVias_property_selection, g_Preferences!.mergerColorVias_property_selection, unwSelf.holesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayHoles_property_selection, g_Preferences!.mergerColorHoles_property_selection, unwSelf.frontLegendLinesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontLegendLines_property_selection, g_Preferences!.mergerColorFrontLegendLines_property_selection, unwSelf.backLegendLinesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackLegendLines_property_selection, g_Preferences!.mergerColorBackLegendLines_property_selection, unwSelf.frontLegendTextsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontLegendTexts_property_selection, g_Preferences!.mergerColorFrontLegendTexts_property_selection, unwSelf.frontLayoutTextsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontLayoutTexts_property_selection, g_Preferences!.mergerColorFrontLayoutTexts_property_selection, unwSelf.backLegendTextsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackLegendTexts_property_selection, g_Preferences!.mergerColorBackLegendTexts_property_selection, unwSelf.backLayoutTextsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackLayoutTexts_property_selection, g_Preferences!.mergerColorBackLayoutTexts_property_selection, unwSelf.backComponentNamesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackComponentNames_property_selection, g_Preferences!.mergerColorBackComponentNames_property_selection, unwSelf.frontComponentNamesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontComponentNames_property_selection, g_Preferences!.mergerColorFrontComponentNames_property_selection, unwSelf.frontComponentValuesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontComponentValues_property_selection, g_Preferences!.mergerColorFrontComponentValues_property_selection, unwSelf.backComponentValuesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackComponentValues_property_selection, g_Preferences!.mergerColorBackComponentValues_property_selection, unwSelf.frontPackagesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontPackages_property_selection, g_Preferences!.mergerColorFrontPackages_property_selection, unwSelf.backPackagesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackPackages_property_selection, g_Preferences!.mergerColorBackPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16), .single (let v17), .single (let v18), .single (let v19), .single (let v20), .single (let v21), .single (let v22), .single (let v23), .single (let v24), .single (let v25), .single (let v26), .single (let v27), .single (let v28), .single (let v29), .single (let v30), .single (let v31), .single (let v32), .single (let v33), .single (let v34), .single (let v35), .single (let v36), .single (let v37), .single (let v38), .single (let v39), .single (let v40), .single (let v41), .single (let v42), .single (let v43), .single (let v44), .single (let v45), .single (let v46), .single (let v47), .single (let v48), .single (let v49), .single (let v50), .single (let v51), .single (let v52), .single (let v53), .single (let v54), .single (let v55), .single (let v56), .single (let v57), .single (let v58), .single (let v59), .single (let v60)) :
            return .single (transient_BoardModel_imageForInstances (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    g_Preferences?.mergerColorBackground_property.addEBObserver (self.imageForInstances_property)
    self.modelWidth_property.addEBObserver (self.imageForInstances_property)
    self.modelHeight_property.addEBObserver (self.imageForInstances_property)
    self.frontTracksBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontTracks_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontTracks_property.addEBObserver (self.imageForInstances_property)
    self.backTracksBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackTracks_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackTracks_property.addEBObserver (self.imageForInstances_property)
    self.internalBoardsLimitsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    self.boardLimitsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayInternalBoardsLimits_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorInternalBoardsLimits_property.addEBObserver (self.imageForInstances_property)
    self.frontPadsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontPads_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontPads_property.addEBObserver (self.imageForInstances_property)
    self.backPadsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackPads_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackPads_property.addEBObserver (self.imageForInstances_property)
    self.viasBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayVias_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorVias_property.addEBObserver (self.imageForInstances_property)
    self.holesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayHoles_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorHoles_property.addEBObserver (self.imageForInstances_property)
    self.frontLegendLinesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendLines_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLegendLines_property.addEBObserver (self.imageForInstances_property)
    self.backLegendLinesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendLines_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLegendLines_property.addEBObserver (self.imageForInstances_property)
    self.frontLegendTextsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendTexts_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.addEBObserver (self.imageForInstances_property)
    self.frontLayoutTextsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLayoutTexts_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.addEBObserver (self.imageForInstances_property)
    self.backLegendTextsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendTexts_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLegendTexts_property.addEBObserver (self.imageForInstances_property)
    self.backLayoutTextsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLayoutTexts_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.addEBObserver (self.imageForInstances_property)
    self.backComponentNamesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentNames_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackComponentNames_property.addEBObserver (self.imageForInstances_property)
    self.frontComponentNamesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentNames_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontComponentNames_property.addEBObserver (self.imageForInstances_property)
    self.frontComponentValuesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentValues_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontComponentValues_property.addEBObserver (self.imageForInstances_property)
    self.backComponentValuesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentValues_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackComponentValues_property.addEBObserver (self.imageForInstances_property)
    self.frontPackagesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontPackages_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontPackages_property.addEBObserver (self.imageForInstances_property)
    self.backPackagesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackPackages_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackPackages_property.addEBObserver (self.imageForInstances_property)
  //--- Atomic property: instanceCount
    self.instanceCount_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.myInstances_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.myInstances_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_instanceCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.myInstances_property.addEBObserver (self.instanceCount_property)
  //--- Install undoers and opposite setter for relationships
    self.frontLegendLines_property.undoManager = self.undoManager
    self.backLegendLines_property.undoManager = self.undoManager
    self.frontLegendTexts_property.undoManager = self.undoManager
    self.frontLayoutTexts_property.undoManager = self.undoManager
    self.backLegendTexts_property.undoManager = self.undoManager
    self.backLayoutTexts_property.undoManager = self.undoManager
    self.internalBoardsLimits_property.undoManager = self.undoManager
    self.drills_property.undoManager = self.undoManager
    self.vias_property.undoManager = self.undoManager
    self.frontPads_property.undoManager = self.undoManager
    self.backPads_property.undoManager = self.undoManager
    self.backComponentNames_property.undoManager = self.undoManager
    self.frontComponentNames_property.undoManager = self.undoManager
    self.frontComponentValues_property.undoManager = self.undoManager
    self.backComponentValues_property.undoManager = self.undoManager
    self.backTracks_property.undoManager = self.undoManager
    self.frontTracks_property.undoManager = self.undoManager
    self.frontPackages_property.undoManager = self.undoManager
    self.backPackages_property.undoManager = self.undoManager
    self.myInstances_property.undoManager = self.undoManager
    self.myInstances_property.setOppositeRelationship = { [weak self] (_ inManagedObject : MergerBoardInstance?) in
      inManagedObject?.myModel_property.setProp (self)
    }
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.modelWidth_property.removeEBObserver (self.modelRect_property)
    self.modelHeight_property.removeEBObserver (self.modelRect_property)
    self.frontLegendLines_property.removeEBObserverOf_x1 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.removeEBObserverOf_y1 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.removeEBObserverOf_x2 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.removeEBObserverOf_y2 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.removeEBObserverOf_width (self.frontLegendLinesSegments_property)
    self.frontLegendLinesSegments_property.removeEBObserver (self.frontLegendLinesBezierPaths_property)
    self.backLegendLines_property.removeEBObserverOf_x1 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_y1 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_x2 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_y2 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_width (self.backLegendLinesSegments_property)
    self.backLegendLinesSegments_property.removeEBObserver (self.backLegendLinesBezierPaths_property)
    self.frontLegendTexts_property.removeEBObserverOf_x1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_y1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_x2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_y2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_width (self.frontLegendTextsSegments_property)
    self.frontLegendTextsSegments_property.removeEBObserver (self.frontLegendTextsBezierPaths_property)
    self.frontLayoutTexts_property.removeEBObserverOf_x1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_y1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_x2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_y2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_width (self.frontLayoutTextsSegments_property)
    self.frontLayoutTextsSegments_property.removeEBObserver (self.frontLayoutTextsBezierPaths_property)
    self.backLegendTexts_property.removeEBObserverOf_x1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_y1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_x2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_y2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_width (self.backLegendTextsSegments_property)
    self.backLegendTextsSegments_property.removeEBObserver (self.backLegendTextsBezierPaths_property)
    self.backLayoutTexts_property.removeEBObserverOf_x1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_y1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_x2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_y2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_width (self.backLayoutTextsSegments_property)
    self.backLayoutTextsSegments_property.removeEBObserver (self.backLayoutTextsBezierPaths_property)
    self.internalBoardsLimits_property.removeEBObserverOf_x1 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.removeEBObserverOf_y1 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.removeEBObserverOf_x2 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.removeEBObserverOf_y2 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.removeEBObserverOf_width (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimitsSegments_property.removeEBObserver (self.internalBoardsLimitsBezierPaths_property)
    self.drills_property.removeEBObserverOf_x1 (self.drillSegments_property)
    self.drills_property.removeEBObserverOf_y1 (self.drillSegments_property)
    self.drills_property.removeEBObserverOf_x2 (self.drillSegments_property)
    self.drills_property.removeEBObserverOf_y2 (self.drillSegments_property)
    self.drills_property.removeEBObserverOf_width (self.drillSegments_property)
    self.drillSegments_property.removeEBObserver (self.holesBezierPaths_property)
    self.vias_property.removeEBObserverOf_x (self.viaShapes_property)
    self.vias_property.removeEBObserverOf_y (self.viaShapes_property)
    self.vias_property.removeEBObserverOf_padDiameter (self.viaShapes_property)
    self.viaShapes_property.removeEBObserver (self.viasBezierPaths_property)
    self.frontPads_property.removeEBObserverOf_x (self.frontPadArray_property)
    self.frontPads_property.removeEBObserverOf_y (self.frontPadArray_property)
    self.frontPads_property.removeEBObserverOf_width (self.frontPadArray_property)
    self.frontPads_property.removeEBObserverOf_height (self.frontPadArray_property)
    self.frontPads_property.removeEBObserverOf_shape (self.frontPadArray_property)
    self.frontPads_property.removeEBObserverOf_rotation (self.frontPadArray_property)
    self.frontPadArray_property.removeEBObserver (self.frontPadsBezierPaths_property)
    self.backPads_property.removeEBObserverOf_x (self.backPadArray_property)
    self.backPads_property.removeEBObserverOf_y (self.backPadArray_property)
    self.backPads_property.removeEBObserverOf_width (self.backPadArray_property)
    self.backPads_property.removeEBObserverOf_height (self.backPadArray_property)
    self.backPads_property.removeEBObserverOf_shape (self.backPadArray_property)
    self.backPads_property.removeEBObserverOf_rotation (self.backPadArray_property)
    self.backPadArray_property.removeEBObserver (self.backPadsBezierPaths_property)
    self.modelWidth_property.removeEBObserver (self.boardLimits_property)
    self.modelHeight_property.removeEBObserver (self.boardLimits_property)
    self.modelLimitWidth_property.removeEBObserver (self.boardLimits_property)
    g_Preferences?.mergerModelViewDisplayBoardLimits_property.removeEBObserver (self.boardLimits_property)
    self.modelWidth_property.removeEBObserver (self.boardLimitsBezierPaths_property)
    self.modelHeight_property.removeEBObserver (self.boardLimitsBezierPaths_property)
    self.modelLimitWidth_property.removeEBObserver (self.boardLimitsBezierPaths_property)
    self.backComponentNames_property.removeEBObserverOf_x1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_y1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_x2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_y2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_width (self.backComponentNameSegments_property)
    self.backComponentNameSegments_property.removeEBObserver (self.backComponentNamesBezierPaths_property)
    self.frontComponentNames_property.removeEBObserverOf_x1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_y1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_x2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_y2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_width (self.frontComponentNameSegments_property)
    self.frontComponentNameSegments_property.removeEBObserver (self.frontComponentNamesBezierPaths_property)
    self.frontComponentValues_property.removeEBObserverOf_x1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_y1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_x2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_y2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_width (self.frontComponentValueSegments_property)
    self.frontComponentValueSegments_property.removeEBObserver (self.frontComponentValuesBezierPaths_property)
    self.backComponentValues_property.removeEBObserverOf_x1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_y1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_x2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_y2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_width (self.backComponentValueSegments_property)
    self.backComponentValueSegments_property.removeEBObserver (self.backComponentValuesBezierPaths_property)
    self.backTracks_property.removeEBObserverOf_x1 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_y1 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_x2 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_y2 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_width (self.backTrackSegments_property)
    self.backTrackSegments_property.removeEBObserver (self.backTracksBezierPaths_property)
    self.frontTracks_property.removeEBObserverOf_x1 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_y1 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_x2 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_y2 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_width (self.frontTrackSegments_property)
    self.frontTrackSegments_property.removeEBObserver (self.frontTracksBezierPaths_property)
    self.frontPackages_property.removeEBObserverOf_x1 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_y1 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_x2 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_y2 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_width (self.frontPackagesSegments_property)
    self.frontPackagesSegments_property.removeEBObserver (self.frontPackagesBezierPaths_property)
    self.backPackages_property.removeEBObserverOf_x1 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_y1 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_x2 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_y2 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_width (self.backPackagesSegments_property)
    self.backPackagesSegments_property.removeEBObserver (self.backPackagesBezierPaths_property)
    g_Preferences?.mergerColorBackground_property.removeEBObserver (self.imageForModel_property)
    self.modelWidth_property.removeEBObserver (self.imageForModel_property)
    self.modelHeight_property.removeEBObserver (self.imageForModel_property)
    self.boardLimitsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBoardLimits_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBoardLimits_property.removeEBObserver (self.imageForModel_property)
    self.internalBoardsLimitsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayInternalBoardsLimits_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorInternalBoardsLimits_property.removeEBObserver (self.imageForModel_property)
    self.frontTracksBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontTracks_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontTracks_property.removeEBObserver (self.imageForModel_property)
    self.backTracksBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackTracks_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackTracks_property.removeEBObserver (self.imageForModel_property)
    self.frontPadsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontPads_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontPads_property.removeEBObserver (self.imageForModel_property)
    self.backPadsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackPads_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackPads_property.removeEBObserver (self.imageForModel_property)
    self.viasBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayVias_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorVias_property.removeEBObserver (self.imageForModel_property)
    self.holesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayHoles_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorHoles_property.removeEBObserver (self.imageForModel_property)
    self.frontLegendLinesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontLegendLines_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontLegendLines_property.removeEBObserver (self.imageForModel_property)
    self.backLegendLinesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackLegendLines_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackLegendLines_property.removeEBObserver (self.imageForModel_property)
    self.frontLegendTextsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontLegendTexts_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.removeEBObserver (self.imageForModel_property)
    self.frontLayoutTextsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontLayoutTexts_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.removeEBObserver (self.imageForModel_property)
    self.backLegendTextsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackLegendTexts_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackLegendTexts_property.removeEBObserver (self.imageForModel_property)
    self.backLayoutTextsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackLayoutTexts_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.removeEBObserver (self.imageForModel_property)
    self.backComponentNamesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackComponentNames_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackComponentNames_property.removeEBObserver (self.imageForModel_property)
    self.frontComponentNamesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontComponentNames_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontComponentNames_property.removeEBObserver (self.imageForModel_property)
    self.frontComponentValuesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontComponentValues_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontComponentValues_property.removeEBObserver (self.imageForModel_property)
    self.backComponentValuesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackComponentValues_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackComponentValues_property.removeEBObserver (self.imageForModel_property)
    self.frontPackagesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontPackages_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontPackages_property.removeEBObserver (self.imageForModel_property)
    self.backPackagesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackPackages_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackPackages_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackground_property.removeEBObserver (self.imageForInstances_property)
    self.modelWidth_property.removeEBObserver (self.imageForInstances_property)
    self.modelHeight_property.removeEBObserver (self.imageForInstances_property)
    self.frontTracksBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontTracks_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontTracks_property.removeEBObserver (self.imageForInstances_property)
    self.backTracksBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackTracks_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackTracks_property.removeEBObserver (self.imageForInstances_property)
    self.internalBoardsLimitsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    self.boardLimitsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayInternalBoardsLimits_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorInternalBoardsLimits_property.removeEBObserver (self.imageForInstances_property)
    self.frontPadsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontPads_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontPads_property.removeEBObserver (self.imageForInstances_property)
    self.backPadsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackPads_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackPads_property.removeEBObserver (self.imageForInstances_property)
    self.viasBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayVias_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorVias_property.removeEBObserver (self.imageForInstances_property)
    self.holesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayHoles_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorHoles_property.removeEBObserver (self.imageForInstances_property)
    self.frontLegendLinesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendLines_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLegendLines_property.removeEBObserver (self.imageForInstances_property)
    self.backLegendLinesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendLines_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLegendLines_property.removeEBObserver (self.imageForInstances_property)
    self.frontLegendTextsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendTexts_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.removeEBObserver (self.imageForInstances_property)
    self.frontLayoutTextsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLayoutTexts_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.removeEBObserver (self.imageForInstances_property)
    self.backLegendTextsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendTexts_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLegendTexts_property.removeEBObserver (self.imageForInstances_property)
    self.backLayoutTextsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLayoutTexts_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.removeEBObserver (self.imageForInstances_property)
    self.backComponentNamesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentNames_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackComponentNames_property.removeEBObserver (self.imageForInstances_property)
    self.frontComponentNamesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentNames_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontComponentNames_property.removeEBObserver (self.imageForInstances_property)
    self.frontComponentValuesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentValues_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontComponentValues_property.removeEBObserver (self.imageForInstances_property)
    self.backComponentValuesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentValues_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackComponentValues_property.removeEBObserver (self.imageForInstances_property)
    self.frontPackagesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontPackages_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontPackages_property.removeEBObserver (self.imageForInstances_property)
    self.backPackagesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackPackages_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackPackages_property.removeEBObserver (self.imageForInstances_property)
    self.myInstances_property.removeEBObserver (self.instanceCount_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "name",
      idx:self.name_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name_property.mObserverExplorer,
      valueExplorer:&self.name_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelWidth",
      idx:self.modelWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelWidth_property.mObserverExplorer,
      valueExplorer:&self.modelWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelWidthUnit",
      idx:self.modelWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.modelWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelHeight",
      idx:self.modelHeight_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelHeight_property.mObserverExplorer,
      valueExplorer:&self.modelHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelHeightUnit",
      idx:self.modelHeightUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelHeightUnit_property.mObserverExplorer,
      valueExplorer:&self.modelHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom_property.mObserverExplorer,
      valueExplorer:&self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelLimitWidth",
      idx:self.modelLimitWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelLimitWidth_property.mObserverExplorer,
      valueExplorer:&self.modelLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelLimitWidthUnit",
      idx:self.modelLimitWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelLimitWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.modelLimitWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "artworkName",
      idx:self.artworkName_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.artworkName_property.mObserverExplorer,
      valueExplorer:&self.artworkName_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "modelRect",
      idx:self.modelRect_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelRect_property.mObserverExplorer,
      valueExplorer:&self.modelRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendLinesSegments",
      idx:self.frontLegendLinesSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendLinesSegments_property.mObserverExplorer,
      valueExplorer:&self.frontLegendLinesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendLinesBezierPaths",
      idx:self.frontLegendLinesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendLinesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontLegendLinesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendLinesSegments",
      idx:self.backLegendLinesSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendLinesSegments_property.mObserverExplorer,
      valueExplorer:&self.backLegendLinesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendLinesBezierPaths",
      idx:self.backLegendLinesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendLinesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backLegendLinesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsSegments",
      idx:self.frontLegendTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.frontLegendTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsBezierPaths",
      idx:self.frontLegendTextsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendTextsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontLegendTextsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsSegments",
      idx:self.frontLayoutTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLayoutTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.frontLayoutTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsBezierPaths",
      idx:self.frontLayoutTextsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLayoutTextsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontLayoutTextsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsSegments",
      idx:self.backLegendTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.backLegendTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsBezierPaths",
      idx:self.backLegendTextsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendTextsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backLegendTextsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsSegments",
      idx:self.backLayoutTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLayoutTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.backLayoutTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsBezierPaths",
      idx:self.backLayoutTextsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLayoutTextsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backLayoutTextsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "internalBoardsLimitsSegments",
      idx:self.internalBoardsLimitsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.internalBoardsLimitsSegments_property.mObserverExplorer,
      valueExplorer:&self.internalBoardsLimitsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "internalBoardsLimitsBezierPaths",
      idx:self.internalBoardsLimitsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.internalBoardsLimitsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.internalBoardsLimitsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillSegments",
      idx:self.drillSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillSegments_property.mObserverExplorer,
      valueExplorer:&self.drillSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holesBezierPaths",
      idx:self.holesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.holesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaShapes",
      idx:self.viaShapes_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaShapes_property.mObserverExplorer,
      valueExplorer:&self.viaShapes_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viasBezierPaths",
      idx:self.viasBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viasBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.viasBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPadArray",
      idx:self.frontPadArray_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPadArray_property.mObserverExplorer,
      valueExplorer:&self.frontPadArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPadsBezierPaths",
      idx:self.frontPadsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPadsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontPadsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPadArray",
      idx:self.backPadArray_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPadArray_property.mObserverExplorer,
      valueExplorer:&self.backPadArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPadsBezierPaths",
      idx:self.backPadsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPadsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backPadsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimits",
      idx:self.boardLimits_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimits_property.mObserverExplorer,
      valueExplorer:&self.boardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitsBezierPaths",
      idx:self.boardLimitsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.boardLimitsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameSegments",
      idx:self.backComponentNameSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameSegments_property.mObserverExplorer,
      valueExplorer:&self.backComponentNameSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNamesBezierPaths",
      idx:self.backComponentNamesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNamesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backComponentNamesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameSegments",
      idx:self.frontComponentNameSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameSegments_property.mObserverExplorer,
      valueExplorer:&self.frontComponentNameSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNamesBezierPaths",
      idx:self.frontComponentNamesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNamesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontComponentNamesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValueSegments",
      idx:self.frontComponentValueSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValueSegments_property.mObserverExplorer,
      valueExplorer:&self.frontComponentValueSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValuesBezierPaths",
      idx:self.frontComponentValuesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValuesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontComponentValuesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValueSegments",
      idx:self.backComponentValueSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValueSegments_property.mObserverExplorer,
      valueExplorer:&self.backComponentValueSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValuesBezierPaths",
      idx:self.backComponentValuesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValuesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backComponentValuesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTrackSegments",
      idx:self.backTrackSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTrackSegments_property.mObserverExplorer,
      valueExplorer:&self.backTrackSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTracksBezierPaths",
      idx:self.backTracksBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTracksBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backTracksBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTrackSegments",
      idx:self.frontTrackSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTrackSegments_property.mObserverExplorer,
      valueExplorer:&self.frontTrackSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTracksBezierPaths",
      idx:self.frontTracksBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTracksBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontTracksBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesSegments",
      idx:self.frontPackagesSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackagesSegments_property.mObserverExplorer,
      valueExplorer:&self.frontPackagesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesBezierPaths",
      idx:self.frontPackagesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackagesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontPackagesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesSegments",
      idx:self.backPackagesSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackagesSegments_property.mObserverExplorer,
      valueExplorer:&self.backPackagesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesBezierPaths",
      idx:self.backPackagesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackagesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backPackagesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "imageForModel",
      idx:self.imageForModel_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.imageForModel_property.mObserverExplorer,
      valueExplorer:&self.imageForModel_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "imageForInstances",
      idx:self.imageForInstances_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.imageForInstances_property.mObserverExplorer,
      valueExplorer:&self.imageForInstances_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "instanceCount",
      idx:self.instanceCount_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceCount_property.mObserverExplorer,
      valueExplorer:&self.instanceCount_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "frontLegendLines",
      idx:frontLegendLines_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLegendLines_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLegendLines",
      idx:backLegendLines_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLegendLines_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontLegendTexts",
      idx:frontLegendTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLegendTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontLayoutTexts",
      idx:frontLayoutTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLayoutTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLegendTexts",
      idx:backLegendTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLegendTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLayoutTexts",
      idx:backLayoutTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLayoutTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "internalBoardsLimits",
      idx:internalBoardsLimits_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&internalBoardsLimits_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "drills",
      idx:drills_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&drills_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "vias",
      idx:vias_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&vias_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontPads",
      idx:frontPads_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontPads_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backPads",
      idx:backPads_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backPads_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backComponentNames",
      idx:backComponentNames_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backComponentNames_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontComponentNames",
      idx:frontComponentNames_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontComponentNames_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontComponentValues",
      idx:frontComponentValues_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontComponentValues_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backComponentValues",
      idx:backComponentValues_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backComponentValues_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backTracks",
      idx:backTracks_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backTracks_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontTracks",
      idx:frontTracks_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontTracks_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontPackages",
      idx:frontPackages_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontPackages_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backPackages",
      idx:backPackages_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backPackages_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "myInstances",
      idx:myInstances_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&myInstances_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: name
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
  //--- Atomic property: modelWidth
    self.modelWidth_property.mObserverExplorer = nil
    self.modelWidth_property.mValueExplorer = nil
  //--- Atomic property: modelWidthUnit
    self.modelWidthUnit_property.mObserverExplorer = nil
    self.modelWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: modelHeight
    self.modelHeight_property.mObserverExplorer = nil
    self.modelHeight_property.mValueExplorer = nil
  //--- Atomic property: modelHeightUnit
    self.modelHeightUnit_property.mObserverExplorer = nil
    self.modelHeightUnit_property.mValueExplorer = nil
  //--- Atomic property: zoom
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
  //--- To many property: frontLegendLines
    self.frontLegendLines_property.mValueExplorer = nil
  //--- To many property: backLegendLines
    self.backLegendLines_property.mValueExplorer = nil
  //--- To many property: frontLegendTexts
    self.frontLegendTexts_property.mValueExplorer = nil
  //--- To many property: frontLayoutTexts
    self.frontLayoutTexts_property.mValueExplorer = nil
  //--- To many property: backLegendTexts
    self.backLegendTexts_property.mValueExplorer = nil
  //--- To many property: backLayoutTexts
    self.backLayoutTexts_property.mValueExplorer = nil
  //--- To many property: internalBoardsLimits
    self.internalBoardsLimits_property.mValueExplorer = nil
  //--- To many property: drills
    self.drills_property.mValueExplorer = nil
  //--- To many property: vias
    self.vias_property.mValueExplorer = nil
  //--- To many property: frontPads
    self.frontPads_property.mValueExplorer = nil
  //--- To many property: backPads
    self.backPads_property.mValueExplorer = nil
  //--- Atomic property: modelLimitWidth
    self.modelLimitWidth_property.mObserverExplorer = nil
    self.modelLimitWidth_property.mValueExplorer = nil
  //--- Atomic property: modelLimitWidthUnit
    self.modelLimitWidthUnit_property.mObserverExplorer = nil
    self.modelLimitWidthUnit_property.mValueExplorer = nil
  //--- To many property: backComponentNames
    self.backComponentNames_property.mValueExplorer = nil
  //--- To many property: frontComponentNames
    self.frontComponentNames_property.mValueExplorer = nil
  //--- To many property: frontComponentValues
    self.frontComponentValues_property.mValueExplorer = nil
  //--- To many property: backComponentValues
    self.backComponentValues_property.mValueExplorer = nil
  //--- To many property: backTracks
    self.backTracks_property.mValueExplorer = nil
  //--- To many property: frontTracks
    self.frontTracks_property.mValueExplorer = nil
  //--- To many property: frontPackages
    self.frontPackages_property.mValueExplorer = nil
  //--- To many property: backPackages
    self.backPackages_property.mValueExplorer = nil
  //--- Atomic property: artworkName
    self.artworkName_property.mObserverExplorer = nil
    self.artworkName_property.mValueExplorer = nil
  //--- To many property: myInstances
    self.myInstances_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: name
    self.name_property.storeIn (dictionary: ioDictionary, forKey:"name")
  //--- Atomic property: modelWidth
    self.modelWidth_property.storeIn (dictionary: ioDictionary, forKey:"modelWidth")
  //--- Atomic property: modelWidthUnit
    self.modelWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"modelWidthUnit")
  //--- Atomic property: modelHeight
    self.modelHeight_property.storeIn (dictionary: ioDictionary, forKey:"modelHeight")
  //--- Atomic property: modelHeightUnit
    self.modelHeightUnit_property.storeIn (dictionary: ioDictionary, forKey:"modelHeightUnit")
  //--- Atomic property: zoom
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey:"zoom")
  //--- To many property: frontLegendLines
    self.store (
      managedObjectArray: frontLegendLines_property.propval as NSArray,
      relationshipName: "frontLegendLines",
      intoDictionary: ioDictionary
    )
  //--- To many property: backLegendLines
    self.store (
      managedObjectArray: backLegendLines_property.propval as NSArray,
      relationshipName: "backLegendLines",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontLegendTexts
    self.store (
      managedObjectArray: frontLegendTexts_property.propval as NSArray,
      relationshipName: "frontLegendTexts",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontLayoutTexts
    self.store (
      managedObjectArray: frontLayoutTexts_property.propval as NSArray,
      relationshipName: "frontLayoutTexts",
      intoDictionary: ioDictionary
    )
  //--- To many property: backLegendTexts
    self.store (
      managedObjectArray: backLegendTexts_property.propval as NSArray,
      relationshipName: "backLegendTexts",
      intoDictionary: ioDictionary
    )
  //--- To many property: backLayoutTexts
    self.store (
      managedObjectArray: backLayoutTexts_property.propval as NSArray,
      relationshipName: "backLayoutTexts",
      intoDictionary: ioDictionary
    )
  //--- To many property: internalBoardsLimits
    self.store (
      managedObjectArray: internalBoardsLimits_property.propval as NSArray,
      relationshipName: "internalBoardsLimits",
      intoDictionary: ioDictionary
    )
  //--- To many property: drills
    self.store (
      managedObjectArray: drills_property.propval as NSArray,
      relationshipName: "drills",
      intoDictionary: ioDictionary
    )
  //--- To many property: vias
    self.store (
      managedObjectArray: vias_property.propval as NSArray,
      relationshipName: "vias",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontPads
    self.store (
      managedObjectArray: frontPads_property.propval as NSArray,
      relationshipName: "frontPads",
      intoDictionary: ioDictionary
    )
  //--- To many property: backPads
    self.store (
      managedObjectArray: backPads_property.propval as NSArray,
      relationshipName: "backPads",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: modelLimitWidth
    self.modelLimitWidth_property.storeIn (dictionary: ioDictionary, forKey:"modelLimitWidth")
  //--- Atomic property: modelLimitWidthUnit
    self.modelLimitWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"modelLimitWidthUnit")
  //--- To many property: backComponentNames
    self.store (
      managedObjectArray: backComponentNames_property.propval as NSArray,
      relationshipName: "backComponentNames",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontComponentNames
    self.store (
      managedObjectArray: frontComponentNames_property.propval as NSArray,
      relationshipName: "frontComponentNames",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontComponentValues
    self.store (
      managedObjectArray: frontComponentValues_property.propval as NSArray,
      relationshipName: "frontComponentValues",
      intoDictionary: ioDictionary
    )
  //--- To many property: backComponentValues
    self.store (
      managedObjectArray: backComponentValues_property.propval as NSArray,
      relationshipName: "backComponentValues",
      intoDictionary: ioDictionary
    )
  //--- To many property: backTracks
    self.store (
      managedObjectArray: backTracks_property.propval as NSArray,
      relationshipName: "backTracks",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontTracks
    self.store (
      managedObjectArray: frontTracks_property.propval as NSArray,
      relationshipName: "frontTracks",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontPackages
    self.store (
      managedObjectArray: frontPackages_property.propval as NSArray,
      relationshipName: "frontPackages",
      intoDictionary: ioDictionary
    )
  //--- To many property: backPackages
    self.store (
      managedObjectArray: backPackages_property.propval as NSArray,
      relationshipName: "backPackages",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: artworkName
    self.artworkName_property.storeIn (dictionary: ioDictionary, forKey:"artworkName")
  //--- To many property: myInstances
    self.store (
      managedObjectArray: myInstances_property.propval as NSArray,
      relationshipName: "myInstances",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- Atomic property: name
    self.name_property.readFrom (dictionary: inDictionary, forKey:"name")
  //--- Atomic property: modelWidth
    self.modelWidth_property.readFrom (dictionary: inDictionary, forKey:"modelWidth")
  //--- Atomic property: modelWidthUnit
    self.modelWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"modelWidthUnit")
  //--- Atomic property: modelHeight
    self.modelHeight_property.readFrom (dictionary: inDictionary, forKey:"modelHeight")
  //--- Atomic property: modelHeightUnit
    self.modelHeightUnit_property.readFrom (dictionary: inDictionary, forKey:"modelHeightUnit")
  //--- Atomic property: zoom
    self.zoom_property.readFrom (dictionary: inDictionary, forKey:"zoom")
  //--- To many property: frontLegendLines
    self.frontLegendLines_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLegendLines",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: backLegendLines
    self.backLegendLines_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLegendLines",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: frontLegendTexts
    self.frontLegendTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLegendTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: frontLayoutTexts
    self.frontLayoutTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLayoutTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: backLegendTexts
    self.backLegendTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLegendTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: backLayoutTexts
    self.backLayoutTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLayoutTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: internalBoardsLimits
    self.internalBoardsLimits_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "internalBoardsLimits",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: drills
    self.drills_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "drills",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: vias
    self.vias_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "vias",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelVia])
  //--- To many property: frontPads
    self.frontPads_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontPads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelPad])
  //--- To many property: backPads
    self.backPads_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backPads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelPad])
  //--- Atomic property: modelLimitWidth
    self.modelLimitWidth_property.readFrom (dictionary: inDictionary, forKey:"modelLimitWidth")
  //--- Atomic property: modelLimitWidthUnit
    self.modelLimitWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"modelLimitWidthUnit")
  //--- To many property: backComponentNames
    self.backComponentNames_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: frontComponentNames
    self.frontComponentNames_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: frontComponentValues
    self.frontComponentValues_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: backComponentValues
    self.backComponentValues_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: backTracks
    self.backTracks_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: frontTracks
    self.frontTracks_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: frontPackages
    self.frontPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: backPackages
    self.backPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- Atomic property: artworkName
    self.artworkName_property.readFrom (dictionary: inDictionary, forKey:"artworkName")
  //--- To many property: myInstances
    self.myInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "myInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [MergerBoardInstance])
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
  //--- Cascading toMany frontLegendLines
    do{
      let objects = self.frontLegendLines_property.propval
      self.frontLegendLines_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany backLegendLines
    do{
      let objects = self.backLegendLines_property.propval
      self.backLegendLines_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany frontLegendTexts
    do{
      let objects = self.frontLegendTexts_property.propval
      self.frontLegendTexts_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany frontLayoutTexts
    do{
      let objects = self.frontLayoutTexts_property.propval
      self.frontLayoutTexts_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany backLegendTexts
    do{
      let objects = self.backLegendTexts_property.propval
      self.backLegendTexts_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany backLayoutTexts
    do{
      let objects = self.backLayoutTexts_property.propval
      self.backLayoutTexts_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany internalBoardsLimits
    do{
      let objects = self.internalBoardsLimits_property.propval
      self.internalBoardsLimits_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany drills
    do{
      let objects = self.drills_property.propval
      self.drills_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany vias
    do{
      let objects = self.vias_property.propval
      self.vias_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany frontPads
    do{
      let objects = self.frontPads_property.propval
      self.frontPads_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany backPads
    do{
      let objects = self.backPads_property.propval
      self.backPads_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany backComponentNames
    do{
      let objects = self.backComponentNames_property.propval
      self.backComponentNames_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany frontComponentNames
    do{
      let objects = self.frontComponentNames_property.propval
      self.frontComponentNames_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany frontComponentValues
    do{
      let objects = self.frontComponentValues_property.propval
      self.frontComponentValues_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany backComponentValues
    do{
      let objects = self.backComponentValues_property.propval
      self.backComponentValues_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany backTracks
    do{
      let objects = self.backTracks_property.propval
      self.backTracks_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany frontTracks
    do{
      let objects = self.frontTracks_property.propval
      self.frontTracks_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany frontPackages
    do{
      let objects = self.frontPackages_property.propval
      self.frontPackages_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany backPackages
    do{
      let objects = self.backPackages_property.propval
      self.backPackages_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Nullify toMany myInstances
    self.myInstances_property.setProp ([]) // Set relationship to empty array
  //---
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetControllers
  //····················································································································

  override func resetControllers () {
    super.resetControllers ()
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
  //--- To many property: frontLegendLines
    self.frontLegendLines_property.setProp ([])
  //--- To many property: backLegendLines
    self.backLegendLines_property.setProp ([])
  //--- To many property: frontLegendTexts
    self.frontLegendTexts_property.setProp ([])
  //--- To many property: frontLayoutTexts
    self.frontLayoutTexts_property.setProp ([])
  //--- To many property: backLegendTexts
    self.backLegendTexts_property.setProp ([])
  //--- To many property: backLayoutTexts
    self.backLayoutTexts_property.setProp ([])
  //--- To many property: internalBoardsLimits
    self.internalBoardsLimits_property.setProp ([])
  //--- To many property: drills
    self.drills_property.setProp ([])
  //--- To many property: vias
    self.vias_property.setProp ([])
  //--- To many property: frontPads
    self.frontPads_property.setProp ([])
  //--- To many property: backPads
    self.backPads_property.setProp ([])
  //--- To many property: backComponentNames
    self.backComponentNames_property.setProp ([])
  //--- To many property: frontComponentNames
    self.frontComponentNames_property.setProp ([])
  //--- To many property: frontComponentValues
    self.frontComponentValues_property.setProp ([])
  //--- To many property: backComponentValues
    self.backComponentValues_property.setProp ([])
  //--- To many property: backTracks
    self.backTracks_property.setProp ([])
  //--- To many property: frontTracks
    self.frontTracks_property.setProp ([])
  //--- To many property: frontPackages
    self.frontPackages_property.setProp ([])
  //--- To many property: backPackages
    self.backPackages_property.setProp ([])
  //--- To many property: myInstances
    self.myInstances_property.setProp ([])
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: frontLegendLines
    for managedObject : EBManagedObject in self.frontLegendLines_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: backLegendLines
    for managedObject : EBManagedObject in self.backLegendLines_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: frontLegendTexts
    for managedObject : EBManagedObject in self.frontLegendTexts_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: frontLayoutTexts
    for managedObject : EBManagedObject in self.frontLayoutTexts_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: backLegendTexts
    for managedObject : EBManagedObject in self.backLegendTexts_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: backLayoutTexts
    for managedObject : EBManagedObject in self.backLayoutTexts_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: internalBoardsLimits
    for managedObject : EBManagedObject in self.internalBoardsLimits_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: drills
    for managedObject : EBManagedObject in self.drills_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: vias
    for managedObject : EBManagedObject in self.vias_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: frontPads
    for managedObject : EBManagedObject in self.frontPads_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: backPads
    for managedObject : EBManagedObject in self.backPads_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: backComponentNames
    for managedObject : EBManagedObject in self.backComponentNames_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: frontComponentNames
    for managedObject : EBManagedObject in self.frontComponentNames_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: frontComponentValues
    for managedObject : EBManagedObject in self.frontComponentValues_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: backComponentValues
    for managedObject : EBManagedObject in self.backComponentValues_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: backTracks
    for managedObject : EBManagedObject in self.backTracks_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: frontTracks
    for managedObject : EBManagedObject in self.frontTracks_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: frontPackages
    for managedObject : EBManagedObject in self.frontPackages_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: backPackages
    for managedObject : EBManagedObject in self.backPackages_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: myInstances
    for managedObject : EBManagedObject in self.myInstances_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardModel : ReadOnlyAbstractArrayProperty <BoardModel> {

  //····················································································································

  weak var undoManager : EBUndoManager? // SOULD BE WEAK

  //····················································································································

  var propval : [BoardModel] { return [] } // Abstract method

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_name.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_name.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_name {
        managedObject.name_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_name {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelWidth' stored property
  //····················································································································

  private var mObserversOf_modelWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelWidth_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelWidth {
        managedObject.modelWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelWidth_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_modelWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelWidthUnit' stored property
  //····················································································································

  private var mObserversOf_modelWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelWidthUnit_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelWidthUnit {
        managedObject.modelWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelWidthUnit_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_modelWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelHeight' stored property
  //····················································································································

  private var mObserversOf_modelHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelHeight_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelHeight {
        managedObject.modelHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelHeight_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_modelHeight {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelHeightUnit' stored property
  //····················································································································

  private var mObserversOf_modelHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelHeightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelHeightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelHeightUnit_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelHeightUnit {
        managedObject.modelHeightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelHeightUnit_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_modelHeightUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_zoom {
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_zoom {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelLimitWidth' stored property
  //····················································································································

  private var mObserversOf_modelLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelLimitWidth_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelLimitWidth {
        managedObject.modelLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelLimitWidth_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_modelLimitWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelLimitWidthUnit' stored property
  //····················································································································

  private var mObserversOf_modelLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelLimitWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLimitWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelLimitWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLimitWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelLimitWidthUnit_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelLimitWidthUnit {
        managedObject.modelLimitWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelLimitWidthUnit_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_modelLimitWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelLimitWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_artworkName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_artworkName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_artworkName {
        managedObject.artworkName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_artworkName {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.artworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelRect' transient property
  //····················································································································

  private var mObserversOf_modelRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelRect_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelRect {
        managedObject.modelRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelRect_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelRect {
        managedObject.modelRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendLinesSegments' transient property
  //····················································································································

  private var mObserversOf_frontLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendLinesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendLinesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendLinesSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendLinesSegments {
        managedObject.frontLegendLinesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendLinesSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendLinesSegments {
        managedObject.frontLegendLinesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendLinesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendLinesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendLinesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendLinesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendLinesBezierPaths {
        managedObject.frontLegendLinesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendLinesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendLinesBezierPaths {
        managedObject.frontLegendLinesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendLinesSegments' transient property
  //····················································································································

  private var mObserversOf_backLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendLinesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendLinesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendLinesSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendLinesSegments {
        managedObject.backLegendLinesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendLinesSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendLinesSegments {
        managedObject.backLegendLinesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendLinesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendLinesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendLinesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendLinesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendLinesBezierPaths {
        managedObject.backLegendLinesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendLinesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendLinesBezierPaths {
        managedObject.backLegendLinesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsSegments' transient property
  //····················································································································

  private var mObserversOf_frontLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegments {
        managedObject.frontLegendTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegments {
        managedObject.frontLegendTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendTextsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendTextsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsBezierPaths {
        managedObject.frontLegendTextsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsBezierPaths {
        managedObject.frontLegendTextsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsSegments' transient property
  //····················································································································

  private var mObserversOf_frontLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegments {
        managedObject.frontLayoutTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegments {
        managedObject.frontLayoutTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLayoutTextsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLayoutTextsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsBezierPaths {
        managedObject.frontLayoutTextsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsBezierPaths {
        managedObject.frontLayoutTextsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsSegments' transient property
  //····················································································································

  private var mObserversOf_backLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegments {
        managedObject.backLegendTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegments {
        managedObject.backLegendTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendTextsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendTextsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsBezierPaths {
        managedObject.backLegendTextsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsBezierPaths {
        managedObject.backLegendTextsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsSegments' transient property
  //····················································································································

  private var mObserversOf_backLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegments {
        managedObject.backLayoutTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegments {
        managedObject.backLayoutTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLayoutTextsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLayoutTextsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsBezierPaths {
        managedObject.backLayoutTextsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsBezierPaths {
        managedObject.backLayoutTextsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'internalBoardsLimitsSegments' transient property
  //····················································································································

  private var mObserversOf_internalBoardsLimitsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_internalBoardsLimitsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_internalBoardsLimitsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.internalBoardsLimitsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_internalBoardsLimitsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_internalBoardsLimitsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.internalBoardsLimitsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_internalBoardsLimitsSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_internalBoardsLimitsSegments {
        managedObject.internalBoardsLimitsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_internalBoardsLimitsSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_internalBoardsLimitsSegments {
        managedObject.internalBoardsLimitsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'internalBoardsLimitsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_internalBoardsLimitsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_internalBoardsLimitsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_internalBoardsLimitsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.internalBoardsLimitsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_internalBoardsLimitsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_internalBoardsLimitsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.internalBoardsLimitsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_internalBoardsLimitsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_internalBoardsLimitsBezierPaths {
        managedObject.internalBoardsLimitsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_internalBoardsLimitsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_internalBoardsLimitsBezierPaths {
        managedObject.internalBoardsLimitsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillSegments' transient property
  //····················································································································

  private var mObserversOf_drillSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drillSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drillSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_drillSegments {
        managedObject.drillSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_drillSegments {
        managedObject.drillSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_holesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_holesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_holesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_holesBezierPaths {
        managedObject.holesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_holesBezierPaths {
        managedObject.holesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaShapes' transient property
  //····················································································································

  private var mObserversOf_viaShapes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaShapes.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapes_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaShapes.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapes_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaShapes_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapes {
        managedObject.viaShapes_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaShapes_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapes {
        managedObject.viaShapes_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viasBezierPaths' transient property
  //····················································································································

  private var mObserversOf_viasBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viasBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viasBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viasBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_viasBezierPaths {
        managedObject.viasBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viasBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_viasBezierPaths {
        managedObject.viasBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPadArray' transient property
  //····················································································································

  private var mObserversOf_frontPadArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPadArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPadArray.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPadArray.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPadArray_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadArray {
        managedObject.frontPadArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPadArray_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadArray {
        managedObject.frontPadArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPadsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPadsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPadsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPadsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsBezierPaths {
        managedObject.frontPadsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPadsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsBezierPaths {
        managedObject.frontPadsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPadArray' transient property
  //····················································································································

  private var mObserversOf_backPadArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPadArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPadArray.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPadArray.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPadArray_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadArray {
        managedObject.backPadArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPadArray_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadArray {
        managedObject.backPadArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPadsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPadsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPadsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPadsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsBezierPaths {
        managedObject.backPadsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPadsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsBezierPaths {
        managedObject.backPadsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimits' transient property
  //····················································································································

  private var mObserversOf_boardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimits.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimits_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimits.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimits_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimits_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimits {
        managedObject.boardLimits_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimits_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimits {
        managedObject.boardLimits_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_boardLimitsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitsBezierPaths {
        managedObject.boardLimitsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitsBezierPaths {
        managedObject.boardLimitsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_backComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegments {
        managedObject.backComponentNameSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegments {
        managedObject.backComponentNameSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNamesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNamesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNamesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNamesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNamesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNamesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNamesBezierPaths {
        managedObject.backComponentNamesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNamesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNamesBezierPaths {
        managedObject.backComponentNamesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNamesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNamesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNamesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNamesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNamesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNamesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNamesBezierPaths {
        managedObject.frontComponentNamesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNamesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNamesBezierPaths {
        managedObject.frontComponentNamesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValueSegments' transient property
  //····················································································································

  private var mObserversOf_frontComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValueSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValueSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValueSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueSegments {
        managedObject.frontComponentValueSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueSegments {
        managedObject.frontComponentValueSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValuesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValuesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValuesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValuesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValuesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValuesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValuesBezierPaths {
        managedObject.frontComponentValuesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValuesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValuesBezierPaths {
        managedObject.frontComponentValuesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValueSegments' transient property
  //····················································································································

  private var mObserversOf_backComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValueSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValueSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValueSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueSegments {
        managedObject.backComponentValueSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueSegments {
        managedObject.backComponentValueSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValuesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValuesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValuesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValuesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValuesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValuesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValuesBezierPaths {
        managedObject.backComponentValuesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValuesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValuesBezierPaths {
        managedObject.backComponentValuesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTrackSegments' transient property
  //····················································································································

  private var mObserversOf_backTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTrackSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTrackSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTrackSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegments {
        managedObject.backTrackSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTrackSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegments {
        managedObject.backTrackSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTracksBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTracksBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTracksBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTracksBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksBezierPaths {
        managedObject.backTracksBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTracksBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksBezierPaths {
        managedObject.backTracksBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTrackSegments' transient property
  //····················································································································

  private var mObserversOf_frontTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTrackSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTrackSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTrackSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegments {
        managedObject.frontTrackSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTrackSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegments {
        managedObject.frontTrackSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTracksBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTracksBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTracksBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTracksBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksBezierPaths {
        managedObject.frontTracksBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTracksBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksBezierPaths {
        managedObject.frontTracksBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesSegments' transient property
  //····················································································································

  private var mObserversOf_frontPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackagesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackagesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegments {
        managedObject.frontPackagesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegments {
        managedObject.frontPackagesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackagesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackagesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesBezierPaths {
        managedObject.frontPackagesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesBezierPaths {
        managedObject.frontPackagesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesSegments' transient property
  //····················································································································

  private var mObserversOf_backPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackagesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackagesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegments {
        managedObject.backPackagesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegments {
        managedObject.backPackagesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackagesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackagesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesBezierPaths {
        managedObject.backPackagesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesBezierPaths {
        managedObject.backPackagesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'imageForModel' transient property
  //····················································································································

  private var mObserversOf_imageForModel = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_imageForModel (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_imageForModel.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageForModel_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageForModel (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_imageForModel.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageForModel_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_imageForModel_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_imageForModel {
        managedObject.imageForModel_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_imageForModel_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_imageForModel {
        managedObject.imageForModel_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'imageForInstances' transient property
  //····················································································································

  private var mObserversOf_imageForInstances = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_imageForInstances.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageForInstances_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_imageForInstances.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageForInstances_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_imageForInstances_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_imageForInstances {
        managedObject.imageForInstances_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_imageForInstances_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_imageForInstances {
        managedObject.imageForInstances_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceCount' transient property
  //····················································································································

  private var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instanceCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instanceCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceCount_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceCount {
        managedObject.instanceCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceCount_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceCount {
        managedObject.instanceCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_BoardModel : ReadOnlyArrayOf_BoardModel {

  var readModelFunction : Optional<() -> EBSelection < [BoardModel] > >

  //····················································································································

   private var prop_cache : EBSelection < [BoardModel] >? 

  //····················································································································

  override var propval : [BoardModel] {
    if let value = prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <BoardModel> ()

  override var prop : EBSelection < [BoardModel] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <BoardModel>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <BoardModel> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_name_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelHeight_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelHeightUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelLimitWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelLimitWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_artworkName_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_modelRect_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendLinesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendLinesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendLinesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendLinesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendTextsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLayoutTextsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendTextsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLayoutTextsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_internalBoardsLimitsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_internalBoardsLimitsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_drillSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_holesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_viaShapes_fromElementsOfSet (removedSet)
        removeEBObserversOf_viasBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPadArray_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPadsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPadArray_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPadsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimits_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNamesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNamesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValuesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValuesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTrackSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTracksBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTrackSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTracksBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackagesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackagesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackagesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_imageForModel_fromElementsOfSet (removedSet)
        removeEBObserversOf_imageForInstances_fromElementsOfSet (removedSet)
        removeEBObserversOf_instanceCount_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_name_toElementsOfSet (addedSet)
        addEBObserversOf_modelWidth_toElementsOfSet (addedSet)
        addEBObserversOf_modelWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_modelHeight_toElementsOfSet (addedSet)
        addEBObserversOf_modelHeightUnit_toElementsOfSet (addedSet)
        addEBObserversOf_zoom_toElementsOfSet (addedSet)
        addEBObserversOf_modelLimitWidth_toElementsOfSet (addedSet)
        addEBObserversOf_modelLimitWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_artworkName_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_modelRect_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendLinesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendLinesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendLinesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendLinesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendTextsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontLayoutTextsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendTextsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backLayoutTextsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_internalBoardsLimitsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_internalBoardsLimitsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_drillSegments_toElementsOfSet (addedSet)
        addEBObserversOf_holesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_viaShapes_toElementsOfSet (addedSet)
        addEBObserversOf_viasBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontPadArray_toElementsOfSet (addedSet)
        addEBObserversOf_frontPadsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backPadArray_toElementsOfSet (addedSet)
        addEBObserversOf_backPadsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimits_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNamesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNamesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValueSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValuesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValueSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValuesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backTrackSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backTracksBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontTrackSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontTracksBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackagesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackagesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backPackagesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backPackagesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_imageForModel_toElementsOfSet (addedSet)
        addEBObserversOf_imageForInstances_toElementsOfSet (addedSet)
        addEBObserversOf_instanceCount_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BoardModel : ReadOnlyArrayOf_BoardModel {

  //····················································································································
 
  func setProp (_ value :  [BoardModel]) { } // Abstract method
 
  // var propval : [BoardModel] { return [] } // Abstract method
 
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_BoardModel : ReadWriteArrayOf_BoardModel, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : BoardModel?) -> Void > = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <BoardModel> ()
  private var mValue = [BoardModel] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
        removeEBObserversOf_name_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelWidth_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelWidthUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelHeight_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelHeightUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelLimitWidth_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelLimitWidthUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_artworkName_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelRect_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendLinesSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendLinesBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendLinesSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendLinesBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendTextsBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLayoutTextsBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendTextsBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLayoutTextsBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_internalBoardsLimitsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_internalBoardsLimitsBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drillSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holesBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viaShapes_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viasBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPadArray_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPadsBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPadArray_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPadsBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimits_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitsBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentNamesBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentNamesBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentValuesBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentValuesBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backTrackSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backTracksBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontTrackSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontTracksBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPackagesBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPackagesSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPackagesBezierPaths_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_imageForModel_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_imageForInstances_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_instanceCount_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModel in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
        addEBObserversOf_name_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelWidth_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelWidthUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelHeight_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelHeightUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_zoom_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelLimitWidth_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelLimitWidthUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_artworkName_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelRect_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendLinesSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendLinesBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendLinesSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendLinesBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendTextsBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLayoutTextsBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendTextsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendTextsBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLayoutTextsBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_internalBoardsLimitsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_internalBoardsLimitsBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drillSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holesBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viaShapes_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viasBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPadArray_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPadsBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPadArray_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPadsBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimits_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitsBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentNameSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentNamesBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentNameSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentNamesBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentValueSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentValuesBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentValueSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentValuesBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backTrackSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backTracksBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontTrackSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontTracksBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPackagesSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPackagesBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPackagesSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPackagesBezierPaths_toElementsOfSet (addedObjectSet)
        addEBObserversOf_imageForModel_toElementsOfSet (addedObjectSet)
        addEBObserversOf_imageForInstances_toElementsOfSet (addedObjectSet)
        addEBObserversOf_instanceCount_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [BoardModel] > { return .single (mValue) }

  override func setProp (_ inValue : [BoardModel]) { mValue = inValue }

  override var propval : [BoardModel] { return mValue }

  //····················································································································

  @objc func performUndo (_ oldValue : [BoardModel]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModel) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModel) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
