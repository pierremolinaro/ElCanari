//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_name : class {
  var name : String { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_modelWidth : class {
  var modelWidth : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_modelWidthUnit : class {
  var modelWidthUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_modelHeight : class {
  var modelHeight : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_modelHeightUnit : class {
  var modelHeightUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_zoom : class {
  var zoom : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_modelLimitWidth : class {
  var modelLimitWidth : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_modelLimitWidthUnit : class {
  var modelLimitWidthUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_artworkName : class {
  var artworkName : String { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontLegendLinesSegments : class {
  var frontLegendLinesSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backLegendLinesSegments : class {
  var backLegendLinesSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backLegendLinesBezierPaths : class {
  var backLegendLinesBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontLegendTextsSegments : class {
  var frontLegendTextsSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontLegendTextsBezierPaths : class {
  var frontLegendTextsBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontLayoutTextsSegments : class {
  var frontLayoutTextsSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontLayoutTextsBezierPaths : class {
  var frontLayoutTextsBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backLegendTextsSegments : class {
  var backLegendTextsSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backLegendTextsBezierPaths : class {
  var backLegendTextsBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backLayoutTextsSegments : class {
  var backLayoutTextsSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backLayoutTextsBezierPaths : class {
  var backLayoutTextsBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_internalBoardsLimitsSegments : class {
  var internalBoardsLimitsSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_internalBoardsLimitsBezierPaths : class {
  var internalBoardsLimitsBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_drillSegments : class {
  var drillSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_holesBezierPaths : class {
  var holesBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_viaShapes : class {
  var viaShapes : MergerViaShapeArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_viasBezierPaths : class {
  var viasBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontPadArray : class {
  var frontPadArray : MergerPadArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontPadsBezierPaths : class {
  var frontPadsBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backPadArray : class {
  var backPadArray : MergerPadArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backPadsBezierPaths : class {
  var backPadsBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_boardLimits : class {
  var boardLimits : MergerBoardLimits? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_boardLimitsBezierPaths : class {
  var boardLimitsBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backComponentNameSegments : class {
  var backComponentNameSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backComponentNamesBezierPaths : class {
  var backComponentNamesBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontComponentNameSegments : class {
  var frontComponentNameSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontComponentNamesBezierPaths : class {
  var frontComponentNamesBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontComponentValueSegments : class {
  var frontComponentValueSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontComponentValuesBezierPaths : class {
  var frontComponentValuesBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backComponentValueSegments : class {
  var backComponentValueSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backComponentValuesBezierPaths : class {
  var backComponentValuesBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backTrackSegments : class {
  var backTrackSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backTracksBezierPaths : class {
  var backTracksBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontTrackSegments : class {
  var frontTrackSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontTracksBezierPaths : class {
  var frontTracksBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontPackagesSegments : class {
  var frontPackagesSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontPackagesBezierPaths : class {
  var frontPackagesBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backPackagesSegments : class {
  var backPackagesSegments : MergerSegmentArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_backPackagesBezierPaths : class {
  var backPackagesBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_instanceCount : class {
  var instanceCount : Int? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_frontLegendLinesBezierPaths : class {
  var frontLegendLinesBezierPaths : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_imageForModel : class {
  var imageForModel : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardModel_imageForInstances : class {
  var imageForInstances : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------
//    Entity: BoardModel
//----------------------------------------------------------------------------------------------------------------------

class BoardModel : EBManagedObject,
         BoardModel_name,
         BoardModel_modelWidth,
         BoardModel_modelWidthUnit,
         BoardModel_modelHeight,
         BoardModel_modelHeightUnit,
         BoardModel_zoom,
         BoardModel_modelLimitWidth,
         BoardModel_modelLimitWidthUnit,
         BoardModel_artworkName,
         BoardModel_frontLegendLinesSegments,
         BoardModel_backLegendLinesSegments,
         BoardModel_backLegendLinesBezierPaths,
         BoardModel_frontLegendTextsSegments,
         BoardModel_frontLegendTextsBezierPaths,
         BoardModel_frontLayoutTextsSegments,
         BoardModel_frontLayoutTextsBezierPaths,
         BoardModel_backLegendTextsSegments,
         BoardModel_backLegendTextsBezierPaths,
         BoardModel_backLayoutTextsSegments,
         BoardModel_backLayoutTextsBezierPaths,
         BoardModel_internalBoardsLimitsSegments,
         BoardModel_internalBoardsLimitsBezierPaths,
         BoardModel_drillSegments,
         BoardModel_holesBezierPaths,
         BoardModel_viaShapes,
         BoardModel_viasBezierPaths,
         BoardModel_frontPadArray,
         BoardModel_frontPadsBezierPaths,
         BoardModel_backPadArray,
         BoardModel_backPadsBezierPaths,
         BoardModel_boardLimits,
         BoardModel_boardLimitsBezierPaths,
         BoardModel_backComponentNameSegments,
         BoardModel_backComponentNamesBezierPaths,
         BoardModel_frontComponentNameSegments,
         BoardModel_frontComponentNamesBezierPaths,
         BoardModel_frontComponentValueSegments,
         BoardModel_frontComponentValuesBezierPaths,
         BoardModel_backComponentValueSegments,
         BoardModel_backComponentValuesBezierPaths,
         BoardModel_backTrackSegments,
         BoardModel_backTracksBezierPaths,
         BoardModel_frontTrackSegments,
         BoardModel_frontTracksBezierPaths,
         BoardModel_frontPackagesSegments,
         BoardModel_frontPackagesBezierPaths,
         BoardModel_backPackagesSegments,
         BoardModel_backPackagesBezierPaths,
         BoardModel_instanceCount,
         BoardModel_frontLegendLinesBezierPaths,
         BoardModel_imageForModel,
         BoardModel_imageForInstances {

  //····················································································································
  //   Atomic property: name
  //····················································································································

  let name_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  final func reset_name_toDefaultValue () {
    self.name = ""
  }

  //····················································································································

  final var name : String {
    get { return self.name_property.propval }
    set { self.name_property.setProp (newValue) }
  }

  //····················································································································

  final var name_property_selection : EBSelection <String> { return self.name_property.prop }

  //····················································································································
  //   Atomic property: modelWidth
  //····················································································································

  let modelWidth_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_modelWidth_toDefaultValue () {
    self.modelWidth = 0
  }

  //····················································································································

  final var modelWidth : Int {
    get { return self.modelWidth_property.propval }
    set { self.modelWidth_property.setProp (newValue) }
  }

  //····················································································································

  final var modelWidth_property_selection : EBSelection <Int> { return self.modelWidth_property.prop }

  //····················································································································
  //   Atomic property: modelWidthUnit
  //····················································································································

  let modelWidthUnit_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_modelWidthUnit_toDefaultValue () {
    self.modelWidthUnit = 0
  }

  //····················································································································

  final var modelWidthUnit : Int {
    get { return self.modelWidthUnit_property.propval }
    set { self.modelWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var modelWidthUnit_property_selection : EBSelection <Int> { return self.modelWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: modelHeight
  //····················································································································

  let modelHeight_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_modelHeight_toDefaultValue () {
    self.modelHeight = 0
  }

  //····················································································································

  final var modelHeight : Int {
    get { return self.modelHeight_property.propval }
    set { self.modelHeight_property.setProp (newValue) }
  }

  //····················································································································

  final var modelHeight_property_selection : EBSelection <Int> { return self.modelHeight_property.prop }

  //····················································································································
  //   Atomic property: modelHeightUnit
  //····················································································································

  let modelHeightUnit_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_modelHeightUnit_toDefaultValue () {
    self.modelHeightUnit = 0
  }

  //····················································································································

  final var modelHeightUnit : Int {
    get { return self.modelHeightUnit_property.propval }
    set { self.modelHeightUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var modelHeightUnit_property_selection : EBSelection <Int> { return self.modelHeightUnit_property.prop }

  //····················································································································
  //   Atomic property: zoom
  //····················································································································

  let zoom_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_zoom_toDefaultValue () {
    self.zoom = 0
  }

  //····················································································································

  final var zoom : Int {
    get { return self.zoom_property.propval }
    set { self.zoom_property.setProp (newValue) }
  }

  //····················································································································

  final var zoom_property_selection : EBSelection <Int> { return self.zoom_property.prop }

  //····················································································································
  //   To many property: frontLegendLines
  //····················································································································

  let frontLegendLines_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var frontLegendLines_property_selection : EBSelection < [SegmentEntity] > {
    return self.frontLegendLines_property.prop
  }

  //····················································································································

  var frontLegendLines : [SegmentEntity] {
    get { return self.frontLegendLines_property.propval }
    set { self.frontLegendLines_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backLegendLines
  //····················································································································

  let backLegendLines_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var backLegendLines_property_selection : EBSelection < [SegmentEntity] > {
    return self.backLegendLines_property.prop
  }

  //····················································································································

  var backLegendLines : [SegmentEntity] {
    get { return self.backLegendLines_property.propval }
    set { self.backLegendLines_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontLegendTexts
  //····················································································································

  let frontLegendTexts_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var frontLegendTexts_property_selection : EBSelection < [SegmentEntity] > {
    return self.frontLegendTexts_property.prop
  }

  //····················································································································

  var frontLegendTexts : [SegmentEntity] {
    get { return self.frontLegendTexts_property.propval }
    set { self.frontLegendTexts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontLayoutTexts
  //····················································································································

  let frontLayoutTexts_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var frontLayoutTexts_property_selection : EBSelection < [SegmentEntity] > {
    return self.frontLayoutTexts_property.prop
  }

  //····················································································································

  var frontLayoutTexts : [SegmentEntity] {
    get { return self.frontLayoutTexts_property.propval }
    set { self.frontLayoutTexts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backLegendTexts
  //····················································································································

  let backLegendTexts_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var backLegendTexts_property_selection : EBSelection < [SegmentEntity] > {
    return self.backLegendTexts_property.prop
  }

  //····················································································································

  var backLegendTexts : [SegmentEntity] {
    get { return self.backLegendTexts_property.propval }
    set { self.backLegendTexts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backLayoutTexts
  //····················································································································

  let backLayoutTexts_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var backLayoutTexts_property_selection : EBSelection < [SegmentEntity] > {
    return self.backLayoutTexts_property.prop
  }

  //····················································································································

  var backLayoutTexts : [SegmentEntity] {
    get { return self.backLayoutTexts_property.propval }
    set { self.backLayoutTexts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: internalBoardsLimits
  //····················································································································

  let internalBoardsLimits_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var internalBoardsLimits_property_selection : EBSelection < [SegmentEntity] > {
    return self.internalBoardsLimits_property.prop
  }

  //····················································································································

  var internalBoardsLimits : [SegmentEntity] {
    get { return self.internalBoardsLimits_property.propval }
    set { self.internalBoardsLimits_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: drills
  //····················································································································

  let drills_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var drills_property_selection : EBSelection < [SegmentEntity] > {
    return self.drills_property.prop
  }

  //····················································································································

  var drills : [SegmentEntity] {
    get { return self.drills_property.propval }
    set { self.drills_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: vias
  //····················································································································

  let vias_property = StoredArrayOf_BoardModelVia (usedForSignature: false)

  //····················································································································

  var vias_property_selection : EBSelection < [BoardModelVia] > {
    return self.vias_property.prop
  }

  //····················································································································

  var vias : [BoardModelVia] {
    get { return self.vias_property.propval }
    set { self.vias_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontPads
  //····················································································································

  let frontPads_property = StoredArrayOf_BoardModelPad (usedForSignature: false)

  //····················································································································

  var frontPads_property_selection : EBSelection < [BoardModelPad] > {
    return self.frontPads_property.prop
  }

  //····················································································································

  var frontPads : [BoardModelPad] {
    get { return self.frontPads_property.propval }
    set { self.frontPads_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backPads
  //····················································································································

  let backPads_property = StoredArrayOf_BoardModelPad (usedForSignature: false)

  //····················································································································

  var backPads_property_selection : EBSelection < [BoardModelPad] > {
    return self.backPads_property.prop
  }

  //····················································································································

  var backPads : [BoardModelPad] {
    get { return self.backPads_property.propval }
    set { self.backPads_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: modelLimitWidth
  //····················································································································

  let modelLimitWidth_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_modelLimitWidth_toDefaultValue () {
    self.modelLimitWidth = 0
  }

  //····················································································································

  final var modelLimitWidth : Int {
    get { return self.modelLimitWidth_property.propval }
    set { self.modelLimitWidth_property.setProp (newValue) }
  }

  //····················································································································

  final var modelLimitWidth_property_selection : EBSelection <Int> { return self.modelLimitWidth_property.prop }

  //····················································································································
  //   Atomic property: modelLimitWidthUnit
  //····················································································································

  let modelLimitWidthUnit_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_modelLimitWidthUnit_toDefaultValue () {
    self.modelLimitWidthUnit = 0
  }

  //····················································································································

  final var modelLimitWidthUnit : Int {
    get { return self.modelLimitWidthUnit_property.propval }
    set { self.modelLimitWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var modelLimitWidthUnit_property_selection : EBSelection <Int> { return self.modelLimitWidthUnit_property.prop }

  //····················································································································
  //   To many property: backComponentNames
  //····················································································································

  let backComponentNames_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var backComponentNames_property_selection : EBSelection < [SegmentEntity] > {
    return self.backComponentNames_property.prop
  }

  //····················································································································

  var backComponentNames : [SegmentEntity] {
    get { return self.backComponentNames_property.propval }
    set { self.backComponentNames_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontComponentNames
  //····················································································································

  let frontComponentNames_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var frontComponentNames_property_selection : EBSelection < [SegmentEntity] > {
    return self.frontComponentNames_property.prop
  }

  //····················································································································

  var frontComponentNames : [SegmentEntity] {
    get { return self.frontComponentNames_property.propval }
    set { self.frontComponentNames_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontComponentValues
  //····················································································································

  let frontComponentValues_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var frontComponentValues_property_selection : EBSelection < [SegmentEntity] > {
    return self.frontComponentValues_property.prop
  }

  //····················································································································

  var frontComponentValues : [SegmentEntity] {
    get { return self.frontComponentValues_property.propval }
    set { self.frontComponentValues_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backComponentValues
  //····················································································································

  let backComponentValues_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var backComponentValues_property_selection : EBSelection < [SegmentEntity] > {
    return self.backComponentValues_property.prop
  }

  //····················································································································

  var backComponentValues : [SegmentEntity] {
    get { return self.backComponentValues_property.propval }
    set { self.backComponentValues_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backTracks
  //····················································································································

  let backTracks_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var backTracks_property_selection : EBSelection < [SegmentEntity] > {
    return self.backTracks_property.prop
  }

  //····················································································································

  var backTracks : [SegmentEntity] {
    get { return self.backTracks_property.propval }
    set { self.backTracks_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontTracks
  //····················································································································

  let frontTracks_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var frontTracks_property_selection : EBSelection < [SegmentEntity] > {
    return self.frontTracks_property.prop
  }

  //····················································································································

  var frontTracks : [SegmentEntity] {
    get { return self.frontTracks_property.propval }
    set { self.frontTracks_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: frontPackages
  //····················································································································

  let frontPackages_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var frontPackages_property_selection : EBSelection < [SegmentEntity] > {
    return self.frontPackages_property.prop
  }

  //····················································································································

  var frontPackages : [SegmentEntity] {
    get { return self.frontPackages_property.propval }
    set { self.frontPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: backPackages
  //····················································································································

  let backPackages_property = StoredArrayOf_SegmentEntity (usedForSignature: false)

  //····················································································································

  var backPackages_property_selection : EBSelection < [SegmentEntity] > {
    return self.backPackages_property.prop
  }

  //····················································································································

  var backPackages : [SegmentEntity] {
    get { return self.backPackages_property.propval }
    set { self.backPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: artworkName
  //····················································································································

  let artworkName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  final func reset_artworkName_toDefaultValue () {
    self.artworkName = ""
  }

  //····················································································································

  final var artworkName : String {
    get { return self.artworkName_property.propval }
    set { self.artworkName_property.setProp (newValue) }
  }

  //····················································································································

  final var artworkName_property_selection : EBSelection <String> { return self.artworkName_property.prop }

  //····················································································································
  //   To many property: myInstances
  //····················································································································

  let myInstances_property = StoredArrayOf_MergerBoardInstance (usedForSignature: false)

  //····················································································································

  var myInstances_property_selection : EBSelection < [MergerBoardInstance] > {
    return self.myInstances_property.prop
  }

  //····················································································································

  var myInstances : [MergerBoardInstance] {
    get { return self.myInstances_property.propval }
    set { self.myInstances_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: frontLegendLinesSegments
  //····················································································································

  let frontLegendLinesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontLegendLinesSegments_property.prop
  }

  //····················································································································

  var frontLegendLinesSegments : MergerSegmentArray? {
    switch self.frontLegendLinesSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLegendLinesSegments
  //····················································································································

  let backLegendLinesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backLegendLinesSegments_property.prop
  }

  //····················································································································

  var backLegendLinesSegments : MergerSegmentArray? {
    switch self.backLegendLinesSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLegendLinesBezierPaths
  //····················································································································

  let backLegendLinesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backLegendLinesBezierPaths_property.prop
  }

  //····················································································································

  var backLegendLinesBezierPaths : BezierPathArray? {
    switch self.backLegendLinesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLegendTextsSegments
  //····················································································································

  let frontLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontLegendTextsSegments_property.prop
  }

  //····················································································································

  var frontLegendTextsSegments : MergerSegmentArray? {
    switch self.frontLegendTextsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLegendTextsBezierPaths
  //····················································································································

  let frontLegendTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontLegendTextsBezierPaths_property.prop
  }

  //····················································································································

  var frontLegendTextsBezierPaths : BezierPathArray? {
    switch self.frontLegendTextsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLayoutTextsSegments
  //····················································································································

  let frontLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontLayoutTextsSegments_property.prop
  }

  //····················································································································

  var frontLayoutTextsSegments : MergerSegmentArray? {
    switch self.frontLayoutTextsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLayoutTextsBezierPaths
  //····················································································································

  let frontLayoutTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontLayoutTextsBezierPaths_property.prop
  }

  //····················································································································

  var frontLayoutTextsBezierPaths : BezierPathArray? {
    switch self.frontLayoutTextsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLegendTextsSegments
  //····················································································································

  let backLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backLegendTextsSegments_property.prop
  }

  //····················································································································

  var backLegendTextsSegments : MergerSegmentArray? {
    switch self.backLegendTextsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLegendTextsBezierPaths
  //····················································································································

  let backLegendTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backLegendTextsBezierPaths_property.prop
  }

  //····················································································································

  var backLegendTextsBezierPaths : BezierPathArray? {
    switch self.backLegendTextsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLayoutTextsSegments
  //····················································································································

  let backLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backLayoutTextsSegments_property.prop
  }

  //····················································································································

  var backLayoutTextsSegments : MergerSegmentArray? {
    switch self.backLayoutTextsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backLayoutTextsBezierPaths
  //····················································································································

  let backLayoutTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backLayoutTextsBezierPaths_property.prop
  }

  //····················································································································

  var backLayoutTextsBezierPaths : BezierPathArray? {
    switch self.backLayoutTextsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: internalBoardsLimitsSegments
  //····················································································································

  let internalBoardsLimitsSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var internalBoardsLimitsSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.internalBoardsLimitsSegments_property.prop
  }

  //····················································································································

  var internalBoardsLimitsSegments : MergerSegmentArray? {
    switch self.internalBoardsLimitsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: internalBoardsLimitsBezierPaths
  //····················································································································

  let internalBoardsLimitsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var internalBoardsLimitsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.internalBoardsLimitsBezierPaths_property.prop
  }

  //····················································································································

  var internalBoardsLimitsBezierPaths : BezierPathArray? {
    switch self.internalBoardsLimitsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: drillSegments
  //····················································································································

  let drillSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var drillSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.drillSegments_property.prop
  }

  //····················································································································

  var drillSegments : MergerSegmentArray? {
    switch self.drillSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: holesBezierPaths
  //····················································································································

  let holesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var holesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.holesBezierPaths_property.prop
  }

  //····················································································································

  var holesBezierPaths : BezierPathArray? {
    switch self.holesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viaShapes
  //····················································································································

  let viaShapes_property = EBTransientProperty_MergerViaShapeArray ()

  //····················································································································

  var viaShapes_property_selection : EBSelection <MergerViaShapeArray> {
    return self.viaShapes_property.prop
  }

  //····················································································································

  var viaShapes : MergerViaShapeArray? {
    switch self.viaShapes_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viasBezierPaths
  //····················································································································

  let viasBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var viasBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.viasBezierPaths_property.prop
  }

  //····················································································································

  var viasBezierPaths : BezierPathArray? {
    switch self.viasBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontPadArray
  //····················································································································

  let frontPadArray_property = EBTransientProperty_MergerPadArray ()

  //····················································································································

  var frontPadArray_property_selection : EBSelection <MergerPadArray> {
    return self.frontPadArray_property.prop
  }

  //····················································································································

  var frontPadArray : MergerPadArray? {
    switch self.frontPadArray_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontPadsBezierPaths
  //····················································································································

  let frontPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontPadsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontPadsBezierPaths_property.prop
  }

  //····················································································································

  var frontPadsBezierPaths : BezierPathArray? {
    switch self.frontPadsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backPadArray
  //····················································································································

  let backPadArray_property = EBTransientProperty_MergerPadArray ()

  //····················································································································

  var backPadArray_property_selection : EBSelection <MergerPadArray> {
    return self.backPadArray_property.prop
  }

  //····················································································································

  var backPadArray : MergerPadArray? {
    switch self.backPadArray_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backPadsBezierPaths
  //····················································································································

  let backPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backPadsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backPadsBezierPaths_property.prop
  }

  //····················································································································

  var backPadsBezierPaths : BezierPathArray? {
    switch self.backPadsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardLimits
  //····················································································································

  let boardLimits_property = EBTransientProperty_MergerBoardLimits ()

  //····················································································································

  var boardLimits_property_selection : EBSelection <MergerBoardLimits> {
    return self.boardLimits_property.prop
  }

  //····················································································································

  var boardLimits : MergerBoardLimits? {
    switch self.boardLimits_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardLimitsBezierPaths
  //····················································································································

  let boardLimitsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var boardLimitsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.boardLimitsBezierPaths_property.prop
  }

  //····················································································································

  var boardLimitsBezierPaths : BezierPathArray? {
    switch self.boardLimitsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backComponentNameSegments
  //····················································································································

  let backComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backComponentNameSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backComponentNameSegments_property.prop
  }

  //····················································································································

  var backComponentNameSegments : MergerSegmentArray? {
    switch self.backComponentNameSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backComponentNamesBezierPaths
  //····················································································································

  let backComponentNamesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backComponentNamesBezierPaths_property.prop
  }

  //····················································································································

  var backComponentNamesBezierPaths : BezierPathArray? {
    switch self.backComponentNamesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontComponentNameSegments
  //····················································································································

  let frontComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontComponentNameSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontComponentNameSegments_property.prop
  }

  //····················································································································

  var frontComponentNameSegments : MergerSegmentArray? {
    switch self.frontComponentNameSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontComponentNamesBezierPaths
  //····················································································································

  let frontComponentNamesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontComponentNamesBezierPaths_property.prop
  }

  //····················································································································

  var frontComponentNamesBezierPaths : BezierPathArray? {
    switch self.frontComponentNamesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontComponentValueSegments
  //····················································································································

  let frontComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontComponentValueSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontComponentValueSegments_property.prop
  }

  //····················································································································

  var frontComponentValueSegments : MergerSegmentArray? {
    switch self.frontComponentValueSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontComponentValuesBezierPaths
  //····················································································································

  let frontComponentValuesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontComponentValuesBezierPaths_property.prop
  }

  //····················································································································

  var frontComponentValuesBezierPaths : BezierPathArray? {
    switch self.frontComponentValuesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backComponentValueSegments
  //····················································································································

  let backComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backComponentValueSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backComponentValueSegments_property.prop
  }

  //····················································································································

  var backComponentValueSegments : MergerSegmentArray? {
    switch self.backComponentValueSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backComponentValuesBezierPaths
  //····················································································································

  let backComponentValuesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backComponentValuesBezierPaths_property.prop
  }

  //····················································································································

  var backComponentValuesBezierPaths : BezierPathArray? {
    switch self.backComponentValuesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backTrackSegments
  //····················································································································

  let backTrackSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backTrackSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backTrackSegments_property.prop
  }

  //····················································································································

  var backTrackSegments : MergerSegmentArray? {
    switch self.backTrackSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backTracksBezierPaths
  //····················································································································

  let backTracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backTracksBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backTracksBezierPaths_property.prop
  }

  //····················································································································

  var backTracksBezierPaths : BezierPathArray? {
    switch self.backTracksBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontTrackSegments
  //····················································································································

  let frontTrackSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontTrackSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontTrackSegments_property.prop
  }

  //····················································································································

  var frontTrackSegments : MergerSegmentArray? {
    switch self.frontTrackSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontTracksBezierPaths
  //····················································································································

  let frontTracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontTracksBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontTracksBezierPaths_property.prop
  }

  //····················································································································

  var frontTracksBezierPaths : BezierPathArray? {
    switch self.frontTracksBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontPackagesSegments
  //····················································································································

  let frontPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var frontPackagesSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.frontPackagesSegments_property.prop
  }

  //····················································································································

  var frontPackagesSegments : MergerSegmentArray? {
    switch self.frontPackagesSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontPackagesBezierPaths
  //····················································································································

  let frontPackagesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontPackagesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontPackagesBezierPaths_property.prop
  }

  //····················································································································

  var frontPackagesBezierPaths : BezierPathArray? {
    switch self.frontPackagesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backPackagesSegments
  //····················································································································

  let backPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()

  //····················································································································

  var backPackagesSegments_property_selection : EBSelection <MergerSegmentArray> {
    return self.backPackagesSegments_property.prop
  }

  //····················································································································

  var backPackagesSegments : MergerSegmentArray? {
    switch self.backPackagesSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backPackagesBezierPaths
  //····················································································································

  let backPackagesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backPackagesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.backPackagesBezierPaths_property.prop
  }

  //····················································································································

  var backPackagesBezierPaths : BezierPathArray? {
    switch self.backPackagesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: instanceCount
  //····················································································································

  let instanceCount_property = EBTransientProperty_Int ()

  //····················································································································

  var instanceCount_property_selection : EBSelection <Int> {
    return self.instanceCount_property.prop
  }

  //····················································································································

  var instanceCount : Int? {
    switch self.instanceCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontLegendLinesBezierPaths
  //····················································································································

  let frontLegendLinesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    return self.frontLegendLinesBezierPaths_property.prop
  }

  //····················································································································

  var frontLegendLinesBezierPaths : BezierPathArray? {
    switch self.frontLegendLinesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: imageForModel
  //····················································································································

  let imageForModel_property = EBTransientProperty_EBShape ()

  //····················································································································

  var imageForModel_property_selection : EBSelection <EBShape> {
    return self.imageForModel_property.prop
  }

  //····················································································································

  var imageForModel : EBShape? {
    switch self.imageForModel_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: imageForInstances
  //····················································································································

  let imageForInstances_property = EBTransientProperty_EBShape ()

  //····················································································································

  var imageForInstances_property_selection : EBSelection <EBShape> {
    return self.imageForInstances_property.prop
  }

  //····················································································································

  var imageForInstances : EBShape? {
    switch self.imageForInstances_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- Atomic property: name
    self.name_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: modelWidth
    self.modelWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: modelWidthUnit
    self.modelWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: modelHeight
    self.modelHeight_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: modelHeightUnit
    self.modelHeightUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: zoom
    self.zoom_property.ebUndoManager = self.ebUndoManager
  //--- To many property: frontLegendLines (no option)
    self.frontLegendLines_property.ebUndoManager = self.ebUndoManager
  //--- To many property: backLegendLines (no option)
    self.backLegendLines_property.ebUndoManager = self.ebUndoManager
  //--- To many property: frontLegendTexts (no option)
    self.frontLegendTexts_property.ebUndoManager = self.ebUndoManager
  //--- To many property: frontLayoutTexts (no option)
    self.frontLayoutTexts_property.ebUndoManager = self.ebUndoManager
  //--- To many property: backLegendTexts (no option)
    self.backLegendTexts_property.ebUndoManager = self.ebUndoManager
  //--- To many property: backLayoutTexts (no option)
    self.backLayoutTexts_property.ebUndoManager = self.ebUndoManager
  //--- To many property: internalBoardsLimits (no option)
    self.internalBoardsLimits_property.ebUndoManager = self.ebUndoManager
  //--- To many property: drills (no option)
    self.drills_property.ebUndoManager = self.ebUndoManager
  //--- To many property: vias (no option)
    self.vias_property.ebUndoManager = self.ebUndoManager
  //--- To many property: frontPads (no option)
    self.frontPads_property.ebUndoManager = self.ebUndoManager
  //--- To many property: backPads (no option)
    self.backPads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: modelLimitWidth
    self.modelLimitWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: modelLimitWidthUnit
    self.modelLimitWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- To many property: backComponentNames (no option)
    self.backComponentNames_property.ebUndoManager = self.ebUndoManager
  //--- To many property: frontComponentNames (no option)
    self.frontComponentNames_property.ebUndoManager = self.ebUndoManager
  //--- To many property: frontComponentValues (no option)
    self.frontComponentValues_property.ebUndoManager = self.ebUndoManager
  //--- To many property: backComponentValues (no option)
    self.backComponentValues_property.ebUndoManager = self.ebUndoManager
  //--- To many property: backTracks (no option)
    self.backTracks_property.ebUndoManager = self.ebUndoManager
  //--- To many property: frontTracks (no option)
    self.frontTracks_property.ebUndoManager = self.ebUndoManager
  //--- To many property: frontPackages (no option)
    self.frontPackages_property.ebUndoManager = self.ebUndoManager
  //--- To many property: backPackages (no option)
    self.backPackages_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: artworkName
    self.artworkName_property.ebUndoManager = self.ebUndoManager
  //--- To many property: myInstances (has opposite relationship)
    self.myInstances_property.ebUndoManager = self.ebUndoManager
    self.myInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.myModel_property.setProp (me) } },
      resetter: { inObject in inObject.myModel_property.setProp (nil) }
    )
  //--- Atomic property: frontLegendLinesSegments
    self.frontLegendLinesSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLines_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontLegendLines_property_selection, unwSelf.frontLegendLines_property_selection, unwSelf.frontLegendLines_property_selection, unwSelf.frontLegendLines_property_selection, unwSelf.frontLegendLines_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontLegendLinesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendLines_property.addEBObserverOf_x1 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.addEBObserverOf_y1 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.addEBObserverOf_x2 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.addEBObserverOf_y2 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.addEBObserverOf_width (self.frontLegendLinesSegments_property)
  //--- Atomic property: backLegendLinesSegments
    self.backLegendLinesSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLines_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backLegendLines_property_selection, unwSelf.backLegendLines_property_selection, unwSelf.backLegendLines_property_selection, unwSelf.backLegendLines_property_selection, unwSelf.backLegendLines_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backLegendLinesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendLines_property.addEBObserverOf_x1 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.addEBObserverOf_y1 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.addEBObserverOf_x2 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.addEBObserverOf_y2 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.addEBObserverOf_width (self.backLegendLinesSegments_property)
  //--- Atomic property: backLegendLinesBezierPaths
    self.backLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backLegendLinesSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backLegendLinesSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_backLegendLinesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendLinesSegments_property.addEBObserver (self.backLegendLinesBezierPaths_property)
  //--- Atomic property: frontLegendTextsSegments
    self.frontLegendTextsSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontLegendTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTexts_property.addEBObserverOf_x1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_y1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_x2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_y2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_width (self.frontLegendTextsSegments_property)
  //--- Atomic property: frontLegendTextsBezierPaths
    self.frontLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontLegendTextsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_frontLegendTextsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTextsSegments_property.addEBObserver (self.frontLegendTextsBezierPaths_property)
  //--- Atomic property: frontLayoutTextsSegments
    self.frontLayoutTextsSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontLayoutTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTexts_property.addEBObserverOf_x1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_y1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_x2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_y2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_width (self.frontLayoutTextsSegments_property)
  //--- Atomic property: frontLayoutTextsBezierPaths
    self.frontLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontLayoutTextsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_frontLayoutTextsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTextsSegments_property.addEBObserver (self.frontLayoutTextsBezierPaths_property)
  //--- Atomic property: backLegendTextsSegments
    self.backLegendTextsSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backLegendTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendTexts_property.addEBObserverOf_x1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_y1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_x2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_y2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_width (self.backLegendTextsSegments_property)
  //--- Atomic property: backLegendTextsBezierPaths
    self.backLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backLegendTextsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_backLegendTextsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendTextsSegments_property.addEBObserver (self.backLegendTextsBezierPaths_property)
  //--- Atomic property: backLayoutTextsSegments
    self.backLayoutTextsSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backLayoutTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTexts_property.addEBObserverOf_x1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_y1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_x2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_y2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_width (self.backLayoutTextsSegments_property)
  //--- Atomic property: backLayoutTextsBezierPaths
    self.backLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backLayoutTextsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_backLayoutTextsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTextsSegments_property.addEBObserver (self.backLayoutTextsBezierPaths_property)
  //--- Atomic property: internalBoardsLimitsSegments
    self.internalBoardsLimitsSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.internalBoardsLimits_property_selection.kind ()
        kind &= unwSelf.internalBoardsLimits_property_selection.kind ()
        kind &= unwSelf.internalBoardsLimits_property_selection.kind ()
        kind &= unwSelf.internalBoardsLimits_property_selection.kind ()
        kind &= unwSelf.internalBoardsLimits_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.internalBoardsLimits_property_selection, unwSelf.internalBoardsLimits_property_selection, unwSelf.internalBoardsLimits_property_selection, unwSelf.internalBoardsLimits_property_selection, unwSelf.internalBoardsLimits_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_internalBoardsLimitsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.internalBoardsLimits_property.addEBObserverOf_x1 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.addEBObserverOf_y1 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.addEBObserverOf_x2 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.addEBObserverOf_y2 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.addEBObserverOf_width (self.internalBoardsLimitsSegments_property)
  //--- Atomic property: internalBoardsLimitsBezierPaths
    self.internalBoardsLimitsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.internalBoardsLimitsSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.internalBoardsLimitsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_internalBoardsLimitsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.internalBoardsLimitsSegments_property.addEBObserver (self.internalBoardsLimitsBezierPaths_property)
  //--- Atomic property: drillSegments
    self.drillSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.drills_property_selection.kind ()
        kind &= unwSelf.drills_property_selection.kind ()
        kind &= unwSelf.drills_property_selection.kind ()
        kind &= unwSelf.drills_property_selection.kind ()
        kind &= unwSelf.drills_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.drills_property_selection, unwSelf.drills_property_selection, unwSelf.drills_property_selection, unwSelf.drills_property_selection, unwSelf.drills_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_drillSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.drills_property.addEBObserverOf_x1 (self.drillSegments_property)
    self.drills_property.addEBObserverOf_y1 (self.drillSegments_property)
    self.drills_property.addEBObserverOf_x2 (self.drillSegments_property)
    self.drills_property.addEBObserverOf_y2 (self.drillSegments_property)
    self.drills_property.addEBObserverOf_width (self.drillSegments_property)
  //--- Atomic property: holesBezierPaths
    self.holesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.drillSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.drillSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_holesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.drillSegments_property.addEBObserver (self.holesBezierPaths_property)
  //--- Atomic property: viaShapes
    self.viaShapes_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.vias_property_selection, unwSelf.vias_property_selection, unwSelf.vias_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_BoardModel_viaShapes (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.vias_property.addEBObserverOf_x (self.viaShapes_property)
    self.vias_property.addEBObserverOf_y (self.viaShapes_property)
    self.vias_property.addEBObserverOf_padDiameter (self.viaShapes_property)
  //--- Atomic property: viasBezierPaths
    self.viasBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.viaShapes_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.viaShapes_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_viasBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viaShapes_property.addEBObserver (self.viasBezierPaths_property)
  //--- Atomic property: frontPadArray
    self.frontPadArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontPads_property_selection, unwSelf.frontPads_property_selection, unwSelf.frontPads_property_selection, unwSelf.frontPads_property_selection, unwSelf.frontPads_property_selection, unwSelf.frontPads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_BoardModel_frontPadArray (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPads_property.addEBObserverOf_x (self.frontPadArray_property)
    self.frontPads_property.addEBObserverOf_y (self.frontPadArray_property)
    self.frontPads_property.addEBObserverOf_width (self.frontPadArray_property)
    self.frontPads_property.addEBObserverOf_height (self.frontPadArray_property)
    self.frontPads_property.addEBObserverOf_shape (self.frontPadArray_property)
    self.frontPads_property.addEBObserverOf_rotation (self.frontPadArray_property)
  //--- Atomic property: frontPadsBezierPaths
    self.frontPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontPadArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontPadArray_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_frontPadsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPadArray_property.addEBObserver (self.frontPadsBezierPaths_property)
  //--- Atomic property: backPadArray
    self.backPadArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backPads_property_selection, unwSelf.backPads_property_selection, unwSelf.backPads_property_selection, unwSelf.backPads_property_selection, unwSelf.backPads_property_selection, unwSelf.backPads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_BoardModel_backPadArray (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPads_property.addEBObserverOf_x (self.backPadArray_property)
    self.backPads_property.addEBObserverOf_y (self.backPadArray_property)
    self.backPads_property.addEBObserverOf_width (self.backPadArray_property)
    self.backPads_property.addEBObserverOf_height (self.backPadArray_property)
    self.backPads_property.addEBObserverOf_shape (self.backPadArray_property)
    self.backPads_property.addEBObserverOf_rotation (self.backPadArray_property)
  //--- Atomic property: backPadsBezierPaths
    self.backPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backPadArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backPadArray_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_backPadsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPadArray_property.addEBObserver (self.backPadsBezierPaths_property)
  //--- Atomic property: boardLimits
    self.boardLimits_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        kind &= unwSelf.modelLimitWidth_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBoardLimits_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection, unwSelf.modelLimitWidth_property_selection, g_Preferences!.mergerModelViewDisplayBoardLimits_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_BoardModel_boardLimits (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.modelWidth_property.addEBObserver (self.boardLimits_property)
    self.modelHeight_property.addEBObserver (self.boardLimits_property)
    self.modelLimitWidth_property.addEBObserver (self.boardLimits_property)
    g_Preferences?.mergerModelViewDisplayBoardLimits_property.addEBObserver (self.boardLimits_property)
  //--- Atomic property: boardLimitsBezierPaths
    self.boardLimitsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        kind &= unwSelf.modelLimitWidth_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection, unwSelf.modelLimitWidth_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_BoardModel_boardLimitsBezierPaths (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.modelWidth_property.addEBObserver (self.boardLimitsBezierPaths_property)
    self.modelHeight_property.addEBObserver (self.boardLimitsBezierPaths_property)
    self.modelLimitWidth_property.addEBObserver (self.boardLimitsBezierPaths_property)
  //--- Atomic property: backComponentNameSegments
    self.backComponentNameSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentNames_property.addEBObserverOf_x1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_y1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_x2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_y2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_width (self.backComponentNameSegments_property)
  //--- Atomic property: backComponentNamesBezierPaths
    self.backComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backComponentNameSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backComponentNameSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_backComponentNamesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentNameSegments_property.addEBObserver (self.backComponentNamesBezierPaths_property)
  //--- Atomic property: frontComponentNameSegments
    self.frontComponentNameSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNames_property.addEBObserverOf_x1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_y1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_x2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_y2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_width (self.frontComponentNameSegments_property)
  //--- Atomic property: frontComponentNamesBezierPaths
    self.frontComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontComponentNameSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontComponentNameSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_frontComponentNamesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNameSegments_property.addEBObserver (self.frontComponentNamesBezierPaths_property)
  //--- Atomic property: frontComponentValueSegments
    self.frontComponentValueSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontComponentValueSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValues_property.addEBObserverOf_x1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_y1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_x2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_y2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_width (self.frontComponentValueSegments_property)
  //--- Atomic property: frontComponentValuesBezierPaths
    self.frontComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontComponentValueSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontComponentValueSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_frontComponentValuesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValueSegments_property.addEBObserver (self.frontComponentValuesBezierPaths_property)
  //--- Atomic property: backComponentValueSegments
    self.backComponentValueSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backComponentValueSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentValues_property.addEBObserverOf_x1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_y1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_x2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_y2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_width (self.backComponentValueSegments_property)
  //--- Atomic property: backComponentValuesBezierPaths
    self.backComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backComponentValueSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backComponentValueSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_backComponentValuesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentValueSegments_property.addEBObserver (self.backComponentValuesBezierPaths_property)
  //--- Atomic property: backTrackSegments
    self.backTrackSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backTracks_property.addEBObserverOf_x1 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_y1 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_x2 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_y2 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_width (self.backTrackSegments_property)
  //--- Atomic property: backTracksBezierPaths
    self.backTracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backTrackSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backTrackSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_backTracksBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backTrackSegments_property.addEBObserver (self.backTracksBezierPaths_property)
  //--- Atomic property: frontTrackSegments
    self.frontTrackSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontTracks_property.addEBObserverOf_x1 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_y1 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_x2 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_y2 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_width (self.frontTrackSegments_property)
  //--- Atomic property: frontTracksBezierPaths
    self.frontTracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontTrackSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontTrackSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_frontTracksBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontTrackSegments_property.addEBObserver (self.frontTracksBezierPaths_property)
  //--- Atomic property: frontPackagesSegments
    self.frontPackagesSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_frontPackagesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPackages_property.addEBObserverOf_x1 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_y1 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_x2 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_y2 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_width (self.frontPackagesSegments_property)
  //--- Atomic property: frontPackagesBezierPaths
    self.frontPackagesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontPackagesSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontPackagesSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_frontPackagesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPackagesSegments_property.addEBObserver (self.frontPackagesBezierPaths_property)
  //--- Atomic property: backPackagesSegments
    self.backPackagesSegments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardModel_backPackagesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPackages_property.addEBObserverOf_x1 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_y1 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_x2 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_y2 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_width (self.backPackagesSegments_property)
  //--- Atomic property: backPackagesBezierPaths
    self.backPackagesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backPackagesSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.backPackagesSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_backPackagesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPackagesSegments_property.addEBObserver (self.backPackagesBezierPaths_property)
  //--- Atomic property: instanceCount
    self.instanceCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.myInstances_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.myInstances_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_instanceCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.myInstances_property.addEBObserver (self.instanceCount_property)
  //--- Atomic property: frontLegendLinesBezierPaths
    self.frontLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontLegendLinesSegments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.frontLegendLinesSegments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardModel_frontLegendLinesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendLinesSegments_property.addEBObserver (self.frontLegendLinesBezierPaths_property)
  //--- Atomic property: imageForModel
    self.imageForModel_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackground_property_selection.kind ()
        kind &= unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        kind &= unwSelf.boardLimitsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBoardLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBoardLimits_property_selection.kind ()
        kind &= unwSelf.internalBoardsLimitsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayInternalBoardsLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerColorInternalBoardsLimits_property_selection.kind ()
        kind &= unwSelf.frontTracksBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontTracks_property_selection.kind ()
        kind &= unwSelf.backTracksBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackTracks_property_selection.kind ()
        kind &= unwSelf.frontPadsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontPads_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontPads_property_selection.kind ()
        kind &= unwSelf.backPadsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackPads_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackPads_property_selection.kind ()
        kind &= unwSelf.viasBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayVias_property_selection.kind ()
        kind &= g_Preferences!.mergerColorVias_property_selection.kind ()
        kind &= unwSelf.holesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayHoles_property_selection.kind ()
        kind &= g_Preferences!.mergerColorHoles_property_selection.kind ()
        kind &= unwSelf.frontLegendLinesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLinesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backComponentNamesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNamesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentValuesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValuesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackComponentValues_property_selection.kind ()
        kind &= unwSelf.frontPackagesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontPackages_property_selection.kind ()
        kind &= unwSelf.backPackagesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackPackages_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (g_Preferences!.mergerColorBackground_property_selection, unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection, unwSelf.boardLimitsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBoardLimits_property_selection, g_Preferences!.mergerColorBoardLimits_property_selection, unwSelf.internalBoardsLimitsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayInternalBoardsLimits_property_selection, g_Preferences!.mergerColorInternalBoardsLimits_property_selection, unwSelf.frontTracksBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontTracks_property_selection, g_Preferences!.mergerColorFrontTracks_property_selection, unwSelf.backTracksBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackTracks_property_selection, g_Preferences!.mergerColorBackTracks_property_selection, unwSelf.frontPadsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontPads_property_selection, g_Preferences!.mergerColorFrontPads_property_selection, unwSelf.backPadsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackPads_property_selection, g_Preferences!.mergerColorBackPads_property_selection, unwSelf.viasBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayVias_property_selection, g_Preferences!.mergerColorVias_property_selection, unwSelf.holesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayHoles_property_selection, g_Preferences!.mergerColorHoles_property_selection, unwSelf.frontLegendLinesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontLegendLines_property_selection, g_Preferences!.mergerColorFrontLegendLines_property_selection, unwSelf.backLegendLinesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackLegendLines_property_selection, g_Preferences!.mergerColorBackLegendLines_property_selection, unwSelf.frontLegendTextsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontLegendTexts_property_selection, g_Preferences!.mergerColorFrontLegendTexts_property_selection, unwSelf.frontLayoutTextsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontLayoutTexts_property_selection, g_Preferences!.mergerColorFrontLayoutTexts_property_selection, unwSelf.backLegendTextsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackLegendTexts_property_selection, g_Preferences!.mergerColorBackLegendTexts_property_selection, unwSelf.backLayoutTextsBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackLayoutTexts_property_selection, g_Preferences!.mergerColorBackLayoutTexts_property_selection, unwSelf.backComponentNamesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackComponentNames_property_selection, g_Preferences!.mergerColorBackComponentNames_property_selection, unwSelf.frontComponentNamesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontComponentNames_property_selection, g_Preferences!.mergerColorFrontComponentNames_property_selection, unwSelf.frontComponentValuesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontComponentValues_property_selection, g_Preferences!.mergerColorFrontComponentValues_property_selection, unwSelf.backComponentValuesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackComponentValues_property_selection, g_Preferences!.mergerColorBackComponentValues_property_selection, unwSelf.frontPackagesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayFrontPackages_property_selection, g_Preferences!.mergerColorFrontPackages_property_selection, unwSelf.backPackagesBezierPaths_property_selection, g_Preferences!.mergerModelViewDisplayBackPackages_property_selection, g_Preferences!.mergerColorBackPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16), .single (let v17), .single (let v18), .single (let v19), .single (let v20), .single (let v21), .single (let v22), .single (let v23), .single (let v24), .single (let v25), .single (let v26), .single (let v27), .single (let v28), .single (let v29), .single (let v30), .single (let v31), .single (let v32), .single (let v33), .single (let v34), .single (let v35), .single (let v36), .single (let v37), .single (let v38), .single (let v39), .single (let v40), .single (let v41), .single (let v42), .single (let v43), .single (let v44), .single (let v45), .single (let v46), .single (let v47), .single (let v48), .single (let v49), .single (let v50), .single (let v51), .single (let v52), .single (let v53), .single (let v54), .single (let v55), .single (let v56), .single (let v57), .single (let v58), .single (let v59), .single (let v60), .single (let v61), .single (let v62)) :
            return .single (transient_BoardModel_imageForModel (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    g_Preferences?.mergerColorBackground_property.addEBObserver (self.imageForModel_property)
    self.modelWidth_property.addEBObserver (self.imageForModel_property)
    self.modelHeight_property.addEBObserver (self.imageForModel_property)
    self.boardLimitsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBoardLimits_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBoardLimits_property.addEBObserver (self.imageForModel_property)
    self.internalBoardsLimitsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayInternalBoardsLimits_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorInternalBoardsLimits_property.addEBObserver (self.imageForModel_property)
    self.frontTracksBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontTracks_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontTracks_property.addEBObserver (self.imageForModel_property)
    self.backTracksBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackTracks_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackTracks_property.addEBObserver (self.imageForModel_property)
    self.frontPadsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontPads_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontPads_property.addEBObserver (self.imageForModel_property)
    self.backPadsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackPads_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackPads_property.addEBObserver (self.imageForModel_property)
    self.viasBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayVias_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorVias_property.addEBObserver (self.imageForModel_property)
    self.holesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayHoles_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorHoles_property.addEBObserver (self.imageForModel_property)
    self.frontLegendLinesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontLegendLines_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontLegendLines_property.addEBObserver (self.imageForModel_property)
    self.backLegendLinesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackLegendLines_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackLegendLines_property.addEBObserver (self.imageForModel_property)
    self.frontLegendTextsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontLegendTexts_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.addEBObserver (self.imageForModel_property)
    self.frontLayoutTextsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontLayoutTexts_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.addEBObserver (self.imageForModel_property)
    self.backLegendTextsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackLegendTexts_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackLegendTexts_property.addEBObserver (self.imageForModel_property)
    self.backLayoutTextsBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackLayoutTexts_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.addEBObserver (self.imageForModel_property)
    self.backComponentNamesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackComponentNames_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackComponentNames_property.addEBObserver (self.imageForModel_property)
    self.frontComponentNamesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontComponentNames_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontComponentNames_property.addEBObserver (self.imageForModel_property)
    self.frontComponentValuesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontComponentValues_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontComponentValues_property.addEBObserver (self.imageForModel_property)
    self.backComponentValuesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackComponentValues_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackComponentValues_property.addEBObserver (self.imageForModel_property)
    self.frontPackagesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontPackages_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontPackages_property.addEBObserver (self.imageForModel_property)
    self.backPackagesBezierPaths_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackPackages_property.addEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackPackages_property.addEBObserver (self.imageForModel_property)
  //--- Atomic property: imageForInstances
    self.imageForInstances_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackground_property_selection.kind ()
        kind &= unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        kind &= unwSelf.frontTracksBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontTracks_property_selection.kind ()
        kind &= unwSelf.backTracksBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackTracks_property_selection.kind ()
        kind &= unwSelf.internalBoardsLimitsBezierPaths_property_selection.kind ()
        kind &= unwSelf.boardLimitsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayInternalBoardsLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerColorInternalBoardsLimits_property_selection.kind ()
        kind &= unwSelf.frontPadsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontPads_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontPads_property_selection.kind ()
        kind &= unwSelf.backPadsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackPads_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackPads_property_selection.kind ()
        kind &= unwSelf.viasBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayVias_property_selection.kind ()
        kind &= g_Preferences!.mergerColorVias_property_selection.kind ()
        kind &= unwSelf.holesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayHoles_property_selection.kind ()
        kind &= g_Preferences!.mergerColorHoles_property_selection.kind ()
        kind &= unwSelf.frontLegendLinesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLinesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backComponentNamesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNamesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentValuesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValuesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackComponentValues_property_selection.kind ()
        kind &= unwSelf.frontPackagesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontPackages_property_selection.kind ()
        kind &= unwSelf.backPackagesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackPackages_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (g_Preferences!.mergerColorBackground_property_selection, unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection, unwSelf.frontTracksBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontTracks_property_selection, g_Preferences!.mergerColorFrontTracks_property_selection, unwSelf.backTracksBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackTracks_property_selection, g_Preferences!.mergerColorBackTracks_property_selection, unwSelf.internalBoardsLimitsBezierPaths_property_selection, unwSelf.boardLimitsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayInternalBoardsLimits_property_selection, g_Preferences!.mergerColorInternalBoardsLimits_property_selection, unwSelf.frontPadsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontPads_property_selection, g_Preferences!.mergerColorFrontPads_property_selection, unwSelf.backPadsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackPads_property_selection, g_Preferences!.mergerColorBackPads_property_selection, unwSelf.viasBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayVias_property_selection, g_Preferences!.mergerColorVias_property_selection, unwSelf.holesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayHoles_property_selection, g_Preferences!.mergerColorHoles_property_selection, unwSelf.frontLegendLinesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontLegendLines_property_selection, g_Preferences!.mergerColorFrontLegendLines_property_selection, unwSelf.backLegendLinesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackLegendLines_property_selection, g_Preferences!.mergerColorBackLegendLines_property_selection, unwSelf.frontLegendTextsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontLegendTexts_property_selection, g_Preferences!.mergerColorFrontLegendTexts_property_selection, unwSelf.frontLayoutTextsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontLayoutTexts_property_selection, g_Preferences!.mergerColorFrontLayoutTexts_property_selection, unwSelf.backLegendTextsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackLegendTexts_property_selection, g_Preferences!.mergerColorBackLegendTexts_property_selection, unwSelf.backLayoutTextsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackLayoutTexts_property_selection, g_Preferences!.mergerColorBackLayoutTexts_property_selection, unwSelf.backComponentNamesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackComponentNames_property_selection, g_Preferences!.mergerColorBackComponentNames_property_selection, unwSelf.frontComponentNamesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontComponentNames_property_selection, g_Preferences!.mergerColorFrontComponentNames_property_selection, unwSelf.frontComponentValuesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontComponentValues_property_selection, g_Preferences!.mergerColorFrontComponentValues_property_selection, unwSelf.backComponentValuesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackComponentValues_property_selection, g_Preferences!.mergerColorBackComponentValues_property_selection, unwSelf.frontPackagesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontPackages_property_selection, g_Preferences!.mergerColorFrontPackages_property_selection, unwSelf.backPackagesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackPackages_property_selection, g_Preferences!.mergerColorBackPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16), .single (let v17), .single (let v18), .single (let v19), .single (let v20), .single (let v21), .single (let v22), .single (let v23), .single (let v24), .single (let v25), .single (let v26), .single (let v27), .single (let v28), .single (let v29), .single (let v30), .single (let v31), .single (let v32), .single (let v33), .single (let v34), .single (let v35), .single (let v36), .single (let v37), .single (let v38), .single (let v39), .single (let v40), .single (let v41), .single (let v42), .single (let v43), .single (let v44), .single (let v45), .single (let v46), .single (let v47), .single (let v48), .single (let v49), .single (let v50), .single (let v51), .single (let v52), .single (let v53), .single (let v54), .single (let v55), .single (let v56), .single (let v57), .single (let v58), .single (let v59), .single (let v60)) :
            return .single (transient_BoardModel_imageForInstances (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    g_Preferences?.mergerColorBackground_property.addEBObserver (self.imageForInstances_property)
    self.modelWidth_property.addEBObserver (self.imageForInstances_property)
    self.modelHeight_property.addEBObserver (self.imageForInstances_property)
    self.frontTracksBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontTracks_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontTracks_property.addEBObserver (self.imageForInstances_property)
    self.backTracksBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackTracks_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackTracks_property.addEBObserver (self.imageForInstances_property)
    self.internalBoardsLimitsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    self.boardLimitsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayInternalBoardsLimits_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorInternalBoardsLimits_property.addEBObserver (self.imageForInstances_property)
    self.frontPadsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontPads_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontPads_property.addEBObserver (self.imageForInstances_property)
    self.backPadsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackPads_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackPads_property.addEBObserver (self.imageForInstances_property)
    self.viasBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayVias_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorVias_property.addEBObserver (self.imageForInstances_property)
    self.holesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayHoles_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorHoles_property.addEBObserver (self.imageForInstances_property)
    self.frontLegendLinesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendLines_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLegendLines_property.addEBObserver (self.imageForInstances_property)
    self.backLegendLinesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendLines_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLegendLines_property.addEBObserver (self.imageForInstances_property)
    self.frontLegendTextsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendTexts_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.addEBObserver (self.imageForInstances_property)
    self.frontLayoutTextsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLayoutTexts_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.addEBObserver (self.imageForInstances_property)
    self.backLegendTextsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendTexts_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLegendTexts_property.addEBObserver (self.imageForInstances_property)
    self.backLayoutTextsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLayoutTexts_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.addEBObserver (self.imageForInstances_property)
    self.backComponentNamesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentNames_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackComponentNames_property.addEBObserver (self.imageForInstances_property)
    self.frontComponentNamesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentNames_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontComponentNames_property.addEBObserver (self.imageForInstances_property)
    self.frontComponentValuesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentValues_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontComponentValues_property.addEBObserver (self.imageForInstances_property)
    self.backComponentValuesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentValues_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackComponentValues_property.addEBObserver (self.imageForInstances_property)
    self.frontPackagesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontPackages_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontPackages_property.addEBObserver (self.imageForInstances_property)
    self.backPackagesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackPackages_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackPackages_property.addEBObserver (self.imageForInstances_property)
  //--- Install undoers and opposite setter for relationships
    self.myInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.myModel_property.setProp (me) } },
      resetter: { inObject in inObject.myModel_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.frontLegendLines_property.removeEBObserverOf_x1 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.removeEBObserverOf_y1 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.removeEBObserverOf_x2 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.removeEBObserverOf_y2 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.removeEBObserverOf_width (self.frontLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_x1 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_y1 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_x2 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_y2 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_width (self.backLegendLinesSegments_property)
    self.backLegendLinesSegments_property.removeEBObserver (self.backLegendLinesBezierPaths_property)
    self.frontLegendTexts_property.removeEBObserverOf_x1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_y1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_x2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_y2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_width (self.frontLegendTextsSegments_property)
    self.frontLegendTextsSegments_property.removeEBObserver (self.frontLegendTextsBezierPaths_property)
    self.frontLayoutTexts_property.removeEBObserverOf_x1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_y1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_x2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_y2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_width (self.frontLayoutTextsSegments_property)
    self.frontLayoutTextsSegments_property.removeEBObserver (self.frontLayoutTextsBezierPaths_property)
    self.backLegendTexts_property.removeEBObserverOf_x1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_y1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_x2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_y2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_width (self.backLegendTextsSegments_property)
    self.backLegendTextsSegments_property.removeEBObserver (self.backLegendTextsBezierPaths_property)
    self.backLayoutTexts_property.removeEBObserverOf_x1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_y1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_x2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_y2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_width (self.backLayoutTextsSegments_property)
    self.backLayoutTextsSegments_property.removeEBObserver (self.backLayoutTextsBezierPaths_property)
    self.internalBoardsLimits_property.removeEBObserverOf_x1 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.removeEBObserverOf_y1 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.removeEBObserverOf_x2 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.removeEBObserverOf_y2 (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimits_property.removeEBObserverOf_width (self.internalBoardsLimitsSegments_property)
    self.internalBoardsLimitsSegments_property.removeEBObserver (self.internalBoardsLimitsBezierPaths_property)
    self.drills_property.removeEBObserverOf_x1 (self.drillSegments_property)
    self.drills_property.removeEBObserverOf_y1 (self.drillSegments_property)
    self.drills_property.removeEBObserverOf_x2 (self.drillSegments_property)
    self.drills_property.removeEBObserverOf_y2 (self.drillSegments_property)
    self.drills_property.removeEBObserverOf_width (self.drillSegments_property)
    self.drillSegments_property.removeEBObserver (self.holesBezierPaths_property)
    self.vias_property.removeEBObserverOf_x (self.viaShapes_property)
    self.vias_property.removeEBObserverOf_y (self.viaShapes_property)
    self.vias_property.removeEBObserverOf_padDiameter (self.viaShapes_property)
    self.viaShapes_property.removeEBObserver (self.viasBezierPaths_property)
    self.frontPads_property.removeEBObserverOf_x (self.frontPadArray_property)
    self.frontPads_property.removeEBObserverOf_y (self.frontPadArray_property)
    self.frontPads_property.removeEBObserverOf_width (self.frontPadArray_property)
    self.frontPads_property.removeEBObserverOf_height (self.frontPadArray_property)
    self.frontPads_property.removeEBObserverOf_shape (self.frontPadArray_property)
    self.frontPads_property.removeEBObserverOf_rotation (self.frontPadArray_property)
    self.frontPadArray_property.removeEBObserver (self.frontPadsBezierPaths_property)
    self.backPads_property.removeEBObserverOf_x (self.backPadArray_property)
    self.backPads_property.removeEBObserverOf_y (self.backPadArray_property)
    self.backPads_property.removeEBObserverOf_width (self.backPadArray_property)
    self.backPads_property.removeEBObserverOf_height (self.backPadArray_property)
    self.backPads_property.removeEBObserverOf_shape (self.backPadArray_property)
    self.backPads_property.removeEBObserverOf_rotation (self.backPadArray_property)
    self.backPadArray_property.removeEBObserver (self.backPadsBezierPaths_property)
    self.modelWidth_property.removeEBObserver (self.boardLimits_property)
    self.modelHeight_property.removeEBObserver (self.boardLimits_property)
    self.modelLimitWidth_property.removeEBObserver (self.boardLimits_property)
    g_Preferences?.mergerModelViewDisplayBoardLimits_property.removeEBObserver (self.boardLimits_property)
    self.modelWidth_property.removeEBObserver (self.boardLimitsBezierPaths_property)
    self.modelHeight_property.removeEBObserver (self.boardLimitsBezierPaths_property)
    self.modelLimitWidth_property.removeEBObserver (self.boardLimitsBezierPaths_property)
    self.backComponentNames_property.removeEBObserverOf_x1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_y1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_x2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_y2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_width (self.backComponentNameSegments_property)
    self.backComponentNameSegments_property.removeEBObserver (self.backComponentNamesBezierPaths_property)
    self.frontComponentNames_property.removeEBObserverOf_x1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_y1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_x2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_y2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_width (self.frontComponentNameSegments_property)
    self.frontComponentNameSegments_property.removeEBObserver (self.frontComponentNamesBezierPaths_property)
    self.frontComponentValues_property.removeEBObserverOf_x1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_y1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_x2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_y2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_width (self.frontComponentValueSegments_property)
    self.frontComponentValueSegments_property.removeEBObserver (self.frontComponentValuesBezierPaths_property)
    self.backComponentValues_property.removeEBObserverOf_x1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_y1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_x2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_y2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_width (self.backComponentValueSegments_property)
    self.backComponentValueSegments_property.removeEBObserver (self.backComponentValuesBezierPaths_property)
    self.backTracks_property.removeEBObserverOf_x1 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_y1 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_x2 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_y2 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_width (self.backTrackSegments_property)
    self.backTrackSegments_property.removeEBObserver (self.backTracksBezierPaths_property)
    self.frontTracks_property.removeEBObserverOf_x1 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_y1 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_x2 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_y2 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_width (self.frontTrackSegments_property)
    self.frontTrackSegments_property.removeEBObserver (self.frontTracksBezierPaths_property)
    self.frontPackages_property.removeEBObserverOf_x1 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_y1 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_x2 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_y2 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_width (self.frontPackagesSegments_property)
    self.frontPackagesSegments_property.removeEBObserver (self.frontPackagesBezierPaths_property)
    self.backPackages_property.removeEBObserverOf_x1 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_y1 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_x2 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_y2 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_width (self.backPackagesSegments_property)
    self.backPackagesSegments_property.removeEBObserver (self.backPackagesBezierPaths_property)
    self.myInstances_property.removeEBObserver (self.instanceCount_property)
    self.frontLegendLinesSegments_property.removeEBObserver (self.frontLegendLinesBezierPaths_property)
    g_Preferences?.mergerColorBackground_property.removeEBObserver (self.imageForModel_property)
    self.modelWidth_property.removeEBObserver (self.imageForModel_property)
    self.modelHeight_property.removeEBObserver (self.imageForModel_property)
    self.boardLimitsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBoardLimits_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBoardLimits_property.removeEBObserver (self.imageForModel_property)
    self.internalBoardsLimitsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayInternalBoardsLimits_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorInternalBoardsLimits_property.removeEBObserver (self.imageForModel_property)
    self.frontTracksBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontTracks_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontTracks_property.removeEBObserver (self.imageForModel_property)
    self.backTracksBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackTracks_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackTracks_property.removeEBObserver (self.imageForModel_property)
    self.frontPadsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontPads_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontPads_property.removeEBObserver (self.imageForModel_property)
    self.backPadsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackPads_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackPads_property.removeEBObserver (self.imageForModel_property)
    self.viasBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayVias_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorVias_property.removeEBObserver (self.imageForModel_property)
    self.holesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayHoles_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorHoles_property.removeEBObserver (self.imageForModel_property)
    self.frontLegendLinesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontLegendLines_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontLegendLines_property.removeEBObserver (self.imageForModel_property)
    self.backLegendLinesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackLegendLines_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackLegendLines_property.removeEBObserver (self.imageForModel_property)
    self.frontLegendTextsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontLegendTexts_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.removeEBObserver (self.imageForModel_property)
    self.frontLayoutTextsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontLayoutTexts_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.removeEBObserver (self.imageForModel_property)
    self.backLegendTextsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackLegendTexts_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackLegendTexts_property.removeEBObserver (self.imageForModel_property)
    self.backLayoutTextsBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackLayoutTexts_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.removeEBObserver (self.imageForModel_property)
    self.backComponentNamesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackComponentNames_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackComponentNames_property.removeEBObserver (self.imageForModel_property)
    self.frontComponentNamesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontComponentNames_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontComponentNames_property.removeEBObserver (self.imageForModel_property)
    self.frontComponentValuesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontComponentValues_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontComponentValues_property.removeEBObserver (self.imageForModel_property)
    self.backComponentValuesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackComponentValues_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackComponentValues_property.removeEBObserver (self.imageForModel_property)
    self.frontPackagesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayFrontPackages_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorFrontPackages_property.removeEBObserver (self.imageForModel_property)
    self.backPackagesBezierPaths_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerModelViewDisplayBackPackages_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackPackages_property.removeEBObserver (self.imageForModel_property)
    g_Preferences?.mergerColorBackground_property.removeEBObserver (self.imageForInstances_property)
    self.modelWidth_property.removeEBObserver (self.imageForInstances_property)
    self.modelHeight_property.removeEBObserver (self.imageForInstances_property)
    self.frontTracksBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontTracks_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontTracks_property.removeEBObserver (self.imageForInstances_property)
    self.backTracksBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackTracks_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackTracks_property.removeEBObserver (self.imageForInstances_property)
    self.internalBoardsLimitsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    self.boardLimitsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayInternalBoardsLimits_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorInternalBoardsLimits_property.removeEBObserver (self.imageForInstances_property)
    self.frontPadsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontPads_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontPads_property.removeEBObserver (self.imageForInstances_property)
    self.backPadsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackPads_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackPads_property.removeEBObserver (self.imageForInstances_property)
    self.viasBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayVias_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorVias_property.removeEBObserver (self.imageForInstances_property)
    self.holesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayHoles_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorHoles_property.removeEBObserver (self.imageForInstances_property)
    self.frontLegendLinesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendLines_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLegendLines_property.removeEBObserver (self.imageForInstances_property)
    self.backLegendLinesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendLines_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLegendLines_property.removeEBObserver (self.imageForInstances_property)
    self.frontLegendTextsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendTexts_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.removeEBObserver (self.imageForInstances_property)
    self.frontLayoutTextsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLayoutTexts_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.removeEBObserver (self.imageForInstances_property)
    self.backLegendTextsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendTexts_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLegendTexts_property.removeEBObserver (self.imageForInstances_property)
    self.backLayoutTextsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLayoutTexts_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.removeEBObserver (self.imageForInstances_property)
    self.backComponentNamesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentNames_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackComponentNames_property.removeEBObserver (self.imageForInstances_property)
    self.frontComponentNamesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentNames_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontComponentNames_property.removeEBObserver (self.imageForInstances_property)
    self.frontComponentValuesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentValues_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontComponentValues_property.removeEBObserver (self.imageForInstances_property)
    self.backComponentValuesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentValues_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackComponentValues_property.removeEBObserver (self.imageForInstances_property)
    self.frontPackagesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontPackages_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontPackages_property.removeEBObserver (self.imageForInstances_property)
    self.backPackagesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackPackages_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackPackages_property.removeEBObserver (self.imageForInstances_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "name",
      idx: self.name_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.name_property.mObserverExplorer,
      valueExplorer: &self.name_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelWidth",
      idx: self.modelWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.modelWidth_property.mObserverExplorer,
      valueExplorer: &self.modelWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelWidthUnit",
      idx: self.modelWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.modelWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.modelWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelHeight",
      idx: self.modelHeight_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.modelHeight_property.mObserverExplorer,
      valueExplorer: &self.modelHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelHeightUnit",
      idx: self.modelHeightUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.modelHeightUnit_property.mObserverExplorer,
      valueExplorer: &self.modelHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx: self.zoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.zoom_property.mObserverExplorer,
      valueExplorer: &self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelLimitWidth",
      idx: self.modelLimitWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.modelLimitWidth_property.mObserverExplorer,
      valueExplorer: &self.modelLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelLimitWidthUnit",
      idx: self.modelLimitWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.modelLimitWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.modelLimitWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "artworkName",
      idx: self.artworkName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.artworkName_property.mObserverExplorer,
      valueExplorer: &self.artworkName_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "frontLegendLinesSegments",
      idx: self.frontLegendLinesSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontLegendLinesSegments_property.mObserverExplorer,
      valueExplorer: &self.frontLegendLinesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendLinesSegments",
      idx: self.backLegendLinesSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backLegendLinesSegments_property.mObserverExplorer,
      valueExplorer: &self.backLegendLinesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendLinesBezierPaths",
      idx: self.backLegendLinesBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backLegendLinesBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.backLegendLinesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsSegments",
      idx: self.frontLegendTextsSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontLegendTextsSegments_property.mObserverExplorer,
      valueExplorer: &self.frontLegendTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsBezierPaths",
      idx: self.frontLegendTextsBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontLegendTextsBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.frontLegendTextsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsSegments",
      idx: self.frontLayoutTextsSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontLayoutTextsSegments_property.mObserverExplorer,
      valueExplorer: &self.frontLayoutTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsBezierPaths",
      idx: self.frontLayoutTextsBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontLayoutTextsBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.frontLayoutTextsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsSegments",
      idx: self.backLegendTextsSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backLegendTextsSegments_property.mObserverExplorer,
      valueExplorer: &self.backLegendTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsBezierPaths",
      idx: self.backLegendTextsBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backLegendTextsBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.backLegendTextsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsSegments",
      idx: self.backLayoutTextsSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backLayoutTextsSegments_property.mObserverExplorer,
      valueExplorer: &self.backLayoutTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsBezierPaths",
      idx: self.backLayoutTextsBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backLayoutTextsBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.backLayoutTextsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "internalBoardsLimitsSegments",
      idx: self.internalBoardsLimitsSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.internalBoardsLimitsSegments_property.mObserverExplorer,
      valueExplorer: &self.internalBoardsLimitsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "internalBoardsLimitsBezierPaths",
      idx: self.internalBoardsLimitsBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.internalBoardsLimitsBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.internalBoardsLimitsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillSegments",
      idx: self.drillSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drillSegments_property.mObserverExplorer,
      valueExplorer: &self.drillSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holesBezierPaths",
      idx: self.holesBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.holesBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.holesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaShapes",
      idx: self.viaShapes_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.viaShapes_property.mObserverExplorer,
      valueExplorer: &self.viaShapes_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viasBezierPaths",
      idx: self.viasBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.viasBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.viasBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPadArray",
      idx: self.frontPadArray_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontPadArray_property.mObserverExplorer,
      valueExplorer: &self.frontPadArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPadsBezierPaths",
      idx: self.frontPadsBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontPadsBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.frontPadsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPadArray",
      idx: self.backPadArray_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backPadArray_property.mObserverExplorer,
      valueExplorer: &self.backPadArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPadsBezierPaths",
      idx: self.backPadsBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backPadsBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.backPadsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimits",
      idx: self.boardLimits_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardLimits_property.mObserverExplorer,
      valueExplorer: &self.boardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitsBezierPaths",
      idx: self.boardLimitsBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardLimitsBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.boardLimitsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameSegments",
      idx: self.backComponentNameSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backComponentNameSegments_property.mObserverExplorer,
      valueExplorer: &self.backComponentNameSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNamesBezierPaths",
      idx: self.backComponentNamesBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backComponentNamesBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.backComponentNamesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameSegments",
      idx: self.frontComponentNameSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontComponentNameSegments_property.mObserverExplorer,
      valueExplorer: &self.frontComponentNameSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNamesBezierPaths",
      idx: self.frontComponentNamesBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontComponentNamesBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.frontComponentNamesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValueSegments",
      idx: self.frontComponentValueSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontComponentValueSegments_property.mObserverExplorer,
      valueExplorer: &self.frontComponentValueSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValuesBezierPaths",
      idx: self.frontComponentValuesBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontComponentValuesBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.frontComponentValuesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValueSegments",
      idx: self.backComponentValueSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backComponentValueSegments_property.mObserverExplorer,
      valueExplorer: &self.backComponentValueSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValuesBezierPaths",
      idx: self.backComponentValuesBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backComponentValuesBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.backComponentValuesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTrackSegments",
      idx: self.backTrackSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backTrackSegments_property.mObserverExplorer,
      valueExplorer: &self.backTrackSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTracksBezierPaths",
      idx: self.backTracksBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backTracksBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.backTracksBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTrackSegments",
      idx: self.frontTrackSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontTrackSegments_property.mObserverExplorer,
      valueExplorer: &self.frontTrackSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTracksBezierPaths",
      idx: self.frontTracksBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontTracksBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.frontTracksBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesSegments",
      idx: self.frontPackagesSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontPackagesSegments_property.mObserverExplorer,
      valueExplorer: &self.frontPackagesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesBezierPaths",
      idx: self.frontPackagesBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontPackagesBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.frontPackagesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesSegments",
      idx: self.backPackagesSegments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backPackagesSegments_property.mObserverExplorer,
      valueExplorer: &self.backPackagesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesBezierPaths",
      idx: self.backPackagesBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backPackagesBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.backPackagesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "instanceCount",
      idx: self.instanceCount_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.instanceCount_property.mObserverExplorer,
      valueExplorer: &self.instanceCount_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendLinesBezierPaths",
      idx: self.frontLegendLinesBezierPaths_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontLegendLinesBezierPaths_property.mObserverExplorer,
      valueExplorer: &self.frontLegendLinesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "imageForModel",
      idx: self.imageForModel_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.imageForModel_property.mObserverExplorer,
      valueExplorer: &self.imageForModel_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "imageForInstances",
      idx: self.imageForInstances_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.imageForInstances_property.mObserverExplorer,
      valueExplorer: &self.imageForInstances_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "frontLegendLines",
      idx:frontLegendLines_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLegendLines_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLegendLines",
      idx:backLegendLines_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLegendLines_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontLegendTexts",
      idx:frontLegendTexts_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLegendTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontLayoutTexts",
      idx:frontLayoutTexts_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLayoutTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLegendTexts",
      idx:backLegendTexts_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLegendTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLayoutTexts",
      idx:backLayoutTexts_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLayoutTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "internalBoardsLimits",
      idx:internalBoardsLimits_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&internalBoardsLimits_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "drills",
      idx:drills_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&drills_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "vias",
      idx:vias_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&vias_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontPads",
      idx:frontPads_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontPads_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backPads",
      idx:backPads_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backPads_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backComponentNames",
      idx:backComponentNames_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backComponentNames_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontComponentNames",
      idx:frontComponentNames_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontComponentNames_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontComponentValues",
      idx:frontComponentValues_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontComponentValues_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backComponentValues",
      idx:backComponentValues_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backComponentValues_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backTracks",
      idx:backTracks_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backTracks_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontTracks",
      idx:frontTracks_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontTracks_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontPackages",
      idx:frontPackages_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontPackages_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backPackages",
      idx:backPackages_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backPackages_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "myInstances",
      idx:myInstances_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&myInstances_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: name
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
  //--- Atomic property: modelWidth
    self.modelWidth_property.mObserverExplorer = nil
    self.modelWidth_property.mValueExplorer = nil
  //--- Atomic property: modelWidthUnit
    self.modelWidthUnit_property.mObserverExplorer = nil
    self.modelWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: modelHeight
    self.modelHeight_property.mObserverExplorer = nil
    self.modelHeight_property.mValueExplorer = nil
  //--- Atomic property: modelHeightUnit
    self.modelHeightUnit_property.mObserverExplorer = nil
    self.modelHeightUnit_property.mValueExplorer = nil
  //--- Atomic property: zoom
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
  //--- To many property: frontLegendLines
    self.frontLegendLines_property.mValueExplorer = nil
  //--- To many property: backLegendLines
    self.backLegendLines_property.mValueExplorer = nil
  //--- To many property: frontLegendTexts
    self.frontLegendTexts_property.mValueExplorer = nil
  //--- To many property: frontLayoutTexts
    self.frontLayoutTexts_property.mValueExplorer = nil
  //--- To many property: backLegendTexts
    self.backLegendTexts_property.mValueExplorer = nil
  //--- To many property: backLayoutTexts
    self.backLayoutTexts_property.mValueExplorer = nil
  //--- To many property: internalBoardsLimits
    self.internalBoardsLimits_property.mValueExplorer = nil
  //--- To many property: drills
    self.drills_property.mValueExplorer = nil
  //--- To many property: vias
    self.vias_property.mValueExplorer = nil
  //--- To many property: frontPads
    self.frontPads_property.mValueExplorer = nil
  //--- To many property: backPads
    self.backPads_property.mValueExplorer = nil
  //--- Atomic property: modelLimitWidth
    self.modelLimitWidth_property.mObserverExplorer = nil
    self.modelLimitWidth_property.mValueExplorer = nil
  //--- Atomic property: modelLimitWidthUnit
    self.modelLimitWidthUnit_property.mObserverExplorer = nil
    self.modelLimitWidthUnit_property.mValueExplorer = nil
  //--- To many property: backComponentNames
    self.backComponentNames_property.mValueExplorer = nil
  //--- To many property: frontComponentNames
    self.frontComponentNames_property.mValueExplorer = nil
  //--- To many property: frontComponentValues
    self.frontComponentValues_property.mValueExplorer = nil
  //--- To many property: backComponentValues
    self.backComponentValues_property.mValueExplorer = nil
  //--- To many property: backTracks
    self.backTracks_property.mValueExplorer = nil
  //--- To many property: frontTracks
    self.frontTracks_property.mValueExplorer = nil
  //--- To many property: frontPackages
    self.frontPackages_property.mValueExplorer = nil
  //--- To many property: backPackages
    self.backPackages_property.mValueExplorer = nil
  //--- Atomic property: artworkName
    self.artworkName_property.mObserverExplorer = nil
    self.artworkName_property.mValueExplorer = nil
  //--- To many property: myInstances
    self.myInstances_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.frontLegendLines = []
    self.backLegendLines = []
    self.frontLegendTexts = []
    self.frontLayoutTexts = []
    self.backLegendTexts = []
    self.backLayoutTexts = []
    self.internalBoardsLimits = []
    self.drills = []
    self.vias = []
    self.frontPads = []
    self.backPads = []
    self.backComponentNames = []
    self.frontComponentNames = []
    self.frontComponentValues = []
    self.backComponentValues = []
    self.backTracks = []
    self.frontTracks = []
    self.frontPackages = []
    self.backPackages = []
    self.myInstances = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: name
    self.name_property.storeIn (dictionary: ioDictionary, forKey: "name")
  //--- Atomic property: modelWidth
    self.modelWidth_property.storeIn (dictionary: ioDictionary, forKey: "modelWidth")
  //--- Atomic property: modelWidthUnit
    self.modelWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "modelWidthUnit")
  //--- Atomic property: modelHeight
    self.modelHeight_property.storeIn (dictionary: ioDictionary, forKey: "modelHeight")
  //--- Atomic property: modelHeightUnit
    self.modelHeightUnit_property.storeIn (dictionary: ioDictionary, forKey: "modelHeightUnit")
  //--- Atomic property: zoom
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey: "zoom")
  //--- To many property: frontLegendLines
    self.store (
      managedObjectArray: self.frontLegendLines_property.propval,
      relationshipName: "frontLegendLines",
      intoDictionary: ioDictionary
    )
  //--- To many property: backLegendLines
    self.store (
      managedObjectArray: self.backLegendLines_property.propval,
      relationshipName: "backLegendLines",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontLegendTexts
    self.store (
      managedObjectArray: self.frontLegendTexts_property.propval,
      relationshipName: "frontLegendTexts",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontLayoutTexts
    self.store (
      managedObjectArray: self.frontLayoutTexts_property.propval,
      relationshipName: "frontLayoutTexts",
      intoDictionary: ioDictionary
    )
  //--- To many property: backLegendTexts
    self.store (
      managedObjectArray: self.backLegendTexts_property.propval,
      relationshipName: "backLegendTexts",
      intoDictionary: ioDictionary
    )
  //--- To many property: backLayoutTexts
    self.store (
      managedObjectArray: self.backLayoutTexts_property.propval,
      relationshipName: "backLayoutTexts",
      intoDictionary: ioDictionary
    )
  //--- To many property: internalBoardsLimits
    self.store (
      managedObjectArray: self.internalBoardsLimits_property.propval,
      relationshipName: "internalBoardsLimits",
      intoDictionary: ioDictionary
    )
  //--- To many property: drills
    self.store (
      managedObjectArray: self.drills_property.propval,
      relationshipName: "drills",
      intoDictionary: ioDictionary
    )
  //--- To many property: vias
    self.store (
      managedObjectArray: self.vias_property.propval,
      relationshipName: "vias",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontPads
    self.store (
      managedObjectArray: self.frontPads_property.propval,
      relationshipName: "frontPads",
      intoDictionary: ioDictionary
    )
  //--- To many property: backPads
    self.store (
      managedObjectArray: self.backPads_property.propval,
      relationshipName: "backPads",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: modelLimitWidth
    self.modelLimitWidth_property.storeIn (dictionary: ioDictionary, forKey: "modelLimitWidth")
  //--- Atomic property: modelLimitWidthUnit
    self.modelLimitWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "modelLimitWidthUnit")
  //--- To many property: backComponentNames
    self.store (
      managedObjectArray: self.backComponentNames_property.propval,
      relationshipName: "backComponentNames",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontComponentNames
    self.store (
      managedObjectArray: self.frontComponentNames_property.propval,
      relationshipName: "frontComponentNames",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontComponentValues
    self.store (
      managedObjectArray: self.frontComponentValues_property.propval,
      relationshipName: "frontComponentValues",
      intoDictionary: ioDictionary
    )
  //--- To many property: backComponentValues
    self.store (
      managedObjectArray: self.backComponentValues_property.propval,
      relationshipName: "backComponentValues",
      intoDictionary: ioDictionary
    )
  //--- To many property: backTracks
    self.store (
      managedObjectArray: self.backTracks_property.propval,
      relationshipName: "backTracks",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontTracks
    self.store (
      managedObjectArray: self.frontTracks_property.propval,
      relationshipName: "frontTracks",
      intoDictionary: ioDictionary
    )
  //--- To many property: frontPackages
    self.store (
      managedObjectArray: self.frontPackages_property.propval,
      relationshipName: "frontPackages",
      intoDictionary: ioDictionary
    )
  //--- To many property: backPackages
    self.store (
      managedObjectArray: self.backPackages_property.propval,
      relationshipName: "backPackages",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: artworkName
    self.artworkName_property.storeIn (dictionary: ioDictionary, forKey: "artworkName")
  //--- To many property: myInstances
    self.store (
      managedObjectArray: self.myInstances_property.propval,
      relationshipName: "myInstances",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: frontLegendLines
    self.frontLegendLines_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLegendLines",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: backLegendLines
    self.backLegendLines_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLegendLines",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: frontLegendTexts
    self.frontLegendTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLegendTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: frontLayoutTexts
    self.frontLayoutTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLayoutTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: backLegendTexts
    self.backLegendTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLegendTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: backLayoutTexts
    self.backLayoutTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLayoutTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: internalBoardsLimits
    self.internalBoardsLimits_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "internalBoardsLimits",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: drills
    self.drills_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "drills",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: vias
    self.vias_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "vias",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelVia])
  //--- To many property: frontPads
    self.frontPads_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontPads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelPad])
  //--- To many property: backPads
    self.backPads_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backPads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelPad])
  //--- To many property: backComponentNames
    self.backComponentNames_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: frontComponentNames
    self.frontComponentNames_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: frontComponentValues
    self.frontComponentValues_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: backComponentValues
    self.backComponentValues_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: backTracks
    self.backTracks_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: frontTracks
    self.frontTracks_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: frontPackages
    self.frontPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: backPackages
    self.backPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentEntity])
  //--- To many property: myInstances
    self.myInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "myInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [MergerBoardInstance])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: name
    self.name_property.readFrom (dictionary: inDictionary, forKey: "name")
  //--- Atomic property: modelWidth
    self.modelWidth_property.readFrom (dictionary: inDictionary, forKey: "modelWidth")
  //--- Atomic property: modelWidthUnit
    self.modelWidthUnit_property.readFrom (dictionary: inDictionary, forKey: "modelWidthUnit")
  //--- Atomic property: modelHeight
    self.modelHeight_property.readFrom (dictionary: inDictionary, forKey: "modelHeight")
  //--- Atomic property: modelHeightUnit
    self.modelHeightUnit_property.readFrom (dictionary: inDictionary, forKey: "modelHeightUnit")
  //--- Atomic property: zoom
    self.zoom_property.readFrom (dictionary: inDictionary, forKey: "zoom")
  //--- Atomic property: modelLimitWidth
    self.modelLimitWidth_property.readFrom (dictionary: inDictionary, forKey: "modelLimitWidth")
  //--- Atomic property: modelLimitWidthUnit
    self.modelLimitWidthUnit_property.readFrom (dictionary: inDictionary, forKey: "modelLimitWidthUnit")
  //--- Atomic property: artworkName
    self.artworkName_property.readFrom (dictionary: inDictionary, forKey: "artworkName")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "name\n"
    ioString += "modelWidth\n"
    ioString += "modelWidthUnit\n"
    ioString += "modelHeight\n"
    ioString += "modelHeightUnit\n"
    ioString += "zoom\n"
    ioString += "modelLimitWidth\n"
    ioString += "modelLimitWidthUnit\n"
    ioString += "artworkName\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "frontLegendLines\n"
    ioString += "backLegendLines\n"
    ioString += "frontLegendTexts\n"
    ioString += "frontLayoutTexts\n"
    ioString += "backLegendTexts\n"
    ioString += "backLayoutTexts\n"
    ioString += "internalBoardsLimits\n"
    ioString += "drills\n"
    ioString += "vias\n"
    ioString += "frontPads\n"
    ioString += "backPads\n"
    ioString += "backComponentNames\n"
    ioString += "frontComponentNames\n"
    ioString += "frontComponentValues\n"
    ioString += "backComponentValues\n"
    ioString += "backTracks\n"
    ioString += "frontTracks\n"
    ioString += "frontPackages\n"
    ioString += "backPackages\n"
    ioString += "myInstances\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.name.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.modelWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.modelWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.modelHeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.modelHeightUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.zoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.modelLimitWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.modelLimitWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.artworkName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.frontLegendLines {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.backLegendLines {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.frontLegendTexts {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.frontLayoutTexts {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.backLegendTexts {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.backLayoutTexts {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.internalBoardsLimits {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.drills {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.vias {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.frontPads {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.backPads {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.backComponentNames {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.frontComponentNames {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.frontComponentValues {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.backComponentValues {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.backTracks {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.frontTracks {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.frontPackages {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.backPackages {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.myInstances {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData)
    let op = OperationQueue ()
    var operationResultList = [() -> Void] ()
    let mutex = DispatchSemaphore (value: 1)
  //--- Atomic properties
    op.addOperation {
      if let range = inDictionary ["name"], let value = String.unarchiveFromDataRange (inData, range) {
        mutex.wait ()
        operationResultList.append ({ self.name = value })
        mutex.signal ()
        //DispatchQueue.main.async { self.name = value }
      }
    }
    op.addOperation {
      if let range = inDictionary ["modelWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        mutex.wait ()
        operationResultList.append ({ self.modelWidth = value })
        mutex.signal ()
        //DispatchQueue.main.async { self.modelWidth = value }
      }
    }
    op.addOperation {
      if let range = inDictionary ["modelWidthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        mutex.wait ()
        operationResultList.append ({ self.modelWidthUnit = value })
        mutex.signal ()
        //DispatchQueue.main.async { self.modelWidthUnit = value }
      }
    }
    op.addOperation {
      if let range = inDictionary ["modelHeight"], let value = Int.unarchiveFromDataRange (inData, range) {
        mutex.wait ()
        operationResultList.append ({ self.modelHeight = value })
        mutex.signal ()
        //DispatchQueue.main.async { self.modelHeight = value }
      }
    }
    op.addOperation {
      if let range = inDictionary ["modelHeightUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        mutex.wait ()
        operationResultList.append ({ self.modelHeightUnit = value })
        mutex.signal ()
        //DispatchQueue.main.async { self.modelHeightUnit = value }
      }
    }
    op.addOperation {
      if let range = inDictionary ["zoom"], let value = Int.unarchiveFromDataRange (inData, range) {
        mutex.wait ()
        operationResultList.append ({ self.zoom = value })
        mutex.signal ()
        //DispatchQueue.main.async { self.zoom = value }
      }
    }
    op.addOperation {
      if let range = inDictionary ["modelLimitWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        mutex.wait ()
        operationResultList.append ({ self.modelLimitWidth = value })
        mutex.signal ()
        //DispatchQueue.main.async { self.modelLimitWidth = value }
      }
    }
    op.addOperation {
      if let range = inDictionary ["modelLimitWidthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        mutex.wait ()
        operationResultList.append ({ self.modelLimitWidthUnit = value })
        mutex.signal ()
        //DispatchQueue.main.async { self.modelLimitWidthUnit = value }
      }
    }
    op.addOperation {
      if let range = inDictionary ["artworkName"], let value = String.unarchiveFromDataRange (inData, range) {
        mutex.wait ()
        operationResultList.append ({ self.artworkName = value })
        mutex.signal ()
        //DispatchQueue.main.async { self.artworkName = value }
      }
    }
  //--- To one relationships
  //--- To many relationships
    op.addOperation {
      if let range = inDictionary ["frontLegendLines"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.frontLegendLines = relationshipArray }
        // self.frontLegendLines = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.frontLegendLines = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["backLegendLines"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.backLegendLines = relationshipArray }
        // self.backLegendLines = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.backLegendLines = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["frontLegendTexts"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.frontLegendTexts = relationshipArray }
        // self.frontLegendTexts = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.frontLegendTexts = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["frontLayoutTexts"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.frontLayoutTexts = relationshipArray }
        // self.frontLayoutTexts = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.frontLayoutTexts = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["backLegendTexts"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.backLegendTexts = relationshipArray }
        // self.backLegendTexts = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.backLegendTexts = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["backLayoutTexts"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.backLayoutTexts = relationshipArray }
        // self.backLayoutTexts = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.backLayoutTexts = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["internalBoardsLimits"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.internalBoardsLimits = relationshipArray }
        // self.internalBoardsLimits = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.internalBoardsLimits = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["drills"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.drills = relationshipArray }
        // self.drills = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.drills = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["vias"], range.length > 0 {
        var relationshipArray = [BoardModelVia] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! BoardModelVia)
        }
        // DispatchQueue.main.async { self.vias = relationshipArray }
        // self.vias = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.vias = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["frontPads"], range.length > 0 {
        var relationshipArray = [BoardModelPad] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! BoardModelPad)
        }
        // DispatchQueue.main.async { self.frontPads = relationshipArray }
        // self.frontPads = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.frontPads = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["backPads"], range.length > 0 {
        var relationshipArray = [BoardModelPad] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! BoardModelPad)
        }
        // DispatchQueue.main.async { self.backPads = relationshipArray }
        // self.backPads = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.backPads = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["backComponentNames"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.backComponentNames = relationshipArray }
        // self.backComponentNames = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.backComponentNames = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["frontComponentNames"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.frontComponentNames = relationshipArray }
        // self.frontComponentNames = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.frontComponentNames = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["frontComponentValues"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.frontComponentValues = relationshipArray }
        // self.frontComponentValues = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.frontComponentValues = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["backComponentValues"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.backComponentValues = relationshipArray }
        // self.backComponentValues = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.backComponentValues = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["backTracks"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.backTracks = relationshipArray }
        // self.backTracks = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.backTracks = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["frontTracks"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.frontTracks = relationshipArray }
        // self.frontTracks = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.frontTracks = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["frontPackages"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.frontPackages = relationshipArray }
        // self.frontPackages = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.frontPackages = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["backPackages"], range.length > 0 {
        var relationshipArray = [SegmentEntity] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! SegmentEntity)
        }
        // DispatchQueue.main.async { self.backPackages = relationshipArray }
        // self.backPackages = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.backPackages = relationshipArray })
        mutex.signal ()
      }
    }
    op.addOperation {
      if let range = inDictionary ["myInstances"], range.length > 0 {
        var relationshipArray = [MergerBoardInstance] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! MergerBoardInstance)
        }
        // DispatchQueue.main.async { self.myInstances = relationshipArray }
        // self.myInstances = relationshipArray
        mutex.wait ()
        operationResultList.append ({ self.myInstances = relationshipArray })
        mutex.signal ()
      }
    }
  //---
    op.waitUntilAllOperationsAreFinished ()
    for resultOperation in operationResultList {
       resultOperation ()
    }
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: frontLegendLines
    for managedObject in self.frontLegendLines {
      objects.append (managedObject)
    }
  //--- To many property: backLegendLines
    for managedObject in self.backLegendLines {
      objects.append (managedObject)
    }
  //--- To many property: frontLegendTexts
    for managedObject in self.frontLegendTexts {
      objects.append (managedObject)
    }
  //--- To many property: frontLayoutTexts
    for managedObject in self.frontLayoutTexts {
      objects.append (managedObject)
    }
  //--- To many property: backLegendTexts
    for managedObject in self.backLegendTexts {
      objects.append (managedObject)
    }
  //--- To many property: backLayoutTexts
    for managedObject in self.backLayoutTexts {
      objects.append (managedObject)
    }
  //--- To many property: internalBoardsLimits
    for managedObject in self.internalBoardsLimits {
      objects.append (managedObject)
    }
  //--- To many property: drills
    for managedObject in self.drills {
      objects.append (managedObject)
    }
  //--- To many property: vias
    for managedObject in self.vias {
      objects.append (managedObject)
    }
  //--- To many property: frontPads
    for managedObject in self.frontPads {
      objects.append (managedObject)
    }
  //--- To many property: backPads
    for managedObject in self.backPads {
      objects.append (managedObject)
    }
  //--- To many property: backComponentNames
    for managedObject in self.backComponentNames {
      objects.append (managedObject)
    }
  //--- To many property: frontComponentNames
    for managedObject in self.frontComponentNames {
      objects.append (managedObject)
    }
  //--- To many property: frontComponentValues
    for managedObject in self.frontComponentValues {
      objects.append (managedObject)
    }
  //--- To many property: backComponentValues
    for managedObject in self.backComponentValues {
      objects.append (managedObject)
    }
  //--- To many property: backTracks
    for managedObject in self.backTracks {
      objects.append (managedObject)
    }
  //--- To many property: frontTracks
    for managedObject in self.frontTracks {
      objects.append (managedObject)
    }
  //--- To many property: frontPackages
    for managedObject in self.frontPackages {
      objects.append (managedObject)
    }
  //--- To many property: backPackages
    for managedObject in self.backPackages {
      objects.append (managedObject)
    }
  //--- To many property: myInstances
    for managedObject in self.myInstances {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: frontLegendLines
    for managedObject in self.frontLegendLines {
      objects.append (managedObject)
    }
  //--- To many property: backLegendLines
    for managedObject in self.backLegendLines {
      objects.append (managedObject)
    }
  //--- To many property: frontLegendTexts
    for managedObject in self.frontLegendTexts {
      objects.append (managedObject)
    }
  //--- To many property: frontLayoutTexts
    for managedObject in self.frontLayoutTexts {
      objects.append (managedObject)
    }
  //--- To many property: backLegendTexts
    for managedObject in self.backLegendTexts {
      objects.append (managedObject)
    }
  //--- To many property: backLayoutTexts
    for managedObject in self.backLayoutTexts {
      objects.append (managedObject)
    }
  //--- To many property: internalBoardsLimits
    for managedObject in self.internalBoardsLimits {
      objects.append (managedObject)
    }
  //--- To many property: drills
    for managedObject in self.drills {
      objects.append (managedObject)
    }
  //--- To many property: vias
    for managedObject in self.vias {
      objects.append (managedObject)
    }
  //--- To many property: frontPads
    for managedObject in self.frontPads {
      objects.append (managedObject)
    }
  //--- To many property: backPads
    for managedObject in self.backPads {
      objects.append (managedObject)
    }
  //--- To many property: backComponentNames
    for managedObject in self.backComponentNames {
      objects.append (managedObject)
    }
  //--- To many property: frontComponentNames
    for managedObject in self.frontComponentNames {
      objects.append (managedObject)
    }
  //--- To many property: frontComponentValues
    for managedObject in self.frontComponentValues {
      objects.append (managedObject)
    }
  //--- To many property: backComponentValues
    for managedObject in self.backComponentValues {
      objects.append (managedObject)
    }
  //--- To many property: backTracks
    for managedObject in self.backTracks {
      objects.append (managedObject)
    }
  //--- To many property: frontTracks
    for managedObject in self.frontTracks {
      objects.append (managedObject)
    }
  //--- To many property: frontPackages
    for managedObject in self.frontPackages {
      objects.append (managedObject)
    }
  //--- To many property: backPackages
    for managedObject in self.backPackages {
      objects.append (managedObject)
    }
  //--- To many property: myInstances
    for managedObject in self.myInstances {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

