//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardModel : EBManagedObject,
  BoardModel_artworkName,
  BoardModel_name,
  BoardModel_modelWidth,
  BoardModel_modelWidthUnit,
  BoardModel_modelHeight,
  BoardModel_modelHeightUnit,
  BoardModel_zoom,
  BoardModel_modelLimitWidth,
  BoardModel_modelLimitWidthUnit,
  BoardModel_instanceCount,
  BoardModel_backgroundLayerDisplay,
  BoardModel_frontLegendLinesSegments,
  BoardModel_frontLegendLinesBezierPaths,
  BoardModel_frontLegendLinesLayerDisplay,
  BoardModel_backLegendLinesSegments,
  BoardModel_backLegendLinesBezierPaths,
  BoardModel_backLegendLinesLayerDisplay,
  BoardModel_frontLegendTextsSegments,
  BoardModel_frontLegendTextsBezierPaths,
  BoardModel_frontLegendTextsLayerDisplay,
  BoardModel_frontLayoutTextsSegments,
  BoardModel_frontLayoutTextsBezierPaths,
  BoardModel_frontLayoutTextsLayerDisplay,
  BoardModel_backLegendTextsSegments,
  BoardModel_backLegendTextsBezierPaths,
  BoardModel_backLegendTextsLayerDisplay,
  BoardModel_backLayoutTextsSegments,
  BoardModel_backLayoutTextsBezierPaths,
  BoardModel_backLayoutTextsLayerDisplay,
  BoardModel_padsHoles,
  BoardModel_viasHoles,
  BoardModel_holes,
  BoardModel_holesBezierPaths,
  BoardModel_holeLayerDisplay,
  BoardModel_viaShapes,
  BoardModel_viasBezierPaths,
  BoardModel_viaLayerDisplay,
  BoardModel_frontPads,
  BoardModel_frontPadsBezierPaths,
  BoardModel_frontPadsDisplay,
  BoardModel_backPads,
  BoardModel_backPadsBezierPaths,
  BoardModel_backPadsDisplay,
  BoardModel_boardLimits,
  BoardModel_boardLimitsBezierPaths,
  BoardModel_boardLimitsDisplay,
  BoardModel_backComponentNameSegments,
  BoardModel_backComponentNamesBezierPaths,
  BoardModel_backComponentNameDisplay,
  BoardModel_frontComponentNameSegments,
  BoardModel_frontComponentNamesBezierPaths,
  BoardModel_frontComponentNameDisplay,
  BoardModel_frontComponentValueSegments,
  BoardModel_frontComponentValuesBezierPaths,
  BoardModel_frontComponentValueDisplay,
  BoardModel_backComponentValueSegments,
  BoardModel_backComponentValuesBezierPaths,
  BoardModel_backComponentValueDisplay,
  BoardModel_backTrackSegments,
  BoardModel_backTracksBezierPaths,
  BoardModel_backTracksDisplay,
  BoardModel_frontTrackSegments,
  BoardModel_frontTracksBezierPaths,
  BoardModel_frontTracksDisplay,
  BoardModel_frontPackagesSegments,
  BoardModel_frontPackagesBezierPaths,
  BoardModel_frontPackagesDisplay,
  BoardModel_backPackagesSegments,
  BoardModel_backPackagesBezierPaths,
  BoardModel_backPackagesDisplay,
  BoardModel_modelLayerDisplay,
  BoardModel_imageForInstances {

  //····················································································································
  //   Accessing artworkName stored property
  //····················································································································

  var artworkName : String {
    get {
      return self.artworkName_property.propval
    }
    set {
      self.artworkName_property.setProp (newValue)
    }
  }

  var artworkName_property_selection : EBSelection <String> {
    get {
      return self.artworkName_property.prop
    }
  }

  //····················································································································
  //   Accessing name stored property
  //····················································································································

  var name : String {
    get {
      return self.name_property.propval
    }
    set {
      self.name_property.setProp (newValue)
    }
  }

  var name_property_selection : EBSelection <String> {
    get {
      return self.name_property.prop
    }
  }

  //····················································································································
  //   Accessing modelWidth stored property
  //····················································································································

  var modelWidth : Int {
    get {
      return self.modelWidth_property.propval
    }
    set {
      self.modelWidth_property.setProp (newValue)
    }
  }

  var modelWidth_property_selection : EBSelection <Int> {
    get {
      return self.modelWidth_property.prop
    }
  }

  //····················································································································
  //   Accessing modelWidthUnit stored property
  //····················································································································

  var modelWidthUnit : Int {
    get {
      return self.modelWidthUnit_property.propval
    }
    set {
      self.modelWidthUnit_property.setProp (newValue)
    }
  }

  var modelWidthUnit_property_selection : EBSelection <Int> {
    get {
      return self.modelWidthUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing modelHeight stored property
  //····················································································································

  var modelHeight : Int {
    get {
      return self.modelHeight_property.propval
    }
    set {
      self.modelHeight_property.setProp (newValue)
    }
  }

  var modelHeight_property_selection : EBSelection <Int> {
    get {
      return self.modelHeight_property.prop
    }
  }

  //····················································································································
  //   Accessing modelHeightUnit stored property
  //····················································································································

  var modelHeightUnit : Int {
    get {
      return self.modelHeightUnit_property.propval
    }
    set {
      self.modelHeightUnit_property.setProp (newValue)
    }
  }

  var modelHeightUnit_property_selection : EBSelection <Int> {
    get {
      return self.modelHeightUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing zoom stored property
  //····················································································································

  var zoom : Int {
    get {
      return self.zoom_property.propval
    }
    set {
      self.zoom_property.setProp (newValue)
    }
  }

  var zoom_property_selection : EBSelection <Int> {
    get {
      return self.zoom_property.prop
    }
  }

  //····················································································································
  //   Accessing modelLimitWidth stored property
  //····················································································································

  var modelLimitWidth : Int {
    get {
      return self.modelLimitWidth_property.propval
    }
    set {
      self.modelLimitWidth_property.setProp (newValue)
    }
  }

  var modelLimitWidth_property_selection : EBSelection <Int> {
    get {
      return self.modelLimitWidth_property.prop
    }
  }

  //····················································································································
  //   Accessing modelLimitWidthUnit stored property
  //····················································································································

  var modelLimitWidthUnit : Int {
    get {
      return self.modelLimitWidthUnit_property.propval
    }
    set {
      self.modelLimitWidthUnit_property.setProp (newValue)
    }
  }

  var modelLimitWidthUnit_property_selection : EBSelection <Int> {
    get {
      return self.modelLimitWidthUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing instanceCount transient property
  //····················································································································

  var instanceCount_property_selection : EBSelection <Int> {
    get {
      return self.instanceCount_property.prop
    }
  }

  var instanceCount : Int? {
    switch instanceCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backgroundLayerDisplay transient property
  //····················································································································

  var backgroundLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backgroundLayerDisplay_property.prop
    }
  }

  var backgroundLayerDisplay : CALayer? {
    switch backgroundLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontLegendLinesSegments transient property
  //····················································································································

  var frontLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLegendLinesSegments_property.prop
    }
  }

  var frontLegendLinesSegments : MergerSegmentArray? {
    switch frontLegendLinesSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontLegendLinesBezierPaths transient property
  //····················································································································

  var frontLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.frontLegendLinesBezierPaths_property.prop
    }
  }

  var frontLegendLinesBezierPaths : BezierPathArray? {
    switch frontLegendLinesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontLegendLinesLayerDisplay transient property
  //····················································································································

  var frontLegendLinesLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontLegendLinesLayerDisplay_property.prop
    }
  }

  var frontLegendLinesLayerDisplay : CALayer? {
    switch frontLegendLinesLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backLegendLinesSegments transient property
  //····················································································································

  var backLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backLegendLinesSegments_property.prop
    }
  }

  var backLegendLinesSegments : MergerSegmentArray? {
    switch backLegendLinesSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backLegendLinesBezierPaths transient property
  //····················································································································

  var backLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.backLegendLinesBezierPaths_property.prop
    }
  }

  var backLegendLinesBezierPaths : BezierPathArray? {
    switch backLegendLinesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backLegendLinesLayerDisplay transient property
  //····················································································································

  var backLegendLinesLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backLegendLinesLayerDisplay_property.prop
    }
  }

  var backLegendLinesLayerDisplay : CALayer? {
    switch backLegendLinesLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontLegendTextsSegments transient property
  //····················································································································

  var frontLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLegendTextsSegments_property.prop
    }
  }

  var frontLegendTextsSegments : MergerSegmentArray? {
    switch frontLegendTextsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontLegendTextsBezierPaths transient property
  //····················································································································

  var frontLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.frontLegendTextsBezierPaths_property.prop
    }
  }

  var frontLegendTextsBezierPaths : BezierPathArray? {
    switch frontLegendTextsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontLegendTextsLayerDisplay transient property
  //····················································································································

  var frontLegendTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontLegendTextsLayerDisplay_property.prop
    }
  }

  var frontLegendTextsLayerDisplay : CALayer? {
    switch frontLegendTextsLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontLayoutTextsSegments transient property
  //····················································································································

  var frontLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontLayoutTextsSegments_property.prop
    }
  }

  var frontLayoutTextsSegments : MergerSegmentArray? {
    switch frontLayoutTextsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontLayoutTextsBezierPaths transient property
  //····················································································································

  var frontLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.frontLayoutTextsBezierPaths_property.prop
    }
  }

  var frontLayoutTextsBezierPaths : BezierPathArray? {
    switch frontLayoutTextsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontLayoutTextsLayerDisplay transient property
  //····················································································································

  var frontLayoutTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontLayoutTextsLayerDisplay_property.prop
    }
  }

  var frontLayoutTextsLayerDisplay : CALayer? {
    switch frontLayoutTextsLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backLegendTextsSegments transient property
  //····················································································································

  var backLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backLegendTextsSegments_property.prop
    }
  }

  var backLegendTextsSegments : MergerSegmentArray? {
    switch backLegendTextsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backLegendTextsBezierPaths transient property
  //····················································································································

  var backLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.backLegendTextsBezierPaths_property.prop
    }
  }

  var backLegendTextsBezierPaths : BezierPathArray? {
    switch backLegendTextsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backLegendTextsLayerDisplay transient property
  //····················································································································

  var backLegendTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backLegendTextsLayerDisplay_property.prop
    }
  }

  var backLegendTextsLayerDisplay : CALayer? {
    switch backLegendTextsLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backLayoutTextsSegments transient property
  //····················································································································

  var backLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backLayoutTextsSegments_property.prop
    }
  }

  var backLayoutTextsSegments : MergerSegmentArray? {
    switch backLayoutTextsSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backLayoutTextsBezierPaths transient property
  //····················································································································

  var backLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.backLayoutTextsBezierPaths_property.prop
    }
  }

  var backLayoutTextsBezierPaths : BezierPathArray? {
    switch backLayoutTextsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backLayoutTextsLayerDisplay transient property
  //····················································································································

  var backLayoutTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backLayoutTextsLayerDisplay_property.prop
    }
  }

  var backLayoutTextsLayerDisplay : CALayer? {
    switch backLayoutTextsLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing padsHoles transient property
  //····················································································································

  var padsHoles_property_selection : EBSelection <MergerHoleArray> {
    get {
      return self.padsHoles_property.prop
    }
  }

  var padsHoles : MergerHoleArray? {
    switch padsHoles_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing viasHoles transient property
  //····················································································································

  var viasHoles_property_selection : EBSelection <MergerHoleArray> {
    get {
      return self.viasHoles_property.prop
    }
  }

  var viasHoles : MergerHoleArray? {
    switch viasHoles_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing holes transient property
  //····················································································································

  var holes_property_selection : EBSelection <MergerHoleArray> {
    get {
      return self.holes_property.prop
    }
  }

  var holes : MergerHoleArray? {
    switch holes_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing holesBezierPaths transient property
  //····················································································································

  var holesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.holesBezierPaths_property.prop
    }
  }

  var holesBezierPaths : BezierPathArray? {
    switch holesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing holeLayerDisplay transient property
  //····················································································································

  var holeLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.holeLayerDisplay_property.prop
    }
  }

  var holeLayerDisplay : CALayer? {
    switch holeLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing viaShapes transient property
  //····················································································································

  var viaShapes_property_selection : EBSelection <MergerViaShapeArray> {
    get {
      return self.viaShapes_property.prop
    }
  }

  var viaShapes : MergerViaShapeArray? {
    switch viaShapes_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing viasBezierPaths transient property
  //····················································································································

  var viasBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.viasBezierPaths_property.prop
    }
  }

  var viasBezierPaths : BezierPathArray? {
    switch viasBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing viaLayerDisplay transient property
  //····················································································································

  var viaLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.viaLayerDisplay_property.prop
    }
  }

  var viaLayerDisplay : CALayer? {
    switch viaLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontPads transient property
  //····················································································································

  var frontPads_property_selection : EBSelection <MergerPadArray> {
    get {
      return self.frontPads_property.prop
    }
  }

  var frontPads : MergerPadArray? {
    switch frontPads_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontPadsBezierPaths transient property
  //····················································································································

  var frontPadsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.frontPadsBezierPaths_property.prop
    }
  }

  var frontPadsBezierPaths : BezierPathArray? {
    switch frontPadsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontPadsDisplay transient property
  //····················································································································

  var frontPadsDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontPadsDisplay_property.prop
    }
  }

  var frontPadsDisplay : CALayer? {
    switch frontPadsDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backPads transient property
  //····················································································································

  var backPads_property_selection : EBSelection <MergerPadArray> {
    get {
      return self.backPads_property.prop
    }
  }

  var backPads : MergerPadArray? {
    switch backPads_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backPadsBezierPaths transient property
  //····················································································································

  var backPadsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.backPadsBezierPaths_property.prop
    }
  }

  var backPadsBezierPaths : BezierPathArray? {
    switch backPadsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backPadsDisplay transient property
  //····················································································································

  var backPadsDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backPadsDisplay_property.prop
    }
  }

  var backPadsDisplay : CALayer? {
    switch backPadsDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing boardLimits transient property
  //····················································································································

  var boardLimits_property_selection : EBSelection <MergerBoardLimits> {
    get {
      return self.boardLimits_property.prop
    }
  }

  var boardLimits : MergerBoardLimits? {
    switch boardLimits_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing boardLimitsBezierPaths transient property
  //····················································································································

  var boardLimitsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.boardLimitsBezierPaths_property.prop
    }
  }

  var boardLimitsBezierPaths : BezierPathArray? {
    switch boardLimitsBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing boardLimitsDisplay transient property
  //····················································································································

  var boardLimitsDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.boardLimitsDisplay_property.prop
    }
  }

  var boardLimitsDisplay : CALayer? {
    switch boardLimitsDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backComponentNameSegments transient property
  //····················································································································

  var backComponentNameSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backComponentNameSegments_property.prop
    }
  }

  var backComponentNameSegments : MergerSegmentArray? {
    switch backComponentNameSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backComponentNamesBezierPaths transient property
  //····················································································································

  var backComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.backComponentNamesBezierPaths_property.prop
    }
  }

  var backComponentNamesBezierPaths : BezierPathArray? {
    switch backComponentNamesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backComponentNameDisplay transient property
  //····················································································································

  var backComponentNameDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backComponentNameDisplay_property.prop
    }
  }

  var backComponentNameDisplay : CALayer? {
    switch backComponentNameDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontComponentNameSegments transient property
  //····················································································································

  var frontComponentNameSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontComponentNameSegments_property.prop
    }
  }

  var frontComponentNameSegments : MergerSegmentArray? {
    switch frontComponentNameSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontComponentNamesBezierPaths transient property
  //····················································································································

  var frontComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.frontComponentNamesBezierPaths_property.prop
    }
  }

  var frontComponentNamesBezierPaths : BezierPathArray? {
    switch frontComponentNamesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontComponentNameDisplay transient property
  //····················································································································

  var frontComponentNameDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontComponentNameDisplay_property.prop
    }
  }

  var frontComponentNameDisplay : CALayer? {
    switch frontComponentNameDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontComponentValueSegments transient property
  //····················································································································

  var frontComponentValueSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontComponentValueSegments_property.prop
    }
  }

  var frontComponentValueSegments : MergerSegmentArray? {
    switch frontComponentValueSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontComponentValuesBezierPaths transient property
  //····················································································································

  var frontComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.frontComponentValuesBezierPaths_property.prop
    }
  }

  var frontComponentValuesBezierPaths : BezierPathArray? {
    switch frontComponentValuesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontComponentValueDisplay transient property
  //····················································································································

  var frontComponentValueDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontComponentValueDisplay_property.prop
    }
  }

  var frontComponentValueDisplay : CALayer? {
    switch frontComponentValueDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backComponentValueSegments transient property
  //····················································································································

  var backComponentValueSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backComponentValueSegments_property.prop
    }
  }

  var backComponentValueSegments : MergerSegmentArray? {
    switch backComponentValueSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backComponentValuesBezierPaths transient property
  //····················································································································

  var backComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.backComponentValuesBezierPaths_property.prop
    }
  }

  var backComponentValuesBezierPaths : BezierPathArray? {
    switch backComponentValuesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backComponentValueDisplay transient property
  //····················································································································

  var backComponentValueDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backComponentValueDisplay_property.prop
    }
  }

  var backComponentValueDisplay : CALayer? {
    switch backComponentValueDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backTrackSegments transient property
  //····················································································································

  var backTrackSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backTrackSegments_property.prop
    }
  }

  var backTrackSegments : MergerSegmentArray? {
    switch backTrackSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backTracksBezierPaths transient property
  //····················································································································

  var backTracksBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.backTracksBezierPaths_property.prop
    }
  }

  var backTracksBezierPaths : BezierPathArray? {
    switch backTracksBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backTracksDisplay transient property
  //····················································································································

  var backTracksDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backTracksDisplay_property.prop
    }
  }

  var backTracksDisplay : CALayer? {
    switch backTracksDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontTrackSegments transient property
  //····················································································································

  var frontTrackSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontTrackSegments_property.prop
    }
  }

  var frontTrackSegments : MergerSegmentArray? {
    switch frontTrackSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontTracksBezierPaths transient property
  //····················································································································

  var frontTracksBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.frontTracksBezierPaths_property.prop
    }
  }

  var frontTracksBezierPaths : BezierPathArray? {
    switch frontTracksBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontTracksDisplay transient property
  //····················································································································

  var frontTracksDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontTracksDisplay_property.prop
    }
  }

  var frontTracksDisplay : CALayer? {
    switch frontTracksDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontPackagesSegments transient property
  //····················································································································

  var frontPackagesSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.frontPackagesSegments_property.prop
    }
  }

  var frontPackagesSegments : MergerSegmentArray? {
    switch frontPackagesSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontPackagesBezierPaths transient property
  //····················································································································

  var frontPackagesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.frontPackagesBezierPaths_property.prop
    }
  }

  var frontPackagesBezierPaths : BezierPathArray? {
    switch frontPackagesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontPackagesDisplay transient property
  //····················································································································

  var frontPackagesDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontPackagesDisplay_property.prop
    }
  }

  var frontPackagesDisplay : CALayer? {
    switch frontPackagesDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backPackagesSegments transient property
  //····················································································································

  var backPackagesSegments_property_selection : EBSelection <MergerSegmentArray> {
    get {
      return self.backPackagesSegments_property.prop
    }
  }

  var backPackagesSegments : MergerSegmentArray? {
    switch backPackagesSegments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backPackagesBezierPaths transient property
  //····················································································································

  var backPackagesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    get {
      return self.backPackagesBezierPaths_property.prop
    }
  }

  var backPackagesBezierPaths : BezierPathArray? {
    switch backPackagesBezierPaths_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backPackagesDisplay transient property
  //····················································································································

  var backPackagesDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backPackagesDisplay_property.prop
    }
  }

  var backPackagesDisplay : CALayer? {
    switch backPackagesDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing modelLayerDisplay transient property
  //····················································································································

  var modelLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.modelLayerDisplay_property.prop
    }
  }

  var modelLayerDisplay : CALayer? {
    switch modelLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing imageForInstances transient property
  //····················································································································

  var imageForInstances_property_selection : EBSelection <NSImage> {
    get {
      return self.imageForInstances_property.prop
    }
  }

  var imageForInstances : NSImage? {
    switch imageForInstances_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing myInstances toMany relationship
  //····················································································································

  var myInstances_property_selection : EBSelection < [MergerBoardInstance] > {
    get {
      return self.myInstances_property.prop
    }
  }

  //····················································································································
  //   Accessing frontLegendLines toMany relationship
  //····················································································································

  var frontLegendLines_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.frontLegendLines_property.prop
    }
  }

  //····················································································································
  //   Accessing backLegendLines toMany relationship
  //····················································································································

  var backLegendLines_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.backLegendLines_property.prop
    }
  }

  //····················································································································
  //   Accessing frontLegendTexts toMany relationship
  //····················································································································

  var frontLegendTexts_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.frontLegendTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing frontLayoutTexts toMany relationship
  //····················································································································

  var frontLayoutTexts_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.frontLayoutTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing backLegendTexts toMany relationship
  //····················································································································

  var backLegendTexts_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.backLegendTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing backLayoutTexts toMany relationship
  //····················································································································

  var backLayoutTexts_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.backLayoutTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing vias toMany relationship
  //····················································································································

  var vias_property_selection : EBSelection < [BoardModelVia] > {
    get {
      return self.vias_property.prop
    }
  }

  //····················································································································
  //   Accessing pads toMany relationship
  //····················································································································

  var pads_property_selection : EBSelection < [BoardModelPad] > {
    get {
      return self.pads_property.prop
    }
  }

  //····················································································································
  //   Accessing backComponentNames toMany relationship
  //····················································································································

  var backComponentNames_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.backComponentNames_property.prop
    }
  }

  //····················································································································
  //   Accessing frontComponentNames toMany relationship
  //····················································································································

  var frontComponentNames_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.frontComponentNames_property.prop
    }
  }

  //····················································································································
  //   Accessing frontComponentValues toMany relationship
  //····················································································································

  var frontComponentValues_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.frontComponentValues_property.prop
    }
  }

  //····················································································································
  //   Accessing backComponentValues toMany relationship
  //····················································································································

  var backComponentValues_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.backComponentValues_property.prop
    }
  }

  //····················································································································
  //   Accessing backTracks toMany relationship
  //····················································································································

  var backTracks_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.backTracks_property.prop
    }
  }

  //····················································································································
  //   Accessing frontTracks toMany relationship
  //····················································································································

  var frontTracks_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.frontTracks_property.prop
    }
  }

  //····················································································································
  //   Accessing frontPackages toMany relationship
  //····················································································································

  var frontPackages_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.frontPackages_property.prop
    }
  }

  //····················································································································
  //   Accessing backPackages toMany relationship
  //····················································································································

  var backPackages_property_selection : EBSelection < [CanariSegment] > {
    get {
      return self.backPackages_property.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var artworkName_property = EBStoredProperty_String ("")
  var name_property = EBStoredProperty_String ("")
  var modelWidth_property = EBStoredProperty_Int (0)
  var modelWidthUnit_property = EBStoredProperty_Int (0)
  var modelHeight_property = EBStoredProperty_Int (0)
  var modelHeightUnit_property = EBStoredProperty_Int (0)
  var zoom_property = EBStoredProperty_Int (0)
  var modelLimitWidth_property = EBStoredProperty_Int (0)
  var modelLimitWidthUnit_property = EBStoredProperty_Int (0)

  //····················································································································
  //    Transient properties
  //····················································································································

  var instanceCount_property = EBTransientProperty_Int ()
  var backgroundLayerDisplay_property = EBTransientProperty_CALayer ()
  var frontLegendLinesSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontLegendLinesBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var frontLegendLinesLayerDisplay_property = EBTransientProperty_CALayer ()
  var backLegendLinesSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backLegendLinesBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var backLegendLinesLayerDisplay_property = EBTransientProperty_CALayer ()
  var frontLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontLegendTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var frontLegendTextsLayerDisplay_property = EBTransientProperty_CALayer ()
  var frontLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontLayoutTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var frontLayoutTextsLayerDisplay_property = EBTransientProperty_CALayer ()
  var backLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backLegendTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var backLegendTextsLayerDisplay_property = EBTransientProperty_CALayer ()
  var backLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backLayoutTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var backLayoutTextsLayerDisplay_property = EBTransientProperty_CALayer ()
  var padsHoles_property = EBTransientProperty_MergerHoleArray ()
  var viasHoles_property = EBTransientProperty_MergerHoleArray ()
  var holes_property = EBTransientProperty_MergerHoleArray ()
  var holesBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var holeLayerDisplay_property = EBTransientProperty_CALayer ()
  var viaShapes_property = EBTransientProperty_MergerViaShapeArray ()
  var viasBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var viaLayerDisplay_property = EBTransientProperty_CALayer ()
  var frontPads_property = EBTransientProperty_MergerPadArray ()
  var frontPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var frontPadsDisplay_property = EBTransientProperty_CALayer ()
  var backPads_property = EBTransientProperty_MergerPadArray ()
  var backPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var backPadsDisplay_property = EBTransientProperty_CALayer ()
  var boardLimits_property = EBTransientProperty_MergerBoardLimits ()
  var boardLimitsBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var boardLimitsDisplay_property = EBTransientProperty_CALayer ()
  var backComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backComponentNamesBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var backComponentNameDisplay_property = EBTransientProperty_CALayer ()
  var frontComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontComponentNamesBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var frontComponentNameDisplay_property = EBTransientProperty_CALayer ()
  var frontComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontComponentValuesBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var frontComponentValueDisplay_property = EBTransientProperty_CALayer ()
  var backComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backComponentValuesBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var backComponentValueDisplay_property = EBTransientProperty_CALayer ()
  var backTrackSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backTracksBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var backTracksDisplay_property = EBTransientProperty_CALayer ()
  var frontTrackSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontTracksBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var frontTracksDisplay_property = EBTransientProperty_CALayer ()
  var frontPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()
  var frontPackagesBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var frontPackagesDisplay_property = EBTransientProperty_CALayer ()
  var backPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()
  var backPackagesBezierPaths_property = EBTransientProperty_BezierPathArray ()
  var backPackagesDisplay_property = EBTransientProperty_CALayer ()
  var modelLayerDisplay_property = EBTransientProperty_CALayer ()
  var imageForInstances_property = EBTransientProperty_NSImage ()

  //····················································································································
  //    Relationships
  //····················································································································

  var myInstances_property = ToManyRelationship_BoardModel_myInstances ()
  var frontLegendLines_property = ToManyRelationship_BoardModel_frontLegendLines ()
  var backLegendLines_property = ToManyRelationship_BoardModel_backLegendLines ()
  var frontLegendTexts_property = ToManyRelationship_BoardModel_frontLegendTexts ()
  var frontLayoutTexts_property = ToManyRelationship_BoardModel_frontLayoutTexts ()
  var backLegendTexts_property = ToManyRelationship_BoardModel_backLegendTexts ()
  var backLayoutTexts_property = ToManyRelationship_BoardModel_backLayoutTexts ()
  var vias_property = ToManyRelationship_BoardModel_vias ()
  var pads_property = ToManyRelationship_BoardModel_pads ()
  var backComponentNames_property = ToManyRelationship_BoardModel_backComponentNames ()
  var frontComponentNames_property = ToManyRelationship_BoardModel_frontComponentNames ()
  var frontComponentValues_property = ToManyRelationship_BoardModel_frontComponentValues ()
  var backComponentValues_property = ToManyRelationship_BoardModel_backComponentValues ()
  var backTracks_property = ToManyRelationship_BoardModel_backTracks ()
  var frontTracks_property = ToManyRelationship_BoardModel_frontTracks ()
  var frontPackages_property = ToManyRelationship_BoardModel_frontPackages ()
  var backPackages_property = ToManyRelationship_BoardModel_backPackages ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    self.instanceCount_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.myInstances_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.myInstances_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_instanceCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backgroundLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackground_property_selection.kind ()
        kind &= unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackground_property_selection, unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_backgroundLayerDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendLinesSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLines_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLegendLines_property_selection, unwSelf.frontLegendLines_property_selection, unwSelf.frontLegendLines_property_selection, unwSelf.frontLegendLines_property_selection, unwSelf.frontLegendLines_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_frontLegendLinesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendLinesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontLegendLinesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLegendLinesSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_frontLegendLinesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendLinesLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorFrontLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendLinesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorFrontLegendLines_property_selection, g_Preferences!.mergerModelViewDisplayFrontLegendLines_property_selection, unwSelf.frontLegendLinesSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_frontLegendLinesLayerDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendLinesSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLines_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLegendLines_property_selection, unwSelf.backLegendLines_property_selection, unwSelf.backLegendLines_property_selection, unwSelf.backLegendLines_property_selection, unwSelf.backLegendLines_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_backLegendLinesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendLinesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backLegendLinesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLegendLinesSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_backLegendLinesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendLinesLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLinesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackLegendLines_property_selection, g_Preferences!.mergerModelViewDisplayBackLegendLines_property_selection, unwSelf.backLegendLinesSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_backLegendLinesLayerDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection, unwSelf.frontLegendTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_frontLegendTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTextsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLegendTextsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_frontLegendTextsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTextsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorFrontLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorFrontLegendTexts_property_selection, g_Preferences!.mergerModelViewDisplayFrontLegendTexts_property_selection, unwSelf.frontLegendTextsSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_frontLegendTextsLayerDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection, unwSelf.frontLayoutTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_frontLayoutTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTextsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontLayoutTextsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_frontLayoutTextsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTextsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorFrontLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorFrontLayoutTexts_property_selection, g_Preferences!.mergerModelViewDisplayFrontLayoutTexts_property_selection, unwSelf.frontLayoutTextsSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_frontLayoutTextsLayerDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection, unwSelf.backLegendTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_backLegendTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendTextsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLegendTextsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_backLegendTextsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendTextsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackLegendTexts_property_selection, g_Preferences!.mergerModelViewDisplayBackLegendTexts_property_selection, unwSelf.backLegendTextsSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_backLegendTextsLayerDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTextsSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTexts_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection, unwSelf.backLayoutTexts_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_backLayoutTextsSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTextsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backLayoutTextsSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_backLayoutTextsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTextsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackLayoutTexts_property_selection, g_Preferences!.mergerModelViewDisplayBackLayoutTexts_property_selection, unwSelf.backLayoutTextsSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_backLayoutTextsLayerDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padsHoles_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_padsHoles (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viasHoles_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.vias_property_selection, unwSelf.vias_property_selection, unwSelf.vias_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_viasHoles (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.holes_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.padsHoles_property_selection.kind ()
        kind &= unwSelf.viasHoles_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.padsHoles_property_selection, unwSelf.viasHoles_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_BoardModel_holes (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.holesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.holes_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.holes_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_holesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.holeLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorHoles_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayHoles_property_selection.kind ()
        kind &= unwSelf.holes_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorHoles_property_selection, g_Preferences!.mergerModelViewDisplayHoles_property_selection, unwSelf.holes_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_holeLayerDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viaShapes_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        kind &= unwSelf.vias_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.vias_property_selection, unwSelf.vias_property_selection, unwSelf.vias_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_viaShapes (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viasBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.viaShapes_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.viaShapes_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_viasBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viaLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorVias_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayVias_property_selection.kind ()
        kind &= unwSelf.viaShapes_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorVias_property_selection, g_Preferences!.mergerModelViewDisplayVias_property_selection, unwSelf.viaShapes_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_viaLayerDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPads_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (compute_BoardModel_frontPads (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPadsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontPads_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_frontPadsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPadsDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorFrontPads_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontPads_property_selection.kind ()
        kind &= unwSelf.frontPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorFrontPads_property_selection, g_Preferences!.mergerModelViewDisplayFrontPads_property_selection, unwSelf.frontPads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_frontPadsDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPads_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        kind &= unwSelf.pads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection, unwSelf.pads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (compute_BoardModel_backPads (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPadsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backPads_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_backPadsBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPadsDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackPads_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackPads_property_selection.kind ()
        kind &= unwSelf.backPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackPads_property_selection, g_Preferences!.mergerModelViewDisplayBackPads_property_selection, unwSelf.backPads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_backPadsDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardLimits_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        kind &= unwSelf.modelLimitWidth_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBoardLimits_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection, unwSelf.modelLimitWidth_property_selection, g_Preferences!.mergerModelViewDisplayBoardLimits_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (compute_BoardModel_boardLimits (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardLimitsBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        kind &= unwSelf.modelLimitWidth_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection, unwSelf.modelLimitWidth_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_boardLimitsBezierPaths (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardLimitsDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBoardLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBoardLimits_property_selection.kind ()
        kind &= unwSelf.boardLimits_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBoardLimits_property_selection, g_Preferences!.mergerModelViewDisplayBoardLimits_property_selection, unwSelf.boardLimits_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_boardLimitsDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentNameSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNames_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection, unwSelf.backComponentNames_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_backComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentNamesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backComponentNameSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentNameSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_backComponentNamesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentNameDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackComponentNames_property_selection.kind ()
        kind &= unwSelf.backComponentNameSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackComponentNames_property_selection, g_Preferences!.mergerModelViewDisplayBackComponentNames_property_selection, unwSelf.backComponentNameSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_backComponentNameDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNameSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNames_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection, unwSelf.frontComponentNames_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_frontComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNamesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontComponentNameSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentNameSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_frontComponentNamesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNameDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorFrontComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNameSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorFrontComponentNames_property_selection, g_Preferences!.mergerModelViewDisplayFrontComponentNames_property_selection, unwSelf.frontComponentNameSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_frontComponentNameDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValueSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection, unwSelf.frontComponentValues_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_frontComponentValueSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValuesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontComponentValueSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontComponentValueSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_frontComponentValuesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValueDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorFrontComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontComponentValues_property_selection.kind ()
        kind &= unwSelf.frontComponentValueSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorFrontComponentValues_property_selection, g_Preferences!.mergerModelViewDisplayFrontComponentValues_property_selection, unwSelf.frontComponentValueSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_frontComponentValueDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentValueSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection, unwSelf.backComponentValues_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_backComponentValueSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentValuesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backComponentValueSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backComponentValueSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_backComponentValuesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentValueDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValueSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackComponentValues_property_selection, g_Preferences!.mergerModelViewDisplayBackComponentValues_property_selection, unwSelf.backComponentValueSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_backComponentValueDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backTrackSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        kind &= unwSelf.backTracks_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection, unwSelf.backTracks_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_backTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backTracksBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backTrackSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backTrackSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_backTracksBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backTracksDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackTracks_property_selection.kind ()
        kind &= unwSelf.backTrackSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackTracks_property_selection, g_Preferences!.mergerModelViewDisplayBackTracks_property_selection, unwSelf.backTrackSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_backTracksDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontTrackSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        kind &= unwSelf.frontTracks_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection, unwSelf.frontTracks_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_frontTrackSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontTracksBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontTrackSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontTrackSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_frontTracksBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontTracksDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorFrontTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontTracks_property_selection.kind ()
        kind &= unwSelf.frontTrackSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorFrontTracks_property_selection, g_Preferences!.mergerModelViewDisplayFrontTracks_property_selection, unwSelf.frontTrackSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_frontTracksDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPackagesSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection, unwSelf.frontPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_frontPackagesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPackagesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.frontPackagesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.frontPackagesSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_frontPackagesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPackagesDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorFrontPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayFrontPackages_property_selection.kind ()
        kind &= unwSelf.frontPackagesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorFrontPackages_property_selection, g_Preferences!.mergerModelViewDisplayFrontPackages_property_selection, unwSelf.frontPackagesSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_frontPackagesDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPackagesSegments_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        kind &= unwSelf.backPackages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection, unwSelf.backPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_BoardModel_backPackagesSegments (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPackagesBezierPaths_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.backPackagesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backPackagesSegments_property_selection) {
          case (.single (let v0)) :
            return .single (compute_BoardModel_backPackagesBezierPaths (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPackagesDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerModelViewDisplayBackPackages_property_selection.kind ()
        kind &= unwSelf.backPackagesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackPackages_property_selection, g_Preferences!.mergerModelViewDisplayBackPackages_property_selection, unwSelf.backPackagesSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_BoardModel_backPackagesDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.modelLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backgroundLayerDisplay_property_selection.kind ()
        kind &= unwSelf.backLegendTextsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.backLayoutTextsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.frontLegendTextsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.frontLayoutTextsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.holeLayerDisplay_property_selection.kind ()
        kind &= unwSelf.viaLayerDisplay_property_selection.kind ()
        kind &= unwSelf.frontPadsDisplay_property_selection.kind ()
        kind &= unwSelf.backPadsDisplay_property_selection.kind ()
        kind &= unwSelf.boardLimitsDisplay_property_selection.kind ()
        kind &= unwSelf.backComponentNameDisplay_property_selection.kind ()
        kind &= unwSelf.frontComponentNameDisplay_property_selection.kind ()
        kind &= unwSelf.frontComponentValueDisplay_property_selection.kind ()
        kind &= unwSelf.backComponentValueDisplay_property_selection.kind ()
        kind &= unwSelf.backTracksDisplay_property_selection.kind ()
        kind &= unwSelf.frontTracksDisplay_property_selection.kind ()
        kind &= unwSelf.frontPackagesDisplay_property_selection.kind ()
        kind &= unwSelf.backPackagesDisplay_property_selection.kind ()
        kind &= unwSelf.backLegendLinesLayerDisplay_property_selection.kind ()
        kind &= unwSelf.frontLegendLinesLayerDisplay_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backgroundLayerDisplay_property_selection, unwSelf.backLegendTextsLayerDisplay_property_selection, unwSelf.backLayoutTextsLayerDisplay_property_selection, unwSelf.frontLegendTextsLayerDisplay_property_selection, unwSelf.frontLayoutTextsLayerDisplay_property_selection, unwSelf.holeLayerDisplay_property_selection, unwSelf.viaLayerDisplay_property_selection, unwSelf.frontPadsDisplay_property_selection, unwSelf.backPadsDisplay_property_selection, unwSelf.boardLimitsDisplay_property_selection, unwSelf.backComponentNameDisplay_property_selection, unwSelf.frontComponentNameDisplay_property_selection, unwSelf.frontComponentValueDisplay_property_selection, unwSelf.backComponentValueDisplay_property_selection, unwSelf.backTracksDisplay_property_selection, unwSelf.frontTracksDisplay_property_selection, unwSelf.frontPackagesDisplay_property_selection, unwSelf.backPackagesDisplay_property_selection, unwSelf.backLegendLinesLayerDisplay_property_selection, unwSelf.frontLegendLinesLayerDisplay_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16), .single (let v17), .single (let v18), .single (let v19)) :
            return .single (compute_BoardModel_modelLayerDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.imageForInstances_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackground_property_selection.kind ()
        kind &= unwSelf.modelWidth_property_selection.kind ()
        kind &= unwSelf.modelHeight_property_selection.kind ()
        kind &= unwSelf.frontTracksBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontTracks_property_selection.kind ()
        kind &= unwSelf.backTracksBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackTracks_property_selection.kind ()
        kind &= unwSelf.boardLimitsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayInternalBoardLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerColorInternalBoardLimits_property_selection.kind ()
        kind &= unwSelf.frontPadsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontPads_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontPads_property_selection.kind ()
        kind &= unwSelf.backPadsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackPads_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackPads_property_selection.kind ()
        kind &= unwSelf.viasBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayVias_property_selection.kind ()
        kind &= g_Preferences!.mergerColorVias_property_selection.kind ()
        kind &= unwSelf.holesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayHoles_property_selection.kind ()
        kind &= g_Preferences!.mergerColorHoles_property_selection.kind ()
        kind &= unwSelf.frontLegendLinesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLegendLines_property_selection.kind ()
        kind &= unwSelf.backLegendLinesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLegendLines_property_selection.kind ()
        kind &= unwSelf.frontLegendTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLegendTexts_property_selection.kind ()
        kind &= unwSelf.frontLayoutTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backLegendTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLegendTexts_property_selection.kind ()
        kind &= unwSelf.backLayoutTextsBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLayoutTexts_property_selection.kind ()
        kind &= unwSelf.backComponentNamesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentNamesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontComponentNames_property_selection.kind ()
        kind &= unwSelf.frontComponentValuesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontComponentValues_property_selection.kind ()
        kind &= unwSelf.backComponentValuesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackComponentValues_property_selection.kind ()
        kind &= unwSelf.frontPackagesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontPackages_property_selection.kind ()
        kind &= unwSelf.backPackagesBezierPaths_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackPackages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackground_property_selection, unwSelf.modelWidth_property_selection, unwSelf.modelHeight_property_selection, unwSelf.frontTracksBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontTracks_property_selection, g_Preferences!.mergerColorFrontTracks_property_selection, unwSelf.backTracksBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackTracks_property_selection, g_Preferences!.mergerColorBackTracks_property_selection, unwSelf.boardLimitsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayInternalBoardLimits_property_selection, g_Preferences!.mergerColorInternalBoardLimits_property_selection, unwSelf.frontPadsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontPads_property_selection, g_Preferences!.mergerColorFrontPads_property_selection, unwSelf.backPadsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackPads_property_selection, g_Preferences!.mergerColorBackPads_property_selection, unwSelf.viasBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayVias_property_selection, g_Preferences!.mergerColorVias_property_selection, unwSelf.holesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayHoles_property_selection, g_Preferences!.mergerColorHoles_property_selection, unwSelf.frontLegendLinesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontLegendLines_property_selection, g_Preferences!.mergerColorFrontLegendLines_property_selection, unwSelf.backLegendLinesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackLegendLines_property_selection, g_Preferences!.mergerColorBackLegendLines_property_selection, unwSelf.frontLegendTextsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontLegendTexts_property_selection, g_Preferences!.mergerColorFrontLegendTexts_property_selection, unwSelf.frontLayoutTextsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontLayoutTexts_property_selection, g_Preferences!.mergerColorFrontLayoutTexts_property_selection, unwSelf.backLegendTextsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackLegendTexts_property_selection, g_Preferences!.mergerColorBackLegendTexts_property_selection, unwSelf.backLayoutTextsBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackLayoutTexts_property_selection, g_Preferences!.mergerColorBackLayoutTexts_property_selection, unwSelf.backComponentNamesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackComponentNames_property_selection, g_Preferences!.mergerColorBackComponentNames_property_selection, unwSelf.frontComponentNamesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontComponentNames_property_selection, g_Preferences!.mergerColorFrontComponentNames_property_selection, unwSelf.frontComponentValuesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontComponentValues_property_selection, g_Preferences!.mergerColorFrontComponentValues_property_selection, unwSelf.backComponentValuesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackComponentValues_property_selection, g_Preferences!.mergerColorBackComponentValues_property_selection, unwSelf.frontPackagesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayFrontPackages_property_selection, g_Preferences!.mergerColorFrontPackages_property_selection, unwSelf.backPackagesBezierPaths_property_selection, g_Preferences!.mergerBoardViewDisplayBackPackages_property_selection, g_Preferences!.mergerColorBackPackages_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16), .single (let v17), .single (let v18), .single (let v19), .single (let v20), .single (let v21), .single (let v22), .single (let v23), .single (let v24), .single (let v25), .single (let v26), .single (let v27), .single (let v28), .single (let v29), .single (let v30), .single (let v31), .single (let v32), .single (let v33), .single (let v34), .single (let v35), .single (let v36), .single (let v37), .single (let v38), .single (let v39), .single (let v40), .single (let v41), .single (let v42), .single (let v43), .single (let v44), .single (let v45), .single (let v46), .single (let v47), .single (let v48), .single (let v49), .single (let v50), .single (let v51), .single (let v52), .single (let v53), .single (let v54), .single (let v55), .single (let v56), .single (let v57), .single (let v58), .single (let v59)) :
            return .single (compute_BoardModel_imageForInstances (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--- Install property observers for transients
    self.myInstances_property.addEBObserver (self.instanceCount_property)
    g_Preferences?.mergerColorBackground_property.addEBObserver (self.backgroundLayerDisplay_property)
    self.modelWidth_property.addEBObserver (self.backgroundLayerDisplay_property)
    self.modelHeight_property.addEBObserver (self.backgroundLayerDisplay_property)
    self.frontLegendLines_property.addEBObserverOf_x1 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.addEBObserverOf_y1 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.addEBObserverOf_x2 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.addEBObserverOf_y2 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.addEBObserverOf_width (self.frontLegendLinesSegments_property)
    self.frontLegendLinesSegments_property.addEBObserver (self.frontLegendLinesBezierPaths_property)
    g_Preferences?.mergerColorFrontLegendLines_property.addEBObserver (self.frontLegendLinesLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontLegendLines_property.addEBObserver (self.frontLegendLinesLayerDisplay_property)
    self.frontLegendLinesSegments_property.addEBObserver (self.frontLegendLinesLayerDisplay_property)
    self.backLegendLines_property.addEBObserverOf_x1 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.addEBObserverOf_y1 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.addEBObserverOf_x2 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.addEBObserverOf_y2 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.addEBObserverOf_width (self.backLegendLinesSegments_property)
    self.backLegendLinesSegments_property.addEBObserver (self.backLegendLinesBezierPaths_property)
    g_Preferences?.mergerColorBackLegendLines_property.addEBObserver (self.backLegendLinesLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackLegendLines_property.addEBObserver (self.backLegendLinesLayerDisplay_property)
    self.backLegendLinesSegments_property.addEBObserver (self.backLegendLinesLayerDisplay_property)
    self.frontLegendTexts_property.addEBObserverOf_x1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_y1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_x2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_y2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.addEBObserverOf_width (self.frontLegendTextsSegments_property)
    self.frontLegendTextsSegments_property.addEBObserver (self.frontLegendTextsBezierPaths_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.addEBObserver (self.frontLegendTextsLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontLegendTexts_property.addEBObserver (self.frontLegendTextsLayerDisplay_property)
    self.frontLegendTextsSegments_property.addEBObserver (self.frontLegendTextsLayerDisplay_property)
    self.frontLayoutTexts_property.addEBObserverOf_x1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_y1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_x2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_y2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.addEBObserverOf_width (self.frontLayoutTextsSegments_property)
    self.frontLayoutTextsSegments_property.addEBObserver (self.frontLayoutTextsBezierPaths_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.addEBObserver (self.frontLayoutTextsLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontLayoutTexts_property.addEBObserver (self.frontLayoutTextsLayerDisplay_property)
    self.frontLayoutTextsSegments_property.addEBObserver (self.frontLayoutTextsLayerDisplay_property)
    self.backLegendTexts_property.addEBObserverOf_x1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_y1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_x2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_y2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.addEBObserverOf_width (self.backLegendTextsSegments_property)
    self.backLegendTextsSegments_property.addEBObserver (self.backLegendTextsBezierPaths_property)
    g_Preferences?.mergerColorBackLegendTexts_property.addEBObserver (self.backLegendTextsLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackLegendTexts_property.addEBObserver (self.backLegendTextsLayerDisplay_property)
    self.backLegendTextsSegments_property.addEBObserver (self.backLegendTextsLayerDisplay_property)
    self.backLayoutTexts_property.addEBObserverOf_x1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_y1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_x2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_y2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.addEBObserverOf_width (self.backLayoutTextsSegments_property)
    self.backLayoutTextsSegments_property.addEBObserver (self.backLayoutTextsBezierPaths_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.addEBObserver (self.backLayoutTextsLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackLayoutTexts_property.addEBObserver (self.backLayoutTextsLayerDisplay_property)
    self.backLayoutTextsSegments_property.addEBObserver (self.backLayoutTextsLayerDisplay_property)
    self.pads_property.addEBObserverOf_x (self.padsHoles_property)
    self.pads_property.addEBObserverOf_y (self.padsHoles_property)
    self.pads_property.addEBObserverOf_holeDiameter (self.padsHoles_property)
    self.vias_property.addEBObserverOf_x (self.viasHoles_property)
    self.vias_property.addEBObserverOf_y (self.viasHoles_property)
    self.vias_property.addEBObserverOf_holeDiameter (self.viasHoles_property)
    self.padsHoles_property.addEBObserver (self.holes_property)
    self.viasHoles_property.addEBObserver (self.holes_property)
    self.holes_property.addEBObserver (self.holesBezierPaths_property)
    g_Preferences?.mergerColorHoles_property.addEBObserver (self.holeLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayHoles_property.addEBObserver (self.holeLayerDisplay_property)
    self.holes_property.addEBObserver (self.holeLayerDisplay_property)
    self.vias_property.addEBObserverOf_x (self.viaShapes_property)
    self.vias_property.addEBObserverOf_y (self.viaShapes_property)
    self.vias_property.addEBObserverOf_padDiameter (self.viaShapes_property)
    self.viaShapes_property.addEBObserver (self.viasBezierPaths_property)
    g_Preferences?.mergerColorVias_property.addEBObserver (self.viaLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayVias_property.addEBObserver (self.viaLayerDisplay_property)
    self.viaShapes_property.addEBObserver (self.viaLayerDisplay_property)
    self.pads_property.addEBObserverOf_x (self.frontPads_property)
    self.pads_property.addEBObserverOf_y (self.frontPads_property)
    self.pads_property.addEBObserverOf_width (self.frontPads_property)
    self.pads_property.addEBObserverOf_height (self.frontPads_property)
    self.pads_property.addEBObserverOf_holeDiameter (self.frontPads_property)
    self.pads_property.addEBObserverOf_shape (self.frontPads_property)
    self.pads_property.addEBObserverOf_side (self.frontPads_property)
    self.pads_property.addEBObserverOf_rotation (self.frontPads_property)
    self.frontPads_property.addEBObserver (self.frontPadsBezierPaths_property)
    g_Preferences?.mergerColorFrontPads_property.addEBObserver (self.frontPadsDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontPads_property.addEBObserver (self.frontPadsDisplay_property)
    self.frontPads_property.addEBObserver (self.frontPadsDisplay_property)
    self.pads_property.addEBObserverOf_x (self.backPads_property)
    self.pads_property.addEBObserverOf_y (self.backPads_property)
    self.pads_property.addEBObserverOf_width (self.backPads_property)
    self.pads_property.addEBObserverOf_height (self.backPads_property)
    self.pads_property.addEBObserverOf_holeDiameter (self.backPads_property)
    self.pads_property.addEBObserverOf_shape (self.backPads_property)
    self.pads_property.addEBObserverOf_side (self.backPads_property)
    self.pads_property.addEBObserverOf_rotation (self.backPads_property)
    self.backPads_property.addEBObserver (self.backPadsBezierPaths_property)
    g_Preferences?.mergerColorBackPads_property.addEBObserver (self.backPadsDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackPads_property.addEBObserver (self.backPadsDisplay_property)
    self.backPads_property.addEBObserver (self.backPadsDisplay_property)
    self.modelWidth_property.addEBObserver (self.boardLimits_property)
    self.modelHeight_property.addEBObserver (self.boardLimits_property)
    self.modelLimitWidth_property.addEBObserver (self.boardLimits_property)
    g_Preferences?.mergerModelViewDisplayBoardLimits_property.addEBObserver (self.boardLimits_property)
    self.modelWidth_property.addEBObserver (self.boardLimitsBezierPaths_property)
    self.modelHeight_property.addEBObserver (self.boardLimitsBezierPaths_property)
    self.modelLimitWidth_property.addEBObserver (self.boardLimitsBezierPaths_property)
    g_Preferences?.mergerColorBoardLimits_property.addEBObserver (self.boardLimitsDisplay_property)
    g_Preferences?.mergerModelViewDisplayBoardLimits_property.addEBObserver (self.boardLimitsDisplay_property)
    self.boardLimits_property.addEBObserver (self.boardLimitsDisplay_property)
    self.backComponentNames_property.addEBObserverOf_x1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_y1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_x2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_y2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.addEBObserverOf_width (self.backComponentNameSegments_property)
    self.backComponentNameSegments_property.addEBObserver (self.backComponentNamesBezierPaths_property)
    g_Preferences?.mergerColorBackComponentNames_property.addEBObserver (self.backComponentNameDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackComponentNames_property.addEBObserver (self.backComponentNameDisplay_property)
    self.backComponentNameSegments_property.addEBObserver (self.backComponentNameDisplay_property)
    self.frontComponentNames_property.addEBObserverOf_x1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_y1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_x2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_y2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.addEBObserverOf_width (self.frontComponentNameSegments_property)
    self.frontComponentNameSegments_property.addEBObserver (self.frontComponentNamesBezierPaths_property)
    g_Preferences?.mergerColorFrontComponentNames_property.addEBObserver (self.frontComponentNameDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontComponentNames_property.addEBObserver (self.frontComponentNameDisplay_property)
    self.frontComponentNameSegments_property.addEBObserver (self.frontComponentNameDisplay_property)
    self.frontComponentValues_property.addEBObserverOf_x1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_y1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_x2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_y2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.addEBObserverOf_width (self.frontComponentValueSegments_property)
    self.frontComponentValueSegments_property.addEBObserver (self.frontComponentValuesBezierPaths_property)
    g_Preferences?.mergerColorFrontComponentValues_property.addEBObserver (self.frontComponentValueDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontComponentValues_property.addEBObserver (self.frontComponentValueDisplay_property)
    self.frontComponentValueSegments_property.addEBObserver (self.frontComponentValueDisplay_property)
    self.backComponentValues_property.addEBObserverOf_x1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_y1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_x2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_y2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.addEBObserverOf_width (self.backComponentValueSegments_property)
    self.backComponentValueSegments_property.addEBObserver (self.backComponentValuesBezierPaths_property)
    g_Preferences?.mergerColorBackComponentValues_property.addEBObserver (self.backComponentValueDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackComponentValues_property.addEBObserver (self.backComponentValueDisplay_property)
    self.backComponentValueSegments_property.addEBObserver (self.backComponentValueDisplay_property)
    self.backTracks_property.addEBObserverOf_x1 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_y1 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_x2 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_y2 (self.backTrackSegments_property)
    self.backTracks_property.addEBObserverOf_width (self.backTrackSegments_property)
    self.backTrackSegments_property.addEBObserver (self.backTracksBezierPaths_property)
    g_Preferences?.mergerColorBackTracks_property.addEBObserver (self.backTracksDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackTracks_property.addEBObserver (self.backTracksDisplay_property)
    self.backTrackSegments_property.addEBObserver (self.backTracksDisplay_property)
    self.frontTracks_property.addEBObserverOf_x1 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_y1 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_x2 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_y2 (self.frontTrackSegments_property)
    self.frontTracks_property.addEBObserverOf_width (self.frontTrackSegments_property)
    self.frontTrackSegments_property.addEBObserver (self.frontTracksBezierPaths_property)
    g_Preferences?.mergerColorFrontTracks_property.addEBObserver (self.frontTracksDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontTracks_property.addEBObserver (self.frontTracksDisplay_property)
    self.frontTrackSegments_property.addEBObserver (self.frontTracksDisplay_property)
    self.frontPackages_property.addEBObserverOf_x1 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_y1 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_x2 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_y2 (self.frontPackagesSegments_property)
    self.frontPackages_property.addEBObserverOf_width (self.frontPackagesSegments_property)
    self.frontPackagesSegments_property.addEBObserver (self.frontPackagesBezierPaths_property)
    g_Preferences?.mergerColorFrontPackages_property.addEBObserver (self.frontPackagesDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontPackages_property.addEBObserver (self.frontPackagesDisplay_property)
    self.frontPackagesSegments_property.addEBObserver (self.frontPackagesDisplay_property)
    self.backPackages_property.addEBObserverOf_x1 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_y1 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_x2 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_y2 (self.backPackagesSegments_property)
    self.backPackages_property.addEBObserverOf_width (self.backPackagesSegments_property)
    self.backPackagesSegments_property.addEBObserver (self.backPackagesBezierPaths_property)
    g_Preferences?.mergerColorBackPackages_property.addEBObserver (self.backPackagesDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackPackages_property.addEBObserver (self.backPackagesDisplay_property)
    self.backPackagesSegments_property.addEBObserver (self.backPackagesDisplay_property)
    self.backgroundLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backLegendTextsLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backLayoutTextsLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontLegendTextsLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontLayoutTextsLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.holeLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.viaLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontPadsDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backPadsDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.boardLimitsDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backComponentNameDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontComponentNameDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontComponentValueDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backComponentValueDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backTracksDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontTracksDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontPackagesDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backPackagesDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.backLegendLinesLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    self.frontLegendLinesLayerDisplay_property.addEBObserver (self.modelLayerDisplay_property)
    g_Preferences?.mergerColorBackground_property.addEBObserver (self.imageForInstances_property)
    self.modelWidth_property.addEBObserver (self.imageForInstances_property)
    self.modelHeight_property.addEBObserver (self.imageForInstances_property)
    self.frontTracksBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontTracks_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontTracks_property.addEBObserver (self.imageForInstances_property)
    self.backTracksBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackTracks_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackTracks_property.addEBObserver (self.imageForInstances_property)
    self.boardLimitsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayInternalBoardLimits_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorInternalBoardLimits_property.addEBObserver (self.imageForInstances_property)
    self.frontPadsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontPads_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontPads_property.addEBObserver (self.imageForInstances_property)
    self.backPadsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackPads_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackPads_property.addEBObserver (self.imageForInstances_property)
    self.viasBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayVias_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorVias_property.addEBObserver (self.imageForInstances_property)
    self.holesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayHoles_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorHoles_property.addEBObserver (self.imageForInstances_property)
    self.frontLegendLinesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendLines_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLegendLines_property.addEBObserver (self.imageForInstances_property)
    self.backLegendLinesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendLines_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLegendLines_property.addEBObserver (self.imageForInstances_property)
    self.frontLegendTextsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendTexts_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.addEBObserver (self.imageForInstances_property)
    self.frontLayoutTextsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLayoutTexts_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.addEBObserver (self.imageForInstances_property)
    self.backLegendTextsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendTexts_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLegendTexts_property.addEBObserver (self.imageForInstances_property)
    self.backLayoutTextsBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLayoutTexts_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.addEBObserver (self.imageForInstances_property)
    self.backComponentNamesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentNames_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackComponentNames_property.addEBObserver (self.imageForInstances_property)
    self.frontComponentNamesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentNames_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontComponentNames_property.addEBObserver (self.imageForInstances_property)
    self.frontComponentValuesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentValues_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontComponentValues_property.addEBObserver (self.imageForInstances_property)
    self.backComponentValuesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentValues_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackComponentValues_property.addEBObserver (self.imageForInstances_property)
    self.frontPackagesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontPackages_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontPackages_property.addEBObserver (self.imageForInstances_property)
    self.backPackagesBezierPaths_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackPackages_property.addEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackPackages_property.addEBObserver (self.imageForInstances_property)
  //--- Install undoers for properties
    self.artworkName_property.undoManager = undoManager ()
    self.name_property.undoManager = undoManager ()
    self.modelWidth_property.undoManager = undoManager ()
    self.modelWidthUnit_property.undoManager = undoManager ()
    self.modelHeight_property.undoManager = undoManager ()
    self.modelHeightUnit_property.undoManager = undoManager ()
    self.zoom_property.undoManager = undoManager ()
    self.modelLimitWidth_property.undoManager = undoManager ()
    self.modelLimitWidthUnit_property.undoManager = undoManager ()
  //--- Install owner for relationships
    self.myInstances_property.owner = self
    self.frontLegendLines_property.owner = self
    self.backLegendLines_property.owner = self
    self.frontLegendTexts_property.owner = self
    self.frontLayoutTexts_property.owner = self
    self.backLegendTexts_property.owner = self
    self.backLayoutTexts_property.owner = self
    self.vias_property.owner = self
    self.pads_property.owner = self
    self.backComponentNames_property.owner = self
    self.frontComponentNames_property.owner = self
    self.frontComponentValues_property.owner = self
    self.backComponentValues_property.owner = self
    self.backTracks_property.owner = self
    self.frontTracks_property.owner = self
    self.frontPackages_property.owner = self
    self.backPackages_property.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.myInstances_property.removeEBObserver (self.instanceCount_property)
    g_Preferences?.mergerColorBackground_property.removeEBObserver (self.backgroundLayerDisplay_property)
    self.modelWidth_property.removeEBObserver (self.backgroundLayerDisplay_property)
    self.modelHeight_property.removeEBObserver (self.backgroundLayerDisplay_property)
    self.frontLegendLines_property.removeEBObserverOf_x1 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.removeEBObserverOf_y1 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.removeEBObserverOf_x2 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.removeEBObserverOf_y2 (self.frontLegendLinesSegments_property)
    self.frontLegendLines_property.removeEBObserverOf_width (self.frontLegendLinesSegments_property)
    self.frontLegendLinesSegments_property.removeEBObserver (self.frontLegendLinesBezierPaths_property)
    g_Preferences?.mergerColorFrontLegendLines_property.removeEBObserver (self.frontLegendLinesLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontLegendLines_property.removeEBObserver (self.frontLegendLinesLayerDisplay_property)
    self.frontLegendLinesSegments_property.removeEBObserver (self.frontLegendLinesLayerDisplay_property)
    self.backLegendLines_property.removeEBObserverOf_x1 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_y1 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_x2 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_y2 (self.backLegendLinesSegments_property)
    self.backLegendLines_property.removeEBObserverOf_width (self.backLegendLinesSegments_property)
    self.backLegendLinesSegments_property.removeEBObserver (self.backLegendLinesBezierPaths_property)
    g_Preferences?.mergerColorBackLegendLines_property.removeEBObserver (self.backLegendLinesLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackLegendLines_property.removeEBObserver (self.backLegendLinesLayerDisplay_property)
    self.backLegendLinesSegments_property.removeEBObserver (self.backLegendLinesLayerDisplay_property)
    self.frontLegendTexts_property.removeEBObserverOf_x1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_y1 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_x2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_y2 (self.frontLegendTextsSegments_property)
    self.frontLegendTexts_property.removeEBObserverOf_width (self.frontLegendTextsSegments_property)
    self.frontLegendTextsSegments_property.removeEBObserver (self.frontLegendTextsBezierPaths_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.removeEBObserver (self.frontLegendTextsLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontLegendTexts_property.removeEBObserver (self.frontLegendTextsLayerDisplay_property)
    self.frontLegendTextsSegments_property.removeEBObserver (self.frontLegendTextsLayerDisplay_property)
    self.frontLayoutTexts_property.removeEBObserverOf_x1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_y1 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_x2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_y2 (self.frontLayoutTextsSegments_property)
    self.frontLayoutTexts_property.removeEBObserverOf_width (self.frontLayoutTextsSegments_property)
    self.frontLayoutTextsSegments_property.removeEBObserver (self.frontLayoutTextsBezierPaths_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.removeEBObserver (self.frontLayoutTextsLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontLayoutTexts_property.removeEBObserver (self.frontLayoutTextsLayerDisplay_property)
    self.frontLayoutTextsSegments_property.removeEBObserver (self.frontLayoutTextsLayerDisplay_property)
    self.backLegendTexts_property.removeEBObserverOf_x1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_y1 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_x2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_y2 (self.backLegendTextsSegments_property)
    self.backLegendTexts_property.removeEBObserverOf_width (self.backLegendTextsSegments_property)
    self.backLegendTextsSegments_property.removeEBObserver (self.backLegendTextsBezierPaths_property)
    g_Preferences?.mergerColorBackLegendTexts_property.removeEBObserver (self.backLegendTextsLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackLegendTexts_property.removeEBObserver (self.backLegendTextsLayerDisplay_property)
    self.backLegendTextsSegments_property.removeEBObserver (self.backLegendTextsLayerDisplay_property)
    self.backLayoutTexts_property.removeEBObserverOf_x1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_y1 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_x2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_y2 (self.backLayoutTextsSegments_property)
    self.backLayoutTexts_property.removeEBObserverOf_width (self.backLayoutTextsSegments_property)
    self.backLayoutTextsSegments_property.removeEBObserver (self.backLayoutTextsBezierPaths_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.removeEBObserver (self.backLayoutTextsLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackLayoutTexts_property.removeEBObserver (self.backLayoutTextsLayerDisplay_property)
    self.backLayoutTextsSegments_property.removeEBObserver (self.backLayoutTextsLayerDisplay_property)
    self.pads_property.removeEBObserverOf_x (self.padsHoles_property)
    self.pads_property.removeEBObserverOf_y (self.padsHoles_property)
    self.pads_property.removeEBObserverOf_holeDiameter (self.padsHoles_property)
    self.vias_property.removeEBObserverOf_x (self.viasHoles_property)
    self.vias_property.removeEBObserverOf_y (self.viasHoles_property)
    self.vias_property.removeEBObserverOf_holeDiameter (self.viasHoles_property)
    self.padsHoles_property.removeEBObserver (self.holes_property)
    self.viasHoles_property.removeEBObserver (self.holes_property)
    self.holes_property.removeEBObserver (self.holesBezierPaths_property)
    g_Preferences?.mergerColorHoles_property.removeEBObserver (self.holeLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayHoles_property.removeEBObserver (self.holeLayerDisplay_property)
    self.holes_property.removeEBObserver (self.holeLayerDisplay_property)
    self.vias_property.removeEBObserverOf_x (self.viaShapes_property)
    self.vias_property.removeEBObserverOf_y (self.viaShapes_property)
    self.vias_property.removeEBObserverOf_padDiameter (self.viaShapes_property)
    self.viaShapes_property.removeEBObserver (self.viasBezierPaths_property)
    g_Preferences?.mergerColorVias_property.removeEBObserver (self.viaLayerDisplay_property)
    g_Preferences?.mergerModelViewDisplayVias_property.removeEBObserver (self.viaLayerDisplay_property)
    self.viaShapes_property.removeEBObserver (self.viaLayerDisplay_property)
    self.pads_property.removeEBObserverOf_x (self.frontPads_property)
    self.pads_property.removeEBObserverOf_y (self.frontPads_property)
    self.pads_property.removeEBObserverOf_width (self.frontPads_property)
    self.pads_property.removeEBObserverOf_height (self.frontPads_property)
    self.pads_property.removeEBObserverOf_holeDiameter (self.frontPads_property)
    self.pads_property.removeEBObserverOf_shape (self.frontPads_property)
    self.pads_property.removeEBObserverOf_side (self.frontPads_property)
    self.pads_property.removeEBObserverOf_rotation (self.frontPads_property)
    self.frontPads_property.removeEBObserver (self.frontPadsBezierPaths_property)
    g_Preferences?.mergerColorFrontPads_property.removeEBObserver (self.frontPadsDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontPads_property.removeEBObserver (self.frontPadsDisplay_property)
    self.frontPads_property.removeEBObserver (self.frontPadsDisplay_property)
    self.pads_property.removeEBObserverOf_x (self.backPads_property)
    self.pads_property.removeEBObserverOf_y (self.backPads_property)
    self.pads_property.removeEBObserverOf_width (self.backPads_property)
    self.pads_property.removeEBObserverOf_height (self.backPads_property)
    self.pads_property.removeEBObserverOf_holeDiameter (self.backPads_property)
    self.pads_property.removeEBObserverOf_shape (self.backPads_property)
    self.pads_property.removeEBObserverOf_side (self.backPads_property)
    self.pads_property.removeEBObserverOf_rotation (self.backPads_property)
    self.backPads_property.removeEBObserver (self.backPadsBezierPaths_property)
    g_Preferences?.mergerColorBackPads_property.removeEBObserver (self.backPadsDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackPads_property.removeEBObserver (self.backPadsDisplay_property)
    self.backPads_property.removeEBObserver (self.backPadsDisplay_property)
    self.modelWidth_property.removeEBObserver (self.boardLimits_property)
    self.modelHeight_property.removeEBObserver (self.boardLimits_property)
    self.modelLimitWidth_property.removeEBObserver (self.boardLimits_property)
    g_Preferences?.mergerModelViewDisplayBoardLimits_property.removeEBObserver (self.boardLimits_property)
    self.modelWidth_property.removeEBObserver (self.boardLimitsBezierPaths_property)
    self.modelHeight_property.removeEBObserver (self.boardLimitsBezierPaths_property)
    self.modelLimitWidth_property.removeEBObserver (self.boardLimitsBezierPaths_property)
    g_Preferences?.mergerColorBoardLimits_property.removeEBObserver (self.boardLimitsDisplay_property)
    g_Preferences?.mergerModelViewDisplayBoardLimits_property.removeEBObserver (self.boardLimitsDisplay_property)
    self.boardLimits_property.removeEBObserver (self.boardLimitsDisplay_property)
    self.backComponentNames_property.removeEBObserverOf_x1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_y1 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_x2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_y2 (self.backComponentNameSegments_property)
    self.backComponentNames_property.removeEBObserverOf_width (self.backComponentNameSegments_property)
    self.backComponentNameSegments_property.removeEBObserver (self.backComponentNamesBezierPaths_property)
    g_Preferences?.mergerColorBackComponentNames_property.removeEBObserver (self.backComponentNameDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackComponentNames_property.removeEBObserver (self.backComponentNameDisplay_property)
    self.backComponentNameSegments_property.removeEBObserver (self.backComponentNameDisplay_property)
    self.frontComponentNames_property.removeEBObserverOf_x1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_y1 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_x2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_y2 (self.frontComponentNameSegments_property)
    self.frontComponentNames_property.removeEBObserverOf_width (self.frontComponentNameSegments_property)
    self.frontComponentNameSegments_property.removeEBObserver (self.frontComponentNamesBezierPaths_property)
    g_Preferences?.mergerColorFrontComponentNames_property.removeEBObserver (self.frontComponentNameDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontComponentNames_property.removeEBObserver (self.frontComponentNameDisplay_property)
    self.frontComponentNameSegments_property.removeEBObserver (self.frontComponentNameDisplay_property)
    self.frontComponentValues_property.removeEBObserverOf_x1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_y1 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_x2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_y2 (self.frontComponentValueSegments_property)
    self.frontComponentValues_property.removeEBObserverOf_width (self.frontComponentValueSegments_property)
    self.frontComponentValueSegments_property.removeEBObserver (self.frontComponentValuesBezierPaths_property)
    g_Preferences?.mergerColorFrontComponentValues_property.removeEBObserver (self.frontComponentValueDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontComponentValues_property.removeEBObserver (self.frontComponentValueDisplay_property)
    self.frontComponentValueSegments_property.removeEBObserver (self.frontComponentValueDisplay_property)
    self.backComponentValues_property.removeEBObserverOf_x1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_y1 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_x2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_y2 (self.backComponentValueSegments_property)
    self.backComponentValues_property.removeEBObserverOf_width (self.backComponentValueSegments_property)
    self.backComponentValueSegments_property.removeEBObserver (self.backComponentValuesBezierPaths_property)
    g_Preferences?.mergerColorBackComponentValues_property.removeEBObserver (self.backComponentValueDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackComponentValues_property.removeEBObserver (self.backComponentValueDisplay_property)
    self.backComponentValueSegments_property.removeEBObserver (self.backComponentValueDisplay_property)
    self.backTracks_property.removeEBObserverOf_x1 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_y1 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_x2 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_y2 (self.backTrackSegments_property)
    self.backTracks_property.removeEBObserverOf_width (self.backTrackSegments_property)
    self.backTrackSegments_property.removeEBObserver (self.backTracksBezierPaths_property)
    g_Preferences?.mergerColorBackTracks_property.removeEBObserver (self.backTracksDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackTracks_property.removeEBObserver (self.backTracksDisplay_property)
    self.backTrackSegments_property.removeEBObserver (self.backTracksDisplay_property)
    self.frontTracks_property.removeEBObserverOf_x1 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_y1 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_x2 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_y2 (self.frontTrackSegments_property)
    self.frontTracks_property.removeEBObserverOf_width (self.frontTrackSegments_property)
    self.frontTrackSegments_property.removeEBObserver (self.frontTracksBezierPaths_property)
    g_Preferences?.mergerColorFrontTracks_property.removeEBObserver (self.frontTracksDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontTracks_property.removeEBObserver (self.frontTracksDisplay_property)
    self.frontTrackSegments_property.removeEBObserver (self.frontTracksDisplay_property)
    self.frontPackages_property.removeEBObserverOf_x1 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_y1 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_x2 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_y2 (self.frontPackagesSegments_property)
    self.frontPackages_property.removeEBObserverOf_width (self.frontPackagesSegments_property)
    self.frontPackagesSegments_property.removeEBObserver (self.frontPackagesBezierPaths_property)
    g_Preferences?.mergerColorFrontPackages_property.removeEBObserver (self.frontPackagesDisplay_property)
    g_Preferences?.mergerModelViewDisplayFrontPackages_property.removeEBObserver (self.frontPackagesDisplay_property)
    self.frontPackagesSegments_property.removeEBObserver (self.frontPackagesDisplay_property)
    self.backPackages_property.removeEBObserverOf_x1 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_y1 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_x2 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_y2 (self.backPackagesSegments_property)
    self.backPackages_property.removeEBObserverOf_width (self.backPackagesSegments_property)
    self.backPackagesSegments_property.removeEBObserver (self.backPackagesBezierPaths_property)
    g_Preferences?.mergerColorBackPackages_property.removeEBObserver (self.backPackagesDisplay_property)
    g_Preferences?.mergerModelViewDisplayBackPackages_property.removeEBObserver (self.backPackagesDisplay_property)
    self.backPackagesSegments_property.removeEBObserver (self.backPackagesDisplay_property)
    self.backgroundLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backLegendTextsLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backLayoutTextsLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontLegendTextsLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontLayoutTextsLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.holeLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.viaLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontPadsDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backPadsDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.boardLimitsDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backComponentNameDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontComponentNameDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontComponentValueDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backComponentValueDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backTracksDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontTracksDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontPackagesDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backPackagesDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.backLegendLinesLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    self.frontLegendLinesLayerDisplay_property.removeEBObserver (self.modelLayerDisplay_property)
    g_Preferences?.mergerColorBackground_property.removeEBObserver (self.imageForInstances_property)
    self.modelWidth_property.removeEBObserver (self.imageForInstances_property)
    self.modelHeight_property.removeEBObserver (self.imageForInstances_property)
    self.frontTracksBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontTracks_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontTracks_property.removeEBObserver (self.imageForInstances_property)
    self.backTracksBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackTracks_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackTracks_property.removeEBObserver (self.imageForInstances_property)
    self.boardLimitsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayInternalBoardLimits_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorInternalBoardLimits_property.removeEBObserver (self.imageForInstances_property)
    self.frontPadsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontPads_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontPads_property.removeEBObserver (self.imageForInstances_property)
    self.backPadsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackPads_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackPads_property.removeEBObserver (self.imageForInstances_property)
    self.viasBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayVias_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorVias_property.removeEBObserver (self.imageForInstances_property)
    self.holesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayHoles_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorHoles_property.removeEBObserver (self.imageForInstances_property)
    self.frontLegendLinesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendLines_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLegendLines_property.removeEBObserver (self.imageForInstances_property)
    self.backLegendLinesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendLines_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLegendLines_property.removeEBObserver (self.imageForInstances_property)
    self.frontLegendTextsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendTexts_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.removeEBObserver (self.imageForInstances_property)
    self.frontLayoutTextsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontLayoutTexts_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.removeEBObserver (self.imageForInstances_property)
    self.backLegendTextsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendTexts_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLegendTexts_property.removeEBObserver (self.imageForInstances_property)
    self.backLayoutTextsBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackLayoutTexts_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.removeEBObserver (self.imageForInstances_property)
    self.backComponentNamesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentNames_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackComponentNames_property.removeEBObserver (self.imageForInstances_property)
    self.frontComponentNamesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentNames_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontComponentNames_property.removeEBObserver (self.imageForInstances_property)
    self.frontComponentValuesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentValues_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontComponentValues_property.removeEBObserver (self.imageForInstances_property)
    self.backComponentValuesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentValues_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackComponentValues_property.removeEBObserver (self.imageForInstances_property)
    self.frontPackagesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayFrontPackages_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorFrontPackages_property.removeEBObserver (self.imageForInstances_property)
    self.backPackagesBezierPaths_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerBoardViewDisplayBackPackages_property.removeEBObserver (self.imageForInstances_property)
    g_Preferences?.mergerColorBackPackages_property.removeEBObserver (self.imageForInstances_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "artworkName",
      idx:self.artworkName_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.artworkName_property.mObserverExplorer,
      valueExplorer:&self.artworkName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name_property.mObserverExplorer,
      valueExplorer:&self.name_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelWidth",
      idx:self.modelWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelWidth_property.mObserverExplorer,
      valueExplorer:&self.modelWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelWidthUnit",
      idx:self.modelWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.modelWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelHeight",
      idx:self.modelHeight_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelHeight_property.mObserverExplorer,
      valueExplorer:&self.modelHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelHeightUnit",
      idx:self.modelHeightUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelHeightUnit_property.mObserverExplorer,
      valueExplorer:&self.modelHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom_property.mObserverExplorer,
      valueExplorer:&self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelLimitWidth",
      idx:self.modelLimitWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelLimitWidth_property.mObserverExplorer,
      valueExplorer:&self.modelLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelLimitWidthUnit",
      idx:self.modelLimitWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelLimitWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.modelLimitWidthUnit_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "instanceCount",
      idx:self.instanceCount_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceCount_property.mObserverExplorer,
      valueExplorer:&self.instanceCount_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backgroundLayerDisplay",
      idx:self.backgroundLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backgroundLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.backgroundLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendLinesSegments",
      idx:self.frontLegendLinesSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendLinesSegments_property.mObserverExplorer,
      valueExplorer:&self.frontLegendLinesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendLinesBezierPaths",
      idx:self.frontLegendLinesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendLinesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontLegendLinesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendLinesLayerDisplay",
      idx:self.frontLegendLinesLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendLinesLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontLegendLinesLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendLinesSegments",
      idx:self.backLegendLinesSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendLinesSegments_property.mObserverExplorer,
      valueExplorer:&self.backLegendLinesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendLinesBezierPaths",
      idx:self.backLegendLinesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendLinesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backLegendLinesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendLinesLayerDisplay",
      idx:self.backLegendLinesLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendLinesLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.backLegendLinesLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsSegments",
      idx:self.frontLegendTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.frontLegendTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsBezierPaths",
      idx:self.frontLegendTextsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendTextsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontLegendTextsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsLayerDisplay",
      idx:self.frontLegendTextsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendTextsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontLegendTextsLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsSegments",
      idx:self.frontLayoutTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLayoutTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.frontLayoutTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsBezierPaths",
      idx:self.frontLayoutTextsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLayoutTextsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontLayoutTextsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsLayerDisplay",
      idx:self.frontLayoutTextsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLayoutTextsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontLayoutTextsLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsSegments",
      idx:self.backLegendTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.backLegendTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsBezierPaths",
      idx:self.backLegendTextsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendTextsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backLegendTextsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsLayerDisplay",
      idx:self.backLegendTextsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendTextsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.backLegendTextsLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsSegments",
      idx:self.backLayoutTextsSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLayoutTextsSegments_property.mObserverExplorer,
      valueExplorer:&self.backLayoutTextsSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsBezierPaths",
      idx:self.backLayoutTextsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLayoutTextsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backLayoutTextsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsLayerDisplay",
      idx:self.backLayoutTextsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLayoutTextsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.backLayoutTextsLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padsHoles",
      idx:self.padsHoles_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padsHoles_property.mObserverExplorer,
      valueExplorer:&self.padsHoles_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viasHoles",
      idx:self.viasHoles_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viasHoles_property.mObserverExplorer,
      valueExplorer:&self.viasHoles_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holes",
      idx:self.holes_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holes_property.mObserverExplorer,
      valueExplorer:&self.holes_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holesBezierPaths",
      idx:self.holesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.holesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeLayerDisplay",
      idx:self.holeLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.holeLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaShapes",
      idx:self.viaShapes_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaShapes_property.mObserverExplorer,
      valueExplorer:&self.viaShapes_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viasBezierPaths",
      idx:self.viasBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viasBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.viasBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaLayerDisplay",
      idx:self.viaLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.viaLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPads",
      idx:self.frontPads_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPads_property.mObserverExplorer,
      valueExplorer:&self.frontPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPadsBezierPaths",
      idx:self.frontPadsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPadsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontPadsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPadsDisplay",
      idx:self.frontPadsDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPadsDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontPadsDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPads",
      idx:self.backPads_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPads_property.mObserverExplorer,
      valueExplorer:&self.backPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPadsBezierPaths",
      idx:self.backPadsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPadsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backPadsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPadsDisplay",
      idx:self.backPadsDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPadsDisplay_property.mObserverExplorer,
      valueExplorer:&self.backPadsDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimits",
      idx:self.boardLimits_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimits_property.mObserverExplorer,
      valueExplorer:&self.boardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitsBezierPaths",
      idx:self.boardLimitsBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitsBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.boardLimitsBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitsDisplay",
      idx:self.boardLimitsDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitsDisplay_property.mObserverExplorer,
      valueExplorer:&self.boardLimitsDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameSegments",
      idx:self.backComponentNameSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameSegments_property.mObserverExplorer,
      valueExplorer:&self.backComponentNameSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNamesBezierPaths",
      idx:self.backComponentNamesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNamesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backComponentNamesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameDisplay",
      idx:self.backComponentNameDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameDisplay_property.mObserverExplorer,
      valueExplorer:&self.backComponentNameDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameSegments",
      idx:self.frontComponentNameSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameSegments_property.mObserverExplorer,
      valueExplorer:&self.frontComponentNameSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNamesBezierPaths",
      idx:self.frontComponentNamesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNamesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontComponentNamesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameDisplay",
      idx:self.frontComponentNameDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontComponentNameDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValueSegments",
      idx:self.frontComponentValueSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValueSegments_property.mObserverExplorer,
      valueExplorer:&self.frontComponentValueSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValuesBezierPaths",
      idx:self.frontComponentValuesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValuesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontComponentValuesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValueDisplay",
      idx:self.frontComponentValueDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValueDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontComponentValueDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValueSegments",
      idx:self.backComponentValueSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValueSegments_property.mObserverExplorer,
      valueExplorer:&self.backComponentValueSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValuesBezierPaths",
      idx:self.backComponentValuesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValuesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backComponentValuesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValueDisplay",
      idx:self.backComponentValueDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValueDisplay_property.mObserverExplorer,
      valueExplorer:&self.backComponentValueDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTrackSegments",
      idx:self.backTrackSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTrackSegments_property.mObserverExplorer,
      valueExplorer:&self.backTrackSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTracksBezierPaths",
      idx:self.backTracksBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTracksBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backTracksBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTracksDisplay",
      idx:self.backTracksDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTracksDisplay_property.mObserverExplorer,
      valueExplorer:&self.backTracksDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTrackSegments",
      idx:self.frontTrackSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTrackSegments_property.mObserverExplorer,
      valueExplorer:&self.frontTrackSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTracksBezierPaths",
      idx:self.frontTracksBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTracksBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontTracksBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTracksDisplay",
      idx:self.frontTracksDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTracksDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontTracksDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesSegments",
      idx:self.frontPackagesSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackagesSegments_property.mObserverExplorer,
      valueExplorer:&self.frontPackagesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesBezierPaths",
      idx:self.frontPackagesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackagesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.frontPackagesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesDisplay",
      idx:self.frontPackagesDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackagesDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontPackagesDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesSegments",
      idx:self.backPackagesSegments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackagesSegments_property.mObserverExplorer,
      valueExplorer:&self.backPackagesSegments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesBezierPaths",
      idx:self.backPackagesBezierPaths_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackagesBezierPaths_property.mObserverExplorer,
      valueExplorer:&self.backPackagesBezierPaths_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesDisplay",
      idx:self.backPackagesDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackagesDisplay_property.mObserverExplorer,
      valueExplorer:&self.backPackagesDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelLayerDisplay",
      idx:self.modelLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.modelLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "imageForInstances",
      idx:self.imageForInstances_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.imageForInstances_property.mObserverExplorer,
      valueExplorer:&self.imageForInstances_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "myInstances",
      idx:myInstances_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&myInstances_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontLegendLines",
      idx:frontLegendLines_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLegendLines_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLegendLines",
      idx:backLegendLines_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLegendLines_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontLegendTexts",
      idx:frontLegendTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLegendTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontLayoutTexts",
      idx:frontLayoutTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontLayoutTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLegendTexts",
      idx:backLegendTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLegendTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backLayoutTexts",
      idx:backLayoutTexts_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backLayoutTexts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "vias",
      idx:vias_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&vias_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "pads",
      idx:pads_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&pads_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backComponentNames",
      idx:backComponentNames_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backComponentNames_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontComponentNames",
      idx:frontComponentNames_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontComponentNames_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontComponentValues",
      idx:frontComponentValues_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontComponentValues_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backComponentValues",
      idx:backComponentValues_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backComponentValues_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backTracks",
      idx:backTracks_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backTracks_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontTracks",
      idx:frontTracks_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontTracks_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "frontPackages",
      idx:frontPackages_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&frontPackages_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "backPackages",
      idx:backPackages_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&backPackages_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.artworkName_property.mObserverExplorer = nil
    self.artworkName_property.mValueExplorer = nil
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
    self.modelWidth_property.mObserverExplorer = nil
    self.modelWidth_property.mValueExplorer = nil
    self.modelWidthUnit_property.mObserverExplorer = nil
    self.modelWidthUnit_property.mValueExplorer = nil
    self.modelHeight_property.mObserverExplorer = nil
    self.modelHeight_property.mValueExplorer = nil
    self.modelHeightUnit_property.mObserverExplorer = nil
    self.modelHeightUnit_property.mValueExplorer = nil
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
    self.modelLimitWidth_property.mObserverExplorer = nil
    self.modelLimitWidth_property.mValueExplorer = nil
    self.modelLimitWidthUnit_property.mObserverExplorer = nil
    self.modelLimitWidthUnit_property.mValueExplorer = nil
    self.myInstances_property.mValueExplorer = nil
    self.frontLegendLines_property.mValueExplorer = nil
    self.backLegendLines_property.mValueExplorer = nil
    self.frontLegendTexts_property.mValueExplorer = nil
    self.frontLayoutTexts_property.mValueExplorer = nil
    self.backLegendTexts_property.mValueExplorer = nil
    self.backLayoutTexts_property.mValueExplorer = nil
    self.vias_property.mValueExplorer = nil
    self.pads_property.mValueExplorer = nil
    self.backComponentNames_property.mValueExplorer = nil
    self.frontComponentNames_property.mValueExplorer = nil
    self.frontComponentValues_property.mValueExplorer = nil
    self.backComponentValues_property.mValueExplorer = nil
    self.backTracks_property.mValueExplorer = nil
    self.frontTracks_property.mValueExplorer = nil
    self.frontPackages_property.mValueExplorer = nil
    self.backPackages_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.artworkName_property.storeIn (dictionary: ioDictionary, forKey: "artworkName")
    self.name_property.storeIn (dictionary: ioDictionary, forKey: "name")
    self.modelWidth_property.storeIn (dictionary: ioDictionary, forKey: "modelWidth")
    self.modelWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "modelWidthUnit")
    self.modelHeight_property.storeIn (dictionary: ioDictionary, forKey: "modelHeight")
    self.modelHeightUnit_property.storeIn (dictionary: ioDictionary, forKey: "modelHeightUnit")
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey: "zoom")
    self.modelLimitWidth_property.storeIn (dictionary: ioDictionary, forKey: "modelLimitWidth")
    self.modelLimitWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "modelLimitWidthUnit")
    store (managedObjectArray: myInstances_property.propval as NSArray, relationshipName:"myInstances", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontLegendLines_property.propval as NSArray, relationshipName:"frontLegendLines", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backLegendLines_property.propval as NSArray, relationshipName:"backLegendLines", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontLegendTexts_property.propval as NSArray, relationshipName:"frontLegendTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontLayoutTexts_property.propval as NSArray, relationshipName:"frontLayoutTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backLegendTexts_property.propval as NSArray, relationshipName:"backLegendTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backLayoutTexts_property.propval as NSArray, relationshipName:"backLayoutTexts", intoDictionary: ioDictionary) ;
    store (managedObjectArray: vias_property.propval as NSArray, relationshipName:"vias", intoDictionary: ioDictionary) ;
    store (managedObjectArray: pads_property.propval as NSArray, relationshipName:"pads", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backComponentNames_property.propval as NSArray, relationshipName:"backComponentNames", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontComponentNames_property.propval as NSArray, relationshipName:"frontComponentNames", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontComponentValues_property.propval as NSArray, relationshipName:"frontComponentValues", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backComponentValues_property.propval as NSArray, relationshipName:"backComponentValues", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backTracks_property.propval as NSArray, relationshipName:"backTracks", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontTracks_property.propval as NSArray, relationshipName:"frontTracks", intoDictionary: ioDictionary) ;
    store (managedObjectArray: frontPackages_property.propval as NSArray, relationshipName:"frontPackages", intoDictionary: ioDictionary) ;
    store (managedObjectArray: backPackages_property.propval as NSArray, relationshipName:"backPackages", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.artworkName_property.readFrom (dictionary: inDictionary, forKey:"artworkName")
    self.name_property.readFrom (dictionary: inDictionary, forKey:"name")
    self.modelWidth_property.readFrom (dictionary: inDictionary, forKey:"modelWidth")
    self.modelWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"modelWidthUnit")
    self.modelHeight_property.readFrom (dictionary: inDictionary, forKey:"modelHeight")
    self.modelHeightUnit_property.readFrom (dictionary: inDictionary, forKey:"modelHeightUnit")
    self.zoom_property.readFrom (dictionary: inDictionary, forKey:"zoom")
    self.modelLimitWidth_property.readFrom (dictionary: inDictionary, forKey:"modelLimitWidth")
    self.modelLimitWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"modelLimitWidthUnit")
    self.myInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "myInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [MergerBoardInstance])
    self.frontLegendLines_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLegendLines",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.backLegendLines_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLegendLines",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.frontLegendTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLegendTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.frontLayoutTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontLayoutTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.backLegendTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLegendTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.backLayoutTexts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backLayoutTexts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.vias_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "vias",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelVia])
    self.pads_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "pads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelPad])
    self.backComponentNames_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.frontComponentNames_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontComponentNames",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.frontComponentValues_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.backComponentValues_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backComponentValues",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.backTracks_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.frontTracks_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontTracks",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.frontPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "frontPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
    self.backPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "backPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [CanariSegment])
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    self.myInstances_property.setProp ([]) // Set relationships to nil
    do{
      let objects = self.frontLegendLines_property.propval
      self.frontLegendLines_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backLegendLines_property.propval
      self.backLegendLines_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontLegendTexts_property.propval
      self.frontLegendTexts_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontLayoutTexts_property.propval
      self.frontLayoutTexts_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backLegendTexts_property.propval
      self.backLegendTexts_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backLayoutTexts_property.propval
      self.backLayoutTexts_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.vias_property.propval
      self.vias_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.pads_property.propval
      self.pads_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backComponentNames_property.propval
      self.backComponentNames_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontComponentNames_property.propval
      self.frontComponentNames_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontComponentValues_property.propval
      self.frontComponentValues_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backComponentValues_property.propval
      self.backComponentValues_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backTracks_property.propval
      self.backTracks_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontTracks_property.propval
      self.frontTracks_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.frontPackages_property.propval
      self.frontPackages_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.backPackages_property.propval
      self.backPackages_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    self.myInstances_property.setProp ([])
    self.frontLegendLines_property.setProp ([])
    self.backLegendLines_property.setProp ([])
    self.frontLegendTexts_property.setProp ([])
    self.frontLayoutTexts_property.setProp ([])
    self.backLegendTexts_property.setProp ([])
    self.backLayoutTexts_property.setProp ([])
    self.vias_property.setProp ([])
    self.pads_property.setProp ([])
    self.backComponentNames_property.setProp ([])
    self.frontComponentNames_property.setProp ([])
    self.frontComponentValues_property.setProp ([])
    self.backComponentValues_property.setProp ([])
    self.backTracks_property.setProp ([])
    self.frontTracks_property.setProp ([])
    self.frontPackages_property.setProp ([])
    self.backPackages_property.setProp ([])
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in self.myInstances_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontLegendLines_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backLegendLines_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontLegendTexts_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontLayoutTexts_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backLegendTexts_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backLayoutTexts_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.vias_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.pads_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backComponentNames_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontComponentNames_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontComponentValues_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backComponentValues_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backTracks_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontTracks_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.frontPackages_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.backPackages_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardModel : ReadOnlyAbstractArrayProperty <BoardModel> {

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_artworkName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_artworkName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_artworkName {
        managedObject.artworkName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_artworkName {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.artworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_name.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_name.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_name {
        managedObject.name_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_name {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelWidth' stored property
  //····················································································································

  private var mObserversOf_modelWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelWidth_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelWidth {
        managedObject.modelWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelWidth_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_modelWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelWidthUnit' stored property
  //····················································································································

  private var mObserversOf_modelWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelWidthUnit_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelWidthUnit {
        managedObject.modelWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelWidthUnit_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_modelWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelHeight' stored property
  //····················································································································

  private var mObserversOf_modelHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelHeight_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelHeight {
        managedObject.modelHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelHeight_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_modelHeight {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelHeightUnit' stored property
  //····················································································································

  private var mObserversOf_modelHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelHeightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelHeightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelHeightUnit_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelHeightUnit {
        managedObject.modelHeightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelHeightUnit_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_modelHeightUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_zoom {
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_zoom {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelLimitWidth' stored property
  //····················································································································

  private var mObserversOf_modelLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelLimitWidth_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelLimitWidth {
        managedObject.modelLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelLimitWidth_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_modelLimitWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelLimitWidthUnit' stored property
  //····················································································································

  private var mObserversOf_modelLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelLimitWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLimitWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelLimitWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLimitWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelLimitWidthUnit_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelLimitWidthUnit {
        managedObject.modelLimitWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelLimitWidthUnit_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for observer in mObserversOf_modelLimitWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.modelLimitWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceCount' transient property
  //····················································································································

  private var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instanceCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instanceCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceCount_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceCount {
        managedObject.instanceCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceCount_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceCount {
        managedObject.instanceCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backgroundLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_backgroundLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backgroundLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backgroundLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backgroundLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backgroundLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backgroundLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backgroundLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backgroundLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backgroundLayerDisplay {
        managedObject.backgroundLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backgroundLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backgroundLayerDisplay {
        managedObject.backgroundLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendLinesSegments' transient property
  //····················································································································

  private var mObserversOf_frontLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendLinesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendLinesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendLinesSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendLinesSegments {
        managedObject.frontLegendLinesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendLinesSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendLinesSegments {
        managedObject.frontLegendLinesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendLinesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendLinesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendLinesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendLinesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendLinesBezierPaths {
        managedObject.frontLegendLinesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendLinesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendLinesBezierPaths {
        managedObject.frontLegendLinesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendLinesLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_frontLegendLinesLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendLinesLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendLinesLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendLinesLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendLinesLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendLinesLayerDisplay {
        managedObject.frontLegendLinesLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendLinesLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendLinesLayerDisplay {
        managedObject.frontLegendLinesLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendLinesSegments' transient property
  //····················································································································

  private var mObserversOf_backLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendLinesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendLinesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendLinesSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendLinesSegments {
        managedObject.backLegendLinesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendLinesSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendLinesSegments {
        managedObject.backLegendLinesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendLinesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendLinesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendLinesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendLinesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendLinesBezierPaths {
        managedObject.backLegendLinesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendLinesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendLinesBezierPaths {
        managedObject.backLegendLinesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendLinesLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_backLegendLinesLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendLinesLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendLinesLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendLinesLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendLinesLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendLinesLayerDisplay {
        managedObject.backLegendLinesLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendLinesLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendLinesLayerDisplay {
        managedObject.backLegendLinesLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsSegments' transient property
  //····················································································································

  private var mObserversOf_frontLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegments {
        managedObject.frontLegendTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsSegments {
        managedObject.frontLegendTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendTextsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendTextsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsBezierPaths {
        managedObject.frontLegendTextsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsBezierPaths {
        managedObject.frontLegendTextsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_frontLegendTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendTextsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendTextsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsLayerDisplay {
        managedObject.frontLegendTextsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsLayerDisplay {
        managedObject.frontLegendTextsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsSegments' transient property
  //····················································································································

  private var mObserversOf_frontLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLayoutTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegments {
        managedObject.frontLayoutTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsSegments {
        managedObject.frontLayoutTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLayoutTextsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLayoutTextsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsBezierPaths {
        managedObject.frontLayoutTextsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsBezierPaths {
        managedObject.frontLayoutTextsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_frontLayoutTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLayoutTextsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLayoutTextsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsLayerDisplay {
        managedObject.frontLayoutTextsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsLayerDisplay {
        managedObject.frontLayoutTextsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsSegments' transient property
  //····················································································································

  private var mObserversOf_backLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegments {
        managedObject.backLegendTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsSegments {
        managedObject.backLegendTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendTextsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendTextsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsBezierPaths {
        managedObject.backLegendTextsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsBezierPaths {
        managedObject.backLegendTextsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_backLegendTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendTextsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendTextsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsLayerDisplay {
        managedObject.backLegendTextsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsLayerDisplay {
        managedObject.backLegendTextsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsSegments' transient property
  //····················································································································

  private var mObserversOf_backLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLayoutTextsSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegments {
        managedObject.backLayoutTextsSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsSegments {
        managedObject.backLayoutTextsSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLayoutTextsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLayoutTextsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsBezierPaths {
        managedObject.backLayoutTextsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsBezierPaths {
        managedObject.backLayoutTextsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_backLayoutTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLayoutTextsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLayoutTextsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsLayerDisplay {
        managedObject.backLayoutTextsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsLayerDisplay {
        managedObject.backLayoutTextsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padsHoles' transient property
  //····················································································································

  private var mObserversOf_padsHoles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padsHoles (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_padsHoles.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padsHoles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padsHoles (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_padsHoles.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padsHoles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padsHoles_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_padsHoles {
        managedObject.padsHoles_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padsHoles_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_padsHoles {
        managedObject.padsHoles_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viasHoles' transient property
  //····················································································································

  private var mObserversOf_viasHoles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viasHoles (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viasHoles.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasHoles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viasHoles (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viasHoles.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasHoles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viasHoles_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_viasHoles {
        managedObject.viasHoles_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viasHoles_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_viasHoles {
        managedObject.viasHoles_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holes' transient property
  //····················································································································

  private var mObserversOf_holes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_holes.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holes_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_holes.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holes_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holes_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_holes {
        managedObject.holes_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holes_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_holes {
        managedObject.holes_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_holesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_holesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_holesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_holesBezierPaths {
        managedObject.holesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_holesBezierPaths {
        managedObject.holesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_holeLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_holeLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_holeLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_holeLayerDisplay {
        managedObject.holeLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_holeLayerDisplay {
        managedObject.holeLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaShapes' transient property
  //····················································································································

  private var mObserversOf_viaShapes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaShapes.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapes_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaShapes.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaShapes_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaShapes_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapes {
        managedObject.viaShapes_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaShapes_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaShapes {
        managedObject.viaShapes_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viasBezierPaths' transient property
  //····················································································································

  private var mObserversOf_viasBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viasBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viasBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viasBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viasBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_viasBezierPaths {
        managedObject.viasBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viasBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_viasBezierPaths {
        managedObject.viasBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_viaLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaLayerDisplay {
        managedObject.viaLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaLayerDisplay {
        managedObject.viaLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPads' transient property
  //····················································································································

  private var mObserversOf_frontPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPads_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPads {
        managedObject.frontPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPads_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPads {
        managedObject.frontPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPadsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPadsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPadsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPadsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsBezierPaths {
        managedObject.frontPadsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPadsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsBezierPaths {
        managedObject.frontPadsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPadsDisplay' transient property
  //····················································································································

  private var mObserversOf_frontPadsDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPadsDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPadsDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPadsDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPadsDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsDisplay {
        managedObject.frontPadsDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPadsDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsDisplay {
        managedObject.frontPadsDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPads' transient property
  //····················································································································

  private var mObserversOf_backPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPads_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPads {
        managedObject.backPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPads_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPads {
        managedObject.backPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPadsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPadsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPadsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPadsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsBezierPaths {
        managedObject.backPadsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPadsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsBezierPaths {
        managedObject.backPadsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPadsDisplay' transient property
  //····················································································································

  private var mObserversOf_backPadsDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPadsDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPadsDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPadsDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPadsDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsDisplay {
        managedObject.backPadsDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPadsDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsDisplay {
        managedObject.backPadsDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimits' transient property
  //····················································································································

  private var mObserversOf_boardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimits.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimits_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimits.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimits_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimits_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimits {
        managedObject.boardLimits_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimits_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimits {
        managedObject.boardLimits_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitsBezierPaths' transient property
  //····················································································································

  private var mObserversOf_boardLimitsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitsBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitsBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitsBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitsBezierPaths {
        managedObject.boardLimitsBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitsBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitsBezierPaths {
        managedObject.boardLimitsBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitsDisplay' transient property
  //····················································································································

  private var mObserversOf_boardLimitsDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitsDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitsDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitsDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitsDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitsDisplay {
        managedObject.boardLimitsDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitsDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitsDisplay {
        managedObject.boardLimitsDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_backComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegments {
        managedObject.backComponentNameSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameSegments {
        managedObject.backComponentNameSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNamesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNamesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNamesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNamesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNamesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNamesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNamesBezierPaths {
        managedObject.backComponentNamesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNamesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNamesBezierPaths {
        managedObject.backComponentNamesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameDisplay' transient property
  //····················································································································

  private var mObserversOf_backComponentNameDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameDisplay {
        managedObject.backComponentNameDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameDisplay {
        managedObject.backComponentNameDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNamesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNamesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNamesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNamesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNamesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNamesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNamesBezierPaths {
        managedObject.frontComponentNamesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNamesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNamesBezierPaths {
        managedObject.frontComponentNamesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameDisplay' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameDisplay {
        managedObject.frontComponentNameDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameDisplay {
        managedObject.frontComponentNameDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValueSegments' transient property
  //····················································································································

  private var mObserversOf_frontComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValueSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValueSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValueSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueSegments {
        managedObject.frontComponentValueSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueSegments {
        managedObject.frontComponentValueSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValuesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValuesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValuesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValuesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValuesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValuesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValuesBezierPaths {
        managedObject.frontComponentValuesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValuesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValuesBezierPaths {
        managedObject.frontComponentValuesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValueDisplay' transient property
  //····················································································································

  private var mObserversOf_frontComponentValueDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValueDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValueDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValueDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValueDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueDisplay {
        managedObject.frontComponentValueDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValueDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueDisplay {
        managedObject.frontComponentValueDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValueSegments' transient property
  //····················································································································

  private var mObserversOf_backComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValueSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValueSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValueSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueSegments {
        managedObject.backComponentValueSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueSegments {
        managedObject.backComponentValueSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValuesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValuesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValuesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValuesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValuesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValuesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValuesBezierPaths {
        managedObject.backComponentValuesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValuesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValuesBezierPaths {
        managedObject.backComponentValuesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValueDisplay' transient property
  //····················································································································

  private var mObserversOf_backComponentValueDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValueDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValueDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValueDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValueDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueDisplay {
        managedObject.backComponentValueDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValueDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueDisplay {
        managedObject.backComponentValueDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTrackSegments' transient property
  //····················································································································

  private var mObserversOf_backTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTrackSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTrackSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTrackSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTrackSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegments {
        managedObject.backTrackSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTrackSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTrackSegments {
        managedObject.backTrackSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTracksBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTracksBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTracksBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTracksBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksBezierPaths {
        managedObject.backTracksBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTracksBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksBezierPaths {
        managedObject.backTracksBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTracksDisplay' transient property
  //····················································································································

  private var mObserversOf_backTracksDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTracksDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTracksDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracksDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTracksDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTracksDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksDisplay {
        managedObject.backTracksDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTracksDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksDisplay {
        managedObject.backTracksDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTrackSegments' transient property
  //····················································································································

  private var mObserversOf_frontTrackSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTrackSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTrackSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTrackSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTrackSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegments {
        managedObject.frontTrackSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTrackSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTrackSegments {
        managedObject.frontTrackSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTracksBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTracksBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTracksBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTracksBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksBezierPaths {
        managedObject.frontTracksBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTracksBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksBezierPaths {
        managedObject.frontTracksBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTracksDisplay' transient property
  //····················································································································

  private var mObserversOf_frontTracksDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTracksDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTracksDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTracksDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTracksDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksDisplay {
        managedObject.frontTracksDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTracksDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksDisplay {
        managedObject.frontTracksDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesSegments' transient property
  //····················································································································

  private var mObserversOf_frontPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackagesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackagesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegments {
        managedObject.frontPackagesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesSegments {
        managedObject.frontPackagesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_frontPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackagesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackagesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesBezierPaths {
        managedObject.frontPackagesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesBezierPaths {
        managedObject.frontPackagesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesDisplay' transient property
  //····················································································································

  private var mObserversOf_frontPackagesDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackagesDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackagesDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesDisplay {
        managedObject.frontPackagesDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesDisplay {
        managedObject.frontPackagesDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesSegments' transient property
  //····················································································································

  private var mObserversOf_backPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackagesSegments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackagesSegments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesSegments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesSegments_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegments {
        managedObject.backPackagesSegments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesSegments_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesSegments {
        managedObject.backPackagesSegments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesBezierPaths' transient property
  //····················································································································

  private var mObserversOf_backPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackagesBezierPaths.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesBezierPaths_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackagesBezierPaths.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesBezierPaths_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesBezierPaths_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesBezierPaths {
        managedObject.backPackagesBezierPaths_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesBezierPaths_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesBezierPaths {
        managedObject.backPackagesBezierPaths_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesDisplay' transient property
  //····················································································································

  private var mObserversOf_backPackagesDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackagesDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackagesDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesDisplay {
        managedObject.backPackagesDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesDisplay {
        managedObject.backPackagesDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_modelLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelLayerDisplay_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelLayerDisplay {
        managedObject.modelLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelLayerDisplay_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelLayerDisplay {
        managedObject.modelLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'imageForInstances' transient property
  //····················································································································

  private var mObserversOf_imageForInstances = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_imageForInstances.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageForInstances_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_imageForInstances.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageForInstances_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_imageForInstances_toElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_imageForInstances {
        managedObject.imageForInstances_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_imageForInstances_fromElementsOfSet (_ inSet : Set<BoardModel>) {
    for managedObject in inSet {
      for observer in mObserversOf_imageForInstances {
        managedObject.imageForInstances_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_BoardModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_BoardModel : ReadOnlyArrayOf_BoardModel {

  var readModelFunction : Optional<() -> EBSelection < [BoardModel] > >

  private var prop_cache : EBSelection < [BoardModel] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <BoardModel> ()

  override var prop : EBSelection < [BoardModel] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <BoardModel>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <BoardModel> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_artworkName_fromElementsOfSet (removedSet)
        removeEBObserversOf_name_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelHeight_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelHeightUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelLimitWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelLimitWidthUnit_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_instanceCount_fromElementsOfSet (removedSet)
        removeEBObserversOf_backgroundLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendLinesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendLinesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendLinesLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendLinesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendLinesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendLinesLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendTextsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendTextsLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLayoutTextsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLayoutTextsLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendTextsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendTextsLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLayoutTextsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLayoutTextsLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_padsHoles_fromElementsOfSet (removedSet)
        removeEBObserversOf_viasHoles_fromElementsOfSet (removedSet)
        removeEBObserversOf_holes_fromElementsOfSet (removedSet)
        removeEBObserversOf_holesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_holeLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_viaShapes_fromElementsOfSet (removedSet)
        removeEBObserversOf_viasBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_viaLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPads_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPadsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPadsDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPads_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPadsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPadsDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimits_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitsBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitsDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNamesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNamesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValuesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValueDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValuesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValueDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTrackSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTracksBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTracksDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTrackSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTracksBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTracksDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackagesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackagesDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackagesSegments_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackagesBezierPaths_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackagesDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_imageForInstances_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_artworkName_toElementsOfSet (addedSet)
        addEBObserversOf_name_toElementsOfSet (addedSet)
        addEBObserversOf_modelWidth_toElementsOfSet (addedSet)
        addEBObserversOf_modelWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_modelHeight_toElementsOfSet (addedSet)
        addEBObserversOf_modelHeightUnit_toElementsOfSet (addedSet)
        addEBObserversOf_zoom_toElementsOfSet (addedSet)
        addEBObserversOf_modelLimitWidth_toElementsOfSet (addedSet)
        addEBObserversOf_modelLimitWidthUnit_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_instanceCount_toElementsOfSet (addedSet)
        addEBObserversOf_backgroundLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendLinesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendLinesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendLinesLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendLinesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendLinesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendLinesLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendTextsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendTextsLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontLayoutTextsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontLayoutTextsLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendTextsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendTextsLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backLayoutTextsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backLayoutTextsLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_padsHoles_toElementsOfSet (addedSet)
        addEBObserversOf_viasHoles_toElementsOfSet (addedSet)
        addEBObserversOf_holes_toElementsOfSet (addedSet)
        addEBObserversOf_holesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_holeLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_viaShapes_toElementsOfSet (addedSet)
        addEBObserversOf_viasBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_viaLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontPads_toElementsOfSet (addedSet)
        addEBObserversOf_frontPadsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontPadsDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backPads_toElementsOfSet (addedSet)
        addEBObserversOf_backPadsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backPadsDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimits_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitsBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitsDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNamesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNamesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValueSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValuesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValueDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValueSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValuesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValueDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backTrackSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backTracksBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backTracksDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontTrackSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontTracksBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontTracksDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackagesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackagesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackagesDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backPackagesSegments_toElementsOfSet (addedSet)
        addEBObserversOf_backPackagesBezierPaths_toElementsOfSet (addedSet)
        addEBObserversOf_backPackagesDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_modelLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_imageForInstances_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_artworkName : class {
  var artworkName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_name : class {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelWidth : class {
  var modelWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelWidthUnit : class {
  var modelWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelHeight : class {
  var modelHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelHeightUnit : class {
  var modelHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_zoom : class {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelLimitWidth : class {
  var modelLimitWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelLimitWidthUnit : class {
  var modelLimitWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_instanceCount : class {
  var instanceCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backgroundLayerDisplay : class {
  var backgroundLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLegendLinesSegments : class {
  var frontLegendLinesSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLegendLinesBezierPaths : class {
  var frontLegendLinesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLegendLinesLayerDisplay : class {
  var frontLegendLinesLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLegendLinesSegments : class {
  var backLegendLinesSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLegendLinesBezierPaths : class {
  var backLegendLinesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLegendLinesLayerDisplay : class {
  var backLegendLinesLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLegendTextsSegments : class {
  var frontLegendTextsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLegendTextsBezierPaths : class {
  var frontLegendTextsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLegendTextsLayerDisplay : class {
  var frontLegendTextsLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLayoutTextsSegments : class {
  var frontLayoutTextsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLayoutTextsBezierPaths : class {
  var frontLayoutTextsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontLayoutTextsLayerDisplay : class {
  var frontLayoutTextsLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLegendTextsSegments : class {
  var backLegendTextsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLegendTextsBezierPaths : class {
  var backLegendTextsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLegendTextsLayerDisplay : class {
  var backLegendTextsLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLayoutTextsSegments : class {
  var backLayoutTextsSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLayoutTextsBezierPaths : class {
  var backLayoutTextsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backLayoutTextsLayerDisplay : class {
  var backLayoutTextsLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_padsHoles : class {
  var padsHoles : MergerHoleArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_viasHoles : class {
  var viasHoles : MergerHoleArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_holes : class {
  var holes : MergerHoleArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_holesBezierPaths : class {
  var holesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_holeLayerDisplay : class {
  var holeLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_viaShapes : class {
  var viaShapes : MergerViaShapeArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_viasBezierPaths : class {
  var viasBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_viaLayerDisplay : class {
  var viaLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontPads : class {
  var frontPads : MergerPadArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontPadsBezierPaths : class {
  var frontPadsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontPadsDisplay : class {
  var frontPadsDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backPads : class {
  var backPads : MergerPadArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backPadsBezierPaths : class {
  var backPadsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backPadsDisplay : class {
  var backPadsDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_boardLimits : class {
  var boardLimits : MergerBoardLimits? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_boardLimitsBezierPaths : class {
  var boardLimitsBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_boardLimitsDisplay : class {
  var boardLimitsDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backComponentNameSegments : class {
  var backComponentNameSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backComponentNamesBezierPaths : class {
  var backComponentNamesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backComponentNameDisplay : class {
  var backComponentNameDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontComponentNameSegments : class {
  var frontComponentNameSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontComponentNamesBezierPaths : class {
  var frontComponentNamesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontComponentNameDisplay : class {
  var frontComponentNameDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontComponentValueSegments : class {
  var frontComponentValueSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontComponentValuesBezierPaths : class {
  var frontComponentValuesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontComponentValueDisplay : class {
  var frontComponentValueDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backComponentValueSegments : class {
  var backComponentValueSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backComponentValuesBezierPaths : class {
  var backComponentValuesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backComponentValueDisplay : class {
  var backComponentValueDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backTrackSegments : class {
  var backTrackSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backTracksBezierPaths : class {
  var backTracksBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backTracksDisplay : class {
  var backTracksDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontTrackSegments : class {
  var frontTrackSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontTracksBezierPaths : class {
  var frontTracksBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontTracksDisplay : class {
  var frontTracksDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontPackagesSegments : class {
  var frontPackagesSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontPackagesBezierPaths : class {
  var frontPackagesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_frontPackagesDisplay : class {
  var frontPackagesDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backPackagesSegments : class {
  var backPackagesSegments : MergerSegmentArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backPackagesBezierPaths : class {
  var backPackagesBezierPaths : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_backPackagesDisplay : class {
  var backPackagesDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_modelLayerDisplay : class {
  var modelLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModel_imageForInstances : class {
  var imageForInstances : NSImage? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: myInstances
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_myInstances : ReadOnlyArrayOf_MergerBoardInstance {

  //····················································································································
 
  func setProp (_ value :  [MergerBoardInstance]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: myInstances
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_myInstances :
ToManyRelationshipReadWrite_BoardModel_myInstances, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <MergerBoardInstance> ()
  private var mValue = [MergerBoardInstance] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myModel_property.owner = nil ;
        }
        removeEBObserversOf_backComponentNameDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentValueDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLayoutTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendLinesLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPackagesDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPadsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backTracksDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backgroundLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentNameDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentValueDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLayoutTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendLinesLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPackagesDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPadsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontTracksDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holeLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_instanceLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_instanceRect_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_newInstanceLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_selectionLayer_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viaLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : MergerBoardInstance in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myModel_property.setProp (owner)
        }
        addEBObserversOf_backComponentNameDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentValueDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLayoutTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendLinesLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPackagesDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPadsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backTracksDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backgroundLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitWidth_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentNameDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentValueDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLayoutTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendLinesLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPackagesDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPadsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontTracksDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holeLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_instanceLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_instanceRect_toElementsOfSet (addedObjectSet)
        addEBObserversOf_newInstanceLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_selectionLayer_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viaLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [MergerBoardInstance] > { return .single (mValue) }

  override func setProp (_ inValue : [MergerBoardInstance]) { mValue = inValue }

  var propval : [MergerBoardInstance] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [MergerBoardInstance]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MergerBoardInstance) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : MergerBoardInstance) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontLegendLines
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_frontLegendLines : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontLegendLines
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_frontLegendLines :
ToManyRelationshipReadWrite_BoardModel_frontLegendLines, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backLegendLines
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_backLegendLines : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backLegendLines
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_backLegendLines :
ToManyRelationshipReadWrite_BoardModel_backLegendLines, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_frontLegendTexts : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_frontLegendTexts :
ToManyRelationshipReadWrite_BoardModel_frontLegendTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_frontLayoutTexts : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_frontLayoutTexts :
ToManyRelationshipReadWrite_BoardModel_frontLayoutTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_backLegendTexts : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backLegendTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_backLegendTexts :
ToManyRelationshipReadWrite_BoardModel_backLegendTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_backLayoutTexts : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backLayoutTexts
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_backLayoutTexts :
ToManyRelationshipReadWrite_BoardModel_backLayoutTexts, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_vias : ReadOnlyArrayOf_BoardModelVia {

  //····················································································································
 
  func setProp (_ value :  [BoardModelVia]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: vias
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_vias :
ToManyRelationshipReadWrite_BoardModel_vias, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <BoardModelVia> ()
  private var mValue = [BoardModelVia] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelVia in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [BoardModelVia] > { return .single (mValue) }

  override func setProp (_ inValue : [BoardModelVia]) { mValue = inValue }

  var propval : [BoardModelVia] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelVia]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelVia) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelVia) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: pads
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_pads : ReadOnlyArrayOf_BoardModelPad {

  //····················································································································
 
  func setProp (_ value :  [BoardModelPad]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: pads
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_pads :
ToManyRelationshipReadWrite_BoardModel_pads, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <BoardModelPad> ()
  private var mValue = [BoardModelPad] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_height_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_qualifiedName_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_rotation_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_shape_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_side_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelPad in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_height_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_qualifiedName_toElementsOfSet (addedObjectSet)
        addEBObserversOf_rotation_toElementsOfSet (addedObjectSet)
        addEBObserversOf_shape_toElementsOfSet (addedObjectSet)
        addEBObserversOf_side_toElementsOfSet (addedObjectSet)
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [BoardModelPad] > { return .single (mValue) }

  override func setProp (_ inValue : [BoardModelPad]) { mValue = inValue }

  var propval : [BoardModelPad] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelPad]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelPad) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelPad) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_backComponentNames : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_backComponentNames :
ToManyRelationshipReadWrite_BoardModel_backComponentNames, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_frontComponentNames : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontComponentNames
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_frontComponentNames :
ToManyRelationshipReadWrite_BoardModel_frontComponentNames, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_frontComponentValues : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_frontComponentValues :
ToManyRelationshipReadWrite_BoardModel_frontComponentValues, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_backComponentValues : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backComponentValues
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_backComponentValues :
ToManyRelationshipReadWrite_BoardModel_backComponentValues, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_backTracks : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_backTracks :
ToManyRelationshipReadWrite_BoardModel_backTracks, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_frontTracks : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontTracks
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_frontTracks :
ToManyRelationshipReadWrite_BoardModel_frontTracks, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: frontPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_frontPackages : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: frontPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_frontPackages :
ToManyRelationshipReadWrite_BoardModel_frontPackages, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: backPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModel_backPackages : ReadOnlyArrayOf_CanariSegment {

  //····················································································································
 
  func setProp (_ value :  [CanariSegment]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: backPackages
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModel_backPackages :
ToManyRelationshipReadWrite_BoardModel_backPackages, EBSignatureObserverProtocol {
  weak var owner : BoardModel?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <CanariSegment> ()
  private var mValue = [CanariSegment] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : CanariSegment in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [CanariSegment] > { return .single (mValue) }

  override func setProp (_ inValue : [CanariSegment]) { mValue = inValue }

  var propval : [CanariSegment] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [CanariSegment]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CanariSegment) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CanariSegment) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

