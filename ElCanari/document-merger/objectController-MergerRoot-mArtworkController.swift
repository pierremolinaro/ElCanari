//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    objectController_MergerRoot_mArtworkController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ObjectController_MergerRoot_mArtworkController : EBObject {
 
  var mObjectObserver = EBObserver ()

  //····················································································································

  var mSelectedObject : ArtworkRoot? {
    didSet {
      if mSelectedObject !== oldValue {
      //--- Property comments
        oldValue?.comments_property.removeEBObserver (mObjectObserver)
        oldValue?.comments_property.removeEBObserver (self.comments_property)
        mSelectedObject?.comments_property.addEBObserver (mObjectObserver)
        mSelectedObject?.comments_property.addEBObserver (self.comments_property)
        self.comments_property.postEvent ()
      //--- Property drillDataFileExtension
        oldValue?.drillDataFileExtension_property.removeEBObserver (mObjectObserver)
        oldValue?.drillDataFileExtension_property.removeEBObserver (self.drillDataFileExtension_property)
        mSelectedObject?.drillDataFileExtension_property.addEBObserver (mObjectObserver)
        mSelectedObject?.drillDataFileExtension_property.addEBObserver (self.drillDataFileExtension_property)
        self.drillDataFileExtension_property.postEvent ()
      //--- Property drillDataFormat
        oldValue?.drillDataFormat_property.removeEBObserver (mObjectObserver)
        oldValue?.drillDataFormat_property.removeEBObserver (self.drillDataFormat_property)
        mSelectedObject?.drillDataFormat_property.addEBObserver (mObjectObserver)
        mSelectedObject?.drillDataFormat_property.addEBObserver (self.drillDataFormat_property)
        self.drillDataFormat_property.postEvent ()
      //--- Property drillListFileExtension
        oldValue?.drillListFileExtension_property.removeEBObserver (mObjectObserver)
        oldValue?.drillListFileExtension_property.removeEBObserver (self.drillListFileExtension_property)
        mSelectedObject?.drillListFileExtension_property.addEBObserver (mObjectObserver)
        mSelectedObject?.drillListFileExtension_property.addEBObserver (self.drillListFileExtension_property)
        self.drillListFileExtension_property.postEvent ()
      //--- Property drillToolListFileExtension
        oldValue?.drillToolListFileExtension_property.removeEBObserver (mObjectObserver)
        oldValue?.drillToolListFileExtension_property.removeEBObserver (self.drillToolListFileExtension_property)
        mSelectedObject?.drillToolListFileExtension_property.addEBObserver (mObjectObserver)
        mSelectedObject?.drillToolListFileExtension_property.addEBObserver (self.drillToolListFileExtension_property)
        self.drillToolListFileExtension_property.postEvent ()
      //--- Relationship fileGenerationParameterArray
      //--- Property minPP_TP_TT_TW_displayUnit
        oldValue?.minPP_TP_TT_TW_displayUnit_property.removeEBObserver (mObjectObserver)
        oldValue?.minPP_TP_TT_TW_displayUnit_property.removeEBObserver (self.minPP_TP_TT_TW_displayUnit_property)
        mSelectedObject?.minPP_TP_TT_TW_displayUnit_property.addEBObserver (mObjectObserver)
        mSelectedObject?.minPP_TP_TT_TW_displayUnit_property.addEBObserver (self.minPP_TP_TT_TW_displayUnit_property)
        self.minPP_TP_TT_TW_displayUnit_property.postEvent ()
      //--- Property minPP_TP_TT_TW_inEBUnit
        oldValue?.minPP_TP_TT_TW_inEBUnit_property.removeEBObserver (mObjectObserver)
        oldValue?.minPP_TP_TT_TW_inEBUnit_property.removeEBObserver (self.minPP_TP_TT_TW_inEBUnit_property)
        mSelectedObject?.minPP_TP_TT_TW_inEBUnit_property.addEBObserver (mObjectObserver)
        mSelectedObject?.minPP_TP_TT_TW_inEBUnit_property.addEBObserver (self.minPP_TP_TT_TW_inEBUnit_property)
        self.minPP_TP_TT_TW_inEBUnit_property.postEvent ()
      //--- Property minValueForOARdisplayUnit
        oldValue?.minValueForOARdisplayUnit_property.removeEBObserver (mObjectObserver)
        oldValue?.minValueForOARdisplayUnit_property.removeEBObserver (self.minValueForOARdisplayUnit_property)
        mSelectedObject?.minValueForOARdisplayUnit_property.addEBObserver (mObjectObserver)
        mSelectedObject?.minValueForOARdisplayUnit_property.addEBObserver (self.minValueForOARdisplayUnit_property)
        self.minValueForOARdisplayUnit_property.postEvent ()
      //--- Property minValueForOARinEBUnit
        oldValue?.minValueForOARinEBUnit_property.removeEBObserver (mObjectObserver)
        oldValue?.minValueForOARinEBUnit_property.removeEBObserver (self.minValueForOARinEBUnit_property)
        mSelectedObject?.minValueForOARinEBUnit_property.addEBObserver (mObjectObserver)
        mSelectedObject?.minValueForOARinEBUnit_property.addEBObserver (self.minValueForOARinEBUnit_property)
        self.minValueForOARinEBUnit_property.postEvent ()
      //--- Property minValueForPHDdisplayUnit
        oldValue?.minValueForPHDdisplayUnit_property.removeEBObserver (mObjectObserver)
        oldValue?.minValueForPHDdisplayUnit_property.removeEBObserver (self.minValueForPHDdisplayUnit_property)
        mSelectedObject?.minValueForPHDdisplayUnit_property.addEBObserver (mObjectObserver)
        mSelectedObject?.minValueForPHDdisplayUnit_property.addEBObserver (self.minValueForPHDdisplayUnit_property)
        self.minValueForPHDdisplayUnit_property.postEvent ()
      //--- Property minValueForPHDinEBUnit
        oldValue?.minValueForPHDinEBUnit_property.removeEBObserver (mObjectObserver)
        oldValue?.minValueForPHDinEBUnit_property.removeEBObserver (self.minValueForPHDinEBUnit_property)
        mSelectedObject?.minValueForPHDinEBUnit_property.addEBObserver (mObjectObserver)
        mSelectedObject?.minValueForPHDinEBUnit_property.addEBObserver (self.minValueForPHDinEBUnit_property)
        self.minValueForPHDinEBUnit_property.postEvent ()
      //--- Property selectedTab
        oldValue?.selectedTab_property.removeEBObserver (mObjectObserver)
        oldValue?.selectedTab_property.removeEBObserver (self.selectedTab_property)
        mSelectedObject?.selectedTab_property.addEBObserver (mObjectObserver)
        mSelectedObject?.selectedTab_property.addEBObserver (self.selectedTab_property)
        self.selectedTab_property.postEvent ()
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    bind_property_comments ()
    bind_property_drillDataFileExtension ()
    bind_property_drillDataFormat ()
    bind_property_drillListFileExtension ()
    bind_property_drillToolListFileExtension ()
    bind_property_minPP_TP_TT_TW_displayUnit ()
    bind_property_minPP_TP_TT_TW_inEBUnit ()
    bind_property_minValueForOARdisplayUnit ()
    bind_property_minValueForOARinEBUnit ()
    bind_property_minValueForPHDdisplayUnit ()
    bind_property_minValueForPHDinEBUnit ()
    bind_property_selectedTab ()
  }
  
  //····················································································································
  //   RELATIONSHIPS
  //····················································································································

  // var fileGenerationParameterArray = ToManyRelationshipProxy_ArtworkRoot_fileGenerationParameterArray () 

  //····················································································································
  //   OBJECT OBSERVABLE PROPERTIES
  //····················································································································

  var comments_property = EBPropertyProxy_String () 
  var drillDataFileExtension_property = EBPropertyProxy_String () 
  var drillDataFormat_property = EBPropertyProxy_DrillDataFormatEnum () 
  var drillListFileExtension_property = EBPropertyProxy_String () 
  var drillToolListFileExtension_property = EBPropertyProxy_String () 
  var minPP_TP_TT_TW_displayUnit_property = EBPropertyProxy_Int () 
  var minPP_TP_TT_TW_inEBUnit_property = EBPropertyProxy_Int () 
  var minValueForOARdisplayUnit_property = EBPropertyProxy_Int () 
  var minValueForOARinEBUnit_property = EBPropertyProxy_Int () 
  var minValueForPHDdisplayUnit_property = EBPropertyProxy_Int () 
  var minValueForPHDinEBUnit_property = EBPropertyProxy_Int () 
  var selectedTab_property = EBPropertyProxy_Int () 

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize :NSFont.smallSystemFontSize ())
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (mEasyBindingsObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(ObjectController_MergerRoot_mArtworkController.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "comments",
      idx:self.comments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.comments_property.mObserverExplorer,
      valueExplorer:&self.comments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillDataFileExtension",
      idx:self.drillDataFileExtension_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillDataFileExtension_property.mObserverExplorer,
      valueExplorer:&self.drillDataFileExtension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillDataFormat",
      idx:self.drillDataFormat_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillDataFormat_property.mObserverExplorer,
      valueExplorer:&self.drillDataFormat_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillListFileExtension",
      idx:self.drillListFileExtension_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillListFileExtension_property.mObserverExplorer,
      valueExplorer:&self.drillListFileExtension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillToolListFileExtension",
      idx:self.drillToolListFileExtension_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillToolListFileExtension_property.mObserverExplorer,
      valueExplorer:&self.drillToolListFileExtension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minPP_TP_TT_TW_displayUnit",
      idx:self.minPP_TP_TT_TW_displayUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minPP_TP_TT_TW_displayUnit_property.mObserverExplorer,
      valueExplorer:&self.minPP_TP_TT_TW_displayUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minPP_TP_TT_TW_inEBUnit",
      idx:self.minPP_TP_TT_TW_inEBUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minPP_TP_TT_TW_inEBUnit_property.mObserverExplorer,
      valueExplorer:&self.minPP_TP_TT_TW_inEBUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForOARdisplayUnit",
      idx:self.minValueForOARdisplayUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForOARdisplayUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForOARdisplayUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForOARinEBUnit",
      idx:self.minValueForOARinEBUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForOARinEBUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForOARinEBUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForPHDdisplayUnit",
      idx:self.minValueForPHDdisplayUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForPHDdisplayUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForPHDdisplayUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForPHDinEBUnit",
      idx:self.minValueForPHDinEBUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForPHDinEBUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForPHDinEBUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedTab",
      idx:self.selectedTab_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedTab_property.mObserverExplorer,
      valueExplorer:&self.selectedTab_property.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(ObjectController_MergerRoot_mArtworkController.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (mEasyBindingsObjectIndex) + className
    mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  func showObjectWindowFromExplorerButton (_ : Any?) {
    if mExplorerWindow == nil {
      buildExplorerWindow ()
    }
    mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  func deleteSelectionControllerWindowAction (_ : Any) {
    clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    let closeButton = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton!.target = nil
    mExplorerWindow?.orderOut (nil)
    mExplorerWindow = nil
  }

  //···················································································································*

  private final func bind_property_comments () {
    self.comments_property.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.comments_property_selection
      }else{
        return .empty
      }
    }
    self.comments_property.writeModelFunction = { [weak self] (inValue : String) in
      self?.mSelectedObject?.comments = inValue
    }
    self.comments_property.validateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.comments_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }

  //···················································································································*

  private final func bind_property_drillDataFileExtension () {
    self.drillDataFileExtension_property.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.drillDataFileExtension_property_selection
      }else{
        return .empty
      }
    }
    self.drillDataFileExtension_property.writeModelFunction = { [weak self] (inValue : String) in
      self?.mSelectedObject?.drillDataFileExtension = inValue
    }
    self.drillDataFileExtension_property.validateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.drillDataFileExtension_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }

  //···················································································································*

  private final func bind_property_drillDataFormat () {
    self.drillDataFormat_property.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.drillDataFormat_property_selection
      }else{
        return .empty
      }
    }
    self.drillDataFormat_property.writeModelFunction = { [weak self] (inValue : DrillDataFormatEnum) in
      self?.mSelectedObject?.drillDataFormat = inValue
    }
    self.drillDataFormat_property.validateAndWriteModelFunction = { [weak self] (candidateValue : DrillDataFormatEnum, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.drillDataFormat_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }

  //···················································································································*

  private final func bind_property_drillListFileExtension () {
    self.drillListFileExtension_property.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.drillListFileExtension_property_selection
      }else{
        return .empty
      }
    }
    self.drillListFileExtension_property.writeModelFunction = { [weak self] (inValue : String) in
      self?.mSelectedObject?.drillListFileExtension = inValue
    }
    self.drillListFileExtension_property.validateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.drillListFileExtension_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }

  //···················································································································*

  private final func bind_property_drillToolListFileExtension () {
    self.drillToolListFileExtension_property.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.drillToolListFileExtension_property_selection
      }else{
        return .empty
      }
    }
    self.drillToolListFileExtension_property.writeModelFunction = { [weak self] (inValue : String) in
      self?.mSelectedObject?.drillToolListFileExtension = inValue
    }
    self.drillToolListFileExtension_property.validateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.drillToolListFileExtension_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }

  //···················································································································*

  private final func bind_property_minPP_TP_TT_TW_displayUnit () {
    self.minPP_TP_TT_TW_displayUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.minPP_TP_TT_TW_displayUnit_property_selection
      }else{
        return .empty
      }
    }
    self.minPP_TP_TT_TW_displayUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      self?.mSelectedObject?.minPP_TP_TT_TW_displayUnit = inValue
    }
    self.minPP_TP_TT_TW_displayUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.minPP_TP_TT_TW_displayUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }

  //···················································································································*

  private final func bind_property_minPP_TP_TT_TW_inEBUnit () {
    self.minPP_TP_TT_TW_inEBUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.minPP_TP_TT_TW_inEBUnit_property_selection
      }else{
        return .empty
      }
    }
    self.minPP_TP_TT_TW_inEBUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      self?.mSelectedObject?.minPP_TP_TT_TW_inEBUnit = inValue
    }
    self.minPP_TP_TT_TW_inEBUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.minPP_TP_TT_TW_inEBUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }

  //···················································································································*

  private final func bind_property_minValueForOARdisplayUnit () {
    self.minValueForOARdisplayUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.minValueForOARdisplayUnit_property_selection
      }else{
        return .empty
      }
    }
    self.minValueForOARdisplayUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      self?.mSelectedObject?.minValueForOARdisplayUnit = inValue
    }
    self.minValueForOARdisplayUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.minValueForOARdisplayUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }

  //···················································································································*

  private final func bind_property_minValueForOARinEBUnit () {
    self.minValueForOARinEBUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.minValueForOARinEBUnit_property_selection
      }else{
        return .empty
      }
    }
    self.minValueForOARinEBUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      self?.mSelectedObject?.minValueForOARinEBUnit = inValue
    }
    self.minValueForOARinEBUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.minValueForOARinEBUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }

  //···················································································································*

  private final func bind_property_minValueForPHDdisplayUnit () {
    self.minValueForPHDdisplayUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.minValueForPHDdisplayUnit_property_selection
      }else{
        return .empty
      }
    }
    self.minValueForPHDdisplayUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      self?.mSelectedObject?.minValueForPHDdisplayUnit = inValue
    }
    self.minValueForPHDdisplayUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.minValueForPHDdisplayUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }

  //···················································································································*

  private final func bind_property_minValueForPHDinEBUnit () {
    self.minValueForPHDinEBUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.minValueForPHDinEBUnit_property_selection
      }else{
        return .empty
      }
    }
    self.minValueForPHDinEBUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      self?.mSelectedObject?.minValueForPHDinEBUnit = inValue
    }
    self.minValueForPHDinEBUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.minValueForPHDinEBUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }

  //···················································································································*

  private final func bind_property_selectedTab () {
    self.selectedTab_property.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.selectedTab_property_selection
      }else{
        return .empty
      }
    }
    self.selectedTab_property.writeModelFunction = { [weak self] (inValue : Int) in
      self?.mSelectedObject?.selectedTab = inValue
    }
    self.selectedTab_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.selectedTab_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

