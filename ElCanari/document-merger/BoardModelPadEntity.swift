//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardModelPadEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardModelPadEntity : EBManagedObject,
  BoardModelPadEntity_x,
  BoardModelPadEntity_y,
  BoardModelPadEntity_width,
  BoardModelPadEntity_height,
  BoardModelPadEntity_holeDiameter,
  BoardModelPadEntity_shape,
  BoardModelPadEntity_side,
  BoardModelPadEntity_rotation {

  //····················································································································
  //   Accessing x stored property
  //····················································································································

  var x : Int {
    get {
      return self.x_property.propval
    }
    set {
      self.x_property.setProp (newValue)
    }
  }

  var x_property_selection : EBSelection <Int> {
    get {
      return self.x_property.prop
    }
  }

  //····················································································································
  //   Accessing y stored property
  //····················································································································

  var y : Int {
    get {
      return self.y_property.propval
    }
    set {
      self.y_property.setProp (newValue)
    }
  }

  var y_property_selection : EBSelection <Int> {
    get {
      return self.y_property.prop
    }
  }

  //····················································································································
  //   Accessing width stored property
  //····················································································································

  var width : Int {
    get {
      return self.width_property.propval
    }
    set {
      self.width_property.setProp (newValue)
    }
  }

  var width_property_selection : EBSelection <Int> {
    get {
      return self.width_property.prop
    }
  }

  //····················································································································
  //   Accessing height stored property
  //····················································································································

  var height : Int {
    get {
      return self.height_property.propval
    }
    set {
      self.height_property.setProp (newValue)
    }
  }

  var height_property_selection : EBSelection <Int> {
    get {
      return self.height_property.prop
    }
  }

  //····················································································································
  //   Accessing holeDiameter stored property
  //····················································································································

  var holeDiameter : Int {
    get {
      return self.holeDiameter_property.propval
    }
    set {
      self.holeDiameter_property.setProp (newValue)
    }
  }

  var holeDiameter_property_selection : EBSelection <Int> {
    get {
      return self.holeDiameter_property.prop
    }
  }

  //····················································································································
  //   Accessing shape stored property
  //····················································································································

  var shape : PadShape {
    get {
      return self.shape_property.propval
    }
    set {
      self.shape_property.setProp (newValue)
    }
  }

  var shape_property_selection : EBSelection <PadShape> {
    get {
      return self.shape_property.prop
    }
  }

  //····················································································································
  //   Accessing side stored property
  //····················································································································

  var side : PadSide {
    get {
      return self.side_property.propval
    }
    set {
      self.side_property.setProp (newValue)
    }
  }

  var side_property_selection : EBSelection <PadSide> {
    get {
      return self.side_property.prop
    }
  }

  //····················································································································
  //   Accessing rotation stored property
  //····················································································································

  var rotation : Int {
    get {
      return self.rotation_property.propval
    }
    set {
      self.rotation_property.setProp (newValue)
    }
  }

  var rotation_property_selection : EBSelection <Int> {
    get {
      return self.rotation_property.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var x_property = EBStoredProperty_Int (0)
  var y_property = EBStoredProperty_Int (0)
  var width_property = EBStoredProperty_Int (0)
  var height_property = EBStoredProperty_Int (0)
  var holeDiameter_property = EBStoredProperty_Int (0)
  var shape_property = EBStoredProperty_PadShape (PadShape.rectangular)
  var side_property = EBStoredProperty_PadSide (PadSide.traversing)
  var rotation_property = EBStoredProperty_Int (0)

  //····················································································································
  //    Transient properties
  //····················································································································


  //····················································································································
  //    Relationships
  //····················································································································


  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
  //--- Install property observers for transients
  //--- Install undoers for properties
    self.x_property.undoManager = undoManager ()
    self.y_property.undoManager = undoManager ()
    self.width_property.undoManager = undoManager ()
    self.height_property.undoManager = undoManager ()
    self.holeDiameter_property.undoManager = undoManager ()
    self.shape_property.undoManager = undoManager ()
    self.side_property.undoManager = undoManager ()
    self.rotation_property.undoManager = undoManager ()
  //--- Install owner for relationships
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "x",
      idx:self.x_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x_property.mObserverExplorer,
      valueExplorer:&self.x_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y",
      idx:self.y_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y_property.mObserverExplorer,
      valueExplorer:&self.y_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "width",
      idx:self.width_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.width_property.mObserverExplorer,
      valueExplorer:&self.width_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "height",
      idx:self.height_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.height_property.mObserverExplorer,
      valueExplorer:&self.height_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeDiameter",
      idx:self.holeDiameter_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeDiameter_property.mObserverExplorer,
      valueExplorer:&self.holeDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "shape",
      idx:self.shape_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.shape_property.mObserverExplorer,
      valueExplorer:&self.shape_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "side",
      idx:self.side_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.side_property.mObserverExplorer,
      valueExplorer:&self.side_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "rotation",
      idx:self.rotation_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.rotation_property.mObserverExplorer,
      valueExplorer:&self.rotation_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.x_property.mObserverExplorer = nil
    self.x_property.mValueExplorer = nil
    self.y_property.mObserverExplorer = nil
    self.y_property.mValueExplorer = nil
    self.width_property.mObserverExplorer = nil
    self.width_property.mValueExplorer = nil
    self.height_property.mObserverExplorer = nil
    self.height_property.mValueExplorer = nil
    self.holeDiameter_property.mObserverExplorer = nil
    self.holeDiameter_property.mValueExplorer = nil
    self.shape_property.mObserverExplorer = nil
    self.shape_property.mValueExplorer = nil
    self.side_property.mObserverExplorer = nil
    self.side_property.mValueExplorer = nil
    self.rotation_property.mObserverExplorer = nil
    self.rotation_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.x_property.storeIn (dictionary: ioDictionary, forKey: "x")
    self.y_property.storeIn (dictionary: ioDictionary, forKey: "y")
    self.width_property.storeIn (dictionary: ioDictionary, forKey: "width")
    self.height_property.storeIn (dictionary: ioDictionary, forKey: "height")
    self.holeDiameter_property.storeIn (dictionary: ioDictionary, forKey: "holeDiameter")
    self.shape_property.storeIn (dictionary: ioDictionary, forKey: "shape")
    self.side_property.storeIn (dictionary: ioDictionary, forKey: "side")
    self.rotation_property.storeIn (dictionary: ioDictionary, forKey: "rotation")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.x_property.readFrom (dictionary: inDictionary, forKey:"x")
    self.y_property.readFrom (dictionary: inDictionary, forKey:"y")
    self.width_property.readFrom (dictionary: inDictionary, forKey:"width")
    self.height_property.readFrom (dictionary: inDictionary, forKey:"height")
    self.holeDiameter_property.readFrom (dictionary: inDictionary, forKey:"holeDiameter")
    self.shape_property.readFrom (dictionary: inDictionary, forKey:"shape")
    self.side_property.readFrom (dictionary: inDictionary, forKey:"side")
    self.rotation_property.readFrom (dictionary: inDictionary, forKey:"rotation")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardModelPadEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardModelPadEntity : ReadOnlyAbstractArrayProperty <BoardModelPadEntity> {

  //····················································································································
  //   Observers of 'x' stored property
  //····················································································································

  private var mObserversOf_x = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_x.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_x.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x_toElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_x {
        managedObject.x_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x_fromElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for observer in mObserversOf_x {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y' stored property
  //····················································································································

  private var mObserversOf_y = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_y.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_y.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y_toElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_y {
        managedObject.y_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y_fromElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for observer in mObserversOf_y {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_width.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_width.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_width_toElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_width {
        managedObject.width_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_width_fromElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for observer in mObserversOf_width {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.width_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_height.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_height.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_height_toElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_height {
        managedObject.height_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_height_fromElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for observer in mObserversOf_height {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.height_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeDiameter' stored property
  //····················································································································

  private var mObserversOf_holeDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_holeDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_holeDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeDiameter_toElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_holeDiameter {
        managedObject.holeDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeDiameter_fromElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for observer in mObserversOf_holeDiameter {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.holeDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'shape' stored property
  //····················································································································

  private var mObserversOf_shape = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_shape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_shape.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shape_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_shape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_shape.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shape_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_shape_toElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_shape {
        managedObject.shape_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_shape_fromElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for observer in mObserversOf_shape {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.shape_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'side' stored property
  //····················································································································

  private var mObserversOf_side = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_side (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_side.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.side_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_side (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_side.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.side_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_side_toElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_side {
        managedObject.side_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_side_fromElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for observer in mObserversOf_side {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.side_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'rotation' stored property
  //····················································································································

  private var mObserversOf_rotation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_rotation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_rotation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.rotation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_rotation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_rotation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.rotation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_rotation_toElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_rotation {
        managedObject.rotation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_rotation_fromElementsOfSet (_ inSet : Set<BoardModelPadEntity>) {
    for observer in mObserversOf_rotation {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.rotation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_BoardModelPadEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_BoardModelPadEntity : ReadOnlyArrayOf_BoardModelPadEntity {

  var readModelFunction : Optional<() -> EBSelection < [BoardModelPadEntity] > >

  private var prop_cache : EBSelection < [BoardModelPadEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <BoardModelPadEntity> ()

  override var prop : EBSelection < [BoardModelPadEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <BoardModelPadEntity>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <BoardModelPadEntity> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_x_fromElementsOfSet (removedSet)
        removeEBObserversOf_y_fromElementsOfSet (removedSet)
        removeEBObserversOf_width_fromElementsOfSet (removedSet)
        removeEBObserversOf_height_fromElementsOfSet (removedSet)
        removeEBObserversOf_holeDiameter_fromElementsOfSet (removedSet)
        removeEBObserversOf_shape_fromElementsOfSet (removedSet)
        removeEBObserversOf_side_fromElementsOfSet (removedSet)
        removeEBObserversOf_rotation_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_x_toElementsOfSet (addedSet)
        addEBObserversOf_y_toElementsOfSet (addedSet)
        addEBObserversOf_width_toElementsOfSet (addedSet)
        addEBObserversOf_height_toElementsOfSet (addedSet)
        addEBObserversOf_holeDiameter_toElementsOfSet (addedSet)
        addEBObserversOf_shape_toElementsOfSet (addedSet)
        addEBObserversOf_side_toElementsOfSet (addedSet)
        addEBObserversOf_rotation_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelPadEntity_x : class {
  var x : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelPadEntity_y : class {
  var y : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelPadEntity_width : class {
  var width : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelPadEntity_height : class {
  var height : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelPadEntity_holeDiameter : class {
  var holeDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelPadEntity_shape : class {
  var shape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelPadEntity_side : class {
  var side : PadSide { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelPadEntity_rotation : class {
  var rotation : Int { get }
}


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

