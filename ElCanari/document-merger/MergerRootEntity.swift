//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MergerRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MergerRootEntity : EBManagedObject,
  MergerRootEntity_selectedPageIndex,
  MergerRootEntity_zoom,
  MergerRootEntity_boardWidthUnit,
  MergerRootEntity_boardHeightUnit,
  MergerRootEntity_modelNames,
  MergerRootEntity_instancesLayerDisplay,
  MergerRootEntity_boardRect,
  MergerRootEntity_boardWidth,
  MergerRootEntity_boardHeight {

  //····················································································································
  //   Accessing selectedPageIndex stored property
  //····················································································································

  var selectedPageIndex : Int {
    get {
      return self.selectedPageIndex_property.propval
    }
    set {
      self.selectedPageIndex_property.setProp (newValue)
    }
  }

  var selectedPageIndex_property_selection : EBSelection <Int> {
    get {
      return self.selectedPageIndex_property.prop
    }
  }

  //····················································································································
  //   Accessing zoom stored property
  //····················································································································

  var zoom : Int {
    get {
      return self.zoom_property.propval
    }
    set {
      self.zoom_property.setProp (newValue)
    }
  }

  var zoom_property_selection : EBSelection <Int> {
    get {
      return self.zoom_property.prop
    }
  }

  //····················································································································
  //   Accessing boardWidthUnit stored property
  //····················································································································

  var boardWidthUnit : Int {
    get {
      return self.boardWidthUnit_property.propval
    }
    set {
      self.boardWidthUnit_property.setProp (newValue)
    }
  }

  var boardWidthUnit_property_selection : EBSelection <Int> {
    get {
      return self.boardWidthUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing boardHeightUnit stored property
  //····················································································································

  var boardHeightUnit : Int {
    get {
      return self.boardHeightUnit_property.propval
    }
    set {
      self.boardHeightUnit_property.setProp (newValue)
    }
  }

  var boardHeightUnit_property_selection : EBSelection <Int> {
    get {
      return self.boardHeightUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing modelNames transient property
  //····················································································································

  var modelNames_property_selection : EBSelection <MergerBoardModelArray> {
    get {
      return self.modelNames_property.prop
    }
  }

  var modelNames : EBSelection <MergerBoardModelArray> {
    get {
      return modelNames_property_selection
    }
  }

  //····················································································································
  //   Accessing instancesLayerDisplay transient property
  //····················································································································

  var instancesLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.instancesLayerDisplay_property.prop
    }
  }

  var instancesLayerDisplay : EBSelection <CALayer> {
    get {
      return instancesLayerDisplay_property_selection
    }
  }

  //····················································································································
  //   Accessing boardRect transient property
  //····················································································································

  var boardRect_property_selection : EBSelection <CanariBoardRect> {
    get {
      return self.boardRect_property.prop
    }
  }

  var boardRect : EBSelection <CanariBoardRect> {
    get {
      return boardRect_property_selection
    }
  }

  //····················································································································
  //   Accessing boardWidth transient property
  //····················································································································

  var boardWidth_property_selection : EBSelection <Int> {
    get {
      return self.boardWidth_property.prop
    }
  }

  var boardWidth : EBSelection <Int> {
    get {
      return boardWidth_property_selection
    }
  }

  //····················································································································
  //   Accessing boardHeight transient property
  //····················································································································

  var boardHeight_property_selection : EBSelection <Int> {
    get {
      return self.boardHeight_property.prop
    }
  }

  var boardHeight : EBSelection <Int> {
    get {
      return boardHeight_property_selection
    }
  }

  //····················································································································
  //   Accessing boardModels toMany relationship
  //····················································································································

  var boardModels_property_selection : EBSelection < [BoardModelEntity] > {
    get {
      return self.boardModels_property.prop
    }
  }

  //····················································································································
  //   Accessing boardInstances toMany relationship
  //····················································································································

  var boardInstances_property_selection : EBSelection < [MergerBoardInstanceEntity] > {
    get {
      return self.boardInstances_property.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var selectedPageIndex_property = EBStoredProperty_Int (0)
  var zoom_property = EBStoredProperty_Int (0)
  var boardWidthUnit_property = EBStoredProperty_Int (90000)
  var boardHeightUnit_property = EBStoredProperty_Int (90000)

  //····················································································································
  //    Transient properties
  //····················································································································

  var modelNames_property = EBTransientProperty_MergerBoardModelArray ()
  var instancesLayerDisplay_property = EBTransientProperty_CALayer ()
  var boardRect_property = EBTransientProperty_CanariBoardRect ()
  var boardWidth_property = EBTransientProperty_Int ()
  var boardHeight_property = EBTransientProperty_Int ()

  //····················································································································
  //    Relationships
  //····················································································································

  var boardModels_property = ToManyRelationship_MergerRootEntity_boardModels ()
  var boardInstances_property = ToManyRelationship_MergerRootEntity_boardInstances ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    self.modelNames_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardModels_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardModels_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MergerRootEntity_modelNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.instancesLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardInstances_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardInstances_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MergerRootEntity_instancesLayerDisplay (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardInstances_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardInstances_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MergerRootEntity_boardRect (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardWidth_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardRect_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardRect_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MergerRootEntity_boardWidth (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardHeight_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardRect_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardRect_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MergerRootEntity_boardHeight (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--- Install property observers for transients
    self.boardModels_property.addEBObserverOf_name (self.modelNames_property)
    self.boardInstances_property.addEBObserverOf_instanceLayerDisplay (self.instancesLayerDisplay_property)
    self.boardInstances_property.addEBObserverOf_instanceRect (self.boardRect_property)
    self.boardRect_property.addEBObserver (self.boardWidth_property)
    self.boardRect_property.addEBObserver (self.boardHeight_property)
  //--- Install undoers for properties
    self.selectedPageIndex_property.undoManager = undoManager ()
    self.zoom_property.undoManager = undoManager ()
    self.boardWidthUnit_property.undoManager = undoManager ()
    self.boardHeightUnit_property.undoManager = undoManager ()
  //--- Install owner for relationships
    self.boardModels_property.owner = self
    self.boardInstances_property.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.boardModels_property.removeEBObserverOf_name (self.modelNames_property)
    self.boardInstances_property.removeEBObserverOf_instanceLayerDisplay (self.instancesLayerDisplay_property)
    self.boardInstances_property.removeEBObserverOf_instanceRect (self.boardRect_property)
    self.boardRect_property.removeEBObserver (self.boardWidth_property)
    self.boardRect_property.removeEBObserver (self.boardHeight_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedPageIndex",
      idx:self.selectedPageIndex_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedPageIndex_property.mObserverExplorer,
      valueExplorer:&self.selectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom_property.mObserverExplorer,
      valueExplorer:&self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidthUnit",
      idx:self.boardWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.boardWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeightUnit",
      idx:self.boardHeightUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeightUnit_property.mObserverExplorer,
      valueExplorer:&self.boardHeightUnit_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "modelNames",
      idx:self.modelNames_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelNames_property.mObserverExplorer,
      valueExplorer:&self.modelNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "instancesLayerDisplay",
      idx:self.instancesLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instancesLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.instancesLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardRect",
      idx:self.boardRect_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardRect_property.mObserverExplorer,
      valueExplorer:&self.boardRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidth",
      idx:self.boardWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidth_property.mObserverExplorer,
      valueExplorer:&self.boardWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeight",
      idx:self.boardHeight_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeight_property.mObserverExplorer,
      valueExplorer:&self.boardHeight_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "boardModels",
      idx:boardModels_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&boardModels_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "boardInstances",
      idx:boardInstances_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&boardInstances_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.selectedPageIndex_property.mObserverExplorer = nil
    self.selectedPageIndex_property.mValueExplorer = nil
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
    self.boardWidthUnit_property.mObserverExplorer = nil
    self.boardWidthUnit_property.mValueExplorer = nil
    self.boardHeightUnit_property.mObserverExplorer = nil
    self.boardHeightUnit_property.mValueExplorer = nil
    self.boardModels_property.mValueExplorer = nil
    self.boardInstances_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey: "selectedPageIndex")
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey: "zoom")
    self.boardWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "boardWidthUnit")
    self.boardHeightUnit_property.storeIn (dictionary: ioDictionary, forKey: "boardHeightUnit")
    store (managedObjectArray: boardModels_property.propval as NSArray, relationshipName:"boardModels", intoDictionary: ioDictionary) ;
    store (managedObjectArray: boardInstances_property.propval as NSArray, relationshipName:"boardInstances", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.selectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"selectedPageIndex")
    self.zoom_property.readFrom (dictionary: inDictionary, forKey:"zoom")
    self.boardWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"boardWidthUnit")
    self.boardHeightUnit_property.readFrom (dictionary: inDictionary, forKey:"boardHeightUnit")
    self.boardModels_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "boardModels",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelEntity])
    self.boardInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "boardInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [MergerBoardInstanceEntity])
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    do{
      let objects = self.boardModels_property.propval
      self.boardModels_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.boardInstances_property.propval
      self.boardInstances_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    self.boardModels_property.setProp ([])
    self.boardInstances_property.setProp ([])
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in self.boardModels_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.boardInstances_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MergerRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MergerRootEntity : ReadOnlyAbstractArrayProperty <MergerRootEntity> {

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedPageIndex {
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for observer in mObserversOf_selectedPageIndex {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_zoom {
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for observer in mObserversOf_zoom {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidthUnit_toElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidthUnit {
        managedObject.boardWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidthUnit_fromElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for observer in mObserversOf_boardWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeightUnit_toElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeightUnit {
        managedObject.boardHeightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeightUnit_fromElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for observer in mObserversOf_boardHeightUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelNames' transient property
  //····················································································································

  private var mObserversOf_modelNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelNames_toElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelNames {
        managedObject.modelNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelNames_fromElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelNames {
        managedObject.modelNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instancesLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_instancesLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instancesLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instancesLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instancesLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instancesLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instancesLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instancesLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instancesLayerDisplay_toElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_instancesLayerDisplay {
        managedObject.instancesLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instancesLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_instancesLayerDisplay {
        managedObject.instancesLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardRect' transient property
  //····················································································································

  private var mObserversOf_boardRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardRect_toElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardRect {
        managedObject.boardRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardRect_fromElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardRect {
        managedObject.boardRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidth' transient property
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidth_toElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidth {
        managedObject.boardWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidth_fromElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidth {
        managedObject.boardWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeight' transient property
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeight_toElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeight {
        managedObject.boardHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeight_fromElementsOfSet (_ inSet : Set<MergerRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeight {
        managedObject.boardHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_MergerRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MergerRootEntity : ReadOnlyArrayOf_MergerRootEntity {

  var readModelFunction : Optional<() -> EBSelection < [MergerRootEntity] > >

  private var prop_cache : EBSelection < [MergerRootEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <MergerRootEntity> ()

  override var prop : EBSelection < [MergerRootEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <MergerRootEntity>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <MergerRootEntity> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_selectedPageIndex_fromElementsOfSet (removedSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeightUnit_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_modelNames_fromElementsOfSet (removedSet)
        removeEBObserversOf_instancesLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardRect_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeight_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_selectedPageIndex_toElementsOfSet (addedSet)
        addEBObserversOf_zoom_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeightUnit_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_modelNames_toElementsOfSet (addedSet)
        addEBObserversOf_instancesLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_boardRect_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeight_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRootEntity_selectedPageIndex : class {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRootEntity_zoom : class {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRootEntity_boardWidthUnit : class {
  var boardWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRootEntity_boardHeightUnit : class {
  var boardHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRootEntity_modelNames : class {
  var modelNames : EBSelection < MergerBoardModelArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRootEntity_instancesLayerDisplay : class {
  var instancesLayerDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRootEntity_boardRect : class {
  var boardRect : EBSelection < CanariBoardRect > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRootEntity_boardWidth : class {
  var boardWidth : EBSelection < Int > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRootEntity_boardHeight : class {
  var boardHeight : EBSelection < Int > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: boardModels
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_MergerRootEntity_boardModels : ReadOnlyArrayOf_BoardModelEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: boardModels
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_MergerRootEntity_boardModels :
ToManyRelationshipReadWrite_MergerRootEntity_boardModels, EBSignatureObserverProtocol {
  weak var owner : MergerRootEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelEntity> ()
  private var mValue = [BoardModelEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_artworkName_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentNameDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentValueDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLayoutTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPackagesDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPackagesSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPads_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPadsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backTrackSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backTracksDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimits_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentNameDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentValueDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLayoutTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPackagesDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPads_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPadsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontTrackSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontTracksDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holeLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holes_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_instanceCount_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelHeight_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelHeightUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelWidth_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelWidthUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_name_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padsHoles_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viaLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viaShapes_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viasHoles_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_artworkName_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentNameDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentNameSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentValueDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentValueSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLayoutTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendTextsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPackagesDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPackagesSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPads_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPadsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backTrackSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backTracksDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitWidth_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimits_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentNameDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentNameSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentValueDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentValueSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLayoutTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPackagesDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPackagesSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPads_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPadsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontTrackSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontTracksDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holeLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holes_toElementsOfSet (addedObjectSet)
        addEBObserversOf_instanceCount_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelHeight_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelHeightUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelWidth_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelWidthUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_name_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padsHoles_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viaLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viaShapes_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viasHoles_toElementsOfSet (addedObjectSet)
        addEBObserversOf_zoom_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [BoardModelEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelEntity]) { mValue = value }

  var propval : [BoardModelEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: boardInstances
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_MergerRootEntity_boardInstances : ReadOnlyArrayOf_MergerBoardInstanceEntity {

  //····················································································································
 
  func setProp (_ value :  [MergerBoardInstanceEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: boardInstances
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_MergerRootEntity_boardInstances :
ToManyRelationshipReadWrite_MergerRootEntity_boardInstances, EBSignatureObserverProtocol {
  weak var owner : MergerRootEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set<MergerBoardInstanceEntity> ()
  private var mValue = [MergerBoardInstanceEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_backComponentNameDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentValueDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLayoutTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPackagesDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPadsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backTracksDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentNameDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentValueDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLayoutTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPackagesDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPadsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontTracksDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holeLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_instanceLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_instanceRect_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viaLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : MergerBoardInstanceEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_backComponentNameDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentValueDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLayoutTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPackagesDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPadsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backTracksDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentNameDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentValueDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLayoutTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPackagesDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPadsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontTracksDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holeLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_instanceLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_instanceRect_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viaLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [MergerBoardInstanceEntity] > {
    get {
      return .single (mValue)
    }
  }

  override func setProp (_ value :  [MergerBoardInstanceEntity]) { mValue = value }

  var propval : [MergerBoardInstanceEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [MergerBoardInstanceEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MergerBoardInstanceEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : MergerBoardInstanceEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

