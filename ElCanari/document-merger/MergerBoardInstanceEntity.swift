//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MergerBoardInstanceEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MergerBoardInstanceEntity : EBManagedObject,
  MergerBoardInstanceEntity_x,
  MergerBoardInstanceEntity_y,
  MergerBoardInstanceEntity_frontPads,
  MergerBoardInstanceEntity_instanceRect,
  MergerBoardInstanceEntity_instanceLayerDisplay {

  //····················································································································
  //   Accessing x stored property
  //····················································································································

  var x : Int {
    get {
      return self.x_property.propval
    }
    set {
      self.x_property.setProp (newValue)
    }
  }

  var x_property_selection : EBSelection <Int> {
    get {
      return self.x_property.prop
    }
  }

  //····················································································································
  //   Accessing y stored property
  //····················································································································

  var y : Int {
    get {
      return self.y_property.propval
    }
    set {
      self.y_property.setProp (newValue)
    }
  }

  var y_property_selection : EBSelection <Int> {
    get {
      return self.y_property.prop
    }
  }

  //····················································································································
  //   Accessing frontPads transient property
  //····················································································································

  var frontPads_property_selection : EBSelection <MergerPadArray> {
    get {
      return self.frontPads_property.prop
    }
  }

  var frontPads : EBSelection <MergerPadArray> {
    get {
      return frontPads_property_selection
    }
  }

  //····················································································································
  //   Accessing instanceRect transient property
  //····················································································································

  var instanceRect_property_selection : EBSelection <CanariBoardRect> {
    get {
      return self.instanceRect_property.prop
    }
  }

  var instanceRect : EBSelection <CanariBoardRect> {
    get {
      return instanceRect_property_selection
    }
  }

  //····················································································································
  //   Accessing instanceLayerDisplay transient property
  //····················································································································

  var instanceLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.instanceLayerDisplay_property.prop
    }
  }

  var instanceLayerDisplay : EBSelection <CALayer> {
    get {
      return instanceLayerDisplay_property_selection
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var x_property = EBStoredProperty_Int (0)
  var y_property = EBStoredProperty_Int (0)

  //····················································································································
  //    Transient properties
  //····················································································································

  var frontPads_property = EBTransientProperty_MergerPadArray ()
  var instanceRect_property = EBTransientProperty_CanariBoardRect ()
  var instanceLayerDisplay_property = EBTransientProperty_CALayer ()

  //····················································································································
  //    Relationships
  //····················································································································

  var myModel_property = ToOneRelationship_MergerBoardInstanceEntity_myModel ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    self.frontPads_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.myModel_property.frontPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.myModel_property.frontPads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_MergerBoardInstanceEntity_frontPads (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.instanceRect_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelWidth_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelHeight_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.myModel_property.modelWidth_property_selection, unwSelf.myModel_property.modelHeight_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (compute_MergerBoardInstanceEntity_instanceRect (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.instanceLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelLayerDisplay_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.myModel_property.modelLayerDisplay_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_MergerBoardInstanceEntity_instanceLayerDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--- Install property observers for transients
    self.x_property.addEBObserver (self.frontPads_property)
    self.y_property.addEBObserver (self.frontPads_property)
    self.myModel_property.addEBObserverOf_frontPads (self.frontPads_property)
    self.x_property.addEBObserver (self.instanceRect_property)
    self.y_property.addEBObserver (self.instanceRect_property)
    self.myModel_property.addEBObserverOf_modelWidth (self.instanceRect_property)
    self.myModel_property.addEBObserverOf_modelHeight (self.instanceRect_property)
    self.x_property.addEBObserver (self.instanceLayerDisplay_property)
    self.y_property.addEBObserver (self.instanceLayerDisplay_property)
    self.myModel_property.addEBObserverOf_modelLayerDisplay (self.instanceLayerDisplay_property)
  //--- Install undoers for properties
    self.x_property.undoManager = undoManager ()
    self.y_property.undoManager = undoManager ()
  //--- Install owner for relationships
    self.myModel_property.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.x_property.removeEBObserver (self.frontPads_property)
    self.y_property.removeEBObserver (self.frontPads_property)
    self.myModel_property.removeEBObserverOf_frontPads (self.frontPads_property)
    self.x_property.removeEBObserver (self.instanceRect_property)
    self.y_property.removeEBObserver (self.instanceRect_property)
    self.myModel_property.removeEBObserverOf_modelWidth (self.instanceRect_property)
    self.myModel_property.removeEBObserverOf_modelHeight (self.instanceRect_property)
    self.x_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.y_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.myModel_property.removeEBObserverOf_modelLayerDisplay (self.instanceLayerDisplay_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "x",
      idx:self.x_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x_property.mObserverExplorer,
      valueExplorer:&self.x_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y",
      idx:self.y_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y_property.mObserverExplorer,
      valueExplorer:&self.y_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "frontPads",
      idx:self.frontPads_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPads_property.mObserverExplorer,
      valueExplorer:&self.frontPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "instanceRect",
      idx:self.instanceRect_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceRect_property.mObserverExplorer,
      valueExplorer:&self.instanceRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "instanceLayerDisplay",
      idx:self.instanceLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.instanceLayerDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "myModel",
      idx:self.myModel_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.myModel_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.x_property.mObserverExplorer = nil
    self.x_property.mValueExplorer = nil
    self.y_property.mObserverExplorer = nil
    self.y_property.mValueExplorer = nil
    self.myModel_property.mObserverExplorer = nil
    self.myModel_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.x_property.storeIn (dictionary: ioDictionary, forKey: "x")
    self.y_property.storeIn (dictionary: ioDictionary, forKey: "y")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.x_property.readFrom (dictionary: inDictionary, forKey:"x")
    self.y_property.readFrom (dictionary: inDictionary, forKey:"y")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    self.myModel_property.setProp (nil) // Set relationship to nil
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
    self.myModel_property.setProp (nil)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    if let object = self.myModel_property.propval {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MergerBoardInstanceEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MergerBoardInstanceEntity : ReadOnlyAbstractArrayProperty <MergerBoardInstanceEntity> {

  //····················································································································
  //   Observers of 'x' stored property
  //····················································································································

  private var mObserversOf_x = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_x.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_x.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x_toElementsOfSet (_ inSet : Set<MergerBoardInstanceEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_x {
        managedObject.x_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x_fromElementsOfSet (_ inSet : Set<MergerBoardInstanceEntity>) {
    for observer in mObserversOf_x {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y' stored property
  //····················································································································

  private var mObserversOf_y = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_y.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_y.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y_toElementsOfSet (_ inSet : Set<MergerBoardInstanceEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_y {
        managedObject.y_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y_fromElementsOfSet (_ inSet : Set<MergerBoardInstanceEntity>) {
    for observer in mObserversOf_y {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPads' transient property
  //····················································································································

  private var mObserversOf_frontPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPads_toElementsOfSet (_ inSet : Set<MergerBoardInstanceEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPads {
        managedObject.frontPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPads_fromElementsOfSet (_ inSet : Set<MergerBoardInstanceEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPads {
        managedObject.frontPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceRect' transient property
  //····················································································································

  private var mObserversOf_instanceRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instanceRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instanceRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceRect_toElementsOfSet (_ inSet : Set<MergerBoardInstanceEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceRect {
        managedObject.instanceRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceRect_fromElementsOfSet (_ inSet : Set<MergerBoardInstanceEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceRect {
        managedObject.instanceRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_instanceLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instanceLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instanceLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceLayerDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstanceEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceLayerDisplay {
        managedObject.instanceLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstanceEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceLayerDisplay {
        managedObject.instanceLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_MergerBoardInstanceEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MergerBoardInstanceEntity : ReadOnlyArrayOf_MergerBoardInstanceEntity {

  var readModelFunction : Optional<() -> EBSelection < [MergerBoardInstanceEntity] > >

  private var prop_cache : EBSelection < [MergerBoardInstanceEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <MergerBoardInstanceEntity> ()

  override var prop : EBSelection < [MergerBoardInstanceEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <MergerBoardInstanceEntity>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <MergerBoardInstanceEntity> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_x_fromElementsOfSet (removedSet)
        removeEBObserversOf_y_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_frontPads_fromElementsOfSet (removedSet)
        removeEBObserversOf_instanceRect_fromElementsOfSet (removedSet)
        removeEBObserversOf_instanceLayerDisplay_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_x_toElementsOfSet (addedSet)
        addEBObserversOf_y_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_frontPads_toElementsOfSet (addedSet)
        addEBObserversOf_instanceRect_toElementsOfSet (addedSet)
        addEBObserversOf_instanceLayerDisplay_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstanceEntity_x : class {
  var x : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstanceEntity_y : class {
  var y : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstanceEntity_frontPads : class {
  var frontPads : EBSelection < MergerPadArray > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstanceEntity_instanceRect : class {
  var instanceRect : EBSelection < CanariBoardRect > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstanceEntity_instanceLayerDisplay : class {
  var instanceLayerDisplay : EBSelection < CALayer > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: myModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_MergerBoardInstanceEntity_myModel : EBAbstractProperty {
  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : MergerBoardInstanceEntity? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : BoardModelEntity? {
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.myInstances_property.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          unwrappedValue.myInstances_property.add (unwrappedOwner)
        }
      //--- Remove property observers of old object
        oldValue?.artworkName_property.removeEBObserversFrom (mObserversOf_artworkName)
        oldValue?.backComponentNameSegments_property.removeEBObserversFrom (mObserversOf_backComponentNameSegments)
        oldValue?.backComponentNameSegmentsForDisplay_property.removeEBObserversFrom (mObserversOf_backComponentNameSegmentsForDisplay)
        oldValue?.backComponentValueSegments_property.removeEBObserversFrom (mObserversOf_backComponentValueSegments)
        oldValue?.backComponentValuesForDisplay_property.removeEBObserversFrom (mObserversOf_backComponentValuesForDisplay)
        oldValue?.backLayoutTextsLayer_property.removeEBObserversFrom (mObserversOf_backLayoutTextsLayer)
        oldValue?.backLayoutTextsLayerDisplay_property.removeEBObserversFrom (mObserversOf_backLayoutTextsLayerDisplay)
        oldValue?.backLayoutTextsSegments_property.removeEBObserversFrom (mObserversOf_backLayoutTextsSegments)
        oldValue?.backLayoutTextsSegmentsForDisplay_property.removeEBObserversFrom (mObserversOf_backLayoutTextsSegmentsForDisplay)
        oldValue?.backLegendTextsLayer_property.removeEBObserversFrom (mObserversOf_backLegendTextsLayer)
        oldValue?.backLegendTextsLayerDisplay_property.removeEBObserversFrom (mObserversOf_backLegendTextsLayerDisplay)
        oldValue?.backLegendTextsSegments_property.removeEBObserversFrom (mObserversOf_backLegendTextsSegments)
        oldValue?.backLegendTextsSegmentsForDisplay_property.removeEBObserversFrom (mObserversOf_backLegendTextsSegmentsForDisplay)
        oldValue?.backPackagesSegments_property.removeEBObserversFrom (mObserversOf_backPackagesSegments)
        oldValue?.backPackagesSegmentsForDisplay_property.removeEBObserversFrom (mObserversOf_backPackagesSegmentsForDisplay)
        oldValue?.backPads_property.removeEBObserversFrom (mObserversOf_backPads)
        oldValue?.backPadsForDisplay_property.removeEBObserversFrom (mObserversOf_backPadsForDisplay)
        oldValue?.backTrackSegments_property.removeEBObserversFrom (mObserversOf_backTrackSegments)
        oldValue?.backTrackSegmentsForDisplay_property.removeEBObserversFrom (mObserversOf_backTrackSegmentsForDisplay)
        oldValue?.boardLimitWidth_property.removeEBObserversFrom (mObserversOf_boardLimitWidth)
        oldValue?.boardLimitWidthUnit_property.removeEBObserversFrom (mObserversOf_boardLimitWidthUnit)
        oldValue?.boardLimits_property.removeEBObserversFrom (mObserversOf_boardLimits)
        oldValue?.frontComponentNameSegments_property.removeEBObserversFrom (mObserversOf_frontComponentNameSegments)
        oldValue?.frontComponentNameSegmentsForDisplay_property.removeEBObserversFrom (mObserversOf_frontComponentNameSegmentsForDisplay)
        oldValue?.frontComponentValueSegments_property.removeEBObserversFrom (mObserversOf_frontComponentValueSegments)
        oldValue?.frontComponentValuesForDisplay_property.removeEBObserversFrom (mObserversOf_frontComponentValuesForDisplay)
        oldValue?.frontLayoutTextsLayer_property.removeEBObserversFrom (mObserversOf_frontLayoutTextsLayer)
        oldValue?.frontLayoutTextsLayerDisplay_property.removeEBObserversFrom (mObserversOf_frontLayoutTextsLayerDisplay)
        oldValue?.frontLayoutTextsSegments_property.removeEBObserversFrom (mObserversOf_frontLayoutTextsSegments)
        oldValue?.frontLayoutTextsSegmentsForDisplay_property.removeEBObserversFrom (mObserversOf_frontLayoutTextsSegmentsForDisplay)
        oldValue?.frontLegendTextsLayer_property.removeEBObserversFrom (mObserversOf_frontLegendTextsLayer)
        oldValue?.frontLegendTextsLayerDisplay_property.removeEBObserversFrom (mObserversOf_frontLegendTextsLayerDisplay)
        oldValue?.frontLegendTextsSegments_property.removeEBObserversFrom (mObserversOf_frontLegendTextsSegments)
        oldValue?.frontLegendTextsSegmentsForDisplay_property.removeEBObserversFrom (mObserversOf_frontLegendTextsSegmentsForDisplay)
        oldValue?.frontPackagesSegments_property.removeEBObserversFrom (mObserversOf_frontPackagesSegments)
        oldValue?.frontPackagesSegmentsForDisplay_property.removeEBObserversFrom (mObserversOf_frontPackagesSegmentsForDisplay)
        oldValue?.frontPads_property.removeEBObserversFrom (mObserversOf_frontPads)
        oldValue?.frontPadsForDisplay_property.removeEBObserversFrom (mObserversOf_frontPadsForDisplay)
        oldValue?.frontTrackSegments_property.removeEBObserversFrom (mObserversOf_frontTrackSegments)
        oldValue?.frontTrackSegmentsForDisplay_property.removeEBObserversFrom (mObserversOf_frontTrackSegmentsForDisplay)
        oldValue?.holes_property.removeEBObserversFrom (mObserversOf_holes)
        oldValue?.holesForDisplay_property.removeEBObserversFrom (mObserversOf_holesForDisplay)
        oldValue?.instanceCount_property.removeEBObserversFrom (mObserversOf_instanceCount)
        oldValue?.modelHeight_property.removeEBObserversFrom (mObserversOf_modelHeight)
        oldValue?.modelHeightUnit_property.removeEBObserversFrom (mObserversOf_modelHeightUnit)
        oldValue?.modelLayerDisplay_property.removeEBObserversFrom (mObserversOf_modelLayerDisplay)
        oldValue?.modelWidth_property.removeEBObserversFrom (mObserversOf_modelWidth)
        oldValue?.modelWidthUnit_property.removeEBObserversFrom (mObserversOf_modelWidthUnit)
        oldValue?.name_property.removeEBObserversFrom (mObserversOf_name)
        oldValue?.padsHoles_property.removeEBObserversFrom (mObserversOf_padsHoles)
        oldValue?.viaShapes_property.removeEBObserversFrom (mObserversOf_viaShapes)
        oldValue?.viaShapesForDisplay_property.removeEBObserversFrom (mObserversOf_viaShapesForDisplay)
        oldValue?.viasHoles_property.removeEBObserversFrom (mObserversOf_viasHoles)
        oldValue?.zoom_property.removeEBObserversFrom (mObserversOf_zoom)
      //--- Add property observers to new object
        mValue?.artworkName_property.addEBObserversFrom (mObserversOf_artworkName)
        mValue?.backComponentNameSegments_property.addEBObserversFrom (mObserversOf_backComponentNameSegments)
        mValue?.backComponentNameSegmentsForDisplay_property.addEBObserversFrom (mObserversOf_backComponentNameSegmentsForDisplay)
        mValue?.backComponentValueSegments_property.addEBObserversFrom (mObserversOf_backComponentValueSegments)
        mValue?.backComponentValuesForDisplay_property.addEBObserversFrom (mObserversOf_backComponentValuesForDisplay)
        mValue?.backLayoutTextsLayer_property.addEBObserversFrom (mObserversOf_backLayoutTextsLayer)
        mValue?.backLayoutTextsLayerDisplay_property.addEBObserversFrom (mObserversOf_backLayoutTextsLayerDisplay)
        mValue?.backLayoutTextsSegments_property.addEBObserversFrom (mObserversOf_backLayoutTextsSegments)
        mValue?.backLayoutTextsSegmentsForDisplay_property.addEBObserversFrom (mObserversOf_backLayoutTextsSegmentsForDisplay)
        mValue?.backLegendTextsLayer_property.addEBObserversFrom (mObserversOf_backLegendTextsLayer)
        mValue?.backLegendTextsLayerDisplay_property.addEBObserversFrom (mObserversOf_backLegendTextsLayerDisplay)
        mValue?.backLegendTextsSegments_property.addEBObserversFrom (mObserversOf_backLegendTextsSegments)
        mValue?.backLegendTextsSegmentsForDisplay_property.addEBObserversFrom (mObserversOf_backLegendTextsSegmentsForDisplay)
        mValue?.backPackagesSegments_property.addEBObserversFrom (mObserversOf_backPackagesSegments)
        mValue?.backPackagesSegmentsForDisplay_property.addEBObserversFrom (mObserversOf_backPackagesSegmentsForDisplay)
        mValue?.backPads_property.addEBObserversFrom (mObserversOf_backPads)
        mValue?.backPadsForDisplay_property.addEBObserversFrom (mObserversOf_backPadsForDisplay)
        mValue?.backTrackSegments_property.addEBObserversFrom (mObserversOf_backTrackSegments)
        mValue?.backTrackSegmentsForDisplay_property.addEBObserversFrom (mObserversOf_backTrackSegmentsForDisplay)
        mValue?.boardLimitWidth_property.addEBObserversFrom (mObserversOf_boardLimitWidth)
        mValue?.boardLimitWidthUnit_property.addEBObserversFrom (mObserversOf_boardLimitWidthUnit)
        mValue?.boardLimits_property.addEBObserversFrom (mObserversOf_boardLimits)
        mValue?.frontComponentNameSegments_property.addEBObserversFrom (mObserversOf_frontComponentNameSegments)
        mValue?.frontComponentNameSegmentsForDisplay_property.addEBObserversFrom (mObserversOf_frontComponentNameSegmentsForDisplay)
        mValue?.frontComponentValueSegments_property.addEBObserversFrom (mObserversOf_frontComponentValueSegments)
        mValue?.frontComponentValuesForDisplay_property.addEBObserversFrom (mObserversOf_frontComponentValuesForDisplay)
        mValue?.frontLayoutTextsLayer_property.addEBObserversFrom (mObserversOf_frontLayoutTextsLayer)
        mValue?.frontLayoutTextsLayerDisplay_property.addEBObserversFrom (mObserversOf_frontLayoutTextsLayerDisplay)
        mValue?.frontLayoutTextsSegments_property.addEBObserversFrom (mObserversOf_frontLayoutTextsSegments)
        mValue?.frontLayoutTextsSegmentsForDisplay_property.addEBObserversFrom (mObserversOf_frontLayoutTextsSegmentsForDisplay)
        mValue?.frontLegendTextsLayer_property.addEBObserversFrom (mObserversOf_frontLegendTextsLayer)
        mValue?.frontLegendTextsLayerDisplay_property.addEBObserversFrom (mObserversOf_frontLegendTextsLayerDisplay)
        mValue?.frontLegendTextsSegments_property.addEBObserversFrom (mObserversOf_frontLegendTextsSegments)
        mValue?.frontLegendTextsSegmentsForDisplay_property.addEBObserversFrom (mObserversOf_frontLegendTextsSegmentsForDisplay)
        mValue?.frontPackagesSegments_property.addEBObserversFrom (mObserversOf_frontPackagesSegments)
        mValue?.frontPackagesSegmentsForDisplay_property.addEBObserversFrom (mObserversOf_frontPackagesSegmentsForDisplay)
        mValue?.frontPads_property.addEBObserversFrom (mObserversOf_frontPads)
        mValue?.frontPadsForDisplay_property.addEBObserversFrom (mObserversOf_frontPadsForDisplay)
        mValue?.frontTrackSegments_property.addEBObserversFrom (mObserversOf_frontTrackSegments)
        mValue?.frontTrackSegmentsForDisplay_property.addEBObserversFrom (mObserversOf_frontTrackSegmentsForDisplay)
        mValue?.holes_property.addEBObserversFrom (mObserversOf_holes)
        mValue?.holesForDisplay_property.addEBObserversFrom (mObserversOf_holesForDisplay)
        mValue?.instanceCount_property.addEBObserversFrom (mObserversOf_instanceCount)
        mValue?.modelHeight_property.addEBObserversFrom (mObserversOf_modelHeight)
        mValue?.modelHeightUnit_property.addEBObserversFrom (mObserversOf_modelHeightUnit)
        mValue?.modelLayerDisplay_property.addEBObserversFrom (mObserversOf_modelLayerDisplay)
        mValue?.modelWidth_property.addEBObserversFrom (mObserversOf_modelWidth)
        mValue?.modelWidthUnit_property.addEBObserversFrom (mObserversOf_modelWidthUnit)
        mValue?.name_property.addEBObserversFrom (mObserversOf_name)
        mValue?.padsHoles_property.addEBObserversFrom (mObserversOf_padsHoles)
        mValue?.viaShapes_property.addEBObserversFrom (mObserversOf_viaShapes)
        mValue?.viaShapesForDisplay_property.addEBObserversFrom (mObserversOf_viaShapesForDisplay)
        mValue?.viasHoles_property.addEBObserversFrom (mObserversOf_viasHoles)
        mValue?.zoom_property.addEBObserversFrom (mObserversOf_zoom)
       //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : BoardModelEntity? { get { return mValue } }

  var prop : EBSelection <BoardModelEntity?> { get { return .single (mValue) } }

  func setProp (_ value : BoardModelEntity?) { mValue = value }

  //····················································································································

  func performUndo (_ oldValue : BoardModelEntity?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelEntity) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelEntity) {
    mValue = object
  }

  //····················································································································
  //   Observable property: artworkName
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  var artworkName_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.artworkName_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    mObserversOf_artworkName.insert (inObserver)
    if let object = self.propval {
      object.artworkName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    mObserversOf_artworkName.remove (inObserver)
    if let object = self.propval {
      object.artworkName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentNameSegments
  //····················································································································

  private var mObserversOf_backComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  var backComponentNameSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentNameSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    mObserversOf_backComponentNameSegments.insert (inObserver)
    if let object = self.propval {
      object.backComponentNameSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    mObserversOf_backComponentNameSegments.remove (inObserver)
    if let object = self.propval {
      object.backComponentNameSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentNameSegmentsForDisplay
  //····················································································································

  private var mObserversOf_backComponentNameSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  var backComponentNameSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentNameSegmentsForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentNameSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backComponentNameSegmentsForDisplay.insert (inObserver)
    if let object = self.propval {
      object.backComponentNameSegmentsForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backComponentNameSegmentsForDisplay.remove (inObserver)
    if let object = self.propval {
      object.backComponentNameSegmentsForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentValueSegments
  //····················································································································

  private var mObserversOf_backComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  var backComponentValueSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentValueSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    mObserversOf_backComponentValueSegments.insert (inObserver)
    if let object = self.propval {
      object.backComponentValueSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    mObserversOf_backComponentValueSegments.remove (inObserver)
    if let object = self.propval {
      object.backComponentValueSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentValuesForDisplay
  //····················································································································

  private var mObserversOf_backComponentValuesForDisplay = EBWeakEventSet ()

  //····················································································································

  var backComponentValuesForDisplay_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentValuesForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentValuesForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backComponentValuesForDisplay.insert (inObserver)
    if let object = self.propval {
      object.backComponentValuesForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValuesForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backComponentValuesForDisplay.remove (inObserver)
    if let object = self.propval {
      object.backComponentValuesForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLayoutTextsLayer
  //····················································································································

  private var mObserversOf_backLayoutTextsLayer = EBWeakEventSet ()

  //····················································································································

  var backLayoutTextsLayer_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backLayoutTextsLayer_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsLayer (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsLayer.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTextsLayer_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsLayer (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsLayer.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTextsLayer_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLayoutTextsLayerDisplay
  //····················································································································

  private var mObserversOf_backLayoutTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var backLayoutTextsLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backLayoutTextsLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTextsLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTextsLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLayoutTextsSegments
  //····················································································································

  private var mObserversOf_backLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  var backLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLayoutTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLayoutTextsSegmentsForDisplay
  //····················································································································

  private var mObserversOf_backLayoutTextsSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  var backLayoutTextsSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLayoutTextsSegmentsForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsSegmentsForDisplay.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTextsSegmentsForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsSegmentsForDisplay.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTextsSegmentsForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendTextsLayer
  //····················································································································

  private var mObserversOf_backLegendTextsLayer = EBWeakEventSet ()

  //····················································································································

  var backLegendTextsLayer_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backLegendTextsLayer_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsLayer (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsLayer.insert (inObserver)
    if let object = self.propval {
      object.backLegendTextsLayer_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsLayer (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsLayer.remove (inObserver)
    if let object = self.propval {
      object.backLegendTextsLayer_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendTextsLayerDisplay
  //····················································································································

  private var mObserversOf_backLegendTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var backLegendTextsLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backLegendTextsLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.backLegendTextsLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.backLegendTextsLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendTextsSegments
  //····················································································································

  private var mObserversOf_backLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  var backLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.backLegendTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.backLegendTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendTextsSegmentsForDisplay
  //····················································································································

  private var mObserversOf_backLegendTextsSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  var backLegendTextsSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendTextsSegmentsForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsSegmentsForDisplay.insert (inObserver)
    if let object = self.propval {
      object.backLegendTextsSegmentsForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsSegmentsForDisplay.remove (inObserver)
    if let object = self.propval {
      object.backLegendTextsSegmentsForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPackagesSegments
  //····················································································································

  private var mObserversOf_backPackagesSegments = EBWeakEventSet ()

  //····················································································································

  var backPackagesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backPackagesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    mObserversOf_backPackagesSegments.insert (inObserver)
    if let object = self.propval {
      object.backPackagesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    mObserversOf_backPackagesSegments.remove (inObserver)
    if let object = self.propval {
      object.backPackagesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPackagesSegmentsForDisplay
  //····················································································································

  private var mObserversOf_backPackagesSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  var backPackagesSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backPackagesSegmentsForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPackagesSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backPackagesSegmentsForDisplay.insert (inObserver)
    if let object = self.propval {
      object.backPackagesSegmentsForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backPackagesSegmentsForDisplay.remove (inObserver)
    if let object = self.propval {
      object.backPackagesSegmentsForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPads
  //····················································································································

  private var mObserversOf_backPads = EBWeakEventSet ()

  //····················································································································

  var backPads_property_selection : EBSelection <MergerPadArray?> {
    get {
      if let model = self.propval {
        switch (model.backPads_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPads (_ inObserver : EBEvent) {
    mObserversOf_backPads.insert (inObserver)
    if let object = self.propval {
      object.backPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPads (_ inObserver : EBEvent) {
    mObserversOf_backPads.remove (inObserver)
    if let object = self.propval {
      object.backPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPadsForDisplay
  //····················································································································

  private var mObserversOf_backPadsForDisplay = EBWeakEventSet ()

  //····················································································································

  var backPadsForDisplay_property_selection : EBSelection <MergerPadArray?> {
    get {
      if let model = self.propval {
        switch (model.backPadsForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPadsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backPadsForDisplay.insert (inObserver)
    if let object = self.propval {
      object.backPadsForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backPadsForDisplay.remove (inObserver)
    if let object = self.propval {
      object.backPadsForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backTrackSegments
  //····················································································································

  private var mObserversOf_backTrackSegments = EBWeakEventSet ()

  //····················································································································

  var backTrackSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backTrackSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    mObserversOf_backTrackSegments.insert (inObserver)
    if let object = self.propval {
      object.backTrackSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    mObserversOf_backTrackSegments.remove (inObserver)
    if let object = self.propval {
      object.backTrackSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backTrackSegmentsForDisplay
  //····················································································································

  private var mObserversOf_backTrackSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  var backTrackSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backTrackSegmentsForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backTrackSegmentsForDisplay.insert (inObserver)
    if let object = self.propval {
      object.backTrackSegmentsForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_backTrackSegmentsForDisplay.remove (inObserver)
    if let object = self.propval {
      object.backTrackSegmentsForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitWidth
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  var boardLimitWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_boardLimitWidth.insert (inObserver)
    if let object = self.propval {
      object.boardLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_boardLimitWidth.remove (inObserver)
    if let object = self.propval {
      object.boardLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitWidthUnit
  //····················································································································

  private var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  var boardLimitWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_boardLimitWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.boardLimitWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_boardLimitWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.boardLimitWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimits
  //····················································································································

  private var mObserversOf_boardLimits = EBWeakEventSet ()

  //····················································································································

  var boardLimits_property_selection : EBSelection <MergerBoardLimits?> {
    get {
      if let model = self.propval {
        switch (model.boardLimits_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    mObserversOf_boardLimits.insert (inObserver)
    if let object = self.propval {
      object.boardLimits_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    mObserversOf_boardLimits.remove (inObserver)
    if let object = self.propval {
      object.boardLimits_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentNameSegments
  //····················································································································

  private var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  var frontComponentNameSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentNameSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNameSegments.insert (inObserver)
    if let object = self.propval {
      object.frontComponentNameSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNameSegments.remove (inObserver)
    if let object = self.propval {
      object.frontComponentNameSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentNameSegmentsForDisplay
  //····················································································································

  private var mObserversOf_frontComponentNameSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  var frontComponentNameSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentNameSegmentsForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNameSegmentsForDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontComponentNameSegmentsForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNameSegmentsForDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontComponentNameSegmentsForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentValueSegments
  //····················································································································

  private var mObserversOf_frontComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  var frontComponentValueSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentValueSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValueSegments.insert (inObserver)
    if let object = self.propval {
      object.frontComponentValueSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValueSegments.remove (inObserver)
    if let object = self.propval {
      object.frontComponentValueSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentValuesForDisplay
  //····················································································································

  private var mObserversOf_frontComponentValuesForDisplay = EBWeakEventSet ()

  //····················································································································

  var frontComponentValuesForDisplay_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentValuesForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValuesForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValuesForDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontComponentValuesForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValuesForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValuesForDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontComponentValuesForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLayoutTextsLayer
  //····················································································································

  private var mObserversOf_frontLayoutTextsLayer = EBWeakEventSet ()

  //····················································································································

  var frontLayoutTextsLayer_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.frontLayoutTextsLayer_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsLayer (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsLayer.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsLayer_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsLayer (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsLayer.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsLayer_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLayoutTextsLayerDisplay
  //····················································································································

  private var mObserversOf_frontLayoutTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var frontLayoutTextsLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.frontLayoutTextsLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLayoutTextsSegments
  //····················································································································

  private var mObserversOf_frontLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  var frontLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLayoutTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLayoutTextsSegmentsForDisplay
  //····················································································································

  private var mObserversOf_frontLayoutTextsSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  var frontLayoutTextsSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLayoutTextsSegmentsForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsSegmentsForDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsSegmentsForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsSegmentsForDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsSegmentsForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendTextsLayer
  //····················································································································

  private var mObserversOf_frontLegendTextsLayer = EBWeakEventSet ()

  //····················································································································

  var frontLegendTextsLayer_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendTextsLayer_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsLayer (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsLayer.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTextsLayer_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsLayer (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsLayer.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTextsLayer_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendTextsLayerDisplay
  //····················································································································

  private var mObserversOf_frontLegendTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var frontLegendTextsLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendTextsLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTextsLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTextsLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendTextsSegments
  //····················································································································

  private var mObserversOf_frontLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  var frontLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendTextsSegmentsForDisplay
  //····················································································································

  private var mObserversOf_frontLegendTextsSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  var frontLegendTextsSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendTextsSegmentsForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsSegmentsForDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTextsSegmentsForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsSegmentsForDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTextsSegmentsForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPackagesSegments
  //····················································································································

  private var mObserversOf_frontPackagesSegments = EBWeakEventSet ()

  //····················································································································

  var frontPackagesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPackagesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesSegments.insert (inObserver)
    if let object = self.propval {
      object.frontPackagesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesSegments.remove (inObserver)
    if let object = self.propval {
      object.frontPackagesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPackagesSegmentsForDisplay
  //····················································································································

  private var mObserversOf_frontPackagesSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  var frontPackagesSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPackagesSegmentsForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPackagesSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesSegmentsForDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontPackagesSegmentsForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesSegmentsForDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontPackagesSegmentsForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPads
  //····················································································································

  private var mObserversOf_frontPads = EBWeakEventSet ()

  //····················································································································

  var frontPads_property_selection : EBSelection <MergerPadArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPads_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPads (_ inObserver : EBEvent) {
    mObserversOf_frontPads.insert (inObserver)
    if let object = self.propval {
      object.frontPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPads (_ inObserver : EBEvent) {
    mObserversOf_frontPads.remove (inObserver)
    if let object = self.propval {
      object.frontPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPadsForDisplay
  //····················································································································

  private var mObserversOf_frontPadsForDisplay = EBWeakEventSet ()

  //····················································································································

  var frontPadsForDisplay_property_selection : EBSelection <MergerPadArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPadsForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPadsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontPadsForDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontPadsForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontPadsForDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontPadsForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontTrackSegments
  //····················································································································

  private var mObserversOf_frontTrackSegments = EBWeakEventSet ()

  //····················································································································

  var frontTrackSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontTrackSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    mObserversOf_frontTrackSegments.insert (inObserver)
    if let object = self.propval {
      object.frontTrackSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    mObserversOf_frontTrackSegments.remove (inObserver)
    if let object = self.propval {
      object.frontTrackSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontTrackSegmentsForDisplay
  //····················································································································

  private var mObserversOf_frontTrackSegmentsForDisplay = EBWeakEventSet ()

  //····················································································································

  var frontTrackSegmentsForDisplay_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontTrackSegmentsForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontTrackSegmentsForDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontTrackSegmentsForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegmentsForDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontTrackSegmentsForDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontTrackSegmentsForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: holes
  //····················································································································

  private var mObserversOf_holes = EBWeakEventSet ()

  //····················································································································

  var holes_property_selection : EBSelection <MergerHoleArray?> {
    get {
      if let model = self.propval {
        switch (model.holes_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_holes (_ inObserver : EBEvent) {
    mObserversOf_holes.insert (inObserver)
    if let object = self.propval {
      object.holes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_holes (_ inObserver : EBEvent) {
    mObserversOf_holes.remove (inObserver)
    if let object = self.propval {
      object.holes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: holesForDisplay
  //····················································································································

  private var mObserversOf_holesForDisplay = EBWeakEventSet ()

  //····················································································································

  var holesForDisplay_property_selection : EBSelection <MergerHoleArray?> {
    get {
      if let model = self.propval {
        switch (model.holesForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_holesForDisplay (_ inObserver : EBEvent) {
    mObserversOf_holesForDisplay.insert (inObserver)
    if let object = self.propval {
      object.holesForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_holesForDisplay (_ inObserver : EBEvent) {
    mObserversOf_holesForDisplay.remove (inObserver)
    if let object = self.propval {
      object.holesForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: instanceCount
  //····················································································································

  private var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  var instanceCount_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.instanceCount_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    mObserversOf_instanceCount.insert (inObserver)
    if let object = self.propval {
      object.instanceCount_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    mObserversOf_instanceCount.remove (inObserver)
    if let object = self.propval {
      object.instanceCount_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelHeight
  //····················································································································

  private var mObserversOf_modelHeight = EBWeakEventSet ()

  //····················································································································

  var modelHeight_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelHeight_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    mObserversOf_modelHeight.insert (inObserver)
    if let object = self.propval {
      object.modelHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    mObserversOf_modelHeight.remove (inObserver)
    if let object = self.propval {
      object.modelHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelHeightUnit
  //····················································································································

  private var mObserversOf_modelHeightUnit = EBWeakEventSet ()

  //····················································································································

  var modelHeightUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelHeightUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    mObserversOf_modelHeightUnit.insert (inObserver)
    if let object = self.propval {
      object.modelHeightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    mObserversOf_modelHeightUnit.remove (inObserver)
    if let object = self.propval {
      object.modelHeightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelLayerDisplay
  //····················································································································

  private var mObserversOf_modelLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var modelLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.modelLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_modelLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.modelLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_modelLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.modelLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelWidth
  //····················································································································

  private var mObserversOf_modelWidth = EBWeakEventSet ()

  //····················································································································

  var modelWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    mObserversOf_modelWidth.insert (inObserver)
    if let object = self.propval {
      object.modelWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    mObserversOf_modelWidth.remove (inObserver)
    if let object = self.propval {
      object.modelWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelWidthUnit
  //····················································································································

  private var mObserversOf_modelWidthUnit = EBWeakEventSet ()

  //····················································································································

  var modelWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_modelWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.modelWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_modelWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.modelWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: name
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  var name_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.name_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    mObserversOf_name.insert (inObserver)
    if let object = self.propval {
      object.name_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    mObserversOf_name.remove (inObserver)
    if let object = self.propval {
      object.name_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: padsHoles
  //····················································································································

  private var mObserversOf_padsHoles = EBWeakEventSet ()

  //····················································································································

  var padsHoles_property_selection : EBSelection <MergerHoleArray?> {
    get {
      if let model = self.propval {
        switch (model.padsHoles_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_padsHoles (_ inObserver : EBEvent) {
    mObserversOf_padsHoles.insert (inObserver)
    if let object = self.propval {
      object.padsHoles_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padsHoles (_ inObserver : EBEvent) {
    mObserversOf_padsHoles.remove (inObserver)
    if let object = self.propval {
      object.padsHoles_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: viaShapes
  //····················································································································

  private var mObserversOf_viaShapes = EBWeakEventSet ()

  //····················································································································

  var viaShapes_property_selection : EBSelection <MergerViaShapeArray?> {
    get {
      if let model = self.propval {
        switch (model.viaShapes_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    mObserversOf_viaShapes.insert (inObserver)
    if let object = self.propval {
      object.viaShapes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    mObserversOf_viaShapes.remove (inObserver)
    if let object = self.propval {
      object.viaShapes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: viaShapesForDisplay
  //····················································································································

  private var mObserversOf_viaShapesForDisplay = EBWeakEventSet ()

  //····················································································································

  var viaShapesForDisplay_property_selection : EBSelection <MergerViaShapeArray?> {
    get {
      if let model = self.propval {
        switch (model.viaShapesForDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_viaShapesForDisplay (_ inObserver : EBEvent) {
    mObserversOf_viaShapesForDisplay.insert (inObserver)
    if let object = self.propval {
      object.viaShapesForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapesForDisplay (_ inObserver : EBEvent) {
    mObserversOf_viaShapesForDisplay.remove (inObserver)
    if let object = self.propval {
      object.viaShapesForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: viasHoles
  //····················································································································

  private var mObserversOf_viasHoles = EBWeakEventSet ()

  //····················································································································

  var viasHoles_property_selection : EBSelection <MergerHoleArray?> {
    get {
      if let model = self.propval {
        switch (model.viasHoles_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_viasHoles (_ inObserver : EBEvent) {
    mObserversOf_viasHoles.insert (inObserver)
    if let object = self.propval {
      object.viasHoles_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viasHoles (_ inObserver : EBEvent) {
    mObserversOf_viasHoles.remove (inObserver)
    if let object = self.propval {
      object.viasHoles_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: zoom
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  var zoom_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.zoom_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    mObserversOf_zoom.insert (inObserver)
    if let object = self.propval {
      object.zoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    mObserversOf_zoom.remove (inObserver)
    if let object = self.propval {
      object.zoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

