//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_BoardModel 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_BoardModel : ReadOnlyAbstractObjectProperty <BoardModel> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : BoardModel?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
  //--- Add observers to added objects
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private final var name_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final var name_property_selection : EBSelection <String?> { // §
    return self.name_property.selection
/*    if let model = self.propval {
      switch (model.name_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.name_property.addEBObserver (inObserver)
/*    self.mObserversOf_name.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.name_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.name_property.removeEBObserver (inObserver)
/*    self.mObserversOf_name.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.name_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'modelWidth' stored property
  //····················································································································

  private final var modelWidth_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_modelWidth = EBWeakEventSet ()

  //····················································································································

  final var modelWidth_property_selection : EBSelection <Int?> { // §
    return self.modelWidth_property.selection
/*    if let model = self.propval {
      switch (model.modelWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    self.modelWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_modelWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.modelWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    self.modelWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_modelWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelWidth_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'modelWidthUnit' stored property
  //····················································································································

  private final var modelWidthUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_modelWidthUnit = EBWeakEventSet ()

  //····················································································································

  final var modelWidthUnit_property_selection : EBSelection <Int?> { // §
    return self.modelWidthUnit_property.selection
/*    if let model = self.propval {
      switch (model.modelWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    self.modelWidthUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_modelWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.modelWidthUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    self.modelWidthUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_modelWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelWidthUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'modelHeight' stored property
  //····················································································································

  private final var modelHeight_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_modelHeight = EBWeakEventSet ()

  //····················································································································

  final var modelHeight_property_selection : EBSelection <Int?> { // §
    return self.modelHeight_property.selection
/*    if let model = self.propval {
      switch (model.modelHeight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    self.modelHeight_property.addEBObserver (inObserver)
/*    self.mObserversOf_modelHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.modelHeight_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    self.modelHeight_property.removeEBObserver (inObserver)
/*    self.mObserversOf_modelHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelHeight_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'modelHeightUnit' stored property
  //····················································································································

  private final var modelHeightUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_modelHeightUnit = EBWeakEventSet ()

  //····················································································································

  final var modelHeightUnit_property_selection : EBSelection <Int?> { // §
    return self.modelHeightUnit_property.selection
/*    if let model = self.propval {
      switch (model.modelHeightUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    self.modelHeightUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_modelHeightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.modelHeightUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    self.modelHeightUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_modelHeightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelHeightUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private final var zoom_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final var zoom_property_selection : EBSelection <Int?> { // §
    return self.zoom_property.selection
/*    if let model = self.propval {
      switch (model.zoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.zoom_property.addEBObserver (inObserver)
/*    self.mObserversOf_zoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.zoom_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.zoom_property.removeEBObserver (inObserver)
/*    self.mObserversOf_zoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.zoom_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'modelLimitWidth' stored property
  //····················································································································

  private final var modelLimitWidth_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_modelLimitWidth = EBWeakEventSet ()

  //····················································································································

  final var modelLimitWidth_property_selection : EBSelection <Int?> { // §
    return self.modelLimitWidth_property.selection
/*    if let model = self.propval {
      switch (model.modelLimitWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    self.modelLimitWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_modelLimitWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.modelLimitWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    self.modelLimitWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_modelLimitWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelLimitWidth_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'modelLimitWidthUnit' stored property
  //····················································································································

  private final var modelLimitWidthUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_modelLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  final var modelLimitWidthUnit_property_selection : EBSelection <Int?> { // §
    return self.modelLimitWidthUnit_property.selection
/*    if let model = self.propval {
      switch (model.modelLimitWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    self.modelLimitWidthUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_modelLimitWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.modelLimitWidthUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    self.modelLimitWidthUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_modelLimitWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelLimitWidthUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private final var artworkName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  final var artworkName_property_selection : EBSelection <String?> { // §
    return self.artworkName_property.selection
/*    if let model = self.propval {
      switch (model.artworkName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.artworkName_property.addEBObserver (inObserver)
/*    self.mObserversOf_artworkName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.artworkName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.artworkName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_artworkName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.artworkName_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'frontLegendLinesSegments' transient property
  //····················································································································

  private final var frontLegendLinesSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_frontLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  final var frontLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.frontLegendLinesSegments_property.selection
/*    if let model = self.propval {
      switch (model.frontLegendLinesSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    self.frontLegendLinesSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontLegendLinesSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontLegendLinesSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    self.frontLegendLinesSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontLegendLinesSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontLegendLinesSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backLegendLinesSegments' transient property
  //····················································································································

  private final var backLegendLinesSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_backLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  final var backLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.backLegendLinesSegments_property.selection
/*    if let model = self.propval {
      switch (model.backLegendLinesSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    self.backLegendLinesSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_backLegendLinesSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backLegendLinesSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    self.backLegendLinesSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backLegendLinesSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backLegendLinesSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backLegendLinesBezierPaths' transient property
  //····················································································································

  private final var backLegendLinesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_backLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var backLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.backLegendLinesBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.backLegendLinesBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.backLegendLinesBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_backLegendLinesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backLegendLinesBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.backLegendLinesBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backLegendLinesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backLegendLinesBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontLegendTextsSegments' transient property
  //····················································································································

  private final var frontLegendTextsSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_frontLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final var frontLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.frontLegendTextsSegments_property.selection
/*    if let model = self.propval {
      switch (model.frontLegendTextsSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.frontLegendTextsSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontLegendTextsSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontLegendTextsSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.frontLegendTextsSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontLegendTextsSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontLegendTextsSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontLegendTextsBezierPaths' transient property
  //····················································································································

  private final var frontLegendTextsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_frontLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var frontLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.frontLegendTextsBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.frontLegendTextsBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.frontLegendTextsBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontLegendTextsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontLegendTextsBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.frontLegendTextsBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontLegendTextsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontLegendTextsBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsSegments' transient property
  //····················································································································

  private final var frontLayoutTextsSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_frontLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final var frontLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.frontLayoutTextsSegments_property.selection
/*    if let model = self.propval {
      switch (model.frontLayoutTextsSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.frontLayoutTextsSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontLayoutTextsSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontLayoutTextsSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.frontLayoutTextsSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontLayoutTextsSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontLayoutTextsSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsBezierPaths' transient property
  //····················································································································

  private final var frontLayoutTextsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_frontLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var frontLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.frontLayoutTextsBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.frontLayoutTextsBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.frontLayoutTextsBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontLayoutTextsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontLayoutTextsBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.frontLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontLayoutTextsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backLegendTextsSegments' transient property
  //····················································································································

  private final var backLegendTextsSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_backLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  final var backLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.backLegendTextsSegments_property.selection
/*    if let model = self.propval {
      switch (model.backLegendTextsSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.backLegendTextsSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_backLegendTextsSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backLegendTextsSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.backLegendTextsSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backLegendTextsSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backLegendTextsSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backLegendTextsBezierPaths' transient property
  //····················································································································

  private final var backLegendTextsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_backLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var backLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.backLegendTextsBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.backLegendTextsBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.backLegendTextsBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_backLegendTextsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backLegendTextsBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.backLegendTextsBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backLegendTextsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backLegendTextsBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backLayoutTextsSegments' transient property
  //····················································································································

  private final var backLayoutTextsSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_backLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  final var backLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.backLayoutTextsSegments_property.selection
/*    if let model = self.propval {
      switch (model.backLayoutTextsSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.backLayoutTextsSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_backLayoutTextsSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backLayoutTextsSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.backLayoutTextsSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backLayoutTextsSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backLayoutTextsSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backLayoutTextsBezierPaths' transient property
  //····················································································································

  private final var backLayoutTextsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_backLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var backLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.backLayoutTextsBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.backLayoutTextsBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.backLayoutTextsBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_backLayoutTextsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backLayoutTextsBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.backLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backLayoutTextsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'internalBoardsLimitsSegments' transient property
  //····················································································································

  private final var internalBoardsLimitsSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_internalBoardsLimitsSegments = EBWeakEventSet ()

  //····················································································································

  final var internalBoardsLimitsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.internalBoardsLimitsSegments_property.selection
/*    if let model = self.propval {
      switch (model.internalBoardsLimitsSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_internalBoardsLimitsSegments (_ inObserver : EBEvent) {
    self.internalBoardsLimitsSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_internalBoardsLimitsSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.internalBoardsLimitsSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_internalBoardsLimitsSegments (_ inObserver : EBEvent) {
    self.internalBoardsLimitsSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_internalBoardsLimitsSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.internalBoardsLimitsSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'internalBoardsLimitsBezierPaths' transient property
  //····················································································································

  private final var internalBoardsLimitsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_internalBoardsLimitsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var internalBoardsLimitsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.internalBoardsLimitsBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.internalBoardsLimitsBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_internalBoardsLimitsBezierPaths (_ inObserver : EBEvent) {
    self.internalBoardsLimitsBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_internalBoardsLimitsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.internalBoardsLimitsBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_internalBoardsLimitsBezierPaths (_ inObserver : EBEvent) {
    self.internalBoardsLimitsBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_internalBoardsLimitsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.internalBoardsLimitsBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'drillSegments' transient property
  //····················································································································

  private final var drillSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_drillSegments = EBWeakEventSet ()

  //····················································································································

  final var drillSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.drillSegments_property.selection
/*    if let model = self.propval {
      switch (model.drillSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_drillSegments (_ inObserver : EBEvent) {
    self.drillSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_drillSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drillSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drillSegments (_ inObserver : EBEvent) {
    self.drillSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drillSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drillSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'holesBezierPaths' transient property
  //····················································································································

  private final var holesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_holesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var holesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.holesBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.holesBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    self.holesBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_holesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.holesBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    self.holesBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_holesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.holesBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'viaShapes' transient property
  //····················································································································

  private final var viaShapes_property = EBGenericTransientProperty <MergerViaShapeArray?> ()
//  private final var mObserversOf_viaShapes = EBWeakEventSet ()

  //····················································································································

  final var viaShapes_property_selection : EBSelection <MergerViaShapeArray?> {
    return self.viaShapes_property.selection
/*    if let model = self.propval {
      switch (model.viaShapes_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.viaShapes_property.addEBObserver (inObserver)
/*    self.mObserversOf_viaShapes.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaShapes_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.viaShapes_property.removeEBObserver (inObserver)
/*    self.mObserversOf_viaShapes.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaShapes_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'viasBezierPaths' transient property
  //····················································································································

  private final var viasBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_viasBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var viasBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.viasBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.viasBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    self.viasBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_viasBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viasBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    self.viasBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_viasBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viasBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontPadArray' transient property
  //····················································································································

  private final var frontPadArray_property = EBGenericTransientProperty <MergerPadArray?> ()
//  private final var mObserversOf_frontPadArray = EBWeakEventSet ()

  //····················································································································

  final var frontPadArray_property_selection : EBSelection <MergerPadArray?> {
    return self.frontPadArray_property.selection
/*    if let model = self.propval {
      switch (model.frontPadArray_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontPadArray (_ inObserver : EBEvent) {
    self.frontPadArray_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontPadArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontPadArray_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontPadArray (_ inObserver : EBEvent) {
    self.frontPadArray_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontPadArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontPadArray_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontPadsBezierPaths' transient property
  //····················································································································

  private final var frontPadsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_frontPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var frontPadsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.frontPadsBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.frontPadsBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    self.frontPadsBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontPadsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontPadsBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    self.frontPadsBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontPadsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontPadsBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backPadArray' transient property
  //····················································································································

  private final var backPadArray_property = EBGenericTransientProperty <MergerPadArray?> ()
//  private final var mObserversOf_backPadArray = EBWeakEventSet ()

  //····················································································································

  final var backPadArray_property_selection : EBSelection <MergerPadArray?> {
    return self.backPadArray_property.selection
/*    if let model = self.propval {
      switch (model.backPadArray_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backPadArray (_ inObserver : EBEvent) {
    self.backPadArray_property.addEBObserver (inObserver)
/*    self.mObserversOf_backPadArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backPadArray_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backPadArray (_ inObserver : EBEvent) {
    self.backPadArray_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backPadArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backPadArray_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backPadsBezierPaths' transient property
  //····················································································································

  private final var backPadsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_backPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var backPadsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.backPadsBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.backPadsBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    self.backPadsBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_backPadsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backPadsBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    self.backPadsBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backPadsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backPadsBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'boardLimits' transient property
  //····················································································································

  private final var boardLimits_property = EBGenericTransientProperty <MergerBoardLimits?> ()
//  private final var mObserversOf_boardLimits = EBWeakEventSet ()

  //····················································································································

  final var boardLimits_property_selection : EBSelection <MergerBoardLimits?> {
    return self.boardLimits_property.selection
/*    if let model = self.propval {
      switch (model.boardLimits_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.boardLimits_property.addEBObserver (inObserver)
/*    self.mObserversOf_boardLimits.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimits_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.boardLimits_property.removeEBObserver (inObserver)
/*    self.mObserversOf_boardLimits.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimits_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'boardLimitsBezierPaths' transient property
  //····················································································································

  private final var boardLimitsBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_boardLimitsBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var boardLimitsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.boardLimitsBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.boardLimitsBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    self.boardLimitsBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_boardLimitsBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitsBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    self.boardLimitsBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_boardLimitsBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitsBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backComponentNameSegments' transient property
  //····················································································································

  private final var backComponentNameSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_backComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final var backComponentNameSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.backComponentNameSegments_property.selection
/*    if let model = self.propval {
      switch (model.backComponentNameSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.backComponentNameSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_backComponentNameSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backComponentNameSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.backComponentNameSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backComponentNameSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backComponentNameSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backComponentNamesBezierPaths' transient property
  //····················································································································

  private final var backComponentNamesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_backComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var backComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.backComponentNamesBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.backComponentNamesBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.backComponentNamesBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_backComponentNamesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backComponentNamesBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.backComponentNamesBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backComponentNamesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backComponentNamesBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegments' transient property
  //····················································································································

  private final var frontComponentNameSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final var frontComponentNameSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.frontComponentNameSegments_property.selection
/*    if let model = self.propval {
      switch (model.frontComponentNameSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.frontComponentNameSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontComponentNameSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontComponentNameSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.frontComponentNameSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontComponentNameSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontComponentNameSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontComponentNamesBezierPaths' transient property
  //····················································································································

  private final var frontComponentNamesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_frontComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var frontComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.frontComponentNamesBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.frontComponentNamesBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.frontComponentNamesBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontComponentNamesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontComponentNamesBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.frontComponentNamesBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontComponentNamesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontComponentNamesBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontComponentValueSegments' transient property
  //····················································································································

  private final var frontComponentValueSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_frontComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final var frontComponentValueSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.frontComponentValueSegments_property.selection
/*    if let model = self.propval {
      switch (model.frontComponentValueSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.frontComponentValueSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontComponentValueSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontComponentValueSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.frontComponentValueSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontComponentValueSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontComponentValueSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontComponentValuesBezierPaths' transient property
  //····················································································································

  private final var frontComponentValuesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_frontComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var frontComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.frontComponentValuesBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.frontComponentValuesBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.frontComponentValuesBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontComponentValuesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontComponentValuesBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.frontComponentValuesBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontComponentValuesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontComponentValuesBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backComponentValueSegments' transient property
  //····················································································································

  private final var backComponentValueSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_backComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  final var backComponentValueSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.backComponentValueSegments_property.selection
/*    if let model = self.propval {
      switch (model.backComponentValueSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.backComponentValueSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_backComponentValueSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backComponentValueSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.backComponentValueSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backComponentValueSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backComponentValueSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backComponentValuesBezierPaths' transient property
  //····················································································································

  private final var backComponentValuesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_backComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var backComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.backComponentValuesBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.backComponentValuesBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.backComponentValuesBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_backComponentValuesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backComponentValuesBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.backComponentValuesBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backComponentValuesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backComponentValuesBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backTrackSegments' transient property
  //····················································································································

  private final var backTrackSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_backTrackSegments = EBWeakEventSet ()

  //····················································································································

  final var backTrackSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.backTrackSegments_property.selection
/*    if let model = self.propval {
      switch (model.backTrackSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.backTrackSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_backTrackSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backTrackSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.backTrackSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backTrackSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backTrackSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backTracksBezierPaths' transient property
  //····················································································································

  private final var backTracksBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_backTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var backTracksBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.backTracksBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.backTracksBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    self.backTracksBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_backTracksBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backTracksBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    self.backTracksBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backTracksBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backTracksBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontTrackSegments' transient property
  //····················································································································

  private final var frontTrackSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_frontTrackSegments = EBWeakEventSet ()

  //····················································································································

  final var frontTrackSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.frontTrackSegments_property.selection
/*    if let model = self.propval {
      switch (model.frontTrackSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.frontTrackSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontTrackSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontTrackSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.frontTrackSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontTrackSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontTrackSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontTracksBezierPaths' transient property
  //····················································································································

  private final var frontTracksBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_frontTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var frontTracksBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.frontTracksBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.frontTracksBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    self.frontTracksBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontTracksBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontTracksBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    self.frontTracksBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontTracksBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontTracksBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontPackagesSegments' transient property
  //····················································································································

  private final var frontPackagesSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_frontPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final var frontPackagesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.frontPackagesSegments_property.selection
/*    if let model = self.propval {
      switch (model.frontPackagesSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.frontPackagesSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontPackagesSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontPackagesSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.frontPackagesSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontPackagesSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontPackagesSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontPackagesBezierPaths' transient property
  //····················································································································

  private final var frontPackagesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_frontPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var frontPackagesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.frontPackagesBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.frontPackagesBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    self.frontPackagesBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontPackagesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontPackagesBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    self.frontPackagesBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontPackagesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontPackagesBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backPackagesSegments' transient property
  //····················································································································

  private final var backPackagesSegments_property = EBGenericTransientProperty <MergerSegmentArray?> ()
//  private final var mObserversOf_backPackagesSegments = EBWeakEventSet ()

  //····················································································································

  final var backPackagesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    return self.backPackagesSegments_property.selection
/*    if let model = self.propval {
      switch (model.backPackagesSegments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.backPackagesSegments_property.addEBObserver (inObserver)
/*    self.mObserversOf_backPackagesSegments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backPackagesSegments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.backPackagesSegments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backPackagesSegments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backPackagesSegments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'backPackagesBezierPaths' transient property
  //····················································································································

  private final var backPackagesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_backPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var backPackagesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.backPackagesBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.backPackagesBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    self.backPackagesBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_backPackagesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backPackagesBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    self.backPackagesBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_backPackagesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.backPackagesBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'instanceCount' transient property
  //····················································································································

  private final var instanceCount_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  final var instanceCount_property_selection : EBSelection <Int?> {
    return self.instanceCount_property.selection
/*    if let model = self.propval {
      switch (model.instanceCount_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.instanceCount_property.addEBObserver (inObserver)
/*    self.mObserversOf_instanceCount.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.instanceCount_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.instanceCount_property.removeEBObserver (inObserver)
/*    self.mObserversOf_instanceCount.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.instanceCount_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'frontLegendLinesBezierPaths' transient property
  //····················································································································

  private final var frontLegendLinesBezierPaths_property = EBGenericTransientProperty <BezierPathArray?> ()
//  private final var mObserversOf_frontLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  final var frontLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    return self.frontLegendLinesBezierPaths_property.selection
/*    if let model = self.propval {
      switch (model.frontLegendLinesBezierPaths_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.frontLegendLinesBezierPaths_property.addEBObserver (inObserver)
/*    self.mObserversOf_frontLegendLinesBezierPaths.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontLegendLinesBezierPaths_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.frontLegendLinesBezierPaths_property.removeEBObserver (inObserver)
/*    self.mObserversOf_frontLegendLinesBezierPaths.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.frontLegendLinesBezierPaths_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'imageForModel' transient property
  //····················································································································

  private final var imageForModel_property = EBGenericTransientProperty <EBShape?> ()
//  private final var mObserversOf_imageForModel = EBWeakEventSet ()

  //····················································································································

  final var imageForModel_property_selection : EBSelection <EBShape?> {
    return self.imageForModel_property.selection
/*    if let model = self.propval {
      switch (model.imageForModel_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_imageForModel (_ inObserver : EBEvent) {
    self.imageForModel_property.addEBObserver (inObserver)
/*    self.mObserversOf_imageForModel.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.imageForModel_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_imageForModel (_ inObserver : EBEvent) {
    self.imageForModel_property.removeEBObserver (inObserver)
/*    self.mObserversOf_imageForModel.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.imageForModel_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'imageForInstances' transient property
  //····················································································································

  private final var imageForInstances_property = EBGenericTransientProperty <EBShape?> ()
//  private final var mObserversOf_imageForInstances = EBWeakEventSet ()

  //····················································································································

  final var imageForInstances_property_selection : EBSelection <EBShape?> {
    return self.imageForInstances_property.selection
/*    if let model = self.propval {
      switch (model.imageForInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    self.imageForInstances_property.addEBObserver (inObserver)
/*    self.mObserversOf_imageForInstances.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.imageForInstances_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    self.imageForInstances_property.removeEBObserver (inObserver)
/*    self.mObserversOf_imageForInstances.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.imageForInstances_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observable toMany property: frontLegendLines
  //····················································································································

  private final var mObserversOf_frontLegendLines = EBWeakEventSet ()

  //····················································································································

  final var frontLegendLines_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontLegendLines_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendLines (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendLines.insert (inObserver)
    if let object = self.propval {
      object.frontLegendLines_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLines (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendLines.remove (inObserver)
    if let object = self.propval {
      object.frontLegendLines_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backLegendLines
  //····················································································································

  private final var mObserversOf_backLegendLines = EBWeakEventSet ()

  //····················································································································

  final var backLegendLines_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backLegendLines_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendLines (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendLines.insert (inObserver)
    if let object = self.propval {
      object.backLegendLines_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLines (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendLines.remove (inObserver)
    if let object = self.propval {
      object.backLegendLines_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontLegendTexts
  //····················································································································

  private final var mObserversOf_frontLegendTexts = EBWeakEventSet ()

  //····················································································································

  final var frontLegendTexts_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontLegendTexts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTexts (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendTexts.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTexts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTexts (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendTexts.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTexts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontLayoutTexts
  //····················································································································

  private final var mObserversOf_frontLayoutTexts = EBWeakEventSet ()

  //····················································································································

  final var frontLayoutTexts_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontLayoutTexts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTexts (_ inObserver : EBEvent) {
    self.mObserversOf_frontLayoutTexts.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTexts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTexts (_ inObserver : EBEvent) {
    self.mObserversOf_frontLayoutTexts.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTexts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backLegendTexts
  //····················································································································

  private final var mObserversOf_backLegendTexts = EBWeakEventSet ()

  //····················································································································

  final var backLegendTexts_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backLegendTexts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTexts (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendTexts.insert (inObserver)
    if let object = self.propval {
      object.backLegendTexts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTexts (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendTexts.remove (inObserver)
    if let object = self.propval {
      object.backLegendTexts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backLayoutTexts
  //····················································································································

  private final var mObserversOf_backLayoutTexts = EBWeakEventSet ()

  //····················································································································

  final var backLayoutTexts_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backLayoutTexts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTexts (_ inObserver : EBEvent) {
    self.mObserversOf_backLayoutTexts.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTexts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTexts (_ inObserver : EBEvent) {
    self.mObserversOf_backLayoutTexts.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTexts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: internalBoardsLimits
  //····················································································································

  private final var mObserversOf_internalBoardsLimits = EBWeakEventSet ()

  //····················································································································

  final var internalBoardsLimits_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.internalBoardsLimits_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_internalBoardsLimits (_ inObserver : EBEvent) {
    self.mObserversOf_internalBoardsLimits.insert (inObserver)
    if let object = self.propval {
      object.internalBoardsLimits_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_internalBoardsLimits (_ inObserver : EBEvent) {
    self.mObserversOf_internalBoardsLimits.remove (inObserver)
    if let object = self.propval {
      object.internalBoardsLimits_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: drills
  //····················································································································

  private final var mObserversOf_drills = EBWeakEventSet ()

  //····················································································································

  final var drills_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.drills_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_drills (_ inObserver : EBEvent) {
    self.mObserversOf_drills.insert (inObserver)
    if let object = self.propval {
      object.drills_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_drills (_ inObserver : EBEvent) {
    self.mObserversOf_drills.remove (inObserver)
    if let object = self.propval {
      object.drills_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: vias
  //····················································································································

  private final var mObserversOf_vias = EBWeakEventSet ()

  //····················································································································

  final var vias_property_selection : EBSelection <[BoardModelVia]> {
    if let model = self.propval {
      switch (model.vias_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_vias (_ inObserver : EBEvent) {
    self.mObserversOf_vias.insert (inObserver)
    if let object = self.propval {
      object.vias_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_vias (_ inObserver : EBEvent) {
    self.mObserversOf_vias.remove (inObserver)
    if let object = self.propval {
      object.vias_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontPads
  //····················································································································

  private final var mObserversOf_frontPads = EBWeakEventSet ()

  //····················································································································

  final var frontPads_property_selection : EBSelection <[BoardModelPad]> {
    if let model = self.propval {
      switch (model.frontPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.mObserversOf_frontPads.insert (inObserver)
    if let object = self.propval {
      object.frontPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.mObserversOf_frontPads.remove (inObserver)
    if let object = self.propval {
      object.frontPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backPads
  //····················································································································

  private final var mObserversOf_backPads = EBWeakEventSet ()

  //····················································································································

  final var backPads_property_selection : EBSelection <[BoardModelPad]> {
    if let model = self.propval {
      switch (model.backPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backPads (_ inObserver : EBEvent) {
    self.mObserversOf_backPads.insert (inObserver)
    if let object = self.propval {
      object.backPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPads (_ inObserver : EBEvent) {
    self.mObserversOf_backPads.remove (inObserver)
    if let object = self.propval {
      object.backPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backComponentNames
  //····················································································································

  private final var mObserversOf_backComponentNames = EBWeakEventSet ()

  //····················································································································

  final var backComponentNames_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backComponentNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentNames (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentNames.insert (inObserver)
    if let object = self.propval {
      object.backComponentNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNames (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentNames.remove (inObserver)
    if let object = self.propval {
      object.backComponentNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontComponentNames
  //····················································································································

  private final var mObserversOf_frontComponentNames = EBWeakEventSet ()

  //····················································································································

  final var frontComponentNames_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontComponentNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNames (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentNames.insert (inObserver)
    if let object = self.propval {
      object.frontComponentNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNames (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentNames.remove (inObserver)
    if let object = self.propval {
      object.frontComponentNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontComponentValues
  //····················································································································

  private final var mObserversOf_frontComponentValues = EBWeakEventSet ()

  //····················································································································

  final var frontComponentValues_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontComponentValues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValues (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentValues.insert (inObserver)
    if let object = self.propval {
      object.frontComponentValues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValues (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentValues.remove (inObserver)
    if let object = self.propval {
      object.frontComponentValues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backComponentValues
  //····················································································································

  private final var mObserversOf_backComponentValues = EBWeakEventSet ()

  //····················································································································

  final var backComponentValues_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backComponentValues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentValues (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentValues.insert (inObserver)
    if let object = self.propval {
      object.backComponentValues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValues (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentValues.remove (inObserver)
    if let object = self.propval {
      object.backComponentValues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backTracks
  //····················································································································

  private final var mObserversOf_backTracks = EBWeakEventSet ()

  //····················································································································

  final var backTracks_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backTracks_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backTracks (_ inObserver : EBEvent) {
    self.mObserversOf_backTracks.insert (inObserver)
    if let object = self.propval {
      object.backTracks_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracks (_ inObserver : EBEvent) {
    self.mObserversOf_backTracks.remove (inObserver)
    if let object = self.propval {
      object.backTracks_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontTracks
  //····················································································································

  private final var mObserversOf_frontTracks = EBWeakEventSet ()

  //····················································································································

  final var frontTracks_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontTracks_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontTracks (_ inObserver : EBEvent) {
    self.mObserversOf_frontTracks.insert (inObserver)
    if let object = self.propval {
      object.frontTracks_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracks (_ inObserver : EBEvent) {
    self.mObserversOf_frontTracks.remove (inObserver)
    if let object = self.propval {
      object.frontTracks_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontPackages
  //····················································································································

  private final var mObserversOf_frontPackages = EBWeakEventSet ()

  //····················································································································

  final var frontPackages_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPackages (_ inObserver : EBEvent) {
    self.mObserversOf_frontPackages.insert (inObserver)
    if let object = self.propval {
      object.frontPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackages (_ inObserver : EBEvent) {
    self.mObserversOf_frontPackages.remove (inObserver)
    if let object = self.propval {
      object.frontPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backPackages
  //····················································································································

  private final var mObserversOf_backPackages = EBWeakEventSet ()

  //····················································································································

  final var backPackages_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backPackages (_ inObserver : EBEvent) {
    self.mObserversOf_backPackages.insert (inObserver)
    if let object = self.propval {
      object.backPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackages (_ inObserver : EBEvent) {
    self.mObserversOf_backPackages.remove (inObserver)
    if let object = self.propval {
      object.backPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: myInstances
  //····················································································································

  private final var mObserversOf_myInstances = EBWeakEventSet ()

  //····················································································································

  final var myInstances_property_selection : EBSelection <[MergerBoardInstance]> {
    if let model = self.propval {
      switch (model.myInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_myInstances (_ inObserver : EBEvent) {
    self.mObserversOf_myInstances.insert (inObserver)
    if let object = self.propval {
      object.myInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_myInstances (_ inObserver : EBEvent) {
    self.mObserversOf_myInstances.remove (inObserver)
    if let object = self.propval {
      object.myInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure name simple stored property
    self.name_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.name_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.name_property)
  //--- Configure modelWidth simple stored property
    self.modelWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.modelWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.modelWidth_property)
  //--- Configure modelWidthUnit simple stored property
    self.modelWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.modelWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.modelWidthUnit_property)
  //--- Configure modelHeight simple stored property
    self.modelHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.modelHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.modelHeight_property)
  //--- Configure modelHeightUnit simple stored property
    self.modelHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.modelHeightUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.modelHeightUnit_property)
  //--- Configure zoom simple stored property
    self.zoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.zoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.zoom_property)
  //--- Configure modelLimitWidth simple stored property
    self.modelLimitWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.modelLimitWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.modelLimitWidth_property)
  //--- Configure modelLimitWidthUnit simple stored property
    self.modelLimitWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.modelLimitWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.modelLimitWidthUnit_property)
  //--- Configure artworkName simple stored property
    self.artworkName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.artworkName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.artworkName_property)
  //--- Configure frontLegendLinesSegments transient property
    self.frontLegendLinesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontLegendLinesSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontLegendLinesSegments_property)
  //--- Configure backLegendLinesSegments transient property
    self.backLegendLinesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backLegendLinesSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backLegendLinesSegments_property)
  //--- Configure backLegendLinesBezierPaths transient property
    self.backLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backLegendLinesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backLegendLinesBezierPaths_property)
  //--- Configure frontLegendTextsSegments transient property
    self.frontLegendTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontLegendTextsSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontLegendTextsSegments_property)
  //--- Configure frontLegendTextsBezierPaths transient property
    self.frontLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontLegendTextsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontLegendTextsBezierPaths_property)
  //--- Configure frontLayoutTextsSegments transient property
    self.frontLayoutTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontLayoutTextsSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontLayoutTextsSegments_property)
  //--- Configure frontLayoutTextsBezierPaths transient property
    self.frontLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontLayoutTextsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontLayoutTextsBezierPaths_property)
  //--- Configure backLegendTextsSegments transient property
    self.backLegendTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backLegendTextsSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backLegendTextsSegments_property)
  //--- Configure backLegendTextsBezierPaths transient property
    self.backLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backLegendTextsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backLegendTextsBezierPaths_property)
  //--- Configure backLayoutTextsSegments transient property
    self.backLayoutTextsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backLayoutTextsSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backLayoutTextsSegments_property)
  //--- Configure backLayoutTextsBezierPaths transient property
    self.backLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backLayoutTextsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backLayoutTextsBezierPaths_property)
  //--- Configure internalBoardsLimitsSegments transient property
    self.internalBoardsLimitsSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.internalBoardsLimitsSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.internalBoardsLimitsSegments_property)
  //--- Configure internalBoardsLimitsBezierPaths transient property
    self.internalBoardsLimitsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.internalBoardsLimitsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.internalBoardsLimitsBezierPaths_property)
  //--- Configure drillSegments transient property
    self.drillSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drillSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.drillSegments_property)
  //--- Configure holesBezierPaths transient property
    self.holesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.holesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.holesBezierPaths_property)
  //--- Configure viaShapes transient property
    self.viaShapes_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.viaShapes_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.viaShapes_property)
  //--- Configure viasBezierPaths transient property
    self.viasBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.viasBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.viasBezierPaths_property)
  //--- Configure frontPadArray transient property
    self.frontPadArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontPadArray_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontPadArray_property)
  //--- Configure frontPadsBezierPaths transient property
    self.frontPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontPadsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontPadsBezierPaths_property)
  //--- Configure backPadArray transient property
    self.backPadArray_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backPadArray_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backPadArray_property)
  //--- Configure backPadsBezierPaths transient property
    self.backPadsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backPadsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backPadsBezierPaths_property)
  //--- Configure boardLimits transient property
    self.boardLimits_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardLimits_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.boardLimits_property)
  //--- Configure boardLimitsBezierPaths transient property
    self.boardLimitsBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.boardLimitsBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.boardLimitsBezierPaths_property)
  //--- Configure backComponentNameSegments transient property
    self.backComponentNameSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backComponentNameSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backComponentNameSegments_property)
  //--- Configure backComponentNamesBezierPaths transient property
    self.backComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backComponentNamesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backComponentNamesBezierPaths_property)
  //--- Configure frontComponentNameSegments transient property
    self.frontComponentNameSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontComponentNameSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontComponentNameSegments_property)
  //--- Configure frontComponentNamesBezierPaths transient property
    self.frontComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontComponentNamesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontComponentNamesBezierPaths_property)
  //--- Configure frontComponentValueSegments transient property
    self.frontComponentValueSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontComponentValueSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontComponentValueSegments_property)
  //--- Configure frontComponentValuesBezierPaths transient property
    self.frontComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontComponentValuesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontComponentValuesBezierPaths_property)
  //--- Configure backComponentValueSegments transient property
    self.backComponentValueSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backComponentValueSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backComponentValueSegments_property)
  //--- Configure backComponentValuesBezierPaths transient property
    self.backComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backComponentValuesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backComponentValuesBezierPaths_property)
  //--- Configure backTrackSegments transient property
    self.backTrackSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backTrackSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backTrackSegments_property)
  //--- Configure backTracksBezierPaths transient property
    self.backTracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backTracksBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backTracksBezierPaths_property)
  //--- Configure frontTrackSegments transient property
    self.frontTrackSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontTrackSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontTrackSegments_property)
  //--- Configure frontTracksBezierPaths transient property
    self.frontTracksBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontTracksBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontTracksBezierPaths_property)
  //--- Configure frontPackagesSegments transient property
    self.frontPackagesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontPackagesSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontPackagesSegments_property)
  //--- Configure frontPackagesBezierPaths transient property
    self.frontPackagesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontPackagesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontPackagesBezierPaths_property)
  //--- Configure backPackagesSegments transient property
    self.backPackagesSegments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backPackagesSegments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backPackagesSegments_property)
  //--- Configure backPackagesBezierPaths transient property
    self.backPackagesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.backPackagesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.backPackagesBezierPaths_property)
  //--- Configure instanceCount transient property
    self.instanceCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.instanceCount_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.instanceCount_property)
  //--- Configure frontLegendLinesBezierPaths transient property
    self.frontLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.frontLegendLinesBezierPaths_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.frontLegendLinesBezierPaths_property)
  //--- Configure imageForModel transient property
    self.imageForModel_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.imageForModel_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.imageForModel_property)
  //--- Configure imageForInstances transient property
    self.imageForInstances_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.imageForInstances_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.imageForInstances_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject BoardModel
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_BoardModel : ReadOnlyObject_BoardModel {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_BoardModel? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_BoardModel?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : BoardModel? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BoardModel? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : BoardModel? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_BoardModel
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_BoardModel : ReadOnlyObject_BoardModel {

  //····················································································································
 
  func setProp (_ inValue : BoardModel?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_BoardModel
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_BoardModel : ReadWriteObject_BoardModel {

  //····················································································································

  private var mModel : ReadWriteObject_BoardModel? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_BoardModel?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : BoardModel?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : BoardModel?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < BoardModel? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BoardModel? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_BoardModel 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_BoardModel : ReadWriteObject_BoardModel, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardModel) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardModel) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardModel) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BoardModel) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BoardModel?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BoardModel? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : BoardModel?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : BoardModel? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

