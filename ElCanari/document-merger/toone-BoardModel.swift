//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_BoardModel 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_BoardModel : ReadOnlyAbstractObjectProperty <BoardModel> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : BoardModel?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.name_property.removeEBObserver (self.name_property) // Stored property
    inOldValue?.modelWidth_property.removeEBObserver (self.modelWidth_property) // Stored property
    inOldValue?.modelWidthUnit_property.removeEBObserver (self.modelWidthUnit_property) // Stored property
    inOldValue?.modelHeight_property.removeEBObserver (self.modelHeight_property) // Stored property
    inOldValue?.modelHeightUnit_property.removeEBObserver (self.modelHeightUnit_property) // Stored property
    inOldValue?.zoom_property.removeEBObserver (self.zoom_property) // Stored property
    inOldValue?.modelLimitWidth_property.removeEBObserver (self.modelLimitWidth_property) // Stored property
    inOldValue?.modelLimitWidthUnit_property.removeEBObserver (self.modelLimitWidthUnit_property) // Stored property
    inOldValue?.artworkName_property.removeEBObserver (self.artworkName_property) // Stored property
    inOldValue?.frontLegendLinesSegments_property.removeEBObserver (self.frontLegendLinesSegments_property) // Transient property
    inOldValue?.backLegendLinesSegments_property.removeEBObserver (self.backLegendLinesSegments_property) // Transient property
    inOldValue?.backLegendLinesBezierPaths_property.removeEBObserver (self.backLegendLinesBezierPaths_property) // Transient property
    inOldValue?.frontLegendTextsSegments_property.removeEBObserver (self.frontLegendTextsSegments_property) // Transient property
    inOldValue?.frontLegendTextsBezierPaths_property.removeEBObserver (self.frontLegendTextsBezierPaths_property) // Transient property
    inOldValue?.frontLayoutTextsSegments_property.removeEBObserver (self.frontLayoutTextsSegments_property) // Transient property
    inOldValue?.frontLayoutTextsBezierPaths_property.removeEBObserver (self.frontLayoutTextsBezierPaths_property) // Transient property
    inOldValue?.backLegendTextsSegments_property.removeEBObserver (self.backLegendTextsSegments_property) // Transient property
    inOldValue?.backLegendTextsBezierPaths_property.removeEBObserver (self.backLegendTextsBezierPaths_property) // Transient property
    inOldValue?.backLayoutTextsSegments_property.removeEBObserver (self.backLayoutTextsSegments_property) // Transient property
    inOldValue?.backLayoutTextsBezierPaths_property.removeEBObserver (self.backLayoutTextsBezierPaths_property) // Transient property
    inOldValue?.internalBoardsLimitsSegments_property.removeEBObserver (self.internalBoardsLimitsSegments_property) // Transient property
    inOldValue?.internalBoardsLimitsBezierPaths_property.removeEBObserver (self.internalBoardsLimitsBezierPaths_property) // Transient property
    inOldValue?.drillSegments_property.removeEBObserver (self.drillSegments_property) // Transient property
    inOldValue?.holesBezierPaths_property.removeEBObserver (self.holesBezierPaths_property) // Transient property
    inOldValue?.viaShapes_property.removeEBObserver (self.viaShapes_property) // Transient property
    inOldValue?.viasBezierPaths_property.removeEBObserver (self.viasBezierPaths_property) // Transient property
    inOldValue?.frontPadArray_property.removeEBObserver (self.frontPadArray_property) // Transient property
    inOldValue?.frontPadsBezierPaths_property.removeEBObserver (self.frontPadsBezierPaths_property) // Transient property
    inOldValue?.backPadArray_property.removeEBObserver (self.backPadArray_property) // Transient property
    inOldValue?.backPadsBezierPaths_property.removeEBObserver (self.backPadsBezierPaths_property) // Transient property
    inOldValue?.boardLimits_property.removeEBObserver (self.boardLimits_property) // Transient property
    inOldValue?.boardLimitsBezierPaths_property.removeEBObserver (self.boardLimitsBezierPaths_property) // Transient property
    inOldValue?.backComponentNameSegments_property.removeEBObserver (self.backComponentNameSegments_property) // Transient property
    inOldValue?.backComponentNamesBezierPaths_property.removeEBObserver (self.backComponentNamesBezierPaths_property) // Transient property
    inOldValue?.frontComponentNameSegments_property.removeEBObserver (self.frontComponentNameSegments_property) // Transient property
    inOldValue?.frontComponentNamesBezierPaths_property.removeEBObserver (self.frontComponentNamesBezierPaths_property) // Transient property
    inOldValue?.frontComponentValueSegments_property.removeEBObserver (self.frontComponentValueSegments_property) // Transient property
    inOldValue?.frontComponentValuesBezierPaths_property.removeEBObserver (self.frontComponentValuesBezierPaths_property) // Transient property
    inOldValue?.backComponentValueSegments_property.removeEBObserver (self.backComponentValueSegments_property) // Transient property
    inOldValue?.backComponentValuesBezierPaths_property.removeEBObserver (self.backComponentValuesBezierPaths_property) // Transient property
    inOldValue?.backTrackSegments_property.removeEBObserver (self.backTrackSegments_property) // Transient property
    inOldValue?.backTracksBezierPaths_property.removeEBObserver (self.backTracksBezierPaths_property) // Transient property
    inOldValue?.frontTrackSegments_property.removeEBObserver (self.frontTrackSegments_property) // Transient property
    inOldValue?.frontTracksBezierPaths_property.removeEBObserver (self.frontTracksBezierPaths_property) // Transient property
    inOldValue?.frontPackagesSegments_property.removeEBObserver (self.frontPackagesSegments_property) // Transient property
    inOldValue?.frontPackagesBezierPaths_property.removeEBObserver (self.frontPackagesBezierPaths_property) // Transient property
    inOldValue?.backPackagesSegments_property.removeEBObserver (self.backPackagesSegments_property) // Transient property
    inOldValue?.backPackagesBezierPaths_property.removeEBObserver (self.backPackagesBezierPaths_property) // Transient property
    inOldValue?.instanceCount_property.removeEBObserver (self.instanceCount_property) // Transient property
    inOldValue?.frontLegendLinesBezierPaths_property.removeEBObserver (self.frontLegendLinesBezierPaths_property) // Transient property
    inOldValue?.imageForModel_property.removeEBObserver (self.imageForModel_property) // Transient property
    inOldValue?.imageForInstances_property.removeEBObserver (self.imageForInstances_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.name_property.addEBObserver (self.name_property) // Stored property
    self.mInternalValue?.modelWidth_property.addEBObserver (self.modelWidth_property) // Stored property
    self.mInternalValue?.modelWidthUnit_property.addEBObserver (self.modelWidthUnit_property) // Stored property
    self.mInternalValue?.modelHeight_property.addEBObserver (self.modelHeight_property) // Stored property
    self.mInternalValue?.modelHeightUnit_property.addEBObserver (self.modelHeightUnit_property) // Stored property
    self.mInternalValue?.zoom_property.addEBObserver (self.zoom_property) // Stored property
    self.mInternalValue?.modelLimitWidth_property.addEBObserver (self.modelLimitWidth_property) // Stored property
    self.mInternalValue?.modelLimitWidthUnit_property.addEBObserver (self.modelLimitWidthUnit_property) // Stored property
    self.mInternalValue?.artworkName_property.addEBObserver (self.artworkName_property) // Stored property
    self.mInternalValue?.frontLegendLinesSegments_property.addEBObserver (self.frontLegendLinesSegments_property) // Transient property
    self.mInternalValue?.backLegendLinesSegments_property.addEBObserver (self.backLegendLinesSegments_property) // Transient property
    self.mInternalValue?.backLegendLinesBezierPaths_property.addEBObserver (self.backLegendLinesBezierPaths_property) // Transient property
    self.mInternalValue?.frontLegendTextsSegments_property.addEBObserver (self.frontLegendTextsSegments_property) // Transient property
    self.mInternalValue?.frontLegendTextsBezierPaths_property.addEBObserver (self.frontLegendTextsBezierPaths_property) // Transient property
    self.mInternalValue?.frontLayoutTextsSegments_property.addEBObserver (self.frontLayoutTextsSegments_property) // Transient property
    self.mInternalValue?.frontLayoutTextsBezierPaths_property.addEBObserver (self.frontLayoutTextsBezierPaths_property) // Transient property
    self.mInternalValue?.backLegendTextsSegments_property.addEBObserver (self.backLegendTextsSegments_property) // Transient property
    self.mInternalValue?.backLegendTextsBezierPaths_property.addEBObserver (self.backLegendTextsBezierPaths_property) // Transient property
    self.mInternalValue?.backLayoutTextsSegments_property.addEBObserver (self.backLayoutTextsSegments_property) // Transient property
    self.mInternalValue?.backLayoutTextsBezierPaths_property.addEBObserver (self.backLayoutTextsBezierPaths_property) // Transient property
    self.mInternalValue?.internalBoardsLimitsSegments_property.addEBObserver (self.internalBoardsLimitsSegments_property) // Transient property
    self.mInternalValue?.internalBoardsLimitsBezierPaths_property.addEBObserver (self.internalBoardsLimitsBezierPaths_property) // Transient property
    self.mInternalValue?.drillSegments_property.addEBObserver (self.drillSegments_property) // Transient property
    self.mInternalValue?.holesBezierPaths_property.addEBObserver (self.holesBezierPaths_property) // Transient property
    self.mInternalValue?.viaShapes_property.addEBObserver (self.viaShapes_property) // Transient property
    self.mInternalValue?.viasBezierPaths_property.addEBObserver (self.viasBezierPaths_property) // Transient property
    self.mInternalValue?.frontPadArray_property.addEBObserver (self.frontPadArray_property) // Transient property
    self.mInternalValue?.frontPadsBezierPaths_property.addEBObserver (self.frontPadsBezierPaths_property) // Transient property
    self.mInternalValue?.backPadArray_property.addEBObserver (self.backPadArray_property) // Transient property
    self.mInternalValue?.backPadsBezierPaths_property.addEBObserver (self.backPadsBezierPaths_property) // Transient property
    self.mInternalValue?.boardLimits_property.addEBObserver (self.boardLimits_property) // Transient property
    self.mInternalValue?.boardLimitsBezierPaths_property.addEBObserver (self.boardLimitsBezierPaths_property) // Transient property
    self.mInternalValue?.backComponentNameSegments_property.addEBObserver (self.backComponentNameSegments_property) // Transient property
    self.mInternalValue?.backComponentNamesBezierPaths_property.addEBObserver (self.backComponentNamesBezierPaths_property) // Transient property
    self.mInternalValue?.frontComponentNameSegments_property.addEBObserver (self.frontComponentNameSegments_property) // Transient property
    self.mInternalValue?.frontComponentNamesBezierPaths_property.addEBObserver (self.frontComponentNamesBezierPaths_property) // Transient property
    self.mInternalValue?.frontComponentValueSegments_property.addEBObserver (self.frontComponentValueSegments_property) // Transient property
    self.mInternalValue?.frontComponentValuesBezierPaths_property.addEBObserver (self.frontComponentValuesBezierPaths_property) // Transient property
    self.mInternalValue?.backComponentValueSegments_property.addEBObserver (self.backComponentValueSegments_property) // Transient property
    self.mInternalValue?.backComponentValuesBezierPaths_property.addEBObserver (self.backComponentValuesBezierPaths_property) // Transient property
    self.mInternalValue?.backTrackSegments_property.addEBObserver (self.backTrackSegments_property) // Transient property
    self.mInternalValue?.backTracksBezierPaths_property.addEBObserver (self.backTracksBezierPaths_property) // Transient property
    self.mInternalValue?.frontTrackSegments_property.addEBObserver (self.frontTrackSegments_property) // Transient property
    self.mInternalValue?.frontTracksBezierPaths_property.addEBObserver (self.frontTracksBezierPaths_property) // Transient property
    self.mInternalValue?.frontPackagesSegments_property.addEBObserver (self.frontPackagesSegments_property) // Transient property
    self.mInternalValue?.frontPackagesBezierPaths_property.addEBObserver (self.frontPackagesBezierPaths_property) // Transient property
    self.mInternalValue?.backPackagesSegments_property.addEBObserver (self.backPackagesSegments_property) // Transient property
    self.mInternalValue?.backPackagesBezierPaths_property.addEBObserver (self.backPackagesBezierPaths_property) // Transient property
    self.mInternalValue?.instanceCount_property.addEBObserver (self.instanceCount_property) // Transient property
    self.mInternalValue?.frontLegendLinesBezierPaths_property.addEBObserver (self.frontLegendLinesBezierPaths_property) // Transient property
    self.mInternalValue?.imageForModel_property.addEBObserver (self.imageForModel_property) // Transient property
    self.mInternalValue?.imageForInstances_property.addEBObserver (self.imageForInstances_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.name_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.name_property.prop ?? .empty }
    self.name_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.name_property.setProp (inValue) }
    self.modelWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.modelWidth_property.prop ?? .empty }
    self.modelWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.modelWidth_property.setProp (inValue) }
    self.modelWidthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.modelWidthUnit_property.prop ?? .empty }
    self.modelWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.modelWidthUnit_property.setProp (inValue) }
    self.modelHeight_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.modelHeight_property.prop ?? .empty }
    self.modelHeight_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.modelHeight_property.setProp (inValue) }
    self.modelHeightUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.modelHeightUnit_property.prop ?? .empty }
    self.modelHeightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.modelHeightUnit_property.setProp (inValue) }
    self.zoom_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.zoom_property.prop ?? .empty }
    self.zoom_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.zoom_property.setProp (inValue) }
    self.modelLimitWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.modelLimitWidth_property.prop ?? .empty }
    self.modelLimitWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.modelLimitWidth_property.setProp (inValue) }
    self.modelLimitWidthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.modelLimitWidthUnit_property.prop ?? .empty }
    self.modelLimitWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.modelLimitWidthUnit_property.setProp (inValue) }
    self.artworkName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.artworkName_property.prop ?? .empty }
    self.artworkName_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.artworkName_property.setProp (inValue) }
    self.frontLegendLinesSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontLegendLinesSegments_property.prop ?? .empty }
    self.backLegendLinesSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backLegendLinesSegments_property.prop ?? .empty }
    self.backLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backLegendLinesBezierPaths_property.prop ?? .empty }
    self.frontLegendTextsSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontLegendTextsSegments_property.prop ?? .empty }
    self.frontLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontLegendTextsBezierPaths_property.prop ?? .empty }
    self.frontLayoutTextsSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontLayoutTextsSegments_property.prop ?? .empty }
    self.frontLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontLayoutTextsBezierPaths_property.prop ?? .empty }
    self.backLegendTextsSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backLegendTextsSegments_property.prop ?? .empty }
    self.backLegendTextsBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backLegendTextsBezierPaths_property.prop ?? .empty }
    self.backLayoutTextsSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backLayoutTextsSegments_property.prop ?? .empty }
    self.backLayoutTextsBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backLayoutTextsBezierPaths_property.prop ?? .empty }
    self.internalBoardsLimitsSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.internalBoardsLimitsSegments_property.prop ?? .empty }
    self.internalBoardsLimitsBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.internalBoardsLimitsBezierPaths_property.prop ?? .empty }
    self.drillSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drillSegments_property.prop ?? .empty }
    self.holesBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.holesBezierPaths_property.prop ?? .empty }
    self.viaShapes_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.viaShapes_property.prop ?? .empty }
    self.viasBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.viasBezierPaths_property.prop ?? .empty }
    self.frontPadArray_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontPadArray_property.prop ?? .empty }
    self.frontPadsBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontPadsBezierPaths_property.prop ?? .empty }
    self.backPadArray_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backPadArray_property.prop ?? .empty }
    self.backPadsBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backPadsBezierPaths_property.prop ?? .empty }
    self.boardLimits_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardLimits_property.prop ?? .empty }
    self.boardLimitsBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardLimitsBezierPaths_property.prop ?? .empty }
    self.backComponentNameSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backComponentNameSegments_property.prop ?? .empty }
    self.backComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backComponentNamesBezierPaths_property.prop ?? .empty }
    self.frontComponentNameSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontComponentNameSegments_property.prop ?? .empty }
    self.frontComponentNamesBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontComponentNamesBezierPaths_property.prop ?? .empty }
    self.frontComponentValueSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontComponentValueSegments_property.prop ?? .empty }
    self.frontComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontComponentValuesBezierPaths_property.prop ?? .empty }
    self.backComponentValueSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backComponentValueSegments_property.prop ?? .empty }
    self.backComponentValuesBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backComponentValuesBezierPaths_property.prop ?? .empty }
    self.backTrackSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backTrackSegments_property.prop ?? .empty }
    self.backTracksBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backTracksBezierPaths_property.prop ?? .empty }
    self.frontTrackSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontTrackSegments_property.prop ?? .empty }
    self.frontTracksBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontTracksBezierPaths_property.prop ?? .empty }
    self.frontPackagesSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontPackagesSegments_property.prop ?? .empty }
    self.frontPackagesBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontPackagesBezierPaths_property.prop ?? .empty }
    self.backPackagesSegments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backPackagesSegments_property.prop ?? .empty }
    self.backPackagesBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.backPackagesBezierPaths_property.prop ?? .empty }
    self.instanceCount_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.instanceCount_property.prop ?? .empty }
    self.frontLegendLinesBezierPaths_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.frontLegendLinesBezierPaths_property.prop ?? .empty }
    self.imageForModel_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.imageForModel_property.prop ?? .empty }
    self.imageForInstances_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.imageForInstances_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'name' stored property
  //····················································································································

  let name_property = EBPropertyProxy_String ()

  var name_property_selection : EBSelection <String> {
    switch (self.name_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'modelWidth' stored property
  //····················································································································

  let modelWidth_property = EBPropertyProxy_Int ()

  var modelWidth_property_selection : EBSelection <Int> {
    switch (self.modelWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'modelWidthUnit' stored property
  //····················································································································

  let modelWidthUnit_property = EBPropertyProxy_Int ()

  var modelWidthUnit_property_selection : EBSelection <Int> {
    switch (self.modelWidthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'modelHeight' stored property
  //····················································································································

  let modelHeight_property = EBPropertyProxy_Int ()

  var modelHeight_property_selection : EBSelection <Int> {
    switch (self.modelHeight_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'modelHeightUnit' stored property
  //····················································································································

  let modelHeightUnit_property = EBPropertyProxy_Int ()

  var modelHeightUnit_property_selection : EBSelection <Int> {
    switch (self.modelHeightUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'zoom' stored property
  //····················································································································

  let zoom_property = EBPropertyProxy_Int ()

  var zoom_property_selection : EBSelection <Int> {
    switch (self.zoom_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'modelLimitWidth' stored property
  //····················································································································

  let modelLimitWidth_property = EBPropertyProxy_Int ()

  var modelLimitWidth_property_selection : EBSelection <Int> {
    switch (self.modelLimitWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'modelLimitWidthUnit' stored property
  //····················································································································

  let modelLimitWidthUnit_property = EBPropertyProxy_Int ()

  var modelLimitWidthUnit_property_selection : EBSelection <Int> {
    switch (self.modelLimitWidthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'artworkName' stored property
  //····················································································································

  let artworkName_property = EBPropertyProxy_String ()

  var artworkName_property_selection : EBSelection <String> {
    switch (self.artworkName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontLegendLinesSegments' transient property
  //····················································································································

  let frontLegendLinesSegments_property = EBTransientProperty_MergerSegmentArray ()

  var frontLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.frontLegendLinesSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backLegendLinesSegments' transient property
  //····················································································································

  let backLegendLinesSegments_property = EBTransientProperty_MergerSegmentArray ()

  var backLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.backLegendLinesSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backLegendLinesBezierPaths' transient property
  //····················································································································

  let backLegendLinesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var backLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.backLegendLinesBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontLegendTextsSegments' transient property
  //····················································································································

  let frontLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  var frontLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.frontLegendTextsSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontLegendTextsBezierPaths' transient property
  //····················································································································

  let frontLegendTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var frontLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.frontLegendTextsBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontLayoutTextsSegments' transient property
  //····················································································································

  let frontLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  var frontLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.frontLayoutTextsSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontLayoutTextsBezierPaths' transient property
  //····················································································································

  let frontLayoutTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var frontLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.frontLayoutTextsBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backLegendTextsSegments' transient property
  //····················································································································

  let backLegendTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  var backLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.backLegendTextsSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backLegendTextsBezierPaths' transient property
  //····················································································································

  let backLegendTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var backLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.backLegendTextsBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backLayoutTextsSegments' transient property
  //····················································································································

  let backLayoutTextsSegments_property = EBTransientProperty_MergerSegmentArray ()

  var backLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.backLayoutTextsSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backLayoutTextsBezierPaths' transient property
  //····················································································································

  let backLayoutTextsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var backLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.backLayoutTextsBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'internalBoardsLimitsSegments' transient property
  //····················································································································

  let internalBoardsLimitsSegments_property = EBTransientProperty_MergerSegmentArray ()

  var internalBoardsLimitsSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.internalBoardsLimitsSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'internalBoardsLimitsBezierPaths' transient property
  //····················································································································

  let internalBoardsLimitsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var internalBoardsLimitsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.internalBoardsLimitsBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'drillSegments' transient property
  //····················································································································

  let drillSegments_property = EBTransientProperty_MergerSegmentArray ()

  var drillSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.drillSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'holesBezierPaths' transient property
  //····················································································································

  let holesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var holesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.holesBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'viaShapes' transient property
  //····················································································································

  let viaShapes_property = EBTransientProperty_MergerViaShapeArray ()

  var viaShapes_property_selection : EBSelection <MergerViaShapeArray> {
    switch (self.viaShapes_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'viasBezierPaths' transient property
  //····················································································································

  let viasBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var viasBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.viasBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontPadArray' transient property
  //····················································································································

  let frontPadArray_property = EBTransientProperty_MergerPadArray ()

  var frontPadArray_property_selection : EBSelection <MergerPadArray> {
    switch (self.frontPadArray_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontPadsBezierPaths' transient property
  //····················································································································

  let frontPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var frontPadsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.frontPadsBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backPadArray' transient property
  //····················································································································

  let backPadArray_property = EBTransientProperty_MergerPadArray ()

  var backPadArray_property_selection : EBSelection <MergerPadArray> {
    switch (self.backPadArray_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backPadsBezierPaths' transient property
  //····················································································································

  let backPadsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var backPadsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.backPadsBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardLimits' transient property
  //····················································································································

  let boardLimits_property = EBTransientProperty_MergerBoardLimits ()

  var boardLimits_property_selection : EBSelection <MergerBoardLimits> {
    switch (self.boardLimits_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardLimitsBezierPaths' transient property
  //····················································································································

  let boardLimitsBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var boardLimitsBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.boardLimitsBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backComponentNameSegments' transient property
  //····················································································································

  let backComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()

  var backComponentNameSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.backComponentNameSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backComponentNamesBezierPaths' transient property
  //····················································································································

  let backComponentNamesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var backComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.backComponentNamesBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontComponentNameSegments' transient property
  //····················································································································

  let frontComponentNameSegments_property = EBTransientProperty_MergerSegmentArray ()

  var frontComponentNameSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.frontComponentNameSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontComponentNamesBezierPaths' transient property
  //····················································································································

  let frontComponentNamesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var frontComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.frontComponentNamesBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontComponentValueSegments' transient property
  //····················································································································

  let frontComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()

  var frontComponentValueSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.frontComponentValueSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontComponentValuesBezierPaths' transient property
  //····················································································································

  let frontComponentValuesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var frontComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.frontComponentValuesBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backComponentValueSegments' transient property
  //····················································································································

  let backComponentValueSegments_property = EBTransientProperty_MergerSegmentArray ()

  var backComponentValueSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.backComponentValueSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backComponentValuesBezierPaths' transient property
  //····················································································································

  let backComponentValuesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var backComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.backComponentValuesBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backTrackSegments' transient property
  //····················································································································

  let backTrackSegments_property = EBTransientProperty_MergerSegmentArray ()

  var backTrackSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.backTrackSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backTracksBezierPaths' transient property
  //····················································································································

  let backTracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var backTracksBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.backTracksBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontTrackSegments' transient property
  //····················································································································

  let frontTrackSegments_property = EBTransientProperty_MergerSegmentArray ()

  var frontTrackSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.frontTrackSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontTracksBezierPaths' transient property
  //····················································································································

  let frontTracksBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var frontTracksBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.frontTracksBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontPackagesSegments' transient property
  //····················································································································

  let frontPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()

  var frontPackagesSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.frontPackagesSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontPackagesBezierPaths' transient property
  //····················································································································

  let frontPackagesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var frontPackagesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.frontPackagesBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backPackagesSegments' transient property
  //····················································································································

  let backPackagesSegments_property = EBTransientProperty_MergerSegmentArray ()

  var backPackagesSegments_property_selection : EBSelection <MergerSegmentArray> {
    switch (self.backPackagesSegments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'backPackagesBezierPaths' transient property
  //····················································································································

  let backPackagesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var backPackagesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.backPackagesBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'instanceCount' transient property
  //····················································································································

  let instanceCount_property = EBTransientProperty_Int ()

  var instanceCount_property_selection : EBSelection <Int> {
    switch (self.instanceCount_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'frontLegendLinesBezierPaths' transient property
  //····················································································································

  let frontLegendLinesBezierPaths_property = EBTransientProperty_BezierPathArray ()

  var frontLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray> {
    switch (self.frontLegendLinesBezierPaths_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'imageForModel' transient property
  //····················································································································

  let imageForModel_property = EBTransientProperty_EBShape ()

  var imageForModel_property_selection : EBSelection <EBShape> {
    switch (self.imageForModel_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'imageForInstances' transient property
  //····················································································································

  let imageForInstances_property = EBTransientProperty_EBShape ()

  var imageForInstances_property_selection : EBSelection <EBShape> {
    switch (self.imageForInstances_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observable toMany property: frontLegendLines
  //····················································································································

  private var mObserversOf_frontLegendLines = EBWeakEventSet ()

  //····················································································································

  var frontLegendLines_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontLegendLines_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendLines (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendLines.insert (inObserver)
    if let object = self.propval {
      object.frontLegendLines_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLines (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendLines.remove (inObserver)
    if let object = self.propval {
      object.frontLegendLines_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backLegendLines
  //····················································································································

  private var mObserversOf_backLegendLines = EBWeakEventSet ()

  //····················································································································

  var backLegendLines_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backLegendLines_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendLines (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendLines.insert (inObserver)
    if let object = self.propval {
      object.backLegendLines_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLines (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendLines.remove (inObserver)
    if let object = self.propval {
      object.backLegendLines_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontLegendTexts
  //····················································································································

  private var mObserversOf_frontLegendTexts = EBWeakEventSet ()

  //····················································································································

  var frontLegendTexts_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontLegendTexts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTexts (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendTexts.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTexts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTexts (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendTexts.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTexts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontLayoutTexts
  //····················································································································

  private var mObserversOf_frontLayoutTexts = EBWeakEventSet ()

  //····················································································································

  var frontLayoutTexts_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontLayoutTexts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTexts (_ inObserver : EBEvent) {
    self.mObserversOf_frontLayoutTexts.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTexts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTexts (_ inObserver : EBEvent) {
    self.mObserversOf_frontLayoutTexts.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTexts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backLegendTexts
  //····················································································································

  private var mObserversOf_backLegendTexts = EBWeakEventSet ()

  //····················································································································

  var backLegendTexts_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backLegendTexts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTexts (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendTexts.insert (inObserver)
    if let object = self.propval {
      object.backLegendTexts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTexts (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendTexts.remove (inObserver)
    if let object = self.propval {
      object.backLegendTexts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backLayoutTexts
  //····················································································································

  private var mObserversOf_backLayoutTexts = EBWeakEventSet ()

  //····················································································································

  var backLayoutTexts_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backLayoutTexts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTexts (_ inObserver : EBEvent) {
    self.mObserversOf_backLayoutTexts.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTexts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTexts (_ inObserver : EBEvent) {
    self.mObserversOf_backLayoutTexts.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTexts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: internalBoardsLimits
  //····················································································································

  private var mObserversOf_internalBoardsLimits = EBWeakEventSet ()

  //····················································································································

  var internalBoardsLimits_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.internalBoardsLimits_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_internalBoardsLimits (_ inObserver : EBEvent) {
    self.mObserversOf_internalBoardsLimits.insert (inObserver)
    if let object = self.propval {
      object.internalBoardsLimits_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_internalBoardsLimits (_ inObserver : EBEvent) {
    self.mObserversOf_internalBoardsLimits.remove (inObserver)
    if let object = self.propval {
      object.internalBoardsLimits_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: drills
  //····················································································································

  private var mObserversOf_drills = EBWeakEventSet ()

  //····················································································································

  var drills_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.drills_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_drills (_ inObserver : EBEvent) {
    self.mObserversOf_drills.insert (inObserver)
    if let object = self.propval {
      object.drills_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_drills (_ inObserver : EBEvent) {
    self.mObserversOf_drills.remove (inObserver)
    if let object = self.propval {
      object.drills_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: vias
  //····················································································································

  private var mObserversOf_vias = EBWeakEventSet ()

  //····················································································································

  var vias_property_selection : EBSelection <[BoardModelVia]> {
    if let model = self.propval {
      switch (model.vias_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_vias (_ inObserver : EBEvent) {
    self.mObserversOf_vias.insert (inObserver)
    if let object = self.propval {
      object.vias_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_vias (_ inObserver : EBEvent) {
    self.mObserversOf_vias.remove (inObserver)
    if let object = self.propval {
      object.vias_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontPads
  //····················································································································

  private var mObserversOf_frontPads = EBWeakEventSet ()

  //····················································································································

  var frontPads_property_selection : EBSelection <[BoardModelPad]> {
    if let model = self.propval {
      switch (model.frontPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.mObserversOf_frontPads.insert (inObserver)
    if let object = self.propval {
      object.frontPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPads (_ inObserver : EBEvent) {
    self.mObserversOf_frontPads.remove (inObserver)
    if let object = self.propval {
      object.frontPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backPads
  //····················································································································

  private var mObserversOf_backPads = EBWeakEventSet ()

  //····················································································································

  var backPads_property_selection : EBSelection <[BoardModelPad]> {
    if let model = self.propval {
      switch (model.backPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backPads (_ inObserver : EBEvent) {
    self.mObserversOf_backPads.insert (inObserver)
    if let object = self.propval {
      object.backPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPads (_ inObserver : EBEvent) {
    self.mObserversOf_backPads.remove (inObserver)
    if let object = self.propval {
      object.backPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backComponentNames
  //····················································································································

  private var mObserversOf_backComponentNames = EBWeakEventSet ()

  //····················································································································

  var backComponentNames_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backComponentNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentNames (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentNames.insert (inObserver)
    if let object = self.propval {
      object.backComponentNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNames (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentNames.remove (inObserver)
    if let object = self.propval {
      object.backComponentNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontComponentNames
  //····················································································································

  private var mObserversOf_frontComponentNames = EBWeakEventSet ()

  //····················································································································

  var frontComponentNames_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontComponentNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNames (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentNames.insert (inObserver)
    if let object = self.propval {
      object.frontComponentNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNames (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentNames.remove (inObserver)
    if let object = self.propval {
      object.frontComponentNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontComponentValues
  //····················································································································

  private var mObserversOf_frontComponentValues = EBWeakEventSet ()

  //····················································································································

  var frontComponentValues_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontComponentValues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValues (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentValues.insert (inObserver)
    if let object = self.propval {
      object.frontComponentValues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValues (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentValues.remove (inObserver)
    if let object = self.propval {
      object.frontComponentValues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backComponentValues
  //····················································································································

  private var mObserversOf_backComponentValues = EBWeakEventSet ()

  //····················································································································

  var backComponentValues_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backComponentValues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentValues (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentValues.insert (inObserver)
    if let object = self.propval {
      object.backComponentValues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValues (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentValues.remove (inObserver)
    if let object = self.propval {
      object.backComponentValues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backTracks
  //····················································································································

  private var mObserversOf_backTracks = EBWeakEventSet ()

  //····················································································································

  var backTracks_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backTracks_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backTracks (_ inObserver : EBEvent) {
    self.mObserversOf_backTracks.insert (inObserver)
    if let object = self.propval {
      object.backTracks_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracks (_ inObserver : EBEvent) {
    self.mObserversOf_backTracks.remove (inObserver)
    if let object = self.propval {
      object.backTracks_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontTracks
  //····················································································································

  private var mObserversOf_frontTracks = EBWeakEventSet ()

  //····················································································································

  var frontTracks_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontTracks_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontTracks (_ inObserver : EBEvent) {
    self.mObserversOf_frontTracks.insert (inObserver)
    if let object = self.propval {
      object.frontTracks_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracks (_ inObserver : EBEvent) {
    self.mObserversOf_frontTracks.remove (inObserver)
    if let object = self.propval {
      object.frontTracks_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: frontPackages
  //····················································································································

  private var mObserversOf_frontPackages = EBWeakEventSet ()

  //····················································································································

  var frontPackages_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.frontPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPackages (_ inObserver : EBEvent) {
    self.mObserversOf_frontPackages.insert (inObserver)
    if let object = self.propval {
      object.frontPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackages (_ inObserver : EBEvent) {
    self.mObserversOf_frontPackages.remove (inObserver)
    if let object = self.propval {
      object.frontPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: backPackages
  //····················································································································

  private var mObserversOf_backPackages = EBWeakEventSet ()

  //····················································································································

  var backPackages_property_selection : EBSelection <[SegmentEntity]> {
    if let model = self.propval {
      switch (model.backPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_backPackages (_ inObserver : EBEvent) {
    self.mObserversOf_backPackages.insert (inObserver)
    if let object = self.propval {
      object.backPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackages (_ inObserver : EBEvent) {
    self.mObserversOf_backPackages.remove (inObserver)
    if let object = self.propval {
      object.backPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: myInstances
  //····················································································································

  private var mObserversOf_myInstances = EBWeakEventSet ()

  //····················································································································

  var myInstances_property_selection : EBSelection <[MergerBoardInstance]> {
    if let model = self.propval {
      switch (model.myInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_myInstances (_ inObserver : EBEvent) {
    self.mObserversOf_myInstances.insert (inObserver)
    if let object = self.propval {
      object.myInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_myInstances (_ inObserver : EBEvent) {
    self.mObserversOf_myInstances.remove (inObserver)
    if let object = self.propval {
      object.myInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject BoardModel
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_BoardModel : ReadOnlyObject_BoardModel {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_BoardModel? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_BoardModel?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : BoardModel? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < BoardModel? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : BoardModel? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_BoardModel
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_BoardModel : ReadOnlyObject_BoardModel {

  //····················································································································
 
  func setProp (_ inValue : BoardModel?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_BoardModel
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_BoardModel : ReadWriteObject_BoardModel {

  //····················································································································

  private var mModel : ReadWriteObject_BoardModel? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_BoardModel?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : BoardModel?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : BoardModel?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < BoardModel? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BoardModel? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_BoardModel 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_BoardModel : ReadWriteObject_BoardModel, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardModel) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardModel) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardModel) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BoardModel) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BoardModel?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < BoardModel? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : BoardModel?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : BoardModel? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

