//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    SelectionController_PMMergerDocument_mBoardModelSelection                                                        *
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(SelectionController_PMMergerDocument_mBoardModelSelection)
final class SelectionController_PMMergerDocument_mBoardModelSelection : EBObject {
  private var mModel : ReadOnlyArrayOf_BoardModelEntity?

  //····················································································································
  //   SELECTION OBSERVABLE PROPERTIES
  //····················································································································

  var artworkName = EBPropertyProxy_String () 
  var boardHeight = EBPropertyProxy_Int () 
  var boardHeightUnit = EBPropertyProxy_Int () 
  var boardWidth = EBPropertyProxy_Int () 
  var boardWidthUnit = EBPropertyProxy_Int () 
  var componentCount = EBTransientProperty_Int () 
  var displayHoles = EBPropertyProxy_Bool () 
  var displayPads = EBPropertyProxy_Bool () 
  var horizontalFlip = EBPropertyProxy_Bool () 
  var name = EBPropertyProxy_String () 
  var trackCount = EBTransientProperty_Int () 
  var verticalFlip = EBPropertyProxy_Bool () 
  var viaCount = EBTransientProperty_Int () 
  var viaShapes = EBTransientProperty_MergerViaShapeArray () 
  var zoom = EBPropertyProxy_Int () 

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  func bind_selection (model : ReadOnlyArrayOf_BoardModelEntity, file:String, line:Int) {
    mModel = model
    bind_property_artworkName (model: model)
    bind_property_boardHeight (model: model)
    bind_property_boardHeightUnit (model: model)
    bind_property_boardWidth (model: model)
    bind_property_boardWidthUnit (model: model)
    bind_property_componentCount (model: model)
    bind_property_displayHoles (model: model)
    bind_property_displayPads (model: model)
    bind_property_horizontalFlip (model: model)
    bind_property_name (model: model)
    bind_property_trackCount (model: model)
    bind_property_verticalFlip (model: model)
    bind_property_viaCount (model: model)
    bind_property_viaShapes (model: model)
    bind_property_zoom (model: model)
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize ())
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (mEasyBindingsObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_PMMergerDocument_mBoardModelSelection.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "artworkName",
      idx:self.artworkName.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.artworkName.mObserverExplorer,
      valueExplorer:&self.artworkName.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeight",
      idx:self.boardHeight.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeight.mObserverExplorer,
      valueExplorer:&self.boardHeight.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeightUnit",
      idx:self.boardHeightUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeightUnit.mObserverExplorer,
      valueExplorer:&self.boardHeightUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidth",
      idx:self.boardWidth.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidth.mObserverExplorer,
      valueExplorer:&self.boardWidth.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidthUnit",
      idx:self.boardWidthUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidthUnit.mObserverExplorer,
      valueExplorer:&self.boardWidthUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayHoles",
      idx:self.displayHoles.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayHoles.mObserverExplorer,
      valueExplorer:&self.displayHoles.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayPads",
      idx:self.displayPads.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayPads.mObserverExplorer,
      valueExplorer:&self.displayPads.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalFlip",
      idx:self.horizontalFlip.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.horizontalFlip.mObserverExplorer,
      valueExplorer:&self.horizontalFlip.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name.mObserverExplorer,
      valueExplorer:&self.name.mValueExplorer
    )
    createEntryForPropertyNamed (
      "verticalFlip",
      idx:self.verticalFlip.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.verticalFlip.mObserverExplorer,
      valueExplorer:&self.verticalFlip.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom.mObserverExplorer,
      valueExplorer:&self.zoom.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_PMMergerDocument_mBoardModelSelection.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (mEasyBindingsObjectIndex) + className
    mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  func showObjectWindowFromExplorerButton (_ : Any) {
    if mExplorerWindow == nil {
      buildExplorerWindow ()
    }
    mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  func deleteSelectionControllerWindowAction (_ : Any) {
    clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    let closeButton = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton!.target = nil
    mExplorerWindow?.orderOut (nil)
    mExplorerWindow = nil
  }

  //···················································································································*

  private final func bind_property_artworkName (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_artworkName (self.artworkName)
    self.artworkName.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.artworkName.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.artworkName.writeModelFunction = { (inValue : String) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.artworkName.setProp (inValue)
          }
        }
      }
    }
    self.artworkName.validateAndWriteModelFunction = { (candidateValue : String, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.artworkName.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardHeight (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_boardHeight (self.boardHeight)
    self.boardHeight.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardHeight.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.boardHeight.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.boardHeight.setProp (inValue)
          }
        }
      }
    }
    self.boardHeight.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.boardHeight.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardHeightUnit (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_boardHeightUnit (self.boardHeightUnit)
    self.boardHeightUnit.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardHeightUnit.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.boardHeightUnit.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.boardHeightUnit.setProp (inValue)
          }
        }
      }
    }
    self.boardHeightUnit.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.boardHeightUnit.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardWidth (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_boardWidth (self.boardWidth)
    self.boardWidth.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardWidth.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.boardWidth.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.boardWidth.setProp (inValue)
          }
        }
      }
    }
    self.boardWidth.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.boardWidth.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardWidthUnit (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_boardWidthUnit (self.boardWidthUnit)
    self.boardWidthUnit.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardWidthUnit.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.boardWidthUnit.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.boardWidthUnit.setProp (inValue)
          }
        }
      }
    }
    self.boardWidthUnit.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.boardWidthUnit.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_componentCount (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_componentCount (self.componentCount)
    self.componentCount.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.componentCount.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayHoles (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayHoles (self.displayHoles)
    self.displayHoles.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayHoles.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayHoles.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayHoles.setProp (inValue)
          }
        }
      }
    }
    self.displayHoles.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayHoles.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayPads (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayPads (self.displayPads)
    self.displayPads.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayPads.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayPads.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayPads.setProp (inValue)
          }
        }
      }
    }
    self.displayPads.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayPads.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_horizontalFlip (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_horizontalFlip (self.horizontalFlip)
    self.horizontalFlip.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.horizontalFlip.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.horizontalFlip.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.horizontalFlip.setProp (inValue)
          }
        }
      }
    }
    self.horizontalFlip.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.horizontalFlip.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_name (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_name (self.name)
    self.name.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.name.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.name.writeModelFunction = { (inValue : String) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.name.setProp (inValue)
          }
        }
      }
    }
    self.name.validateAndWriteModelFunction = { (candidateValue : String, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.name.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_trackCount (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_trackCount (self.trackCount)
    self.trackCount.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.trackCount.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_verticalFlip (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_verticalFlip (self.verticalFlip)
    self.verticalFlip.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.verticalFlip.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.verticalFlip.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.verticalFlip.setProp (inValue)
          }
        }
      }
    }
    self.verticalFlip.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.verticalFlip.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_viaCount (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_viaCount (self.viaCount)
    self.viaCount.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.viaCount.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_viaShapes (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_viaShapes (self.viaShapes)
    self.viaShapes.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerViaShapeArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.viaShapes.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_zoom (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_zoom (self.zoom)
    self.zoom.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.zoom.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.zoom.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.zoom.setProp (inValue)
          }
        }
      }
    }
    self.zoom.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.zoom.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }



  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  func unbind_selection () {
  //--- artworkName
    self.artworkName.readModelFunction = nil 
    self.artworkName.writeModelFunction = nil 
    self.artworkName.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_artworkName (self.artworkName)
//    mModel?.removeEBObserver (self.artworkName)
  //--- boardHeight
    self.boardHeight.readModelFunction = nil 
    self.boardHeight.writeModelFunction = nil 
    self.boardHeight.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_boardHeight (self.boardHeight)
//    mModel?.removeEBObserver (self.boardHeight)
  //--- boardHeightUnit
    self.boardHeightUnit.readModelFunction = nil 
    self.boardHeightUnit.writeModelFunction = nil 
    self.boardHeightUnit.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_boardHeightUnit (self.boardHeightUnit)
//    mModel?.removeEBObserver (self.boardHeightUnit)
  //--- boardWidth
    self.boardWidth.readModelFunction = nil 
    self.boardWidth.writeModelFunction = nil 
    self.boardWidth.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_boardWidth (self.boardWidth)
//    mModel?.removeEBObserver (self.boardWidth)
  //--- boardWidthUnit
    self.boardWidthUnit.readModelFunction = nil 
    self.boardWidthUnit.writeModelFunction = nil 
    self.boardWidthUnit.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_boardWidthUnit (self.boardWidthUnit)
//    mModel?.removeEBObserver (self.boardWidthUnit)
  //--- componentCount
    self.componentCount.readModelFunction = nil 
    mModel?.removeEBObserverOf_componentCount (self.componentCount)
//    mModel?.removeEBObserver (self.componentCount)
  //--- displayHoles
    self.displayHoles.readModelFunction = nil 
    self.displayHoles.writeModelFunction = nil 
    self.displayHoles.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayHoles (self.displayHoles)
//    mModel?.removeEBObserver (self.displayHoles)
  //--- displayPads
    self.displayPads.readModelFunction = nil 
    self.displayPads.writeModelFunction = nil 
    self.displayPads.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayPads (self.displayPads)
//    mModel?.removeEBObserver (self.displayPads)
  //--- horizontalFlip
    self.horizontalFlip.readModelFunction = nil 
    self.horizontalFlip.writeModelFunction = nil 
    self.horizontalFlip.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_horizontalFlip (self.horizontalFlip)
//    mModel?.removeEBObserver (self.horizontalFlip)
  //--- name
    self.name.readModelFunction = nil 
    self.name.writeModelFunction = nil 
    self.name.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_name (self.name)
//    mModel?.removeEBObserver (self.name)
  //--- trackCount
    self.trackCount.readModelFunction = nil 
    mModel?.removeEBObserverOf_trackCount (self.trackCount)
//    mModel?.removeEBObserver (self.trackCount)
  //--- verticalFlip
    self.verticalFlip.readModelFunction = nil 
    self.verticalFlip.writeModelFunction = nil 
    self.verticalFlip.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_verticalFlip (self.verticalFlip)
//    mModel?.removeEBObserver (self.verticalFlip)
  //--- viaCount
    self.viaCount.readModelFunction = nil 
    mModel?.removeEBObserverOf_viaCount (self.viaCount)
//    mModel?.removeEBObserver (self.viaCount)
  //--- viaShapes
    self.viaShapes.readModelFunction = nil 
    mModel?.removeEBObserverOf_viaShapes (self.viaShapes)
//    mModel?.removeEBObserver (self.viaShapes)
  //--- zoom
    self.zoom.readModelFunction = nil 
    self.zoom.writeModelFunction = nil 
    self.zoom.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_zoom (self.zoom)
//    mModel?.removeEBObserver (self.zoom)
    mModel = nil    
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

