//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    SelectionController_PMMergerDocument_mBoardModelSelection                                                        *
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(SelectionController_PMMergerDocument_mBoardModelSelection)
final class SelectionController_PMMergerDocument_mBoardModelSelection : EBObject {
  private var mModel : ReadOnlyArrayOf_BoardModelEntity?

  //····················································································································
  //   SELECTION OBSERVABLE PROPERTIES
  //····················································································································

  var artworkName = EBPropertyProxy_String () 
  var backComponentNameSegments = EBTransientProperty_MergerSegmentArray () 
  var backComponentNameSegmentsCount = EBTransientProperty_Int () 
  var backComponentNameSegmentsForDisplay = EBTransientProperty_MergerSegmentArray () 
  var backComponentValueSegments = EBTransientProperty_MergerSegmentArray () 
  var backComponentValueSegmentsCount = EBTransientProperty_Int () 
  var backComponentValuesForDisplay = EBTransientProperty_MergerSegmentArray () 
  var backPackageSegmentsCount = EBTransientProperty_Int () 
  var backPackagesSegments = EBTransientProperty_MergerSegmentArray () 
  var backPackagesSegmentsForDisplay = EBTransientProperty_MergerSegmentArray () 
  var backTrackSegments = EBTransientProperty_MergerSegmentArray () 
  var backTrackSegmentsForDisplay = EBTransientProperty_MergerSegmentArray () 
  var backTracksSegmentsCount = EBTransientProperty_Int () 
  var boardHeight = EBPropertyProxy_Int () 
  var boardHeightUnit = EBPropertyProxy_Int () 
  var boardLimitWidth = EBPropertyProxy_Int () 
  var boardLimitWidthUnit = EBPropertyProxy_Int () 
  var boardLimits = EBTransientProperty_MergerBoardLimits () 
  var boardWidth = EBPropertyProxy_Int () 
  var boardWidthUnit = EBPropertyProxy_Int () 
  var displayBackComponentNames = EBPropertyProxy_Bool () 
  var displayBackComponentValues = EBPropertyProxy_Bool () 
  var displayBackPackages = EBPropertyProxy_Bool () 
  var displayBackTracks = EBPropertyProxy_Bool () 
  var displayBoardLimits = EBPropertyProxy_Bool () 
  var displayFrontComponentNames = EBPropertyProxy_Bool () 
  var displayFrontComponentValues = EBPropertyProxy_Bool () 
  var displayFrontPackages = EBPropertyProxy_Bool () 
  var displayFrontPads = EBPropertyProxy_Bool () 
  var displayFrontTracks = EBPropertyProxy_Bool () 
  var displayHoles = EBPropertyProxy_Bool () 
  var frontComponentNameSegments = EBTransientProperty_MergerSegmentArray () 
  var frontComponentNameSegmentsCount = EBTransientProperty_Int () 
  var frontComponentNameSegmentsForDisplay = EBTransientProperty_MergerSegmentArray () 
  var frontComponentValueSegments = EBTransientProperty_MergerSegmentArray () 
  var frontComponentValueSegmentsCount = EBTransientProperty_Int () 
  var frontComponentValuesForDisplay = EBTransientProperty_MergerSegmentArray () 
  var frontPackageSegmentsCount = EBTransientProperty_Int () 
  var frontPackagesSegments = EBTransientProperty_MergerSegmentArray () 
  var frontPackagesSegmentsForDisplay = EBTransientProperty_MergerSegmentArray () 
  var frontPads = EBTransientProperty_MergerPadArray () 
  var frontPadsForDisplay = EBTransientProperty_MergerPadArray () 
  var frontTrackSegments = EBTransientProperty_MergerSegmentArray () 
  var frontTrackSegmentsForDisplay = EBTransientProperty_MergerSegmentArray () 
  var frontTracksSegmentsCount = EBTransientProperty_Int () 
  var horizontalFlip = EBPropertyProxy_Bool () 
  var name = EBPropertyProxy_String () 
  var verticalFlip = EBPropertyProxy_Bool () 
  var viaCount = EBTransientProperty_Int () 
  var viaShapes = EBTransientProperty_MergerViaShapeArray () 
  var zoom = EBPropertyProxy_Int () 

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  func bind_selection (model : ReadOnlyArrayOf_BoardModelEntity, file:String, line:Int) {
    mModel = model
    bind_property_artworkName (model: model)
    bind_property_backComponentNameSegments (model: model)
    bind_property_backComponentNameSegmentsCount (model: model)
    bind_property_backComponentNameSegmentsForDisplay (model: model)
    bind_property_backComponentValueSegments (model: model)
    bind_property_backComponentValueSegmentsCount (model: model)
    bind_property_backComponentValuesForDisplay (model: model)
    bind_property_backPackageSegmentsCount (model: model)
    bind_property_backPackagesSegments (model: model)
    bind_property_backPackagesSegmentsForDisplay (model: model)
    bind_property_backTrackSegments (model: model)
    bind_property_backTrackSegmentsForDisplay (model: model)
    bind_property_backTracksSegmentsCount (model: model)
    bind_property_boardHeight (model: model)
    bind_property_boardHeightUnit (model: model)
    bind_property_boardLimitWidth (model: model)
    bind_property_boardLimitWidthUnit (model: model)
    bind_property_boardLimits (model: model)
    bind_property_boardWidth (model: model)
    bind_property_boardWidthUnit (model: model)
    bind_property_displayBackComponentNames (model: model)
    bind_property_displayBackComponentValues (model: model)
    bind_property_displayBackPackages (model: model)
    bind_property_displayBackTracks (model: model)
    bind_property_displayBoardLimits (model: model)
    bind_property_displayFrontComponentNames (model: model)
    bind_property_displayFrontComponentValues (model: model)
    bind_property_displayFrontPackages (model: model)
    bind_property_displayFrontPads (model: model)
    bind_property_displayFrontTracks (model: model)
    bind_property_displayHoles (model: model)
    bind_property_frontComponentNameSegments (model: model)
    bind_property_frontComponentNameSegmentsCount (model: model)
    bind_property_frontComponentNameSegmentsForDisplay (model: model)
    bind_property_frontComponentValueSegments (model: model)
    bind_property_frontComponentValueSegmentsCount (model: model)
    bind_property_frontComponentValuesForDisplay (model: model)
    bind_property_frontPackageSegmentsCount (model: model)
    bind_property_frontPackagesSegments (model: model)
    bind_property_frontPackagesSegmentsForDisplay (model: model)
    bind_property_frontPads (model: model)
    bind_property_frontPadsForDisplay (model: model)
    bind_property_frontTrackSegments (model: model)
    bind_property_frontTrackSegmentsForDisplay (model: model)
    bind_property_frontTracksSegmentsCount (model: model)
    bind_property_horizontalFlip (model: model)
    bind_property_name (model: model)
    bind_property_verticalFlip (model: model)
    bind_property_viaCount (model: model)
    bind_property_viaShapes (model: model)
    bind_property_zoom (model: model)
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize ())
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (mEasyBindingsObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_PMMergerDocument_mBoardModelSelection.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "artworkName",
      idx:self.artworkName.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.artworkName.mObserverExplorer,
      valueExplorer:&self.artworkName.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeight",
      idx:self.boardHeight.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeight.mObserverExplorer,
      valueExplorer:&self.boardHeight.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeightUnit",
      idx:self.boardHeightUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeightUnit.mObserverExplorer,
      valueExplorer:&self.boardHeightUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidth",
      idx:self.boardLimitWidth.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidth.mObserverExplorer,
      valueExplorer:&self.boardLimitWidth.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidthUnit",
      idx:self.boardLimitWidthUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidthUnit.mObserverExplorer,
      valueExplorer:&self.boardLimitWidthUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidth",
      idx:self.boardWidth.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidth.mObserverExplorer,
      valueExplorer:&self.boardWidth.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidthUnit",
      idx:self.boardWidthUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidthUnit.mObserverExplorer,
      valueExplorer:&self.boardWidthUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayBackComponentNames",
      idx:self.displayBackComponentNames.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayBackComponentNames.mObserverExplorer,
      valueExplorer:&self.displayBackComponentNames.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayBackComponentValues",
      idx:self.displayBackComponentValues.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayBackComponentValues.mObserverExplorer,
      valueExplorer:&self.displayBackComponentValues.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayBackPackages",
      idx:self.displayBackPackages.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayBackPackages.mObserverExplorer,
      valueExplorer:&self.displayBackPackages.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayBackTracks",
      idx:self.displayBackTracks.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayBackTracks.mObserverExplorer,
      valueExplorer:&self.displayBackTracks.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayBoardLimits",
      idx:self.displayBoardLimits.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayBoardLimits.mObserverExplorer,
      valueExplorer:&self.displayBoardLimits.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayFrontComponentNames",
      idx:self.displayFrontComponentNames.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayFrontComponentNames.mObserverExplorer,
      valueExplorer:&self.displayFrontComponentNames.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayFrontComponentValues",
      idx:self.displayFrontComponentValues.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayFrontComponentValues.mObserverExplorer,
      valueExplorer:&self.displayFrontComponentValues.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayFrontPackages",
      idx:self.displayFrontPackages.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayFrontPackages.mObserverExplorer,
      valueExplorer:&self.displayFrontPackages.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayFrontPads",
      idx:self.displayFrontPads.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayFrontPads.mObserverExplorer,
      valueExplorer:&self.displayFrontPads.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayFrontTracks",
      idx:self.displayFrontTracks.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayFrontTracks.mObserverExplorer,
      valueExplorer:&self.displayFrontTracks.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayHoles",
      idx:self.displayHoles.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.displayHoles.mObserverExplorer,
      valueExplorer:&self.displayHoles.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalFlip",
      idx:self.horizontalFlip.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.horizontalFlip.mObserverExplorer,
      valueExplorer:&self.horizontalFlip.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name.mObserverExplorer,
      valueExplorer:&self.name.mValueExplorer
    )
    createEntryForPropertyNamed (
      "verticalFlip",
      idx:self.verticalFlip.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.verticalFlip.mObserverExplorer,
      valueExplorer:&self.verticalFlip.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom.mObserverExplorer,
      valueExplorer:&self.zoom.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_PMMergerDocument_mBoardModelSelection.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (mEasyBindingsObjectIndex) + className
    mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  func showObjectWindowFromExplorerButton (_ : Any) {
    if mExplorerWindow == nil {
      buildExplorerWindow ()
    }
    mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  func deleteSelectionControllerWindowAction (_ : Any) {
    clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    let closeButton = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton!.target = nil
    mExplorerWindow?.orderOut (nil)
    mExplorerWindow = nil
  }

  //···················································································································*

  private final func bind_property_artworkName (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_artworkName (self.artworkName)
    self.artworkName.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.artworkName.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.artworkName.writeModelFunction = { (inValue : String) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.artworkName.setProp (inValue)
          }
        }
      }
    }
    self.artworkName.validateAndWriteModelFunction = { (candidateValue : String, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.artworkName.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentNameSegments (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_backComponentNameSegments (self.backComponentNameSegments)
    self.backComponentNameSegments.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentNameSegments.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentNameSegmentsCount (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_backComponentNameSegmentsCount (self.backComponentNameSegmentsCount)
    self.backComponentNameSegmentsCount.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentNameSegmentsCount.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentNameSegmentsForDisplay (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_backComponentNameSegmentsForDisplay (self.backComponentNameSegmentsForDisplay)
    self.backComponentNameSegmentsForDisplay.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentNameSegmentsForDisplay.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentValueSegments (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_backComponentValueSegments (self.backComponentValueSegments)
    self.backComponentValueSegments.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentValueSegments.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentValueSegmentsCount (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_backComponentValueSegmentsCount (self.backComponentValueSegmentsCount)
    self.backComponentValueSegmentsCount.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentValueSegmentsCount.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_backComponentValuesForDisplay (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_backComponentValuesForDisplay (self.backComponentValuesForDisplay)
    self.backComponentValuesForDisplay.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backComponentValuesForDisplay.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPackageSegmentsCount (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_backPackageSegmentsCount (self.backPackageSegmentsCount)
    self.backPackageSegmentsCount.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPackageSegmentsCount.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPackagesSegments (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_backPackagesSegments (self.backPackagesSegments)
    self.backPackagesSegments.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPackagesSegments.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_backPackagesSegmentsForDisplay (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_backPackagesSegmentsForDisplay (self.backPackagesSegmentsForDisplay)
    self.backPackagesSegmentsForDisplay.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backPackagesSegmentsForDisplay.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_backTrackSegments (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_backTrackSegments (self.backTrackSegments)
    self.backTrackSegments.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backTrackSegments.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_backTrackSegmentsForDisplay (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_backTrackSegmentsForDisplay (self.backTrackSegmentsForDisplay)
    self.backTrackSegmentsForDisplay.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backTrackSegmentsForDisplay.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_backTracksSegmentsCount (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_backTracksSegmentsCount (self.backTracksSegmentsCount)
    self.backTracksSegmentsCount.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backTracksSegmentsCount.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardHeight (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_boardHeight (self.boardHeight)
    self.boardHeight.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardHeight.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.boardHeight.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.boardHeight.setProp (inValue)
          }
        }
      }
    }
    self.boardHeight.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.boardHeight.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardHeightUnit (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_boardHeightUnit (self.boardHeightUnit)
    self.boardHeightUnit.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardHeightUnit.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.boardHeightUnit.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.boardHeightUnit.setProp (inValue)
          }
        }
      }
    }
    self.boardHeightUnit.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.boardHeightUnit.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardLimitWidth (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_boardLimitWidth (self.boardLimitWidth)
    self.boardLimitWidth.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardLimitWidth.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.boardLimitWidth.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.boardLimitWidth.setProp (inValue)
          }
        }
      }
    }
    self.boardLimitWidth.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.boardLimitWidth.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardLimitWidthUnit (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_boardLimitWidthUnit (self.boardLimitWidthUnit)
    self.boardLimitWidthUnit.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardLimitWidthUnit.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.boardLimitWidthUnit.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.boardLimitWidthUnit.setProp (inValue)
          }
        }
      }
    }
    self.boardLimitWidthUnit.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.boardLimitWidthUnit.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardLimits (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_boardLimits (self.boardLimits)
    self.boardLimits.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerBoardLimits> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardLimits.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardWidth (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_boardWidth (self.boardWidth)
    self.boardWidth.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardWidth.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.boardWidth.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.boardWidth.setProp (inValue)
          }
        }
      }
    }
    self.boardWidth.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.boardWidth.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_boardWidthUnit (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_boardWidthUnit (self.boardWidthUnit)
    self.boardWidthUnit.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.boardWidthUnit.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.boardWidthUnit.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.boardWidthUnit.setProp (inValue)
          }
        }
      }
    }
    self.boardWidthUnit.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.boardWidthUnit.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayBackComponentNames (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayBackComponentNames (self.displayBackComponentNames)
    self.displayBackComponentNames.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayBackComponentNames.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayBackComponentNames.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayBackComponentNames.setProp (inValue)
          }
        }
      }
    }
    self.displayBackComponentNames.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayBackComponentNames.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayBackComponentValues (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayBackComponentValues (self.displayBackComponentValues)
    self.displayBackComponentValues.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayBackComponentValues.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayBackComponentValues.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayBackComponentValues.setProp (inValue)
          }
        }
      }
    }
    self.displayBackComponentValues.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayBackComponentValues.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayBackPackages (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayBackPackages (self.displayBackPackages)
    self.displayBackPackages.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayBackPackages.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayBackPackages.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayBackPackages.setProp (inValue)
          }
        }
      }
    }
    self.displayBackPackages.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayBackPackages.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayBackTracks (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayBackTracks (self.displayBackTracks)
    self.displayBackTracks.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayBackTracks.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayBackTracks.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayBackTracks.setProp (inValue)
          }
        }
      }
    }
    self.displayBackTracks.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayBackTracks.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayBoardLimits (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayBoardLimits (self.displayBoardLimits)
    self.displayBoardLimits.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayBoardLimits.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayBoardLimits.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayBoardLimits.setProp (inValue)
          }
        }
      }
    }
    self.displayBoardLimits.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayBoardLimits.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayFrontComponentNames (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayFrontComponentNames (self.displayFrontComponentNames)
    self.displayFrontComponentNames.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayFrontComponentNames.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayFrontComponentNames.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayFrontComponentNames.setProp (inValue)
          }
        }
      }
    }
    self.displayFrontComponentNames.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayFrontComponentNames.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayFrontComponentValues (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayFrontComponentValues (self.displayFrontComponentValues)
    self.displayFrontComponentValues.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayFrontComponentValues.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayFrontComponentValues.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayFrontComponentValues.setProp (inValue)
          }
        }
      }
    }
    self.displayFrontComponentValues.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayFrontComponentValues.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayFrontPackages (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayFrontPackages (self.displayFrontPackages)
    self.displayFrontPackages.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayFrontPackages.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayFrontPackages.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayFrontPackages.setProp (inValue)
          }
        }
      }
    }
    self.displayFrontPackages.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayFrontPackages.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayFrontPads (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayFrontPads (self.displayFrontPads)
    self.displayFrontPads.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayFrontPads.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayFrontPads.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayFrontPads.setProp (inValue)
          }
        }
      }
    }
    self.displayFrontPads.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayFrontPads.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayFrontTracks (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayFrontTracks (self.displayFrontTracks)
    self.displayFrontTracks.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayFrontTracks.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayFrontTracks.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayFrontTracks.setProp (inValue)
          }
        }
      }
    }
    self.displayFrontTracks.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayFrontTracks.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_displayHoles (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_displayHoles (self.displayHoles)
    self.displayHoles.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.displayHoles.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.displayHoles.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.displayHoles.setProp (inValue)
          }
        }
      }
    }
    self.displayHoles.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.displayHoles.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentNameSegments (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontComponentNameSegments (self.frontComponentNameSegments)
    self.frontComponentNameSegments.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentNameSegments.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentNameSegmentsCount (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontComponentNameSegmentsCount (self.frontComponentNameSegmentsCount)
    self.frontComponentNameSegmentsCount.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentNameSegmentsCount.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentNameSegmentsForDisplay (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontComponentNameSegmentsForDisplay (self.frontComponentNameSegmentsForDisplay)
    self.frontComponentNameSegmentsForDisplay.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentNameSegmentsForDisplay.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentValueSegments (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontComponentValueSegments (self.frontComponentValueSegments)
    self.frontComponentValueSegments.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentValueSegments.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentValueSegmentsCount (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontComponentValueSegmentsCount (self.frontComponentValueSegmentsCount)
    self.frontComponentValueSegmentsCount.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentValueSegmentsCount.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontComponentValuesForDisplay (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontComponentValuesForDisplay (self.frontComponentValuesForDisplay)
    self.frontComponentValuesForDisplay.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontComponentValuesForDisplay.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPackageSegmentsCount (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontPackageSegmentsCount (self.frontPackageSegmentsCount)
    self.frontPackageSegmentsCount.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPackageSegmentsCount.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPackagesSegments (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontPackagesSegments (self.frontPackagesSegments)
    self.frontPackagesSegments.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPackagesSegments.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPackagesSegmentsForDisplay (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontPackagesSegmentsForDisplay (self.frontPackagesSegmentsForDisplay)
    self.frontPackagesSegmentsForDisplay.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPackagesSegmentsForDisplay.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPads (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontPads (self.frontPads)
    self.frontPads.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerPadArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPads.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontPadsForDisplay (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontPadsForDisplay (self.frontPadsForDisplay)
    self.frontPadsForDisplay.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerPadArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontPadsForDisplay.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontTrackSegments (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontTrackSegments (self.frontTrackSegments)
    self.frontTrackSegments.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontTrackSegments.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontTrackSegmentsForDisplay (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontTrackSegmentsForDisplay (self.frontTrackSegmentsForDisplay)
    self.frontTrackSegmentsForDisplay.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerSegmentArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontTrackSegmentsForDisplay.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontTracksSegmentsCount (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_frontTracksSegmentsCount (self.frontTracksSegmentsCount)
    self.frontTracksSegmentsCount.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontTracksSegmentsCount.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_horizontalFlip (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_horizontalFlip (self.horizontalFlip)
    self.horizontalFlip.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.horizontalFlip.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.horizontalFlip.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.horizontalFlip.setProp (inValue)
          }
        }
      }
    }
    self.horizontalFlip.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.horizontalFlip.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_name (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_name (self.name)
    self.name.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.name.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.name.writeModelFunction = { (inValue : String) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.name.setProp (inValue)
          }
        }
      }
    }
    self.name.validateAndWriteModelFunction = { (candidateValue : String, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.name.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_verticalFlip (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_verticalFlip (self.verticalFlip)
    self.verticalFlip.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.verticalFlip.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.verticalFlip.writeModelFunction = { (inValue : Bool) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.verticalFlip.setProp (inValue)
          }
        }
      }
    }
    self.verticalFlip.validateAndWriteModelFunction = { (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.verticalFlip.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_viaCount (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_viaCount (self.viaCount)
    self.viaCount.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.viaCount.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_viaShapes (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_viaShapes (self.viaShapes)
    self.viaShapes.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<MergerViaShapeArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.viaShapes.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_zoom (model : ReadOnlyArrayOf_BoardModelEntity) {
    model.addEBObserverOf_zoom (self.zoom)
    self.zoom.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.zoom.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    self.zoom.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.zoom.setProp (inValue)
          }
        }
      }
    }
    self.zoom.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.zoom.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }



  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  func unbind_selection () {
  //--- artworkName
    self.artworkName.readModelFunction = nil 
    self.artworkName.writeModelFunction = nil 
    self.artworkName.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_artworkName (self.artworkName)
  //--- backComponentNameSegments
    self.backComponentNameSegments.readModelFunction = nil 
    mModel?.removeEBObserverOf_backComponentNameSegments (self.backComponentNameSegments)
  //--- backComponentNameSegmentsCount
    self.backComponentNameSegmentsCount.readModelFunction = nil 
    mModel?.removeEBObserverOf_backComponentNameSegmentsCount (self.backComponentNameSegmentsCount)
  //--- backComponentNameSegmentsForDisplay
    self.backComponentNameSegmentsForDisplay.readModelFunction = nil 
    mModel?.removeEBObserverOf_backComponentNameSegmentsForDisplay (self.backComponentNameSegmentsForDisplay)
  //--- backComponentValueSegments
    self.backComponentValueSegments.readModelFunction = nil 
    mModel?.removeEBObserverOf_backComponentValueSegments (self.backComponentValueSegments)
  //--- backComponentValueSegmentsCount
    self.backComponentValueSegmentsCount.readModelFunction = nil 
    mModel?.removeEBObserverOf_backComponentValueSegmentsCount (self.backComponentValueSegmentsCount)
  //--- backComponentValuesForDisplay
    self.backComponentValuesForDisplay.readModelFunction = nil 
    mModel?.removeEBObserverOf_backComponentValuesForDisplay (self.backComponentValuesForDisplay)
  //--- backPackageSegmentsCount
    self.backPackageSegmentsCount.readModelFunction = nil 
    mModel?.removeEBObserverOf_backPackageSegmentsCount (self.backPackageSegmentsCount)
  //--- backPackagesSegments
    self.backPackagesSegments.readModelFunction = nil 
    mModel?.removeEBObserverOf_backPackagesSegments (self.backPackagesSegments)
  //--- backPackagesSegmentsForDisplay
    self.backPackagesSegmentsForDisplay.readModelFunction = nil 
    mModel?.removeEBObserverOf_backPackagesSegmentsForDisplay (self.backPackagesSegmentsForDisplay)
  //--- backTrackSegments
    self.backTrackSegments.readModelFunction = nil 
    mModel?.removeEBObserverOf_backTrackSegments (self.backTrackSegments)
  //--- backTrackSegmentsForDisplay
    self.backTrackSegmentsForDisplay.readModelFunction = nil 
    mModel?.removeEBObserverOf_backTrackSegmentsForDisplay (self.backTrackSegmentsForDisplay)
  //--- backTracksSegmentsCount
    self.backTracksSegmentsCount.readModelFunction = nil 
    mModel?.removeEBObserverOf_backTracksSegmentsCount (self.backTracksSegmentsCount)
  //--- boardHeight
    self.boardHeight.readModelFunction = nil 
    self.boardHeight.writeModelFunction = nil 
    self.boardHeight.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_boardHeight (self.boardHeight)
  //--- boardHeightUnit
    self.boardHeightUnit.readModelFunction = nil 
    self.boardHeightUnit.writeModelFunction = nil 
    self.boardHeightUnit.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_boardHeightUnit (self.boardHeightUnit)
  //--- boardLimitWidth
    self.boardLimitWidth.readModelFunction = nil 
    self.boardLimitWidth.writeModelFunction = nil 
    self.boardLimitWidth.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_boardLimitWidth (self.boardLimitWidth)
  //--- boardLimitWidthUnit
    self.boardLimitWidthUnit.readModelFunction = nil 
    self.boardLimitWidthUnit.writeModelFunction = nil 
    self.boardLimitWidthUnit.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_boardLimitWidthUnit (self.boardLimitWidthUnit)
  //--- boardLimits
    self.boardLimits.readModelFunction = nil 
    mModel?.removeEBObserverOf_boardLimits (self.boardLimits)
  //--- boardWidth
    self.boardWidth.readModelFunction = nil 
    self.boardWidth.writeModelFunction = nil 
    self.boardWidth.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_boardWidth (self.boardWidth)
  //--- boardWidthUnit
    self.boardWidthUnit.readModelFunction = nil 
    self.boardWidthUnit.writeModelFunction = nil 
    self.boardWidthUnit.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_boardWidthUnit (self.boardWidthUnit)
  //--- displayBackComponentNames
    self.displayBackComponentNames.readModelFunction = nil 
    self.displayBackComponentNames.writeModelFunction = nil 
    self.displayBackComponentNames.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayBackComponentNames (self.displayBackComponentNames)
  //--- displayBackComponentValues
    self.displayBackComponentValues.readModelFunction = nil 
    self.displayBackComponentValues.writeModelFunction = nil 
    self.displayBackComponentValues.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayBackComponentValues (self.displayBackComponentValues)
  //--- displayBackPackages
    self.displayBackPackages.readModelFunction = nil 
    self.displayBackPackages.writeModelFunction = nil 
    self.displayBackPackages.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayBackPackages (self.displayBackPackages)
  //--- displayBackTracks
    self.displayBackTracks.readModelFunction = nil 
    self.displayBackTracks.writeModelFunction = nil 
    self.displayBackTracks.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayBackTracks (self.displayBackTracks)
  //--- displayBoardLimits
    self.displayBoardLimits.readModelFunction = nil 
    self.displayBoardLimits.writeModelFunction = nil 
    self.displayBoardLimits.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayBoardLimits (self.displayBoardLimits)
  //--- displayFrontComponentNames
    self.displayFrontComponentNames.readModelFunction = nil 
    self.displayFrontComponentNames.writeModelFunction = nil 
    self.displayFrontComponentNames.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayFrontComponentNames (self.displayFrontComponentNames)
  //--- displayFrontComponentValues
    self.displayFrontComponentValues.readModelFunction = nil 
    self.displayFrontComponentValues.writeModelFunction = nil 
    self.displayFrontComponentValues.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayFrontComponentValues (self.displayFrontComponentValues)
  //--- displayFrontPackages
    self.displayFrontPackages.readModelFunction = nil 
    self.displayFrontPackages.writeModelFunction = nil 
    self.displayFrontPackages.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayFrontPackages (self.displayFrontPackages)
  //--- displayFrontPads
    self.displayFrontPads.readModelFunction = nil 
    self.displayFrontPads.writeModelFunction = nil 
    self.displayFrontPads.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayFrontPads (self.displayFrontPads)
  //--- displayFrontTracks
    self.displayFrontTracks.readModelFunction = nil 
    self.displayFrontTracks.writeModelFunction = nil 
    self.displayFrontTracks.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayFrontTracks (self.displayFrontTracks)
  //--- displayHoles
    self.displayHoles.readModelFunction = nil 
    self.displayHoles.writeModelFunction = nil 
    self.displayHoles.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_displayHoles (self.displayHoles)
  //--- frontComponentNameSegments
    self.frontComponentNameSegments.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontComponentNameSegments (self.frontComponentNameSegments)
  //--- frontComponentNameSegmentsCount
    self.frontComponentNameSegmentsCount.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontComponentNameSegmentsCount (self.frontComponentNameSegmentsCount)
  //--- frontComponentNameSegmentsForDisplay
    self.frontComponentNameSegmentsForDisplay.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontComponentNameSegmentsForDisplay (self.frontComponentNameSegmentsForDisplay)
  //--- frontComponentValueSegments
    self.frontComponentValueSegments.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontComponentValueSegments (self.frontComponentValueSegments)
  //--- frontComponentValueSegmentsCount
    self.frontComponentValueSegmentsCount.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontComponentValueSegmentsCount (self.frontComponentValueSegmentsCount)
  //--- frontComponentValuesForDisplay
    self.frontComponentValuesForDisplay.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontComponentValuesForDisplay (self.frontComponentValuesForDisplay)
  //--- frontPackageSegmentsCount
    self.frontPackageSegmentsCount.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontPackageSegmentsCount (self.frontPackageSegmentsCount)
  //--- frontPackagesSegments
    self.frontPackagesSegments.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontPackagesSegments (self.frontPackagesSegments)
  //--- frontPackagesSegmentsForDisplay
    self.frontPackagesSegmentsForDisplay.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontPackagesSegmentsForDisplay (self.frontPackagesSegmentsForDisplay)
  //--- frontPads
    self.frontPads.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontPads (self.frontPads)
  //--- frontPadsForDisplay
    self.frontPadsForDisplay.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontPadsForDisplay (self.frontPadsForDisplay)
  //--- frontTrackSegments
    self.frontTrackSegments.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontTrackSegments (self.frontTrackSegments)
  //--- frontTrackSegmentsForDisplay
    self.frontTrackSegmentsForDisplay.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontTrackSegmentsForDisplay (self.frontTrackSegmentsForDisplay)
  //--- frontTracksSegmentsCount
    self.frontTracksSegmentsCount.readModelFunction = nil 
    mModel?.removeEBObserverOf_frontTracksSegmentsCount (self.frontTracksSegmentsCount)
  //--- horizontalFlip
    self.horizontalFlip.readModelFunction = nil 
    self.horizontalFlip.writeModelFunction = nil 
    self.horizontalFlip.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_horizontalFlip (self.horizontalFlip)
  //--- name
    self.name.readModelFunction = nil 
    self.name.writeModelFunction = nil 
    self.name.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_name (self.name)
  //--- verticalFlip
    self.verticalFlip.readModelFunction = nil 
    self.verticalFlip.writeModelFunction = nil 
    self.verticalFlip.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_verticalFlip (self.verticalFlip)
  //--- viaCount
    self.viaCount.readModelFunction = nil 
    mModel?.removeEBObserverOf_viaCount (self.viaCount)
  //--- viaShapes
    self.viaShapes.readModelFunction = nil 
    mModel?.removeEBObserverOf_viaShapes (self.viaShapes)
  //--- zoom
    self.zoom.readModelFunction = nil 
    self.zoom.writeModelFunction = nil 
    self.zoom.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_zoom (self.zoom)
  //---
    mModel = nil    
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

