//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_selectedPageIndex : class {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_zoom : class {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_automaticBoardSize : class {
  var automaticBoardSize : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardManualWidth : class {
  var boardManualWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardManualHeight : class {
  var boardManualHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardWidthUnit : class {
  var boardWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardHeightUnit : class {
  var boardHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_overlapingArrangment : class {
  var overlapingArrangment : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_selectedBoardXUnit : class {
  var selectedBoardXUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_selectedBoardYUnit : class {
  var selectedBoardYUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardLimitWidth : class {
  var boardLimitWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardLimitWidthUnit : class {
  var boardLimitWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_arrowMagnitude : class {
  var arrowMagnitude : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_arrowMagnitudeUnit : class {
  var arrowMagnitudeUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_shiftArrowMagnitude : class {
  var shiftArrowMagnitude : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_shiftArrowMagnitudeUnit : class {
  var shiftArrowMagnitudeUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_artworkName : class {
  var artworkName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_generateGerberProductFile : class {
  var generateGerberProductFile : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_generatePDFProductFile : class {
  var generatePDFProductFile : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_generatedBoardArchiveFormat : class {
  var generatedBoardArchiveFormat : BoardArchiveFormat { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_modelNames : class {
  var modelNames : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardRect : class {
  var boardRect : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardDisplayRect : class {
  var boardDisplayRect : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardWidth : class {
  var boardWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardHeight : class {
  var boardHeight : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardOutlineRectDisplay : class {
  var boardOutlineRectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MergerRoot : EBManagedObject,
         MergerRoot_selectedPageIndex,
         MergerRoot_zoom,
         MergerRoot_automaticBoardSize,
         MergerRoot_boardManualWidth,
         MergerRoot_boardManualHeight,
         MergerRoot_boardWidthUnit,
         MergerRoot_boardHeightUnit,
         MergerRoot_overlapingArrangment,
         MergerRoot_selectedBoardXUnit,
         MergerRoot_selectedBoardYUnit,
         MergerRoot_boardLimitWidth,
         MergerRoot_boardLimitWidthUnit,
         MergerRoot_arrowMagnitude,
         MergerRoot_arrowMagnitudeUnit,
         MergerRoot_shiftArrowMagnitude,
         MergerRoot_shiftArrowMagnitudeUnit,
         MergerRoot_artworkName,
         MergerRoot_generateGerberProductFile,
         MergerRoot_generatePDFProductFile,
         MergerRoot_generatedBoardArchiveFormat,
         MergerRoot_modelNames,
         MergerRoot_boardRect,
         MergerRoot_boardDisplayRect,
         MergerRoot_boardWidth,
         MergerRoot_boardHeight,
         MergerRoot_boardOutlineRectDisplay {

  //····················································································································
  //   To many property: boardModels
  //····················································································································

  let boardModels_property = StoredArrayOf_BoardModel (usedForSignature: false)

  //····················································································································

  var boardModels_property_selection : EBSelection < [BoardModel] > {
    return self.boardModels_property.prop
  }

  //····················································································································

  var boardModels : [BoardModel] {
    get { return self.boardModels_property.propval }
    set { self.boardModels_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: boardInstances
  //····················································································································

  let boardInstances_property = StoredArrayOf_MergerBoardInstance (usedForSignature: false)

  //····················································································································

  var boardInstances_property_selection : EBSelection < [MergerBoardInstance] > {
    return self.boardInstances_property.prop
  }

  //····················································································································

  var boardInstances : [MergerBoardInstance] {
    get { return self.boardInstances_property.propval }
    set { self.boardInstances_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: selectedPageIndex
  //····················································································································

  let selectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var selectedPageIndex : Int {
    get { return self.selectedPageIndex_property.propval }
    set { self.selectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int> { return self.selectedPageIndex_property.prop }

  //····················································································································
  //   Atomic property: zoom
  //····················································································································

  let zoom_property = EBStoredProperty_Int (defaultValue: 100)

  //····················································································································

  var zoom : Int {
    get { return self.zoom_property.propval }
    set { self.zoom_property.setProp (newValue) }
  }

  //····················································································································

  var zoom_property_selection : EBSelection <Int> { return self.zoom_property.prop }

  //····················································································································
  //   Atomic property: automaticBoardSize
  //····················································································································

  let automaticBoardSize_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var automaticBoardSize : Bool {
    get { return self.automaticBoardSize_property.propval }
    set { self.automaticBoardSize_property.setProp (newValue) }
  }

  //····················································································································

  var automaticBoardSize_property_selection : EBSelection <Bool> { return self.automaticBoardSize_property.prop }

  //····················································································································
  //   Atomic property: boardManualWidth
  //····················································································································

  let boardManualWidth_property = EBStoredProperty_Int (defaultValue: 9000000)

  //····················································································································

  var boardManualWidth : Int {
    get { return self.boardManualWidth_property.propval }
    set { self.boardManualWidth_property.setProp (newValue) }
  }

  //····················································································································

  var boardManualWidth_property_selection : EBSelection <Int> { return self.boardManualWidth_property.prop }

  //····················································································································
  //   Atomic property: boardManualHeight
  //····················································································································

  let boardManualHeight_property = EBStoredProperty_Int (defaultValue: 9000000)

  //····················································································································

  var boardManualHeight : Int {
    get { return self.boardManualHeight_property.propval }
    set { self.boardManualHeight_property.setProp (newValue) }
  }

  //····················································································································

  var boardManualHeight_property_selection : EBSelection <Int> { return self.boardManualHeight_property.prop }

  //····················································································································
  //   Atomic property: boardWidthUnit
  //····················································································································

  let boardWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var boardWidthUnit : Int {
    get { return self.boardWidthUnit_property.propval }
    set { self.boardWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var boardWidthUnit_property_selection : EBSelection <Int> { return self.boardWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: boardHeightUnit
  //····················································································································

  let boardHeightUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var boardHeightUnit : Int {
    get { return self.boardHeightUnit_property.propval }
    set { self.boardHeightUnit_property.setProp (newValue) }
  }

  //····················································································································

  var boardHeightUnit_property_selection : EBSelection <Int> { return self.boardHeightUnit_property.prop }

  //····················································································································
  //   Atomic property: overlapingArrangment
  //····················································································································

  let overlapingArrangment_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var overlapingArrangment : Bool {
    get { return self.overlapingArrangment_property.propval }
    set { self.overlapingArrangment_property.setProp (newValue) }
  }

  //····················································································································

  var overlapingArrangment_property_selection : EBSelection <Bool> { return self.overlapingArrangment_property.prop }

  //····················································································································
  //   Atomic property: selectedBoardXUnit
  //····················································································································

  let selectedBoardXUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var selectedBoardXUnit : Int {
    get { return self.selectedBoardXUnit_property.propval }
    set { self.selectedBoardXUnit_property.setProp (newValue) }
  }

  //····················································································································

  var selectedBoardXUnit_property_selection : EBSelection <Int> { return self.selectedBoardXUnit_property.prop }

  //····················································································································
  //   Atomic property: selectedBoardYUnit
  //····················································································································

  let selectedBoardYUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var selectedBoardYUnit : Int {
    get { return self.selectedBoardYUnit_property.propval }
    set { self.selectedBoardYUnit_property.setProp (newValue) }
  }

  //····················································································································

  var selectedBoardYUnit_property_selection : EBSelection <Int> { return self.selectedBoardYUnit_property.prop }

  //····················································································································
  //   Atomic property: boardLimitWidth
  //····················································································································

  let boardLimitWidth_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var boardLimitWidth : Int {
    get { return self.boardLimitWidth_property.propval }
    set { self.boardLimitWidth_property.setProp (newValue) }
  }

  //····················································································································

  var boardLimitWidth_property_selection : EBSelection <Int> { return self.boardLimitWidth_property.prop }

  //····················································································································
  //   Atomic property: boardLimitWidthUnit
  //····················································································································

  let boardLimitWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var boardLimitWidthUnit : Int {
    get { return self.boardLimitWidthUnit_property.propval }
    set { self.boardLimitWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var boardLimitWidthUnit_property_selection : EBSelection <Int> { return self.boardLimitWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: arrowMagnitude
  //····················································································································

  let arrowMagnitude_property = EBStoredProperty_Int (defaultValue: 900000)

  //····················································································································

  var arrowMagnitude : Int {
    get { return self.arrowMagnitude_property.propval }
    set { self.arrowMagnitude_property.setProp (newValue) }
  }

  //····················································································································

  var arrowMagnitude_property_selection : EBSelection <Int> { return self.arrowMagnitude_property.prop }

  //····················································································································
  //   Atomic property: arrowMagnitudeUnit
  //····················································································································

  let arrowMagnitudeUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var arrowMagnitudeUnit : Int {
    get { return self.arrowMagnitudeUnit_property.propval }
    set { self.arrowMagnitudeUnit_property.setProp (newValue) }
  }

  //····················································································································

  var arrowMagnitudeUnit_property_selection : EBSelection <Int> { return self.arrowMagnitudeUnit_property.prop }

  //····················································································································
  //   Atomic property: shiftArrowMagnitude
  //····················································································································

  let shiftArrowMagnitude_property = EBStoredProperty_Int (defaultValue: 3600000)

  //····················································································································

  var shiftArrowMagnitude : Int {
    get { return self.shiftArrowMagnitude_property.propval }
    set { self.shiftArrowMagnitude_property.setProp (newValue) }
  }

  //····················································································································

  var shiftArrowMagnitude_property_selection : EBSelection <Int> { return self.shiftArrowMagnitude_property.prop }

  //····················································································································
  //   Atomic property: shiftArrowMagnitudeUnit
  //····················································································································

  let shiftArrowMagnitudeUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var shiftArrowMagnitudeUnit : Int {
    get { return self.shiftArrowMagnitudeUnit_property.propval }
    set { self.shiftArrowMagnitudeUnit_property.setProp (newValue) }
  }

  //····················································································································

  var shiftArrowMagnitudeUnit_property_selection : EBSelection <Int> { return self.shiftArrowMagnitudeUnit_property.prop }

  //····················································································································
  //   Atomic property: artworkName
  //····················································································································

  let artworkName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var artworkName : String {
    get { return self.artworkName_property.propval }
    set { self.artworkName_property.setProp (newValue) }
  }

  //····················································································································

  var artworkName_property_selection : EBSelection <String> { return self.artworkName_property.prop }

  //····················································································································
  //   Atomic property: generateGerberProductFile
  //····················································································································

  let generateGerberProductFile_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var generateGerberProductFile : Bool {
    get { return self.generateGerberProductFile_property.propval }
    set { self.generateGerberProductFile_property.setProp (newValue) }
  }

  //····················································································································

  var generateGerberProductFile_property_selection : EBSelection <Bool> { return self.generateGerberProductFile_property.prop }

  //····················································································································
  //   Atomic property: generatePDFProductFile
  //····················································································································

  let generatePDFProductFile_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var generatePDFProductFile : Bool {
    get { return self.generatePDFProductFile_property.propval }
    set { self.generatePDFProductFile_property.setProp (newValue) }
  }

  //····················································································································

  var generatePDFProductFile_property_selection : EBSelection <Bool> { return self.generatePDFProductFile_property.prop }

  //····················································································································
  //   Atomic property: generatedBoardArchiveFormat
  //····················································································································

  let generatedBoardArchiveFormat_property = EBStoredProperty_BoardArchiveFormat (defaultValue: BoardArchiveFormat.noGeneration)

  //····················································································································

  var generatedBoardArchiveFormat : BoardArchiveFormat {
    get { return self.generatedBoardArchiveFormat_property.propval }
    set { self.generatedBoardArchiveFormat_property.setProp (newValue) }
  }

  //····················································································································

  var generatedBoardArchiveFormat_property_selection : EBSelection <BoardArchiveFormat> { return self.generatedBoardArchiveFormat_property.prop }

  //····················································································································
  //   Transient property: modelNames
  //····················································································································

  let modelNames_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  var modelNames_property_selection : EBSelection <StringTagArray> {
    return self.modelNames_property.prop
  }

  //····················································································································

  var modelNames : StringTagArray? {
    switch self.modelNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardRect
  //····················································································································

  let boardRect_property = EBTransientProperty_CanariRect ()

  //····················································································································

  var boardRect_property_selection : EBSelection <CanariRect> {
    return self.boardRect_property.prop
  }

  //····················································································································

  var boardRect : CanariRect? {
    switch self.boardRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardDisplayRect
  //····················································································································

  let boardDisplayRect_property = EBTransientProperty_CanariRect ()

  //····················································································································

  var boardDisplayRect_property_selection : EBSelection <CanariRect> {
    return self.boardDisplayRect_property.prop
  }

  //····················································································································

  var boardDisplayRect : CanariRect? {
    switch self.boardDisplayRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardWidth
  //····················································································································

  let boardWidth_property = EBTransientProperty_Int ()

  //····················································································································

  var boardWidth_property_selection : EBSelection <Int> {
    return self.boardWidth_property.prop
  }

  //····················································································································

  var boardWidth : Int? {
    switch self.boardWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardHeight
  //····················································································································

  let boardHeight_property = EBTransientProperty_Int ()

  //····················································································································

  var boardHeight_property_selection : EBSelection <Int> {
    return self.boardHeight_property.prop
  }

  //····················································································································

  var boardHeight : Int? {
    switch self.boardHeight_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: artwork
  //····················································································································

   let artwork_property = StoredObject_ArtworkRoot (usedForSignature: false)

  //····················································································································

  var artwork_property_selection : EBSelection <ArtworkRoot?> {
    return .single (self.artwork_property.propval)
  }

  //····················································································································

  var artwork : ArtworkRoot? {
    get {
      return self.artwork_property.propval
    }
    set {
      if self.artwork_property.propval != nil {
        self.artwork_property.setProp (nil)
      }
      if newValue != nil {
        self.artwork_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var artwork_none : StoredObject_ArtworkRoot { return self.artwork_property }

  //····················································································································

  var artwork_none_selection : EBSelection <Bool> {
    return .single (self.artwork_property.propval == nil)
  }

  //····················································································································
  //   Transient property: boardOutlineRectDisplay
  //····················································································································

  let boardOutlineRectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var boardOutlineRectDisplay_property_selection : EBSelection <EBShape> {
    return self.boardOutlineRectDisplay_property.prop
  }

  //····················································································································

  var boardOutlineRectDisplay : EBShape? {
    switch self.boardOutlineRectDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    let operationQueue = OperationQueue ()
  //--- To many property: boardModels (no option)
    self.boardModels_property.ebUndoManager = self.ebUndoManager
  //--- To many property: boardInstances (has opposite relationship)
    self.boardInstances_property.ebUndoManager = self.ebUndoManager
    self.boardInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.myRoot_property.setProp (me) } },
      resetter: { inObject in inObject.myRoot_property.setProp (nil) }
    )
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: zoom
    self.zoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: automaticBoardSize
    self.automaticBoardSize_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardManualWidth
    self.boardManualWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardManualHeight
    self.boardManualHeight_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardWidthUnit
    self.boardWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardHeightUnit
    self.boardHeightUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: overlapingArrangment
    self.overlapingArrangment_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectedBoardXUnit
    self.selectedBoardXUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectedBoardYUnit
    self.selectedBoardYUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardLimitWidthUnit
    self.boardLimitWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: arrowMagnitude
    self.arrowMagnitude_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: arrowMagnitudeUnit
    self.arrowMagnitudeUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: shiftArrowMagnitude
    self.shiftArrowMagnitude_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: shiftArrowMagnitudeUnit
    self.shiftArrowMagnitudeUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: artworkName
    self.artworkName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: generateGerberProductFile
    self.generateGerberProductFile_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: generatePDFProductFile
    self.generatePDFProductFile_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: generatedBoardArchiveFormat
    self.generatedBoardArchiveFormat_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: modelNames
    self.modelNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardModels_property_selection.kind ()
        kind &= unwSelf.boardModels_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardModels_property_selection, unwSelf.boardModels_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_MergerRoot_modelNames (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardModels_property.addEBObserverOf_name (self.modelNames_property, postEvent: false)
    self.boardModels_property.addEBObserver (self.modelNames_property, postEvent: false)
    self.modelNames_property.postEvent ()
  //--- Atomic property: boardRect
    self.boardRect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.automaticBoardSize_property_selection.kind ()
        kind &= unwSelf.boardManualWidth_property_selection.kind ()
        kind &= unwSelf.boardManualHeight_property_selection.kind ()
        kind &= unwSelf.boardInstances_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.automaticBoardSize_property_selection, unwSelf.boardManualWidth_property_selection, unwSelf.boardManualHeight_property_selection, unwSelf.boardInstances_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_MergerRoot_boardRect (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.automaticBoardSize_property.addEBObserver (self.boardRect_property, postEvent: false)
    self.boardManualWidth_property.addEBObserver (self.boardRect_property, postEvent: false)
    self.boardManualHeight_property.addEBObserver (self.boardRect_property, postEvent: false)
    self.boardInstances_property.addEBObserverOf_instanceRect (self.boardRect_property, postEvent: false)
    self.boardRect_property.postEvent ()
  //--- Atomic property: boardDisplayRect
    self.boardDisplayRect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardManualWidth_property_selection.kind ()
        kind &= unwSelf.boardManualHeight_property_selection.kind ()
        kind &= unwSelf.boardInstances_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardManualWidth_property_selection, unwSelf.boardManualHeight_property_selection, unwSelf.boardInstances_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_MergerRoot_boardDisplayRect (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardManualWidth_property.addEBObserver (self.boardDisplayRect_property, postEvent: false)
    self.boardManualHeight_property.addEBObserver (self.boardDisplayRect_property, postEvent: false)
    self.boardInstances_property.addEBObserverOf_instanceRect (self.boardDisplayRect_property, postEvent: false)
    self.boardDisplayRect_property.postEvent ()
  //--- Atomic property: boardWidth
    self.boardWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardRect_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardRect_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerRoot_boardWidth (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.addEBObserver (self.boardWidth_property, postEvent: false)
    self.boardWidth_property.postEvent ()
  //--- Atomic property: boardHeight
    self.boardHeight_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardRect_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardRect_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerRoot_boardHeight (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.addEBObserver (self.boardHeight_property, postEvent: false)
    self.boardHeight_property.postEvent ()
  //--- To one property: artwork
    self.artwork_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardOutlineRectDisplay
    self.boardOutlineRectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardRect_property_selection.kind ()
        kind &= unwSelf.boardLimitWidth_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBoardLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBoardLimits_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardRect_property_selection, unwSelf.boardLimitWidth_property_selection, g_Preferences!.mergerBoardViewDisplayBoardLimits_property_selection, g_Preferences!.mergerColorBoardLimits_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_MergerRoot_boardOutlineRectDisplay (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.addEBObserver (self.boardOutlineRectDisplay_property, postEvent: false)
    self.boardLimitWidth_property.addEBObserver (self.boardOutlineRectDisplay_property, postEvent: false)
    g_Preferences?.mergerBoardViewDisplayBoardLimits_property.addEBObserver (self.boardOutlineRectDisplay_property, postEvent: false)
    g_Preferences?.mergerColorBoardLimits_property.addEBObserver (self.boardOutlineRectDisplay_property, postEvent: false)
    self.boardOutlineRectDisplay_property.postEvent ()
  //--- Install undoers and opposite setter for relationships
    self.boardInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.myRoot_property.setProp (me) } },
      resetter: { inObject in inObject.myRoot_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
    operationQueue.waitUntilAllOperationsAreFinished ()
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.boardModels_property.removeEBObserverOf_name (self.modelNames_property)
    self.boardModels_property.removeEBObserver (self.modelNames_property)
    self.automaticBoardSize_property.removeEBObserver (self.boardRect_property)
    self.boardManualWidth_property.removeEBObserver (self.boardRect_property)
    self.boardManualHeight_property.removeEBObserver (self.boardRect_property)
    self.boardInstances_property.removeEBObserverOf_instanceRect (self.boardRect_property)
    self.boardManualWidth_property.removeEBObserver (self.boardDisplayRect_property)
    self.boardManualHeight_property.removeEBObserver (self.boardDisplayRect_property)
    self.boardInstances_property.removeEBObserverOf_instanceRect (self.boardDisplayRect_property)
    self.boardRect_property.removeEBObserver (self.boardWidth_property)
    self.boardRect_property.removeEBObserver (self.boardHeight_property)
    self.boardRect_property.removeEBObserver (self.boardOutlineRectDisplay_property)
    self.boardLimitWidth_property.removeEBObserver (self.boardOutlineRectDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBoardLimits_property.removeEBObserver (self.boardOutlineRectDisplay_property)
    g_Preferences?.mergerColorBoardLimits_property.removeEBObserver (self.boardOutlineRectDisplay_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedPageIndex",
      idx: self.selectedPageIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedPageIndex_property.mObserverExplorer,
      valueExplorer: &self.selectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx: self.zoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.zoom_property.mObserverExplorer,
      valueExplorer: &self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "automaticBoardSize",
      idx: self.automaticBoardSize_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.automaticBoardSize_property.mObserverExplorer,
      valueExplorer: &self.automaticBoardSize_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardManualWidth",
      idx: self.boardManualWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardManualWidth_property.mObserverExplorer,
      valueExplorer: &self.boardManualWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardManualHeight",
      idx: self.boardManualHeight_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardManualHeight_property.mObserverExplorer,
      valueExplorer: &self.boardManualHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidthUnit",
      idx: self.boardWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.boardWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeightUnit",
      idx: self.boardHeightUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardHeightUnit_property.mObserverExplorer,
      valueExplorer: &self.boardHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "overlapingArrangment",
      idx: self.overlapingArrangment_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.overlapingArrangment_property.mObserverExplorer,
      valueExplorer: &self.overlapingArrangment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedBoardXUnit",
      idx: self.selectedBoardXUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedBoardXUnit_property.mObserverExplorer,
      valueExplorer: &self.selectedBoardXUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedBoardYUnit",
      idx: self.selectedBoardYUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedBoardYUnit_property.mObserverExplorer,
      valueExplorer: &self.selectedBoardYUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidth",
      idx: self.boardLimitWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardLimitWidth_property.mObserverExplorer,
      valueExplorer: &self.boardLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidthUnit",
      idx: self.boardLimitWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardLimitWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.boardLimitWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "arrowMagnitude",
      idx: self.arrowMagnitude_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.arrowMagnitude_property.mObserverExplorer,
      valueExplorer: &self.arrowMagnitude_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "arrowMagnitudeUnit",
      idx: self.arrowMagnitudeUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.arrowMagnitudeUnit_property.mObserverExplorer,
      valueExplorer: &self.arrowMagnitudeUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "shiftArrowMagnitude",
      idx: self.shiftArrowMagnitude_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.shiftArrowMagnitude_property.mObserverExplorer,
      valueExplorer: &self.shiftArrowMagnitude_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "shiftArrowMagnitudeUnit",
      idx: self.shiftArrowMagnitudeUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.shiftArrowMagnitudeUnit_property.mObserverExplorer,
      valueExplorer: &self.shiftArrowMagnitudeUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "artworkName",
      idx: self.artworkName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.artworkName_property.mObserverExplorer,
      valueExplorer: &self.artworkName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "generateGerberProductFile",
      idx: self.generateGerberProductFile_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.generateGerberProductFile_property.mObserverExplorer,
      valueExplorer: &self.generateGerberProductFile_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "generatePDFProductFile",
      idx: self.generatePDFProductFile_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.generatePDFProductFile_property.mObserverExplorer,
      valueExplorer: &self.generatePDFProductFile_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "generatedBoardArchiveFormat",
      idx: self.generatedBoardArchiveFormat_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.generatedBoardArchiveFormat_property.mObserverExplorer,
      valueExplorer: &self.generatedBoardArchiveFormat_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "modelNames",
      idx: self.modelNames_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.modelNames_property.mObserverExplorer,
      valueExplorer: &self.modelNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardRect",
      idx: self.boardRect_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardRect_property.mObserverExplorer,
      valueExplorer: &self.boardRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardDisplayRect",
      idx: self.boardDisplayRect_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardDisplayRect_property.mObserverExplorer,
      valueExplorer: &self.boardDisplayRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidth",
      idx: self.boardWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardWidth_property.mObserverExplorer,
      valueExplorer: &self.boardWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeight",
      idx: self.boardHeight_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardHeight_property.mObserverExplorer,
      valueExplorer: &self.boardHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardOutlineRectDisplay",
      idx: self.boardOutlineRectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardOutlineRectDisplay_property.mObserverExplorer,
      valueExplorer: &self.boardOutlineRectDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "boardModels",
      idx:boardModels_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&boardModels_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "boardInstances",
      idx:boardInstances_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&boardInstances_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "artwork",
      idx:self.artwork_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.artwork_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- To many property: boardModels
    self.boardModels_property.mValueExplorer = nil
  //--- To many property: boardInstances
    self.boardInstances_property.mValueExplorer = nil
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.mObserverExplorer = nil
    self.selectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: zoom
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
  //--- Atomic property: automaticBoardSize
    self.automaticBoardSize_property.mObserverExplorer = nil
    self.automaticBoardSize_property.mValueExplorer = nil
  //--- Atomic property: boardManualWidth
    self.boardManualWidth_property.mObserverExplorer = nil
    self.boardManualWidth_property.mValueExplorer = nil
  //--- Atomic property: boardManualHeight
    self.boardManualHeight_property.mObserverExplorer = nil
    self.boardManualHeight_property.mValueExplorer = nil
  //--- Atomic property: boardWidthUnit
    self.boardWidthUnit_property.mObserverExplorer = nil
    self.boardWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: boardHeightUnit
    self.boardHeightUnit_property.mObserverExplorer = nil
    self.boardHeightUnit_property.mValueExplorer = nil
  //--- Atomic property: overlapingArrangment
    self.overlapingArrangment_property.mObserverExplorer = nil
    self.overlapingArrangment_property.mValueExplorer = nil
  //--- Atomic property: selectedBoardXUnit
    self.selectedBoardXUnit_property.mObserverExplorer = nil
    self.selectedBoardXUnit_property.mValueExplorer = nil
  //--- Atomic property: selectedBoardYUnit
    self.selectedBoardYUnit_property.mObserverExplorer = nil
    self.selectedBoardYUnit_property.mValueExplorer = nil
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.mObserverExplorer = nil
    self.boardLimitWidth_property.mValueExplorer = nil
  //--- Atomic property: boardLimitWidthUnit
    self.boardLimitWidthUnit_property.mObserverExplorer = nil
    self.boardLimitWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: arrowMagnitude
    self.arrowMagnitude_property.mObserverExplorer = nil
    self.arrowMagnitude_property.mValueExplorer = nil
  //--- Atomic property: arrowMagnitudeUnit
    self.arrowMagnitudeUnit_property.mObserverExplorer = nil
    self.arrowMagnitudeUnit_property.mValueExplorer = nil
  //--- Atomic property: shiftArrowMagnitude
    self.shiftArrowMagnitude_property.mObserverExplorer = nil
    self.shiftArrowMagnitude_property.mValueExplorer = nil
  //--- Atomic property: shiftArrowMagnitudeUnit
    self.shiftArrowMagnitudeUnit_property.mObserverExplorer = nil
    self.shiftArrowMagnitudeUnit_property.mValueExplorer = nil
  //--- Atomic property: artworkName
    self.artworkName_property.mObserverExplorer = nil
    self.artworkName_property.mValueExplorer = nil
  //--- Atomic property: generateGerberProductFile
    self.generateGerberProductFile_property.mObserverExplorer = nil
    self.generateGerberProductFile_property.mValueExplorer = nil
  //--- Atomic property: generatePDFProductFile
    self.generatePDFProductFile_property.mObserverExplorer = nil
    self.generatePDFProductFile_property.mValueExplorer = nil
  //--- Atomic property: generatedBoardArchiveFormat
    self.generatedBoardArchiveFormat_property.mObserverExplorer = nil
    self.generatedBoardArchiveFormat_property.mValueExplorer = nil
  //--- To one property: artwork
    self.artwork_property.mObserverExplorer = nil
    self.artwork_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.boardModels = []
    self.boardInstances = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.artwork = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To many property: boardModels
    self.store (
      managedObjectArray: self.boardModels_property.propval,
      relationshipName: "boardModels",
      intoDictionary: ioDictionary
    )
  //--- To many property: boardInstances
    self.store (
      managedObjectArray: self.boardInstances_property.propval,
      relationshipName: "boardInstances",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"selectedPageIndex")
  //--- Atomic property: zoom
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey:"zoom")
  //--- Atomic property: automaticBoardSize
    self.automaticBoardSize_property.storeIn (dictionary: ioDictionary, forKey:"automaticBoardSize")
  //--- Atomic property: boardManualWidth
    self.boardManualWidth_property.storeIn (dictionary: ioDictionary, forKey:"boardManualWidth")
  //--- Atomic property: boardManualHeight
    self.boardManualHeight_property.storeIn (dictionary: ioDictionary, forKey:"boardManualHeight")
  //--- Atomic property: boardWidthUnit
    self.boardWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"boardWidthUnit")
  //--- Atomic property: boardHeightUnit
    self.boardHeightUnit_property.storeIn (dictionary: ioDictionary, forKey:"boardHeightUnit")
  //--- Atomic property: overlapingArrangment
    self.overlapingArrangment_property.storeIn (dictionary: ioDictionary, forKey:"overlapingArrangment")
  //--- Atomic property: selectedBoardXUnit
    self.selectedBoardXUnit_property.storeIn (dictionary: ioDictionary, forKey:"selectedBoardXUnit")
  //--- Atomic property: selectedBoardYUnit
    self.selectedBoardYUnit_property.storeIn (dictionary: ioDictionary, forKey:"selectedBoardYUnit")
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.storeIn (dictionary: ioDictionary, forKey:"boardLimitWidth")
  //--- Atomic property: boardLimitWidthUnit
    self.boardLimitWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"boardLimitWidthUnit")
  //--- Atomic property: arrowMagnitude
    self.arrowMagnitude_property.storeIn (dictionary: ioDictionary, forKey:"arrowMagnitude")
  //--- Atomic property: arrowMagnitudeUnit
    self.arrowMagnitudeUnit_property.storeIn (dictionary: ioDictionary, forKey:"arrowMagnitudeUnit")
  //--- Atomic property: shiftArrowMagnitude
    self.shiftArrowMagnitude_property.storeIn (dictionary: ioDictionary, forKey:"shiftArrowMagnitude")
  //--- Atomic property: shiftArrowMagnitudeUnit
    self.shiftArrowMagnitudeUnit_property.storeIn (dictionary: ioDictionary, forKey:"shiftArrowMagnitudeUnit")
  //--- Atomic property: artworkName
    self.artworkName_property.storeIn (dictionary: ioDictionary, forKey:"artworkName")
  //--- Atomic property: generateGerberProductFile
    self.generateGerberProductFile_property.storeIn (dictionary: ioDictionary, forKey:"generateGerberProductFile")
  //--- Atomic property: generatePDFProductFile
    self.generatePDFProductFile_property.storeIn (dictionary: ioDictionary, forKey:"generatePDFProductFile")
  //--- Atomic property: generatedBoardArchiveFormat
    self.generatedBoardArchiveFormat_property.storeIn (dictionary: ioDictionary, forKey:"generatedBoardArchiveFormat")
  //--- To one property: artwork
    self.store (managedObject:self.artwork_property.propval,
      relationshipName: "artwork",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: boardModels
    self.boardModels_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "boardModels",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModel])
  //--- To many property: boardInstances
    self.boardInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "boardInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [MergerBoardInstance])
  //--- To one property: artwork
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "artwork",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ArtworkRoot {
        self.artwork_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"selectedPageIndex")
  //--- Atomic property: zoom
    self.zoom_property.readFrom (dictionary: inDictionary, forKey:"zoom")
  //--- Atomic property: automaticBoardSize
    self.automaticBoardSize_property.readFrom (dictionary: inDictionary, forKey:"automaticBoardSize")
  //--- Atomic property: boardManualWidth
    self.boardManualWidth_property.readFrom (dictionary: inDictionary, forKey:"boardManualWidth")
  //--- Atomic property: boardManualHeight
    self.boardManualHeight_property.readFrom (dictionary: inDictionary, forKey:"boardManualHeight")
  //--- Atomic property: boardWidthUnit
    self.boardWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"boardWidthUnit")
  //--- Atomic property: boardHeightUnit
    self.boardHeightUnit_property.readFrom (dictionary: inDictionary, forKey:"boardHeightUnit")
  //--- Atomic property: overlapingArrangment
    self.overlapingArrangment_property.readFrom (dictionary: inDictionary, forKey:"overlapingArrangment")
  //--- Atomic property: selectedBoardXUnit
    self.selectedBoardXUnit_property.readFrom (dictionary: inDictionary, forKey:"selectedBoardXUnit")
  //--- Atomic property: selectedBoardYUnit
    self.selectedBoardYUnit_property.readFrom (dictionary: inDictionary, forKey:"selectedBoardYUnit")
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.readFrom (dictionary: inDictionary, forKey:"boardLimitWidth")
  //--- Atomic property: boardLimitWidthUnit
    self.boardLimitWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"boardLimitWidthUnit")
  //--- Atomic property: arrowMagnitude
    self.arrowMagnitude_property.readFrom (dictionary: inDictionary, forKey:"arrowMagnitude")
  //--- Atomic property: arrowMagnitudeUnit
    self.arrowMagnitudeUnit_property.readFrom (dictionary: inDictionary, forKey:"arrowMagnitudeUnit")
  //--- Atomic property: shiftArrowMagnitude
    self.shiftArrowMagnitude_property.readFrom (dictionary: inDictionary, forKey:"shiftArrowMagnitude")
  //--- Atomic property: shiftArrowMagnitudeUnit
    self.shiftArrowMagnitudeUnit_property.readFrom (dictionary: inDictionary, forKey:"shiftArrowMagnitudeUnit")
  //--- Atomic property: artworkName
    self.artworkName_property.readFrom (dictionary: inDictionary, forKey:"artworkName")
  //--- Atomic property: generateGerberProductFile
    self.generateGerberProductFile_property.readFrom (dictionary: inDictionary, forKey:"generateGerberProductFile")
  //--- Atomic property: generatePDFProductFile
    self.generatePDFProductFile_property.readFrom (dictionary: inDictionary, forKey:"generatePDFProductFile")
  //--- Atomic property: generatedBoardArchiveFormat
    self.generatedBoardArchiveFormat_property.readFrom (dictionary: inDictionary, forKey:"generatedBoardArchiveFormat")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: boardModels
    for managedObject in self.boardModels {
      objects.append (managedObject)
    }
  //--- To many property: boardInstances
    for managedObject in self.boardInstances {
      objects.append (managedObject)
    }
  //--- To one property: artwork
    if let object = self.artwork {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: boardModels
    for managedObject in self.boardModels {
      objects.append (managedObject)
    }
  //--- To many property: boardInstances
    for managedObject in self.boardInstances {
      objects.append (managedObject)
    }
  //--- To one property: artwork
    if let object = self.artwork {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

