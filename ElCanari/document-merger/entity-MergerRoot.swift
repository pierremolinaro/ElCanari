//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_selectedPageIndex : class {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_zoom : class {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_automaticBoardSize : class {
  var automaticBoardSize : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardManualWidth : class {
  var boardManualWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardManualHeight : class {
  var boardManualHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardWidthUnit : class {
  var boardWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardHeightUnit : class {
  var boardHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_overlapingArrangment : class {
  var overlapingArrangment : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_selectedBoardXUnit : class {
  var selectedBoardXUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_selectedBoardYUnit : class {
  var selectedBoardYUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardLimitWidth : class {
  var boardLimitWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardLimitWidthUnit : class {
  var boardLimitWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_arrowMagnitude : class {
  var arrowMagnitude : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_arrowMagnitudeUnit : class {
  var arrowMagnitudeUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_shiftArrowMagnitude : class {
  var shiftArrowMagnitude : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_shiftArrowMagnitudeUnit : class {
  var shiftArrowMagnitudeUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_artworkName : class {
  var artworkName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_generateGerberProductFile : class {
  var generateGerberProductFile : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_generatePDFProductFile : class {
  var generatePDFProductFile : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_generatedBoardArchiveFormat : class {
  var generatedBoardArchiveFormat : BoardArchiveFormat { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_cocoaArrowMagnitude : class {
  var cocoaArrowMagnitude : CGFloat? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_cocoaShiftArrowMagnitude : class {
  var cocoaShiftArrowMagnitude : CGFloat? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_modelNames : class {
  var modelNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardRect : class {
  var boardRect : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardDisplayRect : class {
  var boardDisplayRect : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardWidth : class {
  var boardWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardHeight : class {
  var boardHeight : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardOutlineRectDisplay : class {
  var boardOutlineRectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MergerRoot : EBManagedObject,
         MergerRoot_selectedPageIndex,
         MergerRoot_zoom,
         MergerRoot_automaticBoardSize,
         MergerRoot_boardManualWidth,
         MergerRoot_boardManualHeight,
         MergerRoot_boardWidthUnit,
         MergerRoot_boardHeightUnit,
         MergerRoot_overlapingArrangment,
         MergerRoot_selectedBoardXUnit,
         MergerRoot_selectedBoardYUnit,
         MergerRoot_boardLimitWidth,
         MergerRoot_boardLimitWidthUnit,
         MergerRoot_arrowMagnitude,
         MergerRoot_arrowMagnitudeUnit,
         MergerRoot_shiftArrowMagnitude,
         MergerRoot_shiftArrowMagnitudeUnit,
         MergerRoot_artworkName,
         MergerRoot_generateGerberProductFile,
         MergerRoot_generatePDFProductFile,
         MergerRoot_generatedBoardArchiveFormat,
         MergerRoot_cocoaArrowMagnitude,
         MergerRoot_cocoaShiftArrowMagnitude,
         MergerRoot_modelNames,
         MergerRoot_boardRect,
         MergerRoot_boardDisplayRect,
         MergerRoot_boardWidth,
         MergerRoot_boardHeight,
         MergerRoot_boardOutlineRectDisplay {

  //····················································································································
  //   To many property: boardModels
  //····················································································································

  var boardModels_property = StoredArrayOf_BoardModel ()

  //····················································································································

  var boardModels_property_selection : EBSelection < [BoardModel] > {
      return self.boardModels_property.prop
  }

  //····················································································································
  //   To many property: boardInstances
  //····················································································································

  var boardInstances_property = StoredArrayOf_MergerBoardInstance ()

  //····················································································································

  var boardInstances_property_selection : EBSelection < [MergerBoardInstance] > {
      return self.boardInstances_property.prop
  }

  //····················································································································
  //   Atomic property: selectedPageIndex
  //····················································································································

  var selectedPageIndex_property = EBStoredProperty_Int (0)

  //····················································································································

  var selectedPageIndex : Int {
    get {
      return self.selectedPageIndex_property.propval
    }
    set {
      self.selectedPageIndex_property.setProp (newValue)
    }
  }

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int> {
    return self.selectedPageIndex_property.prop
  }

  //····················································································································
  //   Atomic property: zoom
  //····················································································································

  var zoom_property = EBStoredProperty_Int (100)

  //····················································································································

  var zoom : Int {
    get {
      return self.zoom_property.propval
    }
    set {
      self.zoom_property.setProp (newValue)
    }
  }

  //····················································································································

  var zoom_property_selection : EBSelection <Int> {
    return self.zoom_property.prop
  }

  //····················································································································
  //   Atomic property: automaticBoardSize
  //····················································································································

  var automaticBoardSize_property = EBStoredProperty_Bool (true)

  //····················································································································

  var automaticBoardSize : Bool {
    get {
      return self.automaticBoardSize_property.propval
    }
    set {
      self.automaticBoardSize_property.setProp (newValue)
    }
  }

  //····················································································································

  var automaticBoardSize_property_selection : EBSelection <Bool> {
    return self.automaticBoardSize_property.prop
  }

  //····················································································································
  //   Atomic property: boardManualWidth
  //····················································································································

  var boardManualWidth_property = EBStoredProperty_Int (9000000)

  //····················································································································

  var boardManualWidth : Int {
    get {
      return self.boardManualWidth_property.propval
    }
    set {
      self.boardManualWidth_property.setProp (newValue)
    }
  }

  //····················································································································

  var boardManualWidth_property_selection : EBSelection <Int> {
    return self.boardManualWidth_property.prop
  }

  //····················································································································
  //   Atomic property: boardManualHeight
  //····················································································································

  var boardManualHeight_property = EBStoredProperty_Int (9000000)

  //····················································································································

  var boardManualHeight : Int {
    get {
      return self.boardManualHeight_property.propval
    }
    set {
      self.boardManualHeight_property.setProp (newValue)
    }
  }

  //····················································································································

  var boardManualHeight_property_selection : EBSelection <Int> {
    return self.boardManualHeight_property.prop
  }

  //····················································································································
  //   Atomic property: boardWidthUnit
  //····················································································································

  var boardWidthUnit_property = EBStoredProperty_Int (90000)

  //····················································································································

  var boardWidthUnit : Int {
    get {
      return self.boardWidthUnit_property.propval
    }
    set {
      self.boardWidthUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var boardWidthUnit_property_selection : EBSelection <Int> {
    return self.boardWidthUnit_property.prop
  }

  //····················································································································
  //   Atomic property: boardHeightUnit
  //····················································································································

  var boardHeightUnit_property = EBStoredProperty_Int (90000)

  //····················································································································

  var boardHeightUnit : Int {
    get {
      return self.boardHeightUnit_property.propval
    }
    set {
      self.boardHeightUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var boardHeightUnit_property_selection : EBSelection <Int> {
    return self.boardHeightUnit_property.prop
  }

  //····················································································································
  //   Atomic property: overlapingArrangment
  //····················································································································

  var overlapingArrangment_property = EBStoredProperty_Bool (false)

  //····················································································································

  var overlapingArrangment : Bool {
    get {
      return self.overlapingArrangment_property.propval
    }
    set {
      self.overlapingArrangment_property.setProp (newValue)
    }
  }

  //····················································································································

  var overlapingArrangment_property_selection : EBSelection <Bool> {
    return self.overlapingArrangment_property.prop
  }

  //····················································································································
  //   Atomic property: selectedBoardXUnit
  //····················································································································

  var selectedBoardXUnit_property = EBStoredProperty_Int (90000)

  //····················································································································

  var selectedBoardXUnit : Int {
    get {
      return self.selectedBoardXUnit_property.propval
    }
    set {
      self.selectedBoardXUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var selectedBoardXUnit_property_selection : EBSelection <Int> {
    return self.selectedBoardXUnit_property.prop
  }

  //····················································································································
  //   Atomic property: selectedBoardYUnit
  //····················································································································

  var selectedBoardYUnit_property = EBStoredProperty_Int (90000)

  //····················································································································

  var selectedBoardYUnit : Int {
    get {
      return self.selectedBoardYUnit_property.propval
    }
    set {
      self.selectedBoardYUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var selectedBoardYUnit_property_selection : EBSelection <Int> {
    return self.selectedBoardYUnit_property.prop
  }

  //····················································································································
  //   Atomic property: boardLimitWidth
  //····················································································································

  var boardLimitWidth_property = EBStoredProperty_Int (90000)

  //····················································································································

  var boardLimitWidth : Int {
    get {
      return self.boardLimitWidth_property.propval
    }
    set {
      self.boardLimitWidth_property.setProp (newValue)
    }
  }

  //····················································································································

  var boardLimitWidth_property_selection : EBSelection <Int> {
    return self.boardLimitWidth_property.prop
  }

  //····················································································································
  //   Atomic property: boardLimitWidthUnit
  //····················································································································

  var boardLimitWidthUnit_property = EBStoredProperty_Int (90000)

  //····················································································································

  var boardLimitWidthUnit : Int {
    get {
      return self.boardLimitWidthUnit_property.propval
    }
    set {
      self.boardLimitWidthUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var boardLimitWidthUnit_property_selection : EBSelection <Int> {
    return self.boardLimitWidthUnit_property.prop
  }

  //····················································································································
  //   Atomic property: arrowMagnitude
  //····················································································································

  var arrowMagnitude_property = EBStoredProperty_Int (900000)

  //····················································································································

  var arrowMagnitude : Int {
    get {
      return self.arrowMagnitude_property.propval
    }
    set {
      self.arrowMagnitude_property.setProp (newValue)
    }
  }

  //····················································································································

  var arrowMagnitude_property_selection : EBSelection <Int> {
    return self.arrowMagnitude_property.prop
  }

  //····················································································································
  //   Atomic property: arrowMagnitudeUnit
  //····················································································································

  var arrowMagnitudeUnit_property = EBStoredProperty_Int (90000)

  //····················································································································

  var arrowMagnitudeUnit : Int {
    get {
      return self.arrowMagnitudeUnit_property.propval
    }
    set {
      self.arrowMagnitudeUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var arrowMagnitudeUnit_property_selection : EBSelection <Int> {
    return self.arrowMagnitudeUnit_property.prop
  }

  //····················································································································
  //   Atomic property: shiftArrowMagnitude
  //····················································································································

  var shiftArrowMagnitude_property = EBStoredProperty_Int (3600000)

  //····················································································································

  var shiftArrowMagnitude : Int {
    get {
      return self.shiftArrowMagnitude_property.propval
    }
    set {
      self.shiftArrowMagnitude_property.setProp (newValue)
    }
  }

  //····················································································································

  var shiftArrowMagnitude_property_selection : EBSelection <Int> {
    return self.shiftArrowMagnitude_property.prop
  }

  //····················································································································
  //   Atomic property: shiftArrowMagnitudeUnit
  //····················································································································

  var shiftArrowMagnitudeUnit_property = EBStoredProperty_Int (90000)

  //····················································································································

  var shiftArrowMagnitudeUnit : Int {
    get {
      return self.shiftArrowMagnitudeUnit_property.propval
    }
    set {
      self.shiftArrowMagnitudeUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var shiftArrowMagnitudeUnit_property_selection : EBSelection <Int> {
    return self.shiftArrowMagnitudeUnit_property.prop
  }

  //····················································································································
  //   To one property: artwork
  //····················································································································

  var artwork_property = ToOneRelationship_MergerRoot_artwork ()

  //····················································································································

  var artwork_property_selection : EBSelection <Bool> {
    return .single (self.artwork_property.propval == nil)
  }

  //····················································································································
  //   Atomic property: artworkName
  //····················································································································

  var artworkName_property = EBStoredProperty_String ("")

  //····················································································································

  var artworkName : String {
    get {
      return self.artworkName_property.propval
    }
    set {
      self.artworkName_property.setProp (newValue)
    }
  }

  //····················································································································

  var artworkName_property_selection : EBSelection <String> {
    return self.artworkName_property.prop
  }

  //····················································································································
  //   Atomic property: generateGerberProductFile
  //····················································································································

  var generateGerberProductFile_property = EBStoredProperty_Bool (true)

  //····················································································································

  var generateGerberProductFile : Bool {
    get {
      return self.generateGerberProductFile_property.propval
    }
    set {
      self.generateGerberProductFile_property.setProp (newValue)
    }
  }

  //····················································································································

  var generateGerberProductFile_property_selection : EBSelection <Bool> {
    return self.generateGerberProductFile_property.prop
  }

  //····················································································································
  //   Atomic property: generatePDFProductFile
  //····················································································································

  var generatePDFProductFile_property = EBStoredProperty_Bool (true)

  //····················································································································

  var generatePDFProductFile : Bool {
    get {
      return self.generatePDFProductFile_property.propval
    }
    set {
      self.generatePDFProductFile_property.setProp (newValue)
    }
  }

  //····················································································································

  var generatePDFProductFile_property_selection : EBSelection <Bool> {
    return self.generatePDFProductFile_property.prop
  }

  //····················································································································
  //   Atomic property: generatedBoardArchiveFormat
  //····················································································································

  var generatedBoardArchiveFormat_property = EBStoredProperty_BoardArchiveFormat (BoardArchiveFormat.noGeneration)

  //····················································································································

  var generatedBoardArchiveFormat : BoardArchiveFormat {
    get {
      return self.generatedBoardArchiveFormat_property.propval
    }
    set {
      self.generatedBoardArchiveFormat_property.setProp (newValue)
    }
  }

  //····················································································································

  var generatedBoardArchiveFormat_property_selection : EBSelection <BoardArchiveFormat> {
    return self.generatedBoardArchiveFormat_property.prop
  }

  //····················································································································
  //   Transient property: cocoaArrowMagnitude
  //····················································································································

  var cocoaArrowMagnitude_property = EBTransientProperty_CGFloat ()

  //····················································································································

  var cocoaArrowMagnitude_property_selection : EBSelection <CGFloat> {
    return self.cocoaArrowMagnitude_property.prop
  }

  //····················································································································

    var cocoaArrowMagnitude : CGFloat? {
    switch self.cocoaArrowMagnitude_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: cocoaShiftArrowMagnitude
  //····················································································································

  var cocoaShiftArrowMagnitude_property = EBTransientProperty_CGFloat ()

  //····················································································································

  var cocoaShiftArrowMagnitude_property_selection : EBSelection <CGFloat> {
    return self.cocoaShiftArrowMagnitude_property.prop
  }

  //····················································································································

    var cocoaShiftArrowMagnitude : CGFloat? {
    switch self.cocoaShiftArrowMagnitude_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: modelNames
  //····················································································································

  var modelNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  var modelNames_property_selection : EBSelection <StringArray> {
    return self.modelNames_property.prop
  }

  //····················································································································

    var modelNames : StringArray? {
    switch self.modelNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardRect
  //····················································································································

  var boardRect_property = EBTransientProperty_CanariRect ()

  //····················································································································

  var boardRect_property_selection : EBSelection <CanariRect> {
    return self.boardRect_property.prop
  }

  //····················································································································

    var boardRect : CanariRect? {
    switch self.boardRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardDisplayRect
  //····················································································································

  var boardDisplayRect_property = EBTransientProperty_CanariRect ()

  //····················································································································

  var boardDisplayRect_property_selection : EBSelection <CanariRect> {
    return self.boardDisplayRect_property.prop
  }

  //····················································································································

    var boardDisplayRect : CanariRect? {
    switch self.boardDisplayRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardWidth
  //····················································································································

  var boardWidth_property = EBTransientProperty_Int ()

  //····················································································································

  var boardWidth_property_selection : EBSelection <Int> {
    return self.boardWidth_property.prop
  }

  //····················································································································

    var boardWidth : Int? {
    switch self.boardWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardHeight
  //····················································································································

  var boardHeight_property = EBTransientProperty_Int ()

  //····················································································································

  var boardHeight_property_selection : EBSelection <Int> {
    return self.boardHeight_property.prop
  }

  //····················································································································

    var boardHeight : Int? {
    switch self.boardHeight_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardOutlineRectDisplay
  //····················································································································

  var boardOutlineRectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var boardOutlineRectDisplay_property_selection : EBSelection <EBShape> {
    return self.boardOutlineRectDisplay_property.prop
  }

  //····················································································································

    var boardOutlineRectDisplay : EBShape? {
    switch self.boardOutlineRectDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext, file: String, _ line : Int) {
    super.init (managedObjectContext:managedObjectContext, file: file, line)
  //--- To many property: boardModels
    self.boardModels_property.undoManager = self.undoManager
  //--- To many property: boardInstances
    self.boardInstances_property.undoManager = self.undoManager
    self.boardInstances_property.setOppositeRelationship = { [weak self] (_ inManagedObject :MergerBoardInstance?) in
      inManagedObject?.myRoot_property.setProp (self)
    }
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.undoManager = self.undoManager
  //--- Atomic property: zoom
    self.zoom_property.undoManager = self.undoManager
  //--- Atomic property: automaticBoardSize
    self.automaticBoardSize_property.undoManager = self.undoManager
  //--- Atomic property: boardManualWidth
    self.boardManualWidth_property.undoManager = self.undoManager
  //--- Atomic property: boardManualHeight
    self.boardManualHeight_property.undoManager = self.undoManager
  //--- Atomic property: boardWidthUnit
    self.boardWidthUnit_property.undoManager = self.undoManager
  //--- Atomic property: boardHeightUnit
    self.boardHeightUnit_property.undoManager = self.undoManager
  //--- Atomic property: overlapingArrangment
    self.overlapingArrangment_property.undoManager = self.undoManager
  //--- Atomic property: selectedBoardXUnit
    self.selectedBoardXUnit_property.undoManager = self.undoManager
  //--- Atomic property: selectedBoardYUnit
    self.selectedBoardYUnit_property.undoManager = self.undoManager
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.undoManager = self.undoManager
  //--- Atomic property: boardLimitWidthUnit
    self.boardLimitWidthUnit_property.undoManager = self.undoManager
  //--- Atomic property: arrowMagnitude
    self.arrowMagnitude_property.undoManager = self.undoManager
  //--- Atomic property: arrowMagnitudeUnit
    self.arrowMagnitudeUnit_property.undoManager = self.undoManager
  //--- Atomic property: shiftArrowMagnitude
    self.shiftArrowMagnitude_property.undoManager = self.undoManager
  //--- Atomic property: shiftArrowMagnitudeUnit
    self.shiftArrowMagnitudeUnit_property.undoManager = self.undoManager
  //--- To one property: artwork
    self.artwork_property.owner = self
  //--- Atomic property: artworkName
    self.artworkName_property.undoManager = self.undoManager
  //--- Atomic property: generateGerberProductFile
    self.generateGerberProductFile_property.undoManager = self.undoManager
  //--- Atomic property: generatePDFProductFile
    self.generatePDFProductFile_property.undoManager = self.undoManager
  //--- Atomic property: generatedBoardArchiveFormat
    self.generatedBoardArchiveFormat_property.undoManager = self.undoManager
  //--- Atomic property: cocoaArrowMagnitude
    self.cocoaArrowMagnitude_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.arrowMagnitude_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.arrowMagnitude_property_selection) {
          case (.single (let v0)) :
            return .single (transient_canariUnitToCocoa (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.arrowMagnitude_property.addEBObserver (self.cocoaArrowMagnitude_property)
  //--- Atomic property: cocoaShiftArrowMagnitude
    self.cocoaShiftArrowMagnitude_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.shiftArrowMagnitude_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.shiftArrowMagnitude_property_selection) {
          case (.single (let v0)) :
            return .single (transient_canariUnitToCocoa (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.shiftArrowMagnitude_property.addEBObserver (self.cocoaShiftArrowMagnitude_property)
  //--- Atomic property: modelNames
    self.modelNames_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardModels_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardModels_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerRoot_modelNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardModels_property.addEBObserverOf_name (self.modelNames_property)
  //--- Atomic property: boardRect
    self.boardRect_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.automaticBoardSize_property_selection.kind ()
        kind &= unwSelf.boardManualWidth_property_selection.kind ()
        kind &= unwSelf.boardManualHeight_property_selection.kind ()
        kind &= unwSelf.boardInstances_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.automaticBoardSize_property_selection, unwSelf.boardManualWidth_property_selection, unwSelf.boardManualHeight_property_selection, unwSelf.boardInstances_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_MergerRoot_boardRect (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.automaticBoardSize_property.addEBObserver (self.boardRect_property)
    self.boardManualWidth_property.addEBObserver (self.boardRect_property)
    self.boardManualHeight_property.addEBObserver (self.boardRect_property)
    self.boardInstances_property.addEBObserverOf_instanceRect (self.boardRect_property)
  //--- Atomic property: boardDisplayRect
    self.boardDisplayRect_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardManualWidth_property_selection.kind ()
        kind &= unwSelf.boardManualHeight_property_selection.kind ()
        kind &= unwSelf.boardInstances_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardManualWidth_property_selection, unwSelf.boardManualHeight_property_selection, unwSelf.boardInstances_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_MergerRoot_boardDisplayRect (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardManualWidth_property.addEBObserver (self.boardDisplayRect_property)
    self.boardManualHeight_property.addEBObserver (self.boardDisplayRect_property)
    self.boardInstances_property.addEBObserverOf_instanceRect (self.boardDisplayRect_property)
  //--- Atomic property: boardWidth
    self.boardWidth_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardRect_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardRect_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerRoot_boardWidth (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.addEBObserver (self.boardWidth_property)
  //--- Atomic property: boardHeight
    self.boardHeight_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardRect_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardRect_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerRoot_boardHeight (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.addEBObserver (self.boardHeight_property)
  //--- Atomic property: boardOutlineRectDisplay
    self.boardOutlineRectDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardRect_property_selection.kind ()
        kind &= unwSelf.boardLimitWidth_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBoardLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBoardLimits_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardRect_property_selection, unwSelf.boardLimitWidth_property_selection, g_Preferences!.mergerBoardViewDisplayBoardLimits_property_selection, g_Preferences!.mergerColorBoardLimits_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_MergerRoot_boardOutlineRectDisplay (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.addEBObserver (self.boardOutlineRectDisplay_property)
    self.boardLimitWidth_property.addEBObserver (self.boardOutlineRectDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBoardLimits_property.addEBObserver (self.boardOutlineRectDisplay_property)
    g_Preferences?.mergerColorBoardLimits_property.addEBObserver (self.boardOutlineRectDisplay_property)
  //--- Install undoers and opposite setter for relationships
    self.boardModels_property.undoManager = self.undoManager
    self.boardInstances_property.undoManager = self.undoManager
    self.boardInstances_property.setOppositeRelationship = { [weak self] (_ inManagedObject : MergerBoardInstance?) in
      inManagedObject?.myRoot_property.setProp (self)
    }
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.arrowMagnitude_property.removeEBObserver (self.cocoaArrowMagnitude_property)
    self.shiftArrowMagnitude_property.removeEBObserver (self.cocoaShiftArrowMagnitude_property)
    self.boardModels_property.removeEBObserverOf_name (self.modelNames_property)
    self.automaticBoardSize_property.removeEBObserver (self.boardRect_property)
    self.boardManualWidth_property.removeEBObserver (self.boardRect_property)
    self.boardManualHeight_property.removeEBObserver (self.boardRect_property)
    self.boardInstances_property.removeEBObserverOf_instanceRect (self.boardRect_property)
    self.boardManualWidth_property.removeEBObserver (self.boardDisplayRect_property)
    self.boardManualHeight_property.removeEBObserver (self.boardDisplayRect_property)
    self.boardInstances_property.removeEBObserverOf_instanceRect (self.boardDisplayRect_property)
    self.boardRect_property.removeEBObserver (self.boardWidth_property)
    self.boardRect_property.removeEBObserver (self.boardHeight_property)
    self.boardRect_property.removeEBObserver (self.boardOutlineRectDisplay_property)
    self.boardLimitWidth_property.removeEBObserver (self.boardOutlineRectDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBoardLimits_property.removeEBObserver (self.boardOutlineRectDisplay_property)
    g_Preferences?.mergerColorBoardLimits_property.removeEBObserver (self.boardOutlineRectDisplay_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedPageIndex",
      idx:self.selectedPageIndex_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedPageIndex_property.mObserverExplorer,
      valueExplorer:&self.selectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom_property.mObserverExplorer,
      valueExplorer:&self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "automaticBoardSize",
      idx:self.automaticBoardSize_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.automaticBoardSize_property.mObserverExplorer,
      valueExplorer:&self.automaticBoardSize_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardManualWidth",
      idx:self.boardManualWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardManualWidth_property.mObserverExplorer,
      valueExplorer:&self.boardManualWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardManualHeight",
      idx:self.boardManualHeight_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardManualHeight_property.mObserverExplorer,
      valueExplorer:&self.boardManualHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidthUnit",
      idx:self.boardWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.boardWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeightUnit",
      idx:self.boardHeightUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeightUnit_property.mObserverExplorer,
      valueExplorer:&self.boardHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "overlapingArrangment",
      idx:self.overlapingArrangment_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.overlapingArrangment_property.mObserverExplorer,
      valueExplorer:&self.overlapingArrangment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedBoardXUnit",
      idx:self.selectedBoardXUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedBoardXUnit_property.mObserverExplorer,
      valueExplorer:&self.selectedBoardXUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedBoardYUnit",
      idx:self.selectedBoardYUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedBoardYUnit_property.mObserverExplorer,
      valueExplorer:&self.selectedBoardYUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidth",
      idx:self.boardLimitWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidth_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidthUnit",
      idx:self.boardLimitWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "arrowMagnitude",
      idx:self.arrowMagnitude_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.arrowMagnitude_property.mObserverExplorer,
      valueExplorer:&self.arrowMagnitude_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "arrowMagnitudeUnit",
      idx:self.arrowMagnitudeUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.arrowMagnitudeUnit_property.mObserverExplorer,
      valueExplorer:&self.arrowMagnitudeUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "shiftArrowMagnitude",
      idx:self.shiftArrowMagnitude_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.shiftArrowMagnitude_property.mObserverExplorer,
      valueExplorer:&self.shiftArrowMagnitude_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "shiftArrowMagnitudeUnit",
      idx:self.shiftArrowMagnitudeUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.shiftArrowMagnitudeUnit_property.mObserverExplorer,
      valueExplorer:&self.shiftArrowMagnitudeUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "artworkName",
      idx:self.artworkName_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.artworkName_property.mObserverExplorer,
      valueExplorer:&self.artworkName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "generateGerberProductFile",
      idx:self.generateGerberProductFile_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.generateGerberProductFile_property.mObserverExplorer,
      valueExplorer:&self.generateGerberProductFile_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "generatePDFProductFile",
      idx:self.generatePDFProductFile_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.generatePDFProductFile_property.mObserverExplorer,
      valueExplorer:&self.generatePDFProductFile_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "generatedBoardArchiveFormat",
      idx:self.generatedBoardArchiveFormat_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.generatedBoardArchiveFormat_property.mObserverExplorer,
      valueExplorer:&self.generatedBoardArchiveFormat_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "cocoaArrowMagnitude",
      idx:self.cocoaArrowMagnitude_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cocoaArrowMagnitude_property.mObserverExplorer,
      valueExplorer:&self.cocoaArrowMagnitude_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cocoaShiftArrowMagnitude",
      idx:self.cocoaShiftArrowMagnitude_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cocoaShiftArrowMagnitude_property.mObserverExplorer,
      valueExplorer:&self.cocoaShiftArrowMagnitude_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelNames",
      idx:self.modelNames_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelNames_property.mObserverExplorer,
      valueExplorer:&self.modelNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardRect",
      idx:self.boardRect_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardRect_property.mObserverExplorer,
      valueExplorer:&self.boardRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardDisplayRect",
      idx:self.boardDisplayRect_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardDisplayRect_property.mObserverExplorer,
      valueExplorer:&self.boardDisplayRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidth",
      idx:self.boardWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidth_property.mObserverExplorer,
      valueExplorer:&self.boardWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeight",
      idx:self.boardHeight_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeight_property.mObserverExplorer,
      valueExplorer:&self.boardHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardOutlineRectDisplay",
      idx:self.boardOutlineRectDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardOutlineRectDisplay_property.mObserverExplorer,
      valueExplorer:&self.boardOutlineRectDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "boardModels",
      idx:boardModels_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&boardModels_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "boardInstances",
      idx:boardInstances_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&boardInstances_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "artwork",
      idx:self.artwork_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.artwork_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- To many property: boardModels
    self.boardModels_property.mValueExplorer = nil
  //--- To many property: boardInstances
    self.boardInstances_property.mValueExplorer = nil
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.mObserverExplorer = nil
    self.selectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: zoom
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
  //--- Atomic property: automaticBoardSize
    self.automaticBoardSize_property.mObserverExplorer = nil
    self.automaticBoardSize_property.mValueExplorer = nil
  //--- Atomic property: boardManualWidth
    self.boardManualWidth_property.mObserverExplorer = nil
    self.boardManualWidth_property.mValueExplorer = nil
  //--- Atomic property: boardManualHeight
    self.boardManualHeight_property.mObserverExplorer = nil
    self.boardManualHeight_property.mValueExplorer = nil
  //--- Atomic property: boardWidthUnit
    self.boardWidthUnit_property.mObserverExplorer = nil
    self.boardWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: boardHeightUnit
    self.boardHeightUnit_property.mObserverExplorer = nil
    self.boardHeightUnit_property.mValueExplorer = nil
  //--- Atomic property: overlapingArrangment
    self.overlapingArrangment_property.mObserverExplorer = nil
    self.overlapingArrangment_property.mValueExplorer = nil
  //--- Atomic property: selectedBoardXUnit
    self.selectedBoardXUnit_property.mObserverExplorer = nil
    self.selectedBoardXUnit_property.mValueExplorer = nil
  //--- Atomic property: selectedBoardYUnit
    self.selectedBoardYUnit_property.mObserverExplorer = nil
    self.selectedBoardYUnit_property.mValueExplorer = nil
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.mObserverExplorer = nil
    self.boardLimitWidth_property.mValueExplorer = nil
  //--- Atomic property: boardLimitWidthUnit
    self.boardLimitWidthUnit_property.mObserverExplorer = nil
    self.boardLimitWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: arrowMagnitude
    self.arrowMagnitude_property.mObserverExplorer = nil
    self.arrowMagnitude_property.mValueExplorer = nil
  //--- Atomic property: arrowMagnitudeUnit
    self.arrowMagnitudeUnit_property.mObserverExplorer = nil
    self.arrowMagnitudeUnit_property.mValueExplorer = nil
  //--- Atomic property: shiftArrowMagnitude
    self.shiftArrowMagnitude_property.mObserverExplorer = nil
    self.shiftArrowMagnitude_property.mValueExplorer = nil
  //--- Atomic property: shiftArrowMagnitudeUnit
    self.shiftArrowMagnitudeUnit_property.mObserverExplorer = nil
    self.shiftArrowMagnitudeUnit_property.mValueExplorer = nil
  //--- To one property: artwork
    self.artwork_property.mObserverExplorer = nil
    self.artwork_property.mValueExplorer = nil
  //--- Atomic property: artworkName
    self.artworkName_property.mObserverExplorer = nil
    self.artworkName_property.mValueExplorer = nil
  //--- Atomic property: generateGerberProductFile
    self.generateGerberProductFile_property.mObserverExplorer = nil
    self.generateGerberProductFile_property.mValueExplorer = nil
  //--- Atomic property: generatePDFProductFile
    self.generatePDFProductFile_property.mObserverExplorer = nil
    self.generatePDFProductFile_property.mValueExplorer = nil
  //--- Atomic property: generatedBoardArchiveFormat
    self.generatedBoardArchiveFormat_property.mObserverExplorer = nil
    self.generatedBoardArchiveFormat_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To many property: boardModels
    self.store (
      managedObjectArray: boardModels_property.propval as NSArray,
      relationshipName: "boardModels",
      intoDictionary: ioDictionary
    )
  //--- To many property: boardInstances
    self.store (
      managedObjectArray: boardInstances_property.propval as NSArray,
      relationshipName: "boardInstances",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"selectedPageIndex")
  //--- Atomic property: zoom
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey:"zoom")
  //--- Atomic property: automaticBoardSize
    self.automaticBoardSize_property.storeIn (dictionary: ioDictionary, forKey:"automaticBoardSize")
  //--- Atomic property: boardManualWidth
    self.boardManualWidth_property.storeIn (dictionary: ioDictionary, forKey:"boardManualWidth")
  //--- Atomic property: boardManualHeight
    self.boardManualHeight_property.storeIn (dictionary: ioDictionary, forKey:"boardManualHeight")
  //--- Atomic property: boardWidthUnit
    self.boardWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"boardWidthUnit")
  //--- Atomic property: boardHeightUnit
    self.boardHeightUnit_property.storeIn (dictionary: ioDictionary, forKey:"boardHeightUnit")
  //--- Atomic property: overlapingArrangment
    self.overlapingArrangment_property.storeIn (dictionary: ioDictionary, forKey:"overlapingArrangment")
  //--- Atomic property: selectedBoardXUnit
    self.selectedBoardXUnit_property.storeIn (dictionary: ioDictionary, forKey:"selectedBoardXUnit")
  //--- Atomic property: selectedBoardYUnit
    self.selectedBoardYUnit_property.storeIn (dictionary: ioDictionary, forKey:"selectedBoardYUnit")
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.storeIn (dictionary: ioDictionary, forKey:"boardLimitWidth")
  //--- Atomic property: boardLimitWidthUnit
    self.boardLimitWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"boardLimitWidthUnit")
  //--- Atomic property: arrowMagnitude
    self.arrowMagnitude_property.storeIn (dictionary: ioDictionary, forKey:"arrowMagnitude")
  //--- Atomic property: arrowMagnitudeUnit
    self.arrowMagnitudeUnit_property.storeIn (dictionary: ioDictionary, forKey:"arrowMagnitudeUnit")
  //--- Atomic property: shiftArrowMagnitude
    self.shiftArrowMagnitude_property.storeIn (dictionary: ioDictionary, forKey:"shiftArrowMagnitude")
  //--- Atomic property: shiftArrowMagnitudeUnit
    self.shiftArrowMagnitudeUnit_property.storeIn (dictionary: ioDictionary, forKey:"shiftArrowMagnitudeUnit")
  //--- To one property: artwork
    self.store (managedObject:self.artwork_property.propval,
      relationshipName: "artwork",
      intoDictionary: ioDictionary)
  //--- Atomic property: artworkName
    self.artworkName_property.storeIn (dictionary: ioDictionary, forKey:"artworkName")
  //--- Atomic property: generateGerberProductFile
    self.generateGerberProductFile_property.storeIn (dictionary: ioDictionary, forKey:"generateGerberProductFile")
  //--- Atomic property: generatePDFProductFile
    self.generatePDFProductFile_property.storeIn (dictionary: ioDictionary, forKey:"generatePDFProductFile")
  //--- Atomic property: generatedBoardArchiveFormat
    self.generatedBoardArchiveFormat_property.storeIn (dictionary: ioDictionary, forKey:"generatedBoardArchiveFormat")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: boardModels
    self.boardModels_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "boardModels",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModel])
  //--- To many property: boardInstances
    self.boardInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "boardInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [MergerBoardInstance])
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"selectedPageIndex")
  //--- Atomic property: zoom
    self.zoom_property.readFrom (dictionary: inDictionary, forKey:"zoom")
  //--- Atomic property: automaticBoardSize
    self.automaticBoardSize_property.readFrom (dictionary: inDictionary, forKey:"automaticBoardSize")
  //--- Atomic property: boardManualWidth
    self.boardManualWidth_property.readFrom (dictionary: inDictionary, forKey:"boardManualWidth")
  //--- Atomic property: boardManualHeight
    self.boardManualHeight_property.readFrom (dictionary: inDictionary, forKey:"boardManualHeight")
  //--- Atomic property: boardWidthUnit
    self.boardWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"boardWidthUnit")
  //--- Atomic property: boardHeightUnit
    self.boardHeightUnit_property.readFrom (dictionary: inDictionary, forKey:"boardHeightUnit")
  //--- Atomic property: overlapingArrangment
    self.overlapingArrangment_property.readFrom (dictionary: inDictionary, forKey:"overlapingArrangment")
  //--- Atomic property: selectedBoardXUnit
    self.selectedBoardXUnit_property.readFrom (dictionary: inDictionary, forKey:"selectedBoardXUnit")
  //--- Atomic property: selectedBoardYUnit
    self.selectedBoardYUnit_property.readFrom (dictionary: inDictionary, forKey:"selectedBoardYUnit")
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.readFrom (dictionary: inDictionary, forKey:"boardLimitWidth")
  //--- Atomic property: boardLimitWidthUnit
    self.boardLimitWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"boardLimitWidthUnit")
  //--- Atomic property: arrowMagnitude
    self.arrowMagnitude_property.readFrom (dictionary: inDictionary, forKey:"arrowMagnitude")
  //--- Atomic property: arrowMagnitudeUnit
    self.arrowMagnitudeUnit_property.readFrom (dictionary: inDictionary, forKey:"arrowMagnitudeUnit")
  //--- Atomic property: shiftArrowMagnitude
    self.shiftArrowMagnitude_property.readFrom (dictionary: inDictionary, forKey:"shiftArrowMagnitude")
  //--- Atomic property: shiftArrowMagnitudeUnit
    self.shiftArrowMagnitudeUnit_property.readFrom (dictionary: inDictionary, forKey:"shiftArrowMagnitudeUnit")
  //--- To one property: artwork
    self.artwork_property.setProp (readEntityFromDictionary (
      inRelationshipName: "artwork",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as? ArtworkRoot)
  //--- Atomic property: artworkName
    self.artworkName_property.readFrom (dictionary: inDictionary, forKey:"artworkName")
  //--- Atomic property: generateGerberProductFile
    self.generateGerberProductFile_property.readFrom (dictionary: inDictionary, forKey:"generateGerberProductFile")
  //--- Atomic property: generatePDFProductFile
    self.generatePDFProductFile_property.readFrom (dictionary: inDictionary, forKey:"generatePDFProductFile")
  //--- Atomic property: generatedBoardArchiveFormat
    self.generatedBoardArchiveFormat_property.readFrom (dictionary: inDictionary, forKey:"generatedBoardArchiveFormat")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
  //--- Cascading toMany boardModels
    do{
      let objects = self.boardModels_property.propval
      self.boardModels_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toMany boardInstances
    do{
      let objects = self.boardInstances_property.propval
      self.boardInstances_property.setProp ([])
      self.managedObjectContext?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
  //--- Cascading toOne artwork
    if let object = self.artwork_property.propval {
      self.artwork_property.setProp (nil)
      self.managedObjectContext?.internalRemoveManagedObject (object, &ioObjectsToRemove) // Cascade removing from moc
    }
  //---
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetControllers
  //····················································································································

  override func resetControllers () {
    super.resetControllers ()
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
  //--- To many property: boardModels
    self.boardModels_property.setProp ([])
  //--- To many property: boardInstances
    self.boardInstances_property.setProp ([])
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
    self.artwork_property.setProp (nil)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: boardModels
    for managedObject : EBManagedObject in self.boardModels_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: boardInstances
    for managedObject : EBManagedObject in self.boardInstances_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: artwork
    if let managedObject = self.artwork_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MergerRoot : ReadOnlyAbstractArrayProperty <MergerRoot> {

  //····················································································································

  weak var undoManager : EBUndoManager? // SOULD BE WEAK

  //····················································································································

  var propval : [MergerRoot] { return [] } // Abstract method

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedPageIndex {
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_selectedPageIndex {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_zoom {
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_zoom {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'automaticBoardSize' stored property
  //····················································································································

  private var mObserversOf_automaticBoardSize = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_automaticBoardSize.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.automaticBoardSize_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_automaticBoardSize.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.automaticBoardSize_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_automaticBoardSize_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_automaticBoardSize {
        managedObject.automaticBoardSize_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_automaticBoardSize_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_automaticBoardSize {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.automaticBoardSize_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardManualWidth' stored property
  //····················································································································

  private var mObserversOf_boardManualWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardManualWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardManualWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardManualWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardManualWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardManualWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardManualWidth {
        managedObject.boardManualWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardManualWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_boardManualWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardManualWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardManualHeight' stored property
  //····················································································································

  private var mObserversOf_boardManualHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardManualHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardManualHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardManualHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardManualHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardManualHeight_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardManualHeight {
        managedObject.boardManualHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardManualHeight_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_boardManualHeight {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardManualHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidthUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidthUnit {
        managedObject.boardWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidthUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_boardWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeightUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeightUnit {
        managedObject.boardHeightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeightUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_boardHeightUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'overlapingArrangment' stored property
  //····················································································································

  private var mObserversOf_overlapingArrangment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_overlapingArrangment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.overlapingArrangment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_overlapingArrangment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.overlapingArrangment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_overlapingArrangment_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_overlapingArrangment {
        managedObject.overlapingArrangment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_overlapingArrangment_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_overlapingArrangment {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.overlapingArrangment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedBoardXUnit' stored property
  //····················································································································

  private var mObserversOf_selectedBoardXUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedBoardXUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedBoardXUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedBoardXUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedBoardXUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedBoardXUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedBoardXUnit {
        managedObject.selectedBoardXUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedBoardXUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_selectedBoardXUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedBoardXUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedBoardYUnit' stored property
  //····················································································································

  private var mObserversOf_selectedBoardYUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedBoardYUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedBoardYUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedBoardYUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedBoardYUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedBoardYUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedBoardYUnit {
        managedObject.selectedBoardYUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedBoardYUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_selectedBoardYUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedBoardYUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidth {
        managedObject.boardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_boardLimitWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidthUnit {
        managedObject.boardLimitWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_boardLimitWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arrowMagnitude' stored property
  //····················································································································

  private var mObserversOf_arrowMagnitude = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_arrowMagnitude.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arrowMagnitude_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_arrowMagnitude.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arrowMagnitude_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_arrowMagnitude_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_arrowMagnitude {
        managedObject.arrowMagnitude_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arrowMagnitude_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_arrowMagnitude {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.arrowMagnitude_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arrowMagnitudeUnit' stored property
  //····················································································································

  private var mObserversOf_arrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_arrowMagnitudeUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arrowMagnitudeUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_arrowMagnitudeUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arrowMagnitudeUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_arrowMagnitudeUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_arrowMagnitudeUnit {
        managedObject.arrowMagnitudeUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arrowMagnitudeUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_arrowMagnitudeUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.arrowMagnitudeUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'shiftArrowMagnitude' stored property
  //····················································································································

  private var mObserversOf_shiftArrowMagnitude = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_shiftArrowMagnitude.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shiftArrowMagnitude_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_shiftArrowMagnitude.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shiftArrowMagnitude_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_shiftArrowMagnitude_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_shiftArrowMagnitude {
        managedObject.shiftArrowMagnitude_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_shiftArrowMagnitude_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_shiftArrowMagnitude {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.shiftArrowMagnitude_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'shiftArrowMagnitudeUnit' stored property
  //····················································································································

  private var mObserversOf_shiftArrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_shiftArrowMagnitudeUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shiftArrowMagnitudeUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_shiftArrowMagnitudeUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shiftArrowMagnitudeUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_shiftArrowMagnitudeUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_shiftArrowMagnitudeUnit {
        managedObject.shiftArrowMagnitudeUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_shiftArrowMagnitudeUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_shiftArrowMagnitudeUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.shiftArrowMagnitudeUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_artworkName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_artworkName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_artworkName {
        managedObject.artworkName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_artworkName {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.artworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generateGerberProductFile' stored property
  //····················································································································

  private var mObserversOf_generateGerberProductFile = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_generateGerberProductFile.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generateGerberProductFile_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_generateGerberProductFile.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generateGerberProductFile_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_generateGerberProductFile_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_generateGerberProductFile {
        managedObject.generateGerberProductFile_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generateGerberProductFile_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_generateGerberProductFile {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generateGerberProductFile_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generatePDFProductFile' stored property
  //····················································································································

  private var mObserversOf_generatePDFProductFile = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_generatePDFProductFile.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generatePDFProductFile_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_generatePDFProductFile.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generatePDFProductFile_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_generatePDFProductFile_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_generatePDFProductFile {
        managedObject.generatePDFProductFile_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generatePDFProductFile_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_generatePDFProductFile {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generatePDFProductFile_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generatedBoardArchiveFormat' stored property
  //····················································································································

  private var mObserversOf_generatedBoardArchiveFormat = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_generatedBoardArchiveFormat.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generatedBoardArchiveFormat_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_generatedBoardArchiveFormat.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generatedBoardArchiveFormat_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_generatedBoardArchiveFormat_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_generatedBoardArchiveFormat {
        managedObject.generatedBoardArchiveFormat_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generatedBoardArchiveFormat_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_generatedBoardArchiveFormat {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generatedBoardArchiveFormat_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cocoaArrowMagnitude' transient property
  //····················································································································

  private var mObserversOf_cocoaArrowMagnitude = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cocoaArrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_cocoaArrowMagnitude.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cocoaArrowMagnitude_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cocoaArrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_cocoaArrowMagnitude.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cocoaArrowMagnitude_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cocoaArrowMagnitude_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_cocoaArrowMagnitude {
        managedObject.cocoaArrowMagnitude_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cocoaArrowMagnitude_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_cocoaArrowMagnitude {
        managedObject.cocoaArrowMagnitude_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cocoaShiftArrowMagnitude' transient property
  //····················································································································

  private var mObserversOf_cocoaShiftArrowMagnitude = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cocoaShiftArrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_cocoaShiftArrowMagnitude.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cocoaShiftArrowMagnitude_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cocoaShiftArrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_cocoaShiftArrowMagnitude.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cocoaShiftArrowMagnitude_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cocoaShiftArrowMagnitude_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_cocoaShiftArrowMagnitude {
        managedObject.cocoaShiftArrowMagnitude_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cocoaShiftArrowMagnitude_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_cocoaShiftArrowMagnitude {
        managedObject.cocoaShiftArrowMagnitude_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelNames' transient property
  //····················································································································

  private var mObserversOf_modelNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelNames_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelNames {
        managedObject.modelNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelNames_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelNames {
        managedObject.modelNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardRect' transient property
  //····················································································································

  private var mObserversOf_boardRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardRect_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardRect {
        managedObject.boardRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardRect_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardRect {
        managedObject.boardRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardDisplayRect' transient property
  //····················································································································

  private var mObserversOf_boardDisplayRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardDisplayRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardDisplayRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardDisplayRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardDisplayRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardDisplayRect_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardDisplayRect {
        managedObject.boardDisplayRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardDisplayRect_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardDisplayRect {
        managedObject.boardDisplayRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidth' transient property
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidth {
        managedObject.boardWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidth {
        managedObject.boardWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeight' transient property
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeight_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeight {
        managedObject.boardHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeight_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeight {
        managedObject.boardHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardOutlineRectDisplay' transient property
  //····················································································································

  private var mObserversOf_boardOutlineRectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardOutlineRectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardOutlineRectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardOutlineRectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardOutlineRectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardOutlineRectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardOutlineRectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardOutlineRectDisplay_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardOutlineRectDisplay {
        managedObject.boardOutlineRectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardOutlineRectDisplay_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardOutlineRectDisplay {
        managedObject.boardOutlineRectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MergerRoot : ReadOnlyArrayOf_MergerRoot {

  var readModelFunction : Optional<() -> EBSelection < [MergerRoot] > >

  //····················································································································

   private var prop_cache : EBSelection < [MergerRoot] >? 

  //····················································································································

  override var propval : [MergerRoot] {
    if let value = prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <MergerRoot> ()

  override var prop : EBSelection < [MergerRoot] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <MergerRoot>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <MergerRoot> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_selectedPageIndex_fromElementsOfSet (removedSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedSet)
        removeEBObserversOf_automaticBoardSize_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardManualWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardManualHeight_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeightUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_overlapingArrangment_fromElementsOfSet (removedSet)
        removeEBObserversOf_selectedBoardXUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_selectedBoardYUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_arrowMagnitude_fromElementsOfSet (removedSet)
        removeEBObserversOf_arrowMagnitudeUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_shiftArrowMagnitude_fromElementsOfSet (removedSet)
        removeEBObserversOf_shiftArrowMagnitudeUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_artworkName_fromElementsOfSet (removedSet)
        removeEBObserversOf_generateGerberProductFile_fromElementsOfSet (removedSet)
        removeEBObserversOf_generatePDFProductFile_fromElementsOfSet (removedSet)
        removeEBObserversOf_generatedBoardArchiveFormat_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_cocoaArrowMagnitude_fromElementsOfSet (removedSet)
        removeEBObserversOf_cocoaShiftArrowMagnitude_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelNames_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardRect_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardDisplayRect_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeight_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardOutlineRectDisplay_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_selectedPageIndex_toElementsOfSet (addedSet)
        addEBObserversOf_zoom_toElementsOfSet (addedSet)
        addEBObserversOf_automaticBoardSize_toElementsOfSet (addedSet)
        addEBObserversOf_boardManualWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardManualHeight_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeightUnit_toElementsOfSet (addedSet)
        addEBObserversOf_overlapingArrangment_toElementsOfSet (addedSet)
        addEBObserversOf_selectedBoardXUnit_toElementsOfSet (addedSet)
        addEBObserversOf_selectedBoardYUnit_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_arrowMagnitude_toElementsOfSet (addedSet)
        addEBObserversOf_arrowMagnitudeUnit_toElementsOfSet (addedSet)
        addEBObserversOf_shiftArrowMagnitude_toElementsOfSet (addedSet)
        addEBObserversOf_shiftArrowMagnitudeUnit_toElementsOfSet (addedSet)
        addEBObserversOf_artworkName_toElementsOfSet (addedSet)
        addEBObserversOf_generateGerberProductFile_toElementsOfSet (addedSet)
        addEBObserversOf_generatePDFProductFile_toElementsOfSet (addedSet)
        addEBObserversOf_generatedBoardArchiveFormat_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_cocoaArrowMagnitude_toElementsOfSet (addedSet)
        addEBObserversOf_cocoaShiftArrowMagnitude_toElementsOfSet (addedSet)
        addEBObserversOf_modelNames_toElementsOfSet (addedSet)
        addEBObserversOf_boardRect_toElementsOfSet (addedSet)
        addEBObserversOf_boardDisplayRect_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeight_toElementsOfSet (addedSet)
        addEBObserversOf_boardOutlineRectDisplay_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_MergerRoot : ReadOnlyArrayOf_MergerRoot {

  //····················································································································
 
  func setProp (_ value :  [MergerRoot]) { } // Abstract method
 
  // var propval : [MergerRoot] { return [] } // Abstract method
 
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_MergerRoot : ReadWriteArrayOf_MergerRoot, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : MergerRoot?) -> Void > = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <MergerRoot> ()
  private var mValue = [MergerRoot] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
        removeEBObserversOf_selectedPageIndex_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_automaticBoardSize_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardManualWidth_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardManualHeight_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardWidthUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardHeightUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_overlapingArrangment_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_selectedBoardXUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_selectedBoardYUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_arrowMagnitude_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_arrowMagnitudeUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_shiftArrowMagnitude_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_shiftArrowMagnitudeUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_artworkName_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_generateGerberProductFile_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_generatePDFProductFile_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_generatedBoardArchiveFormat_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_cocoaArrowMagnitude_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_cocoaShiftArrowMagnitude_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelNames_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardRect_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardDisplayRect_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardWidth_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardHeight_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardOutlineRectDisplay_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : MergerRoot in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
        addEBObserversOf_selectedPageIndex_toElementsOfSet (addedObjectSet)
        addEBObserversOf_zoom_toElementsOfSet (addedObjectSet)
        addEBObserversOf_automaticBoardSize_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardManualWidth_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardManualHeight_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardWidthUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardHeightUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_overlapingArrangment_toElementsOfSet (addedObjectSet)
        addEBObserversOf_selectedBoardXUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_selectedBoardYUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitWidth_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_arrowMagnitude_toElementsOfSet (addedObjectSet)
        addEBObserversOf_arrowMagnitudeUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_shiftArrowMagnitude_toElementsOfSet (addedObjectSet)
        addEBObserversOf_shiftArrowMagnitudeUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_artworkName_toElementsOfSet (addedObjectSet)
        addEBObserversOf_generateGerberProductFile_toElementsOfSet (addedObjectSet)
        addEBObserversOf_generatePDFProductFile_toElementsOfSet (addedObjectSet)
        addEBObserversOf_generatedBoardArchiveFormat_toElementsOfSet (addedObjectSet)
        addEBObserversOf_cocoaArrowMagnitude_toElementsOfSet (addedObjectSet)
        addEBObserversOf_cocoaShiftArrowMagnitude_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelNames_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardRect_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardDisplayRect_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardWidth_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardHeight_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardOutlineRectDisplay_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [MergerRoot] > { return .single (mValue) }

  override func setProp (_ inValue : [MergerRoot]) { mValue = inValue }

  override var propval : [MergerRoot] { return mValue }

  //····················································································································

  @objc func performUndo (_ oldValue : [MergerRoot]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MergerRoot) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : MergerRoot) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: artwork
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_MergerRoot_artwork : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : MergerRoot? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : ArtworkRoot? { // SOULD BE WEAK
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
      //--- Remove property observers of old object
        oldValue?.comments_property.removeEBObserversFrom (mObserversOf_comments)
        oldValue?.drillDataFileExtension_property.removeEBObserversFrom (mObserversOf_drillDataFileExtension)
        oldValue?.minPPTPTTTW_property.removeEBObserversFrom (mObserversOf_minPPTPTTTW)
        oldValue?.minPPTPTTTWdisplayUnit_property.removeEBObserversFrom (mObserversOf_minPPTPTTTWdisplayUnit)
        oldValue?.minValueForBoardLimitWidth_property.removeEBObserversFrom (mObserversOf_minValueForBoardLimitWidth)
        oldValue?.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserversFrom (mObserversOf_minValueForBoardLimitWidthDisplayUnit)
        oldValue?.minValueForOARdisplayUnit_property.removeEBObserversFrom (mObserversOf_minValueForOARdisplayUnit)
        oldValue?.minValueForOARinEBUnit_property.removeEBObserversFrom (mObserversOf_minValueForOARinEBUnit)
        oldValue?.minValueForPHDdisplayUnit_property.removeEBObserversFrom (mObserversOf_minValueForPHDdisplayUnit)
        oldValue?.minValueForPHDinEBUnit_property.removeEBObserversFrom (mObserversOf_minValueForPHDinEBUnit)
        oldValue?.selectedTab_property.removeEBObserversFrom (mObserversOf_selectedTab)
      //--- Add property observers to new object
        mValue?.comments_property.addEBObserversFrom (mObserversOf_comments)
        mValue?.drillDataFileExtension_property.addEBObserversFrom (mObserversOf_drillDataFileExtension)
        mValue?.minPPTPTTTW_property.addEBObserversFrom (mObserversOf_minPPTPTTTW)
        mValue?.minPPTPTTTWdisplayUnit_property.addEBObserversFrom (mObserversOf_minPPTPTTTWdisplayUnit)
        mValue?.minValueForBoardLimitWidth_property.addEBObserversFrom (mObserversOf_minValueForBoardLimitWidth)
        mValue?.minValueForBoardLimitWidthDisplayUnit_property.addEBObserversFrom (mObserversOf_minValueForBoardLimitWidthDisplayUnit)
        mValue?.minValueForOARdisplayUnit_property.addEBObserversFrom (mObserversOf_minValueForOARdisplayUnit)
        mValue?.minValueForOARinEBUnit_property.addEBObserversFrom (mObserversOf_minValueForOARinEBUnit)
        mValue?.minValueForPHDdisplayUnit_property.addEBObserversFrom (mObserversOf_minValueForPHDdisplayUnit)
        mValue?.minValueForPHDinEBUnit_property.addEBObserversFrom (mObserversOf_minValueForPHDinEBUnit)
        mValue?.selectedTab_property.addEBObserversFrom (mObserversOf_selectedTab)
       //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : ArtworkRoot? { get { return mValue } }

  var prop : EBSelection <ArtworkRoot?> { get { return .single (mValue) } }

  func setProp (_ value : ArtworkRoot?) { mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : ArtworkRoot?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ArtworkRoot) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : ArtworkRoot) {
    mValue = object
  }

  //····················································································································
  //   Observable property: comments
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  var comments_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.comments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    mObserversOf_comments.insert (inObserver)
    if let object = self.propval {
      object.comments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    mObserversOf_comments.remove (inObserver)
    if let object = self.propval {
      object.comments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: drillDataFileExtension
  //····················································································································

  private var mObserversOf_drillDataFileExtension = EBWeakEventSet ()

  //····················································································································

  var drillDataFileExtension_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.drillDataFileExtension_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    mObserversOf_drillDataFileExtension.insert (inObserver)
    if let object = self.propval {
      object.drillDataFileExtension_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    mObserversOf_drillDataFileExtension.remove (inObserver)
    if let object = self.propval {
      object.drillDataFileExtension_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minPPTPTTTW
  //····················································································································

  private var mObserversOf_minPPTPTTTW = EBWeakEventSet ()

  //····················································································································

  var minPPTPTTTW_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minPPTPTTTW_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    mObserversOf_minPPTPTTTW.insert (inObserver)
    if let object = self.propval {
      object.minPPTPTTTW_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    mObserversOf_minPPTPTTTW.remove (inObserver)
    if let object = self.propval {
      object.minPPTPTTTW_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minPPTPTTTWdisplayUnit
  //····················································································································

  private var mObserversOf_minPPTPTTTWdisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minPPTPTTTWdisplayUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minPPTPTTTWdisplayUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minPPTPTTTWdisplayUnit.insert (inObserver)
    if let object = self.propval {
      object.minPPTPTTTWdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minPPTPTTTWdisplayUnit.remove (inObserver)
    if let object = self.propval {
      object.minPPTPTTTWdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minValueForBoardLimitWidth
  //····················································································································

  private var mObserversOf_minValueForBoardLimitWidth = EBWeakEventSet ()

  //····················································································································

  var minValueForBoardLimitWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minValueForBoardLimitWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_minValueForBoardLimitWidth.insert (inObserver)
    if let object = self.propval {
      object.minValueForBoardLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_minValueForBoardLimitWidth.remove (inObserver)
    if let object = self.propval {
      object.minValueForBoardLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minValueForBoardLimitWidthDisplayUnit
  //····················································································································

  private var mObserversOf_minValueForBoardLimitWidthDisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForBoardLimitWidthDisplayUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minValueForBoardLimitWidthDisplayUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForBoardLimitWidthDisplayUnit.insert (inObserver)
    if let object = self.propval {
      object.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForBoardLimitWidthDisplayUnit.remove (inObserver)
    if let object = self.propval {
      object.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minValueForOARdisplayUnit
  //····················································································································

  private var mObserversOf_minValueForOARdisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForOARdisplayUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minValueForOARdisplayUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForOARdisplayUnit.insert (inObserver)
    if let object = self.propval {
      object.minValueForOARdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForOARdisplayUnit.remove (inObserver)
    if let object = self.propval {
      object.minValueForOARdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minValueForOARinEBUnit
  //····················································································································

  private var mObserversOf_minValueForOARinEBUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForOARinEBUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minValueForOARinEBUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForOARinEBUnit.insert (inObserver)
    if let object = self.propval {
      object.minValueForOARinEBUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForOARinEBUnit.remove (inObserver)
    if let object = self.propval {
      object.minValueForOARinEBUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minValueForPHDdisplayUnit
  //····················································································································

  private var mObserversOf_minValueForPHDdisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForPHDdisplayUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minValueForPHDdisplayUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForPHDdisplayUnit.insert (inObserver)
    if let object = self.propval {
      object.minValueForPHDdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForPHDdisplayUnit.remove (inObserver)
    if let object = self.propval {
      object.minValueForPHDdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minValueForPHDinEBUnit
  //····················································································································

  private var mObserversOf_minValueForPHDinEBUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForPHDinEBUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minValueForPHDinEBUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForPHDinEBUnit.insert (inObserver)
    if let object = self.propval {
      object.minValueForPHDinEBUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForPHDinEBUnit.remove (inObserver)
    if let object = self.propval {
      object.minValueForPHDinEBUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedTab
  //····················································································································

  private var mObserversOf_selectedTab = EBWeakEventSet ()

  //····················································································································

  var selectedTab_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.selectedTab_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    mObserversOf_selectedTab.insert (inObserver)
    if let object = self.propval {
      object.selectedTab_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    mObserversOf_selectedTab.remove (inObserver)
    if let object = self.propval {
      object.selectedTab_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
