//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MergerRoot : EBManagedObject,
  MergerRoot_selectedPageIndex,
  MergerRoot_zoom,
  MergerRoot_boardWidthUnit,
  MergerRoot_boardHeightUnit,
  MergerRoot_overlapingArrangment,
  MergerRoot_boardLimitWidth,
  MergerRoot_boardLimitWidthUnit,
  MergerRoot_artworkName,
  MergerRoot_generateGerberProductFile,
  MergerRoot_generatePDFProductFile,
  MergerRoot_generatedBoardArchiveFormat,
  MergerRoot_modelNames,
  MergerRoot_instancesLayerDisplay,
  MergerRoot_boardRect,
  MergerRoot_boardWidth,
  MergerRoot_boardHeight,
  MergerRoot_boardLimitsLayerDisplay {

  //····················································································································
  //   Accessing selectedPageIndex stored property
  //····················································································································

  var selectedPageIndex : Int {
    get {
      return self.selectedPageIndex_property.propval
    }
    set {
      self.selectedPageIndex_property.setProp (newValue)
    }
  }

  var selectedPageIndex_property_selection : EBSelection <Int> {
    get {
      return self.selectedPageIndex_property.prop
    }
  }

  //····················································································································
  //   Accessing zoom stored property
  //····················································································································

  var zoom : Int {
    get {
      return self.zoom_property.propval
    }
    set {
      self.zoom_property.setProp (newValue)
    }
  }

  var zoom_property_selection : EBSelection <Int> {
    get {
      return self.zoom_property.prop
    }
  }

  //····················································································································
  //   Accessing boardWidthUnit stored property
  //····················································································································

  var boardWidthUnit : Int {
    get {
      return self.boardWidthUnit_property.propval
    }
    set {
      self.boardWidthUnit_property.setProp (newValue)
    }
  }

  var boardWidthUnit_property_selection : EBSelection <Int> {
    get {
      return self.boardWidthUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing boardHeightUnit stored property
  //····················································································································

  var boardHeightUnit : Int {
    get {
      return self.boardHeightUnit_property.propval
    }
    set {
      self.boardHeightUnit_property.setProp (newValue)
    }
  }

  var boardHeightUnit_property_selection : EBSelection <Int> {
    get {
      return self.boardHeightUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing overlapingArrangment stored property
  //····················································································································

  var overlapingArrangment : Bool {
    get {
      return self.overlapingArrangment_property.propval
    }
    set {
      self.overlapingArrangment_property.setProp (newValue)
    }
  }

  var overlapingArrangment_property_selection : EBSelection <Bool> {
    get {
      return self.overlapingArrangment_property.prop
    }
  }

  //····················································································································
  //   Accessing boardLimitWidth stored property
  //····················································································································

  var boardLimitWidth : Int {
    get {
      return self.boardLimitWidth_property.propval
    }
    set {
      self.boardLimitWidth_property.setProp (newValue)
    }
  }

  var boardLimitWidth_property_selection : EBSelection <Int> {
    get {
      return self.boardLimitWidth_property.prop
    }
  }

  //····················································································································
  //   Accessing boardLimitWidthUnit stored property
  //····················································································································

  var boardLimitWidthUnit : Int {
    get {
      return self.boardLimitWidthUnit_property.propval
    }
    set {
      self.boardLimitWidthUnit_property.setProp (newValue)
    }
  }

  var boardLimitWidthUnit_property_selection : EBSelection <Int> {
    get {
      return self.boardLimitWidthUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing artworkName stored property
  //····················································································································

  var artworkName : String {
    get {
      return self.artworkName_property.propval
    }
    set {
      self.artworkName_property.setProp (newValue)
    }
  }

  var artworkName_property_selection : EBSelection <String> {
    get {
      return self.artworkName_property.prop
    }
  }

  //····················································································································
  //   Accessing generateGerberProductFile stored property
  //····················································································································

  var generateGerberProductFile : Bool {
    get {
      return self.generateGerberProductFile_property.propval
    }
    set {
      self.generateGerberProductFile_property.setProp (newValue)
    }
  }

  var generateGerberProductFile_property_selection : EBSelection <Bool> {
    get {
      return self.generateGerberProductFile_property.prop
    }
  }

  //····················································································································
  //   Accessing generatePDFProductFile stored property
  //····················································································································

  var generatePDFProductFile : Bool {
    get {
      return self.generatePDFProductFile_property.propval
    }
    set {
      self.generatePDFProductFile_property.setProp (newValue)
    }
  }

  var generatePDFProductFile_property_selection : EBSelection <Bool> {
    get {
      return self.generatePDFProductFile_property.prop
    }
  }

  //····················································································································
  //   Accessing generatedBoardArchiveFormat stored property
  //····················································································································

  var generatedBoardArchiveFormat : BoardArchiveFormat {
    get {
      return self.generatedBoardArchiveFormat_property.propval
    }
    set {
      self.generatedBoardArchiveFormat_property.setProp (newValue)
    }
  }

  var generatedBoardArchiveFormat_property_selection : EBSelection <BoardArchiveFormat> {
    get {
      return self.generatedBoardArchiveFormat_property.prop
    }
  }

  //····················································································································
  //   Accessing modelNames transient property
  //····················································································································

  var modelNames_property_selection : EBSelection <MergerBoardModelArray> {
    get {
      return self.modelNames_property.prop
    }
  }

  var modelNames : MergerBoardModelArray? {
    switch modelNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing instancesLayerDisplay transient property
  //····················································································································

  var instancesLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.instancesLayerDisplay_property.prop
    }
  }

  var instancesLayerDisplay : CALayer? {
    switch instancesLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing boardRect transient property
  //····················································································································

  var boardRect_property_selection : EBSelection <CanariBoardRect> {
    get {
      return self.boardRect_property.prop
    }
  }

  var boardRect : CanariBoardRect? {
    switch boardRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing boardWidth transient property
  //····················································································································

  var boardWidth_property_selection : EBSelection <Int> {
    get {
      return self.boardWidth_property.prop
    }
  }

  var boardWidth : Int? {
    switch boardWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing boardHeight transient property
  //····················································································································

  var boardHeight_property_selection : EBSelection <Int> {
    get {
      return self.boardHeight_property.prop
    }
  }

  var boardHeight : Int? {
    switch boardHeight_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing boardLimitsLayerDisplay transient property
  //····················································································································

  var boardLimitsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.boardLimitsLayerDisplay_property.prop
    }
  }

  var boardLimitsLayerDisplay : CALayer? {
    switch boardLimitsLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing boardModels toMany relationship
  //····················································································································

  var boardModels_property_selection : EBSelection < [BoardModel] > {
    get {
      return self.boardModels_property.prop
    }
  }

  //····················································································································
  //   Accessing boardInstances toMany relationship
  //····················································································································

  var boardInstances_property_selection : EBSelection < [MergerBoardInstance] > {
    get {
      return self.boardInstances_property.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var selectedPageIndex_property = EBStoredProperty_Int (0)
  var zoom_property = EBStoredProperty_Int (100)
  var boardWidthUnit_property = EBStoredProperty_Int (90000)
  var boardHeightUnit_property = EBStoredProperty_Int (90000)
  var overlapingArrangment_property = EBStoredProperty_Bool (false)
  var boardLimitWidth_property = EBStoredProperty_Int (90000)
  var boardLimitWidthUnit_property = EBStoredProperty_Int (90000)
  var artworkName_property = EBStoredProperty_String ("")
  var generateGerberProductFile_property = EBStoredProperty_Bool (true)
  var generatePDFProductFile_property = EBStoredProperty_Bool (true)
  var generatedBoardArchiveFormat_property = EBStoredProperty_BoardArchiveFormat (BoardArchiveFormat.noGeneration)

  //····················································································································
  //    Transient properties
  //····················································································································

  var modelNames_property = EBTransientProperty_MergerBoardModelArray ()
  var instancesLayerDisplay_property = EBTransientProperty_CALayer ()
  var boardRect_property = EBTransientProperty_CanariBoardRect ()
  var boardWidth_property = EBTransientProperty_Int ()
  var boardHeight_property = EBTransientProperty_Int ()
  var boardLimitsLayerDisplay_property = EBTransientProperty_CALayer ()

  //····················································································································
  //    Relationships
  //····················································································································

  var boardModels_property = ToManyRelationship_MergerRoot_boardModels ()
  var boardInstances_property = ToManyRelationship_MergerRoot_boardInstances ()
  var artwork_property = ToOneRelationship_MergerRoot_artwork ()
  var artwork_property_selection : EBSelection <Bool> { return .single (self.artwork_property.propval == nil) }

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    self.modelNames_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardModels_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardModels_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MergerRoot_modelNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.instancesLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardLimitsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.boardInstances_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardLimitsLayerDisplay_property_selection, unwSelf.boardInstances_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_MergerRoot_instancesLayerDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardInstances_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardInstances_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MergerRoot_boardRect (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardWidth_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardRect_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardRect_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MergerRoot_boardWidth (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardHeight_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardRect_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardRect_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MergerRoot_boardHeight (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardLimitsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardWidth_property_selection.kind ()
        kind &= unwSelf.boardHeight_property_selection.kind ()
        kind &= unwSelf.boardLimitWidth_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBoardLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBoardLimits_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.boardWidth_property_selection, unwSelf.boardHeight_property_selection, unwSelf.boardLimitWidth_property_selection, g_Preferences!.mergerColorBoardLimits_property_selection, g_Preferences!.mergerBoardViewDisplayBoardLimits_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerRoot_boardLimitsLayerDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--- Install property observers for transients
    self.boardModels_property.addEBObserverOf_name (self.modelNames_property)
    self.boardLimitsLayerDisplay_property.addEBObserver (self.instancesLayerDisplay_property)
    self.boardInstances_property.addEBObserverOf_instanceLayerDisplay (self.instancesLayerDisplay_property)
    self.boardInstances_property.addEBObserverOf_instanceRect (self.boardRect_property)
    self.boardRect_property.addEBObserver (self.boardWidth_property)
    self.boardRect_property.addEBObserver (self.boardHeight_property)
    self.boardWidth_property.addEBObserver (self.boardLimitsLayerDisplay_property)
    self.boardHeight_property.addEBObserver (self.boardLimitsLayerDisplay_property)
    self.boardLimitWidth_property.addEBObserver (self.boardLimitsLayerDisplay_property)
    g_Preferences?.mergerColorBoardLimits_property.addEBObserver (self.boardLimitsLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBoardLimits_property.addEBObserver (self.boardLimitsLayerDisplay_property)
  //--- Install undoers for properties
    self.selectedPageIndex_property.undoManager = undoManager ()
    self.zoom_property.undoManager = undoManager ()
    self.boardWidthUnit_property.undoManager = undoManager ()
    self.boardHeightUnit_property.undoManager = undoManager ()
    self.overlapingArrangment_property.undoManager = undoManager ()
    self.boardLimitWidth_property.undoManager = undoManager ()
    self.boardLimitWidthUnit_property.undoManager = undoManager ()
    self.artworkName_property.undoManager = undoManager ()
    self.generateGerberProductFile_property.undoManager = undoManager ()
    self.generatePDFProductFile_property.undoManager = undoManager ()
    self.generatedBoardArchiveFormat_property.undoManager = undoManager ()
  //--- Install owner for relationships
    self.artwork_property.owner = self
    self.boardModels_property.owner = self
    self.boardInstances_property.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.boardModels_property.removeEBObserverOf_name (self.modelNames_property)
    self.boardLimitsLayerDisplay_property.removeEBObserver (self.instancesLayerDisplay_property)
    self.boardInstances_property.removeEBObserverOf_instanceLayerDisplay (self.instancesLayerDisplay_property)
    self.boardInstances_property.removeEBObserverOf_instanceRect (self.boardRect_property)
    self.boardRect_property.removeEBObserver (self.boardWidth_property)
    self.boardRect_property.removeEBObserver (self.boardHeight_property)
    self.boardWidth_property.removeEBObserver (self.boardLimitsLayerDisplay_property)
    self.boardHeight_property.removeEBObserver (self.boardLimitsLayerDisplay_property)
    self.boardLimitWidth_property.removeEBObserver (self.boardLimitsLayerDisplay_property)
    g_Preferences?.mergerColorBoardLimits_property.removeEBObserver (self.boardLimitsLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBoardLimits_property.removeEBObserver (self.boardLimitsLayerDisplay_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedPageIndex",
      idx:self.selectedPageIndex_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedPageIndex_property.mObserverExplorer,
      valueExplorer:&self.selectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom_property.mObserverExplorer,
      valueExplorer:&self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidthUnit",
      idx:self.boardWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.boardWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeightUnit",
      idx:self.boardHeightUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeightUnit_property.mObserverExplorer,
      valueExplorer:&self.boardHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "overlapingArrangment",
      idx:self.overlapingArrangment_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.overlapingArrangment_property.mObserverExplorer,
      valueExplorer:&self.overlapingArrangment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidth",
      idx:self.boardLimitWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidth_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidthUnit",
      idx:self.boardLimitWidthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "artworkName",
      idx:self.artworkName_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.artworkName_property.mObserverExplorer,
      valueExplorer:&self.artworkName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "generateGerberProductFile",
      idx:self.generateGerberProductFile_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.generateGerberProductFile_property.mObserverExplorer,
      valueExplorer:&self.generateGerberProductFile_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "generatePDFProductFile",
      idx:self.generatePDFProductFile_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.generatePDFProductFile_property.mObserverExplorer,
      valueExplorer:&self.generatePDFProductFile_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "generatedBoardArchiveFormat",
      idx:self.generatedBoardArchiveFormat_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.generatedBoardArchiveFormat_property.mObserverExplorer,
      valueExplorer:&self.generatedBoardArchiveFormat_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "modelNames",
      idx:self.modelNames_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelNames_property.mObserverExplorer,
      valueExplorer:&self.modelNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "instancesLayerDisplay",
      idx:self.instancesLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instancesLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.instancesLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardRect",
      idx:self.boardRect_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardRect_property.mObserverExplorer,
      valueExplorer:&self.boardRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidth",
      idx:self.boardWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidth_property.mObserverExplorer,
      valueExplorer:&self.boardWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeight",
      idx:self.boardHeight_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeight_property.mObserverExplorer,
      valueExplorer:&self.boardHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitsLayerDisplay",
      idx:self.boardLimitsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.boardLimitsLayerDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "boardModels",
      idx:boardModels_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&boardModels_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "boardInstances",
      idx:boardInstances_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&boardInstances_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "artwork",
      idx:self.artwork_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.artwork_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.selectedPageIndex_property.mObserverExplorer = nil
    self.selectedPageIndex_property.mValueExplorer = nil
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
    self.boardWidthUnit_property.mObserverExplorer = nil
    self.boardWidthUnit_property.mValueExplorer = nil
    self.boardHeightUnit_property.mObserverExplorer = nil
    self.boardHeightUnit_property.mValueExplorer = nil
    self.overlapingArrangment_property.mObserverExplorer = nil
    self.overlapingArrangment_property.mValueExplorer = nil
    self.boardLimitWidth_property.mObserverExplorer = nil
    self.boardLimitWidth_property.mValueExplorer = nil
    self.boardLimitWidthUnit_property.mObserverExplorer = nil
    self.boardLimitWidthUnit_property.mValueExplorer = nil
    self.artworkName_property.mObserverExplorer = nil
    self.artworkName_property.mValueExplorer = nil
    self.generateGerberProductFile_property.mObserverExplorer = nil
    self.generateGerberProductFile_property.mValueExplorer = nil
    self.generatePDFProductFile_property.mObserverExplorer = nil
    self.generatePDFProductFile_property.mValueExplorer = nil
    self.generatedBoardArchiveFormat_property.mObserverExplorer = nil
    self.generatedBoardArchiveFormat_property.mValueExplorer = nil
    self.artwork_property.mObserverExplorer = nil
    self.artwork_property.mValueExplorer = nil
    self.boardModels_property.mValueExplorer = nil
    self.boardInstances_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey: "selectedPageIndex")
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey: "zoom")
    self.boardWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "boardWidthUnit")
    self.boardHeightUnit_property.storeIn (dictionary: ioDictionary, forKey: "boardHeightUnit")
    self.overlapingArrangment_property.storeIn (dictionary: ioDictionary, forKey: "overlapingArrangment")
    self.boardLimitWidth_property.storeIn (dictionary: ioDictionary, forKey: "boardLimitWidth")
    self.boardLimitWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "boardLimitWidthUnit")
    self.artworkName_property.storeIn (dictionary: ioDictionary, forKey: "artworkName")
    self.generateGerberProductFile_property.storeIn (dictionary: ioDictionary, forKey: "generateGerberProductFile")
    self.generatePDFProductFile_property.storeIn (dictionary: ioDictionary, forKey: "generatePDFProductFile")
    self.generatedBoardArchiveFormat_property.storeIn (dictionary: ioDictionary, forKey: "generatedBoardArchiveFormat")
    store (managedObjectArray: boardModels_property.propval as NSArray, relationshipName:"boardModels", intoDictionary: ioDictionary) ;
    store (managedObjectArray: boardInstances_property.propval as NSArray, relationshipName:"boardInstances", intoDictionary: ioDictionary) ;
    store (managedObject:self.artwork_property.propval, relationshipName:"artwork", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.selectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"selectedPageIndex")
    self.zoom_property.readFrom (dictionary: inDictionary, forKey:"zoom")
    self.boardWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"boardWidthUnit")
    self.boardHeightUnit_property.readFrom (dictionary: inDictionary, forKey:"boardHeightUnit")
    self.overlapingArrangment_property.readFrom (dictionary: inDictionary, forKey:"overlapingArrangment")
    self.boardLimitWidth_property.readFrom (dictionary: inDictionary, forKey:"boardLimitWidth")
    self.boardLimitWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"boardLimitWidthUnit")
    self.artworkName_property.readFrom (dictionary: inDictionary, forKey:"artworkName")
    self.generateGerberProductFile_property.readFrom (dictionary: inDictionary, forKey:"generateGerberProductFile")
    self.generatePDFProductFile_property.readFrom (dictionary: inDictionary, forKey:"generatePDFProductFile")
    self.generatedBoardArchiveFormat_property.readFrom (dictionary: inDictionary, forKey:"generatedBoardArchiveFormat")
    self.boardModels_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "boardModels",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModel])
    self.boardInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "boardInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [MergerBoardInstance])
    self.artwork_property.setProp (readEntityFromDictionary (
        inRelationshipName: "artwork",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      ) as? ArtworkRoot
    )
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    do{
      let objects = self.boardModels_property.propval
      self.boardModels_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    do{
      let objects = self.boardInstances_property.propval
      self.boardInstances_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    if let object = self.artwork_property.propval {
      self.artwork_property.setProp (nil)
      self.managedObjectContext ()?.internalRemoveManagedObject (object, &ioObjectsToRemove) // Cascade removing from moc
    }
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    self.boardModels_property.setProp ([])
    self.boardInstances_property.setProp ([])
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
    self.artwork_property.setProp (nil)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in self.boardModels_property.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in self.boardInstances_property.propval {
      objects.append (managedObject)
    }
    if let object = self.artwork_property.propval {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MergerRoot : ReadOnlyAbstractArrayProperty <MergerRoot> {

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedPageIndex {
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_selectedPageIndex {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_zoom {
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_zoom {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidthUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidthUnit {
        managedObject.boardWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidthUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_boardWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeightUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeightUnit {
        managedObject.boardHeightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeightUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_boardHeightUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'overlapingArrangment' stored property
  //····················································································································

  private var mObserversOf_overlapingArrangment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_overlapingArrangment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.overlapingArrangment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_overlapingArrangment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.overlapingArrangment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_overlapingArrangment_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_overlapingArrangment {
        managedObject.overlapingArrangment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_overlapingArrangment_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_overlapingArrangment {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.overlapingArrangment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidth {
        managedObject.boardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_boardLimitWidth {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidthUnit {
        managedObject.boardLimitWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_boardLimitWidthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_artworkName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_artworkName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_artworkName {
        managedObject.artworkName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_artworkName {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.artworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generateGerberProductFile' stored property
  //····················································································································

  private var mObserversOf_generateGerberProductFile = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_generateGerberProductFile.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generateGerberProductFile_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_generateGerberProductFile.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generateGerberProductFile_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_generateGerberProductFile_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_generateGerberProductFile {
        managedObject.generateGerberProductFile_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generateGerberProductFile_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_generateGerberProductFile {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generateGerberProductFile_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generatePDFProductFile' stored property
  //····················································································································

  private var mObserversOf_generatePDFProductFile = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_generatePDFProductFile.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generatePDFProductFile_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_generatePDFProductFile.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generatePDFProductFile_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_generatePDFProductFile_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_generatePDFProductFile {
        managedObject.generatePDFProductFile_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generatePDFProductFile_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_generatePDFProductFile {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generatePDFProductFile_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generatedBoardArchiveFormat' stored property
  //····················································································································

  private var mObserversOf_generatedBoardArchiveFormat = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_generatedBoardArchiveFormat.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generatedBoardArchiveFormat_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_generatedBoardArchiveFormat.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generatedBoardArchiveFormat_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_generatedBoardArchiveFormat_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_generatedBoardArchiveFormat {
        managedObject.generatedBoardArchiveFormat_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generatedBoardArchiveFormat_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for observer in mObserversOf_generatedBoardArchiveFormat {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generatedBoardArchiveFormat_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelNames' transient property
  //····················································································································

  private var mObserversOf_modelNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelNames_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelNames {
        managedObject.modelNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelNames_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelNames {
        managedObject.modelNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instancesLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_instancesLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instancesLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instancesLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instancesLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instancesLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instancesLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instancesLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instancesLayerDisplay_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_instancesLayerDisplay {
        managedObject.instancesLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instancesLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_instancesLayerDisplay {
        managedObject.instancesLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardRect' transient property
  //····················································································································

  private var mObserversOf_boardRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardRect_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardRect {
        managedObject.boardRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardRect_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardRect {
        managedObject.boardRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidth' transient property
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidth {
        managedObject.boardWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardWidth {
        managedObject.boardWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeight' transient property
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeight_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeight {
        managedObject.boardHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeight_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardHeight {
        managedObject.boardHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_boardLimitsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitsLayerDisplay_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitsLayerDisplay {
        managedObject.boardLimitsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitsLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitsLayerDisplay {
        managedObject.boardLimitsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MergerRoot : ReadOnlyArrayOf_MergerRoot {

  var readModelFunction : Optional<() -> EBSelection < [MergerRoot] > >

  private var prop_cache : EBSelection < [MergerRoot] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <MergerRoot> ()

  override var prop : EBSelection < [MergerRoot] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <MergerRoot>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <MergerRoot> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_selectedPageIndex_fromElementsOfSet (removedSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeightUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_overlapingArrangment_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_artworkName_fromElementsOfSet (removedSet)
        removeEBObserversOf_generateGerberProductFile_fromElementsOfSet (removedSet)
        removeEBObserversOf_generatePDFProductFile_fromElementsOfSet (removedSet)
        removeEBObserversOf_generatedBoardArchiveFormat_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_modelNames_fromElementsOfSet (removedSet)
        removeEBObserversOf_instancesLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardRect_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardHeight_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitsLayerDisplay_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_selectedPageIndex_toElementsOfSet (addedSet)
        addEBObserversOf_zoom_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeightUnit_toElementsOfSet (addedSet)
        addEBObserversOf_overlapingArrangment_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (addedSet)
        addEBObserversOf_artworkName_toElementsOfSet (addedSet)
        addEBObserversOf_generateGerberProductFile_toElementsOfSet (addedSet)
        addEBObserversOf_generatePDFProductFile_toElementsOfSet (addedSet)
        addEBObserversOf_generatedBoardArchiveFormat_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_modelNames_toElementsOfSet (addedSet)
        addEBObserversOf_instancesLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_boardRect_toElementsOfSet (addedSet)
        addEBObserversOf_boardWidth_toElementsOfSet (addedSet)
        addEBObserversOf_boardHeight_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitsLayerDisplay_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_selectedPageIndex : class {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_zoom : class {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardWidthUnit : class {
  var boardWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardHeightUnit : class {
  var boardHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_overlapingArrangment : class {
  var overlapingArrangment : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardLimitWidth : class {
  var boardLimitWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardLimitWidthUnit : class {
  var boardLimitWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_artworkName : class {
  var artworkName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_generateGerberProductFile : class {
  var generateGerberProductFile : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_generatePDFProductFile : class {
  var generatePDFProductFile : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_generatedBoardArchiveFormat : class {
  var generatedBoardArchiveFormat : BoardArchiveFormat { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_modelNames : class {
  var modelNames : MergerBoardModelArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_instancesLayerDisplay : class {
  var instancesLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardRect : class {
  var boardRect : CanariBoardRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardWidth : class {
  var boardWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardHeight : class {
  var boardHeight : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardLimitsLayerDisplay : class {
  var boardLimitsLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: boardModels
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_MergerRoot_boardModels : ReadOnlyArrayOf_BoardModel {

  //····················································································································
 
  func setProp (_ value :  [BoardModel]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: boardModels
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_MergerRoot_boardModels :
ToManyRelationshipReadWrite_MergerRoot_boardModels, EBSignatureObserverProtocol {
  weak var owner : MergerRoot?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <BoardModel> ()
  private var mValue = [BoardModel] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_artworkName_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentNameDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentNameSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentValueDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentValueSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLayoutTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLayoutTextsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendLinesLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendLinesSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendTextsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPackagesDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPackagesSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPads_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPadsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backTrackSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backTracksDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backgroundLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimits_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentNameDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentValueDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentValueSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLayoutTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLayoutTextsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendLinesLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendLinesSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendTextsSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPackagesDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPackagesSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPads_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPadsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontTrackSegments_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontTracksDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holeLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holes_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_instanceCount_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelHeight_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelHeightUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelLimitWidth_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelLimitWidthUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelWidth_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_modelWidthUnit_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_name_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padsHoles_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viaLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viaShapes_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viasHoles_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_zoom_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModel in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_artworkName_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentNameDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentNameSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentValueDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentValueSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLayoutTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLayoutTextsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendLinesLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendLinesSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendTextsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPackagesDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPackagesSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPads_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPadsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backTrackSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backTracksDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backgroundLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimits_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentNameDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentNameSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentValueDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentValueSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLayoutTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLayoutTextsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendLinesLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendLinesSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendTextsSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPackagesDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPackagesSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPads_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPadsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontTrackSegments_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontTracksDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holeLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holes_toElementsOfSet (addedObjectSet)
        addEBObserversOf_instanceCount_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelHeight_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelHeightUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelLimitWidth_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelLimitWidthUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelWidth_toElementsOfSet (addedObjectSet)
        addEBObserversOf_modelWidthUnit_toElementsOfSet (addedObjectSet)
        addEBObserversOf_name_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padsHoles_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viaLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viaShapes_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viasHoles_toElementsOfSet (addedObjectSet)
        addEBObserversOf_zoom_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [BoardModel] > { return .single (mValue) }

  override func setProp (_ inValue : [BoardModel]) { mValue = inValue }

  var propval : [BoardModel] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [BoardModel]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModel) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModel) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: boardInstances
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_MergerRoot_boardInstances : ReadOnlyArrayOf_MergerBoardInstance {

  //····················································································································
 
  func setProp (_ value :  [MergerBoardInstance]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: boardInstances
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_MergerRoot_boardInstances :
ToManyRelationshipReadWrite_MergerRoot_boardInstances, EBSignatureObserverProtocol {
  weak var owner : MergerRoot?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <MergerBoardInstance> ()
  private var mValue = [MergerBoardInstance] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_backComponentNameDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backComponentValueDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLayoutTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendLinesLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backLegendTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPackagesDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backPadsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backTracksDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_backgroundLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_boardLimitsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentNameDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontComponentValueDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLayoutTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendLinesLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontLegendTextsLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPackagesDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontPadsDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_frontTracksDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holeLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_instanceLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_instanceRect_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_viaLayerDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : MergerBoardInstance in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_backComponentNameDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backComponentValueDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLayoutTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendLinesLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backLegendTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPackagesDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backPadsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backTracksDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_backgroundLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitWidth_toElementsOfSet (addedObjectSet)
        addEBObserversOf_boardLimitsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentNameDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontComponentValueDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLayoutTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendLinesLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontLegendTextsLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPackagesDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontPadsDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_frontTracksDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holeLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_instanceLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_instanceRect_toElementsOfSet (addedObjectSet)
        addEBObserversOf_viaLayerDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [MergerBoardInstance] > { return .single (mValue) }

  override func setProp (_ inValue : [MergerBoardInstance]) { mValue = inValue }

  var propval : [MergerBoardInstance] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [MergerBoardInstance]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MergerBoardInstance) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : MergerBoardInstance) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: artwork
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_MergerRoot_artwork : EBAbstractProperty {
  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : MergerRoot? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : ArtworkRoot? {
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
      //--- Remove property observers of old object
        oldValue?.comments_property.removeEBObserversFrom (mObserversOf_comments)
        oldValue?.drillDataFileExtension_property.removeEBObserversFrom (mObserversOf_drillDataFileExtension)
        oldValue?.drillDataFormat_property.removeEBObserversFrom (mObserversOf_drillDataFormat)
        oldValue?.drillListFileExtension_property.removeEBObserversFrom (mObserversOf_drillListFileExtension)
        oldValue?.drillToolListFileExtension_property.removeEBObserversFrom (mObserversOf_drillToolListFileExtension)
        oldValue?.minPPTPTTTW_property.removeEBObserversFrom (mObserversOf_minPPTPTTTW)
        oldValue?.minPPTPTTTWdisplayUnit_property.removeEBObserversFrom (mObserversOf_minPPTPTTTWdisplayUnit)
        oldValue?.minValueForBoardLimitWidth_property.removeEBObserversFrom (mObserversOf_minValueForBoardLimitWidth)
        oldValue?.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserversFrom (mObserversOf_minValueForBoardLimitWidthDisplayUnit)
        oldValue?.minValueForOARdisplayUnit_property.removeEBObserversFrom (mObserversOf_minValueForOARdisplayUnit)
        oldValue?.minValueForOARinEBUnit_property.removeEBObserversFrom (mObserversOf_minValueForOARinEBUnit)
        oldValue?.minValueForPHDdisplayUnit_property.removeEBObserversFrom (mObserversOf_minValueForPHDdisplayUnit)
        oldValue?.minValueForPHDinEBUnit_property.removeEBObserversFrom (mObserversOf_minValueForPHDinEBUnit)
        oldValue?.selectedTab_property.removeEBObserversFrom (mObserversOf_selectedTab)
      //--- Add property observers to new object
        mValue?.comments_property.addEBObserversFrom (mObserversOf_comments)
        mValue?.drillDataFileExtension_property.addEBObserversFrom (mObserversOf_drillDataFileExtension)
        mValue?.drillDataFormat_property.addEBObserversFrom (mObserversOf_drillDataFormat)
        mValue?.drillListFileExtension_property.addEBObserversFrom (mObserversOf_drillListFileExtension)
        mValue?.drillToolListFileExtension_property.addEBObserversFrom (mObserversOf_drillToolListFileExtension)
        mValue?.minPPTPTTTW_property.addEBObserversFrom (mObserversOf_minPPTPTTTW)
        mValue?.minPPTPTTTWdisplayUnit_property.addEBObserversFrom (mObserversOf_minPPTPTTTWdisplayUnit)
        mValue?.minValueForBoardLimitWidth_property.addEBObserversFrom (mObserversOf_minValueForBoardLimitWidth)
        mValue?.minValueForBoardLimitWidthDisplayUnit_property.addEBObserversFrom (mObserversOf_minValueForBoardLimitWidthDisplayUnit)
        mValue?.minValueForOARdisplayUnit_property.addEBObserversFrom (mObserversOf_minValueForOARdisplayUnit)
        mValue?.minValueForOARinEBUnit_property.addEBObserversFrom (mObserversOf_minValueForOARinEBUnit)
        mValue?.minValueForPHDdisplayUnit_property.addEBObserversFrom (mObserversOf_minValueForPHDdisplayUnit)
        mValue?.minValueForPHDinEBUnit_property.addEBObserversFrom (mObserversOf_minValueForPHDinEBUnit)
        mValue?.selectedTab_property.addEBObserversFrom (mObserversOf_selectedTab)
       //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : ArtworkRoot? { get { return mValue } }

  var prop : EBSelection <ArtworkRoot?> { get { return .single (mValue) } }

  func setProp (_ value : ArtworkRoot?) { mValue = value }

  //····················································································································

  func performUndo (_ oldValue : ArtworkRoot?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ArtworkRoot) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : ArtworkRoot) {
    mValue = object
  }

  //····················································································································
  //   Observable property: comments
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  var comments_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.comments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    mObserversOf_comments.insert (inObserver)
    if let object = self.propval {
      object.comments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    mObserversOf_comments.remove (inObserver)
    if let object = self.propval {
      object.comments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: drillDataFileExtension
  //····················································································································

  private var mObserversOf_drillDataFileExtension = EBWeakEventSet ()

  //····················································································································

  var drillDataFileExtension_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.drillDataFileExtension_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    mObserversOf_drillDataFileExtension.insert (inObserver)
    if let object = self.propval {
      object.drillDataFileExtension_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    mObserversOf_drillDataFileExtension.remove (inObserver)
    if let object = self.propval {
      object.drillDataFileExtension_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: drillDataFormat
  //····················································································································

  private var mObserversOf_drillDataFormat = EBWeakEventSet ()

  //····················································································································

  var drillDataFormat_property_selection : EBSelection <DrillDataFormatEnum?> {
    get {
      if let model = self.propval {
        switch (model.drillDataFormat_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_drillDataFormat (_ inObserver : EBEvent) {
    mObserversOf_drillDataFormat.insert (inObserver)
    if let object = self.propval {
      object.drillDataFormat_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFormat (_ inObserver : EBEvent) {
    mObserversOf_drillDataFormat.remove (inObserver)
    if let object = self.propval {
      object.drillDataFormat_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: drillListFileExtension
  //····················································································································

  private var mObserversOf_drillListFileExtension = EBWeakEventSet ()

  //····················································································································

  var drillListFileExtension_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.drillListFileExtension_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_drillListFileExtension (_ inObserver : EBEvent) {
    mObserversOf_drillListFileExtension.insert (inObserver)
    if let object = self.propval {
      object.drillListFileExtension_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillListFileExtension (_ inObserver : EBEvent) {
    mObserversOf_drillListFileExtension.remove (inObserver)
    if let object = self.propval {
      object.drillListFileExtension_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: drillToolListFileExtension
  //····················································································································

  private var mObserversOf_drillToolListFileExtension = EBWeakEventSet ()

  //····················································································································

  var drillToolListFileExtension_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.drillToolListFileExtension_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_drillToolListFileExtension (_ inObserver : EBEvent) {
    mObserversOf_drillToolListFileExtension.insert (inObserver)
    if let object = self.propval {
      object.drillToolListFileExtension_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillToolListFileExtension (_ inObserver : EBEvent) {
    mObserversOf_drillToolListFileExtension.remove (inObserver)
    if let object = self.propval {
      object.drillToolListFileExtension_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minPPTPTTTW
  //····················································································································

  private var mObserversOf_minPPTPTTTW = EBWeakEventSet ()

  //····················································································································

  var minPPTPTTTW_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minPPTPTTTW_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    mObserversOf_minPPTPTTTW.insert (inObserver)
    if let object = self.propval {
      object.minPPTPTTTW_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    mObserversOf_minPPTPTTTW.remove (inObserver)
    if let object = self.propval {
      object.minPPTPTTTW_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minPPTPTTTWdisplayUnit
  //····················································································································

  private var mObserversOf_minPPTPTTTWdisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minPPTPTTTWdisplayUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minPPTPTTTWdisplayUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minPPTPTTTWdisplayUnit.insert (inObserver)
    if let object = self.propval {
      object.minPPTPTTTWdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minPPTPTTTWdisplayUnit.remove (inObserver)
    if let object = self.propval {
      object.minPPTPTTTWdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minValueForBoardLimitWidth
  //····················································································································

  private var mObserversOf_minValueForBoardLimitWidth = EBWeakEventSet ()

  //····················································································································

  var minValueForBoardLimitWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minValueForBoardLimitWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_minValueForBoardLimitWidth.insert (inObserver)
    if let object = self.propval {
      object.minValueForBoardLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_minValueForBoardLimitWidth.remove (inObserver)
    if let object = self.propval {
      object.minValueForBoardLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minValueForBoardLimitWidthDisplayUnit
  //····················································································································

  private var mObserversOf_minValueForBoardLimitWidthDisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForBoardLimitWidthDisplayUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minValueForBoardLimitWidthDisplayUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForBoardLimitWidthDisplayUnit.insert (inObserver)
    if let object = self.propval {
      object.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForBoardLimitWidthDisplayUnit.remove (inObserver)
    if let object = self.propval {
      object.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minValueForOARdisplayUnit
  //····················································································································

  private var mObserversOf_minValueForOARdisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForOARdisplayUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minValueForOARdisplayUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForOARdisplayUnit.insert (inObserver)
    if let object = self.propval {
      object.minValueForOARdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForOARdisplayUnit.remove (inObserver)
    if let object = self.propval {
      object.minValueForOARdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minValueForOARinEBUnit
  //····················································································································

  private var mObserversOf_minValueForOARinEBUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForOARinEBUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minValueForOARinEBUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForOARinEBUnit.insert (inObserver)
    if let object = self.propval {
      object.minValueForOARinEBUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForOARinEBUnit.remove (inObserver)
    if let object = self.propval {
      object.minValueForOARinEBUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minValueForPHDdisplayUnit
  //····················································································································

  private var mObserversOf_minValueForPHDdisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForPHDdisplayUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minValueForPHDdisplayUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForPHDdisplayUnit.insert (inObserver)
    if let object = self.propval {
      object.minValueForPHDdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForPHDdisplayUnit.remove (inObserver)
    if let object = self.propval {
      object.minValueForPHDdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: minValueForPHDinEBUnit
  //····················································································································

  private var mObserversOf_minValueForPHDinEBUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForPHDinEBUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.minValueForPHDinEBUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForPHDinEBUnit.insert (inObserver)
    if let object = self.propval {
      object.minValueForPHDinEBUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    mObserversOf_minValueForPHDinEBUnit.remove (inObserver)
    if let object = self.propval {
      object.minValueForPHDinEBUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedTab
  //····················································································································

  private var mObserversOf_selectedTab = EBWeakEventSet ()

  //····················································································································

  var selectedTab_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.selectedTab_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    mObserversOf_selectedTab.insert (inObserver)
    if let object = self.propval {
      object.selectedTab_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    mObserversOf_selectedTab.remove (inObserver)
    if let object = self.propval {
      object.selectedTab_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

