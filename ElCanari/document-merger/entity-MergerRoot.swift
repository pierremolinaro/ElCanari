//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_selectedPageIndex : class {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_zoom : class {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_automaticBoardSize : class {
  var automaticBoardSize : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardManualWidth : class {
  var boardManualWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardManualHeight : class {
  var boardManualHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardWidthUnit : class {
  var boardWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardHeightUnit : class {
  var boardHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_overlapingArrangment : class {
  var overlapingArrangment : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_selectedBoardXUnit : class {
  var selectedBoardXUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_selectedBoardYUnit : class {
  var selectedBoardYUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardLimitWidth : class {
  var boardLimitWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardLimitWidthUnit : class {
  var boardLimitWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_arrowMagnitude : class {
  var arrowMagnitude : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_arrowMagnitudeUnit : class {
  var arrowMagnitudeUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_shiftArrowMagnitude : class {
  var shiftArrowMagnitude : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_shiftArrowMagnitudeUnit : class {
  var shiftArrowMagnitudeUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_artworkName : class {
  var artworkName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_generateGerberProductFile : class {
  var generateGerberProductFile : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_generatePDFProductFile : class {
  var generatePDFProductFile : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_generatedBoardArchiveFormat : class {
  var generatedBoardArchiveFormat : BoardArchiveFormat { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_modelNames : class {
  var modelNames : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardRect : class {
  var boardRect : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardDisplayRect : class {
  var boardDisplayRect : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardWidth : class {
  var boardWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardHeight : class {
  var boardHeight : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerRoot_boardOutlineRectDisplay : class {
  var boardOutlineRectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MergerRoot : EBManagedObject,
         MergerRoot_selectedPageIndex,
         MergerRoot_zoom,
         MergerRoot_automaticBoardSize,
         MergerRoot_boardManualWidth,
         MergerRoot_boardManualHeight,
         MergerRoot_boardWidthUnit,
         MergerRoot_boardHeightUnit,
         MergerRoot_overlapingArrangment,
         MergerRoot_selectedBoardXUnit,
         MergerRoot_selectedBoardYUnit,
         MergerRoot_boardLimitWidth,
         MergerRoot_boardLimitWidthUnit,
         MergerRoot_arrowMagnitude,
         MergerRoot_arrowMagnitudeUnit,
         MergerRoot_shiftArrowMagnitude,
         MergerRoot_shiftArrowMagnitudeUnit,
         MergerRoot_artworkName,
         MergerRoot_generateGerberProductFile,
         MergerRoot_generatePDFProductFile,
         MergerRoot_generatedBoardArchiveFormat,
         MergerRoot_modelNames,
         MergerRoot_boardRect,
         MergerRoot_boardDisplayRect,
         MergerRoot_boardWidth,
         MergerRoot_boardHeight,
         MergerRoot_boardOutlineRectDisplay {

  //····················································································································
  //   To many property: boardModels
  //····················································································································

  let boardModels_property = StoredArrayOf_BoardModel ()

  //····················································································································

  var boardModels_property_selection : EBSelection < [BoardModel] > {
    return self.boardModels_property.prop
  }

  //····················································································································

  var boardModels : [BoardModel] {
    get { return self.boardModels_property.propval }
    set { self.boardModels_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: boardInstances
  //····················································································································

  let boardInstances_property = StoredArrayOf_MergerBoardInstance ()

  //····················································································································

  var boardInstances_property_selection : EBSelection < [MergerBoardInstance] > {
    return self.boardInstances_property.prop
  }

  //····················································································································

  var boardInstances : [MergerBoardInstance] {
    get { return self.boardInstances_property.propval }
    set { self.boardInstances_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: selectedPageIndex
  //····················································································································

  let selectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var selectedPageIndex : Int {
    get { return self.selectedPageIndex_property.propval }
    set { self.selectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int> { return self.selectedPageIndex_property.prop }

  //····················································································································
  //   Atomic property: zoom
  //····················································································································

  let zoom_property = EBStoredProperty_Int (defaultValue: 100)

  //····················································································································

  var zoom : Int {
    get { return self.zoom_property.propval }
    set { self.zoom_property.setProp (newValue) }
  }

  //····················································································································

  var zoom_property_selection : EBSelection <Int> { return self.zoom_property.prop }

  //····················································································································
  //   Atomic property: automaticBoardSize
  //····················································································································

  let automaticBoardSize_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var automaticBoardSize : Bool {
    get { return self.automaticBoardSize_property.propval }
    set { self.automaticBoardSize_property.setProp (newValue) }
  }

  //····················································································································

  var automaticBoardSize_property_selection : EBSelection <Bool> { return self.automaticBoardSize_property.prop }

  //····················································································································
  //   Atomic property: boardManualWidth
  //····················································································································

  let boardManualWidth_property = EBStoredProperty_Int (defaultValue: 9000000)

  //····················································································································

  var boardManualWidth : Int {
    get { return self.boardManualWidth_property.propval }
    set { self.boardManualWidth_property.setProp (newValue) }
  }

  //····················································································································

  var boardManualWidth_property_selection : EBSelection <Int> { return self.boardManualWidth_property.prop }

  //····················································································································
  //   Atomic property: boardManualHeight
  //····················································································································

  let boardManualHeight_property = EBStoredProperty_Int (defaultValue: 9000000)

  //····················································································································

  var boardManualHeight : Int {
    get { return self.boardManualHeight_property.propval }
    set { self.boardManualHeight_property.setProp (newValue) }
  }

  //····················································································································

  var boardManualHeight_property_selection : EBSelection <Int> { return self.boardManualHeight_property.prop }

  //····················································································································
  //   Atomic property: boardWidthUnit
  //····················································································································

  let boardWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var boardWidthUnit : Int {
    get { return self.boardWidthUnit_property.propval }
    set { self.boardWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var boardWidthUnit_property_selection : EBSelection <Int> { return self.boardWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: boardHeightUnit
  //····················································································································

  let boardHeightUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var boardHeightUnit : Int {
    get { return self.boardHeightUnit_property.propval }
    set { self.boardHeightUnit_property.setProp (newValue) }
  }

  //····················································································································

  var boardHeightUnit_property_selection : EBSelection <Int> { return self.boardHeightUnit_property.prop }

  //····················································································································
  //   Atomic property: overlapingArrangment
  //····················································································································

  let overlapingArrangment_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var overlapingArrangment : Bool {
    get { return self.overlapingArrangment_property.propval }
    set { self.overlapingArrangment_property.setProp (newValue) }
  }

  //····················································································································

  var overlapingArrangment_property_selection : EBSelection <Bool> { return self.overlapingArrangment_property.prop }

  //····················································································································
  //   Atomic property: selectedBoardXUnit
  //····················································································································

  let selectedBoardXUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var selectedBoardXUnit : Int {
    get { return self.selectedBoardXUnit_property.propval }
    set { self.selectedBoardXUnit_property.setProp (newValue) }
  }

  //····················································································································

  var selectedBoardXUnit_property_selection : EBSelection <Int> { return self.selectedBoardXUnit_property.prop }

  //····················································································································
  //   Atomic property: selectedBoardYUnit
  //····················································································································

  let selectedBoardYUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var selectedBoardYUnit : Int {
    get { return self.selectedBoardYUnit_property.propval }
    set { self.selectedBoardYUnit_property.setProp (newValue) }
  }

  //····················································································································

  var selectedBoardYUnit_property_selection : EBSelection <Int> { return self.selectedBoardYUnit_property.prop }

  //····················································································································
  //   Atomic property: boardLimitWidth
  //····················································································································

  let boardLimitWidth_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var boardLimitWidth : Int {
    get { return self.boardLimitWidth_property.propval }
    set { self.boardLimitWidth_property.setProp (newValue) }
  }

  //····················································································································

  var boardLimitWidth_property_selection : EBSelection <Int> { return self.boardLimitWidth_property.prop }

  //····················································································································
  //   Atomic property: boardLimitWidthUnit
  //····················································································································

  let boardLimitWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var boardLimitWidthUnit : Int {
    get { return self.boardLimitWidthUnit_property.propval }
    set { self.boardLimitWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var boardLimitWidthUnit_property_selection : EBSelection <Int> { return self.boardLimitWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: arrowMagnitude
  //····················································································································

  let arrowMagnitude_property = EBStoredProperty_Int (defaultValue: 900000)

  //····················································································································

  var arrowMagnitude : Int {
    get { return self.arrowMagnitude_property.propval }
    set { self.arrowMagnitude_property.setProp (newValue) }
  }

  //····················································································································

  var arrowMagnitude_property_selection : EBSelection <Int> { return self.arrowMagnitude_property.prop }

  //····················································································································
  //   Atomic property: arrowMagnitudeUnit
  //····················································································································

  let arrowMagnitudeUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var arrowMagnitudeUnit : Int {
    get { return self.arrowMagnitudeUnit_property.propval }
    set { self.arrowMagnitudeUnit_property.setProp (newValue) }
  }

  //····················································································································

  var arrowMagnitudeUnit_property_selection : EBSelection <Int> { return self.arrowMagnitudeUnit_property.prop }

  //····················································································································
  //   Atomic property: shiftArrowMagnitude
  //····················································································································

  let shiftArrowMagnitude_property = EBStoredProperty_Int (defaultValue: 3600000)

  //····················································································································

  var shiftArrowMagnitude : Int {
    get { return self.shiftArrowMagnitude_property.propval }
    set { self.shiftArrowMagnitude_property.setProp (newValue) }
  }

  //····················································································································

  var shiftArrowMagnitude_property_selection : EBSelection <Int> { return self.shiftArrowMagnitude_property.prop }

  //····················································································································
  //   Atomic property: shiftArrowMagnitudeUnit
  //····················································································································

  let shiftArrowMagnitudeUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var shiftArrowMagnitudeUnit : Int {
    get { return self.shiftArrowMagnitudeUnit_property.propval }
    set { self.shiftArrowMagnitudeUnit_property.setProp (newValue) }
  }

  //····················································································································

  var shiftArrowMagnitudeUnit_property_selection : EBSelection <Int> { return self.shiftArrowMagnitudeUnit_property.prop }

  //····················································································································
  //   Atomic property: artworkName
  //····················································································································

  let artworkName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var artworkName : String {
    get { return self.artworkName_property.propval }
    set { self.artworkName_property.setProp (newValue) }
  }

  //····················································································································

  var artworkName_property_selection : EBSelection <String> { return self.artworkName_property.prop }

  //····················································································································
  //   Atomic property: generateGerberProductFile
  //····················································································································

  let generateGerberProductFile_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var generateGerberProductFile : Bool {
    get { return self.generateGerberProductFile_property.propval }
    set { self.generateGerberProductFile_property.setProp (newValue) }
  }

  //····················································································································

  var generateGerberProductFile_property_selection : EBSelection <Bool> { return self.generateGerberProductFile_property.prop }

  //····················································································································
  //   Atomic property: generatePDFProductFile
  //····················································································································

  let generatePDFProductFile_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var generatePDFProductFile : Bool {
    get { return self.generatePDFProductFile_property.propval }
    set { self.generatePDFProductFile_property.setProp (newValue) }
  }

  //····················································································································

  var generatePDFProductFile_property_selection : EBSelection <Bool> { return self.generatePDFProductFile_property.prop }

  //····················································································································
  //   Atomic property: generatedBoardArchiveFormat
  //····················································································································

  let generatedBoardArchiveFormat_property = EBStoredProperty_BoardArchiveFormat (defaultValue: BoardArchiveFormat.noGeneration)

  //····················································································································

  var generatedBoardArchiveFormat : BoardArchiveFormat {
    get { return self.generatedBoardArchiveFormat_property.propval }
    set { self.generatedBoardArchiveFormat_property.setProp (newValue) }
  }

  //····················································································································

  var generatedBoardArchiveFormat_property_selection : EBSelection <BoardArchiveFormat> { return self.generatedBoardArchiveFormat_property.prop }

  //····················································································································
  //   Transient property: modelNames
  //····················································································································

  let modelNames_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  var modelNames_property_selection : EBSelection <StringTagArray> {
    return self.modelNames_property.prop
  }

  //····················································································································

  var modelNames : StringTagArray? {
    switch self.modelNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardRect
  //····················································································································

  let boardRect_property = EBTransientProperty_CanariRect ()

  //····················································································································

  var boardRect_property_selection : EBSelection <CanariRect> {
    return self.boardRect_property.prop
  }

  //····················································································································

  var boardRect : CanariRect? {
    switch self.boardRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardDisplayRect
  //····················································································································

  let boardDisplayRect_property = EBTransientProperty_CanariRect ()

  //····················································································································

  var boardDisplayRect_property_selection : EBSelection <CanariRect> {
    return self.boardDisplayRect_property.prop
  }

  //····················································································································

  var boardDisplayRect : CanariRect? {
    switch self.boardDisplayRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardWidth
  //····················································································································

  let boardWidth_property = EBTransientProperty_Int ()

  //····················································································································

  var boardWidth_property_selection : EBSelection <Int> {
    return self.boardWidth_property.prop
  }

  //····················································································································

  var boardWidth : Int? {
    switch self.boardWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardHeight
  //····················································································································

  let boardHeight_property = EBTransientProperty_Int ()

  //····················································································································

  var boardHeight_property_selection : EBSelection <Int> {
    return self.boardHeight_property.prop
  }

  //····················································································································

  var boardHeight : Int? {
    switch self.boardHeight_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: artwork
  //····················································································································

  //  #if NEWTOONE
     let artwork_property = StoredObject_ArtworkRoot ()
  //  #else
  //    let artwork_property = ToOneRelationship_MergerRoot_artwork ()
  //  #endif

  //····················································································································

  var artwork_property_selection : EBSelection <ArtworkRoot?> {
    return .single (self.artwork_property.propval)
  }

  //····················································································································

  var artwork : ArtworkRoot? {
    get { return self.artwork_property.propval }
    set { self.artwork_property.setProp (newValue) }
  }

  //····················································································································

  //  #if NEWTOONE
      var artwork_none : StoredObject_ArtworkRoot { return self.artwork_property }
  //  #else
  //    var artwork_none : ToOneRelationship_MergerRoot_artwork { return self.artwork_property }
  //  #endif

  //····················································································································

  var artwork_none_selection : EBSelection <Bool> {
    return .single (self.artwork_property.propval == nil)
  }

  //····················································································································
  //   Transient property: boardOutlineRectDisplay
  //····················································································································

  let boardOutlineRectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var boardOutlineRectDisplay_property_selection : EBSelection <EBShape> {
    return self.boardOutlineRectDisplay_property.prop
  }

  //····················································································································

  var boardOutlineRectDisplay : EBShape? {
    switch self.boardOutlineRectDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- To many property: boardModels (no option)
    self.boardModels_property.ebUndoManager = self.ebUndoManager
  //--- To many property: boardInstances (has opposite relationship)
    self.boardInstances_property.ebUndoManager = self.ebUndoManager
    self.boardInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.myRoot_property.setProp (me) } },
      resetter: { inObject in inObject.myRoot_property.setProp (nil) }
    )
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: zoom
    self.zoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: automaticBoardSize
    self.automaticBoardSize_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardManualWidth
    self.boardManualWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardManualHeight
    self.boardManualHeight_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardWidthUnit
    self.boardWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardHeightUnit
    self.boardHeightUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: overlapingArrangment
    self.overlapingArrangment_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectedBoardXUnit
    self.selectedBoardXUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectedBoardYUnit
    self.selectedBoardYUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardLimitWidthUnit
    self.boardLimitWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: arrowMagnitude
    self.arrowMagnitude_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: arrowMagnitudeUnit
    self.arrowMagnitudeUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: shiftArrowMagnitude
    self.shiftArrowMagnitude_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: shiftArrowMagnitudeUnit
    self.shiftArrowMagnitudeUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: artworkName
    self.artworkName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: generateGerberProductFile
    self.generateGerberProductFile_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: generatePDFProductFile
    self.generatePDFProductFile_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: generatedBoardArchiveFormat
    self.generatedBoardArchiveFormat_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: modelNames
    self.modelNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardModels_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardModels_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerRoot_modelNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardModels_property.addEBObserverOf_name (self.modelNames_property)
  //--- Atomic property: boardRect
    self.boardRect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.automaticBoardSize_property_selection.kind ()
        kind &= unwSelf.boardManualWidth_property_selection.kind ()
        kind &= unwSelf.boardManualHeight_property_selection.kind ()
        kind &= unwSelf.boardInstances_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.automaticBoardSize_property_selection, unwSelf.boardManualWidth_property_selection, unwSelf.boardManualHeight_property_selection, unwSelf.boardInstances_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_MergerRoot_boardRect (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.automaticBoardSize_property.addEBObserver (self.boardRect_property)
    self.boardManualWidth_property.addEBObserver (self.boardRect_property)
    self.boardManualHeight_property.addEBObserver (self.boardRect_property)
    self.boardInstances_property.addEBObserverOf_instanceRect (self.boardRect_property)
  //--- Atomic property: boardDisplayRect
    self.boardDisplayRect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardManualWidth_property_selection.kind ()
        kind &= unwSelf.boardManualHeight_property_selection.kind ()
        kind &= unwSelf.boardInstances_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardManualWidth_property_selection, unwSelf.boardManualHeight_property_selection, unwSelf.boardInstances_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_MergerRoot_boardDisplayRect (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardManualWidth_property.addEBObserver (self.boardDisplayRect_property)
    self.boardManualHeight_property.addEBObserver (self.boardDisplayRect_property)
    self.boardInstances_property.addEBObserverOf_instanceRect (self.boardDisplayRect_property)
  //--- Atomic property: boardWidth
    self.boardWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardRect_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardRect_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerRoot_boardWidth (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.addEBObserver (self.boardWidth_property)
  //--- Atomic property: boardHeight
    self.boardHeight_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardRect_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardRect_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerRoot_boardHeight (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.addEBObserver (self.boardHeight_property)
  //--- To one property: artwork
  //  #if !NEWTOONE
  //    self.artwork_property.owner = self
  //  #else
      self.artwork_property.ebUndoManager = self.ebUndoManager
  //  #endif
  //--- Atomic property: boardOutlineRectDisplay
    self.boardOutlineRectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardRect_property_selection.kind ()
        kind &= unwSelf.boardLimitWidth_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBoardLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBoardLimits_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardRect_property_selection, unwSelf.boardLimitWidth_property_selection, g_Preferences!.mergerBoardViewDisplayBoardLimits_property_selection, g_Preferences!.mergerColorBoardLimits_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_MergerRoot_boardOutlineRectDisplay (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardRect_property.addEBObserver (self.boardOutlineRectDisplay_property)
    self.boardLimitWidth_property.addEBObserver (self.boardOutlineRectDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBoardLimits_property.addEBObserver (self.boardOutlineRectDisplay_property)
    g_Preferences?.mergerColorBoardLimits_property.addEBObserver (self.boardOutlineRectDisplay_property)
  //--- Install undoers and opposite setter for relationships
    self.boardInstances_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.myRoot_property.setProp (me) } },
      resetter: { inObject in inObject.myRoot_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.boardModels_property.removeEBObserverOf_name (self.modelNames_property)
    self.automaticBoardSize_property.removeEBObserver (self.boardRect_property)
    self.boardManualWidth_property.removeEBObserver (self.boardRect_property)
    self.boardManualHeight_property.removeEBObserver (self.boardRect_property)
    self.boardInstances_property.removeEBObserverOf_instanceRect (self.boardRect_property)
    self.boardManualWidth_property.removeEBObserver (self.boardDisplayRect_property)
    self.boardManualHeight_property.removeEBObserver (self.boardDisplayRect_property)
    self.boardInstances_property.removeEBObserverOf_instanceRect (self.boardDisplayRect_property)
    self.boardRect_property.removeEBObserver (self.boardWidth_property)
    self.boardRect_property.removeEBObserver (self.boardHeight_property)
    self.boardRect_property.removeEBObserver (self.boardOutlineRectDisplay_property)
    self.boardLimitWidth_property.removeEBObserver (self.boardOutlineRectDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBoardLimits_property.removeEBObserver (self.boardOutlineRectDisplay_property)
    g_Preferences?.mergerColorBoardLimits_property.removeEBObserver (self.boardOutlineRectDisplay_property)
 //   self.boardInstances_property.setOppositeRelationship = nil
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedPageIndex",
      idx:self.selectedPageIndex_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedPageIndex_property.mObserverExplorer,
      valueExplorer:&self.selectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx:self.zoom_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoom_property.mObserverExplorer,
      valueExplorer:&self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "automaticBoardSize",
      idx:self.automaticBoardSize_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.automaticBoardSize_property.mObserverExplorer,
      valueExplorer:&self.automaticBoardSize_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardManualWidth",
      idx:self.boardManualWidth_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardManualWidth_property.mObserverExplorer,
      valueExplorer:&self.boardManualWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardManualHeight",
      idx:self.boardManualHeight_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardManualHeight_property.mObserverExplorer,
      valueExplorer:&self.boardManualHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidthUnit",
      idx:self.boardWidthUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.boardWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeightUnit",
      idx:self.boardHeightUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeightUnit_property.mObserverExplorer,
      valueExplorer:&self.boardHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "overlapingArrangment",
      idx:self.overlapingArrangment_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.overlapingArrangment_property.mObserverExplorer,
      valueExplorer:&self.overlapingArrangment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedBoardXUnit",
      idx:self.selectedBoardXUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedBoardXUnit_property.mObserverExplorer,
      valueExplorer:&self.selectedBoardXUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedBoardYUnit",
      idx:self.selectedBoardYUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedBoardYUnit_property.mObserverExplorer,
      valueExplorer:&self.selectedBoardYUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidth",
      idx:self.boardLimitWidth_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidth_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidthUnit",
      idx:self.boardLimitWidthUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "arrowMagnitude",
      idx:self.arrowMagnitude_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.arrowMagnitude_property.mObserverExplorer,
      valueExplorer:&self.arrowMagnitude_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "arrowMagnitudeUnit",
      idx:self.arrowMagnitudeUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.arrowMagnitudeUnit_property.mObserverExplorer,
      valueExplorer:&self.arrowMagnitudeUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "shiftArrowMagnitude",
      idx:self.shiftArrowMagnitude_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.shiftArrowMagnitude_property.mObserverExplorer,
      valueExplorer:&self.shiftArrowMagnitude_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "shiftArrowMagnitudeUnit",
      idx:self.shiftArrowMagnitudeUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.shiftArrowMagnitudeUnit_property.mObserverExplorer,
      valueExplorer:&self.shiftArrowMagnitudeUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "artworkName",
      idx:self.artworkName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.artworkName_property.mObserverExplorer,
      valueExplorer:&self.artworkName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "generateGerberProductFile",
      idx:self.generateGerberProductFile_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.generateGerberProductFile_property.mObserverExplorer,
      valueExplorer:&self.generateGerberProductFile_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "generatePDFProductFile",
      idx:self.generatePDFProductFile_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.generatePDFProductFile_property.mObserverExplorer,
      valueExplorer:&self.generatePDFProductFile_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "generatedBoardArchiveFormat",
      idx:self.generatedBoardArchiveFormat_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.generatedBoardArchiveFormat_property.mObserverExplorer,
      valueExplorer:&self.generatedBoardArchiveFormat_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "modelNames",
      idx:self.modelNames_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelNames_property.mObserverExplorer,
      valueExplorer:&self.modelNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardRect",
      idx:self.boardRect_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardRect_property.mObserverExplorer,
      valueExplorer:&self.boardRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardDisplayRect",
      idx:self.boardDisplayRect_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardDisplayRect_property.mObserverExplorer,
      valueExplorer:&self.boardDisplayRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardWidth",
      idx:self.boardWidth_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardWidth_property.mObserverExplorer,
      valueExplorer:&self.boardWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardHeight",
      idx:self.boardHeight_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardHeight_property.mObserverExplorer,
      valueExplorer:&self.boardHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardOutlineRectDisplay",
      idx:self.boardOutlineRectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardOutlineRectDisplay_property.mObserverExplorer,
      valueExplorer:&self.boardOutlineRectDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "boardModels",
      idx:boardModels_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&boardModels_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "boardInstances",
      idx:boardInstances_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&boardInstances_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "artwork",
      idx:self.artwork_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.artwork_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- To many property: boardModels
    self.boardModels_property.mValueExplorer = nil
  //--- To many property: boardInstances
    self.boardInstances_property.mValueExplorer = nil
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.mObserverExplorer = nil
    self.selectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: zoom
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
  //--- Atomic property: automaticBoardSize
    self.automaticBoardSize_property.mObserverExplorer = nil
    self.automaticBoardSize_property.mValueExplorer = nil
  //--- Atomic property: boardManualWidth
    self.boardManualWidth_property.mObserverExplorer = nil
    self.boardManualWidth_property.mValueExplorer = nil
  //--- Atomic property: boardManualHeight
    self.boardManualHeight_property.mObserverExplorer = nil
    self.boardManualHeight_property.mValueExplorer = nil
  //--- Atomic property: boardWidthUnit
    self.boardWidthUnit_property.mObserverExplorer = nil
    self.boardWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: boardHeightUnit
    self.boardHeightUnit_property.mObserverExplorer = nil
    self.boardHeightUnit_property.mValueExplorer = nil
  //--- Atomic property: overlapingArrangment
    self.overlapingArrangment_property.mObserverExplorer = nil
    self.overlapingArrangment_property.mValueExplorer = nil
  //--- Atomic property: selectedBoardXUnit
    self.selectedBoardXUnit_property.mObserverExplorer = nil
    self.selectedBoardXUnit_property.mValueExplorer = nil
  //--- Atomic property: selectedBoardYUnit
    self.selectedBoardYUnit_property.mObserverExplorer = nil
    self.selectedBoardYUnit_property.mValueExplorer = nil
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.mObserverExplorer = nil
    self.boardLimitWidth_property.mValueExplorer = nil
  //--- Atomic property: boardLimitWidthUnit
    self.boardLimitWidthUnit_property.mObserverExplorer = nil
    self.boardLimitWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: arrowMagnitude
    self.arrowMagnitude_property.mObserverExplorer = nil
    self.arrowMagnitude_property.mValueExplorer = nil
  //--- Atomic property: arrowMagnitudeUnit
    self.arrowMagnitudeUnit_property.mObserverExplorer = nil
    self.arrowMagnitudeUnit_property.mValueExplorer = nil
  //--- Atomic property: shiftArrowMagnitude
    self.shiftArrowMagnitude_property.mObserverExplorer = nil
    self.shiftArrowMagnitude_property.mValueExplorer = nil
  //--- Atomic property: shiftArrowMagnitudeUnit
    self.shiftArrowMagnitudeUnit_property.mObserverExplorer = nil
    self.shiftArrowMagnitudeUnit_property.mValueExplorer = nil
  //--- Atomic property: artworkName
    self.artworkName_property.mObserverExplorer = nil
    self.artworkName_property.mValueExplorer = nil
  //--- Atomic property: generateGerberProductFile
    self.generateGerberProductFile_property.mObserverExplorer = nil
    self.generateGerberProductFile_property.mValueExplorer = nil
  //--- Atomic property: generatePDFProductFile
    self.generatePDFProductFile_property.mObserverExplorer = nil
    self.generatePDFProductFile_property.mValueExplorer = nil
  //--- Atomic property: generatedBoardArchiveFormat
    self.generatedBoardArchiveFormat_property.mObserverExplorer = nil
    self.generatedBoardArchiveFormat_property.mValueExplorer = nil
  //--- To one property: artwork
    self.artwork_property.mObserverExplorer = nil
    self.artwork_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.boardModels_property.setProp ([])
    self.boardInstances_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.artwork_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To many property: boardModels
    self.store (
      managedObjectArray: self.boardModels_property.propval,
      relationshipName: "boardModels",
      intoDictionary: ioDictionary
    )
  //--- To many property: boardInstances
    self.store (
      managedObjectArray: self.boardInstances_property.propval,
      relationshipName: "boardInstances",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"selectedPageIndex")
  //--- Atomic property: zoom
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey:"zoom")
  //--- Atomic property: automaticBoardSize
    self.automaticBoardSize_property.storeIn (dictionary: ioDictionary, forKey:"automaticBoardSize")
  //--- Atomic property: boardManualWidth
    self.boardManualWidth_property.storeIn (dictionary: ioDictionary, forKey:"boardManualWidth")
  //--- Atomic property: boardManualHeight
    self.boardManualHeight_property.storeIn (dictionary: ioDictionary, forKey:"boardManualHeight")
  //--- Atomic property: boardWidthUnit
    self.boardWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"boardWidthUnit")
  //--- Atomic property: boardHeightUnit
    self.boardHeightUnit_property.storeIn (dictionary: ioDictionary, forKey:"boardHeightUnit")
  //--- Atomic property: overlapingArrangment
    self.overlapingArrangment_property.storeIn (dictionary: ioDictionary, forKey:"overlapingArrangment")
  //--- Atomic property: selectedBoardXUnit
    self.selectedBoardXUnit_property.storeIn (dictionary: ioDictionary, forKey:"selectedBoardXUnit")
  //--- Atomic property: selectedBoardYUnit
    self.selectedBoardYUnit_property.storeIn (dictionary: ioDictionary, forKey:"selectedBoardYUnit")
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.storeIn (dictionary: ioDictionary, forKey:"boardLimitWidth")
  //--- Atomic property: boardLimitWidthUnit
    self.boardLimitWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"boardLimitWidthUnit")
  //--- Atomic property: arrowMagnitude
    self.arrowMagnitude_property.storeIn (dictionary: ioDictionary, forKey:"arrowMagnitude")
  //--- Atomic property: arrowMagnitudeUnit
    self.arrowMagnitudeUnit_property.storeIn (dictionary: ioDictionary, forKey:"arrowMagnitudeUnit")
  //--- Atomic property: shiftArrowMagnitude
    self.shiftArrowMagnitude_property.storeIn (dictionary: ioDictionary, forKey:"shiftArrowMagnitude")
  //--- Atomic property: shiftArrowMagnitudeUnit
    self.shiftArrowMagnitudeUnit_property.storeIn (dictionary: ioDictionary, forKey:"shiftArrowMagnitudeUnit")
  //--- Atomic property: artworkName
    self.artworkName_property.storeIn (dictionary: ioDictionary, forKey:"artworkName")
  //--- Atomic property: generateGerberProductFile
    self.generateGerberProductFile_property.storeIn (dictionary: ioDictionary, forKey:"generateGerberProductFile")
  //--- Atomic property: generatePDFProductFile
    self.generatePDFProductFile_property.storeIn (dictionary: ioDictionary, forKey:"generatePDFProductFile")
  //--- Atomic property: generatedBoardArchiveFormat
    self.generatedBoardArchiveFormat_property.storeIn (dictionary: ioDictionary, forKey:"generatedBoardArchiveFormat")
  //--- To one property: artwork
    self.store (managedObject:self.artwork_property.propval,
      relationshipName: "artwork",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: boardModels
    self.boardModels_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "boardModels",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModel])
  //--- To many property: boardInstances
    self.boardInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "boardInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [MergerBoardInstance])
  //--- To one property: artwork
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "artwork",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ArtworkRoot {
        self.artwork_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"selectedPageIndex")
  //--- Atomic property: zoom
    self.zoom_property.readFrom (dictionary: inDictionary, forKey:"zoom")
  //--- Atomic property: automaticBoardSize
    self.automaticBoardSize_property.readFrom (dictionary: inDictionary, forKey:"automaticBoardSize")
  //--- Atomic property: boardManualWidth
    self.boardManualWidth_property.readFrom (dictionary: inDictionary, forKey:"boardManualWidth")
  //--- Atomic property: boardManualHeight
    self.boardManualHeight_property.readFrom (dictionary: inDictionary, forKey:"boardManualHeight")
  //--- Atomic property: boardWidthUnit
    self.boardWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"boardWidthUnit")
  //--- Atomic property: boardHeightUnit
    self.boardHeightUnit_property.readFrom (dictionary: inDictionary, forKey:"boardHeightUnit")
  //--- Atomic property: overlapingArrangment
    self.overlapingArrangment_property.readFrom (dictionary: inDictionary, forKey:"overlapingArrangment")
  //--- Atomic property: selectedBoardXUnit
    self.selectedBoardXUnit_property.readFrom (dictionary: inDictionary, forKey:"selectedBoardXUnit")
  //--- Atomic property: selectedBoardYUnit
    self.selectedBoardYUnit_property.readFrom (dictionary: inDictionary, forKey:"selectedBoardYUnit")
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.readFrom (dictionary: inDictionary, forKey:"boardLimitWidth")
  //--- Atomic property: boardLimitWidthUnit
    self.boardLimitWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"boardLimitWidthUnit")
  //--- Atomic property: arrowMagnitude
    self.arrowMagnitude_property.readFrom (dictionary: inDictionary, forKey:"arrowMagnitude")
  //--- Atomic property: arrowMagnitudeUnit
    self.arrowMagnitudeUnit_property.readFrom (dictionary: inDictionary, forKey:"arrowMagnitudeUnit")
  //--- Atomic property: shiftArrowMagnitude
    self.shiftArrowMagnitude_property.readFrom (dictionary: inDictionary, forKey:"shiftArrowMagnitude")
  //--- Atomic property: shiftArrowMagnitudeUnit
    self.shiftArrowMagnitudeUnit_property.readFrom (dictionary: inDictionary, forKey:"shiftArrowMagnitudeUnit")
  //--- Atomic property: artworkName
    self.artworkName_property.readFrom (dictionary: inDictionary, forKey:"artworkName")
  //--- Atomic property: generateGerberProductFile
    self.generateGerberProductFile_property.readFrom (dictionary: inDictionary, forKey:"generateGerberProductFile")
  //--- Atomic property: generatePDFProductFile
    self.generatePDFProductFile_property.readFrom (dictionary: inDictionary, forKey:"generatePDFProductFile")
  //--- Atomic property: generatedBoardArchiveFormat
    self.generatedBoardArchiveFormat_property.readFrom (dictionary: inDictionary, forKey:"generatedBoardArchiveFormat")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: boardModels
    for managedObject in self.boardModels_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: boardInstances
    for managedObject in self.boardInstances_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: artwork
    if let managedObject = self.artwork_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: boardModels
    for managedObject in self.boardModels_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: boardInstances
    for managedObject in self.boardInstances_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: artwork
    if let managedObject = self.artwork_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MergerRoot : ReadOnlyAbstractArrayProperty <MergerRoot> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <MergerRoot>, addedSet inAddedSet : Set <MergerRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_selectedPageIndex_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_zoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_automaticBoardSize_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardManualWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardManualHeight_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardHeightUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_overlapingArrangment_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_selectedBoardXUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_selectedBoardYUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardLimitWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_arrowMagnitude_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_arrowMagnitudeUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_shiftArrowMagnitude_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_shiftArrowMagnitudeUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_artworkName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_generateGerberProductFile_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_generatePDFProductFile_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_generatedBoardArchiveFormat_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_modelNames_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardRect_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardDisplayRect_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardWidth_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardHeight_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardOutlineRectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_selectedPageIndex_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_zoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_automaticBoardSize_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardManualWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardManualHeight_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardWidthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardHeightUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_overlapingArrangment_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_selectedBoardXUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_selectedBoardYUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardLimitWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_arrowMagnitude_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_arrowMagnitudeUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_shiftArrowMagnitude_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_shiftArrowMagnitudeUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_artworkName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_generateGerberProductFile_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_generatePDFProductFile_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_generatedBoardArchiveFormat_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_modelNames_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardRect_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardDisplayRect_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardWidth_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardHeight_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardOutlineRectDisplay_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'automaticBoardSize' stored property
  //····················································································································

  private var mObserversOf_automaticBoardSize = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_automaticBoardSize.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.automaticBoardSize_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_automaticBoardSize.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.automaticBoardSize_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_automaticBoardSize_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_automaticBoardSize.apply { (_ observer : EBEvent) in
        managedObject.automaticBoardSize_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_automaticBoardSize_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_automaticBoardSize.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.automaticBoardSize_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardManualWidth' stored property
  //····················································································································

  private var mObserversOf_boardManualWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardManualWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardManualWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardManualWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardManualWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardManualWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardManualWidth.apply { (_ observer : EBEvent) in
        managedObject.boardManualWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardManualWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardManualWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardManualWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardManualHeight' stored property
  //····················································································································

  private var mObserversOf_boardManualHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardManualHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardManualHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardManualHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardManualHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardManualHeight_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardManualHeight.apply { (_ observer : EBEvent) in
        managedObject.boardManualHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardManualHeight_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardManualHeight.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardManualHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidthUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardWidthUnit.apply { (_ observer : EBEvent) in
        managedObject.boardWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidthUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardHeightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardHeightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeightUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardHeightUnit.apply { (_ observer : EBEvent) in
        managedObject.boardHeightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeightUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardHeightUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'overlapingArrangment' stored property
  //····················································································································

  private var mObserversOf_overlapingArrangment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_overlapingArrangment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.overlapingArrangment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_overlapingArrangment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.overlapingArrangment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_overlapingArrangment_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_overlapingArrangment.apply { (_ observer : EBEvent) in
        managedObject.overlapingArrangment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_overlapingArrangment_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_overlapingArrangment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.overlapingArrangment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedBoardXUnit' stored property
  //····················································································································

  private var mObserversOf_selectedBoardXUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedBoardXUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedBoardXUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedBoardXUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedBoardXUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedBoardXUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedBoardXUnit.apply { (_ observer : EBEvent) in
        managedObject.selectedBoardXUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedBoardXUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_selectedBoardXUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedBoardXUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedBoardYUnit' stored property
  //····················································································································

  private var mObserversOf_selectedBoardYUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedBoardYUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedBoardYUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedBoardYUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedBoardYUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedBoardYUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedBoardYUnit.apply { (_ observer : EBEvent) in
        managedObject.selectedBoardYUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedBoardYUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_selectedBoardYUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedBoardYUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitWidth.apply { (_ observer : EBEvent) in
        managedObject.boardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardLimitWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitWidthUnit.apply { (_ observer : EBEvent) in
        managedObject.boardLimitWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardLimitWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arrowMagnitude' stored property
  //····················································································································

  private var mObserversOf_arrowMagnitude = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arrowMagnitude.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arrowMagnitude_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arrowMagnitude.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arrowMagnitude_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_arrowMagnitude_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_arrowMagnitude.apply { (_ observer : EBEvent) in
        managedObject.arrowMagnitude_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arrowMagnitude_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_arrowMagnitude.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.arrowMagnitude_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arrowMagnitudeUnit' stored property
  //····················································································································

  private var mObserversOf_arrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arrowMagnitudeUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arrowMagnitudeUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arrowMagnitudeUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arrowMagnitudeUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_arrowMagnitudeUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_arrowMagnitudeUnit.apply { (_ observer : EBEvent) in
        managedObject.arrowMagnitudeUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arrowMagnitudeUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_arrowMagnitudeUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.arrowMagnitudeUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'shiftArrowMagnitude' stored property
  //····················································································································

  private var mObserversOf_shiftArrowMagnitude = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitude.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shiftArrowMagnitude_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitude.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shiftArrowMagnitude_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_shiftArrowMagnitude_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_shiftArrowMagnitude.apply { (_ observer : EBEvent) in
        managedObject.shiftArrowMagnitude_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_shiftArrowMagnitude_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_shiftArrowMagnitude.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.shiftArrowMagnitude_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'shiftArrowMagnitudeUnit' stored property
  //····················································································································

  private var mObserversOf_shiftArrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitudeUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shiftArrowMagnitudeUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitudeUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.shiftArrowMagnitudeUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_shiftArrowMagnitudeUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_shiftArrowMagnitudeUnit.apply { (_ observer : EBEvent) in
        managedObject.shiftArrowMagnitudeUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_shiftArrowMagnitudeUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_shiftArrowMagnitudeUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.shiftArrowMagnitudeUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_artworkName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_artworkName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.artworkName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_artworkName.apply { (_ observer : EBEvent) in
        managedObject.artworkName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_artworkName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.artworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generateGerberProductFile' stored property
  //····················································································································

  private var mObserversOf_generateGerberProductFile = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_generateGerberProductFile.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generateGerberProductFile_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_generateGerberProductFile.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generateGerberProductFile_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_generateGerberProductFile_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_generateGerberProductFile.apply { (_ observer : EBEvent) in
        managedObject.generateGerberProductFile_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generateGerberProductFile_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_generateGerberProductFile.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generateGerberProductFile_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generatePDFProductFile' stored property
  //····················································································································

  private var mObserversOf_generatePDFProductFile = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_generatePDFProductFile.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generatePDFProductFile_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_generatePDFProductFile.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generatePDFProductFile_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_generatePDFProductFile_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_generatePDFProductFile.apply { (_ observer : EBEvent) in
        managedObject.generatePDFProductFile_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generatePDFProductFile_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_generatePDFProductFile.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generatePDFProductFile_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generatedBoardArchiveFormat' stored property
  //····················································································································

  private var mObserversOf_generatedBoardArchiveFormat = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_generatedBoardArchiveFormat.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generatedBoardArchiveFormat_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_generatedBoardArchiveFormat.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.generatedBoardArchiveFormat_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_generatedBoardArchiveFormat_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_generatedBoardArchiveFormat.apply { (_ observer : EBEvent) in
        managedObject.generatedBoardArchiveFormat_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generatedBoardArchiveFormat_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_generatedBoardArchiveFormat.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generatedBoardArchiveFormat_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelNames' transient property
  //····················································································································

  private var mObserversOf_modelNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelNames_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_modelNames.apply { (_ observer : EBEvent) in
        managedObject.modelNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelNames_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_modelNames.apply { (_ observer : EBEvent) in
        managedObject.modelNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardRect' transient property
  //····················································································································

  private var mObserversOf_boardRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardRect_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardRect.apply { (_ observer : EBEvent) in
        managedObject.boardRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardRect_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardRect.apply { (_ observer : EBEvent) in
        managedObject.boardRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardDisplayRect' transient property
  //····················································································································

  private var mObserversOf_boardDisplayRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardDisplayRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardDisplayRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardDisplayRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardDisplayRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardDisplayRect_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardDisplayRect.apply { (_ observer : EBEvent) in
        managedObject.boardDisplayRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardDisplayRect_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardDisplayRect.apply { (_ observer : EBEvent) in
        managedObject.boardDisplayRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidth' transient property
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardWidth.apply { (_ observer : EBEvent) in
        managedObject.boardWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardWidth.apply { (_ observer : EBEvent) in
        managedObject.boardWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeight' transient property
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeight_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardHeight.apply { (_ observer : EBEvent) in
        managedObject.boardHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeight_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardHeight.apply { (_ observer : EBEvent) in
        managedObject.boardHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardOutlineRectDisplay' transient property
  //····················································································································

  private var mObserversOf_boardOutlineRectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardOutlineRectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardOutlineRectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardOutlineRectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardOutlineRectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardOutlineRectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardOutlineRectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardOutlineRectDisplay_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardOutlineRectDisplay.apply { (_ observer : EBEvent) in
        managedObject.boardOutlineRectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardOutlineRectDisplay_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardOutlineRectDisplay.apply { (_ observer : EBEvent) in
        managedObject.boardOutlineRectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MergerRoot : ReadOnlyArrayOf_MergerRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_MergerRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_MergerRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [MergerRoot] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [MergerRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [MergerRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_MergerRoot <SUPER : EBManagedObject> : ReadOnlyArrayOf_MergerRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [MergerRoot] ()
    for superObject in newModelArray {
      if let object = superObject as? MergerRoot {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [MergerRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [MergerRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_MergerRoot : ReadOnlyArrayOf_MergerRoot {

  //····················································································································
 
  func setProp (_ value :  [MergerRoot]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_MergerRoot : ReadWriteArrayOf_MergerRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_MergerRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_MergerRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [MergerRoot]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [MergerRoot]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [MergerRoot] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [MergerRoot] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_MergerRoot : ReadWriteArrayOf_MergerRoot, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : MergerRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : MergerRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [MergerRoot] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "MergerRoot") as? MergerRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [MergerRoot]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [MergerRoot]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <MergerRoot>, addedSet inAddedSet : Set <MergerRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //---
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  }
 
  //····················································································································

  override var prop : EBSelection < [MergerRoot] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [MergerRoot]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [MergerRoot] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : MergerRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : MergerRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_MergerRoot 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_MergerRoot : ReadOnlyAbstractObjectProperty <MergerRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : MergerRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.selectedPageIndex_property.removeEBObserversFrom (&self.mObserversOf_selectedPageIndex) // Stored property
    inOldValue?.zoom_property.removeEBObserversFrom (&self.mObserversOf_zoom) // Stored property
    inOldValue?.automaticBoardSize_property.removeEBObserversFrom (&self.mObserversOf_automaticBoardSize) // Stored property
    inOldValue?.boardManualWidth_property.removeEBObserversFrom (&self.mObserversOf_boardManualWidth) // Stored property
    inOldValue?.boardManualHeight_property.removeEBObserversFrom (&self.mObserversOf_boardManualHeight) // Stored property
    inOldValue?.boardWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_boardWidthUnit) // Stored property
    inOldValue?.boardHeightUnit_property.removeEBObserversFrom (&self.mObserversOf_boardHeightUnit) // Stored property
    inOldValue?.overlapingArrangment_property.removeEBObserversFrom (&self.mObserversOf_overlapingArrangment) // Stored property
    inOldValue?.selectedBoardXUnit_property.removeEBObserversFrom (&self.mObserversOf_selectedBoardXUnit) // Stored property
    inOldValue?.selectedBoardYUnit_property.removeEBObserversFrom (&self.mObserversOf_selectedBoardYUnit) // Stored property
    inOldValue?.boardLimitWidth_property.removeEBObserversFrom (&self.mObserversOf_boardLimitWidth) // Stored property
    inOldValue?.boardLimitWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_boardLimitWidthUnit) // Stored property
    inOldValue?.arrowMagnitude_property.removeEBObserversFrom (&self.mObserversOf_arrowMagnitude) // Stored property
    inOldValue?.arrowMagnitudeUnit_property.removeEBObserversFrom (&self.mObserversOf_arrowMagnitudeUnit) // Stored property
    inOldValue?.shiftArrowMagnitude_property.removeEBObserversFrom (&self.mObserversOf_shiftArrowMagnitude) // Stored property
    inOldValue?.shiftArrowMagnitudeUnit_property.removeEBObserversFrom (&self.mObserversOf_shiftArrowMagnitudeUnit) // Stored property
    inOldValue?.artworkName_property.removeEBObserversFrom (&self.mObserversOf_artworkName) // Stored property
    inOldValue?.generateGerberProductFile_property.removeEBObserversFrom (&self.mObserversOf_generateGerberProductFile) // Stored property
    inOldValue?.generatePDFProductFile_property.removeEBObserversFrom (&self.mObserversOf_generatePDFProductFile) // Stored property
    inOldValue?.generatedBoardArchiveFormat_property.removeEBObserversFrom (&self.mObserversOf_generatedBoardArchiveFormat) // Stored property
    inOldValue?.modelNames_property.removeEBObserversFrom (&self.mObserversOf_modelNames) // Transient property
    inOldValue?.boardRect_property.removeEBObserversFrom (&self.mObserversOf_boardRect) // Transient property
    inOldValue?.boardDisplayRect_property.removeEBObserversFrom (&self.mObserversOf_boardDisplayRect) // Transient property
    inOldValue?.boardWidth_property.removeEBObserversFrom (&self.mObserversOf_boardWidth) // Transient property
    inOldValue?.boardHeight_property.removeEBObserversFrom (&self.mObserversOf_boardHeight) // Transient property
    inOldValue?.boardOutlineRectDisplay_property.removeEBObserversFrom (&self.mObserversOf_boardOutlineRectDisplay) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.selectedPageIndex_property.addEBObserversFrom (&self.mObserversOf_selectedPageIndex) // Stored property
    self.mInternalValue?.zoom_property.addEBObserversFrom (&self.mObserversOf_zoom) // Stored property
    self.mInternalValue?.automaticBoardSize_property.addEBObserversFrom (&self.mObserversOf_automaticBoardSize) // Stored property
    self.mInternalValue?.boardManualWidth_property.addEBObserversFrom (&self.mObserversOf_boardManualWidth) // Stored property
    self.mInternalValue?.boardManualHeight_property.addEBObserversFrom (&self.mObserversOf_boardManualHeight) // Stored property
    self.mInternalValue?.boardWidthUnit_property.addEBObserversFrom (&self.mObserversOf_boardWidthUnit) // Stored property
    self.mInternalValue?.boardHeightUnit_property.addEBObserversFrom (&self.mObserversOf_boardHeightUnit) // Stored property
    self.mInternalValue?.overlapingArrangment_property.addEBObserversFrom (&self.mObserversOf_overlapingArrangment) // Stored property
    self.mInternalValue?.selectedBoardXUnit_property.addEBObserversFrom (&self.mObserversOf_selectedBoardXUnit) // Stored property
    self.mInternalValue?.selectedBoardYUnit_property.addEBObserversFrom (&self.mObserversOf_selectedBoardYUnit) // Stored property
    self.mInternalValue?.boardLimitWidth_property.addEBObserversFrom (&self.mObserversOf_boardLimitWidth) // Stored property
    self.mInternalValue?.boardLimitWidthUnit_property.addEBObserversFrom (&self.mObserversOf_boardLimitWidthUnit) // Stored property
    self.mInternalValue?.arrowMagnitude_property.addEBObserversFrom (&self.mObserversOf_arrowMagnitude) // Stored property
    self.mInternalValue?.arrowMagnitudeUnit_property.addEBObserversFrom (&self.mObserversOf_arrowMagnitudeUnit) // Stored property
    self.mInternalValue?.shiftArrowMagnitude_property.addEBObserversFrom (&self.mObserversOf_shiftArrowMagnitude) // Stored property
    self.mInternalValue?.shiftArrowMagnitudeUnit_property.addEBObserversFrom (&self.mObserversOf_shiftArrowMagnitudeUnit) // Stored property
    self.mInternalValue?.artworkName_property.addEBObserversFrom (&self.mObserversOf_artworkName) // Stored property
    self.mInternalValue?.generateGerberProductFile_property.addEBObserversFrom (&self.mObserversOf_generateGerberProductFile) // Stored property
    self.mInternalValue?.generatePDFProductFile_property.addEBObserversFrom (&self.mObserversOf_generatePDFProductFile) // Stored property
    self.mInternalValue?.generatedBoardArchiveFormat_property.addEBObserversFrom (&self.mObserversOf_generatedBoardArchiveFormat) // Stored property
    self.mInternalValue?.modelNames_property.addEBObserversFrom (&self.mObserversOf_modelNames) // Transient property
    self.mInternalValue?.boardRect_property.addEBObserversFrom (&self.mObserversOf_boardRect) // Transient property
    self.mInternalValue?.boardDisplayRect_property.addEBObserversFrom (&self.mObserversOf_boardDisplayRect) // Transient property
    self.mInternalValue?.boardWidth_property.addEBObserversFrom (&self.mObserversOf_boardWidth) // Transient property
    self.mInternalValue?.boardHeight_property.addEBObserversFrom (&self.mObserversOf_boardHeight) // Transient property
    self.mInternalValue?.boardOutlineRectDisplay_property.addEBObserversFrom (&self.mObserversOf_boardOutlineRectDisplay) // Transient property
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  var zoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.zoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.zoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.zoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'automaticBoardSize' stored property
  //····················································································································

  private var mObserversOf_automaticBoardSize = EBWeakEventSet ()

  //····················································································································

  var automaticBoardSize_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.automaticBoardSize_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_automaticBoardSize.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.automaticBoardSize_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_automaticBoardSize.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.automaticBoardSize_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_automaticBoardSize_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_automaticBoardSize.apply { (_ observer : EBEvent) in
        managedObject.automaticBoardSize_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_automaticBoardSize_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_automaticBoardSize.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.automaticBoardSize_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardManualWidth' stored property
  //····················································································································

  private var mObserversOf_boardManualWidth = EBWeakEventSet ()

  //····················································································································

  var boardManualWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardManualWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardManualWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardManualWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardManualWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardManualWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardManualWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardManualWidth.apply { (_ observer : EBEvent) in
        managedObject.boardManualWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardManualWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardManualWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardManualWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardManualHeight' stored property
  //····················································································································

  private var mObserversOf_boardManualHeight = EBWeakEventSet ()

  //····················································································································

  var boardManualHeight_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardManualHeight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardManualHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardManualHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardManualHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardManualHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardManualHeight_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardManualHeight.apply { (_ observer : EBEvent) in
        managedObject.boardManualHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardManualHeight_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardManualHeight.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardManualHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  var boardWidthUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidthUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardWidthUnit.apply { (_ observer : EBEvent) in
        managedObject.boardWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidthUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  var boardHeightUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardHeightUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardHeightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardHeightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardHeightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardHeightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeightUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardHeightUnit.apply { (_ observer : EBEvent) in
        managedObject.boardHeightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeightUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardHeightUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'overlapingArrangment' stored property
  //····················································································································

  private var mObserversOf_overlapingArrangment = EBWeakEventSet ()

  //····················································································································

  var overlapingArrangment_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.overlapingArrangment_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_overlapingArrangment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.overlapingArrangment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_overlapingArrangment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.overlapingArrangment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_overlapingArrangment_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_overlapingArrangment.apply { (_ observer : EBEvent) in
        managedObject.overlapingArrangment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_overlapingArrangment_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_overlapingArrangment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.overlapingArrangment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedBoardXUnit' stored property
  //····················································································································

  private var mObserversOf_selectedBoardXUnit = EBWeakEventSet ()

  //····················································································································

  var selectedBoardXUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedBoardXUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedBoardXUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedBoardXUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedBoardXUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedBoardXUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedBoardXUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedBoardXUnit.apply { (_ observer : EBEvent) in
        managedObject.selectedBoardXUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedBoardXUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_selectedBoardXUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedBoardXUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedBoardYUnit' stored property
  //····················································································································

  private var mObserversOf_selectedBoardYUnit = EBWeakEventSet ()

  //····················································································································

  var selectedBoardYUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedBoardYUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedBoardYUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedBoardYUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedBoardYUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedBoardYUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedBoardYUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedBoardYUnit.apply { (_ observer : EBEvent) in
        managedObject.selectedBoardYUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedBoardYUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_selectedBoardYUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedBoardYUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  var boardLimitWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardLimitWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitWidth.apply { (_ observer : EBEvent) in
        managedObject.boardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardLimitWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  var boardLimitWidthUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardLimitWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardLimitWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitWidthUnit.apply { (_ observer : EBEvent) in
        managedObject.boardLimitWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardLimitWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arrowMagnitude' stored property
  //····················································································································

  private var mObserversOf_arrowMagnitude = EBWeakEventSet ()

  //····················································································································

  var arrowMagnitude_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.arrowMagnitude_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arrowMagnitude.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.arrowMagnitude_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arrowMagnitude.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.arrowMagnitude_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_arrowMagnitude_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_arrowMagnitude.apply { (_ observer : EBEvent) in
        managedObject.arrowMagnitude_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arrowMagnitude_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_arrowMagnitude.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.arrowMagnitude_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arrowMagnitudeUnit' stored property
  //····················································································································

  private var mObserversOf_arrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  var arrowMagnitudeUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.arrowMagnitudeUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arrowMagnitudeUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.arrowMagnitudeUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arrowMagnitudeUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.arrowMagnitudeUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_arrowMagnitudeUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_arrowMagnitudeUnit.apply { (_ observer : EBEvent) in
        managedObject.arrowMagnitudeUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arrowMagnitudeUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_arrowMagnitudeUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.arrowMagnitudeUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'shiftArrowMagnitude' stored property
  //····················································································································

  private var mObserversOf_shiftArrowMagnitude = EBWeakEventSet ()

  //····················································································································

  var shiftArrowMagnitude_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.shiftArrowMagnitude_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitude.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.shiftArrowMagnitude_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitude.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.shiftArrowMagnitude_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_shiftArrowMagnitude_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_shiftArrowMagnitude.apply { (_ observer : EBEvent) in
        managedObject.shiftArrowMagnitude_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_shiftArrowMagnitude_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_shiftArrowMagnitude.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.shiftArrowMagnitude_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'shiftArrowMagnitudeUnit' stored property
  //····················································································································

  private var mObserversOf_shiftArrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  var shiftArrowMagnitudeUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.shiftArrowMagnitudeUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitudeUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.shiftArrowMagnitudeUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitudeUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.shiftArrowMagnitudeUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_shiftArrowMagnitudeUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_shiftArrowMagnitudeUnit.apply { (_ observer : EBEvent) in
        managedObject.shiftArrowMagnitudeUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_shiftArrowMagnitudeUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_shiftArrowMagnitudeUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.shiftArrowMagnitudeUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  var artworkName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.artworkName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_artworkName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.artworkName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_artworkName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.artworkName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_artworkName.apply { (_ observer : EBEvent) in
        managedObject.artworkName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_artworkName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.artworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generateGerberProductFile' stored property
  //····················································································································

  private var mObserversOf_generateGerberProductFile = EBWeakEventSet ()

  //····················································································································

  var generateGerberProductFile_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.generateGerberProductFile_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_generateGerberProductFile.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.generateGerberProductFile_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_generateGerberProductFile.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.generateGerberProductFile_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_generateGerberProductFile_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_generateGerberProductFile.apply { (_ observer : EBEvent) in
        managedObject.generateGerberProductFile_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generateGerberProductFile_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_generateGerberProductFile.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generateGerberProductFile_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generatePDFProductFile' stored property
  //····················································································································

  private var mObserversOf_generatePDFProductFile = EBWeakEventSet ()

  //····················································································································

  var generatePDFProductFile_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.generatePDFProductFile_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_generatePDFProductFile.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.generatePDFProductFile_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_generatePDFProductFile.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.generatePDFProductFile_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_generatePDFProductFile_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_generatePDFProductFile.apply { (_ observer : EBEvent) in
        managedObject.generatePDFProductFile_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generatePDFProductFile_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_generatePDFProductFile.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generatePDFProductFile_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generatedBoardArchiveFormat' stored property
  //····················································································································

  private var mObserversOf_generatedBoardArchiveFormat = EBWeakEventSet ()

  //····················································································································

  var generatedBoardArchiveFormat_property_selection : EBSelection <BoardArchiveFormat?> {
    if let model = self.propval {
      switch (model.generatedBoardArchiveFormat_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_generatedBoardArchiveFormat.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.generatedBoardArchiveFormat_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_generatedBoardArchiveFormat.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.generatedBoardArchiveFormat_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_generatedBoardArchiveFormat_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_generatedBoardArchiveFormat.apply { (_ observer : EBEvent) in
        managedObject.generatedBoardArchiveFormat_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generatedBoardArchiveFormat_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_generatedBoardArchiveFormat.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generatedBoardArchiveFormat_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelNames' transient property
  //····················································································································

  private var mObserversOf_modelNames = EBWeakEventSet ()

  //····················································································································

  var modelNames_property_selection : EBSelection <StringTagArray?> {
    if let model = self.propval {
      switch (model.modelNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_modelNames_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_modelNames.apply { (_ observer : EBEvent) in
        managedObject.modelNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelNames_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_modelNames.apply { (_ observer : EBEvent) in
        managedObject.modelNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardRect' transient property
  //····················································································································

  private var mObserversOf_boardRect = EBWeakEventSet ()

  //····················································································································

  var boardRect_property_selection : EBSelection <CanariRect?> {
    if let model = self.propval {
      switch (model.boardRect_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardRect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardRect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardRect_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardRect.apply { (_ observer : EBEvent) in
        managedObject.boardRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardRect_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardRect.apply { (_ observer : EBEvent) in
        managedObject.boardRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardDisplayRect' transient property
  //····················································································································

  private var mObserversOf_boardDisplayRect = EBWeakEventSet ()

  //····················································································································

  var boardDisplayRect_property_selection : EBSelection <CanariRect?> {
    if let model = self.propval {
      switch (model.boardDisplayRect_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardDisplayRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardDisplayRect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardDisplayRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardDisplayRect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardDisplayRect_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardDisplayRect.apply { (_ observer : EBEvent) in
        managedObject.boardDisplayRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardDisplayRect_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardDisplayRect.apply { (_ observer : EBEvent) in
        managedObject.boardDisplayRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidth' transient property
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  var boardWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardWidth.apply { (_ observer : EBEvent) in
        managedObject.boardWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardWidth.apply { (_ observer : EBEvent) in
        managedObject.boardWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeight' transient property
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  var boardHeight_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardHeight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeight_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardHeight.apply { (_ observer : EBEvent) in
        managedObject.boardHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeight_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardHeight.apply { (_ observer : EBEvent) in
        managedObject.boardHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardOutlineRectDisplay' transient property
  //····················································································································

  private var mObserversOf_boardOutlineRectDisplay = EBWeakEventSet ()

  //····················································································································

  var boardOutlineRectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.boardOutlineRectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardOutlineRectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardOutlineRectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardOutlineRectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardOutlineRectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardOutlineRectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardOutlineRectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardOutlineRectDisplay_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardOutlineRectDisplay.apply { (_ observer : EBEvent) in
        managedObject.boardOutlineRectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardOutlineRectDisplay_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardOutlineRectDisplay.apply { (_ observer : EBEvent) in
        managedObject.boardOutlineRectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: boardModels
  //····················································································································

  private var mObserversOf_boardModels = EBWeakEventSet ()

  //····················································································································

  var boardModels_property_selection : EBSelection <[BoardModel]> {
    if let model = self.propval {
      switch (model.boardModels_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_boardModels (_ inObserver : EBEvent) {
    self.mObserversOf_boardModels.insert (inObserver)
    if let object = self.propval {
      object.boardModels_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardModels (_ inObserver : EBEvent) {
    self.mObserversOf_boardModels.remove (inObserver)
    if let object = self.propval {
      object.boardModels_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: boardInstances
  //····················································································································

  private var mObserversOf_boardInstances = EBWeakEventSet ()

  //····················································································································

  var boardInstances_property_selection : EBSelection <[MergerBoardInstance]> {
    if let model = self.propval {
      switch (model.boardInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_boardInstances (_ inObserver : EBEvent) {
    self.mObserversOf_boardInstances.insert (inObserver)
    if let object = self.propval {
      object.boardInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInstances (_ inObserver : EBEvent) {
    self.mObserversOf_boardInstances.remove (inObserver)
    if let object = self.propval {
      object.boardInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_MergerRoot : ReadOnlyObject_MergerRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_MergerRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_MergerRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : MergerRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < MergerRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : MergerRoot? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_MergerRoot : ReadOnlyObject_MergerRoot {

  //····················································································································
 
  func setProp (_ inValue : MergerRoot?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_MergerRoot : ReadWriteObject_MergerRoot {

  //····················································································································

  private var mModel : ReadWriteObject_MergerRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_MergerRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : MergerRoot?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : MergerRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < MergerRoot? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : MergerRoot? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_MergerRoot 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_MergerRoot : ReadWriteObject_MergerRoot, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : MergerRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : MergerRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : MergerRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : MergerRoot?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < MergerRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : MergerRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : MergerRoot? { return self.mInternalValue }

  //····················································································································

  func remove (_ object : MergerRoot) {
    if object === self.mInternalValue {
      self.mInternalValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : MergerRoot) {
    if object !== self.mInternalValue {
      self.mInternalValue = object
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
