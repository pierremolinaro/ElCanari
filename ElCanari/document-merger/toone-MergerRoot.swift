//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_MergerRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_MergerRoot : ReadOnlyAbstractObjectProperty <MergerRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : MergerRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.selectedPageIndex_property.removeEBObserversFrom (&self.mObserversOf_selectedPageIndex) // Stored property
      oldValue.zoom_property.removeEBObserversFrom (&self.mObserversOf_zoom) // Stored property
      oldValue.automaticBoardSize_property.removeEBObserversFrom (&self.mObserversOf_automaticBoardSize) // Stored property
      oldValue.boardManualWidth_property.removeEBObserversFrom (&self.mObserversOf_boardManualWidth) // Stored property
      oldValue.boardManualHeight_property.removeEBObserversFrom (&self.mObserversOf_boardManualHeight) // Stored property
      oldValue.boardWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_boardWidthUnit) // Stored property
      oldValue.boardHeightUnit_property.removeEBObserversFrom (&self.mObserversOf_boardHeightUnit) // Stored property
      oldValue.overlapingArrangment_property.removeEBObserversFrom (&self.mObserversOf_overlapingArrangment) // Stored property
      oldValue.selectedBoardXUnit_property.removeEBObserversFrom (&self.mObserversOf_selectedBoardXUnit) // Stored property
      oldValue.selectedBoardYUnit_property.removeEBObserversFrom (&self.mObserversOf_selectedBoardYUnit) // Stored property
      oldValue.boardLimitWidth_property.removeEBObserversFrom (&self.mObserversOf_boardLimitWidth) // Stored property
      oldValue.boardLimitWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_boardLimitWidthUnit) // Stored property
      oldValue.arrowMagnitude_property.removeEBObserversFrom (&self.mObserversOf_arrowMagnitude) // Stored property
      oldValue.arrowMagnitudeUnit_property.removeEBObserversFrom (&self.mObserversOf_arrowMagnitudeUnit) // Stored property
      oldValue.shiftArrowMagnitude_property.removeEBObserversFrom (&self.mObserversOf_shiftArrowMagnitude) // Stored property
      oldValue.shiftArrowMagnitudeUnit_property.removeEBObserversFrom (&self.mObserversOf_shiftArrowMagnitudeUnit) // Stored property
      oldValue.mPDFBoardBackgroundColor_property.removeEBObserversFrom (&self.mObserversOf_mPDFBoardBackgroundColor) // Stored property
      oldValue.mArtworkName_property.removeEBObserversFrom (&self.mObserversOf_mArtworkName) // Stored property
      oldValue.mArtworkVersion_property.removeEBObserversFrom (&self.mObserversOf_mArtworkVersion) // Stored property
      oldValue.modelNames_property.removeEBObserversFrom (&self.mObserversOf_modelNames) // Transient property
      oldValue.boardRect_property.removeEBObserversFrom (&self.mObserversOf_boardRect) // Transient property
      oldValue.boardDisplayRect_property.removeEBObserversFrom (&self.mObserversOf_boardDisplayRect) // Transient property
      oldValue.boardWidth_property.removeEBObserversFrom (&self.mObserversOf_boardWidth) // Transient property
      oldValue.boardHeight_property.removeEBObserversFrom (&self.mObserversOf_boardHeight) // Transient property
      oldValue.boardOutlineRectDisplay_property.removeEBObserversFrom (&self.mObserversOf_boardOutlineRectDisplay) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
      newValue.selectedPageIndex_property.addEBObserversFrom (&self.mObserversOf_selectedPageIndex) // Stored property
      newValue.zoom_property.addEBObserversFrom (&self.mObserversOf_zoom) // Stored property
      newValue.automaticBoardSize_property.addEBObserversFrom (&self.mObserversOf_automaticBoardSize) // Stored property
      newValue.boardManualWidth_property.addEBObserversFrom (&self.mObserversOf_boardManualWidth) // Stored property
      newValue.boardManualHeight_property.addEBObserversFrom (&self.mObserversOf_boardManualHeight) // Stored property
      newValue.boardWidthUnit_property.addEBObserversFrom (&self.mObserversOf_boardWidthUnit) // Stored property
      newValue.boardHeightUnit_property.addEBObserversFrom (&self.mObserversOf_boardHeightUnit) // Stored property
      newValue.overlapingArrangment_property.addEBObserversFrom (&self.mObserversOf_overlapingArrangment) // Stored property
      newValue.selectedBoardXUnit_property.addEBObserversFrom (&self.mObserversOf_selectedBoardXUnit) // Stored property
      newValue.selectedBoardYUnit_property.addEBObserversFrom (&self.mObserversOf_selectedBoardYUnit) // Stored property
      newValue.boardLimitWidth_property.addEBObserversFrom (&self.mObserversOf_boardLimitWidth) // Stored property
      newValue.boardLimitWidthUnit_property.addEBObserversFrom (&self.mObserversOf_boardLimitWidthUnit) // Stored property
      newValue.arrowMagnitude_property.addEBObserversFrom (&self.mObserversOf_arrowMagnitude) // Stored property
      newValue.arrowMagnitudeUnit_property.addEBObserversFrom (&self.mObserversOf_arrowMagnitudeUnit) // Stored property
      newValue.shiftArrowMagnitude_property.addEBObserversFrom (&self.mObserversOf_shiftArrowMagnitude) // Stored property
      newValue.shiftArrowMagnitudeUnit_property.addEBObserversFrom (&self.mObserversOf_shiftArrowMagnitudeUnit) // Stored property
      newValue.mPDFBoardBackgroundColor_property.addEBObserversFrom (&self.mObserversOf_mPDFBoardBackgroundColor) // Stored property
      newValue.mArtworkName_property.addEBObserversFrom (&self.mObserversOf_mArtworkName) // Stored property
      newValue.mArtworkVersion_property.addEBObserversFrom (&self.mObserversOf_mArtworkVersion) // Stored property
      newValue.modelNames_property.addEBObserversFrom (&self.mObserversOf_modelNames) // Transient property
      newValue.boardRect_property.addEBObserversFrom (&self.mObserversOf_boardRect) // Transient property
      newValue.boardDisplayRect_property.addEBObserversFrom (&self.mObserversOf_boardDisplayRect) // Transient property
      newValue.boardWidth_property.addEBObserversFrom (&self.mObserversOf_boardWidth) // Transient property
      newValue.boardHeight_property.addEBObserversFrom (&self.mObserversOf_boardHeight) // Transient property
      newValue.boardOutlineRectDisplay_property.addEBObserversFrom (&self.mObserversOf_boardOutlineRectDisplay) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

//  private final var selectedPageIndex_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final var selectedPageIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

//  private final var zoom_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final var zoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.zoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.zoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.zoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'automaticBoardSize' stored property
  //····················································································································

//  private final var automaticBoardSize_property = EBGenericPropertyProxy <Bool?> ()
  private final var mObserversOf_automaticBoardSize = EBWeakEventSet ()

  //····················································································································

  final var automaticBoardSize_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.automaticBoardSize_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_automaticBoardSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.automaticBoardSize_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_automaticBoardSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.automaticBoardSize_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardManualWidth' stored property
  //····················································································································

//  private final var boardManualWidth_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_boardManualWidth = EBWeakEventSet ()

  //····················································································································

  final var boardManualWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardManualWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardManualWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardManualWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardManualWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardManualWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardManualHeight' stored property
  //····················································································································

//  private final var boardManualHeight_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_boardManualHeight = EBWeakEventSet ()

  //····················································································································

  final var boardManualHeight_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardManualHeight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardManualHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardManualHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardManualHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardManualHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

//  private final var boardWidthUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  final var boardWidthUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

//  private final var boardHeightUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  final var boardHeightUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardHeightUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardHeightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardHeightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardHeightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardHeightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'overlapingArrangment' stored property
  //····················································································································

//  private final var overlapingArrangment_property = EBGenericPropertyProxy <Bool?> ()
  private final var mObserversOf_overlapingArrangment = EBWeakEventSet ()

  //····················································································································

  final var overlapingArrangment_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.overlapingArrangment_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_overlapingArrangment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.overlapingArrangment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_overlapingArrangment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.overlapingArrangment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'selectedBoardXUnit' stored property
  //····················································································································

//  private final var selectedBoardXUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_selectedBoardXUnit = EBWeakEventSet ()

  //····················································································································

  final var selectedBoardXUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedBoardXUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedBoardXUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedBoardXUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedBoardXUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedBoardXUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'selectedBoardYUnit' stored property
  //····················································································································

//  private final var selectedBoardYUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_selectedBoardYUnit = EBWeakEventSet ()

  //····················································································································

  final var selectedBoardYUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedBoardYUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedBoardYUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedBoardYUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedBoardYUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedBoardYUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' stored property
  //····················································································································

//  private final var boardLimitWidth_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final var boardLimitWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardLimitWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidthUnit' stored property
  //····················································································································

//  private final var boardLimitWidthUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  final var boardLimitWidthUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardLimitWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardLimitWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'arrowMagnitude' stored property
  //····················································································································

//  private final var arrowMagnitude_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_arrowMagnitude = EBWeakEventSet ()

  //····················································································································

  final var arrowMagnitude_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.arrowMagnitude_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arrowMagnitude.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.arrowMagnitude_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arrowMagnitude.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.arrowMagnitude_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'arrowMagnitudeUnit' stored property
  //····················································································································

//  private final var arrowMagnitudeUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_arrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  final var arrowMagnitudeUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.arrowMagnitudeUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arrowMagnitudeUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.arrowMagnitudeUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arrowMagnitudeUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.arrowMagnitudeUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'shiftArrowMagnitude' stored property
  //····················································································································

//  private final var shiftArrowMagnitude_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_shiftArrowMagnitude = EBWeakEventSet ()

  //····················································································································

  final var shiftArrowMagnitude_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.shiftArrowMagnitude_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitude.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.shiftArrowMagnitude_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitude.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.shiftArrowMagnitude_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'shiftArrowMagnitudeUnit' stored property
  //····················································································································

//  private final var shiftArrowMagnitudeUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_shiftArrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  final var shiftArrowMagnitudeUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.shiftArrowMagnitudeUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitudeUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.shiftArrowMagnitudeUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitudeUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.shiftArrowMagnitudeUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mPDFBoardBackgroundColor' stored property
  //····················································································································

//  private final var mPDFBoardBackgroundColor_property = EBGenericPropertyProxy <NSColor?> ()
  private final var mObserversOf_mPDFBoardBackgroundColor = EBWeakEventSet ()

  //····················································································································

  final var mPDFBoardBackgroundColor_property_selection : EBSelection <NSColor?> {
    if let model = self.propval {
      switch (model.mPDFBoardBackgroundColor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPDFBoardBackgroundColor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPDFBoardBackgroundColor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPDFBoardBackgroundColor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPDFBoardBackgroundColor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPDFBoardBackgroundColor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPDFBoardBackgroundColor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mArtworkName' stored property
  //····················································································································

//  private final var mArtworkName_property = EBGenericPropertyProxy <String?> ()
  private final var mObserversOf_mArtworkName = EBWeakEventSet ()

  //····················································································································

  final var mArtworkName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mArtworkName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mArtworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mArtworkName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mArtworkName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mArtworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mArtworkName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mArtworkName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mArtworkVersion' stored property
  //····················································································································

//  private final var mArtworkVersion_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mArtworkVersion = EBWeakEventSet ()

  //····················································································································

  final var mArtworkVersion_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mArtworkVersion_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mArtworkVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mArtworkVersion.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mArtworkVersion_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mArtworkVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mArtworkVersion.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mArtworkVersion_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'modelNames' transient property
  //····················································································································

  private final var mObserversOf_modelNames = EBWeakEventSet ()

  //····················································································································

  final var modelNames_property_selection : EBSelection <StringTagArray?> {
    if let model = self.propval {
      switch (model.modelNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelNames.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelNames.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardRect' transient property
  //····················································································································

  private final var mObserversOf_boardRect = EBWeakEventSet ()

  //····················································································································

  final var boardRect_property_selection : EBSelection <CanariRect?> {
    if let model = self.propval {
      switch (model.boardRect_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardRect.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardRect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardRect.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardRect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardDisplayRect' transient property
  //····················································································································

  private final var mObserversOf_boardDisplayRect = EBWeakEventSet ()

  //····················································································································

  final var boardDisplayRect_property_selection : EBSelection <CanariRect?> {
    if let model = self.propval {
      switch (model.boardDisplayRect_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardDisplayRect.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardDisplayRect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardDisplayRect.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardDisplayRect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardWidth' transient property
  //····················································································································

  private final var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  final var boardWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardHeight' transient property
  //····················································································································

  private final var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  final var boardHeight_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardHeight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardOutlineRectDisplay' transient property
  //····················································································································

  private final var mObserversOf_boardOutlineRectDisplay = EBWeakEventSet ()

  //····················································································································

  final var boardOutlineRectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.boardOutlineRectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardOutlineRectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardOutlineRectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardOutlineRectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardOutlineRectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardOutlineRectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardOutlineRectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: boardModels
  //····················································································································

  private final var mObserversOf_boardModels = EBWeakEventSet ()

  //····················································································································

  final var boardModels_property_selection : EBSelection <[BoardModel]> {
    if let model = self.propval {
      switch (model.boardModels_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_boardModels (_ inObserver : EBEvent) {
    self.mObserversOf_boardModels.insert (inObserver)
    if let object = self.propval {
      object.boardModels_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardModels (_ inObserver : EBEvent) {
    self.mObserversOf_boardModels.remove (inObserver)
    if let object = self.propval {
      object.boardModels_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: boardInstances
  //····················································································································

  private final var mObserversOf_boardInstances = EBWeakEventSet ()

  //····················································································································

  final var boardInstances_property_selection : EBSelection <[MergerBoardInstance]> {
    if let model = self.propval {
      switch (model.boardInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_boardInstances (_ inObserver : EBEvent) {
    self.mObserversOf_boardInstances.insert (inObserver)
    if let object = self.propval {
      object.boardInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInstances (_ inObserver : EBEvent) {
    self.mObserversOf_boardInstances.remove (inObserver)
    if let object = self.propval {
      object.boardInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

 // override init () {
//    super.init ()
  //--- Configure selectedPageIndex simple stored property
 /*   self.selectedPageIndex_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.selectedPageIndex_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.selectedPageIndex_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.selectedPageIndex_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.selectedPageIndex_property) */
  //--- Configure zoom simple stored property
 /*   self.zoom_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.zoom_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.zoom_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.zoom_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.zoom_property) */
  //--- Configure automaticBoardSize simple stored property
 /*   self.automaticBoardSize_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.automaticBoardSize_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.automaticBoardSize_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.automaticBoardSize_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.automaticBoardSize_property) */
  //--- Configure boardManualWidth simple stored property
 /*   self.boardManualWidth_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.boardManualWidth_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.boardManualWidth_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.boardManualWidth_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.boardManualWidth_property) */
  //--- Configure boardManualHeight simple stored property
 /*   self.boardManualHeight_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.boardManualHeight_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.boardManualHeight_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.boardManualHeight_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.boardManualHeight_property) */
  //--- Configure boardWidthUnit simple stored property
 /*   self.boardWidthUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.boardWidthUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.boardWidthUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.boardWidthUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.boardWidthUnit_property) */
  //--- Configure boardHeightUnit simple stored property
 /*   self.boardHeightUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.boardHeightUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.boardHeightUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.boardHeightUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.boardHeightUnit_property) */
  //--- Configure overlapingArrangment simple stored property
 /*   self.overlapingArrangment_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.overlapingArrangment_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.overlapingArrangment_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.overlapingArrangment_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.overlapingArrangment_property) */
  //--- Configure selectedBoardXUnit simple stored property
 /*   self.selectedBoardXUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.selectedBoardXUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.selectedBoardXUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.selectedBoardXUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.selectedBoardXUnit_property) */
  //--- Configure selectedBoardYUnit simple stored property
 /*   self.selectedBoardYUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.selectedBoardYUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.selectedBoardYUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.selectedBoardYUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.selectedBoardYUnit_property) */
  //--- Configure boardLimitWidth simple stored property
 /*   self.boardLimitWidth_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.boardLimitWidth_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.boardLimitWidth_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.boardLimitWidth_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.boardLimitWidth_property) */
  //--- Configure boardLimitWidthUnit simple stored property
 /*   self.boardLimitWidthUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.boardLimitWidthUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.boardLimitWidthUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.boardLimitWidthUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.boardLimitWidthUnit_property) */
  //--- Configure arrowMagnitude simple stored property
 /*   self.arrowMagnitude_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.arrowMagnitude_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.arrowMagnitude_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.arrowMagnitude_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.arrowMagnitude_property) */
  //--- Configure arrowMagnitudeUnit simple stored property
 /*   self.arrowMagnitudeUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.arrowMagnitudeUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.arrowMagnitudeUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.arrowMagnitudeUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.arrowMagnitudeUnit_property) */
  //--- Configure shiftArrowMagnitude simple stored property
 /*   self.shiftArrowMagnitude_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.shiftArrowMagnitude_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.shiftArrowMagnitude_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.shiftArrowMagnitude_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.shiftArrowMagnitude_property) */
  //--- Configure shiftArrowMagnitudeUnit simple stored property
 /*   self.shiftArrowMagnitudeUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.shiftArrowMagnitudeUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.shiftArrowMagnitudeUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.shiftArrowMagnitudeUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.shiftArrowMagnitudeUnit_property) */
  //--- Configure mPDFBoardBackgroundColor simple stored property
 /*   self.mPDFBoardBackgroundColor_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mPDFBoardBackgroundColor_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mPDFBoardBackgroundColor_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mPDFBoardBackgroundColor_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mPDFBoardBackgroundColor_property) */
  //--- Configure mArtworkName simple stored property
 /*   self.mArtworkName_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mArtworkName_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mArtworkName_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mArtworkName_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mArtworkName_property) */
  //--- Configure mArtworkVersion simple stored property
 /*   self.mArtworkVersion_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mArtworkVersion_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mArtworkVersion_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mArtworkVersion_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mArtworkVersion_property) */
 // }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject MergerRoot
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_MergerRoot : ReadOnlyObject_MergerRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_MergerRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_MergerRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : MergerRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < MergerRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : MergerRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_MergerRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_MergerRoot : ReadOnlyObject_MergerRoot {

  //····················································································································
 
  func setProp (_ inValue : MergerRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_MergerRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_MergerRoot : ReadWriteObject_MergerRoot {

  //····················································································································

  private var mModel : ReadWriteObject_MergerRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_MergerRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : MergerRoot?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : MergerRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < MergerRoot? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : MergerRoot? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_MergerRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_MergerRoot : ReadWriteObject_MergerRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : MergerRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : MergerRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : MergerRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < MergerRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : MergerRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : MergerRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

