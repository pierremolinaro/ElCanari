//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_MergerRoot 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_MergerRoot : ReadOnlyAbstractObjectProperty <MergerRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : MergerRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.selectedPageIndex_property.removeEBObserversFrom (&self.mObserversOf_selectedPageIndex) // Stored property
    inOldValue?.zoom_property.removeEBObserversFrom (&self.mObserversOf_zoom) // Stored property
    inOldValue?.automaticBoardSize_property.removeEBObserversFrom (&self.mObserversOf_automaticBoardSize) // Stored property
    inOldValue?.boardManualWidth_property.removeEBObserversFrom (&self.mObserversOf_boardManualWidth) // Stored property
    inOldValue?.boardManualHeight_property.removeEBObserversFrom (&self.mObserversOf_boardManualHeight) // Stored property
    inOldValue?.boardWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_boardWidthUnit) // Stored property
    inOldValue?.boardHeightUnit_property.removeEBObserversFrom (&self.mObserversOf_boardHeightUnit) // Stored property
    inOldValue?.overlapingArrangment_property.removeEBObserversFrom (&self.mObserversOf_overlapingArrangment) // Stored property
    inOldValue?.selectedBoardXUnit_property.removeEBObserversFrom (&self.mObserversOf_selectedBoardXUnit) // Stored property
    inOldValue?.selectedBoardYUnit_property.removeEBObserversFrom (&self.mObserversOf_selectedBoardYUnit) // Stored property
    inOldValue?.boardLimitWidth_property.removeEBObserversFrom (&self.mObserversOf_boardLimitWidth) // Stored property
    inOldValue?.boardLimitWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_boardLimitWidthUnit) // Stored property
    inOldValue?.arrowMagnitude_property.removeEBObserversFrom (&self.mObserversOf_arrowMagnitude) // Stored property
    inOldValue?.arrowMagnitudeUnit_property.removeEBObserversFrom (&self.mObserversOf_arrowMagnitudeUnit) // Stored property
    inOldValue?.shiftArrowMagnitude_property.removeEBObserversFrom (&self.mObserversOf_shiftArrowMagnitude) // Stored property
    inOldValue?.shiftArrowMagnitudeUnit_property.removeEBObserversFrom (&self.mObserversOf_shiftArrowMagnitudeUnit) // Stored property
    inOldValue?.artworkName_property.removeEBObserversFrom (&self.mObserversOf_artworkName) // Stored property
    inOldValue?.generateGerberProductFile_property.removeEBObserversFrom (&self.mObserversOf_generateGerberProductFile) // Stored property
    inOldValue?.generatePDFProductFile_property.removeEBObserversFrom (&self.mObserversOf_generatePDFProductFile) // Stored property
    inOldValue?.generatedBoardArchiveFormat_property.removeEBObserversFrom (&self.mObserversOf_generatedBoardArchiveFormat) // Stored property
    inOldValue?.modelNames_property.removeEBObserversFrom (&self.mObserversOf_modelNames) // Transient property
    inOldValue?.boardRect_property.removeEBObserversFrom (&self.mObserversOf_boardRect) // Transient property
    inOldValue?.boardDisplayRect_property.removeEBObserversFrom (&self.mObserversOf_boardDisplayRect) // Transient property
    inOldValue?.boardWidth_property.removeEBObserversFrom (&self.mObserversOf_boardWidth) // Transient property
    inOldValue?.boardHeight_property.removeEBObserversFrom (&self.mObserversOf_boardHeight) // Transient property
    inOldValue?.boardOutlineRectDisplay_property.removeEBObserversFrom (&self.mObserversOf_boardOutlineRectDisplay) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.selectedPageIndex_property.addEBObserversFrom (&self.mObserversOf_selectedPageIndex) // Stored property
    self.mInternalValue?.zoom_property.addEBObserversFrom (&self.mObserversOf_zoom) // Stored property
    self.mInternalValue?.automaticBoardSize_property.addEBObserversFrom (&self.mObserversOf_automaticBoardSize) // Stored property
    self.mInternalValue?.boardManualWidth_property.addEBObserversFrom (&self.mObserversOf_boardManualWidth) // Stored property
    self.mInternalValue?.boardManualHeight_property.addEBObserversFrom (&self.mObserversOf_boardManualHeight) // Stored property
    self.mInternalValue?.boardWidthUnit_property.addEBObserversFrom (&self.mObserversOf_boardWidthUnit) // Stored property
    self.mInternalValue?.boardHeightUnit_property.addEBObserversFrom (&self.mObserversOf_boardHeightUnit) // Stored property
    self.mInternalValue?.overlapingArrangment_property.addEBObserversFrom (&self.mObserversOf_overlapingArrangment) // Stored property
    self.mInternalValue?.selectedBoardXUnit_property.addEBObserversFrom (&self.mObserversOf_selectedBoardXUnit) // Stored property
    self.mInternalValue?.selectedBoardYUnit_property.addEBObserversFrom (&self.mObserversOf_selectedBoardYUnit) // Stored property
    self.mInternalValue?.boardLimitWidth_property.addEBObserversFrom (&self.mObserversOf_boardLimitWidth) // Stored property
    self.mInternalValue?.boardLimitWidthUnit_property.addEBObserversFrom (&self.mObserversOf_boardLimitWidthUnit) // Stored property
    self.mInternalValue?.arrowMagnitude_property.addEBObserversFrom (&self.mObserversOf_arrowMagnitude) // Stored property
    self.mInternalValue?.arrowMagnitudeUnit_property.addEBObserversFrom (&self.mObserversOf_arrowMagnitudeUnit) // Stored property
    self.mInternalValue?.shiftArrowMagnitude_property.addEBObserversFrom (&self.mObserversOf_shiftArrowMagnitude) // Stored property
    self.mInternalValue?.shiftArrowMagnitudeUnit_property.addEBObserversFrom (&self.mObserversOf_shiftArrowMagnitudeUnit) // Stored property
    self.mInternalValue?.artworkName_property.addEBObserversFrom (&self.mObserversOf_artworkName) // Stored property
    self.mInternalValue?.generateGerberProductFile_property.addEBObserversFrom (&self.mObserversOf_generateGerberProductFile) // Stored property
    self.mInternalValue?.generatePDFProductFile_property.addEBObserversFrom (&self.mObserversOf_generatePDFProductFile) // Stored property
    self.mInternalValue?.generatedBoardArchiveFormat_property.addEBObserversFrom (&self.mObserversOf_generatedBoardArchiveFormat) // Stored property
    self.mInternalValue?.modelNames_property.addEBObserversFrom (&self.mObserversOf_modelNames) // Transient property
    self.mInternalValue?.boardRect_property.addEBObserversFrom (&self.mObserversOf_boardRect) // Transient property
    self.mInternalValue?.boardDisplayRect_property.addEBObserversFrom (&self.mObserversOf_boardDisplayRect) // Transient property
    self.mInternalValue?.boardWidth_property.addEBObserversFrom (&self.mObserversOf_boardWidth) // Transient property
    self.mInternalValue?.boardHeight_property.addEBObserversFrom (&self.mObserversOf_boardHeight) // Transient property
    self.mInternalValue?.boardOutlineRectDisplay_property.addEBObserversFrom (&self.mObserversOf_boardOutlineRectDisplay) // Transient property
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  var zoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.zoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.zoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.zoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'automaticBoardSize' stored property
  //····················································································································

  private var mObserversOf_automaticBoardSize = EBWeakEventSet ()

  //····················································································································

  var automaticBoardSize_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.automaticBoardSize_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_automaticBoardSize.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.automaticBoardSize_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_automaticBoardSize.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.automaticBoardSize_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_automaticBoardSize_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_automaticBoardSize.apply { (_ observer : EBEvent) in
        managedObject.automaticBoardSize_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_automaticBoardSize_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_automaticBoardSize.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.automaticBoardSize_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardManualWidth' stored property
  //····················································································································

  private var mObserversOf_boardManualWidth = EBWeakEventSet ()

  //····················································································································

  var boardManualWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardManualWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardManualWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardManualWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardManualWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardManualWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardManualWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardManualWidth.apply { (_ observer : EBEvent) in
        managedObject.boardManualWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardManualWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardManualWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardManualWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardManualHeight' stored property
  //····················································································································

  private var mObserversOf_boardManualHeight = EBWeakEventSet ()

  //····················································································································

  var boardManualHeight_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardManualHeight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardManualHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardManualHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardManualHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardManualHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardManualHeight_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardManualHeight.apply { (_ observer : EBEvent) in
        managedObject.boardManualHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardManualHeight_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardManualHeight.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardManualHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  var boardWidthUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidthUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardWidthUnit.apply { (_ observer : EBEvent) in
        managedObject.boardWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidthUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeightUnit' stored property
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  var boardHeightUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardHeightUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardHeightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardHeightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardHeightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardHeightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeightUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardHeightUnit.apply { (_ observer : EBEvent) in
        managedObject.boardHeightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeightUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardHeightUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardHeightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'overlapingArrangment' stored property
  //····················································································································

  private var mObserversOf_overlapingArrangment = EBWeakEventSet ()

  //····················································································································

  var overlapingArrangment_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.overlapingArrangment_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_overlapingArrangment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.overlapingArrangment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_overlapingArrangment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.overlapingArrangment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_overlapingArrangment_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_overlapingArrangment.apply { (_ observer : EBEvent) in
        managedObject.overlapingArrangment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_overlapingArrangment_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_overlapingArrangment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.overlapingArrangment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedBoardXUnit' stored property
  //····················································································································

  private var mObserversOf_selectedBoardXUnit = EBWeakEventSet ()

  //····················································································································

  var selectedBoardXUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedBoardXUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedBoardXUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedBoardXUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedBoardXUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedBoardXUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedBoardXUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedBoardXUnit.apply { (_ observer : EBEvent) in
        managedObject.selectedBoardXUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedBoardXUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_selectedBoardXUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedBoardXUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedBoardYUnit' stored property
  //····················································································································

  private var mObserversOf_selectedBoardYUnit = EBWeakEventSet ()

  //····················································································································

  var selectedBoardYUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedBoardYUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedBoardYUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedBoardYUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedBoardYUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedBoardYUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedBoardYUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedBoardYUnit.apply { (_ observer : EBEvent) in
        managedObject.selectedBoardYUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedBoardYUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_selectedBoardYUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedBoardYUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  var boardLimitWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardLimitWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitWidth.apply { (_ observer : EBEvent) in
        managedObject.boardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardLimitWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidthUnit' stored property
  //····················································································································

  private var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  var boardLimitWidthUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardLimitWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.boardLimitWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidthUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitWidthUnit.apply { (_ observer : EBEvent) in
        managedObject.boardLimitWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidthUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_boardLimitWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.boardLimitWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arrowMagnitude' stored property
  //····················································································································

  private var mObserversOf_arrowMagnitude = EBWeakEventSet ()

  //····················································································································

  var arrowMagnitude_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.arrowMagnitude_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arrowMagnitude.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.arrowMagnitude_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arrowMagnitude.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.arrowMagnitude_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_arrowMagnitude_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_arrowMagnitude.apply { (_ observer : EBEvent) in
        managedObject.arrowMagnitude_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arrowMagnitude_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_arrowMagnitude.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.arrowMagnitude_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arrowMagnitudeUnit' stored property
  //····················································································································

  private var mObserversOf_arrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  var arrowMagnitudeUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.arrowMagnitudeUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arrowMagnitudeUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.arrowMagnitudeUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arrowMagnitudeUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.arrowMagnitudeUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_arrowMagnitudeUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_arrowMagnitudeUnit.apply { (_ observer : EBEvent) in
        managedObject.arrowMagnitudeUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arrowMagnitudeUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_arrowMagnitudeUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.arrowMagnitudeUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'shiftArrowMagnitude' stored property
  //····················································································································

  private var mObserversOf_shiftArrowMagnitude = EBWeakEventSet ()

  //····················································································································

  var shiftArrowMagnitude_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.shiftArrowMagnitude_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitude.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.shiftArrowMagnitude_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitude.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.shiftArrowMagnitude_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_shiftArrowMagnitude_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_shiftArrowMagnitude.apply { (_ observer : EBEvent) in
        managedObject.shiftArrowMagnitude_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_shiftArrowMagnitude_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_shiftArrowMagnitude.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.shiftArrowMagnitude_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'shiftArrowMagnitudeUnit' stored property
  //····················································································································

  private var mObserversOf_shiftArrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  var shiftArrowMagnitudeUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.shiftArrowMagnitudeUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitudeUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.shiftArrowMagnitudeUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_shiftArrowMagnitudeUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.shiftArrowMagnitudeUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_shiftArrowMagnitudeUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_shiftArrowMagnitudeUnit.apply { (_ observer : EBEvent) in
        managedObject.shiftArrowMagnitudeUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_shiftArrowMagnitudeUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_shiftArrowMagnitudeUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.shiftArrowMagnitudeUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'artworkName' stored property
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  var artworkName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.artworkName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_artworkName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.artworkName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_artworkName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.artworkName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_artworkName_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_artworkName.apply { (_ observer : EBEvent) in
        managedObject.artworkName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_artworkName_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_artworkName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.artworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generateGerberProductFile' stored property
  //····················································································································

  private var mObserversOf_generateGerberProductFile = EBWeakEventSet ()

  //····················································································································

  var generateGerberProductFile_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.generateGerberProductFile_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_generateGerberProductFile.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.generateGerberProductFile_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_generateGerberProductFile.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.generateGerberProductFile_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_generateGerberProductFile_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_generateGerberProductFile.apply { (_ observer : EBEvent) in
        managedObject.generateGerberProductFile_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generateGerberProductFile_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_generateGerberProductFile.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generateGerberProductFile_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generatePDFProductFile' stored property
  //····················································································································

  private var mObserversOf_generatePDFProductFile = EBWeakEventSet ()

  //····················································································································

  var generatePDFProductFile_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.generatePDFProductFile_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_generatePDFProductFile.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.generatePDFProductFile_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_generatePDFProductFile.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.generatePDFProductFile_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_generatePDFProductFile_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_generatePDFProductFile.apply { (_ observer : EBEvent) in
        managedObject.generatePDFProductFile_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generatePDFProductFile_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_generatePDFProductFile.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generatePDFProductFile_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'generatedBoardArchiveFormat' stored property
  //····················································································································

  private var mObserversOf_generatedBoardArchiveFormat = EBWeakEventSet ()

  //····················································································································

  var generatedBoardArchiveFormat_property_selection : EBSelection <BoardArchiveFormat?> {
    if let model = self.propval {
      switch (model.generatedBoardArchiveFormat_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_generatedBoardArchiveFormat.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.generatedBoardArchiveFormat_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_generatedBoardArchiveFormat.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.generatedBoardArchiveFormat_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_generatedBoardArchiveFormat_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_generatedBoardArchiveFormat.apply { (_ observer : EBEvent) in
        managedObject.generatedBoardArchiveFormat_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_generatedBoardArchiveFormat_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_generatedBoardArchiveFormat.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.generatedBoardArchiveFormat_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelNames' transient property
  //····················································································································

  private var mObserversOf_modelNames = EBWeakEventSet ()

  //····················································································································

  var modelNames_property_selection : EBSelection <StringTagArray?> {
    if let model = self.propval {
      switch (model.modelNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.modelNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_modelNames_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_modelNames.apply { (_ observer : EBEvent) in
        managedObject.modelNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelNames_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_modelNames.apply { (_ observer : EBEvent) in
        managedObject.modelNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardRect' transient property
  //····················································································································

  private var mObserversOf_boardRect = EBWeakEventSet ()

  //····················································································································

  var boardRect_property_selection : EBSelection <CanariRect?> {
    if let model = self.propval {
      switch (model.boardRect_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardRect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardRect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardRect_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardRect.apply { (_ observer : EBEvent) in
        managedObject.boardRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardRect_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardRect.apply { (_ observer : EBEvent) in
        managedObject.boardRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardDisplayRect' transient property
  //····················································································································

  private var mObserversOf_boardDisplayRect = EBWeakEventSet ()

  //····················································································································

  var boardDisplayRect_property_selection : EBSelection <CanariRect?> {
    if let model = self.propval {
      switch (model.boardDisplayRect_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardDisplayRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardDisplayRect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardDisplayRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardDisplayRect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardDisplayRect_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardDisplayRect.apply { (_ observer : EBEvent) in
        managedObject.boardDisplayRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardDisplayRect_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardDisplayRect.apply { (_ observer : EBEvent) in
        managedObject.boardDisplayRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardWidth' transient property
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  var boardWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardWidth.apply { (_ observer : EBEvent) in
        managedObject.boardWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardWidth.apply { (_ observer : EBEvent) in
        managedObject.boardWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardHeight' transient property
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  var boardHeight_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardHeight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardHeight_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardHeight.apply { (_ observer : EBEvent) in
        managedObject.boardHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardHeight_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardHeight.apply { (_ observer : EBEvent) in
        managedObject.boardHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardOutlineRectDisplay' transient property
  //····················································································································

  private var mObserversOf_boardOutlineRectDisplay = EBWeakEventSet ()

  //····················································································································

  var boardOutlineRectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.boardOutlineRectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardOutlineRectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardOutlineRectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardOutlineRectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardOutlineRectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardOutlineRectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardOutlineRectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardOutlineRectDisplay_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardOutlineRectDisplay.apply { (_ observer : EBEvent) in
        managedObject.boardOutlineRectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardOutlineRectDisplay_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardOutlineRectDisplay.apply { (_ observer : EBEvent) in
        managedObject.boardOutlineRectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: boardModels
  //····················································································································

  private var mObserversOf_boardModels = EBWeakEventSet ()

  //····················································································································

  var boardModels_property_selection : EBSelection <[BoardModel]> {
    if let model = self.propval {
      switch (model.boardModels_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_boardModels (_ inObserver : EBEvent) {
    self.mObserversOf_boardModels.insert (inObserver)
    if let object = self.propval {
      object.boardModels_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardModels (_ inObserver : EBEvent) {
    self.mObserversOf_boardModels.remove (inObserver)
    if let object = self.propval {
      object.boardModels_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: boardInstances
  //····················································································································

  private var mObserversOf_boardInstances = EBWeakEventSet ()

  //····················································································································

  var boardInstances_property_selection : EBSelection <[MergerBoardInstance]> {
    if let model = self.propval {
      switch (model.boardInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_boardInstances (_ inObserver : EBEvent) {
    self.mObserversOf_boardInstances.insert (inObserver)
    if let object = self.propval {
      object.boardInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInstances (_ inObserver : EBEvent) {
    self.mObserversOf_boardInstances.remove (inObserver)
    if let object = self.propval {
      object.boardInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_MergerRoot : ReadOnlyObject_MergerRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_MergerRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_MergerRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : MergerRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < MergerRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : MergerRoot? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_MergerRoot : ReadOnlyObject_MergerRoot {

  //····················································································································
 
  func setProp (_ inValue : MergerRoot?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_MergerRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_MergerRoot : ReadWriteObject_MergerRoot {

  //····················································································································

  private var mModel : ReadWriteObject_MergerRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_MergerRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : MergerRoot?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : MergerRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < MergerRoot? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : MergerRoot? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_MergerRoot 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_MergerRoot : ReadWriteObject_MergerRoot, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : MergerRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : MergerRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : MergerRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : MergerRoot?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < MergerRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : MergerRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : MergerRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

