//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_MergerRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_MergerRoot : ReadOnlyAbstractObjectProperty <MergerRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : MergerRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.selectedPageIndex_property.removeEBObserver (self.selectedPageIndex_property) // Stored property
    inOldValue?.zoom_property.removeEBObserver (self.zoom_property) // Stored property
    inOldValue?.automaticBoardSize_property.removeEBObserver (self.automaticBoardSize_property) // Stored property
    inOldValue?.boardManualWidth_property.removeEBObserver (self.boardManualWidth_property) // Stored property
    inOldValue?.boardManualHeight_property.removeEBObserver (self.boardManualHeight_property) // Stored property
    inOldValue?.boardWidthUnit_property.removeEBObserver (self.boardWidthUnit_property) // Stored property
    inOldValue?.boardHeightUnit_property.removeEBObserver (self.boardHeightUnit_property) // Stored property
    inOldValue?.overlapingArrangment_property.removeEBObserver (self.overlapingArrangment_property) // Stored property
    inOldValue?.selectedBoardXUnit_property.removeEBObserver (self.selectedBoardXUnit_property) // Stored property
    inOldValue?.selectedBoardYUnit_property.removeEBObserver (self.selectedBoardYUnit_property) // Stored property
    inOldValue?.boardLimitWidth_property.removeEBObserver (self.boardLimitWidth_property) // Stored property
    inOldValue?.boardLimitWidthUnit_property.removeEBObserver (self.boardLimitWidthUnit_property) // Stored property
    inOldValue?.arrowMagnitude_property.removeEBObserver (self.arrowMagnitude_property) // Stored property
    inOldValue?.arrowMagnitudeUnit_property.removeEBObserver (self.arrowMagnitudeUnit_property) // Stored property
    inOldValue?.shiftArrowMagnitude_property.removeEBObserver (self.shiftArrowMagnitude_property) // Stored property
    inOldValue?.shiftArrowMagnitudeUnit_property.removeEBObserver (self.shiftArrowMagnitudeUnit_property) // Stored property
    inOldValue?.mPDFBoardBackgroundColor_property.removeEBObserver (self.mPDFBoardBackgroundColor_property) // Stored property
    inOldValue?.mArtworkName_property.removeEBObserver (self.mArtworkName_property) // Stored property
    inOldValue?.mArtworkVersion_property.removeEBObserver (self.mArtworkVersion_property) // Stored property
    inOldValue?.modelNames_property.removeEBObserver (self.modelNames_property) // Transient property
    inOldValue?.boardRect_property.removeEBObserver (self.boardRect_property) // Transient property
    inOldValue?.boardDisplayRect_property.removeEBObserver (self.boardDisplayRect_property) // Transient property
    inOldValue?.boardWidth_property.removeEBObserver (self.boardWidth_property) // Transient property
    inOldValue?.boardHeight_property.removeEBObserver (self.boardHeight_property) // Transient property
    inOldValue?.boardOutlineRectDisplay_property.removeEBObserver (self.boardOutlineRectDisplay_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.selectedPageIndex_property.addEBObserver (self.selectedPageIndex_property) // Stored property
    self.mInternalValue?.zoom_property.addEBObserver (self.zoom_property) // Stored property
    self.mInternalValue?.automaticBoardSize_property.addEBObserver (self.automaticBoardSize_property) // Stored property
    self.mInternalValue?.boardManualWidth_property.addEBObserver (self.boardManualWidth_property) // Stored property
    self.mInternalValue?.boardManualHeight_property.addEBObserver (self.boardManualHeight_property) // Stored property
    self.mInternalValue?.boardWidthUnit_property.addEBObserver (self.boardWidthUnit_property) // Stored property
    self.mInternalValue?.boardHeightUnit_property.addEBObserver (self.boardHeightUnit_property) // Stored property
    self.mInternalValue?.overlapingArrangment_property.addEBObserver (self.overlapingArrangment_property) // Stored property
    self.mInternalValue?.selectedBoardXUnit_property.addEBObserver (self.selectedBoardXUnit_property) // Stored property
    self.mInternalValue?.selectedBoardYUnit_property.addEBObserver (self.selectedBoardYUnit_property) // Stored property
    self.mInternalValue?.boardLimitWidth_property.addEBObserver (self.boardLimitWidth_property) // Stored property
    self.mInternalValue?.boardLimitWidthUnit_property.addEBObserver (self.boardLimitWidthUnit_property) // Stored property
    self.mInternalValue?.arrowMagnitude_property.addEBObserver (self.arrowMagnitude_property) // Stored property
    self.mInternalValue?.arrowMagnitudeUnit_property.addEBObserver (self.arrowMagnitudeUnit_property) // Stored property
    self.mInternalValue?.shiftArrowMagnitude_property.addEBObserver (self.shiftArrowMagnitude_property) // Stored property
    self.mInternalValue?.shiftArrowMagnitudeUnit_property.addEBObserver (self.shiftArrowMagnitudeUnit_property) // Stored property
    self.mInternalValue?.mPDFBoardBackgroundColor_property.addEBObserver (self.mPDFBoardBackgroundColor_property) // Stored property
    self.mInternalValue?.mArtworkName_property.addEBObserver (self.mArtworkName_property) // Stored property
    self.mInternalValue?.mArtworkVersion_property.addEBObserver (self.mArtworkVersion_property) // Stored property
    self.mInternalValue?.modelNames_property.addEBObserver (self.modelNames_property) // Transient property
    self.mInternalValue?.boardRect_property.addEBObserver (self.boardRect_property) // Transient property
    self.mInternalValue?.boardDisplayRect_property.addEBObserver (self.boardDisplayRect_property) // Transient property
    self.mInternalValue?.boardWidth_property.addEBObserver (self.boardWidth_property) // Transient property
    self.mInternalValue?.boardHeight_property.addEBObserver (self.boardHeight_property) // Transient property
    self.mInternalValue?.boardOutlineRectDisplay_property.addEBObserver (self.boardOutlineRectDisplay_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.selectedPageIndex_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectedPageIndex_property.prop ?? .empty }
    self.selectedPageIndex_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.selectedPageIndex_property.setProp (inValue) }
    self.zoom_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.zoom_property.prop ?? .empty }
    self.zoom_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.zoom_property.setProp (inValue) }
    self.automaticBoardSize_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.automaticBoardSize_property.prop ?? .empty }
    self.automaticBoardSize_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.automaticBoardSize_property.setProp (inValue) }
    self.boardManualWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardManualWidth_property.prop ?? .empty }
    self.boardManualWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.boardManualWidth_property.setProp (inValue) }
    self.boardManualHeight_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardManualHeight_property.prop ?? .empty }
    self.boardManualHeight_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.boardManualHeight_property.setProp (inValue) }
    self.boardWidthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardWidthUnit_property.prop ?? .empty }
    self.boardWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.boardWidthUnit_property.setProp (inValue) }
    self.boardHeightUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardHeightUnit_property.prop ?? .empty }
    self.boardHeightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.boardHeightUnit_property.setProp (inValue) }
    self.overlapingArrangment_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.overlapingArrangment_property.prop ?? .empty }
    self.overlapingArrangment_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.overlapingArrangment_property.setProp (inValue) }
    self.selectedBoardXUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectedBoardXUnit_property.prop ?? .empty }
    self.selectedBoardXUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.selectedBoardXUnit_property.setProp (inValue) }
    self.selectedBoardYUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectedBoardYUnit_property.prop ?? .empty }
    self.selectedBoardYUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.selectedBoardYUnit_property.setProp (inValue) }
    self.boardLimitWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardLimitWidth_property.prop ?? .empty }
    self.boardLimitWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.boardLimitWidth_property.setProp (inValue) }
    self.boardLimitWidthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardLimitWidthUnit_property.prop ?? .empty }
    self.boardLimitWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.boardLimitWidthUnit_property.setProp (inValue) }
    self.arrowMagnitude_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.arrowMagnitude_property.prop ?? .empty }
    self.arrowMagnitude_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.arrowMagnitude_property.setProp (inValue) }
    self.arrowMagnitudeUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.arrowMagnitudeUnit_property.prop ?? .empty }
    self.arrowMagnitudeUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.arrowMagnitudeUnit_property.setProp (inValue) }
    self.shiftArrowMagnitude_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.shiftArrowMagnitude_property.prop ?? .empty }
    self.shiftArrowMagnitude_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.shiftArrowMagnitude_property.setProp (inValue) }
    self.shiftArrowMagnitudeUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.shiftArrowMagnitudeUnit_property.prop ?? .empty }
    self.shiftArrowMagnitudeUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.shiftArrowMagnitudeUnit_property.setProp (inValue) }
    self.mPDFBoardBackgroundColor_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mPDFBoardBackgroundColor_property.prop ?? .empty }
    self.mPDFBoardBackgroundColor_property.mWriteModelFunction = { [weak self] (inValue : NSColor) in self?.mInternalValue?.mPDFBoardBackgroundColor_property.setProp (inValue) }
    self.mArtworkName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mArtworkName_property.prop ?? .empty }
    self.mArtworkName_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mArtworkName_property.setProp (inValue) }
    self.mArtworkVersion_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mArtworkVersion_property.prop ?? .empty }
    self.mArtworkVersion_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mArtworkVersion_property.setProp (inValue) }
    self.modelNames_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.modelNames_property.prop ?? .empty }
    self.boardRect_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardRect_property.prop ?? .empty }
    self.boardDisplayRect_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardDisplayRect_property.prop ?? .empty }
    self.boardWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardWidth_property.prop ?? .empty }
    self.boardHeight_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardHeight_property.prop ?? .empty }
    self.boardOutlineRectDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardOutlineRectDisplay_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'selectedPageIndex' stored property
  //····················································································································

  let selectedPageIndex_property = EBPropertyProxy_Int ()

  var selectedPageIndex_property_selection : EBSelection <Int> {
    switch (self.selectedPageIndex_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'zoom' stored property
  //····················································································································

  let zoom_property = EBPropertyProxy_Int ()

  var zoom_property_selection : EBSelection <Int> {
    switch (self.zoom_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'automaticBoardSize' stored property
  //····················································································································

  let automaticBoardSize_property = EBPropertyProxy_Bool ()

  var automaticBoardSize_property_selection : EBSelection <Bool> {
    switch (self.automaticBoardSize_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'boardManualWidth' stored property
  //····················································································································

  let boardManualWidth_property = EBPropertyProxy_Int ()

  var boardManualWidth_property_selection : EBSelection <Int> {
    switch (self.boardManualWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'boardManualHeight' stored property
  //····················································································································

  let boardManualHeight_property = EBPropertyProxy_Int ()

  var boardManualHeight_property_selection : EBSelection <Int> {
    switch (self.boardManualHeight_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'boardWidthUnit' stored property
  //····················································································································

  let boardWidthUnit_property = EBPropertyProxy_Int ()

  var boardWidthUnit_property_selection : EBSelection <Int> {
    switch (self.boardWidthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'boardHeightUnit' stored property
  //····················································································································

  let boardHeightUnit_property = EBPropertyProxy_Int ()

  var boardHeightUnit_property_selection : EBSelection <Int> {
    switch (self.boardHeightUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'overlapingArrangment' stored property
  //····················································································································

  let overlapingArrangment_property = EBPropertyProxy_Bool ()

  var overlapingArrangment_property_selection : EBSelection <Bool> {
    switch (self.overlapingArrangment_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'selectedBoardXUnit' stored property
  //····················································································································

  let selectedBoardXUnit_property = EBPropertyProxy_Int ()

  var selectedBoardXUnit_property_selection : EBSelection <Int> {
    switch (self.selectedBoardXUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'selectedBoardYUnit' stored property
  //····················································································································

  let selectedBoardYUnit_property = EBPropertyProxy_Int ()

  var selectedBoardYUnit_property_selection : EBSelection <Int> {
    switch (self.selectedBoardYUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'boardLimitWidth' stored property
  //····················································································································

  let boardLimitWidth_property = EBPropertyProxy_Int ()

  var boardLimitWidth_property_selection : EBSelection <Int> {
    switch (self.boardLimitWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'boardLimitWidthUnit' stored property
  //····················································································································

  let boardLimitWidthUnit_property = EBPropertyProxy_Int ()

  var boardLimitWidthUnit_property_selection : EBSelection <Int> {
    switch (self.boardLimitWidthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'arrowMagnitude' stored property
  //····················································································································

  let arrowMagnitude_property = EBPropertyProxy_Int ()

  var arrowMagnitude_property_selection : EBSelection <Int> {
    switch (self.arrowMagnitude_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'arrowMagnitudeUnit' stored property
  //····················································································································

  let arrowMagnitudeUnit_property = EBPropertyProxy_Int ()

  var arrowMagnitudeUnit_property_selection : EBSelection <Int> {
    switch (self.arrowMagnitudeUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'shiftArrowMagnitude' stored property
  //····················································································································

  let shiftArrowMagnitude_property = EBPropertyProxy_Int ()

  var shiftArrowMagnitude_property_selection : EBSelection <Int> {
    switch (self.shiftArrowMagnitude_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'shiftArrowMagnitudeUnit' stored property
  //····················································································································

  let shiftArrowMagnitudeUnit_property = EBPropertyProxy_Int ()

  var shiftArrowMagnitudeUnit_property_selection : EBSelection <Int> {
    switch (self.shiftArrowMagnitudeUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mPDFBoardBackgroundColor' stored property
  //····················································································································

  let mPDFBoardBackgroundColor_property = EBPropertyProxy_NSColor ()

  var mPDFBoardBackgroundColor_property_selection : EBSelection <NSColor> {
    switch (self.mPDFBoardBackgroundColor_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mArtworkName' stored property
  //····················································································································

  let mArtworkName_property = EBPropertyProxy_String ()

  var mArtworkName_property_selection : EBSelection <String> {
    switch (self.mArtworkName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mArtworkVersion' stored property
  //····················································································································

  let mArtworkVersion_property = EBPropertyProxy_Int ()

  var mArtworkVersion_property_selection : EBSelection <Int> {
    switch (self.mArtworkVersion_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTWdisplayUnit' proxy property
  //····················································································································

  private var mObserversOf_minPPTPTTTWdisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minPPTPTTTWdisplayUnit_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minPPTPTTTWdisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minPPTPTTTWdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minPPTPTTTWdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minPPTPTTTWdisplayUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minPPTPTTTWdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minPPTPTTTWdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPPTPTTTWdisplayUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_minPPTPTTTWdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minPPTPTTTWdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTW' proxy property
  //····················································································································

  private var mObserversOf_minPPTPTTTW = EBWeakEventSet ()

  //····················································································································

  var minPPTPTTTW_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minPPTPTTTW_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minPPTPTTTW_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minPPTPTTTW_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minPPTPTTTW_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minPPTPTTTW.apply { (_ observer : EBEvent) in
        managedObject.minPPTPTTTW_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPPTPTTTW_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_minPPTPTTTW.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minPPTPTTTW_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARdisplayUnit' proxy property
  //····················································································································

  private var mObserversOf_minValueForOARdisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForOARdisplayUnit_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minValueForOARdisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForOARdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForOARdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForOARdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForOARdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_minValueForOARdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForOARdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARinEBUnit' proxy property
  //····················································································································

  private var mObserversOf_minValueForOARinEBUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForOARinEBUnit_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minValueForOARinEBUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForOARinEBUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForOARinEBUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForOARinEBUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForOARinEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_minValueForOARinEBUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForOARinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDdisplayUnit' proxy property
  //····················································································································

  private var mObserversOf_minValueForPHDdisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForPHDdisplayUnit_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minValueForPHDdisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForPHDdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForPHDdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForPHDdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForPHDdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_minValueForPHDdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForPHDdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDinEBUnit' proxy property
  //····················································································································

  private var mObserversOf_minValueForPHDinEBUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForPHDinEBUnit_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minValueForPHDinEBUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForPHDinEBUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForPHDinEBUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForPHDinEBUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForPHDinEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_minValueForPHDinEBUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForPHDinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidth' proxy property
  //····················································································································

  private var mObserversOf_minValueForBoardLimitWidth = EBWeakEventSet ()

  //····················································································································

  var minValueForBoardLimitWidth_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minValueForBoardLimitWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForBoardLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForBoardLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForBoardLimitWidth_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForBoardLimitWidth.apply { (_ observer : EBEvent) in
        managedObject.minValueForBoardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForBoardLimitWidth_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_minValueForBoardLimitWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForBoardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidthDisplayUnit' proxy property
  //····················································································································

  private var mObserversOf_minValueForBoardLimitWidthDisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForBoardLimitWidthDisplayUnit_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minValueForBoardLimitWidthDisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForBoardLimitWidthDisplayUnit_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForBoardLimitWidthDisplayUnit_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillDataFileExtension' proxy property
  //····················································································································

  private var mObserversOf_drillDataFileExtension = EBWeakEventSet ()

  //····················································································································

  var drillDataFileExtension_property_selection : EBSelection <String> {
    if let model = self.propval {
      switch (model.drillDataFileExtension_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drillDataFileExtension_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drillDataFileExtension_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_drillDataFileExtension_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_drillDataFileExtension.apply { (_ observer : EBEvent) in
        managedObject.drillDataFileExtension_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_drillDataFileExtension.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drillDataFileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' proxy property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  var comments_property_selection : EBSelection <String> {
    if let model = self.propval {
      switch (model.comments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.comments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.comments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<MergerRoot>) {
    for managedObject in inSet {
      self.mObserversOf_comments.apply { (_ observer : EBEvent) in
        managedObject.comments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<MergerRoot>) {
    self.mObserversOf_comments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observer of 'modelNames' transient property
  //····················································································································

  let modelNames_property = EBTransientProperty_StringTagArray ()

  var modelNames_property_selection : EBSelection <StringTagArray> {
    switch (self.modelNames_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardRect' transient property
  //····················································································································

  let boardRect_property = EBTransientProperty_CanariRect ()

  var boardRect_property_selection : EBSelection <CanariRect> {
    switch (self.boardRect_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardDisplayRect' transient property
  //····················································································································

  let boardDisplayRect_property = EBTransientProperty_CanariRect ()

  var boardDisplayRect_property_selection : EBSelection <CanariRect> {
    switch (self.boardDisplayRect_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardWidth' transient property
  //····················································································································

  let boardWidth_property = EBTransientProperty_Int ()

  var boardWidth_property_selection : EBSelection <Int> {
    switch (self.boardWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardHeight' transient property
  //····················································································································

  let boardHeight_property = EBTransientProperty_Int ()

  var boardHeight_property_selection : EBSelection <Int> {
    switch (self.boardHeight_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardOutlineRectDisplay' transient property
  //····················································································································

  let boardOutlineRectDisplay_property = EBTransientProperty_EBShape ()

  var boardOutlineRectDisplay_property_selection : EBSelection <EBShape> {
    switch (self.boardOutlineRectDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observable toMany property: boardModels
  //····················································································································

  private var mObserversOf_boardModels = EBWeakEventSet ()

  //····················································································································

  var boardModels_property_selection : EBSelection <[BoardModel]> {
    if let model = self.propval {
      switch (model.boardModels_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_boardModels (_ inObserver : EBEvent) {
    self.mObserversOf_boardModels.insert (inObserver)
    if let object = self.propval {
      object.boardModels_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardModels (_ inObserver : EBEvent) {
    self.mObserversOf_boardModels.remove (inObserver)
    if let object = self.propval {
      object.boardModels_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: boardInstances
  //····················································································································

  private var mObserversOf_boardInstances = EBWeakEventSet ()

  //····················································································································

  var boardInstances_property_selection : EBSelection <[MergerBoardInstance]> {
    if let model = self.propval {
      switch (model.boardInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_boardInstances (_ inObserver : EBEvent) {
    self.mObserversOf_boardInstances.insert (inObserver)
    if let object = self.propval {
      object.boardInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInstances (_ inObserver : EBEvent) {
    self.mObserversOf_boardInstances.remove (inObserver)
    if let object = self.propval {
      object.boardInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject MergerRoot
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_MergerRoot : ReadOnlyObject_MergerRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_MergerRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_MergerRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : MergerRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < MergerRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : MergerRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_MergerRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_MergerRoot : ReadOnlyObject_MergerRoot {

  //····················································································································
 
  func setProp (_ inValue : MergerRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_MergerRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_MergerRoot : ReadWriteObject_MergerRoot {

  //····················································································································

  private var mModel : ReadWriteObject_MergerRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_MergerRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : MergerRoot?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : MergerRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < MergerRoot? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : MergerRoot? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_MergerRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_MergerRoot : ReadWriteObject_MergerRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : MergerRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : MergerRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : MergerRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : MergerRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < MergerRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : MergerRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : MergerRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

