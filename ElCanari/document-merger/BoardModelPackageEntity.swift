//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BoardModelPackageEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BoardModelPackageEntity : ReadOnlyAbstractArrayProperty <BoardModelPackageEntity> {

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_name.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.name.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_name.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.name.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<BoardModelPackageEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_name {
        managedObject.name.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<BoardModelPackageEntity>) {
    for observer in mObserversOf_name {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padRotation' stored property
  //····················································································································

  private var mObserversOf_padRotation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padRotation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_padRotation.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.padRotation.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padRotation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_padRotation.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.padRotation.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padRotation_toElementsOfSet (_ inSet : Set<BoardModelPackageEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_padRotation {
        managedObject.padRotation.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padRotation_fromElementsOfSet (_ inSet : Set<BoardModelPackageEntity>) {
    for observer in mObserversOf_padRotation {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padRotation.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameSegments' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameSegments.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.frontComponentNameSegments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameSegments_toElementsOfSet (_ inSet : Set<BoardModelPackageEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameSegments_fromElementsOfSet (_ inSet : Set<BoardModelPackageEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameSegments {
        managedObject.frontComponentNameSegments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_BoardModelPackageEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_BoardModelPackageEntity : ReadOnlyArrayOf_BoardModelPackageEntity {

  var readModelFunction : Optional<() -> EBProperty < [BoardModelPackageEntity] > >

  private var prop_cache : EBProperty < [BoardModelPackageEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <BoardModelPackageEntity> ()

  override var prop : EBProperty < [BoardModelPackageEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <BoardModelPackageEntity>
        switch prop_cache! {
        case .multipleSelection, .noSelection :
          newSet = Set <BoardModelPackageEntity> ()
        case .singleSelection (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
        removeEBObserversOf_name_fromElementsOfSet (removedSet)
        removeEBObserversOf_padRotation_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
        addEBObserversOf_name_toElementsOfSet (addedSet)
        addEBObserversOf_padRotation_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelPackageEntity_name : class {
  var name : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelPackageEntity_padRotation : class {
  var padRotation : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardModelPackageEntity_frontComponentNameSegments : class {
  var frontComponentNameSegments : EBTransientProperty_MergerSegmentArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: componentNameSegments
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelPackageEntity_componentNameSegments : ReadOnlyArrayOf_BoardModelComponentNameSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelComponentNameSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship proxy: componentNameSegments
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ToManyRelationshipProxy_BoardModelPackageEntity_componentNameSegments : ToManyRelationshipReadWrite_BoardModelPackageEntity_componentNameSegments {
  private var mModel : ToManyRelationshipReadWrite_BoardModelPackageEntity_componentNameSegments?

  //····················································································································
  
  final func setModel (model : ToManyRelationshipReadWrite_BoardModelPackageEntity_componentNameSegments?) {
    mModel = model
  }

  //····················································································································
  
  override var prop : EBProperty < [BoardModelComponentNameSegmentEntity] > {
    get {
      return mModel?.prop ?? .noSelection
    }
  }
 
   //····················································································································
 
  override func setProp (_ value : [BoardModelComponentNameSegmentEntity]) {
    switch self.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let array) :
      mModel?.setProp (array)
    }
  }
 
  //····················································································································

}
*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: componentNameSegments
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelPackageEntity_componentNameSegments :
ToManyRelationshipReadWrite_BoardModelPackageEntity_componentNameSegments, EBSignatureObserverProtocol {
  weak var owner : BoardModelPackageEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelComponentNameSegmentEntity> ()
  private var mValue = [BoardModelComponentNameSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myPackage.owner = nil ;
        }
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelComponentNameSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myPackage.setProp (owner)
        }
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBProperty < [BoardModelComponentNameSegmentEntity] > {
    get {
      return .singleSelection (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelComponentNameSegmentEntity]) { mValue = value }

  var propval : [BoardModelComponentNameSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelComponentNameSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelComponentNameSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelComponentNameSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: componentValueSegments
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelPackageEntity_componentValueSegments : ReadOnlyArrayOf_BoardModelValueNameSegmentEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelValueNameSegmentEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship proxy: componentValueSegments
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ToManyRelationshipProxy_BoardModelPackageEntity_componentValueSegments : ToManyRelationshipReadWrite_BoardModelPackageEntity_componentValueSegments {
  private var mModel : ToManyRelationshipReadWrite_BoardModelPackageEntity_componentValueSegments?

  //····················································································································
  
  final func setModel (model : ToManyRelationshipReadWrite_BoardModelPackageEntity_componentValueSegments?) {
    mModel = model
  }

  //····················································································································
  
  override var prop : EBProperty < [BoardModelValueNameSegmentEntity] > {
    get {
      return mModel?.prop ?? .noSelection
    }
  }
 
   //····················································································································
 
  override func setProp (_ value : [BoardModelValueNameSegmentEntity]) {
    switch self.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let array) :
      mModel?.setProp (array)
    }
  }
 
  //····················································································································

}
*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: componentValueSegments
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelPackageEntity_componentValueSegments :
ToManyRelationshipReadWrite_BoardModelPackageEntity_componentValueSegments, EBSignatureObserverProtocol {
  weak var owner : BoardModelPackageEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelValueNameSegmentEntity> ()
  private var mValue = [BoardModelValueNameSegmentEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myPackage.owner = nil ;
        }
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelValueNameSegmentEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myPackage.setProp (owner)
        }
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBProperty < [BoardModelValueNameSegmentEntity] > {
    get {
      return .singleSelection (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelValueNameSegmentEntity]) { mValue = value }

  var propval : [BoardModelValueNameSegmentEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelValueNameSegmentEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelValueNameSegmentEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelValueNameSegmentEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: pads
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_BoardModelPackageEntity_pads : ReadOnlyArrayOf_BoardModelPadEntity {

  //····················································································································
 
  func setProp (_ value :  [BoardModelPadEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship proxy: pads
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ToManyRelationshipProxy_BoardModelPackageEntity_pads : ToManyRelationshipReadWrite_BoardModelPackageEntity_pads {
  private var mModel : ToManyRelationshipReadWrite_BoardModelPackageEntity_pads?

  //····················································································································
  
  final func setModel (model : ToManyRelationshipReadWrite_BoardModelPackageEntity_pads?) {
    mModel = model
  }

  //····················································································································
  
  override var prop : EBProperty < [BoardModelPadEntity] > {
    get {
      return mModel?.prop ?? .noSelection
    }
  }
 
   //····················································································································
 
  override func setProp (_ value : [BoardModelPadEntity]) {
    switch self.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let array) :
      mModel?.setProp (array)
    }
  }
 
  //····················································································································

}
*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: pads
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_BoardModelPackageEntity_pads :
ToManyRelationshipReadWrite_BoardModelPackageEntity_pads, EBSignatureObserverProtocol {
  weak var owner : BoardModelPackageEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set<BoardModelPadEntity> ()
  private var mValue = [BoardModelPadEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myPackage.owner = nil ;
        }
        removeEBObserversOf_height_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_kind_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_name_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_shape_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_side_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : BoardModelPadEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myPackage.setProp (owner)
        }
        addEBObserversOf_height_toElementsOfSet (addedObjectSet)
        addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
        addEBObserversOf_kind_toElementsOfSet (addedObjectSet)
        addEBObserversOf_name_toElementsOfSet (addedObjectSet)
        addEBObserversOf_shape_toElementsOfSet (addedObjectSet)
        addEBObserversOf_side_toElementsOfSet (addedObjectSet)
        addEBObserversOf_width_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBProperty < [BoardModelPadEntity] > {
    get {
      return .singleSelection (mValue)
    }
  }

  override func setProp (_ value :  [BoardModelPadEntity]) { mValue = value }

  var propval : [BoardModelPadEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [BoardModelPadEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelPadEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelPadEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: myModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_BoardModelPackageEntity_myModel : EBAbstractProperty {
  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : BoardModelPackageEntity? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : BoardModelEntity? {
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.packages.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          unwrappedValue.packages.add (unwrappedOwner)
        }
      //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : BoardModelEntity? { get { return mValue } }

  var prop : EBProperty <BoardModelEntity?> { get { return .singleSelection (mValue) } }

  func setProp (_ value : BoardModelEntity?) { mValue = value }

  //····················································································································

  func performUndo (_ oldValue : BoardModelEntity?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModelEntity) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : BoardModelEntity) {
    mValue = object
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardModelPackageEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardModelPackageEntity : EBManagedObject, BoardModelPackageEntity_name, BoardModelPackageEntity_padRotation, BoardModelPackageEntity_frontComponentNameSegments
{

  //····················································································································
  //    Properties
  //····················································································································

  var name = EBStoredProperty_String ("")

  var padRotation = EBStoredProperty_Int (0)

  //····················································································································
  //    Transient properties
  //····················································································································

  var frontComponentNameSegments = EBTransientProperty_MergerSegmentArray ()

  //····················································································································
  //    Relationships
  //····················································································································

  var componentNameSegments = ToManyRelationship_BoardModelPackageEntity_componentNameSegments ()
  var componentValueSegments = ToManyRelationship_BoardModelPackageEntity_componentValueSegments ()
  var pads = ToManyRelationship_BoardModelPackageEntity_pads ()
  var myModel = ToOneRelationship_BoardModelPackageEntity_myModel ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    frontComponentNameSegments.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.componentNameSegments.prop.kind ()
        kind &= unwSelf.componentNameSegments.prop.kind ()
        kind &= unwSelf.componentNameSegments.prop.kind ()
        kind &= unwSelf.componentNameSegments.prop.kind ()
        kind &= unwSelf.componentNameSegments.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.componentNameSegments.prop, unwSelf.componentNameSegments.prop, unwSelf.componentNameSegments.prop, unwSelf.componentNameSegments.prop, unwSelf.componentNameSegments.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1), .singleSelection (let v2), .singleSelection (let v3), .singleSelection (let v4)) :
            return .singleSelection (compute_BoardModelPackageEntity_frontComponentNameSegments (v0, v1, v2, v3, v4))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  //--- Install property observers for transients
    componentNameSegments.addEBObserverOf_x1 (frontComponentNameSegments)
    componentNameSegments.addEBObserverOf_y1 (frontComponentNameSegments)
    componentNameSegments.addEBObserverOf_x2 (frontComponentNameSegments)
    componentNameSegments.addEBObserverOf_y2 (frontComponentNameSegments)
    componentNameSegments.addEBObserverOf_width (frontComponentNameSegments)
  //--- Install undoers for properties
    self.name.undoManager = undoManager ()
    self.padRotation.undoManager = undoManager ()
  //--- Install owner for relationships
    myModel.owner = self
    componentNameSegments.owner = self
    componentValueSegments.owner = self
    pads.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    componentNameSegments.removeEBObserverOf_x1 (frontComponentNameSegments)
    componentNameSegments.removeEBObserverOf_y1 (frontComponentNameSegments)
    componentNameSegments.removeEBObserverOf_x2 (frontComponentNameSegments)
    componentNameSegments.removeEBObserverOf_y2 (frontComponentNameSegments)
    componentNameSegments.removeEBObserverOf_width (frontComponentNameSegments)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "name",
      idx:self.name.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name.mObserverExplorer,
      valueExplorer:&self.name.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padRotation",
      idx:self.padRotation.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padRotation.mObserverExplorer,
      valueExplorer:&self.padRotation.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "componentNameSegments",
      idx:componentNameSegments.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&componentNameSegments.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "componentValueSegments",
      idx:componentValueSegments.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&componentValueSegments.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "pads",
      idx:pads.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&pads.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "myModel",
      idx:myModel.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&myModel.mValueExplorer
    )
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.name.mObserverExplorer = nil
    self.name.mValueExplorer = nil
    self.padRotation.mObserverExplorer = nil
    self.padRotation.mValueExplorer = nil
    myModel.mObserverExplorer = nil
    myModel.mValueExplorer = nil
    // componentNameSegments.mObserverExplorer = nil
    componentNameSegments.mValueExplorer = nil
    // componentValueSegments.mObserverExplorer = nil
    componentValueSegments.mValueExplorer = nil
    // pads.mObserverExplorer = nil
    pads.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.name.storeIn (dictionary: ioDictionary, forKey: "name")
    self.padRotation.storeIn (dictionary: ioDictionary, forKey: "padRotation")
    store (managedObjectArray: componentNameSegments.propval as NSArray, relationshipName:"componentNameSegments", intoDictionary: ioDictionary) ;
    store (managedObjectArray: componentValueSegments.propval as NSArray, relationshipName:"componentValueSegments", intoDictionary: ioDictionary) ;
    store (managedObjectArray: pads.propval as NSArray, relationshipName:"pads", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.name.readFrom (dictionary: inDictionary, forKey:"name")
    self.padRotation.readFrom (dictionary: inDictionary, forKey:"padRotation")
    componentNameSegments.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "componentNameSegments",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelComponentNameSegmentEntity])
    componentValueSegments.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "componentValueSegments",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelValueNameSegmentEntity])
    pads.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "pads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardModelPadEntity])
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    componentNameSegments.setProp (Array ())
    componentValueSegments.setProp (Array ())
    pads.setProp (Array ())
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
    myModel.setProp (nil)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in componentNameSegments.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in componentValueSegments.propval {
      objects.append (managedObject)
    }
    for managedObject : EBManagedObject in pads.propval {
      objects.append (managedObject)
    }
    if let object = myModel.propval {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

