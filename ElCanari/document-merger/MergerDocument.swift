//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(MergerDocument) class MergerDocument : EBManagedDocument {

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var addBoardModelButton : EBButton?
  @IBOutlet var boardHelpPanel : NSPanel?
  @IBOutlet var dismissPrefsForSettingMergerDisplayButton : EBButton?
  @IBOutlet var mArrowMagnitudeTextField : CanariDimensionTextField?
  @IBOutlet var mArrowMagnitudeUnitPopUp : EBPopUpButton?
  @IBOutlet var mArtworNameTextField : EBTextObserverField?
  @IBOutlet var mArtworkNameTextField : EBTextObserverField?
  @IBOutlet var mAutomaticBoardSizeSwitch : EBSwitch?
  @IBOutlet var mAutomaticBoardSizeView : NSView?
  @IBOutlet var mBoardArchiveFormatPopUpButton : CanariBoardBoardArchivePopUpButton?
  @IBOutlet var mBoardBoardLimitTextField : CanariDimensionTextField?
  @IBOutlet var mBoardClipView : NSClipView?
  @IBOutlet var mBoardHeightTextField : CanariDimensionObserverTextField?
  @IBOutlet var mBoardHeightUnitPopUp : EBPopUpButton?
  @IBOutlet var mBoardInsertMenu : CanariBoardInsertMenu?
  @IBOutlet var mBoardLimitWidthUnitPopUp : EBPopUpButton?
  @IBOutlet var mBoardModelTableView : EBTableView?
  @IBOutlet var mBoardModelView : CanariViewWithZoomAndFlip?
  @IBOutlet var mBoardViewDisplayBackComponenValuesCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayBackComponentNamesCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayBackLayoutTextsCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayBackLegendLinesCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayBackLegendTextsCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayBackPackagesCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayBackPadsCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayBackTracksCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayBoardLimitsCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayFrontComponenValuesCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayFrontComponentNamesCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayFrontLayoutTextsCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayFrontLegendLinesCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayFrontLegendTextsCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayFrontPackagesCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayFrontPadsCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayFrontTracksCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayHolesCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayInternalBoardsLimitsCheckbox : EBSwitch?
  @IBOutlet var mBoardViewDisplayViasCheckbox : EBSwitch?
  @IBOutlet var mBoardViewHorizontalFlipCheckbox : EBSwitch?
  @IBOutlet var mBoardViewVerticalFlipCheckbox : EBSwitch?
  @IBOutlet var mBoardWidthTextField : CanariDimensionObserverTextField?
  @IBOutlet var mBoardWidthUnitPopUp : EBPopUpButton?
  @IBOutlet var mComposedBoardView : CanariViewWithZoomAndFlip?
  @IBOutlet var mDangerView : NSView?
  @IBOutlet var mDeselectIssueButton : EBButton?
  @IBOutlet var mDisplaySettingView : NSView?
  @IBOutlet var mEmptyBoardMessage : EBTextField?
  @IBOutlet var mGenerateGerber : EBSwitch?
  @IBOutlet var mGeneratePDF : EBSwitch?
  @IBOutlet var mGenerateProductFilesActionButton : EBButton?
  @IBOutlet var mImportArtworkButton : EBButton?
  @IBOutlet var mIncorrectDocumentNameTextField : EBTextObserverField?
  @IBOutlet var mInsertArrayOfBoardsOrientation : NSSegmentedControl?
  @IBOutlet var mInsertArrayOfBoardsPanel : NSPanel?
  @IBOutlet var mInsertArrayOfBoardsPopUpButton : NSPopUpButton?
  @IBOutlet var mInsertArrayOfBoardsXCountField : NSTextField?
  @IBOutlet var mInsertArrayOfBoardsYCountField : NSTextField?
  @IBOutlet var mInsertedInstanceDefaultOrientation : NSPopUpButton?
  @IBOutlet var mInstanceCountTextField : EBIntObserverField?
  @IBOutlet var mInstanceModelNameTextField : EBTextObserverField?
  @IBOutlet var mInstanceRotation : CanariQuadrantSegmentedControl?
  @IBOutlet var mIssueTableView : MergerIssueTableView?
  @IBOutlet var mIssueTextField : EBTextObserverField?
  @IBOutlet var mLogTextView : NSTextView?
  @IBOutlet var mManualBoardHeightTextField : CanariDimensionTextField?
  @IBOutlet var mManualBoardHeightUnitPopUp : EBPopUpButton?
  @IBOutlet var mManualBoardSizeView : NSView?
  @IBOutlet var mManualBoardWidthTextField : CanariDimensionTextField?
  @IBOutlet var mManualBoardWidthUnitPopUp : EBPopUpButton?
  @IBOutlet var mModelBoardLimitTextField : CanariDimensionObserverTextField?
  @IBOutlet var mModelDragSourceTableView : CanariModelDragSourceTableView?
  @IBOutlet var mModelHeightTextField : CanariDimensionObserverTextField?
  @IBOutlet var mModelHeightUnitPopUp : EBPopUpButton?
  @IBOutlet var mModelLimitWidthUnitPopUp : EBPopUpButton?
  @IBOutlet var mModelViewDisplayBackComponenValuesCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayBackComponentNamesCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayBackLayoutTextsCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayBackLegendLinesCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayBackLegendTextsCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayBackPackagesCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayBackPadsCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayBackTracksCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayBoardLimitsCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayFrontComponenValuesCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayFrontComponentNamesCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayFrontLayoutTextsCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayFrontLegendLinesCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayFrontLegendTextsCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayFrontPackagesCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayFrontPadsCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayFrontTracksCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayHolesCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayInternalBoardsLimitsCheckbox : EBSwitch?
  @IBOutlet var mModelViewDisplayViasCheckbox : EBSwitch?
  @IBOutlet var mModelViewHorizontalFlipCheckbox : EBSwitch?
  @IBOutlet var mModelViewVerticalFlipCheckbox : EBSwitch?
  @IBOutlet var mModelWidthTextField : CanariDimensionObserverTextField?
  @IBOutlet var mModelWidthUnitPopUp : EBPopUpButton?
  @IBOutlet var mMoveDownButton : EBButton?
  @IBOutlet var mMoveLeftButton : EBButton?
  @IBOutlet var mMoveRightButton : EBButton?
  @IBOutlet var mMoveUpButton : EBButton?
  @IBOutlet var mNoArtworkMessage : EBTextField?
  @IBOutlet var mNoModelMessage : EBTextField?
  @IBOutlet var mOperationAndIssueTabView : NSTabView?
  @IBOutlet var mOverlapSwitch : EBSwitch?
  @IBOutlet var mPageSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mSelectedBoardXTextField : CanariDimensionTextField?
  @IBOutlet var mSelectedBoardXUnitPopUp : EBPopUpButton?
  @IBOutlet var mSelectedBoardYTextField : CanariDimensionTextField?
  @IBOutlet var mSelectedBoardYUnitPopUp : EBPopUpButton?
  @IBOutlet var mShiftArrowMagnitudeTextField : CanariDimensionTextField?
  @IBOutlet var mShiftArrowMagnitudeUnitPopUp : EBPopUpButton?
  @IBOutlet var mStatusImageViewInToolbar : EBImageObserverView?
  @IBOutlet var mergerViewBackLegendLinesColorWell : EBColorWell?
  @IBOutlet var mergerViewBackgroundColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayBackComponentNamesColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayBackComponentValuesColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayBackLayoutTextsColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayBackLegendTextsColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayBackPackagesColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayBackPadsColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayBackTracksColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayBoardLimitsColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayFrontComponentNamesColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayFrontComponentValuesColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayFrontLayoutTextsColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayFrontLegendTextsColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayFrontPackagesColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayFrontPadsColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayFrontTracksColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayHolesColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayInternalBoardsLimitsColorWell : EBColorWell?
  @IBOutlet var mergerViewDisplayViasColorWell : EBColorWell?
  @IBOutlet var mergerViewFrontLegendLinesColorWell : EBColorWell?
  @IBOutlet var removeBoardModelButton : EBButton?
  @IBOutlet var showBoardHelpButton : EBButton?
  @IBOutlet var showPrefsForSettingMergerDisplayButton : EBButton?
  @IBOutlet var updateBoardModelButton : EBButton?

  //····················································································································
  //    Properties
  //····················································································································


  //····················································································································
  //    Transient properties
  //····················································································································

  var issues_property = EBTransientProperty_InstanceIssueArray ()
  var issues_property_selection : EBSelection <InstanceIssueArray> {
    return self.issues_property.prop
  }

  var mStatusImage_property = EBTransientProperty_NSImage ()
  var mStatusImage_property_selection : EBSelection <NSImage> {
    return self.mStatusImage_property.prop
  }

  var mStatusMessage_property = EBTransientProperty_String ()
  var mStatusMessage_property_selection : EBSelection <String> {
    return self.mStatusMessage_property.prop
  }

  var documentFileNameOk_property = EBTransientProperty_Bool ()
  var documentFileNameOk_property_selection : EBSelection <Bool> {
    return self.documentFileNameOk_property.prop
  }

  var incorrectDocumentFileErrorMessage_property = EBTransientProperty_String ()
  var incorrectDocumentFileErrorMessage_property_selection : EBSelection <String> {
    return self.incorrectDocumentFileErrorMessage_property.prop
  }

  var documentIsUnnamed_property = EBTransientProperty_Bool ()
  var documentIsUnnamed_property_selection : EBSelection <Bool> {
    return self.documentIsUnnamed_property.prop
  }

  var importArtworkButtonTitle_property = EBTransientProperty_String ()
  var importArtworkButtonTitle_property_selection : EBSelection <String> {
    return self.importArtworkButtonTitle_property.prop
  }

  var documentFilePath_property = EBTransientProperty_String ()
  var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.prop
  }

  //····················································································································
  //    Transient arraies
  //····················································································································


  //····················································································································
  //    Array Controllers
  //····················································································································

  var mBoardModelController = ArrayController_MergerDocument_mBoardModelController ()
  var mBoardInstanceController = ArrayController_MergerDocument_mBoardInstanceController ()

  //····················································································································
  //    Selection Controllers
  //····················································································································

  var mBoardModelSelection = SelectionController_MergerDocument_mBoardModelSelection ()
  var mBoardInstanceSelection = SelectionController_MergerDocument_mBoardInstanceSelection ()

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  var mController_showPrefsForSettingMergerDisplayButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mDisplaySettingView_hidden : MultipleBindingController_hidden? = nil
  var mController_mNoModelMessage_hidden : MultipleBindingController_hidden? = nil
  var mController_removeBoardModelButton_enabled : MultipleBindingController_enabled? = nil
  var mController_updateBoardModelButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mAutomaticBoardSizeView_hidden : MultipleBindingController_hidden? = nil
  var mController_mManualBoardSizeView_hidden : MultipleBindingController_hidden? = nil
  var mController_mEmptyBoardMessage_hidden : MultipleBindingController_hidden? = nil
  var mController_mOverlapSwitch_enabled : MultipleBindingController_enabled? = nil
  var mController_mMoveRightButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mMoveLeftButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mMoveUpButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mMoveDownButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mNoArtworkMessage_hidden : MultipleBindingController_hidden? = nil
  var mController_mDangerView_hidden : MultipleBindingController_hidden? = nil
  var mController_mGenerateProductFilesActionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mLogTextView_hidden : MultipleBindingController_hidden? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    mBoardModelController.addExplorer (name: "mBoardModelController", y:&y, view:view)
    mBoardInstanceController.addExplorer (name: "mBoardInstanceController", y:&y, view:view)
    mBoardModelSelection.addExplorer (name: "mBoardModelSelection", y:&y, view:view)
    mBoardInstanceSelection.addExplorer (name: "mBoardInstanceSelection", y:&y, view:view)
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  #if swift(>=4)
    override var windowNibName : NSNib.Name {
      return NSNib.Name ("MergerDocument")
    }
  #else
    override var windowNibName : String {
      return "MergerDocument"
    }
  #endif
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "MergerRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : MergerRoot { get { return mRootObject as! MergerRoot } }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
  //--------------------------- Outlet checking
    if let outlet : Any = self.addBoardModelButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'addBoardModelButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'addBoardModelButton' outlet is nil") ;
    }
    if let outlet : Any = self.boardHelpPanel {
      if !(outlet is NSPanel) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'boardHelpPanel' outlet is not an instance of 'NSPanel'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'boardHelpPanel' outlet is nil") ;
    }
    if let outlet : Any = self.dismissPrefsForSettingMergerDisplayButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'dismissPrefsForSettingMergerDisplayButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'dismissPrefsForSettingMergerDisplayButton' outlet is nil") ;
    }
    if let outlet : Any = self.mArrowMagnitudeTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mArrowMagnitudeTextField' outlet is not an instance of 'CanariDimensionTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mArrowMagnitudeTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mArrowMagnitudeUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mArrowMagnitudeUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mArrowMagnitudeUnitPopUp' outlet is nil") ;
    }
    if let outlet : Any = self.mArtworNameTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mArtworNameTextField' outlet is not an instance of 'EBTextObserverField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mArtworNameTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mArtworkNameTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mArtworkNameTextField' outlet is not an instance of 'EBTextObserverField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mArtworkNameTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mAutomaticBoardSizeSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mAutomaticBoardSizeSwitch' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mAutomaticBoardSizeSwitch' outlet is nil") ;
    }
    if let outlet : Any = self.mAutomaticBoardSizeView {
      if !(outlet is NSView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mAutomaticBoardSizeView' outlet is not an instance of 'NSView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mAutomaticBoardSizeView' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardArchiveFormatPopUpButton {
      if !(outlet is CanariBoardBoardArchivePopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardArchiveFormatPopUpButton' outlet is not an instance of 'CanariBoardBoardArchivePopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardArchiveFormatPopUpButton' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardBoardLimitTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardBoardLimitTextField' outlet is not an instance of 'CanariDimensionTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardBoardLimitTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardClipView {
      if !(outlet is NSClipView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardClipView' outlet is not an instance of 'NSClipView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardClipView' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardHeightTextField {
      if !(outlet is CanariDimensionObserverTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardHeightTextField' outlet is not an instance of 'CanariDimensionObserverTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardHeightTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardHeightUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardHeightUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardHeightUnitPopUp' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardInsertMenu {
      if !(outlet is CanariBoardInsertMenu) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardInsertMenu' outlet is not an instance of 'CanariBoardInsertMenu'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardInsertMenu' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardLimitWidthUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardLimitWidthUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardLimitWidthUnitPopUp' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardModelTableView {
      if !(outlet is EBTableView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardModelTableView' outlet is not an instance of 'EBTableView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardModelTableView' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardModelView {
      if !(outlet is CanariViewWithZoomAndFlip) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardModelView' outlet is not an instance of 'CanariViewWithZoomAndFlip'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardModelView' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayBackComponenValuesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayBackComponenValuesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayBackComponenValuesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayBackComponentNamesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayBackComponentNamesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayBackComponentNamesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayBackLayoutTextsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayBackLayoutTextsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayBackLayoutTextsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayBackLegendLinesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayBackLegendLinesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayBackLegendLinesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayBackLegendTextsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayBackLegendTextsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayBackLegendTextsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayBackPackagesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayBackPackagesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayBackPackagesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayBackPadsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayBackPadsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayBackPadsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayBackTracksCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayBackTracksCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayBackTracksCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayBoardLimitsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayBoardLimitsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayBoardLimitsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayFrontComponenValuesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayFrontComponenValuesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayFrontComponenValuesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayFrontComponentNamesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayFrontComponentNamesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayFrontComponentNamesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayFrontLayoutTextsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayFrontLayoutTextsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayFrontLayoutTextsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayFrontLegendLinesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayFrontLegendLinesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayFrontLegendLinesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayFrontLegendTextsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayFrontLegendTextsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayFrontLegendTextsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayFrontPackagesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayFrontPackagesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayFrontPackagesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayFrontPadsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayFrontPadsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayFrontPadsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayFrontTracksCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayFrontTracksCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayFrontTracksCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayHolesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayHolesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayHolesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayInternalBoardsLimitsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayInternalBoardsLimitsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayInternalBoardsLimitsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewDisplayViasCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewDisplayViasCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewDisplayViasCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewHorizontalFlipCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewHorizontalFlipCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewHorizontalFlipCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardViewVerticalFlipCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardViewVerticalFlipCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardViewVerticalFlipCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardWidthTextField {
      if !(outlet is CanariDimensionObserverTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardWidthTextField' outlet is not an instance of 'CanariDimensionObserverTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardWidthTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardWidthUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardWidthUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardWidthUnitPopUp' outlet is nil") ;
    }
    if let outlet : Any = self.mComposedBoardView {
      if !(outlet is CanariViewWithZoomAndFlip) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mComposedBoardView' outlet is not an instance of 'CanariViewWithZoomAndFlip'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mComposedBoardView' outlet is nil") ;
    }
    if let outlet : Any = self.mDangerView {
      if !(outlet is NSView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mDangerView' outlet is not an instance of 'NSView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mDangerView' outlet is nil") ;
    }
    if let outlet : Any = self.mDeselectIssueButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mDeselectIssueButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mDeselectIssueButton' outlet is nil") ;
    }
    if let outlet : Any = self.mDisplaySettingView {
      if !(outlet is NSView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mDisplaySettingView' outlet is not an instance of 'NSView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mDisplaySettingView' outlet is nil") ;
    }
    if let outlet : Any = self.mEmptyBoardMessage {
      if !(outlet is EBTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mEmptyBoardMessage' outlet is not an instance of 'EBTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mEmptyBoardMessage' outlet is nil") ;
    }
    if let outlet : Any = self.mGenerateGerber {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mGenerateGerber' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mGenerateGerber' outlet is nil") ;
    }
    if let outlet : Any = self.mGeneratePDF {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mGeneratePDF' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mGeneratePDF' outlet is nil") ;
    }
    if let outlet : Any = self.mGenerateProductFilesActionButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mGenerateProductFilesActionButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mGenerateProductFilesActionButton' outlet is nil") ;
    }
    if let outlet : Any = self.mImportArtworkButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mImportArtworkButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mImportArtworkButton' outlet is nil") ;
    }
    if let outlet : Any = self.mIncorrectDocumentNameTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mIncorrectDocumentNameTextField' outlet is not an instance of 'EBTextObserverField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mIncorrectDocumentNameTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mInsertArrayOfBoardsOrientation {
      if !(outlet is NSSegmentedControl) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mInsertArrayOfBoardsOrientation' outlet is not an instance of 'NSSegmentedControl'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mInsertArrayOfBoardsOrientation' outlet is nil") ;
    }
    if let outlet : Any = self.mInsertArrayOfBoardsPanel {
      if !(outlet is NSPanel) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mInsertArrayOfBoardsPanel' outlet is not an instance of 'NSPanel'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mInsertArrayOfBoardsPanel' outlet is nil") ;
    }
    if let outlet : Any = self.mInsertArrayOfBoardsPopUpButton {
      if !(outlet is NSPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mInsertArrayOfBoardsPopUpButton' outlet is not an instance of 'NSPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mInsertArrayOfBoardsPopUpButton' outlet is nil") ;
    }
    if let outlet : Any = self.mInsertArrayOfBoardsXCountField {
      if !(outlet is NSTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mInsertArrayOfBoardsXCountField' outlet is not an instance of 'NSTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mInsertArrayOfBoardsXCountField' outlet is nil") ;
    }
    if let outlet : Any = self.mInsertArrayOfBoardsYCountField {
      if !(outlet is NSTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mInsertArrayOfBoardsYCountField' outlet is not an instance of 'NSTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mInsertArrayOfBoardsYCountField' outlet is nil") ;
    }
    if let outlet : Any = self.mInsertedInstanceDefaultOrientation {
      if !(outlet is NSPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mInsertedInstanceDefaultOrientation' outlet is not an instance of 'NSPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mInsertedInstanceDefaultOrientation' outlet is nil") ;
    }
    if let outlet : Any = self.mInstanceCountTextField {
      if !(outlet is EBIntObserverField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mInstanceCountTextField' outlet is not an instance of 'EBIntObserverField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mInstanceCountTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mInstanceModelNameTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mInstanceModelNameTextField' outlet is not an instance of 'EBTextObserverField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mInstanceModelNameTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mInstanceRotation {
      if !(outlet is CanariQuadrantSegmentedControl) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mInstanceRotation' outlet is not an instance of 'CanariQuadrantSegmentedControl'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mInstanceRotation' outlet is nil") ;
    }
    if let outlet : Any = self.mIssueTableView {
      if !(outlet is MergerIssueTableView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mIssueTableView' outlet is not an instance of 'MergerIssueTableView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mIssueTableView' outlet is nil") ;
    }
    if let outlet : Any = self.mIssueTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mIssueTextField' outlet is not an instance of 'EBTextObserverField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mIssueTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mLogTextView {
      if !(outlet is NSTextView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLogTextView' outlet is not an instance of 'NSTextView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLogTextView' outlet is nil") ;
    }
    if let outlet : Any = self.mManualBoardHeightTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mManualBoardHeightTextField' outlet is not an instance of 'CanariDimensionTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mManualBoardHeightTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mManualBoardHeightUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mManualBoardHeightUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mManualBoardHeightUnitPopUp' outlet is nil") ;
    }
    if let outlet : Any = self.mManualBoardSizeView {
      if !(outlet is NSView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mManualBoardSizeView' outlet is not an instance of 'NSView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mManualBoardSizeView' outlet is nil") ;
    }
    if let outlet : Any = self.mManualBoardWidthTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mManualBoardWidthTextField' outlet is not an instance of 'CanariDimensionTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mManualBoardWidthTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mManualBoardWidthUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mManualBoardWidthUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mManualBoardWidthUnitPopUp' outlet is nil") ;
    }
    if let outlet : Any = self.mModelBoardLimitTextField {
      if !(outlet is CanariDimensionObserverTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelBoardLimitTextField' outlet is not an instance of 'CanariDimensionObserverTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelBoardLimitTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mModelDragSourceTableView {
      if !(outlet is CanariModelDragSourceTableView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelDragSourceTableView' outlet is not an instance of 'CanariModelDragSourceTableView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelDragSourceTableView' outlet is nil") ;
    }
    if let outlet : Any = self.mModelHeightTextField {
      if !(outlet is CanariDimensionObserverTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelHeightTextField' outlet is not an instance of 'CanariDimensionObserverTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelHeightTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mModelHeightUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelHeightUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelHeightUnitPopUp' outlet is nil") ;
    }
    if let outlet : Any = self.mModelLimitWidthUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelLimitWidthUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelLimitWidthUnitPopUp' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayBackComponenValuesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayBackComponenValuesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayBackComponenValuesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayBackComponentNamesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayBackComponentNamesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayBackComponentNamesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayBackLayoutTextsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayBackLayoutTextsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayBackLayoutTextsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayBackLegendLinesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayBackLegendLinesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayBackLegendLinesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayBackLegendTextsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayBackLegendTextsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayBackLegendTextsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayBackPackagesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayBackPackagesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayBackPackagesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayBackPadsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayBackPadsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayBackPadsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayBackTracksCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayBackTracksCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayBackTracksCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayBoardLimitsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayBoardLimitsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayBoardLimitsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayFrontComponenValuesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayFrontComponenValuesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayFrontComponenValuesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayFrontComponentNamesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayFrontComponentNamesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayFrontComponentNamesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayFrontLayoutTextsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayFrontLayoutTextsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayFrontLayoutTextsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayFrontLegendLinesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayFrontLegendLinesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayFrontLegendLinesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayFrontLegendTextsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayFrontLegendTextsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayFrontLegendTextsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayFrontPackagesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayFrontPackagesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayFrontPackagesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayFrontPadsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayFrontPadsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayFrontPadsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayFrontTracksCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayFrontTracksCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayFrontTracksCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayHolesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayHolesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayHolesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayInternalBoardsLimitsCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayInternalBoardsLimitsCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayInternalBoardsLimitsCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewDisplayViasCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewDisplayViasCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewDisplayViasCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewHorizontalFlipCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewHorizontalFlipCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewHorizontalFlipCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelViewVerticalFlipCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelViewVerticalFlipCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelViewVerticalFlipCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mModelWidthTextField {
      if !(outlet is CanariDimensionObserverTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelWidthTextField' outlet is not an instance of 'CanariDimensionObserverTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelWidthTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mModelWidthUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mModelWidthUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mModelWidthUnitPopUp' outlet is nil") ;
    }
    if let outlet : Any = self.mMoveDownButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mMoveDownButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mMoveDownButton' outlet is nil") ;
    }
    if let outlet : Any = self.mMoveLeftButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mMoveLeftButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mMoveLeftButton' outlet is nil") ;
    }
    if let outlet : Any = self.mMoveRightButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mMoveRightButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mMoveRightButton' outlet is nil") ;
    }
    if let outlet : Any = self.mMoveUpButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mMoveUpButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mMoveUpButton' outlet is nil") ;
    }
    if let outlet : Any = self.mNoArtworkMessage {
      if !(outlet is EBTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mNoArtworkMessage' outlet is not an instance of 'EBTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mNoArtworkMessage' outlet is nil") ;
    }
    if let outlet : Any = self.mNoModelMessage {
      if !(outlet is EBTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mNoModelMessage' outlet is not an instance of 'EBTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mNoModelMessage' outlet is nil") ;
    }
    if let outlet : Any = self.mOperationAndIssueTabView {
      if !(outlet is NSTabView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mOperationAndIssueTabView' outlet is not an instance of 'NSTabView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mOperationAndIssueTabView' outlet is nil") ;
    }
    if let outlet : Any = self.mOverlapSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mOverlapSwitch' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mOverlapSwitch' outlet is nil") ;
    }
    if let outlet : Any = self.mPageSegmentedControl {
      if !(outlet is CanariSegmentedControl) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPageSegmentedControl' outlet is not an instance of 'CanariSegmentedControl'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPageSegmentedControl' outlet is nil") ;
    }
    if let outlet : Any = self.mSelectedBoardXTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSelectedBoardXTextField' outlet is not an instance of 'CanariDimensionTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSelectedBoardXTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mSelectedBoardXUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSelectedBoardXUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSelectedBoardXUnitPopUp' outlet is nil") ;
    }
    if let outlet : Any = self.mSelectedBoardYTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSelectedBoardYTextField' outlet is not an instance of 'CanariDimensionTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSelectedBoardYTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mSelectedBoardYUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSelectedBoardYUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSelectedBoardYUnitPopUp' outlet is nil") ;
    }
    if let outlet : Any = self.mShiftArrowMagnitudeTextField {
      if !(outlet is CanariDimensionTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mShiftArrowMagnitudeTextField' outlet is not an instance of 'CanariDimensionTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mShiftArrowMagnitudeTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mShiftArrowMagnitudeUnitPopUp {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mShiftArrowMagnitudeUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mShiftArrowMagnitudeUnitPopUp' outlet is nil") ;
    }
    if let outlet : Any = self.mStatusImageViewInToolbar {
      if !(outlet is EBImageObserverView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mStatusImageViewInToolbar' outlet is not an instance of 'EBImageObserverView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mStatusImageViewInToolbar' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewBackLegendLinesColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewBackLegendLinesColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewBackLegendLinesColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewBackgroundColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewBackgroundColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewBackgroundColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayBackComponentNamesColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayBackComponentNamesColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayBackComponentNamesColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayBackComponentValuesColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayBackComponentValuesColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayBackComponentValuesColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayBackLayoutTextsColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayBackLayoutTextsColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayBackLayoutTextsColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayBackLegendTextsColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayBackLegendTextsColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayBackLegendTextsColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayBackPackagesColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayBackPackagesColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayBackPackagesColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayBackPadsColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayBackPadsColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayBackPadsColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayBackTracksColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayBackTracksColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayBackTracksColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayBoardLimitsColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayBoardLimitsColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayBoardLimitsColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayFrontComponentNamesColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayFrontComponentNamesColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayFrontComponentNamesColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayFrontComponentValuesColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayFrontComponentValuesColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayFrontComponentValuesColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayFrontLayoutTextsColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayFrontLayoutTextsColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayFrontLayoutTextsColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayFrontLegendTextsColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayFrontLegendTextsColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayFrontLegendTextsColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayFrontPackagesColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayFrontPackagesColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayFrontPackagesColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayFrontPadsColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayFrontPadsColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayFrontPadsColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayFrontTracksColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayFrontTracksColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayFrontTracksColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayHolesColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayHolesColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayHolesColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayInternalBoardsLimitsColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayInternalBoardsLimitsColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayInternalBoardsLimitsColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewDisplayViasColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewDisplayViasColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewDisplayViasColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mergerViewFrontLegendLinesColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mergerViewFrontLegendLinesColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mergerViewFrontLegendLinesColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.removeBoardModelButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'removeBoardModelButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'removeBoardModelButton' outlet is nil") ;
    }
    if let outlet : Any = self.showBoardHelpButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'showBoardHelpButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'showBoardHelpButton' outlet is nil") ;
    }
    if let outlet : Any = self.showPrefsForSettingMergerDisplayButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'showPrefsForSettingMergerDisplayButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'showPrefsForSettingMergerDisplayButton' outlet is nil") ;
    }
    if let outlet : Any = self.updateBoardModelButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'updateBoardModelButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'updateBoardModelButton' outlet is nil") ;
    }
  //--------------------------- Array controllers
    self.mBoardModelController.setManagedObjectContext (self.managedObjectContext ())
    self.mBoardModelController.bind_modelAndView (
      model: self.rootObject.boardModels_property,
      tableViewArray: [mBoardModelTableView!],
      optionalEBView: nil,
      file: #file,
      line: #line
    )
    self.mBoardInstanceController.setManagedObjectContext (self.managedObjectContext ())
    self.mBoardInstanceController.bind_modelAndView (
      model: self.rootObject.boardInstances_property,
      tableViewArray: [],
      optionalEBView: mComposedBoardView,
      file: #file,
      line: #line
    )
  //--------------------------- Selection controllers
    mBoardModelSelection.bind_selection (
      model: mBoardModelController.selectedArray_property,
      file: #file,
      line: #line
    )
    mBoardInstanceSelection.bind_selection (
      model: mBoardInstanceController.selectedArray_property,
      file: #file,
      line: #line
    )
  //--------------------------- Transient compute functions
    self.issues_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.rootObject.overlapingArrangment_property_selection.kind ()
        kind &= unwSelf.rootObject.boardRect_property_selection.kind ()
        kind &= unwSelf.rootObject.boardDisplayRect_property_selection.kind ()
        kind &= unwSelf.rootObject.boardInstances_property_selection.kind ()
        kind &= unwSelf.rootObject.boardInstances_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.overlapingArrangment_property_selection, unwSelf.rootObject.boardRect_property_selection, unwSelf.rootObject.boardDisplayRect_property_selection, unwSelf.rootObject.boardInstances_property_selection, unwSelf.rootObject.boardInstances_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_MergerDocument_issues (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mStatusImage_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerDocument_mStatusImage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mStatusMessage_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerDocument_mStatusMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.documentFileNameOk_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.documentFilePath_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.documentFilePath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerDocument_documentFileNameOk (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.incorrectDocumentFileErrorMessage_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.documentFilePath_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.documentFilePath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerDocument_incorrectDocumentFileErrorMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.documentIsUnnamed_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.documentFilePath_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.documentFilePath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerDocument_documentIsUnnamed (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.importArtworkButtonTitle_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.artworkName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.artworkName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerDocument_importArtworkButtonTitle (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.documentFilePath_property.readModelFunction = { return .single (self.computeTransient_documentFilePath ()) }
  //--------------------------- Install property observers for transients
    self.rootObject.overlapingArrangment_property.addEBObserver (self.issues_property)
    self.rootObject.boardRect_property.addEBObserver (self.issues_property)
    self.rootObject.boardDisplayRect_property.addEBObserver (self.issues_property)
    self.rootObject.boardInstances_property.addEBObserverOf_instanceRect (self.issues_property)
    self.rootObject.boardInstances_property.addEBObserverOf_boardLimitWidth (self.issues_property)
    self.issues_property.addEBObserver (self.mStatusImage_property)
    self.issues_property.addEBObserver (self.mStatusMessage_property)
    self.documentFilePath_property.addEBObserver (self.documentFileNameOk_property)
    self.documentFilePath_property.addEBObserver (self.incorrectDocumentFileErrorMessage_property)
    self.documentFilePath_property.addEBObserver (self.documentIsUnnamed_property)
    self.rootObject.artworkName_property.addEBObserver (self.importArtworkButtonTitle_property)
  //--------------------------- Install regular bindings
    mPageSegmentedControl?.bind_selectedPage (self.rootObject.selectedPageIndex_property, file: #file, line: #line)
    mStatusImageViewInToolbar?.bind_image (self.mStatusImage_property, file: #file, line: #line)
    mStatusImageViewInToolbar?.bind_tooltip (self.mStatusMessage_property, file: #file, line: #line)
    mIssueTextField?.bind_valueObserver (self.mStatusMessage_property, file: #file, line: #line)
    mIssueTableView?.bind_issues (self.issues_property, file: #file, line: #line)
    mModelViewHorizontalFlipCheckbox?.bind_value (g_Preferences!.mergerModelViewHorizontalFlip_property, file: #file, line: #line)
    mModelViewVerticalFlipCheckbox?.bind_value (g_Preferences!.mergerModelViewVerticalFlip_property, file: #file, line: #line)
    mModelViewDisplayHolesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayHoles_property, file: #file, line: #line)
    mModelViewDisplayViasCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayVias_property, file: #file, line: #line)
    mModelViewDisplayFrontPadsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontPads_property, file: #file, line: #line)
    mModelViewDisplayInternalBoardsLimitsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayInternalBoardsLimits_property, file: #file, line: #line)
    mModelViewDisplayBoardLimitsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBoardLimits_property, file: #file, line: #line)
    mModelViewDisplayFrontComponentNamesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontComponentNames_property, file: #file, line: #line)
    mModelViewDisplayFrontComponenValuesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontComponentValues_property, file: #file, line: #line)
    mModelViewDisplayFrontPackagesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontPackages_property, file: #file, line: #line)
    mModelViewDisplayFrontLegendTextsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontLegendTexts_property, file: #file, line: #line)
    mModelViewDisplayFrontTracksCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontTracks_property, file: #file, line: #line)
    mModelViewDisplayFrontLayoutTextsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontLayoutTexts_property, file: #file, line: #line)
    mModelViewDisplayBackPadsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackPads_property, file: #file, line: #line)
    mModelViewDisplayBackComponentNamesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackComponentNames_property, file: #file, line: #line)
    mModelViewDisplayBackComponenValuesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackComponentValues_property, file: #file, line: #line)
    mModelViewDisplayBackLegendTextsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackLegendTexts_property, file: #file, line: #line)
    mModelViewDisplayBackPackagesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackPackages_property, file: #file, line: #line)
    mModelViewDisplayBackTracksCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackTracks_property, file: #file, line: #line)
    mModelViewDisplayBackLayoutTextsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackLayoutTexts_property, file: #file, line: #line)
    mModelViewDisplayFrontLegendLinesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontLegendLines_property, file: #file, line: #line)
    mModelViewDisplayBackLegendLinesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackLegendLines_property, file: #file, line: #line)
    mBoardViewHorizontalFlipCheckbox?.bind_value (g_Preferences!.mergerBoardViewHorizontalFlip_property, file: #file, line: #line)
    mBoardViewVerticalFlipCheckbox?.bind_value (g_Preferences!.mergerBoardViewVerticalFlip_property, file: #file, line: #line)
    mBoardViewDisplayHolesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayHoles_property, file: #file, line: #line)
    mBoardViewDisplayViasCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayVias_property, file: #file, line: #line)
    mBoardViewDisplayFrontPadsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontPads_property, file: #file, line: #line)
    mBoardViewDisplayBoardLimitsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBoardLimits_property, file: #file, line: #line)
    mBoardViewDisplayInternalBoardsLimitsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayInternalBoardsLimits_property, file: #file, line: #line)
    mBoardViewDisplayFrontComponentNamesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontComponentNames_property, file: #file, line: #line)
    mBoardViewDisplayFrontComponenValuesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontComponentValues_property, file: #file, line: #line)
    mBoardViewDisplayFrontPackagesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontPackages_property, file: #file, line: #line)
    mBoardViewDisplayFrontLegendTextsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontLegendTexts_property, file: #file, line: #line)
    mBoardViewDisplayFrontTracksCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontTracks_property, file: #file, line: #line)
    mBoardViewDisplayFrontLayoutTextsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontLayoutTexts_property, file: #file, line: #line)
    mBoardViewDisplayBackPadsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackPads_property, file: #file, line: #line)
    mBoardViewDisplayBackComponentNamesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackComponentNames_property, file: #file, line: #line)
    mBoardViewDisplayBackComponenValuesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackComponentValues_property, file: #file, line: #line)
    mBoardViewDisplayBackLegendTextsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackLegendTexts_property, file: #file, line: #line)
    mBoardViewDisplayBackPackagesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackPackages_property, file: #file, line: #line)
    mBoardViewDisplayBackTracksCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackTracks_property, file: #file, line: #line)
    mBoardViewDisplayBackLayoutTextsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackLayoutTexts_property, file: #file, line: #line)
    mBoardViewDisplayFrontLegendLinesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontLegendLines_property, file: #file, line: #line)
    mBoardViewDisplayBackLegendLinesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackLegendLines_property, file: #file, line: #line)
    mergerViewDisplayHolesColorWell?.bind_color (g_Preferences!.mergerColorHoles_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayViasColorWell?.bind_color (g_Preferences!.mergerColorVias_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayFrontPadsColorWell?.bind_color (g_Preferences!.mergerColorFrontPads_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayBoardLimitsColorWell?.bind_color (g_Preferences!.mergerColorBoardLimits_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayInternalBoardsLimitsColorWell?.bind_color (g_Preferences!.mergerColorInternalBoardsLimits_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayFrontComponentNamesColorWell?.bind_color (g_Preferences!.mergerColorFrontComponentNames_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayFrontComponentValuesColorWell?.bind_color (g_Preferences!.mergerColorFrontComponentValues_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayFrontPackagesColorWell?.bind_color (g_Preferences!.mergerColorFrontPackages_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayFrontLegendTextsColorWell?.bind_color (g_Preferences!.mergerColorFrontLegendTexts_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayFrontTracksColorWell?.bind_color (g_Preferences!.mergerColorFrontTracks_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayFrontLayoutTextsColorWell?.bind_color (g_Preferences!.mergerColorFrontLayoutTexts_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayBackPadsColorWell?.bind_color (g_Preferences!.mergerColorBackPads_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayBackComponentNamesColorWell?.bind_color (g_Preferences!.mergerColorBackComponentNames_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayBackComponentValuesColorWell?.bind_color (g_Preferences!.mergerColorBackComponentValues_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayBackLegendTextsColorWell?.bind_color (g_Preferences!.mergerColorBackLegendTexts_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayBackPackagesColorWell?.bind_color (g_Preferences!.mergerColorBackPackages_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayBackTracksColorWell?.bind_color (g_Preferences!.mergerColorBackTracks_property, file: #file, line: #line, sendContinously:false)
    mergerViewDisplayBackLayoutTextsColorWell?.bind_color (g_Preferences!.mergerColorBackLayoutTexts_property, file: #file, line: #line, sendContinously:false)
    mergerViewBackgroundColorWell?.bind_color (g_Preferences!.mergerColorBackground_property, file: #file, line: #line, sendContinously:false)
    mergerViewFrontLegendLinesColorWell?.bind_color (g_Preferences!.mergerColorFrontLegendLines_property, file: #file, line: #line, sendContinously:false)
    mergerViewBackLegendLinesColorWell?.bind_color (g_Preferences!.mergerColorBackLegendLines_property, file: #file, line: #line, sendContinously:false)
    mArtworkNameTextField?.bind_valueObserver (self.mBoardModelSelection.artworkName_property, file: #file, line: #line)
    mInstanceCountTextField?.bind_valueObserver (self.mBoardModelSelection.instanceCount_property, file: #file, line: #line, autoFormatter:true)
    mModelWidthUnitPopUp?.bind_selectedTag (self.mBoardModelSelection.modelWidthUnit_property, file: #file, line: #line)
    mModelWidthTextField?.bind_dimensionAndUnit (self.mBoardModelSelection.modelWidth_property, self.mBoardModelSelection.modelWidthUnit_property, file: #file, line: #line)
    mModelHeightUnitPopUp?.bind_selectedTag (self.mBoardModelSelection.modelHeightUnit_property, file: #file, line: #line)
    mModelHeightTextField?.bind_dimensionAndUnit (self.mBoardModelSelection.modelHeight_property, self.mBoardModelSelection.modelHeightUnit_property, file: #file, line: #line)
    mModelLimitWidthUnitPopUp?.bind_selectedTag (self.mBoardModelSelection.modelLimitWidthUnit_property, file: #file, line: #line)
    mModelBoardLimitTextField?.bind_dimensionAndUnit (self.mBoardModelSelection.modelLimitWidth_property, self.mBoardModelSelection.modelLimitWidthUnit_property, file: #file, line: #line)
    mBoardModelView?.bind_size (self.mBoardModelSelection.modelWidth_property, self.mBoardModelSelection.modelHeight_property, file: #file, line: #line)
    mBoardModelView?.bind_zoom (self.mBoardModelSelection.zoom_property, file: #file, line: #line)
    mBoardModelView?.bind_horizontalFlip (g_Preferences!.mergerModelViewHorizontalFlip_property, file: #file, line: #line)
    mBoardModelView?.bind_verticalFlip (g_Preferences!.mergerModelViewVerticalFlip_property, file: #file, line: #line)
    mBoardModelView?.bind_overObjectsDisplay (self.mBoardModelSelection.imageForModel_property, file: #file, line: #line)
    mBoardInsertMenu?.bind_names (self.rootObject.modelNames_property, file: #file, line: #line)
    mInstanceModelNameTextField?.bind_valueObserver (self.mBoardInstanceSelection.modelName_property, file: #file, line: #line)
    mAutomaticBoardSizeSwitch?.bind_value (self.rootObject.automaticBoardSize_property, file: #file, line: #line)
    mArrowMagnitudeUnitPopUp?.bind_selectedTag (self.rootObject.arrowMagnitudeUnit_property, file: #file, line: #line)
    mArrowMagnitudeTextField?.bind_dimensionAndUnit (self.rootObject.arrowMagnitude_property, self.rootObject.arrowMagnitudeUnit_property, file: #file, line: #line)
    mShiftArrowMagnitudeUnitPopUp?.bind_selectedTag (self.rootObject.shiftArrowMagnitudeUnit_property, file: #file, line: #line)
    mShiftArrowMagnitudeTextField?.bind_dimensionAndUnit (self.rootObject.shiftArrowMagnitude_property, self.rootObject.shiftArrowMagnitudeUnit_property, file: #file, line: #line)
    mManualBoardWidthUnitPopUp?.bind_selectedTag (self.rootObject.boardWidthUnit_property, file: #file, line: #line)
    mManualBoardWidthTextField?.bind_dimensionAndUnit (self.rootObject.boardManualWidth_property, self.rootObject.boardWidthUnit_property, file: #file, line: #line)
    mManualBoardHeightUnitPopUp?.bind_selectedTag (self.rootObject.boardHeightUnit_property, file: #file, line: #line)
    mManualBoardHeightTextField?.bind_dimensionAndUnit (self.rootObject.boardManualHeight_property, self.rootObject.boardHeightUnit_property, file: #file, line: #line)
    mBoardWidthUnitPopUp?.bind_selectedTag (self.rootObject.boardWidthUnit_property, file: #file, line: #line)
    mBoardWidthTextField?.bind_dimensionAndUnit (self.rootObject.boardWidth_property, self.rootObject.boardWidthUnit_property, file: #file, line: #line)
    mBoardHeightUnitPopUp?.bind_selectedTag (self.rootObject.boardHeightUnit_property, file: #file, line: #line)
    mBoardHeightTextField?.bind_dimensionAndUnit (self.rootObject.boardHeight_property, self.rootObject.boardHeightUnit_property, file: #file, line: #line)
    mModelDragSourceTableView?.bind_models (self.rootObject.modelNames_property, file: #file, line: #line)
    mBoardLimitWidthUnitPopUp?.bind_selectedTag (self.rootObject.boardLimitWidthUnit_property, file: #file, line: #line)
    mBoardBoardLimitTextField?.bind_dimensionAndUnit (self.rootObject.boardLimitWidth_property, self.rootObject.boardLimitWidthUnit_property, file: #file, line: #line)
    mComposedBoardView?.bind_size (self.rootObject.boardWidth_property, self.rootObject.boardHeight_property, file: #file, line: #line)
    mComposedBoardView?.bind_zoom (self.rootObject.zoom_property, file: #file, line: #line)
    mComposedBoardView?.bind_horizontalFlip (g_Preferences!.mergerBoardViewHorizontalFlip_property, file: #file, line: #line)
    mComposedBoardView?.bind_verticalFlip (g_Preferences!.mergerBoardViewVerticalFlip_property, file: #file, line: #line)
    mComposedBoardView?.bind_overObjectsDisplay (self.rootObject.overObjectsDisplay_property, file: #file, line: #line)
    mComposedBoardView?.bind_arrowKeyMagnitude (self.rootObject.cocoaArrowMagnitude_property, file: #file, line: #line)
    mComposedBoardView?.bind_shiftArrowKeyMagnitude (self.rootObject.cocoaShiftArrowMagnitude_property, file: #file, line: #line)
    mSelectedBoardXUnitPopUp?.bind_selectedTag (self.rootObject.selectedBoardXUnit_property, file: #file, line: #line)
    mSelectedBoardXTextField?.bind_dimensionAndUnit (self.mBoardInstanceSelection.x_property, self.rootObject.selectedBoardXUnit_property, file: #file, line: #line)
    mSelectedBoardYUnitPopUp?.bind_selectedTag (self.rootObject.selectedBoardYUnit_property, file: #file, line: #line)
    mSelectedBoardYTextField?.bind_dimensionAndUnit (self.mBoardInstanceSelection.y_property, self.rootObject.selectedBoardYUnit_property, file: #file, line: #line)
    mInstanceRotation?.bind_quadrant (self.mBoardInstanceSelection.instanceRotation_property, file: #file, line: #line)
    mOverlapSwitch?.bind_value (self.rootObject.overlapingArrangment_property, file: #file, line: #line)
    mIncorrectDocumentNameTextField?.bind_valueObserver (self.incorrectDocumentFileErrorMessage_property, file: #file, line: #line)
    mArtworNameTextField?.bind_valueObserver (self.rootObject.artworkName_property, file: #file, line: #line)
    mImportArtworkButton?.bind_title (self.importArtworkButtonTitle_property, file: #file, line: #line)
    mGenerateGerber?.bind_value (self.rootObject.generateGerberProductFile_property, file: #file, line: #line)
    mGeneratePDF?.bind_value (self.rootObject.generatePDFProductFile_property, file: #file, line: #line)
    mBoardArchiveFormatPopUpButton?.bind_format (self.rootObject.generatedBoardArchiveFormat_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (self.rootObject.selectedPageIndex_property_selection <= EBSelection.single (1))
        },
        outlet:self.showPrefsForSettingMergerDisplayButton
      )
      self.rootObject.selectedPageIndex_property.addEBObserver (controller)
      mController_showPrefsForSettingMergerDisplayButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return (self.rootObject.selectedPageIndex_property_selection > EBSelection.single (1))
        },
        outlet:self.mDisplaySettingView
      )
      self.rootObject.selectedPageIndex_property.addEBObserver (controller)
      mController_mDisplaySettingView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return (self.rootObject.boardModels_property.count_property_selection > EBSelection.single (0))
        },
        outlet:self.mNoModelMessage
      )
      self.rootObject.boardModels_property.count_property.addEBObserver (controller)
      mController_mNoModelMessage_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return ((self.mBoardModelController.selectedArray_property.count_property_selection > EBSelection.single (0)) && (self.mBoardModelSelection.instanceCount_property_selection == EBSelection.single (0)))
        },
        outlet:self.removeBoardModelButton
      )
      self.mBoardModelController.selectedArray_property.count_property.addEBObserver (controller)
      self.mBoardModelSelection.instanceCount_property.addEBObserver (controller)
      mController_removeBoardModelButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (self.mBoardModelController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet:self.updateBoardModelButton
      )
      self.mBoardModelController.selectedArray_property.count_property.addEBObserver (controller)
      mController_updateBoardModelButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return !self.rootObject.automaticBoardSize_property_selection
        },
        outlet:self.mAutomaticBoardSizeView
      )
      self.rootObject.automaticBoardSize_property.addEBObserver (controller)
      mController_mAutomaticBoardSizeView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return self.rootObject.automaticBoardSize_property_selection
        },
        outlet:self.mManualBoardSizeView
      )
      self.rootObject.automaticBoardSize_property.addEBObserver (controller)
      mController_mManualBoardSizeView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return (self.rootObject.boardInstances_property.count_property_selection > EBSelection.single (0))
        },
        outlet:self.mEmptyBoardMessage
      )
      self.rootObject.boardInstances_property.count_property.addEBObserver (controller)
      mController_mEmptyBoardMessage_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (self.rootObject.boardInstances_property.count_property_selection > EBSelection.single (0))
        },
        outlet:self.mOverlapSwitch
      )
      self.rootObject.boardInstances_property.count_property.addEBObserver (controller)
      mController_mOverlapSwitch_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (self.mBoardInstanceController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet:self.mMoveRightButton
      )
      self.mBoardInstanceController.selectedArray_property.count_property.addEBObserver (controller)
      mController_mMoveRightButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (self.mBoardInstanceController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet:self.mMoveLeftButton
      )
      self.mBoardInstanceController.selectedArray_property.count_property.addEBObserver (controller)
      mController_mMoveLeftButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (self.mBoardInstanceController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet:self.mMoveUpButton
      )
      self.mBoardInstanceController.selectedArray_property.count_property.addEBObserver (controller)
      mController_mMoveUpButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (self.mBoardInstanceController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet:self.mMoveDownButton
      )
      self.mBoardInstanceController.selectedArray_property.count_property.addEBObserver (controller)
      mController_mMoveDownButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return !self.rootObject.artwork_property_selection
        },
        outlet:self.mNoArtworkMessage
      )
      self.rootObject.artwork_property.addEBObserver (controller)
      mController_mNoArtworkMessage_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return (self.rootObject.artwork_property_selection || self.documentFileNameOk_property_selection)
        },
        outlet:self.mDangerView
      )
      self.documentFileNameOk_property.addEBObserver (controller)
      self.rootObject.artwork_property.addEBObserver (controller)
      mController_mDangerView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return ((!self.rootObject.artwork_property_selection && (self.rootObject.boardInstances_property.count_property_selection > EBSelection.single (0))) && !self.documentIsUnnamed_property_selection)
        },
        outlet:self.mGenerateProductFilesActionButton
      )
      self.documentIsUnnamed_property.addEBObserver (controller)
      self.rootObject.artwork_property.addEBObserver (controller)
      self.rootObject.boardInstances_property.count_property.addEBObserver (controller)
      mController_mGenerateProductFilesActionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return self.rootObject.artwork_property_selection
        },
        outlet:self.mLogTextView
      )
      self.rootObject.artwork_property.addEBObserver (controller)
      mController_mLogTextView_hidden = controller
    }
  //--------------------------- Set targets / actions
    showPrefsForSettingMergerDisplayButton?.target = self
    showPrefsForSettingMergerDisplayButton?.action = #selector (MergerDocument.showPrefsForSettingMergerDisplayAction (_:))
    dismissPrefsForSettingMergerDisplayButton?.target = self
    dismissPrefsForSettingMergerDisplayButton?.action = #selector (MergerDocument.showPrefsForSettingMergerDisplayAction (_:))
    addBoardModelButton?.target = self
    addBoardModelButton?.action = #selector (MergerDocument.addBoardModelAction (_:))
    removeBoardModelButton?.target = mBoardModelController
    removeBoardModelButton?.action = #selector (ArrayController_MergerDocument_mBoardModelController.remove (_:))
    updateBoardModelButton?.target = self
    updateBoardModelButton?.action = #selector (MergerDocument.updateBoardModelAction (_:))
    showBoardHelpButton?.target = self
    showBoardHelpButton?.action = #selector (MergerDocument.showBoardHelpAction (_:))
    mMoveRightButton?.target = self
    mMoveRightButton?.action = #selector (MergerDocument.moveRightAction (_:))
    mMoveLeftButton?.target = self
    mMoveLeftButton?.action = #selector (MergerDocument.moveLeftAction (_:))
    mMoveUpButton?.target = self
    mMoveUpButton?.action = #selector (MergerDocument.moveUpAction (_:))
    mMoveDownButton?.target = self
    mMoveDownButton?.action = #selector (MergerDocument.moveDownAction (_:))
    mGenerateProductFilesActionButton?.target = self
    mGenerateProductFilesActionButton?.action = #selector (MergerDocument.generateProductFilesAction (_:))
    mImportArtworkButton?.target = self
    mImportArtworkButton?.action = #selector (MergerDocument.importArtworkAction (_:))
  //--------------------------- Update display
    super.windowControllerDidLoadNib (aController)
    flushOutletEvents ()
  }

  //····················································································································
  //   removeWindowController
  //····················································································································

  override func removeUserInterface () {
  //--------------------------- Unbind regular bindings
    mPageSegmentedControl?.unbind_selectedPage ()
    mStatusImageViewInToolbar?.unbind_image ()
    mStatusImageViewInToolbar?.unbind_tooltip ()
    mIssueTextField?.unbind_valueObserver ()
    mIssueTableView?.unbind_issues ()
    mModelViewHorizontalFlipCheckbox?.unbind_value ()
    mModelViewVerticalFlipCheckbox?.unbind_value ()
    mModelViewDisplayHolesCheckbox?.unbind_value ()
    mModelViewDisplayViasCheckbox?.unbind_value ()
    mModelViewDisplayFrontPadsCheckbox?.unbind_value ()
    mModelViewDisplayInternalBoardsLimitsCheckbox?.unbind_value ()
    mModelViewDisplayBoardLimitsCheckbox?.unbind_value ()
    mModelViewDisplayFrontComponentNamesCheckbox?.unbind_value ()
    mModelViewDisplayFrontComponenValuesCheckbox?.unbind_value ()
    mModelViewDisplayFrontPackagesCheckbox?.unbind_value ()
    mModelViewDisplayFrontLegendTextsCheckbox?.unbind_value ()
    mModelViewDisplayFrontTracksCheckbox?.unbind_value ()
    mModelViewDisplayFrontLayoutTextsCheckbox?.unbind_value ()
    mModelViewDisplayBackPadsCheckbox?.unbind_value ()
    mModelViewDisplayBackComponentNamesCheckbox?.unbind_value ()
    mModelViewDisplayBackComponenValuesCheckbox?.unbind_value ()
    mModelViewDisplayBackLegendTextsCheckbox?.unbind_value ()
    mModelViewDisplayBackPackagesCheckbox?.unbind_value ()
    mModelViewDisplayBackTracksCheckbox?.unbind_value ()
    mModelViewDisplayBackLayoutTextsCheckbox?.unbind_value ()
    mModelViewDisplayFrontLegendLinesCheckbox?.unbind_value ()
    mModelViewDisplayBackLegendLinesCheckbox?.unbind_value ()
    mBoardViewHorizontalFlipCheckbox?.unbind_value ()
    mBoardViewVerticalFlipCheckbox?.unbind_value ()
    mBoardViewDisplayHolesCheckbox?.unbind_value ()
    mBoardViewDisplayViasCheckbox?.unbind_value ()
    mBoardViewDisplayFrontPadsCheckbox?.unbind_value ()
    mBoardViewDisplayBoardLimitsCheckbox?.unbind_value ()
    mBoardViewDisplayInternalBoardsLimitsCheckbox?.unbind_value ()
    mBoardViewDisplayFrontComponentNamesCheckbox?.unbind_value ()
    mBoardViewDisplayFrontComponenValuesCheckbox?.unbind_value ()
    mBoardViewDisplayFrontPackagesCheckbox?.unbind_value ()
    mBoardViewDisplayFrontLegendTextsCheckbox?.unbind_value ()
    mBoardViewDisplayFrontTracksCheckbox?.unbind_value ()
    mBoardViewDisplayFrontLayoutTextsCheckbox?.unbind_value ()
    mBoardViewDisplayBackPadsCheckbox?.unbind_value ()
    mBoardViewDisplayBackComponentNamesCheckbox?.unbind_value ()
    mBoardViewDisplayBackComponenValuesCheckbox?.unbind_value ()
    mBoardViewDisplayBackLegendTextsCheckbox?.unbind_value ()
    mBoardViewDisplayBackPackagesCheckbox?.unbind_value ()
    mBoardViewDisplayBackTracksCheckbox?.unbind_value ()
    mBoardViewDisplayBackLayoutTextsCheckbox?.unbind_value ()
    mBoardViewDisplayFrontLegendLinesCheckbox?.unbind_value ()
    mBoardViewDisplayBackLegendLinesCheckbox?.unbind_value ()
    mergerViewDisplayHolesColorWell?.unbind_color ()
    mergerViewDisplayViasColorWell?.unbind_color ()
    mergerViewDisplayFrontPadsColorWell?.unbind_color ()
    mergerViewDisplayBoardLimitsColorWell?.unbind_color ()
    mergerViewDisplayInternalBoardsLimitsColorWell?.unbind_color ()
    mergerViewDisplayFrontComponentNamesColorWell?.unbind_color ()
    mergerViewDisplayFrontComponentValuesColorWell?.unbind_color ()
    mergerViewDisplayFrontPackagesColorWell?.unbind_color ()
    mergerViewDisplayFrontLegendTextsColorWell?.unbind_color ()
    mergerViewDisplayFrontTracksColorWell?.unbind_color ()
    mergerViewDisplayFrontLayoutTextsColorWell?.unbind_color ()
    mergerViewDisplayBackPadsColorWell?.unbind_color ()
    mergerViewDisplayBackComponentNamesColorWell?.unbind_color ()
    mergerViewDisplayBackComponentValuesColorWell?.unbind_color ()
    mergerViewDisplayBackLegendTextsColorWell?.unbind_color ()
    mergerViewDisplayBackPackagesColorWell?.unbind_color ()
    mergerViewDisplayBackTracksColorWell?.unbind_color ()
    mergerViewDisplayBackLayoutTextsColorWell?.unbind_color ()
    mergerViewBackgroundColorWell?.unbind_color ()
    mergerViewFrontLegendLinesColorWell?.unbind_color ()
    mergerViewBackLegendLinesColorWell?.unbind_color ()
    mArtworkNameTextField?.unbind_valueObserver ()
    mInstanceCountTextField?.unbind_valueObserver ()
    mModelWidthUnitPopUp?.unbind_selectedTag ()
    mModelWidthTextField?.unbind_dimensionAndUnit ()
    mModelHeightUnitPopUp?.unbind_selectedTag ()
    mModelHeightTextField?.unbind_dimensionAndUnit ()
    mModelLimitWidthUnitPopUp?.unbind_selectedTag ()
    mModelBoardLimitTextField?.unbind_dimensionAndUnit ()
    mBoardModelView?.unbind_size ()
    mBoardModelView?.unbind_zoom ()
    mBoardModelView?.unbind_horizontalFlip ()
    mBoardModelView?.unbind_verticalFlip ()
    mBoardModelView?.unbind_overObjectsDisplay ()
    mBoardInsertMenu?.unbind_names ()
    mInstanceModelNameTextField?.unbind_valueObserver ()
    mAutomaticBoardSizeSwitch?.unbind_value ()
    mArrowMagnitudeUnitPopUp?.unbind_selectedTag ()
    mArrowMagnitudeTextField?.unbind_dimensionAndUnit ()
    mShiftArrowMagnitudeUnitPopUp?.unbind_selectedTag ()
    mShiftArrowMagnitudeTextField?.unbind_dimensionAndUnit ()
    mManualBoardWidthUnitPopUp?.unbind_selectedTag ()
    mManualBoardWidthTextField?.unbind_dimensionAndUnit ()
    mManualBoardHeightUnitPopUp?.unbind_selectedTag ()
    mManualBoardHeightTextField?.unbind_dimensionAndUnit ()
    mBoardWidthUnitPopUp?.unbind_selectedTag ()
    mBoardWidthTextField?.unbind_dimensionAndUnit ()
    mBoardHeightUnitPopUp?.unbind_selectedTag ()
    mBoardHeightTextField?.unbind_dimensionAndUnit ()
    mModelDragSourceTableView?.unbind_models ()
    mBoardLimitWidthUnitPopUp?.unbind_selectedTag ()
    mBoardBoardLimitTextField?.unbind_dimensionAndUnit ()
    mComposedBoardView?.unbind_size ()
    mComposedBoardView?.unbind_zoom ()
    mComposedBoardView?.unbind_horizontalFlip ()
    mComposedBoardView?.unbind_verticalFlip ()
    mComposedBoardView?.unbind_overObjectsDisplay ()
    mComposedBoardView?.unbind_arrowKeyMagnitude ()
    mComposedBoardView?.unbind_shiftArrowKeyMagnitude ()
    mSelectedBoardXUnitPopUp?.unbind_selectedTag ()
    mSelectedBoardXTextField?.unbind_dimensionAndUnit ()
    mSelectedBoardYUnitPopUp?.unbind_selectedTag ()
    mSelectedBoardYTextField?.unbind_dimensionAndUnit ()
    mInstanceRotation?.unbind_quadrant ()
    mOverlapSwitch?.unbind_value ()
    mIncorrectDocumentNameTextField?.unbind_valueObserver ()
    mArtworNameTextField?.unbind_valueObserver ()
    mImportArtworkButton?.unbind_title ()
    mGenerateGerber?.unbind_value ()
    mGeneratePDF?.unbind_value ()
    mBoardArchiveFormatPopUpButton?.unbind_format ()
  //--------------------------- Unbind multiple bindings
    self.rootObject.selectedPageIndex_property.removeEBObserver (mController_showPrefsForSettingMergerDisplayButton_enabled!)
    mController_showPrefsForSettingMergerDisplayButton_enabled = nil
    self.rootObject.selectedPageIndex_property.removeEBObserver (mController_mDisplaySettingView_hidden!)
    mController_mDisplaySettingView_hidden = nil
    self.rootObject.boardModels_property.count_property.removeEBObserver (mController_mNoModelMessage_hidden!)
    mController_mNoModelMessage_hidden = nil
    self.mBoardModelController.selectedArray_property.count_property.removeEBObserver (mController_removeBoardModelButton_enabled!)
    self.mBoardModelSelection.instanceCount_property.removeEBObserver (mController_removeBoardModelButton_enabled!)
    mController_removeBoardModelButton_enabled = nil
    self.mBoardModelController.selectedArray_property.count_property.removeEBObserver (mController_updateBoardModelButton_enabled!)
    mController_updateBoardModelButton_enabled = nil
    self.rootObject.automaticBoardSize_property.removeEBObserver (mController_mAutomaticBoardSizeView_hidden!)
    mController_mAutomaticBoardSizeView_hidden = nil
    self.rootObject.automaticBoardSize_property.removeEBObserver (mController_mManualBoardSizeView_hidden!)
    mController_mManualBoardSizeView_hidden = nil
    self.rootObject.boardInstances_property.count_property.removeEBObserver (mController_mEmptyBoardMessage_hidden!)
    mController_mEmptyBoardMessage_hidden = nil
    self.rootObject.boardInstances_property.count_property.removeEBObserver (mController_mOverlapSwitch_enabled!)
    mController_mOverlapSwitch_enabled = nil
    self.mBoardInstanceController.selectedArray_property.count_property.removeEBObserver (mController_mMoveRightButton_enabled!)
    mController_mMoveRightButton_enabled = nil
    self.mBoardInstanceController.selectedArray_property.count_property.removeEBObserver (mController_mMoveLeftButton_enabled!)
    mController_mMoveLeftButton_enabled = nil
    self.mBoardInstanceController.selectedArray_property.count_property.removeEBObserver (mController_mMoveUpButton_enabled!)
    mController_mMoveUpButton_enabled = nil
    self.mBoardInstanceController.selectedArray_property.count_property.removeEBObserver (mController_mMoveDownButton_enabled!)
    mController_mMoveDownButton_enabled = nil
    self.rootObject.artwork_property.removeEBObserver (mController_mNoArtworkMessage_hidden!)
    mController_mNoArtworkMessage_hidden = nil
    self.documentFileNameOk_property.removeEBObserver (mController_mDangerView_hidden!)
    self.rootObject.artwork_property.removeEBObserver (mController_mDangerView_hidden!)
    mController_mDangerView_hidden = nil
    self.documentIsUnnamed_property.removeEBObserver (mController_mGenerateProductFilesActionButton_enabled!)
    self.rootObject.artwork_property.removeEBObserver (mController_mGenerateProductFilesActionButton_enabled!)
    self.rootObject.boardInstances_property.count_property.removeEBObserver (mController_mGenerateProductFilesActionButton_enabled!)
    mController_mGenerateProductFilesActionButton_enabled = nil
    self.rootObject.artwork_property.removeEBObserver (mController_mLogTextView_hidden!)
    mController_mLogTextView_hidden = nil
  //--------------------------- Uninstall compute functions for transients
    self.issues_property.readModelFunction = nil
    self.mStatusImage_property.readModelFunction = nil
    self.mStatusMessage_property.readModelFunction = nil
    self.documentFileNameOk_property.readModelFunction = nil
    self.incorrectDocumentFileErrorMessage_property.readModelFunction = nil
    self.documentIsUnnamed_property.readModelFunction = nil
    self.importArtworkButtonTitle_property.readModelFunction = nil
    self.documentFilePath_property.readModelFunction = nil
  //--------------------------- Unbind array controllers
    mBoardModelController.unbind_modelAndView ()
    mBoardInstanceController.unbind_modelAndView ()
  //--------------------------- Unbind selection controllers
    mBoardModelSelection.unbind_selection ()
    mBoardInstanceSelection.unbind_selection ()
  //--------------------------- Uninstall property observers for transients
    self.rootObject.overlapingArrangment_property.removeEBObserver (self.issues_property)
    self.rootObject.boardRect_property.removeEBObserver (self.issues_property)
    self.rootObject.boardDisplayRect_property.removeEBObserver (self.issues_property)
    self.rootObject.boardInstances_property.removeEBObserverOf_instanceRect (self.issues_property)
    self.rootObject.boardInstances_property.removeEBObserverOf_boardLimitWidth (self.issues_property)
    self.issues_property.removeEBObserver (self.mStatusImage_property)
    self.issues_property.removeEBObserver (self.mStatusMessage_property)
    self.documentFilePath_property.removeEBObserver (self.documentFileNameOk_property)
    self.documentFilePath_property.removeEBObserver (self.incorrectDocumentFileErrorMessage_property)
    self.documentFilePath_property.removeEBObserver (self.documentIsUnnamed_property)
    self.rootObject.artworkName_property.removeEBObserver (self.importArtworkButtonTitle_property)
  //--------------------------- Remove targets / actions
    showPrefsForSettingMergerDisplayButton?.target = nil
    dismissPrefsForSettingMergerDisplayButton?.target = nil
    addBoardModelButton?.target = nil
    removeBoardModelButton?.target = nil
    updateBoardModelButton?.target = nil
    showBoardHelpButton?.target = nil
    mMoveRightButton?.target = nil
    mMoveLeftButton?.target = nil
    mMoveUpButton?.target = nil
    mMoveDownButton?.target = nil
    mGenerateProductFilesActionButton?.target = nil
    mImportArtworkButton?.target = nil
  //--------------------------- Clean up outlets
    self.addBoardModelButton?.ebCleanUp ()
    self.boardHelpPanel?.ebCleanUp ()
    self.dismissPrefsForSettingMergerDisplayButton?.ebCleanUp ()
    self.mArrowMagnitudeTextField?.ebCleanUp ()
    self.mArrowMagnitudeUnitPopUp?.ebCleanUp ()
    self.mArtworNameTextField?.ebCleanUp ()
    self.mArtworkNameTextField?.ebCleanUp ()
    self.mAutomaticBoardSizeSwitch?.ebCleanUp ()
    self.mAutomaticBoardSizeView?.ebCleanUp ()
    self.mBoardArchiveFormatPopUpButton?.ebCleanUp ()
    self.mBoardBoardLimitTextField?.ebCleanUp ()
    self.mBoardClipView?.ebCleanUp ()
    self.mBoardHeightTextField?.ebCleanUp ()
    self.mBoardHeightUnitPopUp?.ebCleanUp ()
    self.mBoardInsertMenu?.ebCleanUp ()
    self.mBoardLimitWidthUnitPopUp?.ebCleanUp ()
    self.mBoardModelTableView?.ebCleanUp ()
    self.mBoardModelView?.ebCleanUp ()
    self.mBoardViewDisplayBackComponenValuesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackComponentNamesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackLayoutTextsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackLegendLinesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackLegendTextsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackPackagesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackPadsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackTracksCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBoardLimitsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontComponenValuesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontComponentNamesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontLayoutTextsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontLegendLinesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontLegendTextsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontPackagesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontPadsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontTracksCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayHolesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayInternalBoardsLimitsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayViasCheckbox?.ebCleanUp ()
    self.mBoardViewHorizontalFlipCheckbox?.ebCleanUp ()
    self.mBoardViewVerticalFlipCheckbox?.ebCleanUp ()
    self.mBoardWidthTextField?.ebCleanUp ()
    self.mBoardWidthUnitPopUp?.ebCleanUp ()
    self.mComposedBoardView?.ebCleanUp ()
    self.mDangerView?.ebCleanUp ()
    self.mDeselectIssueButton?.ebCleanUp ()
    self.mDisplaySettingView?.ebCleanUp ()
    self.mEmptyBoardMessage?.ebCleanUp ()
    self.mGenerateGerber?.ebCleanUp ()
    self.mGeneratePDF?.ebCleanUp ()
    self.mGenerateProductFilesActionButton?.ebCleanUp ()
    self.mImportArtworkButton?.ebCleanUp ()
    self.mIncorrectDocumentNameTextField?.ebCleanUp ()
    self.mInsertArrayOfBoardsOrientation?.ebCleanUp ()
    self.mInsertArrayOfBoardsPanel?.ebCleanUp ()
    self.mInsertArrayOfBoardsPopUpButton?.ebCleanUp ()
    self.mInsertArrayOfBoardsXCountField?.ebCleanUp ()
    self.mInsertArrayOfBoardsYCountField?.ebCleanUp ()
    self.mInsertedInstanceDefaultOrientation?.ebCleanUp ()
    self.mInstanceCountTextField?.ebCleanUp ()
    self.mInstanceModelNameTextField?.ebCleanUp ()
    self.mInstanceRotation?.ebCleanUp ()
    self.mIssueTableView?.ebCleanUp ()
    self.mIssueTextField?.ebCleanUp ()
    self.mLogTextView?.ebCleanUp ()
    self.mManualBoardHeightTextField?.ebCleanUp ()
    self.mManualBoardHeightUnitPopUp?.ebCleanUp ()
    self.mManualBoardSizeView?.ebCleanUp ()
    self.mManualBoardWidthTextField?.ebCleanUp ()
    self.mManualBoardWidthUnitPopUp?.ebCleanUp ()
    self.mModelBoardLimitTextField?.ebCleanUp ()
    self.mModelDragSourceTableView?.ebCleanUp ()
    self.mModelHeightTextField?.ebCleanUp ()
    self.mModelHeightUnitPopUp?.ebCleanUp ()
    self.mModelLimitWidthUnitPopUp?.ebCleanUp ()
    self.mModelViewDisplayBackComponenValuesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackComponentNamesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackLayoutTextsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackLegendLinesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackLegendTextsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackPackagesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackPadsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackTracksCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBoardLimitsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontComponenValuesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontComponentNamesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontLayoutTextsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontLegendLinesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontLegendTextsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontPackagesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontPadsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontTracksCheckbox?.ebCleanUp ()
    self.mModelViewDisplayHolesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayInternalBoardsLimitsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayViasCheckbox?.ebCleanUp ()
    self.mModelViewHorizontalFlipCheckbox?.ebCleanUp ()
    self.mModelViewVerticalFlipCheckbox?.ebCleanUp ()
    self.mModelWidthTextField?.ebCleanUp ()
    self.mModelWidthUnitPopUp?.ebCleanUp ()
    self.mMoveDownButton?.ebCleanUp ()
    self.mMoveLeftButton?.ebCleanUp ()
    self.mMoveRightButton?.ebCleanUp ()
    self.mMoveUpButton?.ebCleanUp ()
    self.mNoArtworkMessage?.ebCleanUp ()
    self.mNoModelMessage?.ebCleanUp ()
    self.mOperationAndIssueTabView?.ebCleanUp ()
    self.mOverlapSwitch?.ebCleanUp ()
    self.mPageSegmentedControl?.ebCleanUp ()
    self.mSelectedBoardXTextField?.ebCleanUp ()
    self.mSelectedBoardXUnitPopUp?.ebCleanUp ()
    self.mSelectedBoardYTextField?.ebCleanUp ()
    self.mSelectedBoardYUnitPopUp?.ebCleanUp ()
    self.mShiftArrowMagnitudeTextField?.ebCleanUp ()
    self.mShiftArrowMagnitudeUnitPopUp?.ebCleanUp ()
    self.mStatusImageViewInToolbar?.ebCleanUp ()
    self.mergerViewBackLegendLinesColorWell?.ebCleanUp ()
    self.mergerViewBackgroundColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackComponentNamesColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackComponentValuesColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackLayoutTextsColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackLegendTextsColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackPackagesColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackPadsColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackTracksColorWell?.ebCleanUp ()
    self.mergerViewDisplayBoardLimitsColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontComponentNamesColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontComponentValuesColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontLayoutTextsColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontLegendTextsColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontPackagesColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontPadsColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontTracksColorWell?.ebCleanUp ()
    self.mergerViewDisplayHolesColorWell?.ebCleanUp ()
    self.mergerViewDisplayInternalBoardsLimitsColorWell?.ebCleanUp ()
    self.mergerViewDisplayViasColorWell?.ebCleanUp ()
    self.mergerViewFrontLegendLinesColorWell?.ebCleanUp ()
    self.removeBoardModelButton?.ebCleanUp ()
    self.showBoardHelpButton?.ebCleanUp ()
    self.showPrefsForSettingMergerDisplayButton?.ebCleanUp ()
    self.updateBoardModelButton?.ebCleanUp ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

