//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(MergerDocument) class MergerDocument : EBManagedDocument {

  //····················································································································
  //   Array controller: mBoardModelController
  //····················································································································

  var mBoardModelController = Controller_MergerDocument_mBoardModelController ()

  //····················································································································
  //   Selection controller: mBoardModelSelection
  //····················································································································

  var mBoardModelSelection = SelectionController_MergerDocument_mBoardModelSelection ()

  //····················································································································
  //   Array controller: mBoardInstanceController
  //····················································································································

  var mBoardInstanceController = Controller_MergerDocument_mBoardInstanceController ()

  //····················································································································
  //   Selection controller: mBoardInstanceSelection
  //····················································································································

  var mBoardInstanceSelection = SelectionController_MergerDocument_mBoardInstanceSelection ()

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  let documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.prop
  }

  //····················································································································

  var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: incorrectDocumentFileErrorMessage
  //····················································································································

  let incorrectDocumentFileErrorMessage_property = EBTransientProperty_String ()

  //····················································································································

  var incorrectDocumentFileErrorMessage_property_selection : EBSelection <String> {
    return self.incorrectDocumentFileErrorMessage_property.prop
  }

  //····················································································································

  var incorrectDocumentFileErrorMessage : String? {
    switch self.incorrectDocumentFileErrorMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentIsUnnamed
  //····················································································································

  let documentIsUnnamed_property = EBTransientProperty_Bool ()

  //····················································································································

  var documentIsUnnamed_property_selection : EBSelection <Bool> {
    return self.documentIsUnnamed_property.prop
  }

  //····················································································································

  var documentIsUnnamed : Bool? {
    switch self.documentIsUnnamed_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: importArtworkButtonTitle
  //····················································································································

  let importArtworkButtonTitle_property = EBTransientProperty_String ()

  //····················································································································

  var importArtworkButtonTitle_property_selection : EBSelection <String> {
    return self.importArtworkButtonTitle_property.prop
  }

  //····················································································································

  var importArtworkButtonTitle : String? {
    switch self.importArtworkButtonTitle_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray> {
    return self.issues_property.prop
  }

  //····················································································································

  var issues : CanariIssueArray? {
    switch self.issues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusImage
  //····················································································································

  let mStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  var mStatusImage_property_selection : EBSelection <NSImage> {
    return self.mStatusImage_property.prop
  }

  //····················································································································

  var mStatusImage : NSImage? {
    switch self.mStatusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusMessage
  //····················································································································

  let mStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  var mStatusMessage_property_selection : EBSelection <String> {
    return self.mStatusMessage_property.prop
  }

  //····················································································································

  var mStatusMessage : String? {
    switch self.mStatusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFileNameOk
  //····················································································································

  let documentFileNameOk_property = EBTransientProperty_Bool ()

  //····················································································································

  var documentFileNameOk_property_selection : EBSelection <Bool> {
    return self.documentFileNameOk_property.prop
  }

  //····················································································································

  var documentFileNameOk : Bool? {
    switch self.documentFileNameOk_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var addBoardModelButton : EBButton? = nil
  @IBOutlet var boardHelpPanel : NSPanel? = nil
  @IBOutlet var dismissPrefsForSettingMergerDisplayButton : EBButton? = nil
  @IBOutlet var mArrowMagnitudeTextField : CanariDimensionTextField? = nil
  @IBOutlet var mArrowMagnitudeUnitPopUp : EBPopUpButton? = nil
  @IBOutlet var mArtworNameTextField : EBTextObserverField? = nil
  @IBOutlet var mArtworkNameTextField : EBTextObserverField? = nil
  @IBOutlet var mAutomaticBoardSizeSwitch : EBSwitch? = nil
  @IBOutlet var mAutomaticBoardSizeView : NSView? = nil
  @IBOutlet var mBoardArchiveFormatPopUpButton : CanariBoardBoardArchivePopUpButton? = nil
  @IBOutlet var mBoardBoardLimitTextField : CanariDimensionTextField? = nil
  @IBOutlet var mBoardClipView : NSClipView? = nil
  @IBOutlet var mBoardHeightTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet var mBoardHeightUnitPopUp : EBPopUpButton? = nil
  @IBOutlet var mBoardInsertMenu : CanariBoardInsertMenu? = nil
  @IBOutlet var mBoardInspectorMasterView : NSView? = nil
  @IBOutlet var mBoardInspectorSegmentedControl : CanariSegmentedControl? = nil
  @IBOutlet var mBoardIssueInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet var mBoardLimitWidthUnitPopUp : EBPopUpButton? = nil
  @IBOutlet var mBoardModelTableView : EBTableView? = nil
  @IBOutlet var mBoardModelView : EBGraphicView? = nil
  @IBOutlet var mBoardOperationInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet var mBoardPageView : CanariViewWithKeyView? = nil
  @IBOutlet var mBoardViewDisplayBackComponenValuesCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayBackComponentNamesCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayBackLayoutTextsCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayBackLegendLinesCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayBackLegendTextsCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayBackPackagesCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayBackPadsCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayBackTracksCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayBoardLimitsCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayFrontComponenValuesCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayFrontComponentNamesCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayFrontLayoutTextsCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayFrontLegendLinesCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayFrontLegendTextsCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayFrontPackagesCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayFrontPadsCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayFrontTracksCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayHolesCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayInternalBoardsLimitsCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewDisplayViasCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewHorizontalFlipCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardViewVerticalFlipCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardWidthTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet var mBoardWidthUnitPopUp : EBPopUpButton? = nil
  @IBOutlet var mComposedBoardScrollView : EBScrollView? = nil
  @IBOutlet var mComposedBoardView : EBGraphicView? = nil
  @IBOutlet var mDangerView : NSView? = nil
  @IBOutlet var mDeselectIssueButton : EBButton? = nil
  @IBOutlet var mDisplaySettingView : NSView? = nil
  @IBOutlet var mEmptyBoardMessage : EBTextField? = nil
  @IBOutlet var mGenerateGerber : EBSwitch? = nil
  @IBOutlet var mGeneratePDF : EBSwitch? = nil
  @IBOutlet var mGenerateProductFilesActionButton : EBButton? = nil
  @IBOutlet var mImportArtworkButton : EBButton? = nil
  @IBOutlet var mIncorrectDocumentNameTextField : EBTextObserverField? = nil
  @IBOutlet var mInsertArrayOfBoardsOrientation : NSSegmentedControl? = nil
  @IBOutlet var mInsertArrayOfBoardsPanel : NSPanel? = nil
  @IBOutlet var mInsertArrayOfBoardsPopUpButton : NSPopUpButton? = nil
  @IBOutlet var mInsertArrayOfBoardsXCountField : NSTextField? = nil
  @IBOutlet var mInsertArrayOfBoardsYCountField : NSTextField? = nil
  @IBOutlet var mInsertedInstanceDefaultOrientation : NSPopUpButton? = nil
  @IBOutlet var mInstanceCountTextField : EBIntObserverField? = nil
  @IBOutlet var mInstanceModelNameTextField : EBTextObserverField? = nil
  @IBOutlet var mInstanceRotation : CanariQuadrantSegmentedControl? = nil
  @IBOutlet var mIssueTableView : CanariIssueTableView? = nil
  @IBOutlet var mIssueTextField : EBTextObserverField? = nil
  @IBOutlet var mLogTextView : NSTextView? = nil
  @IBOutlet var mManualBoardHeightTextField : CanariDimensionTextField? = nil
  @IBOutlet var mManualBoardHeightUnitPopUp : EBPopUpButton? = nil
  @IBOutlet var mManualBoardSizeView : NSView? = nil
  @IBOutlet var mManualBoardWidthTextField : CanariDimensionTextField? = nil
  @IBOutlet var mManualBoardWidthUnitPopUp : EBPopUpButton? = nil
  @IBOutlet var mMasterView : NSView? = nil
  @IBOutlet var mModelBoardLimitTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet var mModelDragSourceTableView : CanariDragSourceTableView? = nil
  @IBOutlet var mModelHeightTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet var mModelHeightUnitPopUp : EBPopUpButton? = nil
  @IBOutlet var mModelLimitWidthUnitPopUp : EBPopUpButton? = nil
  @IBOutlet var mModelPageView : CanariViewWithKeyView? = nil
  @IBOutlet var mModelViewDisplayBackComponenValuesCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayBackComponentNamesCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayBackLayoutTextsCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayBackLegendLinesCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayBackLegendTextsCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayBackPackagesCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayBackPadsCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayBackTracksCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayBoardLimitsCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayFrontComponenValuesCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayFrontComponentNamesCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayFrontLayoutTextsCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayFrontLegendLinesCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayFrontLegendTextsCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayFrontPackagesCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayFrontPadsCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayFrontTracksCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayHolesCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayInternalBoardsLimitsCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewDisplayViasCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewHorizontalFlipCheckbox : EBSwitch? = nil
  @IBOutlet var mModelViewVerticalFlipCheckbox : EBSwitch? = nil
  @IBOutlet var mModelWidthTextField : CanariDimensionObserverTextField? = nil
  @IBOutlet var mModelWidthUnitPopUp : EBPopUpButton? = nil
  @IBOutlet var mMoveDownButton : EBButton? = nil
  @IBOutlet var mMoveLeftButton : EBButton? = nil
  @IBOutlet var mMoveRightButton : EBButton? = nil
  @IBOutlet var mMoveUpButton : EBButton? = nil
  @IBOutlet var mNoArtworkMessage : EBTextField? = nil
  @IBOutlet var mNoModelMessage : EBTextField? = nil
  @IBOutlet var mOverlapSwitch : EBSwitch? = nil
  @IBOutlet var mPageSegmentedControl : CanariSegmentedControl? = nil
  @IBOutlet var mProductPageView : CanariViewWithKeyView? = nil
  @IBOutlet var mSelectedBoardXTextField : CanariDimensionTextField? = nil
  @IBOutlet var mSelectedBoardXUnitPopUp : EBPopUpButton? = nil
  @IBOutlet var mSelectedBoardYTextField : CanariDimensionTextField? = nil
  @IBOutlet var mSelectedBoardYUnitPopUp : EBPopUpButton? = nil
  @IBOutlet var mShiftArrowMagnitudeTextField : CanariDimensionTextField? = nil
  @IBOutlet var mShiftArrowMagnitudeUnitPopUp : EBPopUpButton? = nil
  @IBOutlet var mStatusImageViewInToolbar : EBImageObserverView? = nil
  @IBOutlet var mergerViewBackLegendLinesColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayBackComponentNamesColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayBackComponentValuesColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayBackLayoutTextsColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayBackLegendTextsColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayBackPackagesColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayBackPadsColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayBackTracksColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayBoardLimitsColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayFrontComponentNamesColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayFrontComponentValuesColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayFrontLayoutTextsColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayFrontLegendTextsColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayFrontPackagesColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayFrontPadsColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayFrontTracksColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayHolesColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayInternalBoardsLimitsColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewDisplayViasColorWell : EBColorWell? = nil
  @IBOutlet var mergerViewFrontLegendLinesColorWell : EBColorWell? = nil
  @IBOutlet var removeBoardModelButton : EBButton? = nil
  @IBOutlet var showBoardHelpButton : EBButton? = nil
  @IBOutlet var showPrefsForSettingMergerDisplayButton : EBButton? = nil
  @IBOutlet var updateBoardModelButton : EBButton? = nil

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  var mController_showPrefsForSettingMergerDisplayButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mDisplaySettingView_hidden : MultipleBindingController_hidden? = nil
  var mController_mNoModelMessage_hidden : MultipleBindingController_hidden? = nil
  var mController_removeBoardModelButton_enabled : MultipleBindingController_enabled? = nil
  var mController_updateBoardModelButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mAutomaticBoardSizeView_hidden : MultipleBindingController_hidden? = nil
  var mController_mManualBoardSizeView_hidden : MultipleBindingController_hidden? = nil
  var mController_mEmptyBoardMessage_hidden : MultipleBindingController_hidden? = nil
  var mController_mOverlapSwitch_enabled : MultipleBindingController_enabled? = nil
  var mController_mMoveRightButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mMoveLeftButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mMoveUpButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mMoveDownButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mNoArtworkMessage_hidden : MultipleBindingController_hidden? = nil
  var mController_mDangerView_hidden : MultipleBindingController_hidden? = nil
  var mController_mGenerateProductFilesActionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mLogTextView_hidden : MultipleBindingController_hidden? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: mBoardModelController
    self.mBoardModelController.addExplorer (name: "mBoardModelController", y:&y, view:view)
  //--- Selection controller property: mBoardModelSelection
    self.mBoardModelSelection.addExplorer (name: "mBoardModelSelection", y:&y, view:view)
  //--- Array controller property: mBoardInstanceController
    self.mBoardInstanceController.addExplorer (name: "mBoardInstanceController", y:&y, view:view)
  //--- Selection controller property: mBoardInstanceSelection
    self.mBoardInstanceSelection.addExplorer (name: "mBoardInstanceSelection", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName : NSNib.Name? {
    return NSNib.Name ("MergerDocument")
  }
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "MergerRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : MergerRoot { return self.mRootObject as! MergerRoot }

  //····················································································································
  //    check outlet connections
  //····················································································································

  private func checkOutletConnections () {
    let start = Date ()
    checkOutletConnection (self.addBoardModelButton, "addBoardModelButton", EBButton.self, #file, #line)
    checkOutletConnection (self.boardHelpPanel, "boardHelpPanel", NSPanel.self, #file, #line)
    checkOutletConnection (self.dismissPrefsForSettingMergerDisplayButton, "dismissPrefsForSettingMergerDisplayButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mArrowMagnitudeTextField, "mArrowMagnitudeTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mArrowMagnitudeUnitPopUp, "mArrowMagnitudeUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mArtworNameTextField, "mArtworNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mArtworkNameTextField, "mArtworkNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mAutomaticBoardSizeSwitch, "mAutomaticBoardSizeSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mAutomaticBoardSizeView, "mAutomaticBoardSizeView", NSView.self, #file, #line)
    checkOutletConnection (self.mBoardArchiveFormatPopUpButton, "mBoardArchiveFormatPopUpButton", CanariBoardBoardArchivePopUpButton.self, #file, #line)
    checkOutletConnection (self.mBoardBoardLimitTextField, "mBoardBoardLimitTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mBoardClipView, "mBoardClipView", NSClipView.self, #file, #line)
    checkOutletConnection (self.mBoardHeightTextField, "mBoardHeightTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mBoardHeightUnitPopUp, "mBoardHeightUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mBoardInsertMenu, "mBoardInsertMenu", CanariBoardInsertMenu.self, #file, #line)
    checkOutletConnection (self.mBoardInspectorMasterView, "mBoardInspectorMasterView", NSView.self, #file, #line)
    checkOutletConnection (self.mBoardInspectorSegmentedControl, "mBoardInspectorSegmentedControl", CanariSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mBoardIssueInspectorView, "mBoardIssueInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mBoardLimitWidthUnitPopUp, "mBoardLimitWidthUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mBoardModelTableView, "mBoardModelTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mBoardModelView, "mBoardModelView", EBGraphicView.self, #file, #line)
    checkOutletConnection (self.mBoardOperationInspectorView, "mBoardOperationInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mBoardPageView, "mBoardPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackComponenValuesCheckbox, "mBoardViewDisplayBackComponenValuesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackComponentNamesCheckbox, "mBoardViewDisplayBackComponentNamesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackLayoutTextsCheckbox, "mBoardViewDisplayBackLayoutTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackLegendLinesCheckbox, "mBoardViewDisplayBackLegendLinesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackLegendTextsCheckbox, "mBoardViewDisplayBackLegendTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackPackagesCheckbox, "mBoardViewDisplayBackPackagesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackPadsCheckbox, "mBoardViewDisplayBackPadsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBackTracksCheckbox, "mBoardViewDisplayBackTracksCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayBoardLimitsCheckbox, "mBoardViewDisplayBoardLimitsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontComponenValuesCheckbox, "mBoardViewDisplayFrontComponenValuesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontComponentNamesCheckbox, "mBoardViewDisplayFrontComponentNamesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontLayoutTextsCheckbox, "mBoardViewDisplayFrontLayoutTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontLegendLinesCheckbox, "mBoardViewDisplayFrontLegendLinesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontLegendTextsCheckbox, "mBoardViewDisplayFrontLegendTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontPackagesCheckbox, "mBoardViewDisplayFrontPackagesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontPadsCheckbox, "mBoardViewDisplayFrontPadsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayFrontTracksCheckbox, "mBoardViewDisplayFrontTracksCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayHolesCheckbox, "mBoardViewDisplayHolesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayInternalBoardsLimitsCheckbox, "mBoardViewDisplayInternalBoardsLimitsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewDisplayViasCheckbox, "mBoardViewDisplayViasCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewHorizontalFlipCheckbox, "mBoardViewHorizontalFlipCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardViewVerticalFlipCheckbox, "mBoardViewVerticalFlipCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardWidthTextField, "mBoardWidthTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mBoardWidthUnitPopUp, "mBoardWidthUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mComposedBoardScrollView, "mComposedBoardScrollView", EBScrollView.self, #file, #line)
    checkOutletConnection (self.mComposedBoardView, "mComposedBoardView", EBGraphicView.self, #file, #line)
    checkOutletConnection (self.mDangerView, "mDangerView", NSView.self, #file, #line)
    checkOutletConnection (self.mDeselectIssueButton, "mDeselectIssueButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mDisplaySettingView, "mDisplaySettingView", NSView.self, #file, #line)
    checkOutletConnection (self.mEmptyBoardMessage, "mEmptyBoardMessage", EBTextField.self, #file, #line)
    checkOutletConnection (self.mGenerateGerber, "mGenerateGerber", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mGeneratePDF, "mGeneratePDF", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mGenerateProductFilesActionButton, "mGenerateProductFilesActionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mImportArtworkButton, "mImportArtworkButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mIncorrectDocumentNameTextField, "mIncorrectDocumentNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mInsertArrayOfBoardsOrientation, "mInsertArrayOfBoardsOrientation", NSSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mInsertArrayOfBoardsPanel, "mInsertArrayOfBoardsPanel", NSPanel.self, #file, #line)
    checkOutletConnection (self.mInsertArrayOfBoardsPopUpButton, "mInsertArrayOfBoardsPopUpButton", NSPopUpButton.self, #file, #line)
    checkOutletConnection (self.mInsertArrayOfBoardsXCountField, "mInsertArrayOfBoardsXCountField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mInsertArrayOfBoardsYCountField, "mInsertArrayOfBoardsYCountField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mInsertedInstanceDefaultOrientation, "mInsertedInstanceDefaultOrientation", NSPopUpButton.self, #file, #line)
    checkOutletConnection (self.mInstanceCountTextField, "mInstanceCountTextField", EBIntObserverField.self, #file, #line)
    checkOutletConnection (self.mInstanceModelNameTextField, "mInstanceModelNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mInstanceRotation, "mInstanceRotation", CanariQuadrantSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mIssueTableView, "mIssueTableView", CanariIssueTableView.self, #file, #line)
    checkOutletConnection (self.mIssueTextField, "mIssueTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mLogTextView, "mLogTextView", NSTextView.self, #file, #line)
    checkOutletConnection (self.mManualBoardHeightTextField, "mManualBoardHeightTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mManualBoardHeightUnitPopUp, "mManualBoardHeightUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mManualBoardSizeView, "mManualBoardSizeView", NSView.self, #file, #line)
    checkOutletConnection (self.mManualBoardWidthTextField, "mManualBoardWidthTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mManualBoardWidthUnitPopUp, "mManualBoardWidthUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mMasterView, "mMasterView", NSView.self, #file, #line)
    checkOutletConnection (self.mModelBoardLimitTextField, "mModelBoardLimitTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mModelDragSourceTableView, "mModelDragSourceTableView", CanariDragSourceTableView.self, #file, #line)
    checkOutletConnection (self.mModelHeightTextField, "mModelHeightTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mModelHeightUnitPopUp, "mModelHeightUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mModelLimitWidthUnitPopUp, "mModelLimitWidthUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mModelPageView, "mModelPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackComponenValuesCheckbox, "mModelViewDisplayBackComponenValuesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackComponentNamesCheckbox, "mModelViewDisplayBackComponentNamesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackLayoutTextsCheckbox, "mModelViewDisplayBackLayoutTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackLegendLinesCheckbox, "mModelViewDisplayBackLegendLinesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackLegendTextsCheckbox, "mModelViewDisplayBackLegendTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackPackagesCheckbox, "mModelViewDisplayBackPackagesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackPadsCheckbox, "mModelViewDisplayBackPadsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBackTracksCheckbox, "mModelViewDisplayBackTracksCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayBoardLimitsCheckbox, "mModelViewDisplayBoardLimitsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontComponenValuesCheckbox, "mModelViewDisplayFrontComponenValuesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontComponentNamesCheckbox, "mModelViewDisplayFrontComponentNamesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontLayoutTextsCheckbox, "mModelViewDisplayFrontLayoutTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontLegendLinesCheckbox, "mModelViewDisplayFrontLegendLinesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontLegendTextsCheckbox, "mModelViewDisplayFrontLegendTextsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontPackagesCheckbox, "mModelViewDisplayFrontPackagesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontPadsCheckbox, "mModelViewDisplayFrontPadsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayFrontTracksCheckbox, "mModelViewDisplayFrontTracksCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayHolesCheckbox, "mModelViewDisplayHolesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayInternalBoardsLimitsCheckbox, "mModelViewDisplayInternalBoardsLimitsCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewDisplayViasCheckbox, "mModelViewDisplayViasCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewHorizontalFlipCheckbox, "mModelViewHorizontalFlipCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelViewVerticalFlipCheckbox, "mModelViewVerticalFlipCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mModelWidthTextField, "mModelWidthTextField", CanariDimensionObserverTextField.self, #file, #line)
    checkOutletConnection (self.mModelWidthUnitPopUp, "mModelWidthUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mMoveDownButton, "mMoveDownButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mMoveLeftButton, "mMoveLeftButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mMoveRightButton, "mMoveRightButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mMoveUpButton, "mMoveUpButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mNoArtworkMessage, "mNoArtworkMessage", EBTextField.self, #file, #line)
    checkOutletConnection (self.mNoModelMessage, "mNoModelMessage", EBTextField.self, #file, #line)
    checkOutletConnection (self.mOverlapSwitch, "mOverlapSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mPageSegmentedControl, "mPageSegmentedControl", CanariSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mProductPageView, "mProductPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mSelectedBoardXTextField, "mSelectedBoardXTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mSelectedBoardXUnitPopUp, "mSelectedBoardXUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSelectedBoardYTextField, "mSelectedBoardYTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mSelectedBoardYUnitPopUp, "mSelectedBoardYUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mShiftArrowMagnitudeTextField, "mShiftArrowMagnitudeTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mShiftArrowMagnitudeUnitPopUp, "mShiftArrowMagnitudeUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mStatusImageViewInToolbar, "mStatusImageViewInToolbar", EBImageObserverView.self, #file, #line)
    checkOutletConnection (self.mergerViewBackLegendLinesColorWell, "mergerViewBackLegendLinesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewBackgroundColorWell, "mergerViewBackgroundColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackComponentNamesColorWell, "mergerViewDisplayBackComponentNamesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackComponentValuesColorWell, "mergerViewDisplayBackComponentValuesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackLayoutTextsColorWell, "mergerViewDisplayBackLayoutTextsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackLegendTextsColorWell, "mergerViewDisplayBackLegendTextsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackPackagesColorWell, "mergerViewDisplayBackPackagesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackPadsColorWell, "mergerViewDisplayBackPadsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBackTracksColorWell, "mergerViewDisplayBackTracksColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayBoardLimitsColorWell, "mergerViewDisplayBoardLimitsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontComponentNamesColorWell, "mergerViewDisplayFrontComponentNamesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontComponentValuesColorWell, "mergerViewDisplayFrontComponentValuesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontLayoutTextsColorWell, "mergerViewDisplayFrontLayoutTextsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontLegendTextsColorWell, "mergerViewDisplayFrontLegendTextsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontPackagesColorWell, "mergerViewDisplayFrontPackagesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontPadsColorWell, "mergerViewDisplayFrontPadsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayFrontTracksColorWell, "mergerViewDisplayFrontTracksColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayHolesColorWell, "mergerViewDisplayHolesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayInternalBoardsLimitsColorWell, "mergerViewDisplayInternalBoardsLimitsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewDisplayViasColorWell, "mergerViewDisplayViasColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mergerViewFrontLegendLinesColorWell, "mergerViewFrontLegendLinesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.removeBoardModelButton, "removeBoardModelButton", EBButton.self, #file, #line)
    checkOutletConnection (self.showBoardHelpButton, "showBoardHelpButton", EBButton.self, #file, #line)
    checkOutletConnection (self.showPrefsForSettingMergerDisplayButton, "showPrefsForSettingMergerDisplayButton", EBButton.self, #file, #line)
    checkOutletConnection (self.updateBoardModelButton, "updateBoardModelButton", EBButton.self, #file, #line)
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Check outlet connections \(durationMS) ms")
    }
  }
  
  //····················································································································
  
  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: mBoardModelController
    self.mBoardModelController.bind_model (self.rootObject.boardModels_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mBoardModelSelection
    self.mBoardModelSelection.bind_selection (model: self.mBoardModelController.selectedArray_property, file: #file, line: #line)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: mBoardInstanceController
    self.mBoardInstanceController.bind_model (self.rootObject.boardInstances_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mBoardInstanceSelection
    self.mBoardInstanceSelection.bind_selection (model: self.mBoardInstanceController.selectedArray_property, file: #file, line: #line)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: incorrectDocumentFileErrorMessage
    self.incorrectDocumentFileErrorMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.documentFilePath_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.documentFilePath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerDocument_incorrectDocumentFileErrorMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.documentFilePath_property.addEBObserver (self.incorrectDocumentFileErrorMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: documentIsUnnamed
    self.documentIsUnnamed_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.documentFilePath_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.documentFilePath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerDocument_documentIsUnnamed (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.documentFilePath_property.addEBObserver (self.documentIsUnnamed_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: importArtworkButtonTitle
    self.importArtworkButtonTitle_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.artworkName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.artworkName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerDocument_importArtworkButtonTitle (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.artworkName_property.addEBObserver (self.importArtworkButtonTitle_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.rootObject.overlapingArrangment_property_selection.kind ()
        kind &= unwSelf.rootObject.boardRect_property_selection.kind ()
        kind &= unwSelf.rootObject.boardDisplayRect_property_selection.kind ()
        kind &= unwSelf.rootObject.boardInstances_property_selection.kind ()
        kind &= unwSelf.rootObject.boardInstances_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.overlapingArrangment_property_selection, unwSelf.rootObject.boardRect_property_selection, unwSelf.rootObject.boardDisplayRect_property_selection, unwSelf.rootObject.boardInstances_property_selection, unwSelf.rootObject.boardInstances_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_MergerDocument_issues (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.overlapingArrangment_property.addEBObserver (self.issues_property)
    self.rootObject.boardRect_property.addEBObserver (self.issues_property)
    self.rootObject.boardDisplayRect_property.addEBObserver (self.issues_property)
    self.rootObject.boardInstances_property.addEBObserverOf_instanceRect (self.issues_property)
    self.rootObject.boardInstances_property.addEBObserverOf_boardLimitWidth (self.issues_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mStatusImage
    self.mStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerDocument_mStatusImage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.mStatusImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mStatusMessage
    self.mStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerDocument_mStatusMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.mStatusMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: documentFileNameOk
    self.documentFileNameOk_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.documentFilePath_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.documentFilePath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerDocument_documentFileNameOk (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.documentFilePath_property.addEBObserver (self.documentFileNameOk_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································
  
  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
    self.mBoardModelController.bind_tableView (self.mBoardModelTableView, file: #file, line: #line)
  //--------------------------- Install ebView bindings
    self.mBoardInstanceController.bind_ebView (self.mComposedBoardView)
  //--------------------------- Install regular bindings
    self.mPageSegmentedControl?.bind_selectedPage (self.rootObject.selectedPageIndex_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_image (self.mStatusImage_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_tooltip (self.mStatusMessage_property, file: #file, line: #line)
    self.mIssueTextField?.bind_valueObserver (self.mStatusMessage_property, file: #file, line: #line)
    self.mIssueTableView?.bind_issues (self.issues_property, file: #file, line: #line)
    self.mModelViewHorizontalFlipCheckbox?.bind_value (g_Preferences!.mergerModelViewHorizontalFlip_property, file: #file, line: #line)
    self.mModelViewVerticalFlipCheckbox?.bind_value (g_Preferences!.mergerModelViewVerticalFlip_property, file: #file, line: #line)
    self.mModelViewDisplayHolesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayHoles_property, file: #file, line: #line)
    self.mModelViewDisplayViasCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayVias_property, file: #file, line: #line)
    self.mModelViewDisplayFrontPadsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontPads_property, file: #file, line: #line)
    self.mModelViewDisplayInternalBoardsLimitsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayInternalBoardsLimits_property, file: #file, line: #line)
    self.mModelViewDisplayBoardLimitsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBoardLimits_property, file: #file, line: #line)
    self.mModelViewDisplayFrontComponentNamesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontComponentNames_property, file: #file, line: #line)
    self.mModelViewDisplayFrontComponenValuesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontComponentValues_property, file: #file, line: #line)
    self.mModelViewDisplayFrontPackagesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontPackages_property, file: #file, line: #line)
    self.mModelViewDisplayFrontLegendTextsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontLegendTexts_property, file: #file, line: #line)
    self.mModelViewDisplayFrontTracksCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontTracks_property, file: #file, line: #line)
    self.mModelViewDisplayFrontLayoutTextsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontLayoutTexts_property, file: #file, line: #line)
    self.mModelViewDisplayBackPadsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackPads_property, file: #file, line: #line)
    self.mModelViewDisplayBackComponentNamesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackComponentNames_property, file: #file, line: #line)
    self.mModelViewDisplayBackComponenValuesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackComponentValues_property, file: #file, line: #line)
    self.mModelViewDisplayBackLegendTextsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackLegendTexts_property, file: #file, line: #line)
    self.mModelViewDisplayBackPackagesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackPackages_property, file: #file, line: #line)
    self.mModelViewDisplayBackTracksCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackTracks_property, file: #file, line: #line)
    self.mModelViewDisplayBackLayoutTextsCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackLayoutTexts_property, file: #file, line: #line)
    self.mModelViewDisplayFrontLegendLinesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayFrontLegendLines_property, file: #file, line: #line)
    self.mModelViewDisplayBackLegendLinesCheckbox?.bind_value (g_Preferences!.mergerModelViewDisplayBackLegendLines_property, file: #file, line: #line)
    self.mBoardViewHorizontalFlipCheckbox?.bind_value (g_Preferences!.mergerBoardViewHorizontalFlip_property, file: #file, line: #line)
    self.mBoardViewVerticalFlipCheckbox?.bind_value (g_Preferences!.mergerBoardViewVerticalFlip_property, file: #file, line: #line)
    self.mBoardViewDisplayHolesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayHoles_property, file: #file, line: #line)
    self.mBoardViewDisplayViasCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayVias_property, file: #file, line: #line)
    self.mBoardViewDisplayFrontPadsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontPads_property, file: #file, line: #line)
    self.mBoardViewDisplayBoardLimitsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBoardLimits_property, file: #file, line: #line)
    self.mBoardViewDisplayInternalBoardsLimitsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayInternalBoardsLimits_property, file: #file, line: #line)
    self.mBoardViewDisplayFrontComponentNamesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontComponentNames_property, file: #file, line: #line)
    self.mBoardViewDisplayFrontComponenValuesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontComponentValues_property, file: #file, line: #line)
    self.mBoardViewDisplayFrontPackagesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontPackages_property, file: #file, line: #line)
    self.mBoardViewDisplayFrontLegendTextsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontLegendTexts_property, file: #file, line: #line)
    self.mBoardViewDisplayFrontTracksCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontTracks_property, file: #file, line: #line)
    self.mBoardViewDisplayFrontLayoutTextsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontLayoutTexts_property, file: #file, line: #line)
    self.mBoardViewDisplayBackPadsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackPads_property, file: #file, line: #line)
    self.mBoardViewDisplayBackComponentNamesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackComponentNames_property, file: #file, line: #line)
    self.mBoardViewDisplayBackComponenValuesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackComponentValues_property, file: #file, line: #line)
    self.mBoardViewDisplayBackLegendTextsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackLegendTexts_property, file: #file, line: #line)
    self.mBoardViewDisplayBackPackagesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackPackages_property, file: #file, line: #line)
    self.mBoardViewDisplayBackTracksCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackTracks_property, file: #file, line: #line)
    self.mBoardViewDisplayBackLayoutTextsCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackLayoutTexts_property, file: #file, line: #line)
    self.mBoardViewDisplayFrontLegendLinesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayFrontLegendLines_property, file: #file, line: #line)
    self.mBoardViewDisplayBackLegendLinesCheckbox?.bind_value (g_Preferences!.mergerBoardViewDisplayBackLegendLines_property, file: #file, line: #line)
    self.mergerViewDisplayHolesColorWell?.bind_color (g_Preferences!.mergerColorHoles_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayViasColorWell?.bind_color (g_Preferences!.mergerColorVias_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayFrontPadsColorWell?.bind_color (g_Preferences!.mergerColorFrontPads_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayBoardLimitsColorWell?.bind_color (g_Preferences!.mergerColorBoardLimits_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayInternalBoardsLimitsColorWell?.bind_color (g_Preferences!.mergerColorInternalBoardsLimits_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayFrontComponentNamesColorWell?.bind_color (g_Preferences!.mergerColorFrontComponentNames_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayFrontComponentValuesColorWell?.bind_color (g_Preferences!.mergerColorFrontComponentValues_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayFrontPackagesColorWell?.bind_color (g_Preferences!.mergerColorFrontPackages_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayFrontLegendTextsColorWell?.bind_color (g_Preferences!.mergerColorFrontLegendTexts_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayFrontTracksColorWell?.bind_color (g_Preferences!.mergerColorFrontTracks_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayFrontLayoutTextsColorWell?.bind_color (g_Preferences!.mergerColorFrontLayoutTexts_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayBackPadsColorWell?.bind_color (g_Preferences!.mergerColorBackPads_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayBackComponentNamesColorWell?.bind_color (g_Preferences!.mergerColorBackComponentNames_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayBackComponentValuesColorWell?.bind_color (g_Preferences!.mergerColorBackComponentValues_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayBackLegendTextsColorWell?.bind_color (g_Preferences!.mergerColorBackLegendTexts_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayBackPackagesColorWell?.bind_color (g_Preferences!.mergerColorBackPackages_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayBackTracksColorWell?.bind_color (g_Preferences!.mergerColorBackTracks_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewDisplayBackLayoutTextsColorWell?.bind_color (g_Preferences!.mergerColorBackLayoutTexts_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewBackgroundColorWell?.bind_color (g_Preferences!.mergerColorBackground_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewFrontLegendLinesColorWell?.bind_color (g_Preferences!.mergerColorFrontLegendLines_property, file: #file, line: #line, sendContinously:false)
    self.mergerViewBackLegendLinesColorWell?.bind_color (g_Preferences!.mergerColorBackLegendLines_property, file: #file, line: #line, sendContinously:false)
    self.mBoardModelView?.bind_zoom (self.mBoardModelSelection.zoom_property, file: #file, line: #line)
    self.mBoardModelView?.bind_horizontalFlip (g_Preferences!.mergerModelViewHorizontalFlip_property, file: #file, line: #line)
    self.mBoardModelView?.bind_verticalFlip (g_Preferences!.mergerModelViewVerticalFlip_property, file: #file, line: #line)
    self.mBoardModelView?.bind_overObjectsDisplay (self.mBoardModelSelection.imageForModel_property, file: #file, line: #line)
    self.mArtworkNameTextField?.bind_valueObserver (self.mBoardModelSelection.artworkName_property, file: #file, line: #line)
    self.mInstanceCountTextField?.bind_valueObserver (self.mBoardModelSelection.instanceCount_property, file: #file, line: #line, autoFormatter:true)
    self.mModelWidthUnitPopUp?.bind_selectedTag (self.mBoardModelSelection.modelWidthUnit_property, file: #file, line: #line)
    self.mModelWidthTextField?.bind_dimensionAndUnit (self.mBoardModelSelection.modelWidth_property, self.mBoardModelSelection.modelWidthUnit_property, file: #file, line: #line)
    self.mModelHeightUnitPopUp?.bind_selectedTag (self.mBoardModelSelection.modelHeightUnit_property, file: #file, line: #line)
    self.mModelHeightTextField?.bind_dimensionAndUnit (self.mBoardModelSelection.modelHeight_property, self.mBoardModelSelection.modelHeightUnit_property, file: #file, line: #line)
    self.mModelLimitWidthUnitPopUp?.bind_selectedTag (self.mBoardModelSelection.modelLimitWidthUnit_property, file: #file, line: #line)
    self.mModelBoardLimitTextField?.bind_dimensionAndUnit (self.mBoardModelSelection.modelLimitWidth_property, self.mBoardModelSelection.modelLimitWidthUnit_property, file: #file, line: #line)
    self.mBoardInsertMenu?.bind_names (self.rootObject.modelNames_property, file: #file, line: #line)
    self.mInstanceModelNameTextField?.bind_valueObserver (self.mBoardInstanceSelection.modelName_property, file: #file, line: #line)
    self.mAutomaticBoardSizeSwitch?.bind_value (self.rootObject.automaticBoardSize_property, file: #file, line: #line)
    self.mArrowMagnitudeUnitPopUp?.bind_selectedTag (self.rootObject.arrowMagnitudeUnit_property, file: #file, line: #line)
    self.mArrowMagnitudeTextField?.bind_dimensionAndUnit (self.rootObject.arrowMagnitude_property, self.rootObject.arrowMagnitudeUnit_property, file: #file, line: #line)
    self.mShiftArrowMagnitudeUnitPopUp?.bind_selectedTag (self.rootObject.shiftArrowMagnitudeUnit_property, file: #file, line: #line)
    self.mShiftArrowMagnitudeTextField?.bind_dimensionAndUnit (self.rootObject.shiftArrowMagnitude_property, self.rootObject.shiftArrowMagnitudeUnit_property, file: #file, line: #line)
    self.mManualBoardWidthUnitPopUp?.bind_selectedTag (self.rootObject.boardWidthUnit_property, file: #file, line: #line)
    self.mManualBoardWidthTextField?.bind_dimensionAndUnit (self.rootObject.boardManualWidth_property, self.rootObject.boardWidthUnit_property, file: #file, line: #line)
    self.mManualBoardHeightUnitPopUp?.bind_selectedTag (self.rootObject.boardHeightUnit_property, file: #file, line: #line)
    self.mManualBoardHeightTextField?.bind_dimensionAndUnit (self.rootObject.boardManualHeight_property, self.rootObject.boardHeightUnit_property, file: #file, line: #line)
    self.mBoardWidthUnitPopUp?.bind_selectedTag (self.rootObject.boardWidthUnit_property, file: #file, line: #line)
    self.mBoardWidthTextField?.bind_dimensionAndUnit (self.rootObject.boardWidth_property, self.rootObject.boardWidthUnit_property, file: #file, line: #line)
    self.mBoardHeightUnitPopUp?.bind_selectedTag (self.rootObject.boardHeightUnit_property, file: #file, line: #line)
    self.mBoardHeightTextField?.bind_dimensionAndUnit (self.rootObject.boardHeight_property, self.rootObject.boardHeightUnit_property, file: #file, line: #line)
    self.mModelDragSourceTableView?.bind_models (self.rootObject.modelNames_property, file: #file, line: #line)
    self.mBoardLimitWidthUnitPopUp?.bind_selectedTag (self.rootObject.boardLimitWidthUnit_property, file: #file, line: #line)
    self.mBoardBoardLimitTextField?.bind_dimensionAndUnit (self.rootObject.boardLimitWidth_property, self.rootObject.boardLimitWidthUnit_property, file: #file, line: #line)
    self.mComposedBoardView?.bind_zoom (self.rootObject.zoom_property, file: #file, line: #line)
    self.mComposedBoardView?.bind_horizontalFlip (g_Preferences!.mergerBoardViewHorizontalFlip_property, file: #file, line: #line)
    self.mComposedBoardView?.bind_verticalFlip (g_Preferences!.mergerBoardViewVerticalFlip_property, file: #file, line: #line)
    self.mComposedBoardView?.bind_overObjectsDisplay (self.rootObject.boardOutlineRectDisplay_property, file: #file, line: #line)
    self.mComposedBoardView?.bind_arrowKeyMagnitude (self.rootObject.arrowMagnitude_property, file: #file, line: #line)
    self.mComposedBoardView?.bind_shiftArrowKeyMagnitude (self.rootObject.shiftArrowMagnitude_property, file: #file, line: #line)
    self.mSelectedBoardXUnitPopUp?.bind_selectedTag (self.rootObject.selectedBoardXUnit_property, file: #file, line: #line)
    self.mSelectedBoardXTextField?.bind_dimensionAndUnit (self.mBoardInstanceSelection.x_property, self.rootObject.selectedBoardXUnit_property, file: #file, line: #line)
    self.mSelectedBoardYUnitPopUp?.bind_selectedTag (self.rootObject.selectedBoardYUnit_property, file: #file, line: #line)
    self.mSelectedBoardYTextField?.bind_dimensionAndUnit (self.mBoardInstanceSelection.y_property, self.rootObject.selectedBoardYUnit_property, file: #file, line: #line)
    self.mInstanceRotation?.bind_quadrant (self.mBoardInstanceSelection.instanceRotation_property, file: #file, line: #line)
    self.mOverlapSwitch?.bind_value (self.rootObject.overlapingArrangment_property, file: #file, line: #line)
    self.mIncorrectDocumentNameTextField?.bind_valueObserver (self.incorrectDocumentFileErrorMessage_property, file: #file, line: #line)
    self.mArtworNameTextField?.bind_valueObserver (self.rootObject.artworkName_property, file: #file, line: #line)
    self.mImportArtworkButton?.bind_title (self.importArtworkButtonTitle_property, file: #file, line: #line)
    self.mGenerateGerber?.bind_value (self.rootObject.generateGerberProductFile_property, file: #file, line: #line)
    self.mGeneratePDF?.bind_value (self.rootObject.generatePDFProductFile_property, file: #file, line: #line)
    self.mBoardArchiveFormatPopUpButton?.bind_format (self.rootObject.generatedBoardArchiveFormat_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.rootObject.selectedPageIndex_property_selection <= EBSelection.single (1))
        },
        outlet: self.showPrefsForSettingMergerDisplayButton
      )
      self.rootObject.selectedPageIndex_property.addEBObserver (controller)
      self.mController_showPrefsForSettingMergerDisplayButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return (self.rootObject.selectedPageIndex_property_selection > EBSelection.single (1))
        },
        outlet: self.mDisplaySettingView
      )
      self.rootObject.selectedPageIndex_property.addEBObserver (controller)
      self.mController_mDisplaySettingView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return (self.rootObject.boardModels_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mNoModelMessage
      )
      self.rootObject.boardModels_property.count_property.addEBObserver (controller)
      self.mController_mNoModelMessage_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return ((self.mBoardModelController.selectedArray_property.count_property_selection > EBSelection.single (0)) && (self.mBoardModelSelection.instanceCount_property_selection == EBSelection.single (0)))
        },
        outlet: self.removeBoardModelButton
      )
      self.mBoardModelController.selectedArray_property.count_property.addEBObserver (controller)
      self.mBoardModelSelection.instanceCount_property.addEBObserver (controller)
      self.mController_removeBoardModelButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mBoardModelController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.updateBoardModelButton
      )
      self.mBoardModelController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_updateBoardModelButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return !self.rootObject.automaticBoardSize_property_selection
        },
        outlet: self.mAutomaticBoardSizeView
      )
      self.rootObject.automaticBoardSize_property.addEBObserver (controller)
      self.mController_mAutomaticBoardSizeView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.automaticBoardSize_property_selection
        },
        outlet: self.mManualBoardSizeView
      )
      self.rootObject.automaticBoardSize_property.addEBObserver (controller)
      self.mController_mManualBoardSizeView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return (self.rootObject.boardInstances_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mEmptyBoardMessage
      )
      self.rootObject.boardInstances_property.count_property.addEBObserver (controller)
      self.mController_mEmptyBoardMessage_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.rootObject.boardInstances_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mOverlapSwitch
      )
      self.rootObject.boardInstances_property.count_property.addEBObserver (controller)
      self.mController_mOverlapSwitch_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mBoardInstanceController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mMoveRightButton
      )
      self.mBoardInstanceController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mMoveRightButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mBoardInstanceController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mMoveLeftButton
      )
      self.mBoardInstanceController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mMoveLeftButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mBoardInstanceController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mMoveUpButton
      )
      self.mBoardInstanceController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mMoveUpButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mBoardInstanceController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mMoveDownButton
      )
      self.mBoardInstanceController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mMoveDownButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return !self.rootObject.artwork_none_selection
        },
        outlet: self.mNoArtworkMessage
      )
      self.rootObject.artwork_none.addEBObserver (controller)
      self.mController_mNoArtworkMessage_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.documentFileNameOk_property_selection
        },
        outlet: self.mDangerView
      )
      self.documentFileNameOk_property.addEBObserver (controller)
      self.mController_mDangerView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return ((!self.rootObject.artwork_none_selection && (self.rootObject.boardInstances_property.count_property_selection > EBSelection.single (0))) && !self.documentIsUnnamed_property_selection)
        },
        outlet: self.mGenerateProductFilesActionButton
      )
      self.documentIsUnnamed_property.addEBObserver (controller)
      self.rootObject.artwork_none.addEBObserver (controller)
      self.rootObject.boardInstances_property.count_property.addEBObserver (controller)
      self.mController_mGenerateProductFilesActionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.artwork_none_selection
        },
        outlet: self.mLogTextView
      )
      self.rootObject.artwork_none.addEBObserver (controller)
      self.mController_mLogTextView_hidden = controller
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  }

  //····················································································································
  
  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    self.showPrefsForSettingMergerDisplayButton?.target = self
    self.showPrefsForSettingMergerDisplayButton?.action = #selector (MergerDocument.showPrefsForSettingMergerDisplayAction (_:))
    self.dismissPrefsForSettingMergerDisplayButton?.target = self
    self.dismissPrefsForSettingMergerDisplayButton?.action = #selector (MergerDocument.showPrefsForSettingMergerDisplayAction (_:))
    self.addBoardModelButton?.target = self
    self.addBoardModelButton?.action = #selector (MergerDocument.addBoardModelAction (_:))
    self.removeBoardModelButton?.target = mBoardModelController
    self.removeBoardModelButton?.action = #selector (Controller_MergerDocument_mBoardModelController.remove (_:))
    self.updateBoardModelButton?.target = self
    self.updateBoardModelButton?.action = #selector (MergerDocument.updateBoardModelAction (_:))
    self.showBoardHelpButton?.target = self
    self.showBoardHelpButton?.action = #selector (MergerDocument.showBoardHelpAction (_:))
    self.mMoveRightButton?.target = self
    self.mMoveRightButton?.action = #selector (MergerDocument.moveRightAction (_:))
    self.mMoveLeftButton?.target = self
    self.mMoveLeftButton?.action = #selector (MergerDocument.moveLeftAction (_:))
    self.mMoveUpButton?.target = self
    self.mMoveUpButton?.action = #selector (MergerDocument.moveUpAction (_:))
    self.mMoveDownButton?.target = self
    self.mMoveDownButton?.action = #selector (MergerDocument.moveDownAction (_:))
    self.mGenerateProductFilesActionButton?.target = self
    self.mGenerateProductFilesActionButton?.action = #selector (MergerDocument.generateProductFilesAction (_:))
    self.mImportArtworkButton?.target = self
    self.mImportArtworkButton?.action = #selector (MergerDocument.importArtworkAction (_:))
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
    self.checkOutletConnections ()
    self.configureProperties ()
    self.installBindings ()
    self.setTargetsAndActions ()
  //--------------------------- Read documentFilePath model 
    self.documentFilePath_property.mReadModelFunction = { [weak self] in
      if let r = self?.computeTransient_documentFilePath () {
        return .single (r)
      }else{
        return .empty
      }
    }
  }

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Unbind regular bindings
    self.mPageSegmentedControl?.unbind_selectedPage ()
    self.mStatusImageViewInToolbar?.unbind_image ()
    self.mStatusImageViewInToolbar?.unbind_tooltip ()
    self.mIssueTextField?.unbind_valueObserver ()
    self.mIssueTableView?.unbind_issues ()
    self.mModelViewHorizontalFlipCheckbox?.unbind_value ()
    self.mModelViewVerticalFlipCheckbox?.unbind_value ()
    self.mModelViewDisplayHolesCheckbox?.unbind_value ()
    self.mModelViewDisplayViasCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontPadsCheckbox?.unbind_value ()
    self.mModelViewDisplayInternalBoardsLimitsCheckbox?.unbind_value ()
    self.mModelViewDisplayBoardLimitsCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontComponentNamesCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontComponenValuesCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontPackagesCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontLegendTextsCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontTracksCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontLayoutTextsCheckbox?.unbind_value ()
    self.mModelViewDisplayBackPadsCheckbox?.unbind_value ()
    self.mModelViewDisplayBackComponentNamesCheckbox?.unbind_value ()
    self.mModelViewDisplayBackComponenValuesCheckbox?.unbind_value ()
    self.mModelViewDisplayBackLegendTextsCheckbox?.unbind_value ()
    self.mModelViewDisplayBackPackagesCheckbox?.unbind_value ()
    self.mModelViewDisplayBackTracksCheckbox?.unbind_value ()
    self.mModelViewDisplayBackLayoutTextsCheckbox?.unbind_value ()
    self.mModelViewDisplayFrontLegendLinesCheckbox?.unbind_value ()
    self.mModelViewDisplayBackLegendLinesCheckbox?.unbind_value ()
    self.mBoardViewHorizontalFlipCheckbox?.unbind_value ()
    self.mBoardViewVerticalFlipCheckbox?.unbind_value ()
    self.mBoardViewDisplayHolesCheckbox?.unbind_value ()
    self.mBoardViewDisplayViasCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontPadsCheckbox?.unbind_value ()
    self.mBoardViewDisplayBoardLimitsCheckbox?.unbind_value ()
    self.mBoardViewDisplayInternalBoardsLimitsCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontComponentNamesCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontComponenValuesCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontPackagesCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontLegendTextsCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontTracksCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontLayoutTextsCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackPadsCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackComponentNamesCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackComponenValuesCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackLegendTextsCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackPackagesCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackTracksCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackLayoutTextsCheckbox?.unbind_value ()
    self.mBoardViewDisplayFrontLegendLinesCheckbox?.unbind_value ()
    self.mBoardViewDisplayBackLegendLinesCheckbox?.unbind_value ()
    self.mergerViewDisplayHolesColorWell?.unbind_color ()
    self.mergerViewDisplayViasColorWell?.unbind_color ()
    self.mergerViewDisplayFrontPadsColorWell?.unbind_color ()
    self.mergerViewDisplayBoardLimitsColorWell?.unbind_color ()
    self.mergerViewDisplayInternalBoardsLimitsColorWell?.unbind_color ()
    self.mergerViewDisplayFrontComponentNamesColorWell?.unbind_color ()
    self.mergerViewDisplayFrontComponentValuesColorWell?.unbind_color ()
    self.mergerViewDisplayFrontPackagesColorWell?.unbind_color ()
    self.mergerViewDisplayFrontLegendTextsColorWell?.unbind_color ()
    self.mergerViewDisplayFrontTracksColorWell?.unbind_color ()
    self.mergerViewDisplayFrontLayoutTextsColorWell?.unbind_color ()
    self.mergerViewDisplayBackPadsColorWell?.unbind_color ()
    self.mergerViewDisplayBackComponentNamesColorWell?.unbind_color ()
    self.mergerViewDisplayBackComponentValuesColorWell?.unbind_color ()
    self.mergerViewDisplayBackLegendTextsColorWell?.unbind_color ()
    self.mergerViewDisplayBackPackagesColorWell?.unbind_color ()
    self.mergerViewDisplayBackTracksColorWell?.unbind_color ()
    self.mergerViewDisplayBackLayoutTextsColorWell?.unbind_color ()
    self.mergerViewBackgroundColorWell?.unbind_color ()
    self.mergerViewFrontLegendLinesColorWell?.unbind_color ()
    self.mergerViewBackLegendLinesColorWell?.unbind_color ()
    self.mBoardModelView?.unbind_zoom ()
    self.mBoardModelView?.unbind_horizontalFlip ()
    self.mBoardModelView?.unbind_verticalFlip ()
    self.mBoardModelView?.unbind_overObjectsDisplay ()
    self.mArtworkNameTextField?.unbind_valueObserver ()
    self.mInstanceCountTextField?.unbind_valueObserver ()
    self.mModelWidthUnitPopUp?.unbind_selectedTag ()
    self.mModelWidthTextField?.unbind_dimensionAndUnit ()
    self.mModelHeightUnitPopUp?.unbind_selectedTag ()
    self.mModelHeightTextField?.unbind_dimensionAndUnit ()
    self.mModelLimitWidthUnitPopUp?.unbind_selectedTag ()
    self.mModelBoardLimitTextField?.unbind_dimensionAndUnit ()
    self.mBoardInsertMenu?.unbind_names ()
    self.mInstanceModelNameTextField?.unbind_valueObserver ()
    self.mAutomaticBoardSizeSwitch?.unbind_value ()
    self.mArrowMagnitudeUnitPopUp?.unbind_selectedTag ()
    self.mArrowMagnitudeTextField?.unbind_dimensionAndUnit ()
    self.mShiftArrowMagnitudeUnitPopUp?.unbind_selectedTag ()
    self.mShiftArrowMagnitudeTextField?.unbind_dimensionAndUnit ()
    self.mManualBoardWidthUnitPopUp?.unbind_selectedTag ()
    self.mManualBoardWidthTextField?.unbind_dimensionAndUnit ()
    self.mManualBoardHeightUnitPopUp?.unbind_selectedTag ()
    self.mManualBoardHeightTextField?.unbind_dimensionAndUnit ()
    self.mBoardWidthUnitPopUp?.unbind_selectedTag ()
    self.mBoardWidthTextField?.unbind_dimensionAndUnit ()
    self.mBoardHeightUnitPopUp?.unbind_selectedTag ()
    self.mBoardHeightTextField?.unbind_dimensionAndUnit ()
    self.mModelDragSourceTableView?.unbind_models ()
    self.mBoardLimitWidthUnitPopUp?.unbind_selectedTag ()
    self.mBoardBoardLimitTextField?.unbind_dimensionAndUnit ()
    self.mComposedBoardView?.unbind_zoom ()
    self.mComposedBoardView?.unbind_horizontalFlip ()
    self.mComposedBoardView?.unbind_verticalFlip ()
    self.mComposedBoardView?.unbind_overObjectsDisplay ()
    self.mComposedBoardView?.unbind_arrowKeyMagnitude ()
    self.mComposedBoardView?.unbind_shiftArrowKeyMagnitude ()
    self.mSelectedBoardXUnitPopUp?.unbind_selectedTag ()
    self.mSelectedBoardXTextField?.unbind_dimensionAndUnit ()
    self.mSelectedBoardYUnitPopUp?.unbind_selectedTag ()
    self.mSelectedBoardYTextField?.unbind_dimensionAndUnit ()
    self.mInstanceRotation?.unbind_quadrant ()
    self.mOverlapSwitch?.unbind_value ()
    self.mIncorrectDocumentNameTextField?.unbind_valueObserver ()
    self.mArtworNameTextField?.unbind_valueObserver ()
    self.mImportArtworkButton?.unbind_title ()
    self.mGenerateGerber?.unbind_value ()
    self.mGeneratePDF?.unbind_value ()
    self.mBoardArchiveFormatPopUpButton?.unbind_format ()
  //--------------------------- Unbind multiple bindings
    self.rootObject.selectedPageIndex_property.removeEBObserver (self.mController_showPrefsForSettingMergerDisplayButton_enabled!)
    self.mController_showPrefsForSettingMergerDisplayButton_enabled = nil
    self.rootObject.selectedPageIndex_property.removeEBObserver (self.mController_mDisplaySettingView_hidden!)
    self.mController_mDisplaySettingView_hidden = nil
    self.rootObject.boardModels_property.count_property.removeEBObserver (self.mController_mNoModelMessage_hidden!)
    self.mController_mNoModelMessage_hidden = nil
    self.mBoardModelController.selectedArray_property.count_property.removeEBObserver (self.mController_removeBoardModelButton_enabled!)
    self.mBoardModelSelection.instanceCount_property.removeEBObserver (self.mController_removeBoardModelButton_enabled!)
    self.mController_removeBoardModelButton_enabled = nil
    self.mBoardModelController.selectedArray_property.count_property.removeEBObserver (self.mController_updateBoardModelButton_enabled!)
    self.mController_updateBoardModelButton_enabled = nil
    self.rootObject.automaticBoardSize_property.removeEBObserver (self.mController_mAutomaticBoardSizeView_hidden!)
    self.mController_mAutomaticBoardSizeView_hidden = nil
    self.rootObject.automaticBoardSize_property.removeEBObserver (self.mController_mManualBoardSizeView_hidden!)
    self.mController_mManualBoardSizeView_hidden = nil
    self.rootObject.boardInstances_property.count_property.removeEBObserver (self.mController_mEmptyBoardMessage_hidden!)
    self.mController_mEmptyBoardMessage_hidden = nil
    self.rootObject.boardInstances_property.count_property.removeEBObserver (self.mController_mOverlapSwitch_enabled!)
    self.mController_mOverlapSwitch_enabled = nil
    self.mBoardInstanceController.selectedArray_property.count_property.removeEBObserver (self.mController_mMoveRightButton_enabled!)
    self.mController_mMoveRightButton_enabled = nil
    self.mBoardInstanceController.selectedArray_property.count_property.removeEBObserver (self.mController_mMoveLeftButton_enabled!)
    self.mController_mMoveLeftButton_enabled = nil
    self.mBoardInstanceController.selectedArray_property.count_property.removeEBObserver (self.mController_mMoveUpButton_enabled!)
    self.mController_mMoveUpButton_enabled = nil
    self.mBoardInstanceController.selectedArray_property.count_property.removeEBObserver (self.mController_mMoveDownButton_enabled!)
    self.mController_mMoveDownButton_enabled = nil
    self.rootObject.artwork_none.removeEBObserver (self.mController_mNoArtworkMessage_hidden!)
    self.mController_mNoArtworkMessage_hidden = nil
    self.documentFileNameOk_property.removeEBObserver (self.mController_mDangerView_hidden!)
    self.mController_mDangerView_hidden = nil
    self.documentIsUnnamed_property.removeEBObserver (self.mController_mGenerateProductFilesActionButton_enabled!)
    self.rootObject.artwork_none.removeEBObserver (self.mController_mGenerateProductFilesActionButton_enabled!)
    self.rootObject.boardInstances_property.count_property.removeEBObserver (self.mController_mGenerateProductFilesActionButton_enabled!)
    self.mController_mGenerateProductFilesActionButton_enabled = nil
    self.rootObject.artwork_none.removeEBObserver (self.mController_mLogTextView_hidden!)
    self.mController_mLogTextView_hidden = nil
  //--------------------------- Unbind array controllers
    self.mBoardModelController.unbind_tableView (self.mBoardModelTableView)
    self.mBoardInstanceController.unbind_ebView (self.mComposedBoardView)
  //--- Array controller property: mBoardModelController
    self.mBoardModelController.unbind_model ()
  //--- Selection controller property: mBoardModelSelection
    self.mBoardModelSelection.unbind_selection ()
  //--- Array controller property: mBoardInstanceController
    self.mBoardInstanceController.unbind_model ()
  //--- Selection controller property: mBoardInstanceSelection
    self.mBoardInstanceSelection.unbind_selection ()
    self.documentFilePath_property.removeEBObserver (self.incorrectDocumentFileErrorMessage_property)
    self.documentFilePath_property.removeEBObserver (self.documentIsUnnamed_property)
    self.rootObject.artworkName_property.removeEBObserver (self.importArtworkButtonTitle_property)
    self.rootObject.overlapingArrangment_property.removeEBObserver (self.issues_property)
    self.rootObject.boardRect_property.removeEBObserver (self.issues_property)
    self.rootObject.boardDisplayRect_property.removeEBObserver (self.issues_property)
    self.rootObject.boardInstances_property.removeEBObserverOf_instanceRect (self.issues_property)
    self.rootObject.boardInstances_property.removeEBObserverOf_boardLimitWidth (self.issues_property)
    self.issues_property.removeEBObserver (self.mStatusImage_property)
    self.issues_property.removeEBObserver (self.mStatusMessage_property)
    self.documentFilePath_property.removeEBObserver (self.documentFileNameOk_property)
  //--------------------------- Remove targets / actions
    self.showPrefsForSettingMergerDisplayButton?.target = nil
    self.dismissPrefsForSettingMergerDisplayButton?.target = nil
    self.addBoardModelButton?.target = nil
    self.removeBoardModelButton?.target = nil
    self.updateBoardModelButton?.target = nil
    self.showBoardHelpButton?.target = nil
    self.mMoveRightButton?.target = nil
    self.mMoveLeftButton?.target = nil
    self.mMoveUpButton?.target = nil
    self.mMoveDownButton?.target = nil
    self.mGenerateProductFilesActionButton?.target = nil
    self.mImportArtworkButton?.target = nil
  //--------------------------- Clean up outlets
    self.addBoardModelButton?.ebCleanUp ()
    self.boardHelpPanel?.ebCleanUp ()
    self.dismissPrefsForSettingMergerDisplayButton?.ebCleanUp ()
    self.mArrowMagnitudeTextField?.ebCleanUp ()
    self.mArrowMagnitudeUnitPopUp?.ebCleanUp ()
    self.mArtworNameTextField?.ebCleanUp ()
    self.mArtworkNameTextField?.ebCleanUp ()
    self.mAutomaticBoardSizeSwitch?.ebCleanUp ()
    self.mAutomaticBoardSizeView?.ebCleanUp ()
    self.mBoardArchiveFormatPopUpButton?.ebCleanUp ()
    self.mBoardBoardLimitTextField?.ebCleanUp ()
    self.mBoardClipView?.ebCleanUp ()
    self.mBoardHeightTextField?.ebCleanUp ()
    self.mBoardHeightUnitPopUp?.ebCleanUp ()
    self.mBoardInsertMenu?.ebCleanUp ()
    self.mBoardInspectorMasterView?.ebCleanUp ()
    self.mBoardInspectorSegmentedControl?.ebCleanUp ()
    self.mBoardIssueInspectorView?.ebCleanUp ()
    self.mBoardLimitWidthUnitPopUp?.ebCleanUp ()
    self.mBoardModelTableView?.ebCleanUp ()
    self.mBoardModelView?.ebCleanUp ()
    self.mBoardOperationInspectorView?.ebCleanUp ()
    self.mBoardPageView?.ebCleanUp ()
    self.mBoardViewDisplayBackComponenValuesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackComponentNamesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackLayoutTextsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackLegendLinesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackLegendTextsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackPackagesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackPadsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBackTracksCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayBoardLimitsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontComponenValuesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontComponentNamesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontLayoutTextsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontLegendLinesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontLegendTextsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontPackagesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontPadsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayFrontTracksCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayHolesCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayInternalBoardsLimitsCheckbox?.ebCleanUp ()
    self.mBoardViewDisplayViasCheckbox?.ebCleanUp ()
    self.mBoardViewHorizontalFlipCheckbox?.ebCleanUp ()
    self.mBoardViewVerticalFlipCheckbox?.ebCleanUp ()
    self.mBoardWidthTextField?.ebCleanUp ()
    self.mBoardWidthUnitPopUp?.ebCleanUp ()
    self.mComposedBoardScrollView?.ebCleanUp ()
    self.mComposedBoardView?.ebCleanUp ()
    self.mDangerView?.ebCleanUp ()
    self.mDeselectIssueButton?.ebCleanUp ()
    self.mDisplaySettingView?.ebCleanUp ()
    self.mEmptyBoardMessage?.ebCleanUp ()
    self.mGenerateGerber?.ebCleanUp ()
    self.mGeneratePDF?.ebCleanUp ()
    self.mGenerateProductFilesActionButton?.ebCleanUp ()
    self.mImportArtworkButton?.ebCleanUp ()
    self.mIncorrectDocumentNameTextField?.ebCleanUp ()
    self.mInsertArrayOfBoardsOrientation?.ebCleanUp ()
    self.mInsertArrayOfBoardsPanel?.ebCleanUp ()
    self.mInsertArrayOfBoardsPopUpButton?.ebCleanUp ()
    self.mInsertArrayOfBoardsXCountField?.ebCleanUp ()
    self.mInsertArrayOfBoardsYCountField?.ebCleanUp ()
    self.mInsertedInstanceDefaultOrientation?.ebCleanUp ()
    self.mInstanceCountTextField?.ebCleanUp ()
    self.mInstanceModelNameTextField?.ebCleanUp ()
    self.mInstanceRotation?.ebCleanUp ()
    self.mIssueTableView?.ebCleanUp ()
    self.mIssueTextField?.ebCleanUp ()
    self.mLogTextView?.ebCleanUp ()
    self.mManualBoardHeightTextField?.ebCleanUp ()
    self.mManualBoardHeightUnitPopUp?.ebCleanUp ()
    self.mManualBoardSizeView?.ebCleanUp ()
    self.mManualBoardWidthTextField?.ebCleanUp ()
    self.mManualBoardWidthUnitPopUp?.ebCleanUp ()
    self.mMasterView?.ebCleanUp ()
    self.mModelBoardLimitTextField?.ebCleanUp ()
    self.mModelDragSourceTableView?.ebCleanUp ()
    self.mModelHeightTextField?.ebCleanUp ()
    self.mModelHeightUnitPopUp?.ebCleanUp ()
    self.mModelLimitWidthUnitPopUp?.ebCleanUp ()
    self.mModelPageView?.ebCleanUp ()
    self.mModelViewDisplayBackComponenValuesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackComponentNamesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackLayoutTextsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackLegendLinesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackLegendTextsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackPackagesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackPadsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBackTracksCheckbox?.ebCleanUp ()
    self.mModelViewDisplayBoardLimitsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontComponenValuesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontComponentNamesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontLayoutTextsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontLegendLinesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontLegendTextsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontPackagesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontPadsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayFrontTracksCheckbox?.ebCleanUp ()
    self.mModelViewDisplayHolesCheckbox?.ebCleanUp ()
    self.mModelViewDisplayInternalBoardsLimitsCheckbox?.ebCleanUp ()
    self.mModelViewDisplayViasCheckbox?.ebCleanUp ()
    self.mModelViewHorizontalFlipCheckbox?.ebCleanUp ()
    self.mModelViewVerticalFlipCheckbox?.ebCleanUp ()
    self.mModelWidthTextField?.ebCleanUp ()
    self.mModelWidthUnitPopUp?.ebCleanUp ()
    self.mMoveDownButton?.ebCleanUp ()
    self.mMoveLeftButton?.ebCleanUp ()
    self.mMoveRightButton?.ebCleanUp ()
    self.mMoveUpButton?.ebCleanUp ()
    self.mNoArtworkMessage?.ebCleanUp ()
    self.mNoModelMessage?.ebCleanUp ()
    self.mOverlapSwitch?.ebCleanUp ()
    self.mPageSegmentedControl?.ebCleanUp ()
    self.mProductPageView?.ebCleanUp ()
    self.mSelectedBoardXTextField?.ebCleanUp ()
    self.mSelectedBoardXUnitPopUp?.ebCleanUp ()
    self.mSelectedBoardYTextField?.ebCleanUp ()
    self.mSelectedBoardYUnitPopUp?.ebCleanUp ()
    self.mShiftArrowMagnitudeTextField?.ebCleanUp ()
    self.mShiftArrowMagnitudeUnitPopUp?.ebCleanUp ()
    self.mStatusImageViewInToolbar?.ebCleanUp ()
    self.mergerViewBackLegendLinesColorWell?.ebCleanUp ()
    self.mergerViewBackgroundColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackComponentNamesColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackComponentValuesColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackLayoutTextsColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackLegendTextsColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackPackagesColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackPadsColorWell?.ebCleanUp ()
    self.mergerViewDisplayBackTracksColorWell?.ebCleanUp ()
    self.mergerViewDisplayBoardLimitsColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontComponentNamesColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontComponentValuesColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontLayoutTextsColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontLegendTextsColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontPackagesColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontPadsColorWell?.ebCleanUp ()
    self.mergerViewDisplayFrontTracksColorWell?.ebCleanUp ()
    self.mergerViewDisplayHolesColorWell?.ebCleanUp ()
    self.mergerViewDisplayInternalBoardsLimitsColorWell?.ebCleanUp ()
    self.mergerViewDisplayViasColorWell?.ebCleanUp ()
    self.mergerViewFrontLegendLinesColorWell?.ebCleanUp ()
    self.removeBoardModelButton?.ebCleanUp ()
    self.showBoardHelpButton?.ebCleanUp ()
    self.showPrefsForSettingMergerDisplayButton?.ebCleanUp ()
    self.updateBoardModelButton?.ebCleanUp ()
  //--------------------------- Detach outlets
    self.addBoardModelButton = nil
    self.boardHelpPanel = nil
    self.dismissPrefsForSettingMergerDisplayButton = nil
    self.mArrowMagnitudeTextField = nil
    self.mArrowMagnitudeUnitPopUp = nil
    self.mArtworNameTextField = nil
    self.mArtworkNameTextField = nil
    self.mAutomaticBoardSizeSwitch = nil
    self.mAutomaticBoardSizeView = nil
    self.mBoardArchiveFormatPopUpButton = nil
    self.mBoardBoardLimitTextField = nil
    self.mBoardClipView = nil
    self.mBoardHeightTextField = nil
    self.mBoardHeightUnitPopUp = nil
    self.mBoardInsertMenu = nil
    self.mBoardInspectorMasterView = nil
    self.mBoardInspectorSegmentedControl = nil
    self.mBoardIssueInspectorView = nil
    self.mBoardLimitWidthUnitPopUp = nil
    self.mBoardModelTableView = nil
    self.mBoardModelView = nil
    self.mBoardOperationInspectorView = nil
    self.mBoardPageView = nil
    self.mBoardViewDisplayBackComponenValuesCheckbox = nil
    self.mBoardViewDisplayBackComponentNamesCheckbox = nil
    self.mBoardViewDisplayBackLayoutTextsCheckbox = nil
    self.mBoardViewDisplayBackLegendLinesCheckbox = nil
    self.mBoardViewDisplayBackLegendTextsCheckbox = nil
    self.mBoardViewDisplayBackPackagesCheckbox = nil
    self.mBoardViewDisplayBackPadsCheckbox = nil
    self.mBoardViewDisplayBackTracksCheckbox = nil
    self.mBoardViewDisplayBoardLimitsCheckbox = nil
    self.mBoardViewDisplayFrontComponenValuesCheckbox = nil
    self.mBoardViewDisplayFrontComponentNamesCheckbox = nil
    self.mBoardViewDisplayFrontLayoutTextsCheckbox = nil
    self.mBoardViewDisplayFrontLegendLinesCheckbox = nil
    self.mBoardViewDisplayFrontLegendTextsCheckbox = nil
    self.mBoardViewDisplayFrontPackagesCheckbox = nil
    self.mBoardViewDisplayFrontPadsCheckbox = nil
    self.mBoardViewDisplayFrontTracksCheckbox = nil
    self.mBoardViewDisplayHolesCheckbox = nil
    self.mBoardViewDisplayInternalBoardsLimitsCheckbox = nil
    self.mBoardViewDisplayViasCheckbox = nil
    self.mBoardViewHorizontalFlipCheckbox = nil
    self.mBoardViewVerticalFlipCheckbox = nil
    self.mBoardWidthTextField = nil
    self.mBoardWidthUnitPopUp = nil
    self.mComposedBoardScrollView = nil
    self.mComposedBoardView = nil
    self.mDangerView = nil
    self.mDeselectIssueButton = nil
    self.mDisplaySettingView = nil
    self.mEmptyBoardMessage = nil
    self.mGenerateGerber = nil
    self.mGeneratePDF = nil
    self.mGenerateProductFilesActionButton = nil
    self.mImportArtworkButton = nil
    self.mIncorrectDocumentNameTextField = nil
    self.mInsertArrayOfBoardsOrientation = nil
    self.mInsertArrayOfBoardsPanel = nil
    self.mInsertArrayOfBoardsPopUpButton = nil
    self.mInsertArrayOfBoardsXCountField = nil
    self.mInsertArrayOfBoardsYCountField = nil
    self.mInsertedInstanceDefaultOrientation = nil
    self.mInstanceCountTextField = nil
    self.mInstanceModelNameTextField = nil
    self.mInstanceRotation = nil
    self.mIssueTableView = nil
    self.mIssueTextField = nil
    self.mLogTextView = nil
    self.mManualBoardHeightTextField = nil
    self.mManualBoardHeightUnitPopUp = nil
    self.mManualBoardSizeView = nil
    self.mManualBoardWidthTextField = nil
    self.mManualBoardWidthUnitPopUp = nil
    self.mMasterView = nil
    self.mModelBoardLimitTextField = nil
    self.mModelDragSourceTableView = nil
    self.mModelHeightTextField = nil
    self.mModelHeightUnitPopUp = nil
    self.mModelLimitWidthUnitPopUp = nil
    self.mModelPageView = nil
    self.mModelViewDisplayBackComponenValuesCheckbox = nil
    self.mModelViewDisplayBackComponentNamesCheckbox = nil
    self.mModelViewDisplayBackLayoutTextsCheckbox = nil
    self.mModelViewDisplayBackLegendLinesCheckbox = nil
    self.mModelViewDisplayBackLegendTextsCheckbox = nil
    self.mModelViewDisplayBackPackagesCheckbox = nil
    self.mModelViewDisplayBackPadsCheckbox = nil
    self.mModelViewDisplayBackTracksCheckbox = nil
    self.mModelViewDisplayBoardLimitsCheckbox = nil
    self.mModelViewDisplayFrontComponenValuesCheckbox = nil
    self.mModelViewDisplayFrontComponentNamesCheckbox = nil
    self.mModelViewDisplayFrontLayoutTextsCheckbox = nil
    self.mModelViewDisplayFrontLegendLinesCheckbox = nil
    self.mModelViewDisplayFrontLegendTextsCheckbox = nil
    self.mModelViewDisplayFrontPackagesCheckbox = nil
    self.mModelViewDisplayFrontPadsCheckbox = nil
    self.mModelViewDisplayFrontTracksCheckbox = nil
    self.mModelViewDisplayHolesCheckbox = nil
    self.mModelViewDisplayInternalBoardsLimitsCheckbox = nil
    self.mModelViewDisplayViasCheckbox = nil
    self.mModelViewHorizontalFlipCheckbox = nil
    self.mModelViewVerticalFlipCheckbox = nil
    self.mModelWidthTextField = nil
    self.mModelWidthUnitPopUp = nil
    self.mMoveDownButton = nil
    self.mMoveLeftButton = nil
    self.mMoveRightButton = nil
    self.mMoveUpButton = nil
    self.mNoArtworkMessage = nil
    self.mNoModelMessage = nil
    self.mOverlapSwitch = nil
    self.mPageSegmentedControl = nil
    self.mProductPageView = nil
    self.mSelectedBoardXTextField = nil
    self.mSelectedBoardXUnitPopUp = nil
    self.mSelectedBoardYTextField = nil
    self.mSelectedBoardYUnitPopUp = nil
    self.mShiftArrowMagnitudeTextField = nil
    self.mShiftArrowMagnitudeUnitPopUp = nil
    self.mStatusImageViewInToolbar = nil
    self.mergerViewBackLegendLinesColorWell = nil
    self.mergerViewBackgroundColorWell = nil
    self.mergerViewDisplayBackComponentNamesColorWell = nil
    self.mergerViewDisplayBackComponentValuesColorWell = nil
    self.mergerViewDisplayBackLayoutTextsColorWell = nil
    self.mergerViewDisplayBackLegendTextsColorWell = nil
    self.mergerViewDisplayBackPackagesColorWell = nil
    self.mergerViewDisplayBackPadsColorWell = nil
    self.mergerViewDisplayBackTracksColorWell = nil
    self.mergerViewDisplayBoardLimitsColorWell = nil
    self.mergerViewDisplayFrontComponentNamesColorWell = nil
    self.mergerViewDisplayFrontComponentValuesColorWell = nil
    self.mergerViewDisplayFrontLayoutTextsColorWell = nil
    self.mergerViewDisplayFrontLegendTextsColorWell = nil
    self.mergerViewDisplayFrontPackagesColorWell = nil
    self.mergerViewDisplayFrontPadsColorWell = nil
    self.mergerViewDisplayFrontTracksColorWell = nil
    self.mergerViewDisplayHolesColorWell = nil
    self.mergerViewDisplayInternalBoardsLimitsColorWell = nil
    self.mergerViewDisplayViasColorWell = nil
    self.mergerViewFrontLegendLinesColorWell = nil
    self.removeBoardModelButton = nil
    self.showBoardHelpButton = nil
    self.showPrefsForSettingMergerDisplayButton = nil
    self.updateBoardModelButton = nil
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

