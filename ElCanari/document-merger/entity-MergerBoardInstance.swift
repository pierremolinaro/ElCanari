//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MergerBoardInstance : EBGraphicManagedObject,
  MergerBoardInstance_x,
  MergerBoardInstance_y,
  MergerBoardInstance_instanceRect,
  MergerBoardInstance_boardLimitWidth,
  MergerBoardInstance_selectionLayer,
  MergerBoardInstance_backgroundLayerDisplay,
  MergerBoardInstance_backLegendLinesLayerDisplay,
  MergerBoardInstance_frontLegendLinesLayerDisplay,
  MergerBoardInstance_frontLegendTextsLayerDisplay,
  MergerBoardInstance_frontLayoutTextsLayerDisplay,
  MergerBoardInstance_backLegendTextsLayerDisplay,
  MergerBoardInstance_backLayoutTextsLayerDisplay,
  MergerBoardInstance_holeLayerDisplay,
  MergerBoardInstance_viaLayerDisplay,
  MergerBoardInstance_frontPadsDisplay,
  MergerBoardInstance_backPadsDisplay,
  MergerBoardInstance_boardLimitsDisplay,
  MergerBoardInstance_backComponentNameDisplay,
  MergerBoardInstance_frontComponentNameDisplay,
  MergerBoardInstance_frontComponentValueDisplay,
  MergerBoardInstance_backComponentValueDisplay,
  MergerBoardInstance_backTracksDisplay,
  MergerBoardInstance_frontTracksDisplay,
  MergerBoardInstance_frontPackagesDisplay,
  MergerBoardInstance_backPackagesDisplay,
  MergerBoardInstance_newInstanceLayerDisplay,
  MergerBoardInstance_instanceLayerDisplay {

  //····················································································································
  //   Accessing x stored property
  //····················································································································

  var x : Int {
    get {
      return self.x_property.propval
    }
    set {
      self.x_property.setProp (newValue)
    }
  }

  var x_property_selection : EBSelection <Int> {
    get {
      return self.x_property.prop
    }
  }

  //····················································································································
  //   Accessing y stored property
  //····················································································································

  var y : Int {
    get {
      return self.y_property.propval
    }
    set {
      self.y_property.setProp (newValue)
    }
  }

  var y_property_selection : EBSelection <Int> {
    get {
      return self.y_property.prop
    }
  }

  //····················································································································
  //   Accessing instanceRect transient property
  //····················································································································

  var instanceRect_property_selection : EBSelection <CanariBoardRect> {
    get {
      return self.instanceRect_property.prop
    }
  }

  var instanceRect : CanariBoardRect? {
    switch instanceRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing boardLimitWidth transient property
  //····················································································································

  var boardLimitWidth_property_selection : EBSelection <Int> {
    get {
      return self.boardLimitWidth_property.prop
    }
  }

  var boardLimitWidth : Int? {
    switch boardLimitWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing selectionLayer transient property
  //····················································································································

  var selectionLayer_property_selection : EBSelection <CALayer> {
    get {
      return self.selectionLayer_property.prop
    }
  }

  var selectionLayer : CALayer? {
    switch selectionLayer_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backgroundLayerDisplay transient property
  //····················································································································

  var backgroundLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backgroundLayerDisplay_property.prop
    }
  }

  var backgroundLayerDisplay : CALayer? {
    switch backgroundLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backLegendLinesLayerDisplay transient property
  //····················································································································

  var backLegendLinesLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backLegendLinesLayerDisplay_property.prop
    }
  }

  var backLegendLinesLayerDisplay : CALayer? {
    switch backLegendLinesLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontLegendLinesLayerDisplay transient property
  //····················································································································

  var frontLegendLinesLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontLegendLinesLayerDisplay_property.prop
    }
  }

  var frontLegendLinesLayerDisplay : CALayer? {
    switch frontLegendLinesLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontLegendTextsLayerDisplay transient property
  //····················································································································

  var frontLegendTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontLegendTextsLayerDisplay_property.prop
    }
  }

  var frontLegendTextsLayerDisplay : CALayer? {
    switch frontLegendTextsLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontLayoutTextsLayerDisplay transient property
  //····················································································································

  var frontLayoutTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontLayoutTextsLayerDisplay_property.prop
    }
  }

  var frontLayoutTextsLayerDisplay : CALayer? {
    switch frontLayoutTextsLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backLegendTextsLayerDisplay transient property
  //····················································································································

  var backLegendTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backLegendTextsLayerDisplay_property.prop
    }
  }

  var backLegendTextsLayerDisplay : CALayer? {
    switch backLegendTextsLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backLayoutTextsLayerDisplay transient property
  //····················································································································

  var backLayoutTextsLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backLayoutTextsLayerDisplay_property.prop
    }
  }

  var backLayoutTextsLayerDisplay : CALayer? {
    switch backLayoutTextsLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing holeLayerDisplay transient property
  //····················································································································

  var holeLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.holeLayerDisplay_property.prop
    }
  }

  var holeLayerDisplay : CALayer? {
    switch holeLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing viaLayerDisplay transient property
  //····················································································································

  var viaLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.viaLayerDisplay_property.prop
    }
  }

  var viaLayerDisplay : CALayer? {
    switch viaLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontPadsDisplay transient property
  //····················································································································

  var frontPadsDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontPadsDisplay_property.prop
    }
  }

  var frontPadsDisplay : CALayer? {
    switch frontPadsDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backPadsDisplay transient property
  //····················································································································

  var backPadsDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backPadsDisplay_property.prop
    }
  }

  var backPadsDisplay : CALayer? {
    switch backPadsDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing boardLimitsDisplay transient property
  //····················································································································

  var boardLimitsDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.boardLimitsDisplay_property.prop
    }
  }

  var boardLimitsDisplay : CALayer? {
    switch boardLimitsDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backComponentNameDisplay transient property
  //····················································································································

  var backComponentNameDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backComponentNameDisplay_property.prop
    }
  }

  var backComponentNameDisplay : CALayer? {
    switch backComponentNameDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontComponentNameDisplay transient property
  //····················································································································

  var frontComponentNameDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontComponentNameDisplay_property.prop
    }
  }

  var frontComponentNameDisplay : CALayer? {
    switch frontComponentNameDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontComponentValueDisplay transient property
  //····················································································································

  var frontComponentValueDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontComponentValueDisplay_property.prop
    }
  }

  var frontComponentValueDisplay : CALayer? {
    switch frontComponentValueDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backComponentValueDisplay transient property
  //····················································································································

  var backComponentValueDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backComponentValueDisplay_property.prop
    }
  }

  var backComponentValueDisplay : CALayer? {
    switch backComponentValueDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backTracksDisplay transient property
  //····················································································································

  var backTracksDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backTracksDisplay_property.prop
    }
  }

  var backTracksDisplay : CALayer? {
    switch backTracksDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontTracksDisplay transient property
  //····················································································································

  var frontTracksDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontTracksDisplay_property.prop
    }
  }

  var frontTracksDisplay : CALayer? {
    switch frontTracksDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing frontPackagesDisplay transient property
  //····················································································································

  var frontPackagesDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.frontPackagesDisplay_property.prop
    }
  }

  var frontPackagesDisplay : CALayer? {
    switch frontPackagesDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing backPackagesDisplay transient property
  //····················································································································

  var backPackagesDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.backPackagesDisplay_property.prop
    }
  }

  var backPackagesDisplay : CALayer? {
    switch backPackagesDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing newInstanceLayerDisplay transient property
  //····················································································································

  var newInstanceLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.newInstanceLayerDisplay_property.prop
    }
  }

  var newInstanceLayerDisplay : CALayer? {
    switch newInstanceLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing instanceLayerDisplay transient property
  //····················································································································

  var instanceLayerDisplay_property_selection : EBSelection <CALayer> {
    get {
      return self.instanceLayerDisplay_property.prop
    }
  }

  var instanceLayerDisplay : CALayer? {
    switch instanceLayerDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var x_property = EBStoredProperty_Int (0)
  var y_property = EBStoredProperty_Int (0)

  //····················································································································
  //    Transient properties
  //····················································································································

  var instanceRect_property = EBTransientProperty_CanariBoardRect ()
  var boardLimitWidth_property = EBTransientProperty_Int ()
  // selectionLayer_property is declared in super entity
  var backgroundLayerDisplay_property = EBTransientProperty_CALayer ()
  var backLegendLinesLayerDisplay_property = EBTransientProperty_CALayer ()
  var frontLegendLinesLayerDisplay_property = EBTransientProperty_CALayer ()
  var frontLegendTextsLayerDisplay_property = EBTransientProperty_CALayer ()
  var frontLayoutTextsLayerDisplay_property = EBTransientProperty_CALayer ()
  var backLegendTextsLayerDisplay_property = EBTransientProperty_CALayer ()
  var backLayoutTextsLayerDisplay_property = EBTransientProperty_CALayer ()
  var holeLayerDisplay_property = EBTransientProperty_CALayer ()
  var viaLayerDisplay_property = EBTransientProperty_CALayer ()
  var frontPadsDisplay_property = EBTransientProperty_CALayer ()
  var backPadsDisplay_property = EBTransientProperty_CALayer ()
  var boardLimitsDisplay_property = EBTransientProperty_CALayer ()
  var backComponentNameDisplay_property = EBTransientProperty_CALayer ()
  var frontComponentNameDisplay_property = EBTransientProperty_CALayer ()
  var frontComponentValueDisplay_property = EBTransientProperty_CALayer ()
  var backComponentValueDisplay_property = EBTransientProperty_CALayer ()
  var backTracksDisplay_property = EBTransientProperty_CALayer ()
  var frontTracksDisplay_property = EBTransientProperty_CALayer ()
  var frontPackagesDisplay_property = EBTransientProperty_CALayer ()
  var backPackagesDisplay_property = EBTransientProperty_CALayer ()
  var newInstanceLayerDisplay_property = EBTransientProperty_CALayer ()
  var instanceLayerDisplay_property = EBTransientProperty_CALayer ()

  //····················································································································
  //    Relationships
  //····················································································································

  var myRoot_property = ToOneRelationship_MergerBoardInstance_myRoot ()
  var myRoot_property_selection : EBSelection <Bool> { return .single (self.myRoot_property.propval == nil) }
  var myModel_property = ToOneRelationship_MergerBoardInstance_myModel ()
  var myModel_property_selection : EBSelection <Bool> { return .single (self.myModel_property.propval == nil) }

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    self.instanceRect_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelWidth_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelHeight_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.myModel_property.modelWidth_property_selection, unwSelf.myModel_property.modelHeight_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (compute_MergerBoardInstance_instanceRect (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardLimitWidth_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.myModel_property.modelLimitWidth_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.myModel_property.modelLimitWidth_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MergerBoardInstance_boardLimitWidth (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.selectionLayer_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.instanceRect_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.instanceRect_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MergerBoardInstance_selectionLayer (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backgroundLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.mergerColorBackground_property_selection.kind ()
        kind &= unwSelf.instanceRect_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.mergerColorBackground_property_selection, unwSelf.instanceRect_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_MergerBoardInstance_backgroundLayerDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendLinesLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackLegendLines_property_selection.kind ()
        kind &= unwSelf.myModel_property.backLegendLinesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorBackLegendLines_property_selection, g_Preferences!.mergerBoardViewDisplayBackLegendLines_property_selection, unwSelf.myModel_property.backLegendLinesSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_backLegendLinesLayerDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendLinesLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLegendLines_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontLegendLines_property_selection.kind ()
        kind &= unwSelf.myModel_property.frontLegendLinesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorFrontLegendLines_property_selection, g_Preferences!.mergerBoardViewDisplayFrontLegendLines_property_selection, unwSelf.myModel_property.frontLegendLinesSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_frontLegendLinesLayerDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLegendTextsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontLegendTexts_property_selection.kind ()
        kind &= unwSelf.myModel_property.frontLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorFrontLegendTexts_property_selection, g_Preferences!.mergerBoardViewDisplayFrontLegendTexts_property_selection, unwSelf.myModel_property.frontLegendTextsSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_frontLegendTextsLayerDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontLayoutTextsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontLayoutTexts_property_selection.kind ()
        kind &= unwSelf.myModel_property.frontLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorFrontLayoutTexts_property_selection, g_Preferences!.mergerBoardViewDisplayFrontLayoutTexts_property_selection, unwSelf.myModel_property.frontLayoutTextsSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_frontLayoutTextsLayerDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLegendTextsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLegendTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackLegendTexts_property_selection.kind ()
        kind &= unwSelf.myModel_property.backLegendTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorBackLegendTexts_property_selection, g_Preferences!.mergerBoardViewDisplayBackLegendTexts_property_selection, unwSelf.myModel_property.backLegendTextsSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_backLegendTextsLayerDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backLayoutTextsLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackLayoutTexts_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackLayoutTexts_property_selection.kind ()
        kind &= unwSelf.myModel_property.backLayoutTextsSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorBackLayoutTexts_property_selection, g_Preferences!.mergerBoardViewDisplayBackLayoutTexts_property_selection, unwSelf.myModel_property.backLayoutTextsSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_backLayoutTextsLayerDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.holeLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorHoles_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayHoles_property_selection.kind ()
        kind &= unwSelf.myModel_property.holes_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorHoles_property_selection, g_Preferences!.mergerBoardViewDisplayHoles_property_selection, unwSelf.myModel_property.holes_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_holeLayerDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viaLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorVias_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayVias_property_selection.kind ()
        kind &= unwSelf.myModel_property.viaShapes_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorVias_property_selection, g_Preferences!.mergerBoardViewDisplayVias_property_selection, unwSelf.myModel_property.viaShapes_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_viaLayerDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPadsDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontPads_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontPads_property_selection.kind ()
        kind &= unwSelf.myModel_property.frontPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorFrontPads_property_selection, g_Preferences!.mergerBoardViewDisplayFrontPads_property_selection, unwSelf.myModel_property.frontPads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_frontPadsDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPadsDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackPads_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackPads_property_selection.kind ()
        kind &= unwSelf.myModel_property.backPads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorBackPads_property_selection, g_Preferences!.mergerBoardViewDisplayBackPads_property_selection, unwSelf.myModel_property.backPads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_backPadsDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardLimitsDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorInternalBoardLimits_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayInternalBoardLimits_property_selection.kind ()
        kind &= unwSelf.myModel_property.boardLimits_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorInternalBoardLimits_property_selection, g_Preferences!.mergerBoardViewDisplayInternalBoardLimits_property_selection, unwSelf.myModel_property.boardLimits_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_boardLimitsDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentNameDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackComponentNames_property_selection.kind ()
        kind &= unwSelf.myModel_property.backComponentNameSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorBackComponentNames_property_selection, g_Preferences!.mergerBoardViewDisplayBackComponentNames_property_selection, unwSelf.myModel_property.backComponentNameSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_backComponentNameDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentNameDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontComponentNames_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontComponentNames_property_selection.kind ()
        kind &= unwSelf.myModel_property.frontComponentNameSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorFrontComponentNames_property_selection, g_Preferences!.mergerBoardViewDisplayFrontComponentNames_property_selection, unwSelf.myModel_property.frontComponentNameSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_frontComponentNameDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontComponentValueDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontComponentValues_property_selection.kind ()
        kind &= unwSelf.myModel_property.frontComponentValueSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorFrontComponentValues_property_selection, g_Preferences!.mergerBoardViewDisplayFrontComponentValues_property_selection, unwSelf.myModel_property.frontComponentValueSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_frontComponentValueDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backComponentValueDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackComponentValues_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackComponentValues_property_selection.kind ()
        kind &= unwSelf.myModel_property.backComponentValueSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorBackComponentValues_property_selection, g_Preferences!.mergerBoardViewDisplayBackComponentValues_property_selection, unwSelf.myModel_property.backComponentValueSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_backComponentValueDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backTracksDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackTracks_property_selection.kind ()
        kind &= unwSelf.myModel_property.backTrackSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorBackTracks_property_selection, g_Preferences!.mergerBoardViewDisplayBackTracks_property_selection, unwSelf.myModel_property.backTrackSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_backTracksDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontTracksDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontTracks_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontTracks_property_selection.kind ()
        kind &= unwSelf.myModel_property.frontTrackSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorFrontTracks_property_selection, g_Preferences!.mergerBoardViewDisplayFrontTracks_property_selection, unwSelf.myModel_property.frontTrackSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_frontTracksDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.frontPackagesDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorFrontPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayFrontPackages_property_selection.kind ()
        kind &= unwSelf.myModel_property.frontPackagesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorFrontPackages_property_selection, g_Preferences!.mergerBoardViewDisplayFrontPackages_property_selection, unwSelf.myModel_property.frontPackagesSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_frontPackagesDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.backPackagesDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= g_Preferences!.mergerColorBackPackages_property_selection.kind ()
        kind &= g_Preferences!.mergerBoardViewDisplayBackPackages_property_selection.kind ()
        kind &= unwSelf.myModel_property.backPackagesSegments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, g_Preferences!.mergerColorBackPackages_property_selection, g_Preferences!.mergerBoardViewDisplayBackPackages_property_selection, unwSelf.myModel_property.backPackagesSegments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (compute_MergerBoardInstance_backPackagesDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.newInstanceLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.myRoot_property.zoom_property_selection.kind ()
        kind &= unwSelf.myModel_property.imageForInstances_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.myRoot_property.zoom_property_selection, unwSelf.myModel_property.imageForInstances_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (compute_MergerBoardInstance_newInstanceLayerDisplay (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.instanceLayerDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.backgroundLayerDisplay_property_selection.kind ()
        kind &= unwSelf.backLegendTextsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.backLayoutTextsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.frontLegendTextsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.frontLayoutTextsLayerDisplay_property_selection.kind ()
        kind &= unwSelf.holeLayerDisplay_property_selection.kind ()
        kind &= unwSelf.viaLayerDisplay_property_selection.kind ()
        kind &= unwSelf.frontPadsDisplay_property_selection.kind ()
        kind &= unwSelf.backPadsDisplay_property_selection.kind ()
        kind &= unwSelf.boardLimitsDisplay_property_selection.kind ()
        kind &= unwSelf.backComponentNameDisplay_property_selection.kind ()
        kind &= unwSelf.frontComponentNameDisplay_property_selection.kind ()
        kind &= unwSelf.frontComponentValueDisplay_property_selection.kind ()
        kind &= unwSelf.backComponentValueDisplay_property_selection.kind ()
        kind &= unwSelf.backTracksDisplay_property_selection.kind ()
        kind &= unwSelf.frontTracksDisplay_property_selection.kind ()
        kind &= unwSelf.frontPackagesDisplay_property_selection.kind ()
        kind &= unwSelf.backPackagesDisplay_property_selection.kind ()
        kind &= unwSelf.backLegendLinesLayerDisplay_property_selection.kind ()
        kind &= unwSelf.frontLegendLinesLayerDisplay_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.backgroundLayerDisplay_property_selection, unwSelf.backLegendTextsLayerDisplay_property_selection, unwSelf.backLayoutTextsLayerDisplay_property_selection, unwSelf.frontLegendTextsLayerDisplay_property_selection, unwSelf.frontLayoutTextsLayerDisplay_property_selection, unwSelf.holeLayerDisplay_property_selection, unwSelf.viaLayerDisplay_property_selection, unwSelf.frontPadsDisplay_property_selection, unwSelf.backPadsDisplay_property_selection, unwSelf.boardLimitsDisplay_property_selection, unwSelf.backComponentNameDisplay_property_selection, unwSelf.frontComponentNameDisplay_property_selection, unwSelf.frontComponentValueDisplay_property_selection, unwSelf.backComponentValueDisplay_property_selection, unwSelf.backTracksDisplay_property_selection, unwSelf.frontTracksDisplay_property_selection, unwSelf.frontPackagesDisplay_property_selection, unwSelf.backPackagesDisplay_property_selection, unwSelf.backLegendLinesLayerDisplay_property_selection, unwSelf.frontLegendLinesLayerDisplay_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16), .single (let v17), .single (let v18), .single (let v19)) :
            return .single (compute_MergerBoardInstance_instanceLayerDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--- Install property observers for transients
    self.x_property.addEBObserver (self.instanceRect_property)
    self.y_property.addEBObserver (self.instanceRect_property)
    self.myModel_property.addEBObserverOf_modelWidth (self.instanceRect_property)
    self.myModel_property.addEBObserverOf_modelHeight (self.instanceRect_property)
    self.myModel_property.addEBObserverOf_modelLimitWidth (self.boardLimitWidth_property)
    self.instanceRect_property.addEBObserver (self.selectionLayer_property)
    g_Preferences?.mergerColorBackground_property.addEBObserver (self.backgroundLayerDisplay_property)
    self.instanceRect_property.addEBObserver (self.backgroundLayerDisplay_property)
    self.x_property.addEBObserver (self.backLegendLinesLayerDisplay_property)
    self.y_property.addEBObserver (self.backLegendLinesLayerDisplay_property)
    g_Preferences?.mergerColorBackLegendLines_property.addEBObserver (self.backLegendLinesLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendLines_property.addEBObserver (self.backLegendLinesLayerDisplay_property)
    self.myModel_property.addEBObserverOf_backLegendLinesSegments (self.backLegendLinesLayerDisplay_property)
    self.x_property.addEBObserver (self.frontLegendLinesLayerDisplay_property)
    self.y_property.addEBObserver (self.frontLegendLinesLayerDisplay_property)
    g_Preferences?.mergerColorFrontLegendLines_property.addEBObserver (self.frontLegendLinesLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendLines_property.addEBObserver (self.frontLegendLinesLayerDisplay_property)
    self.myModel_property.addEBObserverOf_frontLegendLinesSegments (self.frontLegendLinesLayerDisplay_property)
    self.x_property.addEBObserver (self.frontLegendTextsLayerDisplay_property)
    self.y_property.addEBObserver (self.frontLegendTextsLayerDisplay_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.addEBObserver (self.frontLegendTextsLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendTexts_property.addEBObserver (self.frontLegendTextsLayerDisplay_property)
    self.myModel_property.addEBObserverOf_frontLegendTextsSegments (self.frontLegendTextsLayerDisplay_property)
    self.x_property.addEBObserver (self.frontLayoutTextsLayerDisplay_property)
    self.y_property.addEBObserver (self.frontLayoutTextsLayerDisplay_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.addEBObserver (self.frontLayoutTextsLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontLayoutTexts_property.addEBObserver (self.frontLayoutTextsLayerDisplay_property)
    self.myModel_property.addEBObserverOf_frontLayoutTextsSegments (self.frontLayoutTextsLayerDisplay_property)
    self.x_property.addEBObserver (self.backLegendTextsLayerDisplay_property)
    self.y_property.addEBObserver (self.backLegendTextsLayerDisplay_property)
    g_Preferences?.mergerColorBackLegendTexts_property.addEBObserver (self.backLegendTextsLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendTexts_property.addEBObserver (self.backLegendTextsLayerDisplay_property)
    self.myModel_property.addEBObserverOf_backLegendTextsSegments (self.backLegendTextsLayerDisplay_property)
    self.x_property.addEBObserver (self.backLayoutTextsLayerDisplay_property)
    self.y_property.addEBObserver (self.backLayoutTextsLayerDisplay_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.addEBObserver (self.backLayoutTextsLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackLayoutTexts_property.addEBObserver (self.backLayoutTextsLayerDisplay_property)
    self.myModel_property.addEBObserverOf_backLayoutTextsSegments (self.backLayoutTextsLayerDisplay_property)
    self.x_property.addEBObserver (self.holeLayerDisplay_property)
    self.y_property.addEBObserver (self.holeLayerDisplay_property)
    g_Preferences?.mergerColorHoles_property.addEBObserver (self.holeLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayHoles_property.addEBObserver (self.holeLayerDisplay_property)
    self.myModel_property.addEBObserverOf_holes (self.holeLayerDisplay_property)
    self.x_property.addEBObserver (self.viaLayerDisplay_property)
    self.y_property.addEBObserver (self.viaLayerDisplay_property)
    g_Preferences?.mergerColorVias_property.addEBObserver (self.viaLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayVias_property.addEBObserver (self.viaLayerDisplay_property)
    self.myModel_property.addEBObserverOf_viaShapes (self.viaLayerDisplay_property)
    self.x_property.addEBObserver (self.frontPadsDisplay_property)
    self.y_property.addEBObserver (self.frontPadsDisplay_property)
    g_Preferences?.mergerColorFrontPads_property.addEBObserver (self.frontPadsDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontPads_property.addEBObserver (self.frontPadsDisplay_property)
    self.myModel_property.addEBObserverOf_frontPads (self.frontPadsDisplay_property)
    self.x_property.addEBObserver (self.backPadsDisplay_property)
    self.y_property.addEBObserver (self.backPadsDisplay_property)
    g_Preferences?.mergerColorBackPads_property.addEBObserver (self.backPadsDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackPads_property.addEBObserver (self.backPadsDisplay_property)
    self.myModel_property.addEBObserverOf_backPads (self.backPadsDisplay_property)
    self.x_property.addEBObserver (self.boardLimitsDisplay_property)
    self.y_property.addEBObserver (self.boardLimitsDisplay_property)
    g_Preferences?.mergerColorInternalBoardLimits_property.addEBObserver (self.boardLimitsDisplay_property)
    g_Preferences?.mergerBoardViewDisplayInternalBoardLimits_property.addEBObserver (self.boardLimitsDisplay_property)
    self.myModel_property.addEBObserverOf_boardLimits (self.boardLimitsDisplay_property)
    self.x_property.addEBObserver (self.backComponentNameDisplay_property)
    self.y_property.addEBObserver (self.backComponentNameDisplay_property)
    g_Preferences?.mergerColorBackComponentNames_property.addEBObserver (self.backComponentNameDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentNames_property.addEBObserver (self.backComponentNameDisplay_property)
    self.myModel_property.addEBObserverOf_backComponentNameSegments (self.backComponentNameDisplay_property)
    self.x_property.addEBObserver (self.frontComponentNameDisplay_property)
    self.y_property.addEBObserver (self.frontComponentNameDisplay_property)
    g_Preferences?.mergerColorFrontComponentNames_property.addEBObserver (self.frontComponentNameDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentNames_property.addEBObserver (self.frontComponentNameDisplay_property)
    self.myModel_property.addEBObserverOf_frontComponentNameSegments (self.frontComponentNameDisplay_property)
    self.x_property.addEBObserver (self.frontComponentValueDisplay_property)
    self.y_property.addEBObserver (self.frontComponentValueDisplay_property)
    g_Preferences?.mergerColorFrontComponentValues_property.addEBObserver (self.frontComponentValueDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentValues_property.addEBObserver (self.frontComponentValueDisplay_property)
    self.myModel_property.addEBObserverOf_frontComponentValueSegments (self.frontComponentValueDisplay_property)
    self.x_property.addEBObserver (self.backComponentValueDisplay_property)
    self.y_property.addEBObserver (self.backComponentValueDisplay_property)
    g_Preferences?.mergerColorBackComponentValues_property.addEBObserver (self.backComponentValueDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentValues_property.addEBObserver (self.backComponentValueDisplay_property)
    self.myModel_property.addEBObserverOf_backComponentValueSegments (self.backComponentValueDisplay_property)
    self.x_property.addEBObserver (self.backTracksDisplay_property)
    self.y_property.addEBObserver (self.backTracksDisplay_property)
    g_Preferences?.mergerColorBackTracks_property.addEBObserver (self.backTracksDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackTracks_property.addEBObserver (self.backTracksDisplay_property)
    self.myModel_property.addEBObserverOf_backTrackSegments (self.backTracksDisplay_property)
    self.x_property.addEBObserver (self.frontTracksDisplay_property)
    self.y_property.addEBObserver (self.frontTracksDisplay_property)
    g_Preferences?.mergerColorFrontTracks_property.addEBObserver (self.frontTracksDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontTracks_property.addEBObserver (self.frontTracksDisplay_property)
    self.myModel_property.addEBObserverOf_frontTrackSegments (self.frontTracksDisplay_property)
    self.x_property.addEBObserver (self.frontPackagesDisplay_property)
    self.y_property.addEBObserver (self.frontPackagesDisplay_property)
    g_Preferences?.mergerColorFrontPackages_property.addEBObserver (self.frontPackagesDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontPackages_property.addEBObserver (self.frontPackagesDisplay_property)
    self.myModel_property.addEBObserverOf_frontPackagesSegments (self.frontPackagesDisplay_property)
    self.x_property.addEBObserver (self.backPackagesDisplay_property)
    self.y_property.addEBObserver (self.backPackagesDisplay_property)
    g_Preferences?.mergerColorBackPackages_property.addEBObserver (self.backPackagesDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackPackages_property.addEBObserver (self.backPackagesDisplay_property)
    self.myModel_property.addEBObserverOf_backPackagesSegments (self.backPackagesDisplay_property)
    self.x_property.addEBObserver (self.newInstanceLayerDisplay_property)
    self.y_property.addEBObserver (self.newInstanceLayerDisplay_property)
    self.myRoot_property.addEBObserverOf_zoom (self.newInstanceLayerDisplay_property)
    self.myModel_property.addEBObserverOf_imageForInstances (self.newInstanceLayerDisplay_property)
    self.backgroundLayerDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.backLegendTextsLayerDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.backLayoutTextsLayerDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.frontLegendTextsLayerDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.frontLayoutTextsLayerDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.holeLayerDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.viaLayerDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.frontPadsDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.backPadsDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.boardLimitsDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.backComponentNameDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.frontComponentNameDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.frontComponentValueDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.backComponentValueDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.backTracksDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.frontTracksDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.frontPackagesDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.backPackagesDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.backLegendLinesLayerDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
    self.frontLegendLinesLayerDisplay_property.addEBObserver (self.instanceLayerDisplay_property)
  //--- Install undoers for properties
    self.x_property.undoManager = undoManager ()
    self.y_property.undoManager = undoManager ()
  //--- Install owner for relationships
    self.myRoot_property.owner = self
    self.myModel_property.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.x_property.removeEBObserver (self.instanceRect_property)
    self.y_property.removeEBObserver (self.instanceRect_property)
    self.myModel_property.removeEBObserverOf_modelWidth (self.instanceRect_property)
    self.myModel_property.removeEBObserverOf_modelHeight (self.instanceRect_property)
    self.myModel_property.removeEBObserverOf_modelLimitWidth (self.boardLimitWidth_property)
    self.instanceRect_property.removeEBObserver (self.selectionLayer_property)
    g_Preferences?.mergerColorBackground_property.removeEBObserver (self.backgroundLayerDisplay_property)
    self.instanceRect_property.removeEBObserver (self.backgroundLayerDisplay_property)
    self.x_property.removeEBObserver (self.backLegendLinesLayerDisplay_property)
    self.y_property.removeEBObserver (self.backLegendLinesLayerDisplay_property)
    g_Preferences?.mergerColorBackLegendLines_property.removeEBObserver (self.backLegendLinesLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendLines_property.removeEBObserver (self.backLegendLinesLayerDisplay_property)
    self.myModel_property.removeEBObserverOf_backLegendLinesSegments (self.backLegendLinesLayerDisplay_property)
    self.x_property.removeEBObserver (self.frontLegendLinesLayerDisplay_property)
    self.y_property.removeEBObserver (self.frontLegendLinesLayerDisplay_property)
    g_Preferences?.mergerColorFrontLegendLines_property.removeEBObserver (self.frontLegendLinesLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendLines_property.removeEBObserver (self.frontLegendLinesLayerDisplay_property)
    self.myModel_property.removeEBObserverOf_frontLegendLinesSegments (self.frontLegendLinesLayerDisplay_property)
    self.x_property.removeEBObserver (self.frontLegendTextsLayerDisplay_property)
    self.y_property.removeEBObserver (self.frontLegendTextsLayerDisplay_property)
    g_Preferences?.mergerColorFrontLegendTexts_property.removeEBObserver (self.frontLegendTextsLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontLegendTexts_property.removeEBObserver (self.frontLegendTextsLayerDisplay_property)
    self.myModel_property.removeEBObserverOf_frontLegendTextsSegments (self.frontLegendTextsLayerDisplay_property)
    self.x_property.removeEBObserver (self.frontLayoutTextsLayerDisplay_property)
    self.y_property.removeEBObserver (self.frontLayoutTextsLayerDisplay_property)
    g_Preferences?.mergerColorFrontLayoutTexts_property.removeEBObserver (self.frontLayoutTextsLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontLayoutTexts_property.removeEBObserver (self.frontLayoutTextsLayerDisplay_property)
    self.myModel_property.removeEBObserverOf_frontLayoutTextsSegments (self.frontLayoutTextsLayerDisplay_property)
    self.x_property.removeEBObserver (self.backLegendTextsLayerDisplay_property)
    self.y_property.removeEBObserver (self.backLegendTextsLayerDisplay_property)
    g_Preferences?.mergerColorBackLegendTexts_property.removeEBObserver (self.backLegendTextsLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackLegendTexts_property.removeEBObserver (self.backLegendTextsLayerDisplay_property)
    self.myModel_property.removeEBObserverOf_backLegendTextsSegments (self.backLegendTextsLayerDisplay_property)
    self.x_property.removeEBObserver (self.backLayoutTextsLayerDisplay_property)
    self.y_property.removeEBObserver (self.backLayoutTextsLayerDisplay_property)
    g_Preferences?.mergerColorBackLayoutTexts_property.removeEBObserver (self.backLayoutTextsLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackLayoutTexts_property.removeEBObserver (self.backLayoutTextsLayerDisplay_property)
    self.myModel_property.removeEBObserverOf_backLayoutTextsSegments (self.backLayoutTextsLayerDisplay_property)
    self.x_property.removeEBObserver (self.holeLayerDisplay_property)
    self.y_property.removeEBObserver (self.holeLayerDisplay_property)
    g_Preferences?.mergerColorHoles_property.removeEBObserver (self.holeLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayHoles_property.removeEBObserver (self.holeLayerDisplay_property)
    self.myModel_property.removeEBObserverOf_holes (self.holeLayerDisplay_property)
    self.x_property.removeEBObserver (self.viaLayerDisplay_property)
    self.y_property.removeEBObserver (self.viaLayerDisplay_property)
    g_Preferences?.mergerColorVias_property.removeEBObserver (self.viaLayerDisplay_property)
    g_Preferences?.mergerBoardViewDisplayVias_property.removeEBObserver (self.viaLayerDisplay_property)
    self.myModel_property.removeEBObserverOf_viaShapes (self.viaLayerDisplay_property)
    self.x_property.removeEBObserver (self.frontPadsDisplay_property)
    self.y_property.removeEBObserver (self.frontPadsDisplay_property)
    g_Preferences?.mergerColorFrontPads_property.removeEBObserver (self.frontPadsDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontPads_property.removeEBObserver (self.frontPadsDisplay_property)
    self.myModel_property.removeEBObserverOf_frontPads (self.frontPadsDisplay_property)
    self.x_property.removeEBObserver (self.backPadsDisplay_property)
    self.y_property.removeEBObserver (self.backPadsDisplay_property)
    g_Preferences?.mergerColorBackPads_property.removeEBObserver (self.backPadsDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackPads_property.removeEBObserver (self.backPadsDisplay_property)
    self.myModel_property.removeEBObserverOf_backPads (self.backPadsDisplay_property)
    self.x_property.removeEBObserver (self.boardLimitsDisplay_property)
    self.y_property.removeEBObserver (self.boardLimitsDisplay_property)
    g_Preferences?.mergerColorInternalBoardLimits_property.removeEBObserver (self.boardLimitsDisplay_property)
    g_Preferences?.mergerBoardViewDisplayInternalBoardLimits_property.removeEBObserver (self.boardLimitsDisplay_property)
    self.myModel_property.removeEBObserverOf_boardLimits (self.boardLimitsDisplay_property)
    self.x_property.removeEBObserver (self.backComponentNameDisplay_property)
    self.y_property.removeEBObserver (self.backComponentNameDisplay_property)
    g_Preferences?.mergerColorBackComponentNames_property.removeEBObserver (self.backComponentNameDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentNames_property.removeEBObserver (self.backComponentNameDisplay_property)
    self.myModel_property.removeEBObserverOf_backComponentNameSegments (self.backComponentNameDisplay_property)
    self.x_property.removeEBObserver (self.frontComponentNameDisplay_property)
    self.y_property.removeEBObserver (self.frontComponentNameDisplay_property)
    g_Preferences?.mergerColorFrontComponentNames_property.removeEBObserver (self.frontComponentNameDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentNames_property.removeEBObserver (self.frontComponentNameDisplay_property)
    self.myModel_property.removeEBObserverOf_frontComponentNameSegments (self.frontComponentNameDisplay_property)
    self.x_property.removeEBObserver (self.frontComponentValueDisplay_property)
    self.y_property.removeEBObserver (self.frontComponentValueDisplay_property)
    g_Preferences?.mergerColorFrontComponentValues_property.removeEBObserver (self.frontComponentValueDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontComponentValues_property.removeEBObserver (self.frontComponentValueDisplay_property)
    self.myModel_property.removeEBObserverOf_frontComponentValueSegments (self.frontComponentValueDisplay_property)
    self.x_property.removeEBObserver (self.backComponentValueDisplay_property)
    self.y_property.removeEBObserver (self.backComponentValueDisplay_property)
    g_Preferences?.mergerColorBackComponentValues_property.removeEBObserver (self.backComponentValueDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackComponentValues_property.removeEBObserver (self.backComponentValueDisplay_property)
    self.myModel_property.removeEBObserverOf_backComponentValueSegments (self.backComponentValueDisplay_property)
    self.x_property.removeEBObserver (self.backTracksDisplay_property)
    self.y_property.removeEBObserver (self.backTracksDisplay_property)
    g_Preferences?.mergerColorBackTracks_property.removeEBObserver (self.backTracksDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackTracks_property.removeEBObserver (self.backTracksDisplay_property)
    self.myModel_property.removeEBObserverOf_backTrackSegments (self.backTracksDisplay_property)
    self.x_property.removeEBObserver (self.frontTracksDisplay_property)
    self.y_property.removeEBObserver (self.frontTracksDisplay_property)
    g_Preferences?.mergerColorFrontTracks_property.removeEBObserver (self.frontTracksDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontTracks_property.removeEBObserver (self.frontTracksDisplay_property)
    self.myModel_property.removeEBObserverOf_frontTrackSegments (self.frontTracksDisplay_property)
    self.x_property.removeEBObserver (self.frontPackagesDisplay_property)
    self.y_property.removeEBObserver (self.frontPackagesDisplay_property)
    g_Preferences?.mergerColorFrontPackages_property.removeEBObserver (self.frontPackagesDisplay_property)
    g_Preferences?.mergerBoardViewDisplayFrontPackages_property.removeEBObserver (self.frontPackagesDisplay_property)
    self.myModel_property.removeEBObserverOf_frontPackagesSegments (self.frontPackagesDisplay_property)
    self.x_property.removeEBObserver (self.backPackagesDisplay_property)
    self.y_property.removeEBObserver (self.backPackagesDisplay_property)
    g_Preferences?.mergerColorBackPackages_property.removeEBObserver (self.backPackagesDisplay_property)
    g_Preferences?.mergerBoardViewDisplayBackPackages_property.removeEBObserver (self.backPackagesDisplay_property)
    self.myModel_property.removeEBObserverOf_backPackagesSegments (self.backPackagesDisplay_property)
    self.x_property.removeEBObserver (self.newInstanceLayerDisplay_property)
    self.y_property.removeEBObserver (self.newInstanceLayerDisplay_property)
    self.myRoot_property.removeEBObserverOf_zoom (self.newInstanceLayerDisplay_property)
    self.myModel_property.removeEBObserverOf_imageForInstances (self.newInstanceLayerDisplay_property)
    self.backgroundLayerDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.backLegendTextsLayerDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.backLayoutTextsLayerDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.frontLegendTextsLayerDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.frontLayoutTextsLayerDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.holeLayerDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.viaLayerDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.frontPadsDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.backPadsDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.boardLimitsDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.backComponentNameDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.frontComponentNameDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.frontComponentValueDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.backComponentValueDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.backTracksDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.frontTracksDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.frontPackagesDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.backPackagesDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.backLegendLinesLayerDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
    self.frontLegendLinesLayerDisplay_property.removeEBObserver (self.instanceLayerDisplay_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "x",
      idx:self.x_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x_property.mObserverExplorer,
      valueExplorer:&self.x_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y",
      idx:self.y_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y_property.mObserverExplorer,
      valueExplorer:&self.y_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "instanceRect",
      idx:self.instanceRect_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceRect_property.mObserverExplorer,
      valueExplorer:&self.instanceRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidth",
      idx:self.boardLimitWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidth_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionLayer",
      idx:self.selectionLayer_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionLayer_property.mObserverExplorer,
      valueExplorer:&self.selectionLayer_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backgroundLayerDisplay",
      idx:self.backgroundLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backgroundLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.backgroundLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendLinesLayerDisplay",
      idx:self.backLegendLinesLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendLinesLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.backLegendLinesLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendLinesLayerDisplay",
      idx:self.frontLegendLinesLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendLinesLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontLegendLinesLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLegendTextsLayerDisplay",
      idx:self.frontLegendTextsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLegendTextsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontLegendTextsLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontLayoutTextsLayerDisplay",
      idx:self.frontLayoutTextsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontLayoutTextsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontLayoutTextsLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLegendTextsLayerDisplay",
      idx:self.backLegendTextsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLegendTextsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.backLegendTextsLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backLayoutTextsLayerDisplay",
      idx:self.backLayoutTextsLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backLayoutTextsLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.backLayoutTextsLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeLayerDisplay",
      idx:self.holeLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.holeLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaLayerDisplay",
      idx:self.viaLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.viaLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPadsDisplay",
      idx:self.frontPadsDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPadsDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontPadsDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPadsDisplay",
      idx:self.backPadsDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPadsDisplay_property.mObserverExplorer,
      valueExplorer:&self.backPadsDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitsDisplay",
      idx:self.boardLimitsDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitsDisplay_property.mObserverExplorer,
      valueExplorer:&self.boardLimitsDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentNameDisplay",
      idx:self.backComponentNameDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentNameDisplay_property.mObserverExplorer,
      valueExplorer:&self.backComponentNameDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentNameDisplay",
      idx:self.frontComponentNameDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentNameDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontComponentNameDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontComponentValueDisplay",
      idx:self.frontComponentValueDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontComponentValueDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontComponentValueDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backComponentValueDisplay",
      idx:self.backComponentValueDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backComponentValueDisplay_property.mObserverExplorer,
      valueExplorer:&self.backComponentValueDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backTracksDisplay",
      idx:self.backTracksDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backTracksDisplay_property.mObserverExplorer,
      valueExplorer:&self.backTracksDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontTracksDisplay",
      idx:self.frontTracksDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontTracksDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontTracksDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontPackagesDisplay",
      idx:self.frontPackagesDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontPackagesDisplay_property.mObserverExplorer,
      valueExplorer:&self.frontPackagesDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backPackagesDisplay",
      idx:self.backPackagesDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backPackagesDisplay_property.mObserverExplorer,
      valueExplorer:&self.backPackagesDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "newInstanceLayerDisplay",
      idx:self.newInstanceLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.newInstanceLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.newInstanceLayerDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "instanceLayerDisplay",
      idx:self.instanceLayerDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceLayerDisplay_property.mObserverExplorer,
      valueExplorer:&self.instanceLayerDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "myRoot",
      idx:self.myRoot_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.myRoot_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "myModel",
      idx:self.myModel_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.myModel_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.x_property.mObserverExplorer = nil
    self.x_property.mValueExplorer = nil
    self.y_property.mObserverExplorer = nil
    self.y_property.mValueExplorer = nil
    self.myRoot_property.mObserverExplorer = nil
    self.myRoot_property.mValueExplorer = nil
    self.myModel_property.mObserverExplorer = nil
    self.myModel_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.x_property.storeIn (dictionary: ioDictionary, forKey: "x")
    self.y_property.storeIn (dictionary: ioDictionary, forKey: "y")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.x_property.readFrom (dictionary: inDictionary, forKey:"x")
    self.y_property.readFrom (dictionary: inDictionary, forKey:"y")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    self.myRoot_property.setProp (nil) // Set relationship to nil
    self.myModel_property.setProp (nil) // Set relationship to nil
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
    self.myRoot_property.setProp (nil)
    self.myModel_property.setProp (nil)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    if let object = self.myRoot_property.propval {
      objects.append (object)
    }
    if let object = self.myModel_property.propval {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MergerBoardInstance : ReadOnlyAbstractArrayProperty <MergerBoardInstance> {

  //····················································································································
  //   Observers of 'x' stored property
  //····················································································································

  private var mObserversOf_x = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_x.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_x.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_x {
        managedObject.x_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for observer in mObserversOf_x {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y' stored property
  //····················································································································

  private var mObserversOf_y = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_y.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_y.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_y {
        managedObject.y_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for observer in mObserversOf_y {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceRect' transient property
  //····················································································································

  private var mObserversOf_instanceRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instanceRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instanceRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceRect_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceRect {
        managedObject.instanceRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceRect_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceRect {
        managedObject.instanceRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' transient property
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidth_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidth {
        managedObject.boardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidth_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidth {
        managedObject.boardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionLayer' transient property
  //····················································································································

  private var mObserversOf_selectionLayer = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionLayer (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectionLayer.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionLayer_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionLayer (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectionLayer.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionLayer_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionLayer_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectionLayer {
        managedObject.selectionLayer_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionLayer_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectionLayer {
        managedObject.selectionLayer_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backgroundLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_backgroundLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backgroundLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backgroundLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backgroundLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backgroundLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backgroundLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backgroundLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backgroundLayerDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backgroundLayerDisplay {
        managedObject.backgroundLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backgroundLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backgroundLayerDisplay {
        managedObject.backgroundLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendLinesLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_backLegendLinesLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendLinesLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendLinesLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendLinesLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendLinesLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendLinesLayerDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendLinesLayerDisplay {
        managedObject.backLegendLinesLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendLinesLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendLinesLayerDisplay {
        managedObject.backLegendLinesLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendLinesLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_frontLegendLinesLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendLinesLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendLinesLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendLinesLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendLinesLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendLinesLayerDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendLinesLayerDisplay {
        managedObject.frontLegendLinesLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendLinesLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendLinesLayerDisplay {
        managedObject.frontLegendLinesLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLegendTextsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_frontLegendTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLegendTextsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLegendTextsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLegendTextsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLegendTextsLayerDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsLayerDisplay {
        managedObject.frontLegendTextsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLegendTextsLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLegendTextsLayerDisplay {
        managedObject.frontLegendTextsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontLayoutTextsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_frontLayoutTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontLayoutTextsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontLayoutTextsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontLayoutTextsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontLayoutTextsLayerDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsLayerDisplay {
        managedObject.frontLayoutTextsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontLayoutTextsLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontLayoutTextsLayerDisplay {
        managedObject.frontLayoutTextsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLegendTextsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_backLegendTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLegendTextsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLegendTextsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLegendTextsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLegendTextsLayerDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsLayerDisplay {
        managedObject.backLegendTextsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLegendTextsLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLegendTextsLayerDisplay {
        managedObject.backLegendTextsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backLayoutTextsLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_backLayoutTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backLayoutTextsLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backLayoutTextsLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backLayoutTextsLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backLayoutTextsLayerDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsLayerDisplay {
        managedObject.backLayoutTextsLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backLayoutTextsLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backLayoutTextsLayerDisplay {
        managedObject.backLayoutTextsLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_holeLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_holeLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_holeLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeLayerDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_holeLayerDisplay {
        managedObject.holeLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_holeLayerDisplay {
        managedObject.holeLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_viaLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_viaLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_viaLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaLayerDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaLayerDisplay {
        managedObject.viaLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_viaLayerDisplay {
        managedObject.viaLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPadsDisplay' transient property
  //····················································································································

  private var mObserversOf_frontPadsDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPadsDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPadsDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPadsDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPadsDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPadsDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsDisplay {
        managedObject.frontPadsDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPadsDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPadsDisplay {
        managedObject.frontPadsDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPadsDisplay' transient property
  //····················································································································

  private var mObserversOf_backPadsDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPadsDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPadsDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPadsDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPadsDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPadsDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsDisplay {
        managedObject.backPadsDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPadsDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPadsDisplay {
        managedObject.backPadsDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitsDisplay' transient property
  //····················································································································

  private var mObserversOf_boardLimitsDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitsDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitsDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitsDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitsDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitsDisplay {
        managedObject.boardLimitsDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitsDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitsDisplay {
        managedObject.boardLimitsDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentNameDisplay' transient property
  //····················································································································

  private var mObserversOf_backComponentNameDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentNameDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentNameDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentNameDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentNameDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentNameDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameDisplay {
        managedObject.backComponentNameDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentNameDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentNameDisplay {
        managedObject.backComponentNameDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentNameDisplay' transient property
  //····················································································································

  private var mObserversOf_frontComponentNameDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentNameDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentNameDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentNameDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentNameDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentNameDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameDisplay {
        managedObject.frontComponentNameDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentNameDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentNameDisplay {
        managedObject.frontComponentNameDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontComponentValueDisplay' transient property
  //····················································································································

  private var mObserversOf_frontComponentValueDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontComponentValueDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontComponentValueDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontComponentValueDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontComponentValueDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontComponentValueDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueDisplay {
        managedObject.frontComponentValueDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontComponentValueDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontComponentValueDisplay {
        managedObject.frontComponentValueDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backComponentValueDisplay' transient property
  //····················································································································

  private var mObserversOf_backComponentValueDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backComponentValueDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backComponentValueDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backComponentValueDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backComponentValueDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backComponentValueDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueDisplay {
        managedObject.backComponentValueDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backComponentValueDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backComponentValueDisplay {
        managedObject.backComponentValueDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backTracksDisplay' transient property
  //····················································································································

  private var mObserversOf_backTracksDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backTracksDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backTracksDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracksDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backTracksDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backTracksDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backTracksDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksDisplay {
        managedObject.backTracksDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backTracksDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backTracksDisplay {
        managedObject.backTracksDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontTracksDisplay' transient property
  //····················································································································

  private var mObserversOf_frontTracksDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontTracksDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontTracksDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontTracksDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontTracksDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontTracksDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksDisplay {
        managedObject.frontTracksDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontTracksDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontTracksDisplay {
        managedObject.frontTracksDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontPackagesDisplay' transient property
  //····················································································································

  private var mObserversOf_frontPackagesDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontPackagesDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_frontPackagesDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_frontPackagesDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontPackagesDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontPackagesDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesDisplay {
        managedObject.frontPackagesDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontPackagesDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_frontPackagesDisplay {
        managedObject.frontPackagesDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backPackagesDisplay' transient property
  //····················································································································

  private var mObserversOf_backPackagesDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backPackagesDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_backPackagesDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_backPackagesDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backPackagesDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backPackagesDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesDisplay {
        managedObject.backPackagesDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backPackagesDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_backPackagesDisplay {
        managedObject.backPackagesDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'newInstanceLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_newInstanceLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_newInstanceLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_newInstanceLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.newInstanceLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_newInstanceLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_newInstanceLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.newInstanceLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_newInstanceLayerDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_newInstanceLayerDisplay {
        managedObject.newInstanceLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_newInstanceLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_newInstanceLayerDisplay {
        managedObject.newInstanceLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceLayerDisplay' transient property
  //····················································································································

  private var mObserversOf_instanceLayerDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceLayerDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instanceLayerDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceLayerDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceLayerDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instanceLayerDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceLayerDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceLayerDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceLayerDisplay {
        managedObject.instanceLayerDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceLayerDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceLayerDisplay {
        managedObject.instanceLayerDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MergerBoardInstance : ReadOnlyArrayOf_MergerBoardInstance {

  var readModelFunction : Optional<() -> EBSelection < [MergerBoardInstance] > >

  private var prop_cache : EBSelection < [MergerBoardInstance] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <MergerBoardInstance> ()

  override var prop : EBSelection < [MergerBoardInstance] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <MergerBoardInstance>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <MergerBoardInstance> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_x_fromElementsOfSet (removedSet)
        removeEBObserversOf_y_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_instanceRect_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_selectionLayer_fromElementsOfSet (removedSet)
        removeEBObserversOf_backgroundLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendLinesLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendLinesLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLegendTextsLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontLayoutTextsLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLegendTextsLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backLayoutTextsLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_holeLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_viaLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPadsDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPadsDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitsDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentNameDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentNameDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontComponentValueDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backComponentValueDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backTracksDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontTracksDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_frontPackagesDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_backPackagesDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_newInstanceLayerDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_instanceLayerDisplay_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_x_toElementsOfSet (addedSet)
        addEBObserversOf_y_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_instanceRect_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitWidth_toElementsOfSet (addedSet)
        addEBObserversOf_selectionLayer_toElementsOfSet (addedSet)
        addEBObserversOf_backgroundLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendLinesLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendLinesLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontLegendTextsLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontLayoutTextsLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backLegendTextsLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backLayoutTextsLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_holeLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_viaLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontPadsDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backPadsDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitsDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentNameDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentNameDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontComponentValueDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backComponentValueDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backTracksDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontTracksDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_frontPackagesDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_backPackagesDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_newInstanceLayerDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_instanceLayerDisplay_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_x : class {
  var x : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_y : class {
  var y : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_instanceRect : class {
  var instanceRect : CanariBoardRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_boardLimitWidth : class {
  var boardLimitWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_selectionLayer : class {
  var selectionLayer : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_backgroundLayerDisplay : class {
  var backgroundLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_backLegendLinesLayerDisplay : class {
  var backLegendLinesLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_frontLegendLinesLayerDisplay : class {
  var frontLegendLinesLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_frontLegendTextsLayerDisplay : class {
  var frontLegendTextsLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_frontLayoutTextsLayerDisplay : class {
  var frontLayoutTextsLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_backLegendTextsLayerDisplay : class {
  var backLegendTextsLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_backLayoutTextsLayerDisplay : class {
  var backLayoutTextsLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_holeLayerDisplay : class {
  var holeLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_viaLayerDisplay : class {
  var viaLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_frontPadsDisplay : class {
  var frontPadsDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_backPadsDisplay : class {
  var backPadsDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_boardLimitsDisplay : class {
  var boardLimitsDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_backComponentNameDisplay : class {
  var backComponentNameDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_frontComponentNameDisplay : class {
  var frontComponentNameDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_frontComponentValueDisplay : class {
  var frontComponentValueDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_backComponentValueDisplay : class {
  var backComponentValueDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_backTracksDisplay : class {
  var backTracksDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_frontTracksDisplay : class {
  var frontTracksDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_frontPackagesDisplay : class {
  var frontPackagesDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_backPackagesDisplay : class {
  var backPackagesDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_newInstanceLayerDisplay : class {
  var newInstanceLayerDisplay : CALayer? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_instanceLayerDisplay : class {
  var instanceLayerDisplay : CALayer? { get }
}


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: myRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_MergerBoardInstance_myRoot : EBAbstractProperty {
  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : MergerBoardInstance? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : MergerRoot? {
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.boardInstances_property.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          unwrappedValue.boardInstances_property.add (unwrappedOwner)
        }
      //--- Remove property observers of old object
        oldValue?.artworkName_property.removeEBObserversFrom (mObserversOf_artworkName)
        oldValue?.boardHeight_property.removeEBObserversFrom (mObserversOf_boardHeight)
        oldValue?.boardHeightUnit_property.removeEBObserversFrom (mObserversOf_boardHeightUnit)
        oldValue?.boardLimitWidth_property.removeEBObserversFrom (mObserversOf_boardLimitWidth)
        oldValue?.boardLimitWidthUnit_property.removeEBObserversFrom (mObserversOf_boardLimitWidthUnit)
        oldValue?.boardLimitsLayerDisplay_property.removeEBObserversFrom (mObserversOf_boardLimitsLayerDisplay)
        oldValue?.boardRect_property.removeEBObserversFrom (mObserversOf_boardRect)
        oldValue?.boardWidth_property.removeEBObserversFrom (mObserversOf_boardWidth)
        oldValue?.boardWidthUnit_property.removeEBObserversFrom (mObserversOf_boardWidthUnit)
        oldValue?.generateGerberProductFile_property.removeEBObserversFrom (mObserversOf_generateGerberProductFile)
        oldValue?.generatePDFProductFile_property.removeEBObserversFrom (mObserversOf_generatePDFProductFile)
        oldValue?.generatedBoardArchiveFormat_property.removeEBObserversFrom (mObserversOf_generatedBoardArchiveFormat)
        oldValue?.instancesLayerDisplay_property.removeEBObserversFrom (mObserversOf_instancesLayerDisplay)
        oldValue?.modelNames_property.removeEBObserversFrom (mObserversOf_modelNames)
        oldValue?.overlapingArrangment_property.removeEBObserversFrom (mObserversOf_overlapingArrangment)
        oldValue?.selectedBoardXUnit_property.removeEBObserversFrom (mObserversOf_selectedBoardXUnit)
        oldValue?.selectedBoardYUnit_property.removeEBObserversFrom (mObserversOf_selectedBoardYUnit)
        oldValue?.selectedPageIndex_property.removeEBObserversFrom (mObserversOf_selectedPageIndex)
        oldValue?.zoom_property.removeEBObserversFrom (mObserversOf_zoom)
      //--- Add property observers to new object
        mValue?.artworkName_property.addEBObserversFrom (mObserversOf_artworkName)
        mValue?.boardHeight_property.addEBObserversFrom (mObserversOf_boardHeight)
        mValue?.boardHeightUnit_property.addEBObserversFrom (mObserversOf_boardHeightUnit)
        mValue?.boardLimitWidth_property.addEBObserversFrom (mObserversOf_boardLimitWidth)
        mValue?.boardLimitWidthUnit_property.addEBObserversFrom (mObserversOf_boardLimitWidthUnit)
        mValue?.boardLimitsLayerDisplay_property.addEBObserversFrom (mObserversOf_boardLimitsLayerDisplay)
        mValue?.boardRect_property.addEBObserversFrom (mObserversOf_boardRect)
        mValue?.boardWidth_property.addEBObserversFrom (mObserversOf_boardWidth)
        mValue?.boardWidthUnit_property.addEBObserversFrom (mObserversOf_boardWidthUnit)
        mValue?.generateGerberProductFile_property.addEBObserversFrom (mObserversOf_generateGerberProductFile)
        mValue?.generatePDFProductFile_property.addEBObserversFrom (mObserversOf_generatePDFProductFile)
        mValue?.generatedBoardArchiveFormat_property.addEBObserversFrom (mObserversOf_generatedBoardArchiveFormat)
        mValue?.instancesLayerDisplay_property.addEBObserversFrom (mObserversOf_instancesLayerDisplay)
        mValue?.modelNames_property.addEBObserversFrom (mObserversOf_modelNames)
        mValue?.overlapingArrangment_property.addEBObserversFrom (mObserversOf_overlapingArrangment)
        mValue?.selectedBoardXUnit_property.addEBObserversFrom (mObserversOf_selectedBoardXUnit)
        mValue?.selectedBoardYUnit_property.addEBObserversFrom (mObserversOf_selectedBoardYUnit)
        mValue?.selectedPageIndex_property.addEBObserversFrom (mObserversOf_selectedPageIndex)
        mValue?.zoom_property.addEBObserversFrom (mObserversOf_zoom)
       //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : MergerRoot? { get { return mValue } }

  var prop : EBSelection <MergerRoot?> { get { return .single (mValue) } }

  func setProp (_ value : MergerRoot?) { mValue = value }

  //····················································································································

  func performUndo (_ oldValue : MergerRoot?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MergerRoot) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : MergerRoot) {
    mValue = object
  }

  //····················································································································
  //   Observable property: artworkName
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  var artworkName_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.artworkName_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    mObserversOf_artworkName.insert (inObserver)
    if let object = self.propval {
      object.artworkName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    mObserversOf_artworkName.remove (inObserver)
    if let object = self.propval {
      object.artworkName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardHeight
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  var boardHeight_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardHeight_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    mObserversOf_boardHeight.insert (inObserver)
    if let object = self.propval {
      object.boardHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    mObserversOf_boardHeight.remove (inObserver)
    if let object = self.propval {
      object.boardHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardHeightUnit
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  var boardHeightUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardHeightUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    mObserversOf_boardHeightUnit.insert (inObserver)
    if let object = self.propval {
      object.boardHeightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    mObserversOf_boardHeightUnit.remove (inObserver)
    if let object = self.propval {
      object.boardHeightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitWidth
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  var boardLimitWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_boardLimitWidth.insert (inObserver)
    if let object = self.propval {
      object.boardLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_boardLimitWidth.remove (inObserver)
    if let object = self.propval {
      object.boardLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitWidthUnit
  //····················································································································

  private var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  var boardLimitWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_boardLimitWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.boardLimitWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_boardLimitWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.boardLimitWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitsLayerDisplay
  //····················································································································

  private var mObserversOf_boardLimitsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var boardLimitsLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitsLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_boardLimitsLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.boardLimitsLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_boardLimitsLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.boardLimitsLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardRect
  //····················································································································

  private var mObserversOf_boardRect = EBWeakEventSet ()

  //····················································································································

  var boardRect_property_selection : EBSelection <CanariBoardRect?> {
    get {
      if let model = self.propval {
        switch (model.boardRect_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardRect (_ inObserver : EBEvent) {
    mObserversOf_boardRect.insert (inObserver)
    if let object = self.propval {
      object.boardRect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardRect (_ inObserver : EBEvent) {
    mObserversOf_boardRect.remove (inObserver)
    if let object = self.propval {
      object.boardRect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardWidth
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  var boardWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    mObserversOf_boardWidth.insert (inObserver)
    if let object = self.propval {
      object.boardWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    mObserversOf_boardWidth.remove (inObserver)
    if let object = self.propval {
      object.boardWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardWidthUnit
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  var boardWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_boardWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.boardWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_boardWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.boardWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: generateGerberProductFile
  //····················································································································

  private var mObserversOf_generateGerberProductFile = EBWeakEventSet ()

  //····················································································································

  var generateGerberProductFile_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.generateGerberProductFile_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    mObserversOf_generateGerberProductFile.insert (inObserver)
    if let object = self.propval {
      object.generateGerberProductFile_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    mObserversOf_generateGerberProductFile.remove (inObserver)
    if let object = self.propval {
      object.generateGerberProductFile_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: generatePDFProductFile
  //····················································································································

  private var mObserversOf_generatePDFProductFile = EBWeakEventSet ()

  //····················································································································

  var generatePDFProductFile_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.generatePDFProductFile_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    mObserversOf_generatePDFProductFile.insert (inObserver)
    if let object = self.propval {
      object.generatePDFProductFile_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    mObserversOf_generatePDFProductFile.remove (inObserver)
    if let object = self.propval {
      object.generatePDFProductFile_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: generatedBoardArchiveFormat
  //····················································································································

  private var mObserversOf_generatedBoardArchiveFormat = EBWeakEventSet ()

  //····················································································································

  var generatedBoardArchiveFormat_property_selection : EBSelection <BoardArchiveFormat?> {
    get {
      if let model = self.propval {
        switch (model.generatedBoardArchiveFormat_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    mObserversOf_generatedBoardArchiveFormat.insert (inObserver)
    if let object = self.propval {
      object.generatedBoardArchiveFormat_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    mObserversOf_generatedBoardArchiveFormat.remove (inObserver)
    if let object = self.propval {
      object.generatedBoardArchiveFormat_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: instancesLayerDisplay
  //····················································································································

  private var mObserversOf_instancesLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var instancesLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.instancesLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_instancesLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_instancesLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.instancesLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_instancesLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_instancesLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.instancesLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelNames
  //····················································································································

  private var mObserversOf_modelNames = EBWeakEventSet ()

  //····················································································································

  var modelNames_property_selection : EBSelection <MergerBoardModelArray?> {
    get {
      if let model = self.propval {
        switch (model.modelNames_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelNames (_ inObserver : EBEvent) {
    mObserversOf_modelNames.insert (inObserver)
    if let object = self.propval {
      object.modelNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelNames (_ inObserver : EBEvent) {
    mObserversOf_modelNames.remove (inObserver)
    if let object = self.propval {
      object.modelNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: overlapingArrangment
  //····················································································································

  private var mObserversOf_overlapingArrangment = EBWeakEventSet ()

  //····················································································································

  var overlapingArrangment_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.overlapingArrangment_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    mObserversOf_overlapingArrangment.insert (inObserver)
    if let object = self.propval {
      object.overlapingArrangment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    mObserversOf_overlapingArrangment.remove (inObserver)
    if let object = self.propval {
      object.overlapingArrangment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedBoardXUnit
  //····················································································································

  private var mObserversOf_selectedBoardXUnit = EBWeakEventSet ()

  //····················································································································

  var selectedBoardXUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.selectedBoardXUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    mObserversOf_selectedBoardXUnit.insert (inObserver)
    if let object = self.propval {
      object.selectedBoardXUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    mObserversOf_selectedBoardXUnit.remove (inObserver)
    if let object = self.propval {
      object.selectedBoardXUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedBoardYUnit
  //····················································································································

  private var mObserversOf_selectedBoardYUnit = EBWeakEventSet ()

  //····················································································································

  var selectedBoardYUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.selectedBoardYUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    mObserversOf_selectedBoardYUnit.insert (inObserver)
    if let object = self.propval {
      object.selectedBoardYUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    mObserversOf_selectedBoardYUnit.remove (inObserver)
    if let object = self.propval {
      object.selectedBoardYUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedPageIndex
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.selectedPageIndex_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    mObserversOf_selectedPageIndex.insert (inObserver)
    if let object = self.propval {
      object.selectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    mObserversOf_selectedPageIndex.remove (inObserver)
    if let object = self.propval {
      object.selectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: zoom
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  var zoom_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.zoom_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    mObserversOf_zoom.insert (inObserver)
    if let object = self.propval {
      object.zoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    mObserversOf_zoom.remove (inObserver)
    if let object = self.propval {
      object.zoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: myModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_MergerBoardInstance_myModel : EBAbstractProperty {
  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : MergerBoardInstance? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : BoardModel? {
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.myInstances_property.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          unwrappedValue.myInstances_property.add (unwrappedOwner)
        }
      //--- Remove property observers of old object
        oldValue?.artworkName_property.removeEBObserversFrom (mObserversOf_artworkName)
        oldValue?.backComponentNameDisplay_property.removeEBObserversFrom (mObserversOf_backComponentNameDisplay)
        oldValue?.backComponentNameSegments_property.removeEBObserversFrom (mObserversOf_backComponentNameSegments)
        oldValue?.backComponentNamesBezierPaths_property.removeEBObserversFrom (mObserversOf_backComponentNamesBezierPaths)
        oldValue?.backComponentValueDisplay_property.removeEBObserversFrom (mObserversOf_backComponentValueDisplay)
        oldValue?.backComponentValueSegments_property.removeEBObserversFrom (mObserversOf_backComponentValueSegments)
        oldValue?.backComponentValuesBezierPaths_property.removeEBObserversFrom (mObserversOf_backComponentValuesBezierPaths)
        oldValue?.backLayoutTextsBezierPaths_property.removeEBObserversFrom (mObserversOf_backLayoutTextsBezierPaths)
        oldValue?.backLayoutTextsLayerDisplay_property.removeEBObserversFrom (mObserversOf_backLayoutTextsLayerDisplay)
        oldValue?.backLayoutTextsSegments_property.removeEBObserversFrom (mObserversOf_backLayoutTextsSegments)
        oldValue?.backLegendLinesBezierPaths_property.removeEBObserversFrom (mObserversOf_backLegendLinesBezierPaths)
        oldValue?.backLegendLinesLayerDisplay_property.removeEBObserversFrom (mObserversOf_backLegendLinesLayerDisplay)
        oldValue?.backLegendLinesSegments_property.removeEBObserversFrom (mObserversOf_backLegendLinesSegments)
        oldValue?.backLegendTextsBezierPaths_property.removeEBObserversFrom (mObserversOf_backLegendTextsBezierPaths)
        oldValue?.backLegendTextsLayerDisplay_property.removeEBObserversFrom (mObserversOf_backLegendTextsLayerDisplay)
        oldValue?.backLegendTextsSegments_property.removeEBObserversFrom (mObserversOf_backLegendTextsSegments)
        oldValue?.backPackagesBezierPaths_property.removeEBObserversFrom (mObserversOf_backPackagesBezierPaths)
        oldValue?.backPackagesDisplay_property.removeEBObserversFrom (mObserversOf_backPackagesDisplay)
        oldValue?.backPackagesSegments_property.removeEBObserversFrom (mObserversOf_backPackagesSegments)
        oldValue?.backPads_property.removeEBObserversFrom (mObserversOf_backPads)
        oldValue?.backPadsBezierPaths_property.removeEBObserversFrom (mObserversOf_backPadsBezierPaths)
        oldValue?.backPadsDisplay_property.removeEBObserversFrom (mObserversOf_backPadsDisplay)
        oldValue?.backTrackSegments_property.removeEBObserversFrom (mObserversOf_backTrackSegments)
        oldValue?.backTracksBezierPaths_property.removeEBObserversFrom (mObserversOf_backTracksBezierPaths)
        oldValue?.backTracksDisplay_property.removeEBObserversFrom (mObserversOf_backTracksDisplay)
        oldValue?.backgroundLayerDisplay_property.removeEBObserversFrom (mObserversOf_backgroundLayerDisplay)
        oldValue?.boardLimits_property.removeEBObserversFrom (mObserversOf_boardLimits)
        oldValue?.boardLimitsBezierPaths_property.removeEBObserversFrom (mObserversOf_boardLimitsBezierPaths)
        oldValue?.boardLimitsDisplay_property.removeEBObserversFrom (mObserversOf_boardLimitsDisplay)
        oldValue?.frontComponentNameDisplay_property.removeEBObserversFrom (mObserversOf_frontComponentNameDisplay)
        oldValue?.frontComponentNameSegments_property.removeEBObserversFrom (mObserversOf_frontComponentNameSegments)
        oldValue?.frontComponentNamesBezierPaths_property.removeEBObserversFrom (mObserversOf_frontComponentNamesBezierPaths)
        oldValue?.frontComponentValueDisplay_property.removeEBObserversFrom (mObserversOf_frontComponentValueDisplay)
        oldValue?.frontComponentValueSegments_property.removeEBObserversFrom (mObserversOf_frontComponentValueSegments)
        oldValue?.frontComponentValuesBezierPaths_property.removeEBObserversFrom (mObserversOf_frontComponentValuesBezierPaths)
        oldValue?.frontLayoutTextsBezierPaths_property.removeEBObserversFrom (mObserversOf_frontLayoutTextsBezierPaths)
        oldValue?.frontLayoutTextsLayerDisplay_property.removeEBObserversFrom (mObserversOf_frontLayoutTextsLayerDisplay)
        oldValue?.frontLayoutTextsSegments_property.removeEBObserversFrom (mObserversOf_frontLayoutTextsSegments)
        oldValue?.frontLegendLinesBezierPaths_property.removeEBObserversFrom (mObserversOf_frontLegendLinesBezierPaths)
        oldValue?.frontLegendLinesLayerDisplay_property.removeEBObserversFrom (mObserversOf_frontLegendLinesLayerDisplay)
        oldValue?.frontLegendLinesSegments_property.removeEBObserversFrom (mObserversOf_frontLegendLinesSegments)
        oldValue?.frontLegendTextsBezierPaths_property.removeEBObserversFrom (mObserversOf_frontLegendTextsBezierPaths)
        oldValue?.frontLegendTextsLayerDisplay_property.removeEBObserversFrom (mObserversOf_frontLegendTextsLayerDisplay)
        oldValue?.frontLegendTextsSegments_property.removeEBObserversFrom (mObserversOf_frontLegendTextsSegments)
        oldValue?.frontPackagesBezierPaths_property.removeEBObserversFrom (mObserversOf_frontPackagesBezierPaths)
        oldValue?.frontPackagesDisplay_property.removeEBObserversFrom (mObserversOf_frontPackagesDisplay)
        oldValue?.frontPackagesSegments_property.removeEBObserversFrom (mObserversOf_frontPackagesSegments)
        oldValue?.frontPads_property.removeEBObserversFrom (mObserversOf_frontPads)
        oldValue?.frontPadsBezierPaths_property.removeEBObserversFrom (mObserversOf_frontPadsBezierPaths)
        oldValue?.frontPadsDisplay_property.removeEBObserversFrom (mObserversOf_frontPadsDisplay)
        oldValue?.frontTrackSegments_property.removeEBObserversFrom (mObserversOf_frontTrackSegments)
        oldValue?.frontTracksBezierPaths_property.removeEBObserversFrom (mObserversOf_frontTracksBezierPaths)
        oldValue?.frontTracksDisplay_property.removeEBObserversFrom (mObserversOf_frontTracksDisplay)
        oldValue?.holeLayerDisplay_property.removeEBObserversFrom (mObserversOf_holeLayerDisplay)
        oldValue?.holes_property.removeEBObserversFrom (mObserversOf_holes)
        oldValue?.holesBezierPaths_property.removeEBObserversFrom (mObserversOf_holesBezierPaths)
        oldValue?.imageForInstances_property.removeEBObserversFrom (mObserversOf_imageForInstances)
        oldValue?.instanceCount_property.removeEBObserversFrom (mObserversOf_instanceCount)
        oldValue?.modelHeight_property.removeEBObserversFrom (mObserversOf_modelHeight)
        oldValue?.modelHeightUnit_property.removeEBObserversFrom (mObserversOf_modelHeightUnit)
        oldValue?.modelLayerDisplay_property.removeEBObserversFrom (mObserversOf_modelLayerDisplay)
        oldValue?.modelLimitWidth_property.removeEBObserversFrom (mObserversOf_modelLimitWidth)
        oldValue?.modelLimitWidthUnit_property.removeEBObserversFrom (mObserversOf_modelLimitWidthUnit)
        oldValue?.modelWidth_property.removeEBObserversFrom (mObserversOf_modelWidth)
        oldValue?.modelWidthUnit_property.removeEBObserversFrom (mObserversOf_modelWidthUnit)
        oldValue?.name_property.removeEBObserversFrom (mObserversOf_name)
        oldValue?.padsHoles_property.removeEBObserversFrom (mObserversOf_padsHoles)
        oldValue?.viaLayerDisplay_property.removeEBObserversFrom (mObserversOf_viaLayerDisplay)
        oldValue?.viaShapes_property.removeEBObserversFrom (mObserversOf_viaShapes)
        oldValue?.viasBezierPaths_property.removeEBObserversFrom (mObserversOf_viasBezierPaths)
        oldValue?.viasHoles_property.removeEBObserversFrom (mObserversOf_viasHoles)
        oldValue?.zoom_property.removeEBObserversFrom (mObserversOf_zoom)
      //--- Add property observers to new object
        mValue?.artworkName_property.addEBObserversFrom (mObserversOf_artworkName)
        mValue?.backComponentNameDisplay_property.addEBObserversFrom (mObserversOf_backComponentNameDisplay)
        mValue?.backComponentNameSegments_property.addEBObserversFrom (mObserversOf_backComponentNameSegments)
        mValue?.backComponentNamesBezierPaths_property.addEBObserversFrom (mObserversOf_backComponentNamesBezierPaths)
        mValue?.backComponentValueDisplay_property.addEBObserversFrom (mObserversOf_backComponentValueDisplay)
        mValue?.backComponentValueSegments_property.addEBObserversFrom (mObserversOf_backComponentValueSegments)
        mValue?.backComponentValuesBezierPaths_property.addEBObserversFrom (mObserversOf_backComponentValuesBezierPaths)
        mValue?.backLayoutTextsBezierPaths_property.addEBObserversFrom (mObserversOf_backLayoutTextsBezierPaths)
        mValue?.backLayoutTextsLayerDisplay_property.addEBObserversFrom (mObserversOf_backLayoutTextsLayerDisplay)
        mValue?.backLayoutTextsSegments_property.addEBObserversFrom (mObserversOf_backLayoutTextsSegments)
        mValue?.backLegendLinesBezierPaths_property.addEBObserversFrom (mObserversOf_backLegendLinesBezierPaths)
        mValue?.backLegendLinesLayerDisplay_property.addEBObserversFrom (mObserversOf_backLegendLinesLayerDisplay)
        mValue?.backLegendLinesSegments_property.addEBObserversFrom (mObserversOf_backLegendLinesSegments)
        mValue?.backLegendTextsBezierPaths_property.addEBObserversFrom (mObserversOf_backLegendTextsBezierPaths)
        mValue?.backLegendTextsLayerDisplay_property.addEBObserversFrom (mObserversOf_backLegendTextsLayerDisplay)
        mValue?.backLegendTextsSegments_property.addEBObserversFrom (mObserversOf_backLegendTextsSegments)
        mValue?.backPackagesBezierPaths_property.addEBObserversFrom (mObserversOf_backPackagesBezierPaths)
        mValue?.backPackagesDisplay_property.addEBObserversFrom (mObserversOf_backPackagesDisplay)
        mValue?.backPackagesSegments_property.addEBObserversFrom (mObserversOf_backPackagesSegments)
        mValue?.backPads_property.addEBObserversFrom (mObserversOf_backPads)
        mValue?.backPadsBezierPaths_property.addEBObserversFrom (mObserversOf_backPadsBezierPaths)
        mValue?.backPadsDisplay_property.addEBObserversFrom (mObserversOf_backPadsDisplay)
        mValue?.backTrackSegments_property.addEBObserversFrom (mObserversOf_backTrackSegments)
        mValue?.backTracksBezierPaths_property.addEBObserversFrom (mObserversOf_backTracksBezierPaths)
        mValue?.backTracksDisplay_property.addEBObserversFrom (mObserversOf_backTracksDisplay)
        mValue?.backgroundLayerDisplay_property.addEBObserversFrom (mObserversOf_backgroundLayerDisplay)
        mValue?.boardLimits_property.addEBObserversFrom (mObserversOf_boardLimits)
        mValue?.boardLimitsBezierPaths_property.addEBObserversFrom (mObserversOf_boardLimitsBezierPaths)
        mValue?.boardLimitsDisplay_property.addEBObserversFrom (mObserversOf_boardLimitsDisplay)
        mValue?.frontComponentNameDisplay_property.addEBObserversFrom (mObserversOf_frontComponentNameDisplay)
        mValue?.frontComponentNameSegments_property.addEBObserversFrom (mObserversOf_frontComponentNameSegments)
        mValue?.frontComponentNamesBezierPaths_property.addEBObserversFrom (mObserversOf_frontComponentNamesBezierPaths)
        mValue?.frontComponentValueDisplay_property.addEBObserversFrom (mObserversOf_frontComponentValueDisplay)
        mValue?.frontComponentValueSegments_property.addEBObserversFrom (mObserversOf_frontComponentValueSegments)
        mValue?.frontComponentValuesBezierPaths_property.addEBObserversFrom (mObserversOf_frontComponentValuesBezierPaths)
        mValue?.frontLayoutTextsBezierPaths_property.addEBObserversFrom (mObserversOf_frontLayoutTextsBezierPaths)
        mValue?.frontLayoutTextsLayerDisplay_property.addEBObserversFrom (mObserversOf_frontLayoutTextsLayerDisplay)
        mValue?.frontLayoutTextsSegments_property.addEBObserversFrom (mObserversOf_frontLayoutTextsSegments)
        mValue?.frontLegendLinesBezierPaths_property.addEBObserversFrom (mObserversOf_frontLegendLinesBezierPaths)
        mValue?.frontLegendLinesLayerDisplay_property.addEBObserversFrom (mObserversOf_frontLegendLinesLayerDisplay)
        mValue?.frontLegendLinesSegments_property.addEBObserversFrom (mObserversOf_frontLegendLinesSegments)
        mValue?.frontLegendTextsBezierPaths_property.addEBObserversFrom (mObserversOf_frontLegendTextsBezierPaths)
        mValue?.frontLegendTextsLayerDisplay_property.addEBObserversFrom (mObserversOf_frontLegendTextsLayerDisplay)
        mValue?.frontLegendTextsSegments_property.addEBObserversFrom (mObserversOf_frontLegendTextsSegments)
        mValue?.frontPackagesBezierPaths_property.addEBObserversFrom (mObserversOf_frontPackagesBezierPaths)
        mValue?.frontPackagesDisplay_property.addEBObserversFrom (mObserversOf_frontPackagesDisplay)
        mValue?.frontPackagesSegments_property.addEBObserversFrom (mObserversOf_frontPackagesSegments)
        mValue?.frontPads_property.addEBObserversFrom (mObserversOf_frontPads)
        mValue?.frontPadsBezierPaths_property.addEBObserversFrom (mObserversOf_frontPadsBezierPaths)
        mValue?.frontPadsDisplay_property.addEBObserversFrom (mObserversOf_frontPadsDisplay)
        mValue?.frontTrackSegments_property.addEBObserversFrom (mObserversOf_frontTrackSegments)
        mValue?.frontTracksBezierPaths_property.addEBObserversFrom (mObserversOf_frontTracksBezierPaths)
        mValue?.frontTracksDisplay_property.addEBObserversFrom (mObserversOf_frontTracksDisplay)
        mValue?.holeLayerDisplay_property.addEBObserversFrom (mObserversOf_holeLayerDisplay)
        mValue?.holes_property.addEBObserversFrom (mObserversOf_holes)
        mValue?.holesBezierPaths_property.addEBObserversFrom (mObserversOf_holesBezierPaths)
        mValue?.imageForInstances_property.addEBObserversFrom (mObserversOf_imageForInstances)
        mValue?.instanceCount_property.addEBObserversFrom (mObserversOf_instanceCount)
        mValue?.modelHeight_property.addEBObserversFrom (mObserversOf_modelHeight)
        mValue?.modelHeightUnit_property.addEBObserversFrom (mObserversOf_modelHeightUnit)
        mValue?.modelLayerDisplay_property.addEBObserversFrom (mObserversOf_modelLayerDisplay)
        mValue?.modelLimitWidth_property.addEBObserversFrom (mObserversOf_modelLimitWidth)
        mValue?.modelLimitWidthUnit_property.addEBObserversFrom (mObserversOf_modelLimitWidthUnit)
        mValue?.modelWidth_property.addEBObserversFrom (mObserversOf_modelWidth)
        mValue?.modelWidthUnit_property.addEBObserversFrom (mObserversOf_modelWidthUnit)
        mValue?.name_property.addEBObserversFrom (mObserversOf_name)
        mValue?.padsHoles_property.addEBObserversFrom (mObserversOf_padsHoles)
        mValue?.viaLayerDisplay_property.addEBObserversFrom (mObserversOf_viaLayerDisplay)
        mValue?.viaShapes_property.addEBObserversFrom (mObserversOf_viaShapes)
        mValue?.viasBezierPaths_property.addEBObserversFrom (mObserversOf_viasBezierPaths)
        mValue?.viasHoles_property.addEBObserversFrom (mObserversOf_viasHoles)
        mValue?.zoom_property.addEBObserversFrom (mObserversOf_zoom)
       //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : BoardModel? { get { return mValue } }

  var prop : EBSelection <BoardModel?> { get { return .single (mValue) } }

  func setProp (_ value : BoardModel?) { mValue = value }

  //····················································································································

  func performUndo (_ oldValue : BoardModel?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModel) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : BoardModel) {
    mValue = object
  }

  //····················································································································
  //   Observable property: artworkName
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  var artworkName_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.artworkName_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    mObserversOf_artworkName.insert (inObserver)
    if let object = self.propval {
      object.artworkName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    mObserversOf_artworkName.remove (inObserver)
    if let object = self.propval {
      object.artworkName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentNameDisplay
  //····················································································································

  private var mObserversOf_backComponentNameDisplay = EBWeakEventSet ()

  //····················································································································

  var backComponentNameDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backComponentNameDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentNameDisplay (_ inObserver : EBEvent) {
    mObserversOf_backComponentNameDisplay.insert (inObserver)
    if let object = self.propval {
      object.backComponentNameDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameDisplay (_ inObserver : EBEvent) {
    mObserversOf_backComponentNameDisplay.remove (inObserver)
    if let object = self.propval {
      object.backComponentNameDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentNameSegments
  //····················································································································

  private var mObserversOf_backComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  var backComponentNameSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentNameSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    mObserversOf_backComponentNameSegments.insert (inObserver)
    if let object = self.propval {
      object.backComponentNameSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    mObserversOf_backComponentNameSegments.remove (inObserver)
    if let object = self.propval {
      object.backComponentNameSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentNamesBezierPaths
  //····················································································································

  private var mObserversOf_backComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentNamesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backComponentNamesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backComponentNamesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backComponentNamesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backComponentNamesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentValueDisplay
  //····················································································································

  private var mObserversOf_backComponentValueDisplay = EBWeakEventSet ()

  //····················································································································

  var backComponentValueDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backComponentValueDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentValueDisplay (_ inObserver : EBEvent) {
    mObserversOf_backComponentValueDisplay.insert (inObserver)
    if let object = self.propval {
      object.backComponentValueDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueDisplay (_ inObserver : EBEvent) {
    mObserversOf_backComponentValueDisplay.remove (inObserver)
    if let object = self.propval {
      object.backComponentValueDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentValueSegments
  //····················································································································

  private var mObserversOf_backComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  var backComponentValueSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentValueSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    mObserversOf_backComponentValueSegments.insert (inObserver)
    if let object = self.propval {
      object.backComponentValueSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    mObserversOf_backComponentValueSegments.remove (inObserver)
    if let object = self.propval {
      object.backComponentValueSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentValuesBezierPaths
  //····················································································································

  private var mObserversOf_backComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentValuesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backComponentValuesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backComponentValuesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backComponentValuesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backComponentValuesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLayoutTextsBezierPaths
  //····················································································································

  private var mObserversOf_backLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backLayoutTextsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTextsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLayoutTextsLayerDisplay
  //····················································································································

  private var mObserversOf_backLayoutTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var backLayoutTextsLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backLayoutTextsLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTextsLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTextsLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLayoutTextsSegments
  //····················································································································

  private var mObserversOf_backLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  var backLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLayoutTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendLinesBezierPaths
  //····················································································································

  private var mObserversOf_backLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendLinesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backLegendLinesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backLegendLinesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backLegendLinesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backLegendLinesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendLinesLayerDisplay
  //····················································································································

  private var mObserversOf_backLegendLinesLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var backLegendLinesLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backLegendLinesLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendLinesLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLegendLinesLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.backLegendLinesLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLegendLinesLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.backLegendLinesLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendLinesSegments
  //····················································································································

  private var mObserversOf_backLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  var backLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendLinesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    mObserversOf_backLegendLinesSegments.insert (inObserver)
    if let object = self.propval {
      object.backLegendLinesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    mObserversOf_backLegendLinesSegments.remove (inObserver)
    if let object = self.propval {
      object.backLegendLinesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendTextsBezierPaths
  //····················································································································

  private var mObserversOf_backLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendTextsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backLegendTextsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backLegendTextsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendTextsLayerDisplay
  //····················································································································

  private var mObserversOf_backLegendTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var backLegendTextsLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backLegendTextsLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.backLegendTextsLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.backLegendTextsLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendTextsSegments
  //····················································································································

  private var mObserversOf_backLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  var backLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.backLegendTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.backLegendTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPackagesBezierPaths
  //····················································································································

  private var mObserversOf_backPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backPackagesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backPackagesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backPackagesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backPackagesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backPackagesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backPackagesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPackagesDisplay
  //····················································································································

  private var mObserversOf_backPackagesDisplay = EBWeakEventSet ()

  //····················································································································

  var backPackagesDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backPackagesDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPackagesDisplay (_ inObserver : EBEvent) {
    mObserversOf_backPackagesDisplay.insert (inObserver)
    if let object = self.propval {
      object.backPackagesDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesDisplay (_ inObserver : EBEvent) {
    mObserversOf_backPackagesDisplay.remove (inObserver)
    if let object = self.propval {
      object.backPackagesDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPackagesSegments
  //····················································································································

  private var mObserversOf_backPackagesSegments = EBWeakEventSet ()

  //····················································································································

  var backPackagesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backPackagesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    mObserversOf_backPackagesSegments.insert (inObserver)
    if let object = self.propval {
      object.backPackagesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    mObserversOf_backPackagesSegments.remove (inObserver)
    if let object = self.propval {
      object.backPackagesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPads
  //····················································································································

  private var mObserversOf_backPads = EBWeakEventSet ()

  //····················································································································

  var backPads_property_selection : EBSelection <MergerPadArray?> {
    get {
      if let model = self.propval {
        switch (model.backPads_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPads (_ inObserver : EBEvent) {
    mObserversOf_backPads.insert (inObserver)
    if let object = self.propval {
      object.backPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPads (_ inObserver : EBEvent) {
    mObserversOf_backPads.remove (inObserver)
    if let object = self.propval {
      object.backPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPadsBezierPaths
  //····················································································································

  private var mObserversOf_backPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backPadsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backPadsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backPadsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backPadsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backPadsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backPadsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPadsDisplay
  //····················································································································

  private var mObserversOf_backPadsDisplay = EBWeakEventSet ()

  //····················································································································

  var backPadsDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backPadsDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPadsDisplay (_ inObserver : EBEvent) {
    mObserversOf_backPadsDisplay.insert (inObserver)
    if let object = self.propval {
      object.backPadsDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsDisplay (_ inObserver : EBEvent) {
    mObserversOf_backPadsDisplay.remove (inObserver)
    if let object = self.propval {
      object.backPadsDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backTrackSegments
  //····················································································································

  private var mObserversOf_backTrackSegments = EBWeakEventSet ()

  //····················································································································

  var backTrackSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backTrackSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    mObserversOf_backTrackSegments.insert (inObserver)
    if let object = self.propval {
      object.backTrackSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    mObserversOf_backTrackSegments.remove (inObserver)
    if let object = self.propval {
      object.backTrackSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backTracksBezierPaths
  //····················································································································

  private var mObserversOf_backTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backTracksBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backTracksBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backTracksBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backTracksBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backTracksBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backTracksBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backTracksDisplay
  //····················································································································

  private var mObserversOf_backTracksDisplay = EBWeakEventSet ()

  //····················································································································

  var backTracksDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backTracksDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backTracksDisplay (_ inObserver : EBEvent) {
    mObserversOf_backTracksDisplay.insert (inObserver)
    if let object = self.propval {
      object.backTracksDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracksDisplay (_ inObserver : EBEvent) {
    mObserversOf_backTracksDisplay.remove (inObserver)
    if let object = self.propval {
      object.backTracksDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backgroundLayerDisplay
  //····················································································································

  private var mObserversOf_backgroundLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var backgroundLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.backgroundLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backgroundLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_backgroundLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.backgroundLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backgroundLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_backgroundLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.backgroundLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimits
  //····················································································································

  private var mObserversOf_boardLimits = EBWeakEventSet ()

  //····················································································································

  var boardLimits_property_selection : EBSelection <MergerBoardLimits?> {
    get {
      if let model = self.propval {
        switch (model.boardLimits_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    mObserversOf_boardLimits.insert (inObserver)
    if let object = self.propval {
      object.boardLimits_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    mObserversOf_boardLimits.remove (inObserver)
    if let object = self.propval {
      object.boardLimits_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitsBezierPaths
  //····················································································································

  private var mObserversOf_boardLimitsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var boardLimitsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_boardLimitsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.boardLimitsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_boardLimitsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.boardLimitsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitsDisplay
  //····················································································································

  private var mObserversOf_boardLimitsDisplay = EBWeakEventSet ()

  //····················································································································

  var boardLimitsDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitsDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitsDisplay (_ inObserver : EBEvent) {
    mObserversOf_boardLimitsDisplay.insert (inObserver)
    if let object = self.propval {
      object.boardLimitsDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsDisplay (_ inObserver : EBEvent) {
    mObserversOf_boardLimitsDisplay.remove (inObserver)
    if let object = self.propval {
      object.boardLimitsDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentNameDisplay
  //····················································································································

  private var mObserversOf_frontComponentNameDisplay = EBWeakEventSet ()

  //····················································································································

  var frontComponentNameDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentNameDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNameDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNameDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontComponentNameDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNameDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontComponentNameDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentNameSegments
  //····················································································································

  private var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  var frontComponentNameSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentNameSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNameSegments.insert (inObserver)
    if let object = self.propval {
      object.frontComponentNameSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNameSegments.remove (inObserver)
    if let object = self.propval {
      object.frontComponentNameSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentNamesBezierPaths
  //····················································································································

  private var mObserversOf_frontComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentNamesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNamesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontComponentNamesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNamesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontComponentNamesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentValueDisplay
  //····················································································································

  private var mObserversOf_frontComponentValueDisplay = EBWeakEventSet ()

  //····················································································································

  var frontComponentValueDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentValueDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValueDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValueDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontComponentValueDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValueDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontComponentValueDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentValueSegments
  //····················································································································

  private var mObserversOf_frontComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  var frontComponentValueSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentValueSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValueSegments.insert (inObserver)
    if let object = self.propval {
      object.frontComponentValueSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValueSegments.remove (inObserver)
    if let object = self.propval {
      object.frontComponentValueSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentValuesBezierPaths
  //····················································································································

  private var mObserversOf_frontComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentValuesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValuesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontComponentValuesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValuesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontComponentValuesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLayoutTextsBezierPaths
  //····················································································································

  private var mObserversOf_frontLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLayoutTextsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLayoutTextsLayerDisplay
  //····················································································································

  private var mObserversOf_frontLayoutTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var frontLayoutTextsLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.frontLayoutTextsLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLayoutTextsSegments
  //····················································································································

  private var mObserversOf_frontLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  var frontLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLayoutTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendLinesBezierPaths
  //····················································································································

  private var mObserversOf_frontLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendLinesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontLegendLinesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontLegendLinesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontLegendLinesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontLegendLinesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendLinesLayerDisplay
  //····················································································································

  private var mObserversOf_frontLegendLinesLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var frontLegendLinesLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendLinesLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendLinesLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLegendLinesLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontLegendLinesLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLegendLinesLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontLegendLinesLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendLinesSegments
  //····················································································································

  private var mObserversOf_frontLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  var frontLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendLinesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLegendLinesSegments.insert (inObserver)
    if let object = self.propval {
      object.frontLegendLinesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLegendLinesSegments.remove (inObserver)
    if let object = self.propval {
      object.frontLegendLinesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendTextsBezierPaths
  //····················································································································

  private var mObserversOf_frontLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendTextsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTextsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTextsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendTextsLayerDisplay
  //····················································································································

  private var mObserversOf_frontLegendTextsLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var frontLegendTextsLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendTextsLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTextsLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTextsLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendTextsSegments
  //····················································································································

  private var mObserversOf_frontLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  var frontLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPackagesBezierPaths
  //····················································································································

  private var mObserversOf_frontPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontPackagesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPackagesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontPackagesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontPackagesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPackagesDisplay
  //····················································································································

  private var mObserversOf_frontPackagesDisplay = EBWeakEventSet ()

  //····················································································································

  var frontPackagesDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.frontPackagesDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPackagesDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontPackagesDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontPackagesDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPackagesSegments
  //····················································································································

  private var mObserversOf_frontPackagesSegments = EBWeakEventSet ()

  //····················································································································

  var frontPackagesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPackagesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesSegments.insert (inObserver)
    if let object = self.propval {
      object.frontPackagesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesSegments.remove (inObserver)
    if let object = self.propval {
      object.frontPackagesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPads
  //····················································································································

  private var mObserversOf_frontPads = EBWeakEventSet ()

  //····················································································································

  var frontPads_property_selection : EBSelection <MergerPadArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPads_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPads (_ inObserver : EBEvent) {
    mObserversOf_frontPads.insert (inObserver)
    if let object = self.propval {
      object.frontPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPads (_ inObserver : EBEvent) {
    mObserversOf_frontPads.remove (inObserver)
    if let object = self.propval {
      object.frontPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPadsBezierPaths
  //····················································································································

  private var mObserversOf_frontPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontPadsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPadsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontPadsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontPadsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontPadsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontPadsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPadsDisplay
  //····················································································································

  private var mObserversOf_frontPadsDisplay = EBWeakEventSet ()

  //····················································································································

  var frontPadsDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.frontPadsDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPadsDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontPadsDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontPadsDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontPadsDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontPadsDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontTrackSegments
  //····················································································································

  private var mObserversOf_frontTrackSegments = EBWeakEventSet ()

  //····················································································································

  var frontTrackSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontTrackSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    mObserversOf_frontTrackSegments.insert (inObserver)
    if let object = self.propval {
      object.frontTrackSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    mObserversOf_frontTrackSegments.remove (inObserver)
    if let object = self.propval {
      object.frontTrackSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontTracksBezierPaths
  //····················································································································

  private var mObserversOf_frontTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontTracksBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontTracksBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontTracksBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontTracksBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontTracksBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontTracksBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontTracksDisplay
  //····················································································································

  private var mObserversOf_frontTracksDisplay = EBWeakEventSet ()

  //····················································································································

  var frontTracksDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.frontTracksDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontTracksDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontTracksDisplay.insert (inObserver)
    if let object = self.propval {
      object.frontTracksDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksDisplay (_ inObserver : EBEvent) {
    mObserversOf_frontTracksDisplay.remove (inObserver)
    if let object = self.propval {
      object.frontTracksDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: holeLayerDisplay
  //····················································································································

  private var mObserversOf_holeLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var holeLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.holeLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_holeLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_holeLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.holeLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_holeLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.holeLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: holes
  //····················································································································

  private var mObserversOf_holes = EBWeakEventSet ()

  //····················································································································

  var holes_property_selection : EBSelection <MergerHoleArray?> {
    get {
      if let model = self.propval {
        switch (model.holes_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_holes (_ inObserver : EBEvent) {
    mObserversOf_holes.insert (inObserver)
    if let object = self.propval {
      object.holes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_holes (_ inObserver : EBEvent) {
    mObserversOf_holes.remove (inObserver)
    if let object = self.propval {
      object.holes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: holesBezierPaths
  //····················································································································

  private var mObserversOf_holesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var holesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.holesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_holesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.holesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_holesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.holesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: imageForInstances
  //····················································································································

  private var mObserversOf_imageForInstances = EBWeakEventSet ()

  //····················································································································

  var imageForInstances_property_selection : EBSelection <NSImage?> {
    get {
      if let model = self.propval {
        switch (model.imageForInstances_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    mObserversOf_imageForInstances.insert (inObserver)
    if let object = self.propval {
      object.imageForInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    mObserversOf_imageForInstances.remove (inObserver)
    if let object = self.propval {
      object.imageForInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: instanceCount
  //····················································································································

  private var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  var instanceCount_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.instanceCount_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    mObserversOf_instanceCount.insert (inObserver)
    if let object = self.propval {
      object.instanceCount_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    mObserversOf_instanceCount.remove (inObserver)
    if let object = self.propval {
      object.instanceCount_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelHeight
  //····················································································································

  private var mObserversOf_modelHeight = EBWeakEventSet ()

  //····················································································································

  var modelHeight_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelHeight_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    mObserversOf_modelHeight.insert (inObserver)
    if let object = self.propval {
      object.modelHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    mObserversOf_modelHeight.remove (inObserver)
    if let object = self.propval {
      object.modelHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelHeightUnit
  //····················································································································

  private var mObserversOf_modelHeightUnit = EBWeakEventSet ()

  //····················································································································

  var modelHeightUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelHeightUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    mObserversOf_modelHeightUnit.insert (inObserver)
    if let object = self.propval {
      object.modelHeightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    mObserversOf_modelHeightUnit.remove (inObserver)
    if let object = self.propval {
      object.modelHeightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelLayerDisplay
  //····················································································································

  private var mObserversOf_modelLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var modelLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.modelLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_modelLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.modelLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_modelLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.modelLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelLimitWidth
  //····················································································································

  private var mObserversOf_modelLimitWidth = EBWeakEventSet ()

  //····················································································································

  var modelLimitWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelLimitWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_modelLimitWidth.insert (inObserver)
    if let object = self.propval {
      object.modelLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_modelLimitWidth.remove (inObserver)
    if let object = self.propval {
      object.modelLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelLimitWidthUnit
  //····················································································································

  private var mObserversOf_modelLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  var modelLimitWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelLimitWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_modelLimitWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.modelLimitWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_modelLimitWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.modelLimitWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelWidth
  //····················································································································

  private var mObserversOf_modelWidth = EBWeakEventSet ()

  //····················································································································

  var modelWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    mObserversOf_modelWidth.insert (inObserver)
    if let object = self.propval {
      object.modelWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    mObserversOf_modelWidth.remove (inObserver)
    if let object = self.propval {
      object.modelWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelWidthUnit
  //····················································································································

  private var mObserversOf_modelWidthUnit = EBWeakEventSet ()

  //····················································································································

  var modelWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_modelWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.modelWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_modelWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.modelWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: name
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  var name_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.name_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    mObserversOf_name.insert (inObserver)
    if let object = self.propval {
      object.name_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    mObserversOf_name.remove (inObserver)
    if let object = self.propval {
      object.name_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: padsHoles
  //····················································································································

  private var mObserversOf_padsHoles = EBWeakEventSet ()

  //····················································································································

  var padsHoles_property_selection : EBSelection <MergerHoleArray?> {
    get {
      if let model = self.propval {
        switch (model.padsHoles_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_padsHoles (_ inObserver : EBEvent) {
    mObserversOf_padsHoles.insert (inObserver)
    if let object = self.propval {
      object.padsHoles_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padsHoles (_ inObserver : EBEvent) {
    mObserversOf_padsHoles.remove (inObserver)
    if let object = self.propval {
      object.padsHoles_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: viaLayerDisplay
  //····················································································································

  private var mObserversOf_viaLayerDisplay = EBWeakEventSet ()

  //····················································································································

  var viaLayerDisplay_property_selection : EBSelection <CALayer?> {
    get {
      if let model = self.propval {
        switch (model.viaLayerDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_viaLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_viaLayerDisplay.insert (inObserver)
    if let object = self.propval {
      object.viaLayerDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaLayerDisplay (_ inObserver : EBEvent) {
    mObserversOf_viaLayerDisplay.remove (inObserver)
    if let object = self.propval {
      object.viaLayerDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: viaShapes
  //····················································································································

  private var mObserversOf_viaShapes = EBWeakEventSet ()

  //····················································································································

  var viaShapes_property_selection : EBSelection <MergerViaShapeArray?> {
    get {
      if let model = self.propval {
        switch (model.viaShapes_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    mObserversOf_viaShapes.insert (inObserver)
    if let object = self.propval {
      object.viaShapes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    mObserversOf_viaShapes.remove (inObserver)
    if let object = self.propval {
      object.viaShapes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: viasBezierPaths
  //····················································································································

  private var mObserversOf_viasBezierPaths = EBWeakEventSet ()

  //····················································································································

  var viasBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.viasBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_viasBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.viasBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_viasBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.viasBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: viasHoles
  //····················································································································

  private var mObserversOf_viasHoles = EBWeakEventSet ()

  //····················································································································

  var viasHoles_property_selection : EBSelection <MergerHoleArray?> {
    get {
      if let model = self.propval {
        switch (model.viasHoles_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_viasHoles (_ inObserver : EBEvent) {
    mObserversOf_viasHoles.insert (inObserver)
    if let object = self.propval {
      object.viasHoles_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viasHoles (_ inObserver : EBEvent) {
    mObserversOf_viasHoles.remove (inObserver)
    if let object = self.propval {
      object.viasHoles_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: zoom
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  var zoom_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.zoom_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    mObserversOf_zoom.insert (inObserver)
    if let object = self.propval {
      object.zoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    mObserversOf_zoom.remove (inObserver)
    if let object = self.propval {
      object.zoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

