//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MergerBoardInstance : EBGraphicManagedObject,
  MergerBoardInstance_x,
  MergerBoardInstance_y,
  MergerBoardInstance_instanceRotation,
  MergerBoardInstance_instanceRect,
  MergerBoardInstance_modelName,
  MergerBoardInstance_boardLimitWidth,
  MergerBoardInstance_selectionDisplay,
  MergerBoardInstance_instanceDisplay {

  //····················································································································
  //   Accessing x stored property
  //····················································································································

  var x : Int {
    get {
      return self.x_property.propval
    }
    set {
      self.x_property.setProp (newValue)
    }
  }

  var x_property_selection : EBSelection <Int> {
    get {
      return self.x_property.prop
    }
  }

  //····················································································································
  //   Accessing y stored property
  //····················································································································

  var y : Int {
    get {
      return self.y_property.propval
    }
    set {
      self.y_property.setProp (newValue)
    }
  }

  var y_property_selection : EBSelection <Int> {
    get {
      return self.y_property.prop
    }
  }

  //····················································································································
  //   Accessing instanceRotation stored property
  //····················································································································

  var instanceRotation : QuadrantRotation {
    get {
      return self.instanceRotation_property.propval
    }
    set {
      self.instanceRotation_property.setProp (newValue)
    }
  }

  var instanceRotation_property_selection : EBSelection <QuadrantRotation> {
    get {
      return self.instanceRotation_property.prop
    }
  }

  //····················································································································
  //   Accessing instanceRect transient property
  //····················································································································

  var instanceRect_property_selection : EBSelection <CanariHorizontalRect> {
    get {
      return self.instanceRect_property.prop
    }
  }

  var instanceRect : CanariHorizontalRect? {
    switch instanceRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing modelName transient property
  //····················································································································

  var modelName_property_selection : EBSelection <String> {
    get {
      return self.modelName_property.prop
    }
  }

  var modelName : String? {
    switch modelName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing boardLimitWidth transient property
  //····················································································································

  var boardLimitWidth_property_selection : EBSelection <Int> {
    get {
      return self.boardLimitWidth_property.prop
    }
  }

  var boardLimitWidth : Int? {
    switch boardLimitWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing selectionDisplay transient property
  //····················································································································

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    get {
      return self.selectionDisplay_property.prop
    }
  }

  var selectionDisplay : EBShape? {
    switch selectionDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing instanceDisplay transient property
  //····················································································································

  var instanceDisplay_property_selection : EBSelection <EBShape> {
    get {
      return self.instanceDisplay_property.prop
    }
  }

  var instanceDisplay : EBShape? {
    switch instanceDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var x_property = EBStoredProperty_Int (0)
  var y_property = EBStoredProperty_Int (0)
  var instanceRotation_property = EBStoredProperty_QuadrantRotation (QuadrantRotation.rotation0)

  //····················································································································
  //    Transient properties
  //····················································································································

  var instanceRect_property = EBTransientProperty_CanariHorizontalRect ()
  var modelName_property = EBTransientProperty_String ()
  var boardLimitWidth_property = EBTransientProperty_Int ()
  // selectionDisplay_property is declared in super entity
  var instanceDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································
  //    Relationships
  //····················································································································

  var myRoot_property = ToOneRelationship_MergerBoardInstance_myRoot ()
  var myRoot_property_selection : EBSelection <Bool> { return .single (self.myRoot_property.propval == nil) }
  var myModel_property = ToOneRelationship_MergerBoardInstance_myModel ()
  var myModel_property_selection : EBSelection <Bool> { return .single (self.myModel_property.propval == nil) }

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    self.instanceRect_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelWidth_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelHeight_property_selection.kind ()
        kind &= unwSelf.instanceRotation_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.myModel_property.modelWidth_property_selection, unwSelf.myModel_property.modelHeight_property_selection, unwSelf.instanceRotation_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_MergerBoardInstance_instanceRect (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.modelName_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.myModel_property.name_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.myModel_property.name_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerBoardInstance_modelName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardLimitWidth_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.myModel_property.modelLimitWidth_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.myModel_property.modelLimitWidth_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerBoardInstance_boardLimitWidth (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.instanceRect_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.instanceRect_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerBoardInstance_selectionDisplay (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.instanceDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelWidth_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelHeight_property_selection.kind ()
        kind &= unwSelf.instanceRotation_property_selection.kind ()
        kind &= unwSelf.myModel_property.imageForInstances_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.myModel_property.modelWidth_property_selection, unwSelf.myModel_property.modelHeight_property_selection, unwSelf.instanceRotation_property_selection, unwSelf.myModel_property.imageForInstances_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_MergerBoardInstance_instanceDisplay (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--- Install property observers for transients
    self.x_property.addEBObserver (self.instanceRect_property)
    self.y_property.addEBObserver (self.instanceRect_property)
    self.myModel_property.addEBObserverOf_modelWidth (self.instanceRect_property)
    self.myModel_property.addEBObserverOf_modelHeight (self.instanceRect_property)
    self.instanceRotation_property.addEBObserver (self.instanceRect_property)
    self.myModel_property.addEBObserverOf_name (self.modelName_property)
    self.myModel_property.addEBObserverOf_modelLimitWidth (self.boardLimitWidth_property)
    self.instanceRect_property.addEBObserver (self.selectionDisplay_property)
    self.x_property.addEBObserver (self.instanceDisplay_property)
    self.y_property.addEBObserver (self.instanceDisplay_property)
    self.myModel_property.addEBObserverOf_modelWidth (self.instanceDisplay_property)
    self.myModel_property.addEBObserverOf_modelHeight (self.instanceDisplay_property)
    self.instanceRotation_property.addEBObserver (self.instanceDisplay_property)
    self.myModel_property.addEBObserverOf_imageForInstances (self.instanceDisplay_property)
  //--- Install undoers for properties
    self.x_property.undoManager = undoManager ()
    self.y_property.undoManager = undoManager ()
    self.instanceRotation_property.undoManager = undoManager ()
  //--- Install owner for relationships
    self.myRoot_property.owner = self
    self.myModel_property.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.x_property.removeEBObserver (self.instanceRect_property)
    self.y_property.removeEBObserver (self.instanceRect_property)
    self.myModel_property.removeEBObserverOf_modelWidth (self.instanceRect_property)
    self.myModel_property.removeEBObserverOf_modelHeight (self.instanceRect_property)
    self.instanceRotation_property.removeEBObserver (self.instanceRect_property)
    self.myModel_property.removeEBObserverOf_name (self.modelName_property)
    self.myModel_property.removeEBObserverOf_modelLimitWidth (self.boardLimitWidth_property)
    self.instanceRect_property.removeEBObserver (self.selectionDisplay_property)
    self.x_property.removeEBObserver (self.instanceDisplay_property)
    self.y_property.removeEBObserver (self.instanceDisplay_property)
    self.myModel_property.removeEBObserverOf_modelWidth (self.instanceDisplay_property)
    self.myModel_property.removeEBObserverOf_modelHeight (self.instanceDisplay_property)
    self.instanceRotation_property.removeEBObserver (self.instanceDisplay_property)
    self.myModel_property.removeEBObserverOf_imageForInstances (self.instanceDisplay_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "x",
      idx:self.x_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x_property.mObserverExplorer,
      valueExplorer:&self.x_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y",
      idx:self.y_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y_property.mObserverExplorer,
      valueExplorer:&self.y_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "instanceRotation",
      idx:self.instanceRotation_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceRotation_property.mObserverExplorer,
      valueExplorer:&self.instanceRotation_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "instanceRect",
      idx:self.instanceRect_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceRect_property.mObserverExplorer,
      valueExplorer:&self.instanceRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelName",
      idx:self.modelName_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelName_property.mObserverExplorer,
      valueExplorer:&self.modelName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidth",
      idx:self.boardLimitWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidth_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "instanceDisplay",
      idx:self.instanceDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceDisplay_property.mObserverExplorer,
      valueExplorer:&self.instanceDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "myRoot",
      idx:self.myRoot_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.myRoot_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "myModel",
      idx:self.myModel_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.myModel_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.x_property.mObserverExplorer = nil
    self.x_property.mValueExplorer = nil
    self.y_property.mObserverExplorer = nil
    self.y_property.mValueExplorer = nil
    self.instanceRotation_property.mObserverExplorer = nil
    self.instanceRotation_property.mValueExplorer = nil
    self.myRoot_property.mObserverExplorer = nil
    self.myRoot_property.mValueExplorer = nil
    self.myModel_property.mObserverExplorer = nil
    self.myModel_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.x_property.storeIn (dictionary: ioDictionary, forKey: "x")
    self.y_property.storeIn (dictionary: ioDictionary, forKey: "y")
    self.instanceRotation_property.storeIn (dictionary: ioDictionary, forKey: "instanceRotation")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.x_property.readFrom (dictionary: inDictionary, forKey:"x")
    self.y_property.readFrom (dictionary: inDictionary, forKey:"y")
    self.instanceRotation_property.readFrom (dictionary: inDictionary, forKey:"instanceRotation")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    self.myRoot_property.setProp (nil) // Set relationship to nil
    self.myModel_property.setProp (nil) // Set relationship to nil
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
    self.myRoot_property.setProp (nil)
    self.myModel_property.setProp (nil)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    if let object = self.myRoot_property.propval {
      objects.append (object)
    }
    if let object = self.myModel_property.propval {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MergerBoardInstance : ReadOnlyAbstractArrayProperty <MergerBoardInstance> {

  //····················································································································
  //   Observers of 'x' stored property
  //····················································································································

  private var mObserversOf_x = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_x.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_x.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_x {
        managedObject.x_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for observer in mObserversOf_x {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y' stored property
  //····················································································································

  private var mObserversOf_y = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_y.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_y.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_y {
        managedObject.y_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for observer in mObserversOf_y {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceRotation' stored property
  //····················································································································

  private var mObserversOf_instanceRotation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceRotation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instanceRotation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceRotation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceRotation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instanceRotation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceRotation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceRotation_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceRotation {
        managedObject.instanceRotation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceRotation_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for observer in mObserversOf_instanceRotation {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.instanceRotation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceRect' transient property
  //····················································································································

  private var mObserversOf_instanceRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instanceRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instanceRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceRect_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceRect {
        managedObject.instanceRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceRect_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceRect {
        managedObject.instanceRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelName' transient property
  //····················································································································

  private var mObserversOf_modelName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_modelName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_modelName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelName_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelName {
        managedObject.modelName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelName_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_modelName {
        managedObject.modelName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' transient property
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_boardLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_boardLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidth_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidth {
        managedObject.boardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidth_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_boardLimitWidth {
        managedObject.boardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectionDisplay {
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectionDisplay {
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceDisplay' transient property
  //····················································································································

  private var mObserversOf_instanceDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_instanceDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_instanceDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceDisplay {
        managedObject.instanceDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in mObserversOf_instanceDisplay {
        managedObject.instanceDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MergerBoardInstance : ReadOnlyArrayOf_MergerBoardInstance {

  var readModelFunction : Optional<() -> EBSelection < [MergerBoardInstance] > >

  private var prop_cache : EBSelection < [MergerBoardInstance] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <MergerBoardInstance> ()

  override var prop : EBSelection < [MergerBoardInstance] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <MergerBoardInstance>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <MergerBoardInstance> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_x_fromElementsOfSet (removedSet)
        removeEBObserversOf_y_fromElementsOfSet (removedSet)
        removeEBObserversOf_instanceRotation_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_instanceRect_fromElementsOfSet (removedSet)
        removeEBObserversOf_modelName_fromElementsOfSet (removedSet)
        removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_instanceDisplay_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_x_toElementsOfSet (addedSet)
        addEBObserversOf_y_toElementsOfSet (addedSet)
        addEBObserversOf_instanceRotation_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_instanceRect_toElementsOfSet (addedSet)
        addEBObserversOf_modelName_toElementsOfSet (addedSet)
        addEBObserversOf_boardLimitWidth_toElementsOfSet (addedSet)
        addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_instanceDisplay_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_x : class {
  var x : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_y : class {
  var y : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_instanceRotation : class {
  var instanceRotation : QuadrantRotation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_instanceRect : class {
  var instanceRect : CanariHorizontalRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_modelName : class {
  var modelName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_boardLimitWidth : class {
  var boardLimitWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_instanceDisplay : class {
  var instanceDisplay : EBShape? { get }
}


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: myRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_MergerBoardInstance_myRoot : EBAbstractProperty {
  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : MergerBoardInstance? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : MergerRoot? {
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.boardInstances_property.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          unwrappedValue.boardInstances_property.add (unwrappedOwner)
        }
      //--- Remove property observers of old object
        oldValue?.arrowMagnitude_property.removeEBObserversFrom (mObserversOf_arrowMagnitude)
        oldValue?.arrowMagnitudeUnit_property.removeEBObserversFrom (mObserversOf_arrowMagnitudeUnit)
        oldValue?.artworkName_property.removeEBObserversFrom (mObserversOf_artworkName)
        oldValue?.automaticBoardSize_property.removeEBObserversFrom (mObserversOf_automaticBoardSize)
        oldValue?.boardDisplayRect_property.removeEBObserversFrom (mObserversOf_boardDisplayRect)
        oldValue?.boardHeight_property.removeEBObserversFrom (mObserversOf_boardHeight)
        oldValue?.boardHeightUnit_property.removeEBObserversFrom (mObserversOf_boardHeightUnit)
        oldValue?.boardLimitWidth_property.removeEBObserversFrom (mObserversOf_boardLimitWidth)
        oldValue?.boardLimitWidthUnit_property.removeEBObserversFrom (mObserversOf_boardLimitWidthUnit)
        oldValue?.boardManualHeight_property.removeEBObserversFrom (mObserversOf_boardManualHeight)
        oldValue?.boardManualWidth_property.removeEBObserversFrom (mObserversOf_boardManualWidth)
        oldValue?.boardRect_property.removeEBObserversFrom (mObserversOf_boardRect)
        oldValue?.boardWidth_property.removeEBObserversFrom (mObserversOf_boardWidth)
        oldValue?.boardWidthUnit_property.removeEBObserversFrom (mObserversOf_boardWidthUnit)
        oldValue?.cocoaArrowMagnitude_property.removeEBObserversFrom (mObserversOf_cocoaArrowMagnitude)
        oldValue?.cocoaShiftArrowMagnitude_property.removeEBObserversFrom (mObserversOf_cocoaShiftArrowMagnitude)
        oldValue?.generateGerberProductFile_property.removeEBObserversFrom (mObserversOf_generateGerberProductFile)
        oldValue?.generatePDFProductFile_property.removeEBObserversFrom (mObserversOf_generatePDFProductFile)
        oldValue?.generatedBoardArchiveFormat_property.removeEBObserversFrom (mObserversOf_generatedBoardArchiveFormat)
        oldValue?.instancesDisplay_property.removeEBObserversFrom (mObserversOf_instancesDisplay)
        oldValue?.modelNames_property.removeEBObserversFrom (mObserversOf_modelNames)
        oldValue?.overlapingArrangment_property.removeEBObserversFrom (mObserversOf_overlapingArrangment)
        oldValue?.selectedBoardXUnit_property.removeEBObserversFrom (mObserversOf_selectedBoardXUnit)
        oldValue?.selectedBoardYUnit_property.removeEBObserversFrom (mObserversOf_selectedBoardYUnit)
        oldValue?.selectedPageIndex_property.removeEBObserversFrom (mObserversOf_selectedPageIndex)
        oldValue?.shiftArrowMagnitude_property.removeEBObserversFrom (mObserversOf_shiftArrowMagnitude)
        oldValue?.shiftArrowMagnitudeUnit_property.removeEBObserversFrom (mObserversOf_shiftArrowMagnitudeUnit)
        oldValue?.zoom_property.removeEBObserversFrom (mObserversOf_zoom)
      //--- Add property observers to new object
        mValue?.arrowMagnitude_property.addEBObserversFrom (mObserversOf_arrowMagnitude)
        mValue?.arrowMagnitudeUnit_property.addEBObserversFrom (mObserversOf_arrowMagnitudeUnit)
        mValue?.artworkName_property.addEBObserversFrom (mObserversOf_artworkName)
        mValue?.automaticBoardSize_property.addEBObserversFrom (mObserversOf_automaticBoardSize)
        mValue?.boardDisplayRect_property.addEBObserversFrom (mObserversOf_boardDisplayRect)
        mValue?.boardHeight_property.addEBObserversFrom (mObserversOf_boardHeight)
        mValue?.boardHeightUnit_property.addEBObserversFrom (mObserversOf_boardHeightUnit)
        mValue?.boardLimitWidth_property.addEBObserversFrom (mObserversOf_boardLimitWidth)
        mValue?.boardLimitWidthUnit_property.addEBObserversFrom (mObserversOf_boardLimitWidthUnit)
        mValue?.boardManualHeight_property.addEBObserversFrom (mObserversOf_boardManualHeight)
        mValue?.boardManualWidth_property.addEBObserversFrom (mObserversOf_boardManualWidth)
        mValue?.boardRect_property.addEBObserversFrom (mObserversOf_boardRect)
        mValue?.boardWidth_property.addEBObserversFrom (mObserversOf_boardWidth)
        mValue?.boardWidthUnit_property.addEBObserversFrom (mObserversOf_boardWidthUnit)
        mValue?.cocoaArrowMagnitude_property.addEBObserversFrom (mObserversOf_cocoaArrowMagnitude)
        mValue?.cocoaShiftArrowMagnitude_property.addEBObserversFrom (mObserversOf_cocoaShiftArrowMagnitude)
        mValue?.generateGerberProductFile_property.addEBObserversFrom (mObserversOf_generateGerberProductFile)
        mValue?.generatePDFProductFile_property.addEBObserversFrom (mObserversOf_generatePDFProductFile)
        mValue?.generatedBoardArchiveFormat_property.addEBObserversFrom (mObserversOf_generatedBoardArchiveFormat)
        mValue?.instancesDisplay_property.addEBObserversFrom (mObserversOf_instancesDisplay)
        mValue?.modelNames_property.addEBObserversFrom (mObserversOf_modelNames)
        mValue?.overlapingArrangment_property.addEBObserversFrom (mObserversOf_overlapingArrangment)
        mValue?.selectedBoardXUnit_property.addEBObserversFrom (mObserversOf_selectedBoardXUnit)
        mValue?.selectedBoardYUnit_property.addEBObserversFrom (mObserversOf_selectedBoardYUnit)
        mValue?.selectedPageIndex_property.addEBObserversFrom (mObserversOf_selectedPageIndex)
        mValue?.shiftArrowMagnitude_property.addEBObserversFrom (mObserversOf_shiftArrowMagnitude)
        mValue?.shiftArrowMagnitudeUnit_property.addEBObserversFrom (mObserversOf_shiftArrowMagnitudeUnit)
        mValue?.zoom_property.addEBObserversFrom (mObserversOf_zoom)
       //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : MergerRoot? { get { return mValue } }

  var prop : EBSelection <MergerRoot?> { get { return .single (mValue) } }

  func setProp (_ value : MergerRoot?) { mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : MergerRoot?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MergerRoot) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : MergerRoot) {
    mValue = object
  }

  //····················································································································
  //   Observable property: arrowMagnitude
  //····················································································································

  private var mObserversOf_arrowMagnitude = EBWeakEventSet ()

  //····················································································································

  var arrowMagnitude_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.arrowMagnitude_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    mObserversOf_arrowMagnitude.insert (inObserver)
    if let object = self.propval {
      object.arrowMagnitude_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    mObserversOf_arrowMagnitude.remove (inObserver)
    if let object = self.propval {
      object.arrowMagnitude_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: arrowMagnitudeUnit
  //····················································································································

  private var mObserversOf_arrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  var arrowMagnitudeUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.arrowMagnitudeUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    mObserversOf_arrowMagnitudeUnit.insert (inObserver)
    if let object = self.propval {
      object.arrowMagnitudeUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    mObserversOf_arrowMagnitudeUnit.remove (inObserver)
    if let object = self.propval {
      object.arrowMagnitudeUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: artworkName
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  var artworkName_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.artworkName_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    mObserversOf_artworkName.insert (inObserver)
    if let object = self.propval {
      object.artworkName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    mObserversOf_artworkName.remove (inObserver)
    if let object = self.propval {
      object.artworkName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: automaticBoardSize
  //····················································································································

  private var mObserversOf_automaticBoardSize = EBWeakEventSet ()

  //····················································································································

  var automaticBoardSize_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.automaticBoardSize_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    mObserversOf_automaticBoardSize.insert (inObserver)
    if let object = self.propval {
      object.automaticBoardSize_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    mObserversOf_automaticBoardSize.remove (inObserver)
    if let object = self.propval {
      object.automaticBoardSize_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardDisplayRect
  //····················································································································

  private var mObserversOf_boardDisplayRect = EBWeakEventSet ()

  //····················································································································

  var boardDisplayRect_property_selection : EBSelection <CanariHorizontalRect?> {
    get {
      if let model = self.propval {
        switch (model.boardDisplayRect_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    mObserversOf_boardDisplayRect.insert (inObserver)
    if let object = self.propval {
      object.boardDisplayRect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    mObserversOf_boardDisplayRect.remove (inObserver)
    if let object = self.propval {
      object.boardDisplayRect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardHeight
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  var boardHeight_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardHeight_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    mObserversOf_boardHeight.insert (inObserver)
    if let object = self.propval {
      object.boardHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    mObserversOf_boardHeight.remove (inObserver)
    if let object = self.propval {
      object.boardHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardHeightUnit
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  var boardHeightUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardHeightUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    mObserversOf_boardHeightUnit.insert (inObserver)
    if let object = self.propval {
      object.boardHeightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    mObserversOf_boardHeightUnit.remove (inObserver)
    if let object = self.propval {
      object.boardHeightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitWidth
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  var boardLimitWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_boardLimitWidth.insert (inObserver)
    if let object = self.propval {
      object.boardLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_boardLimitWidth.remove (inObserver)
    if let object = self.propval {
      object.boardLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitWidthUnit
  //····················································································································

  private var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  var boardLimitWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_boardLimitWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.boardLimitWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_boardLimitWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.boardLimitWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardManualHeight
  //····················································································································

  private var mObserversOf_boardManualHeight = EBWeakEventSet ()

  //····················································································································

  var boardManualHeight_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardManualHeight_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    mObserversOf_boardManualHeight.insert (inObserver)
    if let object = self.propval {
      object.boardManualHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    mObserversOf_boardManualHeight.remove (inObserver)
    if let object = self.propval {
      object.boardManualHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardManualWidth
  //····················································································································

  private var mObserversOf_boardManualWidth = EBWeakEventSet ()

  //····················································································································

  var boardManualWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardManualWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    mObserversOf_boardManualWidth.insert (inObserver)
    if let object = self.propval {
      object.boardManualWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    mObserversOf_boardManualWidth.remove (inObserver)
    if let object = self.propval {
      object.boardManualWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardRect
  //····················································································································

  private var mObserversOf_boardRect = EBWeakEventSet ()

  //····················································································································

  var boardRect_property_selection : EBSelection <CanariHorizontalRect?> {
    get {
      if let model = self.propval {
        switch (model.boardRect_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardRect (_ inObserver : EBEvent) {
    mObserversOf_boardRect.insert (inObserver)
    if let object = self.propval {
      object.boardRect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardRect (_ inObserver : EBEvent) {
    mObserversOf_boardRect.remove (inObserver)
    if let object = self.propval {
      object.boardRect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardWidth
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  var boardWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    mObserversOf_boardWidth.insert (inObserver)
    if let object = self.propval {
      object.boardWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    mObserversOf_boardWidth.remove (inObserver)
    if let object = self.propval {
      object.boardWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardWidthUnit
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  var boardWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_boardWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.boardWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_boardWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.boardWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: cocoaArrowMagnitude
  //····················································································································

  private var mObserversOf_cocoaArrowMagnitude = EBWeakEventSet ()

  //····················································································································

  var cocoaArrowMagnitude_property_selection : EBSelection <CGFloat?> {
    get {
      if let model = self.propval {
        switch (model.cocoaArrowMagnitude_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_cocoaArrowMagnitude (_ inObserver : EBEvent) {
    mObserversOf_cocoaArrowMagnitude.insert (inObserver)
    if let object = self.propval {
      object.cocoaArrowMagnitude_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_cocoaArrowMagnitude (_ inObserver : EBEvent) {
    mObserversOf_cocoaArrowMagnitude.remove (inObserver)
    if let object = self.propval {
      object.cocoaArrowMagnitude_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: cocoaShiftArrowMagnitude
  //····················································································································

  private var mObserversOf_cocoaShiftArrowMagnitude = EBWeakEventSet ()

  //····················································································································

  var cocoaShiftArrowMagnitude_property_selection : EBSelection <CGFloat?> {
    get {
      if let model = self.propval {
        switch (model.cocoaShiftArrowMagnitude_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_cocoaShiftArrowMagnitude (_ inObserver : EBEvent) {
    mObserversOf_cocoaShiftArrowMagnitude.insert (inObserver)
    if let object = self.propval {
      object.cocoaShiftArrowMagnitude_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_cocoaShiftArrowMagnitude (_ inObserver : EBEvent) {
    mObserversOf_cocoaShiftArrowMagnitude.remove (inObserver)
    if let object = self.propval {
      object.cocoaShiftArrowMagnitude_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: generateGerberProductFile
  //····················································································································

  private var mObserversOf_generateGerberProductFile = EBWeakEventSet ()

  //····················································································································

  var generateGerberProductFile_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.generateGerberProductFile_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    mObserversOf_generateGerberProductFile.insert (inObserver)
    if let object = self.propval {
      object.generateGerberProductFile_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    mObserversOf_generateGerberProductFile.remove (inObserver)
    if let object = self.propval {
      object.generateGerberProductFile_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: generatePDFProductFile
  //····················································································································

  private var mObserversOf_generatePDFProductFile = EBWeakEventSet ()

  //····················································································································

  var generatePDFProductFile_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.generatePDFProductFile_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    mObserversOf_generatePDFProductFile.insert (inObserver)
    if let object = self.propval {
      object.generatePDFProductFile_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    mObserversOf_generatePDFProductFile.remove (inObserver)
    if let object = self.propval {
      object.generatePDFProductFile_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: generatedBoardArchiveFormat
  //····················································································································

  private var mObserversOf_generatedBoardArchiveFormat = EBWeakEventSet ()

  //····················································································································

  var generatedBoardArchiveFormat_property_selection : EBSelection <BoardArchiveFormat?> {
    get {
      if let model = self.propval {
        switch (model.generatedBoardArchiveFormat_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    mObserversOf_generatedBoardArchiveFormat.insert (inObserver)
    if let object = self.propval {
      object.generatedBoardArchiveFormat_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    mObserversOf_generatedBoardArchiveFormat.remove (inObserver)
    if let object = self.propval {
      object.generatedBoardArchiveFormat_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: instancesDisplay
  //····················································································································

  private var mObserversOf_instancesDisplay = EBWeakEventSet ()

  //····················································································································

  var instancesDisplay_property_selection : EBSelection <EBShape?> {
    get {
      if let model = self.propval {
        switch (model.instancesDisplay_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_instancesDisplay (_ inObserver : EBEvent) {
    mObserversOf_instancesDisplay.insert (inObserver)
    if let object = self.propval {
      object.instancesDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_instancesDisplay (_ inObserver : EBEvent) {
    mObserversOf_instancesDisplay.remove (inObserver)
    if let object = self.propval {
      object.instancesDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelNames
  //····················································································································

  private var mObserversOf_modelNames = EBWeakEventSet ()

  //····················································································································

  var modelNames_property_selection : EBSelection <MergerBoardModelArray?> {
    get {
      if let model = self.propval {
        switch (model.modelNames_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelNames (_ inObserver : EBEvent) {
    mObserversOf_modelNames.insert (inObserver)
    if let object = self.propval {
      object.modelNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelNames (_ inObserver : EBEvent) {
    mObserversOf_modelNames.remove (inObserver)
    if let object = self.propval {
      object.modelNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: overlapingArrangment
  //····················································································································

  private var mObserversOf_overlapingArrangment = EBWeakEventSet ()

  //····················································································································

  var overlapingArrangment_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.overlapingArrangment_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    mObserversOf_overlapingArrangment.insert (inObserver)
    if let object = self.propval {
      object.overlapingArrangment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    mObserversOf_overlapingArrangment.remove (inObserver)
    if let object = self.propval {
      object.overlapingArrangment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedBoardXUnit
  //····················································································································

  private var mObserversOf_selectedBoardXUnit = EBWeakEventSet ()

  //····················································································································

  var selectedBoardXUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.selectedBoardXUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    mObserversOf_selectedBoardXUnit.insert (inObserver)
    if let object = self.propval {
      object.selectedBoardXUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    mObserversOf_selectedBoardXUnit.remove (inObserver)
    if let object = self.propval {
      object.selectedBoardXUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedBoardYUnit
  //····················································································································

  private var mObserversOf_selectedBoardYUnit = EBWeakEventSet ()

  //····················································································································

  var selectedBoardYUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.selectedBoardYUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    mObserversOf_selectedBoardYUnit.insert (inObserver)
    if let object = self.propval {
      object.selectedBoardYUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    mObserversOf_selectedBoardYUnit.remove (inObserver)
    if let object = self.propval {
      object.selectedBoardYUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedPageIndex
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.selectedPageIndex_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    mObserversOf_selectedPageIndex.insert (inObserver)
    if let object = self.propval {
      object.selectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    mObserversOf_selectedPageIndex.remove (inObserver)
    if let object = self.propval {
      object.selectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: shiftArrowMagnitude
  //····················································································································

  private var mObserversOf_shiftArrowMagnitude = EBWeakEventSet ()

  //····················································································································

  var shiftArrowMagnitude_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.shiftArrowMagnitude_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    mObserversOf_shiftArrowMagnitude.insert (inObserver)
    if let object = self.propval {
      object.shiftArrowMagnitude_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    mObserversOf_shiftArrowMagnitude.remove (inObserver)
    if let object = self.propval {
      object.shiftArrowMagnitude_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: shiftArrowMagnitudeUnit
  //····················································································································

  private var mObserversOf_shiftArrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  var shiftArrowMagnitudeUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.shiftArrowMagnitudeUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    mObserversOf_shiftArrowMagnitudeUnit.insert (inObserver)
    if let object = self.propval {
      object.shiftArrowMagnitudeUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    mObserversOf_shiftArrowMagnitudeUnit.remove (inObserver)
    if let object = self.propval {
      object.shiftArrowMagnitudeUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: zoom
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  var zoom_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.zoom_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    mObserversOf_zoom.insert (inObserver)
    if let object = self.propval {
      object.zoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    mObserversOf_zoom.remove (inObserver)
    if let object = self.propval {
      object.zoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: myModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_MergerBoardInstance_myModel : EBAbstractProperty {
  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : MergerBoardInstance? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : BoardModel? {
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.myInstances_property.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          unwrappedValue.myInstances_property.add (unwrappedOwner)
        }
      //--- Remove property observers of old object
        oldValue?.artworkName_property.removeEBObserversFrom (mObserversOf_artworkName)
        oldValue?.backComponentNameSegments_property.removeEBObserversFrom (mObserversOf_backComponentNameSegments)
        oldValue?.backComponentNamesBezierPaths_property.removeEBObserversFrom (mObserversOf_backComponentNamesBezierPaths)
        oldValue?.backComponentValueSegments_property.removeEBObserversFrom (mObserversOf_backComponentValueSegments)
        oldValue?.backComponentValuesBezierPaths_property.removeEBObserversFrom (mObserversOf_backComponentValuesBezierPaths)
        oldValue?.backLayoutTextsBezierPaths_property.removeEBObserversFrom (mObserversOf_backLayoutTextsBezierPaths)
        oldValue?.backLayoutTextsSegments_property.removeEBObserversFrom (mObserversOf_backLayoutTextsSegments)
        oldValue?.backLegendLinesBezierPaths_property.removeEBObserversFrom (mObserversOf_backLegendLinesBezierPaths)
        oldValue?.backLegendLinesSegments_property.removeEBObserversFrom (mObserversOf_backLegendLinesSegments)
        oldValue?.backLegendTextsBezierPaths_property.removeEBObserversFrom (mObserversOf_backLegendTextsBezierPaths)
        oldValue?.backLegendTextsSegments_property.removeEBObserversFrom (mObserversOf_backLegendTextsSegments)
        oldValue?.backPackagesBezierPaths_property.removeEBObserversFrom (mObserversOf_backPackagesBezierPaths)
        oldValue?.backPackagesSegments_property.removeEBObserversFrom (mObserversOf_backPackagesSegments)
        oldValue?.backPadArray_property.removeEBObserversFrom (mObserversOf_backPadArray)
        oldValue?.backPadsBezierPaths_property.removeEBObserversFrom (mObserversOf_backPadsBezierPaths)
        oldValue?.backTrackSegments_property.removeEBObserversFrom (mObserversOf_backTrackSegments)
        oldValue?.backTracksBezierPaths_property.removeEBObserversFrom (mObserversOf_backTracksBezierPaths)
        oldValue?.boardLimits_property.removeEBObserversFrom (mObserversOf_boardLimits)
        oldValue?.boardLimitsBezierPaths_property.removeEBObserversFrom (mObserversOf_boardLimitsBezierPaths)
        oldValue?.drillSegments_property.removeEBObserversFrom (mObserversOf_drillSegments)
        oldValue?.frontComponentNameSegments_property.removeEBObserversFrom (mObserversOf_frontComponentNameSegments)
        oldValue?.frontComponentNamesBezierPaths_property.removeEBObserversFrom (mObserversOf_frontComponentNamesBezierPaths)
        oldValue?.frontComponentValueSegments_property.removeEBObserversFrom (mObserversOf_frontComponentValueSegments)
        oldValue?.frontComponentValuesBezierPaths_property.removeEBObserversFrom (mObserversOf_frontComponentValuesBezierPaths)
        oldValue?.frontLayoutTextsBezierPaths_property.removeEBObserversFrom (mObserversOf_frontLayoutTextsBezierPaths)
        oldValue?.frontLayoutTextsSegments_property.removeEBObserversFrom (mObserversOf_frontLayoutTextsSegments)
        oldValue?.frontLegendLinesBezierPaths_property.removeEBObserversFrom (mObserversOf_frontLegendLinesBezierPaths)
        oldValue?.frontLegendLinesSegments_property.removeEBObserversFrom (mObserversOf_frontLegendLinesSegments)
        oldValue?.frontLegendTextsBezierPaths_property.removeEBObserversFrom (mObserversOf_frontLegendTextsBezierPaths)
        oldValue?.frontLegendTextsSegments_property.removeEBObserversFrom (mObserversOf_frontLegendTextsSegments)
        oldValue?.frontPackagesBezierPaths_property.removeEBObserversFrom (mObserversOf_frontPackagesBezierPaths)
        oldValue?.frontPackagesSegments_property.removeEBObserversFrom (mObserversOf_frontPackagesSegments)
        oldValue?.frontPadArray_property.removeEBObserversFrom (mObserversOf_frontPadArray)
        oldValue?.frontPadsBezierPaths_property.removeEBObserversFrom (mObserversOf_frontPadsBezierPaths)
        oldValue?.frontTrackSegments_property.removeEBObserversFrom (mObserversOf_frontTrackSegments)
        oldValue?.frontTracksBezierPaths_property.removeEBObserversFrom (mObserversOf_frontTracksBezierPaths)
        oldValue?.holesBezierPaths_property.removeEBObserversFrom (mObserversOf_holesBezierPaths)
        oldValue?.imageForInstances_property.removeEBObserversFrom (mObserversOf_imageForInstances)
        oldValue?.imageForModel_property.removeEBObserversFrom (mObserversOf_imageForModel)
        oldValue?.instanceCount_property.removeEBObserversFrom (mObserversOf_instanceCount)
        oldValue?.internalBoardsLimitsBezierPaths_property.removeEBObserversFrom (mObserversOf_internalBoardsLimitsBezierPaths)
        oldValue?.internalBoardsLimitsSegments_property.removeEBObserversFrom (mObserversOf_internalBoardsLimitsSegments)
        oldValue?.modelHeight_property.removeEBObserversFrom (mObserversOf_modelHeight)
        oldValue?.modelHeightUnit_property.removeEBObserversFrom (mObserversOf_modelHeightUnit)
        oldValue?.modelLimitWidth_property.removeEBObserversFrom (mObserversOf_modelLimitWidth)
        oldValue?.modelLimitWidthUnit_property.removeEBObserversFrom (mObserversOf_modelLimitWidthUnit)
        oldValue?.modelWidth_property.removeEBObserversFrom (mObserversOf_modelWidth)
        oldValue?.modelWidthUnit_property.removeEBObserversFrom (mObserversOf_modelWidthUnit)
        oldValue?.name_property.removeEBObserversFrom (mObserversOf_name)
        oldValue?.viaShapes_property.removeEBObserversFrom (mObserversOf_viaShapes)
        oldValue?.viasBezierPaths_property.removeEBObserversFrom (mObserversOf_viasBezierPaths)
        oldValue?.zoom_property.removeEBObserversFrom (mObserversOf_zoom)
      //--- Add property observers to new object
        mValue?.artworkName_property.addEBObserversFrom (mObserversOf_artworkName)
        mValue?.backComponentNameSegments_property.addEBObserversFrom (mObserversOf_backComponentNameSegments)
        mValue?.backComponentNamesBezierPaths_property.addEBObserversFrom (mObserversOf_backComponentNamesBezierPaths)
        mValue?.backComponentValueSegments_property.addEBObserversFrom (mObserversOf_backComponentValueSegments)
        mValue?.backComponentValuesBezierPaths_property.addEBObserversFrom (mObserversOf_backComponentValuesBezierPaths)
        mValue?.backLayoutTextsBezierPaths_property.addEBObserversFrom (mObserversOf_backLayoutTextsBezierPaths)
        mValue?.backLayoutTextsSegments_property.addEBObserversFrom (mObserversOf_backLayoutTextsSegments)
        mValue?.backLegendLinesBezierPaths_property.addEBObserversFrom (mObserversOf_backLegendLinesBezierPaths)
        mValue?.backLegendLinesSegments_property.addEBObserversFrom (mObserversOf_backLegendLinesSegments)
        mValue?.backLegendTextsBezierPaths_property.addEBObserversFrom (mObserversOf_backLegendTextsBezierPaths)
        mValue?.backLegendTextsSegments_property.addEBObserversFrom (mObserversOf_backLegendTextsSegments)
        mValue?.backPackagesBezierPaths_property.addEBObserversFrom (mObserversOf_backPackagesBezierPaths)
        mValue?.backPackagesSegments_property.addEBObserversFrom (mObserversOf_backPackagesSegments)
        mValue?.backPadArray_property.addEBObserversFrom (mObserversOf_backPadArray)
        mValue?.backPadsBezierPaths_property.addEBObserversFrom (mObserversOf_backPadsBezierPaths)
        mValue?.backTrackSegments_property.addEBObserversFrom (mObserversOf_backTrackSegments)
        mValue?.backTracksBezierPaths_property.addEBObserversFrom (mObserversOf_backTracksBezierPaths)
        mValue?.boardLimits_property.addEBObserversFrom (mObserversOf_boardLimits)
        mValue?.boardLimitsBezierPaths_property.addEBObserversFrom (mObserversOf_boardLimitsBezierPaths)
        mValue?.drillSegments_property.addEBObserversFrom (mObserversOf_drillSegments)
        mValue?.frontComponentNameSegments_property.addEBObserversFrom (mObserversOf_frontComponentNameSegments)
        mValue?.frontComponentNamesBezierPaths_property.addEBObserversFrom (mObserversOf_frontComponentNamesBezierPaths)
        mValue?.frontComponentValueSegments_property.addEBObserversFrom (mObserversOf_frontComponentValueSegments)
        mValue?.frontComponentValuesBezierPaths_property.addEBObserversFrom (mObserversOf_frontComponentValuesBezierPaths)
        mValue?.frontLayoutTextsBezierPaths_property.addEBObserversFrom (mObserversOf_frontLayoutTextsBezierPaths)
        mValue?.frontLayoutTextsSegments_property.addEBObserversFrom (mObserversOf_frontLayoutTextsSegments)
        mValue?.frontLegendLinesBezierPaths_property.addEBObserversFrom (mObserversOf_frontLegendLinesBezierPaths)
        mValue?.frontLegendLinesSegments_property.addEBObserversFrom (mObserversOf_frontLegendLinesSegments)
        mValue?.frontLegendTextsBezierPaths_property.addEBObserversFrom (mObserversOf_frontLegendTextsBezierPaths)
        mValue?.frontLegendTextsSegments_property.addEBObserversFrom (mObserversOf_frontLegendTextsSegments)
        mValue?.frontPackagesBezierPaths_property.addEBObserversFrom (mObserversOf_frontPackagesBezierPaths)
        mValue?.frontPackagesSegments_property.addEBObserversFrom (mObserversOf_frontPackagesSegments)
        mValue?.frontPadArray_property.addEBObserversFrom (mObserversOf_frontPadArray)
        mValue?.frontPadsBezierPaths_property.addEBObserversFrom (mObserversOf_frontPadsBezierPaths)
        mValue?.frontTrackSegments_property.addEBObserversFrom (mObserversOf_frontTrackSegments)
        mValue?.frontTracksBezierPaths_property.addEBObserversFrom (mObserversOf_frontTracksBezierPaths)
        mValue?.holesBezierPaths_property.addEBObserversFrom (mObserversOf_holesBezierPaths)
        mValue?.imageForInstances_property.addEBObserversFrom (mObserversOf_imageForInstances)
        mValue?.imageForModel_property.addEBObserversFrom (mObserversOf_imageForModel)
        mValue?.instanceCount_property.addEBObserversFrom (mObserversOf_instanceCount)
        mValue?.internalBoardsLimitsBezierPaths_property.addEBObserversFrom (mObserversOf_internalBoardsLimitsBezierPaths)
        mValue?.internalBoardsLimitsSegments_property.addEBObserversFrom (mObserversOf_internalBoardsLimitsSegments)
        mValue?.modelHeight_property.addEBObserversFrom (mObserversOf_modelHeight)
        mValue?.modelHeightUnit_property.addEBObserversFrom (mObserversOf_modelHeightUnit)
        mValue?.modelLimitWidth_property.addEBObserversFrom (mObserversOf_modelLimitWidth)
        mValue?.modelLimitWidthUnit_property.addEBObserversFrom (mObserversOf_modelLimitWidthUnit)
        mValue?.modelWidth_property.addEBObserversFrom (mObserversOf_modelWidth)
        mValue?.modelWidthUnit_property.addEBObserversFrom (mObserversOf_modelWidthUnit)
        mValue?.name_property.addEBObserversFrom (mObserversOf_name)
        mValue?.viaShapes_property.addEBObserversFrom (mObserversOf_viaShapes)
        mValue?.viasBezierPaths_property.addEBObserversFrom (mObserversOf_viasBezierPaths)
        mValue?.zoom_property.addEBObserversFrom (mObserversOf_zoom)
       //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : BoardModel? { get { return mValue } }

  var prop : EBSelection <BoardModel?> { get { return .single (mValue) } }

  func setProp (_ value : BoardModel?) { mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : BoardModel?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModel) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : BoardModel) {
    mValue = object
  }

  //····················································································································
  //   Observable property: artworkName
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  var artworkName_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.artworkName_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    mObserversOf_artworkName.insert (inObserver)
    if let object = self.propval {
      object.artworkName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    mObserversOf_artworkName.remove (inObserver)
    if let object = self.propval {
      object.artworkName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentNameSegments
  //····················································································································

  private var mObserversOf_backComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  var backComponentNameSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentNameSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    mObserversOf_backComponentNameSegments.insert (inObserver)
    if let object = self.propval {
      object.backComponentNameSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    mObserversOf_backComponentNameSegments.remove (inObserver)
    if let object = self.propval {
      object.backComponentNameSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentNamesBezierPaths
  //····················································································································

  private var mObserversOf_backComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentNamesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backComponentNamesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backComponentNamesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backComponentNamesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backComponentNamesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentValueSegments
  //····················································································································

  private var mObserversOf_backComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  var backComponentValueSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentValueSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    mObserversOf_backComponentValueSegments.insert (inObserver)
    if let object = self.propval {
      object.backComponentValueSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    mObserversOf_backComponentValueSegments.remove (inObserver)
    if let object = self.propval {
      object.backComponentValueSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentValuesBezierPaths
  //····················································································································

  private var mObserversOf_backComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentValuesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backComponentValuesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backComponentValuesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backComponentValuesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backComponentValuesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLayoutTextsBezierPaths
  //····················································································································

  private var mObserversOf_backLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backLayoutTextsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTextsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLayoutTextsSegments
  //····················································································································

  private var mObserversOf_backLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  var backLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLayoutTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_backLayoutTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendLinesBezierPaths
  //····················································································································

  private var mObserversOf_backLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendLinesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backLegendLinesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backLegendLinesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backLegendLinesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backLegendLinesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendLinesSegments
  //····················································································································

  private var mObserversOf_backLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  var backLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendLinesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    mObserversOf_backLegendLinesSegments.insert (inObserver)
    if let object = self.propval {
      object.backLegendLinesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    mObserversOf_backLegendLinesSegments.remove (inObserver)
    if let object = self.propval {
      object.backLegendLinesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendTextsBezierPaths
  //····················································································································

  private var mObserversOf_backLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendTextsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backLegendTextsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backLegendTextsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendTextsSegments
  //····················································································································

  private var mObserversOf_backLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  var backLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.backLegendTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_backLegendTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.backLegendTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPackagesBezierPaths
  //····················································································································

  private var mObserversOf_backPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backPackagesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backPackagesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backPackagesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backPackagesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backPackagesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backPackagesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPackagesSegments
  //····················································································································

  private var mObserversOf_backPackagesSegments = EBWeakEventSet ()

  //····················································································································

  var backPackagesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backPackagesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    mObserversOf_backPackagesSegments.insert (inObserver)
    if let object = self.propval {
      object.backPackagesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    mObserversOf_backPackagesSegments.remove (inObserver)
    if let object = self.propval {
      object.backPackagesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPadArray
  //····················································································································

  private var mObserversOf_backPadArray = EBWeakEventSet ()

  //····················································································································

  var backPadArray_property_selection : EBSelection <MergerPadArray?> {
    get {
      if let model = self.propval {
        switch (model.backPadArray_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPadArray (_ inObserver : EBEvent) {
    mObserversOf_backPadArray.insert (inObserver)
    if let object = self.propval {
      object.backPadArray_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadArray (_ inObserver : EBEvent) {
    mObserversOf_backPadArray.remove (inObserver)
    if let object = self.propval {
      object.backPadArray_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPadsBezierPaths
  //····················································································································

  private var mObserversOf_backPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backPadsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backPadsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backPadsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backPadsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backPadsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backPadsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backTrackSegments
  //····················································································································

  private var mObserversOf_backTrackSegments = EBWeakEventSet ()

  //····················································································································

  var backTrackSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backTrackSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    mObserversOf_backTrackSegments.insert (inObserver)
    if let object = self.propval {
      object.backTrackSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    mObserversOf_backTrackSegments.remove (inObserver)
    if let object = self.propval {
      object.backTrackSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backTracksBezierPaths
  //····················································································································

  private var mObserversOf_backTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backTracksBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backTracksBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backTracksBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backTracksBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_backTracksBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backTracksBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimits
  //····················································································································

  private var mObserversOf_boardLimits = EBWeakEventSet ()

  //····················································································································

  var boardLimits_property_selection : EBSelection <MergerBoardLimits?> {
    get {
      if let model = self.propval {
        switch (model.boardLimits_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    mObserversOf_boardLimits.insert (inObserver)
    if let object = self.propval {
      object.boardLimits_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    mObserversOf_boardLimits.remove (inObserver)
    if let object = self.propval {
      object.boardLimits_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitsBezierPaths
  //····················································································································

  private var mObserversOf_boardLimitsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var boardLimitsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_boardLimitsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.boardLimitsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_boardLimitsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.boardLimitsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: drillSegments
  //····················································································································

  private var mObserversOf_drillSegments = EBWeakEventSet ()

  //····················································································································

  var drillSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.drillSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_drillSegments (_ inObserver : EBEvent) {
    mObserversOf_drillSegments.insert (inObserver)
    if let object = self.propval {
      object.drillSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillSegments (_ inObserver : EBEvent) {
    mObserversOf_drillSegments.remove (inObserver)
    if let object = self.propval {
      object.drillSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentNameSegments
  //····················································································································

  private var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  var frontComponentNameSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentNameSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNameSegments.insert (inObserver)
    if let object = self.propval {
      object.frontComponentNameSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNameSegments.remove (inObserver)
    if let object = self.propval {
      object.frontComponentNameSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentNamesBezierPaths
  //····················································································································

  private var mObserversOf_frontComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentNamesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNamesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontComponentNamesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontComponentNamesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontComponentNamesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentValueSegments
  //····················································································································

  private var mObserversOf_frontComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  var frontComponentValueSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentValueSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValueSegments.insert (inObserver)
    if let object = self.propval {
      object.frontComponentValueSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValueSegments.remove (inObserver)
    if let object = self.propval {
      object.frontComponentValueSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentValuesBezierPaths
  //····················································································································

  private var mObserversOf_frontComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentValuesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValuesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontComponentValuesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontComponentValuesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontComponentValuesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLayoutTextsBezierPaths
  //····················································································································

  private var mObserversOf_frontLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLayoutTextsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLayoutTextsSegments
  //····················································································································

  private var mObserversOf_frontLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  var frontLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLayoutTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLayoutTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendLinesBezierPaths
  //····················································································································

  private var mObserversOf_frontLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendLinesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontLegendLinesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontLegendLinesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontLegendLinesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontLegendLinesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendLinesSegments
  //····················································································································

  private var mObserversOf_frontLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  var frontLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendLinesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLegendLinesSegments.insert (inObserver)
    if let object = self.propval {
      object.frontLegendLinesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLegendLinesSegments.remove (inObserver)
    if let object = self.propval {
      object.frontLegendLinesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendTextsBezierPaths
  //····················································································································

  private var mObserversOf_frontLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendTextsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTextsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTextsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendTextsSegments
  //····················································································································

  private var mObserversOf_frontLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  var frontLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    mObserversOf_frontLegendTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPackagesBezierPaths
  //····················································································································

  private var mObserversOf_frontPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontPackagesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPackagesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontPackagesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontPackagesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPackagesSegments
  //····················································································································

  private var mObserversOf_frontPackagesSegments = EBWeakEventSet ()

  //····················································································································

  var frontPackagesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPackagesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesSegments.insert (inObserver)
    if let object = self.propval {
      object.frontPackagesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    mObserversOf_frontPackagesSegments.remove (inObserver)
    if let object = self.propval {
      object.frontPackagesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPadArray
  //····················································································································

  private var mObserversOf_frontPadArray = EBWeakEventSet ()

  //····················································································································

  var frontPadArray_property_selection : EBSelection <MergerPadArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPadArray_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPadArray (_ inObserver : EBEvent) {
    mObserversOf_frontPadArray.insert (inObserver)
    if let object = self.propval {
      object.frontPadArray_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadArray (_ inObserver : EBEvent) {
    mObserversOf_frontPadArray.remove (inObserver)
    if let object = self.propval {
      object.frontPadArray_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPadsBezierPaths
  //····················································································································

  private var mObserversOf_frontPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontPadsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPadsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontPadsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontPadsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontPadsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontPadsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontTrackSegments
  //····················································································································

  private var mObserversOf_frontTrackSegments = EBWeakEventSet ()

  //····················································································································

  var frontTrackSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontTrackSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    mObserversOf_frontTrackSegments.insert (inObserver)
    if let object = self.propval {
      object.frontTrackSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    mObserversOf_frontTrackSegments.remove (inObserver)
    if let object = self.propval {
      object.frontTrackSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontTracksBezierPaths
  //····················································································································

  private var mObserversOf_frontTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontTracksBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontTracksBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontTracksBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontTracksBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_frontTracksBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontTracksBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: holesBezierPaths
  //····················································································································

  private var mObserversOf_holesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var holesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.holesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_holesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.holesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_holesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.holesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: imageForInstances
  //····················································································································

  private var mObserversOf_imageForInstances = EBWeakEventSet ()

  //····················································································································

  var imageForInstances_property_selection : EBSelection <EBShape?> {
    get {
      if let model = self.propval {
        switch (model.imageForInstances_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    mObserversOf_imageForInstances.insert (inObserver)
    if let object = self.propval {
      object.imageForInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    mObserversOf_imageForInstances.remove (inObserver)
    if let object = self.propval {
      object.imageForInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: imageForModel
  //····················································································································

  private var mObserversOf_imageForModel = EBWeakEventSet ()

  //····················································································································

  var imageForModel_property_selection : EBSelection <EBShape?> {
    get {
      if let model = self.propval {
        switch (model.imageForModel_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_imageForModel (_ inObserver : EBEvent) {
    mObserversOf_imageForModel.insert (inObserver)
    if let object = self.propval {
      object.imageForModel_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageForModel (_ inObserver : EBEvent) {
    mObserversOf_imageForModel.remove (inObserver)
    if let object = self.propval {
      object.imageForModel_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: instanceCount
  //····················································································································

  private var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  var instanceCount_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.instanceCount_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    mObserversOf_instanceCount.insert (inObserver)
    if let object = self.propval {
      object.instanceCount_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    mObserversOf_instanceCount.remove (inObserver)
    if let object = self.propval {
      object.instanceCount_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: internalBoardsLimitsBezierPaths
  //····················································································································

  private var mObserversOf_internalBoardsLimitsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var internalBoardsLimitsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.internalBoardsLimitsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_internalBoardsLimitsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_internalBoardsLimitsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.internalBoardsLimitsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_internalBoardsLimitsBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_internalBoardsLimitsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.internalBoardsLimitsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: internalBoardsLimitsSegments
  //····················································································································

  private var mObserversOf_internalBoardsLimitsSegments = EBWeakEventSet ()

  //····················································································································

  var internalBoardsLimitsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.internalBoardsLimitsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_internalBoardsLimitsSegments (_ inObserver : EBEvent) {
    mObserversOf_internalBoardsLimitsSegments.insert (inObserver)
    if let object = self.propval {
      object.internalBoardsLimitsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_internalBoardsLimitsSegments (_ inObserver : EBEvent) {
    mObserversOf_internalBoardsLimitsSegments.remove (inObserver)
    if let object = self.propval {
      object.internalBoardsLimitsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelHeight
  //····················································································································

  private var mObserversOf_modelHeight = EBWeakEventSet ()

  //····················································································································

  var modelHeight_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelHeight_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    mObserversOf_modelHeight.insert (inObserver)
    if let object = self.propval {
      object.modelHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    mObserversOf_modelHeight.remove (inObserver)
    if let object = self.propval {
      object.modelHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelHeightUnit
  //····················································································································

  private var mObserversOf_modelHeightUnit = EBWeakEventSet ()

  //····················································································································

  var modelHeightUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelHeightUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    mObserversOf_modelHeightUnit.insert (inObserver)
    if let object = self.propval {
      object.modelHeightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    mObserversOf_modelHeightUnit.remove (inObserver)
    if let object = self.propval {
      object.modelHeightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelLimitWidth
  //····················································································································

  private var mObserversOf_modelLimitWidth = EBWeakEventSet ()

  //····················································································································

  var modelLimitWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelLimitWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_modelLimitWidth.insert (inObserver)
    if let object = self.propval {
      object.modelLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    mObserversOf_modelLimitWidth.remove (inObserver)
    if let object = self.propval {
      object.modelLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelLimitWidthUnit
  //····················································································································

  private var mObserversOf_modelLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  var modelLimitWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelLimitWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_modelLimitWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.modelLimitWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_modelLimitWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.modelLimitWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelWidth
  //····················································································································

  private var mObserversOf_modelWidth = EBWeakEventSet ()

  //····················································································································

  var modelWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    mObserversOf_modelWidth.insert (inObserver)
    if let object = self.propval {
      object.modelWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    mObserversOf_modelWidth.remove (inObserver)
    if let object = self.propval {
      object.modelWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelWidthUnit
  //····················································································································

  private var mObserversOf_modelWidthUnit = EBWeakEventSet ()

  //····················································································································

  var modelWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_modelWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.modelWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    mObserversOf_modelWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.modelWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: name
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  var name_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.name_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    mObserversOf_name.insert (inObserver)
    if let object = self.propval {
      object.name_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    mObserversOf_name.remove (inObserver)
    if let object = self.propval {
      object.name_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: viaShapes
  //····················································································································

  private var mObserversOf_viaShapes = EBWeakEventSet ()

  //····················································································································

  var viaShapes_property_selection : EBSelection <MergerViaShapeArray?> {
    get {
      if let model = self.propval {
        switch (model.viaShapes_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    mObserversOf_viaShapes.insert (inObserver)
    if let object = self.propval {
      object.viaShapes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    mObserversOf_viaShapes.remove (inObserver)
    if let object = self.propval {
      object.viaShapes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: viasBezierPaths
  //····················································································································

  private var mObserversOf_viasBezierPaths = EBWeakEventSet ()

  //····················································································································

  var viasBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.viasBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_viasBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.viasBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    mObserversOf_viasBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.viasBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: zoom
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  var zoom_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.zoom_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    mObserversOf_zoom.insert (inObserver)
    if let object = self.propval {
      object.zoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    mObserversOf_zoom.remove (inObserver)
    if let object = self.propval {
      object.zoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

