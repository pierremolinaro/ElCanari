//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_x : class {
  var x : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_y : class {
  var y : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_instanceRotation : class {
  var instanceRotation : QuadrantRotation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_instanceRect : class {
  var instanceRect : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_modelName : class {
  var modelName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_boardLimitWidth : class {
  var boardLimitWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MergerBoardInstance_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MergerBoardInstance : EBGraphicManagedObject,
         MergerBoardInstance_x,
         MergerBoardInstance_y,
         MergerBoardInstance_instanceRotation,
         MergerBoardInstance_instanceRect,
         MergerBoardInstance_modelName,
         MergerBoardInstance_boardLimitWidth,
         MergerBoardInstance_selectionDisplay,
         MergerBoardInstance_objectDisplay {

  //····················································································································
  //   To one property: myModel
  //····················································································································

  var myModel_property = ToOneRelationship_MergerBoardInstance_myModel ()

  //····················································································································

  var myModel_property_selection : EBSelection <Bool> {
    return .single (self.myModel_property.propval == nil)
  }

  //····················································································································
  //   Atomic property: x
  //····················································································································

  var x_property = EBStoredProperty_Int (0)

  //····················································································································

  var x : Int {
    get {
      return self.x_property.propval
    }
    set {
      self.x_property.setProp (newValue)
    }
  }

  //····················································································································

  var x_property_selection : EBSelection <Int> {
    return self.x_property.prop
  }

  //····················································································································
  //   Atomic property: y
  //····················································································································

  var y_property = EBStoredProperty_Int (0)

  //····················································································································

  var y : Int {
    get {
      return self.y_property.propval
    }
    set {
      self.y_property.setProp (newValue)
    }
  }

  //····················································································································

  var y_property_selection : EBSelection <Int> {
    return self.y_property.prop
  }

  //····················································································································
  //   Atomic property: instanceRotation
  //····················································································································

  var instanceRotation_property = EBStoredProperty_QuadrantRotation (QuadrantRotation.rotation0)

  //····················································································································

  var instanceRotation : QuadrantRotation {
    get {
      return self.instanceRotation_property.propval
    }
    set {
      self.instanceRotation_property.setProp (newValue)
    }
  }

  //····················································································································

  var instanceRotation_property_selection : EBSelection <QuadrantRotation> {
    return self.instanceRotation_property.prop
  }

  //····················································································································
  //   To one property: myRoot
  //····················································································································

  var myRoot_property = ToOneRelationship_MergerBoardInstance_myRoot ()

  //····················································································································

  var myRoot_property_selection : EBSelection <Bool> {
    return .single (self.myRoot_property.propval == nil)
  }

  //····················································································································
  //   Transient property: instanceRect
  //····················································································································

  var instanceRect_property = EBTransientProperty_CanariRect ()

  //····················································································································

  var instanceRect_property_selection : EBSelection <CanariRect> {
    return self.instanceRect_property.prop
  }

  //····················································································································

    var instanceRect : CanariRect? {
    switch self.instanceRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: modelName
  //····················································································································

  var modelName_property = EBTransientProperty_String ()

  //····················································································································

  var modelName_property_selection : EBSelection <String> {
    return self.modelName_property.prop
  }

  //····················································································································

    var modelName : String? {
    switch self.modelName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardLimitWidth
  //····················································································································

  var boardLimitWidth_property = EBTransientProperty_Int ()

  //····················································································································

  var boardLimitWidth_property_selection : EBSelection <Int> {
    return self.boardLimitWidth_property.prop
  }

  //····················································································································

    var boardLimitWidth : Int? {
    switch self.boardLimitWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  override init (_ undoManager : EBUndoManager?, file: String, _ line : Int) {
    super.init (undoManager, file: file, line)
  //--- To one property: myModel
    self.myModel_property.owner = self
  //--- Atomic property: x
    self.x_property.undoManager = self.undoManager
  //--- Atomic property: y
    self.y_property.undoManager = self.undoManager
  //--- Atomic property: instanceRotation
    self.instanceRotation_property.undoManager = self.undoManager
  //--- To one property: myRoot
    self.myRoot_property.owner = self
  //--- Atomic property: instanceRect
    self.instanceRect_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelWidth_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelHeight_property_selection.kind ()
        kind &= unwSelf.instanceRotation_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.myModel_property.modelWidth_property_selection, unwSelf.myModel_property.modelHeight_property_selection, unwSelf.instanceRotation_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_MergerBoardInstance_instanceRect (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.instanceRect_property)
    self.y_property.addEBObserver (self.instanceRect_property)
    self.myModel_property.addEBObserverOf_modelWidth (self.instanceRect_property)
    self.myModel_property.addEBObserverOf_modelHeight (self.instanceRect_property)
    self.instanceRotation_property.addEBObserver (self.instanceRect_property)
  //--- Atomic property: modelName
    self.modelName_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.myModel_property.name_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.myModel_property.name_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerBoardInstance_modelName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.myModel_property.addEBObserverOf_name (self.modelName_property)
  //--- Atomic property: boardLimitWidth
    self.boardLimitWidth_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.myModel_property.modelLimitWidth_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.myModel_property.modelLimitWidth_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerBoardInstance_boardLimitWidth (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.myModel_property.addEBObserverOf_modelLimitWidth (self.boardLimitWidth_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.instanceRect_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.instanceRect_property_selection) {
          case (.single (let v0)) :
            return .single (transient_MergerBoardInstance_selectionDisplay (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.instanceRect_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x_property_selection.kind ()
        kind &= unwSelf.y_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelWidth_property_selection.kind ()
        kind &= unwSelf.myModel_property.modelHeight_property_selection.kind ()
        kind &= unwSelf.instanceRotation_property_selection.kind ()
        kind &= unwSelf.myModel_property.imageForInstances_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x_property_selection, unwSelf.y_property_selection, unwSelf.myModel_property.modelWidth_property_selection, unwSelf.myModel_property.modelHeight_property_selection, unwSelf.instanceRotation_property_selection, unwSelf.myModel_property.imageForInstances_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_MergerBoardInstance_objectDisplay (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.addEBObserver (self.objectDisplay_property)
    self.y_property.addEBObserver (self.objectDisplay_property)
    self.myModel_property.addEBObserverOf_modelWidth (self.objectDisplay_property)
    self.myModel_property.addEBObserverOf_modelHeight (self.objectDisplay_property)
    self.instanceRotation_property.addEBObserver (self.objectDisplay_property)
    self.myModel_property.addEBObserverOf_imageForInstances (self.objectDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.x_property.removeEBObserver (self.instanceRect_property)
    self.y_property.removeEBObserver (self.instanceRect_property)
    self.myModel_property.removeEBObserverOf_modelWidth (self.instanceRect_property)
    self.myModel_property.removeEBObserverOf_modelHeight (self.instanceRect_property)
    self.instanceRotation_property.removeEBObserver (self.instanceRect_property)
    self.myModel_property.removeEBObserverOf_name (self.modelName_property)
    self.myModel_property.removeEBObserverOf_modelLimitWidth (self.boardLimitWidth_property)
    self.instanceRect_property.removeEBObserver (self.selectionDisplay_property)
    self.x_property.removeEBObserver (self.objectDisplay_property)
    self.y_property.removeEBObserver (self.objectDisplay_property)
    self.myModel_property.removeEBObserverOf_modelWidth (self.objectDisplay_property)
    self.myModel_property.removeEBObserverOf_modelHeight (self.objectDisplay_property)
    self.instanceRotation_property.removeEBObserver (self.objectDisplay_property)
    self.myModel_property.removeEBObserverOf_imageForInstances (self.objectDisplay_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "x",
      idx:self.x_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x_property.mObserverExplorer,
      valueExplorer:&self.x_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y",
      idx:self.y_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y_property.mObserverExplorer,
      valueExplorer:&self.y_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "instanceRotation",
      idx:self.instanceRotation_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceRotation_property.mObserverExplorer,
      valueExplorer:&self.instanceRotation_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "instanceRect",
      idx:self.instanceRect_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceRect_property.mObserverExplorer,
      valueExplorer:&self.instanceRect_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "modelName",
      idx:self.modelName_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.modelName_property.mObserverExplorer,
      valueExplorer:&self.modelName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitWidth",
      idx:self.boardLimitWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.boardLimitWidth_property.mObserverExplorer,
      valueExplorer:&self.boardLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "myModel",
      idx:self.myModel_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.myModel_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "myRoot",
      idx:self.myRoot_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.myRoot_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- To one property: myModel
    self.myModel_property.mObserverExplorer = nil
    self.myModel_property.mValueExplorer = nil
  //--- Atomic property: x
    self.x_property.mObserverExplorer = nil
    self.x_property.mValueExplorer = nil
  //--- Atomic property: y
    self.y_property.mObserverExplorer = nil
    self.y_property.mValueExplorer = nil
  //--- Atomic property: instanceRotation
    self.instanceRotation_property.mObserverExplorer = nil
    self.instanceRotation_property.mValueExplorer = nil
  //--- To one property: myRoot
    self.myRoot_property.mObserverExplorer = nil
    self.myRoot_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: x
    self.x_property.storeIn (dictionary: ioDictionary, forKey:"x")
  //--- Atomic property: y
    self.y_property.storeIn (dictionary: ioDictionary, forKey:"y")
  //--- Atomic property: instanceRotation
    self.instanceRotation_property.storeIn (dictionary: ioDictionary, forKey:"instanceRotation")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: x
    self.x_property.readFrom (dictionary: inDictionary, forKey:"x")
  //--- Atomic property: y
    self.y_property.readFrom (dictionary: inDictionary, forKey:"y")
  //--- Atomic property: instanceRotation
    self.instanceRotation_property.readFrom (dictionary: inDictionary, forKey:"instanceRotation")
  }

  //····················································································································
  //   resetControllers
  //····················································································································

  override func resetControllers () {
    super.resetControllers ()
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
    self.myModel_property.setProp (nil)
    self.myRoot_property.setProp (nil)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: myModel
    if let managedObject = self.myModel_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: myRoot
    if let managedObject = self.myRoot_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MergerBoardInstance : ReadOnlyAbstractArrayProperty <MergerBoardInstance> {

  //····················································································································
  //   Observers of 'x' stored property
  //····················································································································

  private var mObserversOf_x = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_x {
        managedObject.x_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for observer in self.mObserversOf_x {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y' stored property
  //····················································································································

  private var mObserversOf_y = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_y {
        managedObject.y_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for observer in self.mObserversOf_y {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceRotation' stored property
  //····················································································································

  private var mObserversOf_instanceRotation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceRotation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_instanceRotation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceRotation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceRotation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_instanceRotation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceRotation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceRotation_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_instanceRotation {
        managedObject.instanceRotation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceRotation_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for observer in self.mObserversOf_instanceRotation {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.instanceRotation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceRect' transient property
  //····················································································································

  private var mObserversOf_instanceRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_instanceRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_instanceRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceRect_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_instanceRect {
        managedObject.instanceRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceRect_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_instanceRect {
        managedObject.instanceRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'modelName' transient property
  //····················································································································

  private var mObserversOf_modelName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_modelName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_modelName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_modelName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.modelName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_modelName_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_modelName {
        managedObject.modelName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_modelName_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_modelName {
        managedObject.modelName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitWidth' transient property
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitWidth_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_boardLimitWidth {
        managedObject.boardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitWidth_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_boardLimitWidth {
        managedObject.boardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_selectionDisplay {
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_selectionDisplay {
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_objectDisplay {
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<MergerBoardInstance>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_objectDisplay {
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MergerBoardInstance : ReadOnlyArrayOf_MergerBoardInstance {

  //····················································································································

  var readModelFunction : Optional < () -> EBSelection < [MergerBoardInstance] > >

  //····················································································································

  override var propset : Set <MergerBoardInstance> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [MergerBoardInstance] > {
    self.computeArrayAndSet ()
    return self.prop_cache!  
  }
 
  //····················································································································

  override var propval : [MergerBoardInstance] {
    self.computeArrayAndSet ()
    if let value = self.prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <MergerBoardInstance> ()

  //····················································································································

  private var prop_cache : EBSelection < [MergerBoardInstance] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.readModelFunction, self.prop_cache == nil {
      self.prop_cache = unwrappedComputeFunction ()
      let newSet : Set <MergerBoardInstance>
      switch self.prop_cache! {
      case .multiple, .empty :
        newSet = Set <MergerBoardInstance> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_x_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_y_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_instanceRotation_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_instanceRect_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_modelName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_x_toElementsOfSet (addedSet)
      self.addEBObserversOf_y_toElementsOfSet (addedSet)
      self.addEBObserversOf_instanceRotation_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_instanceRect_toElementsOfSet (addedSet)
      self.addEBObserversOf_modelName_toElementsOfSet (addedSet)
      self.addEBObserversOf_boardLimitWidth_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.prop_cache == nil {
      self.prop_cache = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.prop_cache != nil {
      self.prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_MergerBoardInstance : ReadOnlyArrayOf_MergerBoardInstance {

  //····················································································································
 
  func setProp (_ value :  [MergerBoardInstance]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: MergerBoardInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_MergerBoardInstance : ReadWriteArrayOf_MergerBoardInstance, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : MergerBoardInstance?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [MergerBoardInstance] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "MergerBoardInstance") as? MergerBoardInstance {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <MergerBoardInstance> ()
  private var mValue = [MergerBoardInstance] () {
    didSet {
      self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
        self.removeEBObserversOf_x_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_y_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_instanceRotation_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_instanceRect_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_modelName_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_boardLimitWidth_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        for managedObject : MergerBoardInstance in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
        self.addEBObserversOf_x_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_y_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_instanceRotation_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_instanceRect_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_modelName_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_boardLimitWidth_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        self.clearSignatureCache ()
      //--- Write in preferences ?
        if let prefKey = self.mPrefKey {
          var dictionaryArray = [NSDictionary] ()
          for object in self.mValue {
            let d = NSMutableDictionary ()
            object.saveIntoDictionary (d)
            d [kEntityKey] = nil // Remove entity key, not used in preferences
            dictionaryArray.append (d)
          }
          UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
        }
      }
    }
  }

  //····················································································································

  override var prop : EBSelection < [MergerBoardInstance] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [MergerBoardInstance]) { self.mValue = inValue }

  //····················································································································

  override var propval : [MergerBoardInstance] { return self.mValue }

  //····················································································································

  override var propset : Set <MergerBoardInstance> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [MergerBoardInstance]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MergerBoardInstance) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : MergerBoardInstance) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: myModel
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_MergerBoardInstance_myModel : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : MergerBoardInstance? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  weak private var mValue : BoardModel? { // SOULD BE WEAK
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.myInstances_property.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = self.mValue {
          unwrappedValue.myInstances_property.add (unwrappedOwner)
        }
      //--- Remove property observers of old object
        oldValue?.backComponentNameSegments_property.removeEBObserversFrom (self.mObserversOf_backComponentNameSegments)
        oldValue?.backComponentNamesBezierPaths_property.removeEBObserversFrom (self.mObserversOf_backComponentNamesBezierPaths)
        oldValue?.backComponentValueSegments_property.removeEBObserversFrom (self.mObserversOf_backComponentValueSegments)
        oldValue?.backComponentValuesBezierPaths_property.removeEBObserversFrom (self.mObserversOf_backComponentValuesBezierPaths)
        oldValue?.backLayoutTextsBezierPaths_property.removeEBObserversFrom (self.mObserversOf_backLayoutTextsBezierPaths)
        oldValue?.backLayoutTextsSegments_property.removeEBObserversFrom (self.mObserversOf_backLayoutTextsSegments)
        oldValue?.backLegendLinesBezierPaths_property.removeEBObserversFrom (self.mObserversOf_backLegendLinesBezierPaths)
        oldValue?.backLegendLinesSegments_property.removeEBObserversFrom (self.mObserversOf_backLegendLinesSegments)
        oldValue?.backLegendTextsBezierPaths_property.removeEBObserversFrom (self.mObserversOf_backLegendTextsBezierPaths)
        oldValue?.backLegendTextsSegments_property.removeEBObserversFrom (self.mObserversOf_backLegendTextsSegments)
        oldValue?.backPackagesBezierPaths_property.removeEBObserversFrom (self.mObserversOf_backPackagesBezierPaths)
        oldValue?.backPackagesSegments_property.removeEBObserversFrom (self.mObserversOf_backPackagesSegments)
        oldValue?.backPadArray_property.removeEBObserversFrom (self.mObserversOf_backPadArray)
        oldValue?.backPadsBezierPaths_property.removeEBObserversFrom (self.mObserversOf_backPadsBezierPaths)
        oldValue?.backTrackSegments_property.removeEBObserversFrom (self.mObserversOf_backTrackSegments)
        oldValue?.backTracksBezierPaths_property.removeEBObserversFrom (self.mObserversOf_backTracksBezierPaths)
        oldValue?.boardLimits_property.removeEBObserversFrom (self.mObserversOf_boardLimits)
        oldValue?.boardLimitsBezierPaths_property.removeEBObserversFrom (self.mObserversOf_boardLimitsBezierPaths)
        oldValue?.drillSegments_property.removeEBObserversFrom (self.mObserversOf_drillSegments)
        oldValue?.frontComponentNameSegments_property.removeEBObserversFrom (self.mObserversOf_frontComponentNameSegments)
        oldValue?.frontComponentNamesBezierPaths_property.removeEBObserversFrom (self.mObserversOf_frontComponentNamesBezierPaths)
        oldValue?.frontComponentValueSegments_property.removeEBObserversFrom (self.mObserversOf_frontComponentValueSegments)
        oldValue?.frontComponentValuesBezierPaths_property.removeEBObserversFrom (self.mObserversOf_frontComponentValuesBezierPaths)
        oldValue?.frontLayoutTextsBezierPaths_property.removeEBObserversFrom (self.mObserversOf_frontLayoutTextsBezierPaths)
        oldValue?.frontLayoutTextsSegments_property.removeEBObserversFrom (self.mObserversOf_frontLayoutTextsSegments)
        oldValue?.frontLegendLinesBezierPaths_property.removeEBObserversFrom (self.mObserversOf_frontLegendLinesBezierPaths)
        oldValue?.frontLegendLinesSegments_property.removeEBObserversFrom (self.mObserversOf_frontLegendLinesSegments)
        oldValue?.frontLegendTextsBezierPaths_property.removeEBObserversFrom (self.mObserversOf_frontLegendTextsBezierPaths)
        oldValue?.frontLegendTextsSegments_property.removeEBObserversFrom (self.mObserversOf_frontLegendTextsSegments)
        oldValue?.frontPackagesBezierPaths_property.removeEBObserversFrom (self.mObserversOf_frontPackagesBezierPaths)
        oldValue?.frontPackagesSegments_property.removeEBObserversFrom (self.mObserversOf_frontPackagesSegments)
        oldValue?.frontPadArray_property.removeEBObserversFrom (self.mObserversOf_frontPadArray)
        oldValue?.frontPadsBezierPaths_property.removeEBObserversFrom (self.mObserversOf_frontPadsBezierPaths)
        oldValue?.frontTrackSegments_property.removeEBObserversFrom (self.mObserversOf_frontTrackSegments)
        oldValue?.frontTracksBezierPaths_property.removeEBObserversFrom (self.mObserversOf_frontTracksBezierPaths)
        oldValue?.holesBezierPaths_property.removeEBObserversFrom (self.mObserversOf_holesBezierPaths)
        oldValue?.imageForInstances_property.removeEBObserversFrom (self.mObserversOf_imageForInstances)
        oldValue?.imageForModel_property.removeEBObserversFrom (self.mObserversOf_imageForModel)
        oldValue?.internalBoardsLimitsBezierPaths_property.removeEBObserversFrom (self.mObserversOf_internalBoardsLimitsBezierPaths)
        oldValue?.internalBoardsLimitsSegments_property.removeEBObserversFrom (self.mObserversOf_internalBoardsLimitsSegments)
        oldValue?.modelHeight_property.removeEBObserversFrom (self.mObserversOf_modelHeight)
        oldValue?.modelHeightUnit_property.removeEBObserversFrom (self.mObserversOf_modelHeightUnit)
        oldValue?.modelLimitWidth_property.removeEBObserversFrom (self.mObserversOf_modelLimitWidth)
        oldValue?.modelLimitWidthUnit_property.removeEBObserversFrom (self.mObserversOf_modelLimitWidthUnit)
        oldValue?.modelWidth_property.removeEBObserversFrom (self.mObserversOf_modelWidth)
        oldValue?.modelWidthUnit_property.removeEBObserversFrom (self.mObserversOf_modelWidthUnit)
        oldValue?.name_property.removeEBObserversFrom (self.mObserversOf_name)
        oldValue?.viaShapes_property.removeEBObserversFrom (self.mObserversOf_viaShapes)
        oldValue?.viasBezierPaths_property.removeEBObserversFrom (self.mObserversOf_viasBezierPaths)
        oldValue?.zoom_property.removeEBObserversFrom (self.mObserversOf_zoom)
      //--- Add property observers to new object
        self.mValue?.backComponentNameSegments_property.addEBObserversFrom (self.mObserversOf_backComponentNameSegments)
        self.mValue?.backComponentNamesBezierPaths_property.addEBObserversFrom (self.mObserversOf_backComponentNamesBezierPaths)
        self.mValue?.backComponentValueSegments_property.addEBObserversFrom (self.mObserversOf_backComponentValueSegments)
        self.mValue?.backComponentValuesBezierPaths_property.addEBObserversFrom (self.mObserversOf_backComponentValuesBezierPaths)
        self.mValue?.backLayoutTextsBezierPaths_property.addEBObserversFrom (self.mObserversOf_backLayoutTextsBezierPaths)
        self.mValue?.backLayoutTextsSegments_property.addEBObserversFrom (self.mObserversOf_backLayoutTextsSegments)
        self.mValue?.backLegendLinesBezierPaths_property.addEBObserversFrom (self.mObserversOf_backLegendLinesBezierPaths)
        self.mValue?.backLegendLinesSegments_property.addEBObserversFrom (self.mObserversOf_backLegendLinesSegments)
        self.mValue?.backLegendTextsBezierPaths_property.addEBObserversFrom (self.mObserversOf_backLegendTextsBezierPaths)
        self.mValue?.backLegendTextsSegments_property.addEBObserversFrom (self.mObserversOf_backLegendTextsSegments)
        self.mValue?.backPackagesBezierPaths_property.addEBObserversFrom (self.mObserversOf_backPackagesBezierPaths)
        self.mValue?.backPackagesSegments_property.addEBObserversFrom (self.mObserversOf_backPackagesSegments)
        self.mValue?.backPadArray_property.addEBObserversFrom (self.mObserversOf_backPadArray)
        self.mValue?.backPadsBezierPaths_property.addEBObserversFrom (self.mObserversOf_backPadsBezierPaths)
        self.mValue?.backTrackSegments_property.addEBObserversFrom (self.mObserversOf_backTrackSegments)
        self.mValue?.backTracksBezierPaths_property.addEBObserversFrom (self.mObserversOf_backTracksBezierPaths)
        self.mValue?.boardLimits_property.addEBObserversFrom (self.mObserversOf_boardLimits)
        self.mValue?.boardLimitsBezierPaths_property.addEBObserversFrom (self.mObserversOf_boardLimitsBezierPaths)
        self.mValue?.drillSegments_property.addEBObserversFrom (self.mObserversOf_drillSegments)
        self.mValue?.frontComponentNameSegments_property.addEBObserversFrom (self.mObserversOf_frontComponentNameSegments)
        self.mValue?.frontComponentNamesBezierPaths_property.addEBObserversFrom (self.mObserversOf_frontComponentNamesBezierPaths)
        self.mValue?.frontComponentValueSegments_property.addEBObserversFrom (self.mObserversOf_frontComponentValueSegments)
        self.mValue?.frontComponentValuesBezierPaths_property.addEBObserversFrom (self.mObserversOf_frontComponentValuesBezierPaths)
        self.mValue?.frontLayoutTextsBezierPaths_property.addEBObserversFrom (self.mObserversOf_frontLayoutTextsBezierPaths)
        self.mValue?.frontLayoutTextsSegments_property.addEBObserversFrom (self.mObserversOf_frontLayoutTextsSegments)
        self.mValue?.frontLegendLinesBezierPaths_property.addEBObserversFrom (self.mObserversOf_frontLegendLinesBezierPaths)
        self.mValue?.frontLegendLinesSegments_property.addEBObserversFrom (self.mObserversOf_frontLegendLinesSegments)
        self.mValue?.frontLegendTextsBezierPaths_property.addEBObserversFrom (self.mObserversOf_frontLegendTextsBezierPaths)
        self.mValue?.frontLegendTextsSegments_property.addEBObserversFrom (self.mObserversOf_frontLegendTextsSegments)
        self.mValue?.frontPackagesBezierPaths_property.addEBObserversFrom (self.mObserversOf_frontPackagesBezierPaths)
        self.mValue?.frontPackagesSegments_property.addEBObserversFrom (self.mObserversOf_frontPackagesSegments)
        self.mValue?.frontPadArray_property.addEBObserversFrom (self.mObserversOf_frontPadArray)
        self.mValue?.frontPadsBezierPaths_property.addEBObserversFrom (self.mObserversOf_frontPadsBezierPaths)
        self.mValue?.frontTrackSegments_property.addEBObserversFrom (self.mObserversOf_frontTrackSegments)
        self.mValue?.frontTracksBezierPaths_property.addEBObserversFrom (self.mObserversOf_frontTracksBezierPaths)
        self.mValue?.holesBezierPaths_property.addEBObserversFrom (self.mObserversOf_holesBezierPaths)
        self.mValue?.imageForInstances_property.addEBObserversFrom (self.mObserversOf_imageForInstances)
        self.mValue?.imageForModel_property.addEBObserversFrom (self.mObserversOf_imageForModel)
        self.mValue?.internalBoardsLimitsBezierPaths_property.addEBObserversFrom (self.mObserversOf_internalBoardsLimitsBezierPaths)
        self.mValue?.internalBoardsLimitsSegments_property.addEBObserversFrom (self.mObserversOf_internalBoardsLimitsSegments)
        self.mValue?.modelHeight_property.addEBObserversFrom (self.mObserversOf_modelHeight)
        self.mValue?.modelHeightUnit_property.addEBObserversFrom (self.mObserversOf_modelHeightUnit)
        self.mValue?.modelLimitWidth_property.addEBObserversFrom (self.mObserversOf_modelLimitWidth)
        self.mValue?.modelLimitWidthUnit_property.addEBObserversFrom (self.mObserversOf_modelLimitWidthUnit)
        self.mValue?.modelWidth_property.addEBObserversFrom (self.mObserversOf_modelWidth)
        self.mValue?.modelWidthUnit_property.addEBObserversFrom (self.mObserversOf_modelWidthUnit)
        self.mValue?.name_property.addEBObserversFrom (self.mObserversOf_name)
        self.mValue?.viaShapes_property.addEBObserversFrom (self.mObserversOf_viaShapes)
        self.mValue?.viasBezierPaths_property.addEBObserversFrom (self.mObserversOf_viasBezierPaths)
        self.mValue?.zoom_property.addEBObserversFrom (self.mObserversOf_zoom)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : BoardModel? { get { return self.mValue } }

  var prop : EBSelection <BoardModel?> { get { return .single (self.mValue) } }

  func setProp (_ value : BoardModel?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : BoardModel?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : BoardModel) {
    if self.mValue === object {
      self.mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : BoardModel) {
    self.mValue = object
  }

  //····················································································································
  //   Observable property: backComponentNameSegments
  //····················································································································

  private var mObserversOf_backComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  var backComponentNameSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentNameSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentNameSegments.insert (inObserver)
    if let object = self.propval {
      object.backComponentNameSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNameSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentNameSegments.remove (inObserver)
    if let object = self.propval {
      object.backComponentNameSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentNamesBezierPaths
  //····················································································································

  private var mObserversOf_backComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentNamesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentNamesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backComponentNamesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentNamesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backComponentNamesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentValueSegments
  //····················································································································

  private var mObserversOf_backComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  var backComponentValueSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentValueSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentValueSegments.insert (inObserver)
    if let object = self.propval {
      object.backComponentValueSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValueSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentValueSegments.remove (inObserver)
    if let object = self.propval {
      object.backComponentValueSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backComponentValuesBezierPaths
  //····················································································································

  private var mObserversOf_backComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backComponentValuesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentValuesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backComponentValuesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backComponentValuesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backComponentValuesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLayoutTextsBezierPaths
  //····················································································································

  private var mObserversOf_backLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backLayoutTextsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backLayoutTextsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTextsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backLayoutTextsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLayoutTextsSegments
  //····················································································································

  private var mObserversOf_backLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  var backLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLayoutTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backLayoutTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.backLayoutTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLayoutTextsSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backLayoutTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.backLayoutTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendLinesBezierPaths
  //····················································································································

  private var mObserversOf_backLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendLinesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendLinesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backLegendLinesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendLinesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backLegendLinesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendLinesSegments
  //····················································································································

  private var mObserversOf_backLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  var backLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendLinesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendLinesSegments.insert (inObserver)
    if let object = self.propval {
      object.backLegendLinesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendLinesSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendLinesSegments.remove (inObserver)
    if let object = self.propval {
      object.backLegendLinesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendTextsBezierPaths
  //····················································································································

  private var mObserversOf_backLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendTextsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendTextsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backLegendTextsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendTextsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backLegendTextsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backLegendTextsSegments
  //····················································································································

  private var mObserversOf_backLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  var backLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backLegendTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.backLegendTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backLegendTextsSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backLegendTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.backLegendTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPackagesBezierPaths
  //····················································································································

  private var mObserversOf_backPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backPackagesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backPackagesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backPackagesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backPackagesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backPackagesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backPackagesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPackagesSegments
  //····················································································································

  private var mObserversOf_backPackagesSegments = EBWeakEventSet ()

  //····················································································································

  var backPackagesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backPackagesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backPackagesSegments.insert (inObserver)
    if let object = self.propval {
      object.backPackagesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPackagesSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backPackagesSegments.remove (inObserver)
    if let object = self.propval {
      object.backPackagesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPadArray
  //····················································································································

  private var mObserversOf_backPadArray = EBWeakEventSet ()

  //····················································································································

  var backPadArray_property_selection : EBSelection <MergerPadArray?> {
    get {
      if let model = self.propval {
        switch (model.backPadArray_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPadArray (_ inObserver : EBEvent) {
    self.mObserversOf_backPadArray.insert (inObserver)
    if let object = self.propval {
      object.backPadArray_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadArray (_ inObserver : EBEvent) {
    self.mObserversOf_backPadArray.remove (inObserver)
    if let object = self.propval {
      object.backPadArray_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backPadsBezierPaths
  //····················································································································

  private var mObserversOf_backPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backPadsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backPadsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backPadsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backPadsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backPadsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backPadsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backPadsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backTrackSegments
  //····················································································································

  private var mObserversOf_backTrackSegments = EBWeakEventSet ()

  //····················································································································

  var backTrackSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.backTrackSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backTrackSegments.insert (inObserver)
    if let object = self.propval {
      object.backTrackSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTrackSegments (_ inObserver : EBEvent) {
    self.mObserversOf_backTrackSegments.remove (inObserver)
    if let object = self.propval {
      object.backTrackSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: backTracksBezierPaths
  //····················································································································

  private var mObserversOf_backTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  var backTracksBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.backTracksBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backTracksBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.backTracksBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backTracksBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_backTracksBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.backTracksBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimits
  //····················································································································

  private var mObserversOf_boardLimits = EBWeakEventSet ()

  //····················································································································

  var boardLimits_property_selection : EBSelection <MergerBoardLimits?> {
    get {
      if let model = self.propval {
        switch (model.boardLimits_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.mObserversOf_boardLimits.insert (inObserver)
    if let object = self.propval {
      object.boardLimits_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimits (_ inObserver : EBEvent) {
    self.mObserversOf_boardLimits.remove (inObserver)
    if let object = self.propval {
      object.boardLimits_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitsBezierPaths
  //····················································································································

  private var mObserversOf_boardLimitsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var boardLimitsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_boardLimitsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.boardLimitsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_boardLimitsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.boardLimitsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: drillSegments
  //····················································································································

  private var mObserversOf_drillSegments = EBWeakEventSet ()

  //····················································································································

  var drillSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.drillSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_drillSegments (_ inObserver : EBEvent) {
    self.mObserversOf_drillSegments.insert (inObserver)
    if let object = self.propval {
      object.drillSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillSegments (_ inObserver : EBEvent) {
    self.mObserversOf_drillSegments.remove (inObserver)
    if let object = self.propval {
      object.drillSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentNameSegments
  //····················································································································

  private var mObserversOf_frontComponentNameSegments = EBWeakEventSet ()

  //····················································································································

  var frontComponentNameSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentNameSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentNameSegments.insert (inObserver)
    if let object = self.propval {
      object.frontComponentNameSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNameSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentNameSegments.remove (inObserver)
    if let object = self.propval {
      object.frontComponentNameSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentNamesBezierPaths
  //····················································································································

  private var mObserversOf_frontComponentNamesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontComponentNamesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentNamesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentNamesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontComponentNamesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentNamesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentNamesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontComponentNamesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentValueSegments
  //····················································································································

  private var mObserversOf_frontComponentValueSegments = EBWeakEventSet ()

  //····················································································································

  var frontComponentValueSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentValueSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentValueSegments.insert (inObserver)
    if let object = self.propval {
      object.frontComponentValueSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValueSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentValueSegments.remove (inObserver)
    if let object = self.propval {
      object.frontComponentValueSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontComponentValuesBezierPaths
  //····················································································································

  private var mObserversOf_frontComponentValuesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontComponentValuesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontComponentValuesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentValuesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontComponentValuesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontComponentValuesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontComponentValuesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontComponentValuesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLayoutTextsBezierPaths
  //····················································································································

  private var mObserversOf_frontLayoutTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontLayoutTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLayoutTextsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontLayoutTextsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontLayoutTextsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLayoutTextsSegments
  //····················································································································

  private var mObserversOf_frontLayoutTextsSegments = EBWeakEventSet ()

  //····················································································································

  var frontLayoutTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLayoutTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontLayoutTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLayoutTextsSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontLayoutTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.frontLayoutTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendLinesBezierPaths
  //····················································································································

  private var mObserversOf_frontLegendLinesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontLegendLinesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendLinesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendLinesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontLegendLinesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendLinesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontLegendLinesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendLinesSegments
  //····················································································································

  private var mObserversOf_frontLegendLinesSegments = EBWeakEventSet ()

  //····················································································································

  var frontLegendLinesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendLinesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendLinesSegments.insert (inObserver)
    if let object = self.propval {
      object.frontLegendLinesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendLinesSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendLinesSegments.remove (inObserver)
    if let object = self.propval {
      object.frontLegendLinesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendTextsBezierPaths
  //····················································································································

  private var mObserversOf_frontLegendTextsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontLegendTextsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendTextsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendTextsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTextsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendTextsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTextsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontLegendTextsSegments
  //····················································································································

  private var mObserversOf_frontLegendTextsSegments = EBWeakEventSet ()

  //····················································································································

  var frontLegendTextsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontLegendTextsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendTextsSegments.insert (inObserver)
    if let object = self.propval {
      object.frontLegendTextsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontLegendTextsSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontLegendTextsSegments.remove (inObserver)
    if let object = self.propval {
      object.frontLegendTextsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPackagesBezierPaths
  //····················································································································

  private var mObserversOf_frontPackagesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontPackagesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPackagesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontPackagesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontPackagesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontPackagesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontPackagesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPackagesSegments
  //····················································································································

  private var mObserversOf_frontPackagesSegments = EBWeakEventSet ()

  //····················································································································

  var frontPackagesSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPackagesSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontPackagesSegments.insert (inObserver)
    if let object = self.propval {
      object.frontPackagesSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPackagesSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontPackagesSegments.remove (inObserver)
    if let object = self.propval {
      object.frontPackagesSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPadArray
  //····················································································································

  private var mObserversOf_frontPadArray = EBWeakEventSet ()

  //····················································································································

  var frontPadArray_property_selection : EBSelection <MergerPadArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPadArray_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPadArray (_ inObserver : EBEvent) {
    self.mObserversOf_frontPadArray.insert (inObserver)
    if let object = self.propval {
      object.frontPadArray_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadArray (_ inObserver : EBEvent) {
    self.mObserversOf_frontPadArray.remove (inObserver)
    if let object = self.propval {
      object.frontPadArray_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontPadsBezierPaths
  //····················································································································

  private var mObserversOf_frontPadsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontPadsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontPadsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontPadsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontPadsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontPadsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontPadsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontPadsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontTrackSegments
  //····················································································································

  private var mObserversOf_frontTrackSegments = EBWeakEventSet ()

  //····················································································································

  var frontTrackSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.frontTrackSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontTrackSegments.insert (inObserver)
    if let object = self.propval {
      object.frontTrackSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTrackSegments (_ inObserver : EBEvent) {
    self.mObserversOf_frontTrackSegments.remove (inObserver)
    if let object = self.propval {
      object.frontTrackSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontTracksBezierPaths
  //····················································································································

  private var mObserversOf_frontTracksBezierPaths = EBWeakEventSet ()

  //····················································································································

  var frontTracksBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.frontTracksBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontTracksBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.frontTracksBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontTracksBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_frontTracksBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.frontTracksBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: holesBezierPaths
  //····················································································································

  private var mObserversOf_holesBezierPaths = EBWeakEventSet ()

  //····················································································································

  var holesBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.holesBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_holesBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.holesBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_holesBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_holesBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.holesBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: imageForInstances
  //····················································································································

  private var mObserversOf_imageForInstances = EBWeakEventSet ()

  //····················································································································

  var imageForInstances_property_selection : EBSelection <EBShape?> {
    get {
      if let model = self.propval {
        switch (model.imageForInstances_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    self.mObserversOf_imageForInstances.insert (inObserver)
    if let object = self.propval {
      object.imageForInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageForInstances (_ inObserver : EBEvent) {
    self.mObserversOf_imageForInstances.remove (inObserver)
    if let object = self.propval {
      object.imageForInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: imageForModel
  //····················································································································

  private var mObserversOf_imageForModel = EBWeakEventSet ()

  //····················································································································

  var imageForModel_property_selection : EBSelection <EBShape?> {
    get {
      if let model = self.propval {
        switch (model.imageForModel_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_imageForModel (_ inObserver : EBEvent) {
    self.mObserversOf_imageForModel.insert (inObserver)
    if let object = self.propval {
      object.imageForModel_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageForModel (_ inObserver : EBEvent) {
    self.mObserversOf_imageForModel.remove (inObserver)
    if let object = self.propval {
      object.imageForModel_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: internalBoardsLimitsBezierPaths
  //····················································································································

  private var mObserversOf_internalBoardsLimitsBezierPaths = EBWeakEventSet ()

  //····················································································································

  var internalBoardsLimitsBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.internalBoardsLimitsBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_internalBoardsLimitsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_internalBoardsLimitsBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.internalBoardsLimitsBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_internalBoardsLimitsBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_internalBoardsLimitsBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.internalBoardsLimitsBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: internalBoardsLimitsSegments
  //····················································································································

  private var mObserversOf_internalBoardsLimitsSegments = EBWeakEventSet ()

  //····················································································································

  var internalBoardsLimitsSegments_property_selection : EBSelection <MergerSegmentArray?> {
    get {
      if let model = self.propval {
        switch (model.internalBoardsLimitsSegments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_internalBoardsLimitsSegments (_ inObserver : EBEvent) {
    self.mObserversOf_internalBoardsLimitsSegments.insert (inObserver)
    if let object = self.propval {
      object.internalBoardsLimitsSegments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_internalBoardsLimitsSegments (_ inObserver : EBEvent) {
    self.mObserversOf_internalBoardsLimitsSegments.remove (inObserver)
    if let object = self.propval {
      object.internalBoardsLimitsSegments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelHeight
  //····················································································································

  private var mObserversOf_modelHeight = EBWeakEventSet ()

  //····················································································································

  var modelHeight_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelHeight_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    self.mObserversOf_modelHeight.insert (inObserver)
    if let object = self.propval {
      object.modelHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeight (_ inObserver : EBEvent) {
    self.mObserversOf_modelHeight.remove (inObserver)
    if let object = self.propval {
      object.modelHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelHeightUnit
  //····················································································································

  private var mObserversOf_modelHeightUnit = EBWeakEventSet ()

  //····················································································································

  var modelHeightUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelHeightUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    self.mObserversOf_modelHeightUnit.insert (inObserver)
    if let object = self.propval {
      object.modelHeightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelHeightUnit (_ inObserver : EBEvent) {
    self.mObserversOf_modelHeightUnit.remove (inObserver)
    if let object = self.propval {
      object.modelHeightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelLimitWidth
  //····················································································································

  private var mObserversOf_modelLimitWidth = EBWeakEventSet ()

  //····················································································································

  var modelLimitWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelLimitWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    self.mObserversOf_modelLimitWidth.insert (inObserver)
    if let object = self.propval {
      object.modelLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidth (_ inObserver : EBEvent) {
    self.mObserversOf_modelLimitWidth.remove (inObserver)
    if let object = self.propval {
      object.modelLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelLimitWidthUnit
  //····················································································································

  private var mObserversOf_modelLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  var modelLimitWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelLimitWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_modelLimitWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.modelLimitWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelLimitWidthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_modelLimitWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.modelLimitWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelWidth
  //····················································································································

  private var mObserversOf_modelWidth = EBWeakEventSet ()

  //····················································································································

  var modelWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    self.mObserversOf_modelWidth.insert (inObserver)
    if let object = self.propval {
      object.modelWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidth (_ inObserver : EBEvent) {
    self.mObserversOf_modelWidth.remove (inObserver)
    if let object = self.propval {
      object.modelWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelWidthUnit
  //····················································································································

  private var mObserversOf_modelWidthUnit = EBWeakEventSet ()

  //····················································································································

  var modelWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.modelWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_modelWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.modelWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelWidthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_modelWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.modelWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: name
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  var name_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.name_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.mObserversOf_name.insert (inObserver)
    if let object = self.propval {
      object.name_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.mObserversOf_name.remove (inObserver)
    if let object = self.propval {
      object.name_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: viaShapes
  //····················································································································

  private var mObserversOf_viaShapes = EBWeakEventSet ()

  //····················································································································

  var viaShapes_property_selection : EBSelection <MergerViaShapeArray?> {
    get {
      if let model = self.propval {
        switch (model.viaShapes_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.mObserversOf_viaShapes.insert (inObserver)
    if let object = self.propval {
      object.viaShapes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaShapes (_ inObserver : EBEvent) {
    self.mObserversOf_viaShapes.remove (inObserver)
    if let object = self.propval {
      object.viaShapes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: viasBezierPaths
  //····················································································································

  private var mObserversOf_viasBezierPaths = EBWeakEventSet ()

  //····················································································································

  var viasBezierPaths_property_selection : EBSelection <BezierPathArray?> {
    get {
      if let model = self.propval {
        switch (model.viasBezierPaths_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_viasBezierPaths.insert (inObserver)
    if let object = self.propval {
      object.viasBezierPaths_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viasBezierPaths (_ inObserver : EBEvent) {
    self.mObserversOf_viasBezierPaths.remove (inObserver)
    if let object = self.propval {
      object.viasBezierPaths_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: zoom
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  var zoom_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.zoom_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.mObserversOf_zoom.insert (inObserver)
    if let object = self.propval {
      object.zoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.mObserversOf_zoom.remove (inObserver)
    if let object = self.propval {
      object.zoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: myRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_MergerBoardInstance_myRoot : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : MergerBoardInstance? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  weak private var mValue : MergerRoot? { // SOULD BE WEAK
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.boardInstances_property.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = self.mValue {
          unwrappedValue.boardInstances_property.add (unwrappedOwner)
        }
      //--- Remove property observers of old object
        oldValue?.arrowMagnitude_property.removeEBObserversFrom (self.mObserversOf_arrowMagnitude)
        oldValue?.arrowMagnitudeUnit_property.removeEBObserversFrom (self.mObserversOf_arrowMagnitudeUnit)
        oldValue?.artworkName_property.removeEBObserversFrom (self.mObserversOf_artworkName)
        oldValue?.automaticBoardSize_property.removeEBObserversFrom (self.mObserversOf_automaticBoardSize)
        oldValue?.boardDisplayRect_property.removeEBObserversFrom (self.mObserversOf_boardDisplayRect)
        oldValue?.boardHeight_property.removeEBObserversFrom (self.mObserversOf_boardHeight)
        oldValue?.boardHeightUnit_property.removeEBObserversFrom (self.mObserversOf_boardHeightUnit)
        oldValue?.boardLimitWidth_property.removeEBObserversFrom (self.mObserversOf_boardLimitWidth)
        oldValue?.boardLimitWidthUnit_property.removeEBObserversFrom (self.mObserversOf_boardLimitWidthUnit)
        oldValue?.boardManualHeight_property.removeEBObserversFrom (self.mObserversOf_boardManualHeight)
        oldValue?.boardManualWidth_property.removeEBObserversFrom (self.mObserversOf_boardManualWidth)
        oldValue?.boardRect_property.removeEBObserversFrom (self.mObserversOf_boardRect)
        oldValue?.boardWidth_property.removeEBObserversFrom (self.mObserversOf_boardWidth)
        oldValue?.boardWidthUnit_property.removeEBObserversFrom (self.mObserversOf_boardWidthUnit)
        oldValue?.generateGerberProductFile_property.removeEBObserversFrom (self.mObserversOf_generateGerberProductFile)
        oldValue?.generatePDFProductFile_property.removeEBObserversFrom (self.mObserversOf_generatePDFProductFile)
        oldValue?.generatedBoardArchiveFormat_property.removeEBObserversFrom (self.mObserversOf_generatedBoardArchiveFormat)
        oldValue?.modelNames_property.removeEBObserversFrom (self.mObserversOf_modelNames)
        oldValue?.overlapingArrangment_property.removeEBObserversFrom (self.mObserversOf_overlapingArrangment)
        oldValue?.selectedBoardXUnit_property.removeEBObserversFrom (self.mObserversOf_selectedBoardXUnit)
        oldValue?.selectedBoardYUnit_property.removeEBObserversFrom (self.mObserversOf_selectedBoardYUnit)
        oldValue?.selectedPageIndex_property.removeEBObserversFrom (self.mObserversOf_selectedPageIndex)
        oldValue?.shiftArrowMagnitude_property.removeEBObserversFrom (self.mObserversOf_shiftArrowMagnitude)
        oldValue?.shiftArrowMagnitudeUnit_property.removeEBObserversFrom (self.mObserversOf_shiftArrowMagnitudeUnit)
        oldValue?.zoom_property.removeEBObserversFrom (self.mObserversOf_zoom)
      //--- Add property observers to new object
        self.mValue?.arrowMagnitude_property.addEBObserversFrom (self.mObserversOf_arrowMagnitude)
        self.mValue?.arrowMagnitudeUnit_property.addEBObserversFrom (self.mObserversOf_arrowMagnitudeUnit)
        self.mValue?.artworkName_property.addEBObserversFrom (self.mObserversOf_artworkName)
        self.mValue?.automaticBoardSize_property.addEBObserversFrom (self.mObserversOf_automaticBoardSize)
        self.mValue?.boardDisplayRect_property.addEBObserversFrom (self.mObserversOf_boardDisplayRect)
        self.mValue?.boardHeight_property.addEBObserversFrom (self.mObserversOf_boardHeight)
        self.mValue?.boardHeightUnit_property.addEBObserversFrom (self.mObserversOf_boardHeightUnit)
        self.mValue?.boardLimitWidth_property.addEBObserversFrom (self.mObserversOf_boardLimitWidth)
        self.mValue?.boardLimitWidthUnit_property.addEBObserversFrom (self.mObserversOf_boardLimitWidthUnit)
        self.mValue?.boardManualHeight_property.addEBObserversFrom (self.mObserversOf_boardManualHeight)
        self.mValue?.boardManualWidth_property.addEBObserversFrom (self.mObserversOf_boardManualWidth)
        self.mValue?.boardRect_property.addEBObserversFrom (self.mObserversOf_boardRect)
        self.mValue?.boardWidth_property.addEBObserversFrom (self.mObserversOf_boardWidth)
        self.mValue?.boardWidthUnit_property.addEBObserversFrom (self.mObserversOf_boardWidthUnit)
        self.mValue?.generateGerberProductFile_property.addEBObserversFrom (self.mObserversOf_generateGerberProductFile)
        self.mValue?.generatePDFProductFile_property.addEBObserversFrom (self.mObserversOf_generatePDFProductFile)
        self.mValue?.generatedBoardArchiveFormat_property.addEBObserversFrom (self.mObserversOf_generatedBoardArchiveFormat)
        self.mValue?.modelNames_property.addEBObserversFrom (self.mObserversOf_modelNames)
        self.mValue?.overlapingArrangment_property.addEBObserversFrom (self.mObserversOf_overlapingArrangment)
        self.mValue?.selectedBoardXUnit_property.addEBObserversFrom (self.mObserversOf_selectedBoardXUnit)
        self.mValue?.selectedBoardYUnit_property.addEBObserversFrom (self.mObserversOf_selectedBoardYUnit)
        self.mValue?.selectedPageIndex_property.addEBObserversFrom (self.mObserversOf_selectedPageIndex)
        self.mValue?.shiftArrowMagnitude_property.addEBObserversFrom (self.mObserversOf_shiftArrowMagnitude)
        self.mValue?.shiftArrowMagnitudeUnit_property.addEBObserversFrom (self.mObserversOf_shiftArrowMagnitudeUnit)
        self.mValue?.zoom_property.addEBObserversFrom (self.mObserversOf_zoom)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : MergerRoot? { get { return self.mValue } }

  var prop : EBSelection <MergerRoot?> { get { return .single (self.mValue) } }

  func setProp (_ value : MergerRoot?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : MergerRoot?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MergerRoot) {
    if self.mValue === object {
      self.mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : MergerRoot) {
    self.mValue = object
  }

  //····················································································································
  //   Observable property: arrowMagnitude
  //····················································································································

  private var mObserversOf_arrowMagnitude = EBWeakEventSet ()

  //····················································································································

  var arrowMagnitude_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.arrowMagnitude_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.mObserversOf_arrowMagnitude.insert (inObserver)
    if let object = self.propval {
      object.arrowMagnitude_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitude (_ inObserver : EBEvent) {
    self.mObserversOf_arrowMagnitude.remove (inObserver)
    if let object = self.propval {
      object.arrowMagnitude_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: arrowMagnitudeUnit
  //····················································································································

  private var mObserversOf_arrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  var arrowMagnitudeUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.arrowMagnitudeUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.mObserversOf_arrowMagnitudeUnit.insert (inObserver)
    if let object = self.propval {
      object.arrowMagnitudeUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_arrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.mObserversOf_arrowMagnitudeUnit.remove (inObserver)
    if let object = self.propval {
      object.arrowMagnitudeUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: artworkName
  //····················································································································

  private var mObserversOf_artworkName = EBWeakEventSet ()

  //····················································································································

  var artworkName_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.artworkName_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.mObserversOf_artworkName.insert (inObserver)
    if let object = self.propval {
      object.artworkName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_artworkName (_ inObserver : EBEvent) {
    self.mObserversOf_artworkName.remove (inObserver)
    if let object = self.propval {
      object.artworkName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: automaticBoardSize
  //····················································································································

  private var mObserversOf_automaticBoardSize = EBWeakEventSet ()

  //····················································································································

  var automaticBoardSize_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.automaticBoardSize_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.mObserversOf_automaticBoardSize.insert (inObserver)
    if let object = self.propval {
      object.automaticBoardSize_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_automaticBoardSize (_ inObserver : EBEvent) {
    self.mObserversOf_automaticBoardSize.remove (inObserver)
    if let object = self.propval {
      object.automaticBoardSize_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardDisplayRect
  //····················································································································

  private var mObserversOf_boardDisplayRect = EBWeakEventSet ()

  //····················································································································

  var boardDisplayRect_property_selection : EBSelection <CanariRect?> {
    get {
      if let model = self.propval {
        switch (model.boardDisplayRect_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.mObserversOf_boardDisplayRect.insert (inObserver)
    if let object = self.propval {
      object.boardDisplayRect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardDisplayRect (_ inObserver : EBEvent) {
    self.mObserversOf_boardDisplayRect.remove (inObserver)
    if let object = self.propval {
      object.boardDisplayRect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardHeight
  //····················································································································

  private var mObserversOf_boardHeight = EBWeakEventSet ()

  //····················································································································

  var boardHeight_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardHeight_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.mObserversOf_boardHeight.insert (inObserver)
    if let object = self.propval {
      object.boardHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeight (_ inObserver : EBEvent) {
    self.mObserversOf_boardHeight.remove (inObserver)
    if let object = self.propval {
      object.boardHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardHeightUnit
  //····················································································································

  private var mObserversOf_boardHeightUnit = EBWeakEventSet ()

  //····················································································································

  var boardHeightUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardHeightUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.mObserversOf_boardHeightUnit.insert (inObserver)
    if let object = self.propval {
      object.boardHeightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardHeightUnit (_ inObserver : EBEvent) {
    self.mObserversOf_boardHeightUnit.remove (inObserver)
    if let object = self.propval {
      object.boardHeightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitWidth
  //····················································································································

  private var mObserversOf_boardLimitWidth = EBWeakEventSet ()

  //····················································································································

  var boardLimitWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.mObserversOf_boardLimitWidth.insert (inObserver)
    if let object = self.propval {
      object.boardLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidth (_ inObserver : EBEvent) {
    self.mObserversOf_boardLimitWidth.remove (inObserver)
    if let object = self.propval {
      object.boardLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardLimitWidthUnit
  //····················································································································

  private var mObserversOf_boardLimitWidthUnit = EBWeakEventSet ()

  //····················································································································

  var boardLimitWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardLimitWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_boardLimitWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.boardLimitWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitWidthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_boardLimitWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.boardLimitWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardManualHeight
  //····················································································································

  private var mObserversOf_boardManualHeight = EBWeakEventSet ()

  //····················································································································

  var boardManualHeight_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardManualHeight_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.mObserversOf_boardManualHeight.insert (inObserver)
    if let object = self.propval {
      object.boardManualHeight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualHeight (_ inObserver : EBEvent) {
    self.mObserversOf_boardManualHeight.remove (inObserver)
    if let object = self.propval {
      object.boardManualHeight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardManualWidth
  //····················································································································

  private var mObserversOf_boardManualWidth = EBWeakEventSet ()

  //····················································································································

  var boardManualWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardManualWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.mObserversOf_boardManualWidth.insert (inObserver)
    if let object = self.propval {
      object.boardManualWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardManualWidth (_ inObserver : EBEvent) {
    self.mObserversOf_boardManualWidth.remove (inObserver)
    if let object = self.propval {
      object.boardManualWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardRect
  //····················································································································

  private var mObserversOf_boardRect = EBWeakEventSet ()

  //····················································································································

  var boardRect_property_selection : EBSelection <CanariRect?> {
    get {
      if let model = self.propval {
        switch (model.boardRect_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.mObserversOf_boardRect.insert (inObserver)
    if let object = self.propval {
      object.boardRect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardRect (_ inObserver : EBEvent) {
    self.mObserversOf_boardRect.remove (inObserver)
    if let object = self.propval {
      object.boardRect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardWidth
  //····················································································································

  private var mObserversOf_boardWidth = EBWeakEventSet ()

  //····················································································································

  var boardWidth_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardWidth_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.mObserversOf_boardWidth.insert (inObserver)
    if let object = self.propval {
      object.boardWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidth (_ inObserver : EBEvent) {
    self.mObserversOf_boardWidth.remove (inObserver)
    if let object = self.propval {
      object.boardWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: boardWidthUnit
  //····················································································································

  private var mObserversOf_boardWidthUnit = EBWeakEventSet ()

  //····················································································································

  var boardWidthUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.boardWidthUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_boardWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.boardWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardWidthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_boardWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.boardWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: generateGerberProductFile
  //····················································································································

  private var mObserversOf_generateGerberProductFile = EBWeakEventSet ()

  //····················································································································

  var generateGerberProductFile_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.generateGerberProductFile_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    self.mObserversOf_generateGerberProductFile.insert (inObserver)
    if let object = self.propval {
      object.generateGerberProductFile_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generateGerberProductFile (_ inObserver : EBEvent) {
    self.mObserversOf_generateGerberProductFile.remove (inObserver)
    if let object = self.propval {
      object.generateGerberProductFile_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: generatePDFProductFile
  //····················································································································

  private var mObserversOf_generatePDFProductFile = EBWeakEventSet ()

  //····················································································································

  var generatePDFProductFile_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.generatePDFProductFile_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    self.mObserversOf_generatePDFProductFile.insert (inObserver)
    if let object = self.propval {
      object.generatePDFProductFile_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatePDFProductFile (_ inObserver : EBEvent) {
    self.mObserversOf_generatePDFProductFile.remove (inObserver)
    if let object = self.propval {
      object.generatePDFProductFile_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: generatedBoardArchiveFormat
  //····················································································································

  private var mObserversOf_generatedBoardArchiveFormat = EBWeakEventSet ()

  //····················································································································

  var generatedBoardArchiveFormat_property_selection : EBSelection <BoardArchiveFormat?> {
    get {
      if let model = self.propval {
        switch (model.generatedBoardArchiveFormat_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    self.mObserversOf_generatedBoardArchiveFormat.insert (inObserver)
    if let object = self.propval {
      object.generatedBoardArchiveFormat_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_generatedBoardArchiveFormat (_ inObserver : EBEvent) {
    self.mObserversOf_generatedBoardArchiveFormat.remove (inObserver)
    if let object = self.propval {
      object.generatedBoardArchiveFormat_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: modelNames
  //····················································································································

  private var mObserversOf_modelNames = EBWeakEventSet ()

  //····················································································································

  var modelNames_property_selection : EBSelection <StringArray?> {
    get {
      if let model = self.propval {
        switch (model.modelNames_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.mObserversOf_modelNames.insert (inObserver)
    if let object = self.propval {
      object.modelNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_modelNames (_ inObserver : EBEvent) {
    self.mObserversOf_modelNames.remove (inObserver)
    if let object = self.propval {
      object.modelNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: overlapingArrangment
  //····················································································································

  private var mObserversOf_overlapingArrangment = EBWeakEventSet ()

  //····················································································································

  var overlapingArrangment_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.overlapingArrangment_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.mObserversOf_overlapingArrangment.insert (inObserver)
    if let object = self.propval {
      object.overlapingArrangment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_overlapingArrangment (_ inObserver : EBEvent) {
    self.mObserversOf_overlapingArrangment.remove (inObserver)
    if let object = self.propval {
      object.overlapingArrangment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedBoardXUnit
  //····················································································································

  private var mObserversOf_selectedBoardXUnit = EBWeakEventSet ()

  //····················································································································

  var selectedBoardXUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.selectedBoardXUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.mObserversOf_selectedBoardXUnit.insert (inObserver)
    if let object = self.propval {
      object.selectedBoardXUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardXUnit (_ inObserver : EBEvent) {
    self.mObserversOf_selectedBoardXUnit.remove (inObserver)
    if let object = self.propval {
      object.selectedBoardXUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedBoardYUnit
  //····················································································································

  private var mObserversOf_selectedBoardYUnit = EBWeakEventSet ()

  //····················································································································

  var selectedBoardYUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.selectedBoardYUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.mObserversOf_selectedBoardYUnit.insert (inObserver)
    if let object = self.propval {
      object.selectedBoardYUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedBoardYUnit (_ inObserver : EBEvent) {
    self.mObserversOf_selectedBoardYUnit.remove (inObserver)
    if let object = self.propval {
      object.selectedBoardYUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedPageIndex
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.selectedPageIndex_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    if let object = self.propval {
      object.selectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    if let object = self.propval {
      object.selectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: shiftArrowMagnitude
  //····················································································································

  private var mObserversOf_shiftArrowMagnitude = EBWeakEventSet ()

  //····················································································································

  var shiftArrowMagnitude_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.shiftArrowMagnitude_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.mObserversOf_shiftArrowMagnitude.insert (inObserver)
    if let object = self.propval {
      object.shiftArrowMagnitude_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitude (_ inObserver : EBEvent) {
    self.mObserversOf_shiftArrowMagnitude.remove (inObserver)
    if let object = self.propval {
      object.shiftArrowMagnitude_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: shiftArrowMagnitudeUnit
  //····················································································································

  private var mObserversOf_shiftArrowMagnitudeUnit = EBWeakEventSet ()

  //····················································································································

  var shiftArrowMagnitudeUnit_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.shiftArrowMagnitudeUnit_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.mObserversOf_shiftArrowMagnitudeUnit.insert (inObserver)
    if let object = self.propval {
      object.shiftArrowMagnitudeUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_shiftArrowMagnitudeUnit (_ inObserver : EBEvent) {
    self.mObserversOf_shiftArrowMagnitudeUnit.remove (inObserver)
    if let object = self.propval {
      object.shiftArrowMagnitudeUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: zoom
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  var zoom_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.zoom_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.mObserversOf_zoom.insert (inObserver)
    if let object = self.propval {
      object.zoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.mObserversOf_zoom.remove (inObserver)
    if let object = self.propval {
      object.zoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
