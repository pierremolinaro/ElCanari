//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ViaShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ViaShape : ReadOnlyAbstractArrayProperty <ViaShape> {

  //····················································································································
  // Stored property 'x'
  //····················································································································

  private var mObserversOf_x = EBWeakEventSet ()

  final func addEBObserverOf_x (_ inObserver : EBEvent) {
    mObserversOf_x.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.x.addEBObserver (inObserver)
      }
    }
  }

  final func removeEBObserverOf_x (_ inObserver : EBEvent) {
    mObserversOf_x.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.x.removeEBObserver (inObserver)
      }
    }
  }

  final func addEBObserversOf_x_toElementsOfSet (_ inSet : Set<ViaShape>) {
    for managedObject in inSet {
      for observer in mObserversOf_x {
        managedObject.x.addEBObserver (observer)
      }
    }
  }

  final func removeEBObserversOf_x_fromElementsOfSet (_ inSet : Set<ViaShape>) {
    for observer in mObserversOf_x {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  // Stored property 'y'
  //····················································································································

  private var mObserversOf_y = EBWeakEventSet ()

  final func addEBObserverOf_y (_ inObserver : EBEvent) {
    mObserversOf_y.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.y.addEBObserver (inObserver)
      }
    }
  }

  final func removeEBObserverOf_y (_ inObserver : EBEvent) {
    mObserversOf_y.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.y.removeEBObserver (inObserver)
      }
    }
  }

  final func addEBObserversOf_y_toElementsOfSet (_ inSet : Set<ViaShape>) {
    for managedObject in inSet {
      for observer in mObserversOf_y {
        managedObject.y.addEBObserver (observer)
      }
    }
  }

  final func removeEBObserversOf_y_fromElementsOfSet (_ inSet : Set<ViaShape>) {
    for observer in mObserversOf_y {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  // Stored property 'padDiameter'
  //····················································································································

  private var mObserversOf_padDiameter = EBWeakEventSet ()

  final func addEBObserverOf_padDiameter (_ inObserver : EBEvent) {
    mObserversOf_padDiameter.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.padDiameter.addEBObserver (inObserver)
      }
    }
  }

  final func removeEBObserverOf_padDiameter (_ inObserver : EBEvent) {
    mObserversOf_padDiameter.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.padDiameter.removeEBObserver (inObserver)
      }
    }
  }

  final func addEBObserversOf_padDiameter_toElementsOfSet (_ inSet : Set<ViaShape>) {
    for managedObject in inSet {
      for observer in mObserversOf_padDiameter {
        managedObject.padDiameter.addEBObserver (observer)
      }
    }
  }

  final func removeEBObserversOf_padDiameter_fromElementsOfSet (_ inSet : Set<ViaShape>) {
    for observer in mObserversOf_padDiameter {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padDiameter.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_ViaShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ViaShape : ReadOnlyArrayOf_ViaShape {

  var readModelFunction : Optional<() -> EBProperty < [ViaShape] > >
 
  private var prop_cache : EBProperty < [ViaShape] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override var prop : EBProperty < [ViaShape] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ViaShape_x : class {
  var x : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ViaShape_y : class {
  var y : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ViaShape_padDiameter : class {
  var padDiameter : EBStoredProperty_Int { get }
}


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Array of class: ViaShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBClassArray_ViaShape : ReadOnlyArrayOf_ViaShape {

  //····················································································································

  func readInPreferencesWithKey (inKey : String) {
    let ud = UserDefaults.standard
    let value : Any? = ud.object (forKey: inKey)
    if let unwValue : Any = value {
      if let array : [NSDictionary] = unwValue as? [NSDictionary] {
        for dict in array {
          let object = ViaShape ()
          object.setUp (withDictionary: dict)
          mValue.append (object)
        }
      }
    }
  }

  //····················································································································

  func storeInPreferencesWithKey (inKey : String) {
    let ud = UserDefaults.standard
    var array = [NSDictionary] ()
    for object in mValue {
      let dict = NSMutableDictionary ()
      object.saveInto (dictionary: dict)
      array.append (dict)
    }
    ud.set (array, forKey:inKey)
  }

  //····················································································································

  private var mSet = Set<ViaShape> ()
  private var mValue = [ViaShape] () {
    didSet {
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Update explorer
       // if explorer != nil {
       //   owner?.updateManagedObjectToManyRelationshipDisplay (mValue, popUpButton:explorer!)
       // }
      //--- Removed object set
        let removedSet = oldSet.subtracting (mSet)
        removeEBObserversOf_x_fromElementsOfSet (removedSet)
        removeEBObserversOf_y_fromElementsOfSet (removedSet)
        removeEBObserversOf_padDiameter_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = mSet.subtracting (oldSet)
        addEBObserversOf_x_toElementsOfSet (addedSet)
        addEBObserversOf_y_toElementsOfSet (addedSet)
        addEBObserversOf_padDiameter_toElementsOfSet (addedSet)
      //--- Notify observers object count did change
        postEvent ()
/*        if oldValue.count != mValue.count {
          count.postEvent ()
        } */
      }
    }
  }

  //····················································································································

  override var prop : EBProperty < [ViaShape] > {
    get {
      return .singleSelection (mValue)
    }
  }

  //····················································································································

  func setProp (_ value:  [ViaShape]) { mValue = value }

  //····················································································································

  var propval : [ViaShape] { get { return mValue } }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Class: ViaShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ViaShape : EBSimpleClass, ViaShape_x, ViaShape_y, ViaShape_padDiameter
 {

  //····················································································································
  //    Properties
  //····················································································································

  var x = EBStoredProperty_Int (0)

  //····················································································································

  var y = EBStoredProperty_Int (0)

  //····················································································································

  var padDiameter = EBStoredProperty_Int (0)

  //····················································································································
  //    Transient properties
  //····················································································································


  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    init
  //····················································································································

  override init () {
    super.init ()
  //--- Install compute functions for transients
  //--- Install property observers for transients
  //--- Extern functions
  //--- Extern delegates
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "x",
      idx:self.x.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x.mObserverExplorer,
      valueExplorer:&self.x.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y",
      idx:self.y.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y.mObserverExplorer,
      valueExplorer:&self.y.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padDiameter",
      idx:self.padDiameter.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padDiameter.mObserverExplorer,
      valueExplorer:&self.padDiameter.mValueExplorer
    )
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.x.mObserverExplorer = nil
    self.x.mValueExplorer = nil
    self.y.mObserverExplorer = nil
    self.y.mValueExplorer = nil
    self.padDiameter.mObserverExplorer = nil
    self.padDiameter.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveInto (dictionary : NSMutableDictionary) {
    super.saveInto (dictionary: dictionary)
    self.x.storeIn (dictionary: dictionary, forKey: "x")
    self.y.storeIn (dictionary: dictionary, forKey: "y")
    self.padDiameter.storeIn (dictionary: dictionary, forKey: "padDiameter")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUp (withDictionary dictionary : NSDictionary) {
    super.setUp (withDictionary: dictionary)
    self.x.readFrom (dictionary: dictionary, forKey:"x")
    self.y.readFrom (dictionary: dictionary, forKey:"y")
    self.padDiameter.readFrom (dictionary: dictionary, forKey:"padDiameter")
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Class as transient property
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_ViaShape = EBReadOnlyClassProperty <ViaShape>
typealias EBTransientProperty_ViaShape = EBTransientClassProperty <ViaShape>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteProperty_ViaShape (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* class EBReadWriteProperty_ViaShape : EBReadOnlyProperty_ViaShape {
  func setProp (_ value: ViaShape) { } // Abstract method
  func validateAndSetProp (_ candidateValue : ViaShape, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyProxy_ViaShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* class EBPropertyProxy_ViaShape : EBReadWriteProperty_ViaShape {
  var readModelFunction : Optional < () -> EBProperty <ViaShape> >
  var writeModelFunction : Optional < (ViaShape) -> Void >
  var validateAndWriteModelFunction : Optional < (ViaShape, NSWindow?) -> Bool >
  
  private var prop_cache : EBProperty <ViaShape>?

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = "<< not handled>>"
    }
  }

  //····················································································································

  override func postEvent() {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent()
    }
  }

  //····················································································································

  override var prop : EBProperty <ViaShape> {
    get {
      if let unReadModelFunction = readModelFunction, prop_cache == nil {
        prop_cache = unReadModelFunction ()
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································
  
  override func setProp (_ value: ViaShape) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (value)
    }
  }

  //····················································································································

  override func validateAndSetProp (_ candidateValue : ViaShape,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredProperty_ViaShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class EBStoredProperty_ViaShape : EBReadWriteProperty_ViaShape {

  //····················································································································

  init (_ inValue : ViaShape) {
    mValue = inValue
    super.init ()
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = "<< not handled>>"
    }
  }

  //····················································································································

  private var mValue : ViaShape {
    didSet {
      if mValue != oldValue {
        mValueExplorer?.stringValue = "<< not handled>>"
        postEvent ()
      }
    }
  }

  //····················································································································

  override var prop : EBProperty <ViaShape> { get { return .singleSelection (mValue) } }

  var propval : ViaShape { get { return mValue } }

  override func setProp (_ value: ViaShape) { mValue = value }

  //····················································································································

} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

