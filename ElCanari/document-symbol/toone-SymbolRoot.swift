//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_SymbolRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_SymbolRoot : ReadOnlyAbstractObjectProperty <SymbolRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
  //--- Add observers to added objects
  }

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private final var selectedInspector_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  final var selectedInspector_property_selection : EBSelection <Int?> { // §
    return self.selectedInspector_property.selection
/*    if let model = self.propval {
      switch (model.selectedInspector_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.selectedInspector_property.addEBObserver (inObserver)
/*    self.mObserversOf_selectedInspector.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedInspector_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.selectedInspector_property.removeEBObserver (inObserver)
/*    self.mObserversOf_selectedInspector.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedInspector_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private final var comments_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final var comments_property_selection : EBSelection <String?> { // §
    return self.comments_property.selection
/*    if let model = self.propval {
      switch (model.comments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.comments_property.addEBObserver (inObserver)
/*    self.mObserversOf_comments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.comments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.comments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_comments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.comments_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'horizontalFlip' stored property
  //····················································································································

  private final var horizontalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_horizontalFlip = EBWeakEventSet ()

  //····················································································································

  final var horizontalFlip_property_selection : EBSelection <Bool?> { // §
    return self.horizontalFlip_property.selection
/*    if let model = self.propval {
      switch (model.horizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.horizontalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_horizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.horizontalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.horizontalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_horizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.horizontalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'verticalFlip' stored property
  //····················································································································

  private final var verticalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_verticalFlip = EBWeakEventSet ()

  //····················································································································

  final var verticalFlip_property_selection : EBSelection <Bool?> { // §
    return self.verticalFlip_property.selection
/*    if let model = self.propval {
      switch (model.verticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.verticalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_verticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.verticalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.verticalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_verticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.verticalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'gridStyle' stored property
  //····················································································································

  private final var gridStyle_property = EBGenericTransientProperty <GridStyle?> ()
//  private final var mObserversOf_gridStyle = EBWeakEventSet ()

  //····················································································································

  final var gridStyle_property_selection : EBSelection <GridStyle?> { // §
    return self.gridStyle_property.selection
/*    if let model = self.propval {
      switch (model.gridStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.gridStyle_property.addEBObserver (inObserver)
/*    self.mObserversOf_gridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.gridStyle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.gridStyle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_gridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridStyle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'gridDisplay' stored property
  //····················································································································

  private final var gridDisplay_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_gridDisplay = EBWeakEventSet ()

  //····················································································································

  final var gridDisplay_property_selection : EBSelection <Int?> { // §
    return self.gridDisplay_property.selection
/*    if let model = self.propval {
      switch (model.gridDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_gridDisplay (_ inObserver : EBEvent) {
    self.gridDisplay_property.addEBObserver (inObserver)
/*    self.mObserversOf_gridDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.gridDisplay_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_gridDisplay (_ inObserver : EBEvent) {
    self.gridDisplay_property.removeEBObserver (inObserver)
/*    self.mObserversOf_gridDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridDisplay_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private final var zoom_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final var zoom_property_selection : EBSelection <Int?> { // §
    return self.zoom_property.selection
/*    if let model = self.propval {
      switch (model.zoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.zoom_property.addEBObserver (inObserver)
/*    self.mObserversOf_zoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.zoom_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.zoom_property.removeEBObserver (inObserver)
/*    self.mObserversOf_zoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.zoom_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'xPlacardUnit' stored property
  //····················································································································

  private final var xPlacardUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_xPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final var xPlacardUnit_property_selection : EBSelection <Int?> { // §
    return self.xPlacardUnit_property.selection
/*    if let model = self.propval {
      switch (model.xPlacardUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.xPlacardUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_xPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xPlacardUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.xPlacardUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_xPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xPlacardUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'yPlacardUnit' stored property
  //····················································································································

  private final var yPlacardUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_yPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final var yPlacardUnit_property_selection : EBSelection <Int?> { // §
    return self.yPlacardUnit_property.selection
/*    if let model = self.propval {
      switch (model.yPlacardUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.yPlacardUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_yPlacardUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yPlacardUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.yPlacardUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_yPlacardUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yPlacardUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private final var selectedPageIndex_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final var selectedPageIndex_property_selection : EBSelection <Int?> { // §
    return self.selectedPageIndex_property.selection
/*    if let model = self.propval {
      switch (model.selectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.selectedPageIndex_property.addEBObserver (inObserver)
/*    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedPageIndex_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.selectedPageIndex_property.removeEBObserver (inObserver)
/*    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedPageIndex_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var issues_property = EBGenericTransientProperty <CanariIssueArray?> ()
//  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final var issues_property_selection : EBSelection <CanariIssueArray?> {
    return self.issues_property.selection
/*    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.issues_property.addEBObserver (inObserver)
/*    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.issues_property.removeEBObserver (inObserver)
/*    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'noIssue' transient property
  //····················································································································

  private final var noIssue_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_noIssue = EBWeakEventSet ()

  //····················································································································

  final var noIssue_property_selection : EBSelection <Bool?> {
    return self.noIssue_property.selection
/*    if let model = self.propval {
      switch (model.noIssue_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.noIssue_property.addEBObserver (inObserver)
/*    self.mObserversOf_noIssue.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.noIssue_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.noIssue_property.removeEBObserver (inObserver)
/*    self.mObserversOf_noIssue.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.noIssue_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'segmentedControlSegmentIssueImage' transient property
  //····················································································································

  private final var segmentedControlSegmentIssueImage_property = EBGenericTransientProperty <NSImage?> ()
//  private final var mObserversOf_segmentedControlSegmentIssueImage = EBWeakEventSet ()

  //····················································································································

  final var segmentedControlSegmentIssueImage_property_selection : EBSelection <NSImage?> {
    return self.segmentedControlSegmentIssueImage_property.selection
/*    if let model = self.propval {
      switch (model.segmentedControlSegmentIssueImage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_segmentedControlSegmentIssueImage (_ inObserver : EBEvent) {
    self.segmentedControlSegmentIssueImage_property.addEBObserver (inObserver)
/*    self.mObserversOf_segmentedControlSegmentIssueImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.segmentedControlSegmentIssueImage_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_segmentedControlSegmentIssueImage (_ inObserver : EBEvent) {
    self.segmentedControlSegmentIssueImage_property.removeEBObserver (inObserver)
/*    self.mObserversOf_segmentedControlSegmentIssueImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.segmentedControlSegmentIssueImage_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'segmentedControlSegmentIssueString' transient property
  //····················································································································

  private final var segmentedControlSegmentIssueString_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_segmentedControlSegmentIssueString = EBWeakEventSet ()

  //····················································································································

  final var segmentedControlSegmentIssueString_property_selection : EBSelection <String?> {
    return self.segmentedControlSegmentIssueString_property.selection
/*    if let model = self.propval {
      switch (model.segmentedControlSegmentIssueString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_segmentedControlSegmentIssueString (_ inObserver : EBEvent) {
    self.segmentedControlSegmentIssueString_property.addEBObserver (inObserver)
/*    self.mObserversOf_segmentedControlSegmentIssueString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.segmentedControlSegmentIssueString_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_segmentedControlSegmentIssueString (_ inObserver : EBEvent) {
    self.segmentedControlSegmentIssueString_property.removeEBObserver (inObserver)
/*    self.mObserversOf_segmentedControlSegmentIssueString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.segmentedControlSegmentIssueString_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observable toMany property: symbolObjects
  //····················································································································

  private final var mObserversOf_symbolObjects = EBWeakEventSet ()

  //····················································································································

  final var symbolObjects_property_selection : EBSelection <[SymbolObject]> {
    if let model = self.propval {
      switch (model.symbolObjects_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolObjects (_ inObserver : EBEvent) {
    self.mObserversOf_symbolObjects.insert (inObserver)
    if let object = self.propval {
      object.symbolObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolObjects (_ inObserver : EBEvent) {
    self.mObserversOf_symbolObjects.remove (inObserver)
    if let object = self.propval {
      object.symbolObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: symbolPins
  //····················································································································

  private final var mObserversOf_symbolPins = EBWeakEventSet ()

  //····················································································································

  final var symbolPins_property_selection : EBSelection <[SymbolPin]> {
    if let model = self.propval {
      switch (model.symbolPins_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolPins (_ inObserver : EBEvent) {
    self.mObserversOf_symbolPins.insert (inObserver)
    if let object = self.propval {
      object.symbolPins_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolPins (_ inObserver : EBEvent) {
    self.mObserversOf_symbolPins.remove (inObserver)
    if let object = self.propval {
      object.symbolPins_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure selectedInspector simple stored property
    self.selectedInspector_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.selectedInspector_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.selectedInspector_property)
  //--- Configure comments simple stored property
    self.comments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.comments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.comments_property)
  //--- Configure horizontalFlip simple stored property
    self.horizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.horizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.horizontalFlip_property)
  //--- Configure verticalFlip simple stored property
    self.verticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.verticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.verticalFlip_property)
  //--- Configure gridStyle simple stored property
    self.gridStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.gridStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.gridStyle_property)
  //--- Configure gridDisplay simple stored property
    self.gridDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.gridDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.gridDisplay_property)
  //--- Configure zoom simple stored property
    self.zoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.zoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.zoom_property)
  //--- Configure xPlacardUnit simple stored property
    self.xPlacardUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.xPlacardUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.xPlacardUnit_property)
  //--- Configure yPlacardUnit simple stored property
    self.yPlacardUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.yPlacardUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.yPlacardUnit_property)
  //--- Configure selectedPageIndex simple stored property
    self.selectedPageIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.selectedPageIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.selectedPageIndex_property)
  //--- Configure issues transient property
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.issues_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.issues_property)
  //--- Configure noIssue transient property
    self.noIssue_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.noIssue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.noIssue_property)
  //--- Configure segmentedControlSegmentIssueImage transient property
    self.segmentedControlSegmentIssueImage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.segmentedControlSegmentIssueImage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.segmentedControlSegmentIssueImage_property)
  //--- Configure segmentedControlSegmentIssueString transient property
    self.segmentedControlSegmentIssueString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.segmentedControlSegmentIssueString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.segmentedControlSegmentIssueString_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject SymbolRoot
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_SymbolRoot : ReadOnlyObject_SymbolRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_SymbolRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_SymbolRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : SymbolRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < SymbolRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : SymbolRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_SymbolRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_SymbolRoot : ReadOnlyObject_SymbolRoot {

  //····················································································································
 
  func setProp (_ inValue : SymbolRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_SymbolRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_SymbolRoot : ReadWriteObject_SymbolRoot {

  //····················································································································

  private var mModel : ReadWriteObject_SymbolRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_SymbolRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : SymbolRoot?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : SymbolRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < SymbolRoot? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : SymbolRoot? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_SymbolRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_SymbolRoot : ReadWriteObject_SymbolRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : SymbolRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < SymbolRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : SymbolRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : SymbolRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

