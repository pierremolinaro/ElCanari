//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_selectedInspector : class {
  var selectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_comments : class {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_horizontalFlip : class {
  var horizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_verticalFlip : class {
  var verticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_gridStyle : class {
  var gridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_gridDisplay : class {
  var gridDisplay : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_zoom : class {
  var zoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_xPlacardUnit : class {
  var xPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_yPlacardUnit : class {
  var yPlacardUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_selectedPageIndex : class {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_noIssue : class {
  var noIssue : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class SymbolRoot : EBManagedObject,
         SymbolRoot_selectedInspector,
         SymbolRoot_comments,
         SymbolRoot_horizontalFlip,
         SymbolRoot_verticalFlip,
         SymbolRoot_gridStyle,
         SymbolRoot_gridDisplay,
         SymbolRoot_zoom,
         SymbolRoot_xPlacardUnit,
         SymbolRoot_yPlacardUnit,
         SymbolRoot_selectedPageIndex,
         SymbolRoot_issues,
         SymbolRoot_noIssue {

  //····················································································································
  //   Atomic property: selectedInspector
  //····················································································································

  let selectedInspector_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var selectedInspector : Int {
    get { return self.selectedInspector_property.propval }
    set { self.selectedInspector_property.setProp (newValue) }
  }

  //····················································································································

  var selectedInspector_property_selection : EBSelection <Int> { return self.selectedInspector_property.prop }

  //····················································································································
  //   Atomic property: comments
  //····················································································································

  let comments_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var comments : String {
    get { return self.comments_property.propval }
    set { self.comments_property.setProp (newValue) }
  }

  //····················································································································

  var comments_property_selection : EBSelection <String> { return self.comments_property.prop }

  //····················································································································
  //   Atomic property: horizontalFlip
  //····················································································································

  let horizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var horizontalFlip : Bool {
    get { return self.horizontalFlip_property.propval }
    set { self.horizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var horizontalFlip_property_selection : EBSelection <Bool> { return self.horizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: verticalFlip
  //····················································································································

  let verticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var verticalFlip : Bool {
    get { return self.verticalFlip_property.propval }
    set { self.verticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var verticalFlip_property_selection : EBSelection <Bool> { return self.verticalFlip_property.prop }

  //····················································································································
  //   Atomic property: gridStyle
  //····················································································································

  let gridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line)

  //····················································································································

  var gridStyle : GridStyle {
    get { return self.gridStyle_property.propval }
    set { self.gridStyle_property.setProp (newValue) }
  }

  //····················································································································

  var gridStyle_property_selection : EBSelection <GridStyle> { return self.gridStyle_property.prop }

  //····················································································································
  //   Atomic property: gridDisplay
  //····················································································································

  let gridDisplay_property = EBStoredProperty_Int (defaultValue: 4)

  //····················································································································

  var gridDisplay : Int {
    get { return self.gridDisplay_property.propval }
    set { self.gridDisplay_property.setProp (newValue) }
  }

  //····················································································································

  var gridDisplay_property_selection : EBSelection <Int> { return self.gridDisplay_property.prop }

  //····················································································································
  //   Atomic property: zoom
  //····················································································································

  let zoom_property = EBStoredProperty_Int (defaultValue: 600)

  //····················································································································

  var zoom : Int {
    get { return self.zoom_property.propval }
    set { self.zoom_property.setProp (newValue) }
  }

  //····················································································································

  var zoom_property_selection : EBSelection <Int> { return self.zoom_property.prop }

  //····················································································································
  //   Atomic property: xPlacardUnit
  //····················································································································

  let xPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var xPlacardUnit : Int {
    get { return self.xPlacardUnit_property.propval }
    set { self.xPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································

  var xPlacardUnit_property_selection : EBSelection <Int> { return self.xPlacardUnit_property.prop }

  //····················································································································
  //   Atomic property: yPlacardUnit
  //····················································································································

  let yPlacardUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var yPlacardUnit : Int {
    get { return self.yPlacardUnit_property.propval }
    set { self.yPlacardUnit_property.setProp (newValue) }
  }

  //····················································································································

  var yPlacardUnit_property_selection : EBSelection <Int> { return self.yPlacardUnit_property.prop }

  //····················································································································
  //   To many property: symbolObjects
  //····················································································································

  let symbolObjects_property = StoredArrayOf_SymbolObject ()

  //····················································································································

  var symbolObjects_property_selection : EBSelection < [SymbolObject] > {
    return self.symbolObjects_property.prop
  }

  //····················································································································

  var symbolObjects : [SymbolObject] {
    get { return self.symbolObjects_property.propval }
    set { self.symbolObjects_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: symbolPins
  //····················································································································

  let symbolPins_property = TransientArrayOfSuperOf_SymbolPin <SymbolObject> ()

  //····················································································································

  var symbolPins_property_selection : EBSelection < [SymbolPin] > {
    return self.symbolPins_property.prop
  }

  //····················································································································

  var symbolPins : [SymbolPin] {
    get { return self.symbolPins_property.propval }
  }

  //····················································································································
  //   Atomic property: selectedPageIndex
  //····················································································································

  let selectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var selectedPageIndex : Int {
    get { return self.selectedPageIndex_property.propval }
    set { self.selectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int> { return self.selectedPageIndex_property.prop }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray> {
    return self.issues_property.prop
  }

  //····················································································································

  var issues : CanariIssueArray? {
    switch self.issues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: noIssue
  //····················································································································

  let noIssue_property = EBTransientProperty_Bool ()

  //····················································································································

  var noIssue_property_selection : EBSelection <Bool> {
    return self.noIssue_property.prop
  }

  //····················································································································

  var noIssue : Bool? {
    switch self.noIssue_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: comments
    self.comments_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: gridStyle
    self.gridStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: gridDisplay
    self.gridDisplay_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: zoom
    self.zoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.ebUndoManager = self.ebUndoManager
  //--- To many property: symbolObjects (no option)
    self.symbolObjects_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.symbolObjects_property_selection.kind ()
        kind &= unwSelf.symbolPins_property_selection.kind ()
        kind &= unwSelf.symbolPins_property_selection.kind ()
        kind &= unwSelf.symbolPins_property_selection.kind ()
        kind &= unwSelf.symbolPins_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.symbolObjects_property_selection, unwSelf.symbolPins_property_selection, unwSelf.symbolPins_property_selection, unwSelf.symbolPins_property_selection, unwSelf.symbolPins_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_SymbolRoot_issues (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.symbolObjects_property.addEBObserverOf_issues (self.issues_property)
    self.symbolPins_property.addEBObserverOf_name (self.issues_property)
    self.symbolPins_property.addEBObserverOf_nameRect (self.issues_property)
    self.symbolPins_property.addEBObserverOf_xPin (self.issues_property)
    self.symbolPins_property.addEBObserverOf_yPin (self.issues_property)
  //--- Atomic property: noIssue
    self.noIssue_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolRoot_noIssue (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.issues_property.addEBObserver (self.noIssue_property)
  //--- Install undoers and opposite setter for relationships
    self.symbolPins_property.setDataProvider (self.symbolObjects_property)
    /* self.symbolPins_property.mReadModelFunction =  { [weak self] in
      if let model = self?.symbolObjects_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let modelArray) :
          var array = [SymbolPin] ()
          for baseObject in modelArray {
            if let object = baseObject as? SymbolPin {
              array.append (object)
            }
          }
          return .single (array)
        }
      }else{
        return .empty
      }
    }
    self.symbolObjects_property.addEBObserver (self.symbolPins_property) */
  //--- Register properties for handling signature
    self.comments_property.setSignatureObserver (observer: self)
    self.symbolObjects_property.setSignatureObserver (observer: self)
    self.xPlacardUnit_property.setSignatureObserver (observer: self)
    self.yPlacardUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- To many property: symbolPins
    self.symbolObjects_property.removeEBObserver (self.symbolPins_property)
    self.symbolObjects_property.removeEBObserverOf_issues (self.issues_property)
    self.symbolPins_property.removeEBObserverOf_name (self.issues_property)
    self.symbolPins_property.removeEBObserverOf_nameRect (self.issues_property)
    self.symbolPins_property.removeEBObserverOf_xPin (self.issues_property)
    self.symbolPins_property.removeEBObserverOf_yPin (self.issues_property)
    self.issues_property.removeEBObserver (self.noIssue_property)
    self.symbolPins_property.setDataProvider (nil)
  //--- Unregister properties for handling signature
    self.comments_property.setSignatureObserver (observer: nil)
    self.symbolObjects_property.setSignatureObserver (observer: nil)
    self.xPlacardUnit_property.setSignatureObserver (observer: nil)
    self.yPlacardUnit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedInspector",
      idx: self.selectedInspector_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedInspector_property.mObserverExplorer,
      valueExplorer: &self.selectedInspector_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "comments",
      idx: self.comments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.comments_property.mObserverExplorer,
      valueExplorer: &self.comments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalFlip",
      idx: self.horizontalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.horizontalFlip_property.mObserverExplorer,
      valueExplorer: &self.horizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "verticalFlip",
      idx: self.verticalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.verticalFlip_property.mObserverExplorer,
      valueExplorer: &self.verticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStyle",
      idx: self.gridStyle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.gridStyle_property.mObserverExplorer,
      valueExplorer: &self.gridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridDisplay",
      idx: self.gridDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.gridDisplay_property.mObserverExplorer,
      valueExplorer: &self.gridDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoom",
      idx: self.zoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.zoom_property.mObserverExplorer,
      valueExplorer: &self.zoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xPlacardUnit",
      idx: self.xPlacardUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xPlacardUnit_property.mObserverExplorer,
      valueExplorer: &self.xPlacardUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yPlacardUnit",
      idx: self.yPlacardUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yPlacardUnit_property.mObserverExplorer,
      valueExplorer: &self.yPlacardUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedPageIndex",
      idx: self.selectedPageIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedPageIndex_property.mObserverExplorer,
      valueExplorer: &self.selectedPageIndex_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "noIssue",
      idx: self.noIssue_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.noIssue_property.mObserverExplorer,
      valueExplorer: &self.noIssue_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "symbolObjects",
      idx:symbolObjects_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&symbolObjects_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.mObserverExplorer = nil
    self.selectedInspector_property.mValueExplorer = nil
  //--- Atomic property: comments
    self.comments_property.mObserverExplorer = nil
    self.comments_property.mValueExplorer = nil
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.mObserverExplorer = nil
    self.horizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.mObserverExplorer = nil
    self.verticalFlip_property.mValueExplorer = nil
  //--- Atomic property: gridStyle
    self.gridStyle_property.mObserverExplorer = nil
    self.gridStyle_property.mValueExplorer = nil
  //--- Atomic property: gridDisplay
    self.gridDisplay_property.mObserverExplorer = nil
    self.gridDisplay_property.mValueExplorer = nil
  //--- Atomic property: zoom
    self.zoom_property.mObserverExplorer = nil
    self.zoom_property.mValueExplorer = nil
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.mObserverExplorer = nil
    self.xPlacardUnit_property.mValueExplorer = nil
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.mObserverExplorer = nil
    self.yPlacardUnit_property.mValueExplorer = nil
  //--- To many property: symbolObjects
    self.symbolObjects_property.mValueExplorer = nil
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.mObserverExplorer = nil
    self.selectedPageIndex_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.symbolObjects_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.storeIn (dictionary: ioDictionary, forKey:"selectedInspector")
  //--- Atomic property: comments
    self.comments_property.storeIn (dictionary: ioDictionary, forKey:"comments")
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"horizontalFlip")
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"verticalFlip")
  //--- Atomic property: gridStyle
    self.gridStyle_property.storeIn (dictionary: ioDictionary, forKey:"gridStyle")
  //--- Atomic property: gridDisplay
    self.gridDisplay_property.storeIn (dictionary: ioDictionary, forKey:"gridDisplay")
  //--- Atomic property: zoom
    self.zoom_property.storeIn (dictionary: ioDictionary, forKey:"zoom")
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey:"xPlacardUnit")
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.storeIn (dictionary: ioDictionary, forKey:"yPlacardUnit")
  //--- To many property: symbolObjects
    self.store (
      managedObjectArray: self.symbolObjects_property.propval,
      relationshipName: "symbolObjects",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"selectedPageIndex")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: symbolObjects
    self.symbolObjects_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "symbolObjects",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolObject])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.readFrom (dictionary: inDictionary, forKey:"selectedInspector")
  //--- Atomic property: comments
    self.comments_property.readFrom (dictionary: inDictionary, forKey:"comments")
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"horizontalFlip")
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.readFrom (dictionary: inDictionary, forKey:"verticalFlip")
  //--- Atomic property: gridStyle
    self.gridStyle_property.readFrom (dictionary: inDictionary, forKey:"gridStyle")
  //--- Atomic property: gridDisplay
    self.gridDisplay_property.readFrom (dictionary: inDictionary, forKey:"gridDisplay")
  //--- Atomic property: zoom
    self.zoom_property.readFrom (dictionary: inDictionary, forKey:"zoom")
  //--- Atomic property: xPlacardUnit
    self.xPlacardUnit_property.readFrom (dictionary: inDictionary, forKey:"xPlacardUnit")
  //--- Atomic property: yPlacardUnit
    self.yPlacardUnit_property.readFrom (dictionary: inDictionary, forKey:"yPlacardUnit")
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"selectedPageIndex")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: symbolObjects
    for managedObject in self.symbolObjects_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: symbolPins
    for managedObject in self.symbolPins_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: symbolObjects
    for managedObject in self.symbolObjects_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: symbolPins
    for managedObject in self.symbolPins_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.comments_property.signature ())
    crc.accumulateUInt32 (self.symbolObjects_property.signature ())
    crc.accumulateUInt32 (self.xPlacardUnit_property.signature ())
    crc.accumulateUInt32 (self.yPlacardUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolRoot : ReadOnlyAbstractArrayProperty <SymbolRoot> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <SymbolRoot>, addedSet inAddedSet : Set <SymbolRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_selectedInspector_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_comments_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_horizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_verticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_gridStyle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_gridDisplay_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_zoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_xPlacardUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_yPlacardUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_selectedPageIndex_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_noIssue_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_selectedInspector_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_comments_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_horizontalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_verticalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_gridStyle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_gridDisplay_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_zoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_xPlacardUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_yPlacardUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_selectedPageIndex_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_noIssue_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedInspector_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedInspector.apply { (_ observer : EBEvent) in
        managedObject.selectedInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedInspector_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_selectedInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_comments.apply { (_ observer : EBEvent) in
        managedObject.comments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_comments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'horizontalFlip' stored property
  //····················································································································

  private var mObserversOf_horizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_horizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_horizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_horizontalFlip_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_horizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.horizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_horizontalFlip_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_horizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.horizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'verticalFlip' stored property
  //····················································································································

  private var mObserversOf_verticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_verticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.verticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_verticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.verticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_verticalFlip_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_verticalFlip.apply { (_ observer : EBEvent) in
        managedObject.verticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_verticalFlip_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_verticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.verticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStyle' stored property
  //····················································································································

  private var mObserversOf_gridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStyle_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridStyle.apply { (_ observer : EBEvent) in
        managedObject.gridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStyle_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_gridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridDisplay' stored property
  //····················································································································

  private var mObserversOf_gridDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridDisplay_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridDisplay.apply { (_ observer : EBEvent) in
        managedObject.gridDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridDisplay_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_gridDisplay.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xPlacardUnit' stored property
  //····················································································································

  private var mObserversOf_xPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xPlacardUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPlacardUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xPlacardUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPlacardUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xPlacardUnit_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_xPlacardUnit.apply { (_ observer : EBEvent) in
        managedObject.xPlacardUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xPlacardUnit_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_xPlacardUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yPlacardUnit' stored property
  //····················································································································

  private var mObserversOf_yPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yPlacardUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPlacardUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yPlacardUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPlacardUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yPlacardUnit_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_yPlacardUnit.apply { (_ observer : EBEvent) in
        managedObject.yPlacardUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yPlacardUnit_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_yPlacardUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'noIssue' transient property
  //····················································································································

  private var mObserversOf_noIssue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_noIssue.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.noIssue_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_noIssue.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.noIssue_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_noIssue_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_noIssue.apply { (_ observer : EBEvent) in
        managedObject.noIssue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_noIssue_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_noIssue.apply { (_ observer : EBEvent) in
        managedObject.noIssue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_SymbolRoot : ReadOnlyArrayOf_SymbolRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_SymbolRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_SymbolRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [SymbolRoot] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [SymbolRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [SymbolRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_SymbolRoot <SUPER : EBManagedObject> : ReadOnlyArrayOf_SymbolRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [SymbolRoot] ()
    for superObject in newModelArray {
      if let object = superObject as? SymbolRoot {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [SymbolRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [SymbolRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolRoot : ReadOnlyArrayOf_SymbolRoot {

  //····················································································································
 
  func setProp (_ value :  [SymbolRoot]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_SymbolRoot : ReadWriteArrayOf_SymbolRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_SymbolRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_SymbolRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [SymbolRoot]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [SymbolRoot]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [SymbolRoot] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [SymbolRoot] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_SymbolRoot : ReadWriteArrayOf_SymbolRoot, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : SymbolRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [SymbolRoot] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "SymbolRoot") as? SymbolRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [SymbolRoot]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [SymbolRoot]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <SymbolRoot>, addedSet inAddedSet : Set <SymbolRoot>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [SymbolRoot] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [SymbolRoot]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [SymbolRoot] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : SymbolRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : SymbolRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_SymbolRoot 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_SymbolRoot : ReadOnlyAbstractObjectProperty <SymbolRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.selectedInspector_property.removeEBObserversFrom (&self.mObserversOf_selectedInspector) // Stored property
    inOldValue?.comments_property.removeEBObserversFrom (&self.mObserversOf_comments) // Stored property
    inOldValue?.horizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_horizontalFlip) // Stored property
    inOldValue?.verticalFlip_property.removeEBObserversFrom (&self.mObserversOf_verticalFlip) // Stored property
    inOldValue?.gridStyle_property.removeEBObserversFrom (&self.mObserversOf_gridStyle) // Stored property
    inOldValue?.gridDisplay_property.removeEBObserversFrom (&self.mObserversOf_gridDisplay) // Stored property
    inOldValue?.zoom_property.removeEBObserversFrom (&self.mObserversOf_zoom) // Stored property
    inOldValue?.xPlacardUnit_property.removeEBObserversFrom (&self.mObserversOf_xPlacardUnit) // Stored property
    inOldValue?.yPlacardUnit_property.removeEBObserversFrom (&self.mObserversOf_yPlacardUnit) // Stored property
    inOldValue?.selectedPageIndex_property.removeEBObserversFrom (&self.mObserversOf_selectedPageIndex) // Stored property
    inOldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
    inOldValue?.noIssue_property.removeEBObserversFrom (&self.mObserversOf_noIssue) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.selectedInspector_property.addEBObserversFrom (&self.mObserversOf_selectedInspector) // Stored property
    self.mInternalValue?.comments_property.addEBObserversFrom (&self.mObserversOf_comments) // Stored property
    self.mInternalValue?.horizontalFlip_property.addEBObserversFrom (&self.mObserversOf_horizontalFlip) // Stored property
    self.mInternalValue?.verticalFlip_property.addEBObserversFrom (&self.mObserversOf_verticalFlip) // Stored property
    self.mInternalValue?.gridStyle_property.addEBObserversFrom (&self.mObserversOf_gridStyle) // Stored property
    self.mInternalValue?.gridDisplay_property.addEBObserversFrom (&self.mObserversOf_gridDisplay) // Stored property
    self.mInternalValue?.zoom_property.addEBObserversFrom (&self.mObserversOf_zoom) // Stored property
    self.mInternalValue?.xPlacardUnit_property.addEBObserversFrom (&self.mObserversOf_xPlacardUnit) // Stored property
    self.mInternalValue?.yPlacardUnit_property.addEBObserversFrom (&self.mObserversOf_yPlacardUnit) // Stored property
    self.mInternalValue?.selectedPageIndex_property.addEBObserversFrom (&self.mObserversOf_selectedPageIndex) // Stored property
    self.mInternalValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
    self.mInternalValue?.noIssue_property.addEBObserversFrom (&self.mObserversOf_noIssue) // Transient property
  }

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  var selectedInspector_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedInspector_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedInspector_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedInspector_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedInspector_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedInspector.apply { (_ observer : EBEvent) in
        managedObject.selectedInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedInspector_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_selectedInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  var comments_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.comments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.comments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.comments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_comments.apply { (_ observer : EBEvent) in
        managedObject.comments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_comments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'horizontalFlip' stored property
  //····················································································································

  private var mObserversOf_horizontalFlip = EBWeakEventSet ()

  //····················································································································

  var horizontalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.horizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_horizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.horizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_horizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.horizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_horizontalFlip_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_horizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.horizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_horizontalFlip_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_horizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.horizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'verticalFlip' stored property
  //····················································································································

  private var mObserversOf_verticalFlip = EBWeakEventSet ()

  //····················································································································

  var verticalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.verticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_verticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.verticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_verticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.verticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_verticalFlip_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_verticalFlip.apply { (_ observer : EBEvent) in
        managedObject.verticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_verticalFlip_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_verticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.verticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStyle' stored property
  //····················································································································

  private var mObserversOf_gridStyle = EBWeakEventSet ()

  //····················································································································

  var gridStyle_property_selection : EBSelection <GridStyle?> {
    if let model = self.propval {
      switch (model.gridStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.gridStyle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridStyle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStyle_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridStyle.apply { (_ observer : EBEvent) in
        managedObject.gridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStyle_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_gridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridDisplay' stored property
  //····················································································································

  private var mObserversOf_gridDisplay = EBWeakEventSet ()

  //····················································································································

  var gridDisplay_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.gridDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_gridDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.gridDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gridDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_gridDisplay_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridDisplay.apply { (_ observer : EBEvent) in
        managedObject.gridDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridDisplay_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_gridDisplay.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  var zoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.zoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.zoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.zoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xPlacardUnit' stored property
  //····················································································································

  private var mObserversOf_xPlacardUnit = EBWeakEventSet ()

  //····················································································································

  var xPlacardUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xPlacardUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xPlacardUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xPlacardUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xPlacardUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xPlacardUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_xPlacardUnit_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_xPlacardUnit.apply { (_ observer : EBEvent) in
        managedObject.xPlacardUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xPlacardUnit_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_xPlacardUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yPlacardUnit' stored property
  //····················································································································

  private var mObserversOf_yPlacardUnit = EBWeakEventSet ()

  //····················································································································

  var yPlacardUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yPlacardUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yPlacardUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yPlacardUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yPlacardUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yPlacardUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_yPlacardUnit_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_yPlacardUnit.apply { (_ observer : EBEvent) in
        managedObject.yPlacardUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yPlacardUnit_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_yPlacardUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'noIssue' transient property
  //····················································································································

  private var mObserversOf_noIssue = EBWeakEventSet ()

  //····················································································································

  var noIssue_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.noIssue_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_noIssue.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.noIssue_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_noIssue.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.noIssue_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_noIssue_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_noIssue.apply { (_ observer : EBEvent) in
        managedObject.noIssue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_noIssue_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      self.mObserversOf_noIssue.apply { (_ observer : EBEvent) in
        managedObject.noIssue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: symbolObjects
  //····················································································································

  private var mObserversOf_symbolObjects = EBWeakEventSet ()

  //····················································································································

  var symbolObjects_property_selection : EBSelection <[SymbolObject]> {
    if let model = self.propval {
      switch (model.symbolObjects_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolObjects (_ inObserver : EBEvent) {
    self.mObserversOf_symbolObjects.insert (inObserver)
    if let object = self.propval {
      object.symbolObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolObjects (_ inObserver : EBEvent) {
    self.mObserversOf_symbolObjects.remove (inObserver)
    if let object = self.propval {
      object.symbolObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: symbolPins
  //····················································································································

  private var mObserversOf_symbolPins = EBWeakEventSet ()

  //····················································································································

  var symbolPins_property_selection : EBSelection <[SymbolPin]> {
    if let model = self.propval {
      switch (model.symbolPins_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolPins (_ inObserver : EBEvent) {
    self.mObserversOf_symbolPins.insert (inObserver)
    if let object = self.propval {
      object.symbolPins_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolPins (_ inObserver : EBEvent) {
    self.mObserversOf_symbolPins.remove (inObserver)
    if let object = self.propval {
      object.symbolPins_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_SymbolRoot : ReadOnlyObject_SymbolRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_SymbolRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_SymbolRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : SymbolRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < SymbolRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : SymbolRoot? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_SymbolRoot : ReadOnlyObject_SymbolRoot {

  //····················································································································
 
  func setProp (_ inValue : SymbolRoot?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_SymbolRoot : ReadWriteObject_SymbolRoot {

  //····················································································································

  private var mModel : ReadWriteObject_SymbolRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_SymbolRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : SymbolRoot?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : SymbolRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < SymbolRoot? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : SymbolRoot? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_SymbolRoot 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_SymbolRoot : ReadWriteObject_SymbolRoot, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : SymbolRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : SymbolRoot?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < SymbolRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : SymbolRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : SymbolRoot? { return self.mInternalValue }

  //····················································································································

  func remove (_ object : SymbolRoot) {
    if object === self.mInternalValue {
      self.mInternalValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : SymbolRoot) {
    if object !== self.mInternalValue {
      self.mInternalValue = object
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

