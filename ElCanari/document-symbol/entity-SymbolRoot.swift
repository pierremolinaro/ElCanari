//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_selectedInspector : class {
  var selectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_horizontalFlip : class {
  var horizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_verticalFlip : class {
  var verticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_gridStyle : class {
  var gridStyle : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_gridStep : class {
  var gridStep : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_selectedPageIndex : class {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolRoot_gridDisplay : class {
  var gridDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class SymbolRoot : EBManagedObject,
         SymbolRoot_selectedInspector,
         SymbolRoot_horizontalFlip,
         SymbolRoot_verticalFlip,
         SymbolRoot_gridStyle,
         SymbolRoot_gridStep,
         SymbolRoot_selectedPageIndex,
         SymbolRoot_gridDisplay {

  //····················································································································
  //   Atomic property: selectedInspector
  //····················································································································

  var selectedInspector_property = EBStoredProperty_Int (0)

  //····················································································································

  var selectedInspector : Int {
    get {
      return self.selectedInspector_property.propval
    }
    set {
      self.selectedInspector_property.setProp (newValue)
    }
  }

  //····················································································································

  var selectedInspector_property_selection : EBSelection <Int> {
    return self.selectedInspector_property.prop
  }

  //····················································································································
  //   Atomic property: horizontalFlip
  //····················································································································

  var horizontalFlip_property = EBStoredProperty_Bool (false)

  //····················································································································

  var horizontalFlip : Bool {
    get {
      return self.horizontalFlip_property.propval
    }
    set {
      self.horizontalFlip_property.setProp (newValue)
    }
  }

  //····················································································································

  var horizontalFlip_property_selection : EBSelection <Bool> {
    return self.horizontalFlip_property.prop
  }

  //····················································································································
  //   Atomic property: verticalFlip
  //····················································································································

  var verticalFlip_property = EBStoredProperty_Bool (false)

  //····················································································································

  var verticalFlip : Bool {
    get {
      return self.verticalFlip_property.propval
    }
    set {
      self.verticalFlip_property.setProp (newValue)
    }
  }

  //····················································································································

  var verticalFlip_property_selection : EBSelection <Bool> {
    return self.verticalFlip_property.prop
  }

  //····················································································································
  //   Atomic property: gridStyle
  //····················································································································

  var gridStyle_property = EBStoredProperty_Int (2)

  //····················································································································

  var gridStyle : Int {
    get {
      return self.gridStyle_property.propval
    }
    set {
      self.gridStyle_property.setProp (newValue)
    }
  }

  //····················································································································

  var gridStyle_property_selection : EBSelection <Int> {
    return self.gridStyle_property.prop
  }

  //····················································································································
  //   Atomic property: gridStep
  //····················································································································

  var gridStep_property = EBStoredProperty_Int (4)

  //····················································································································

  var gridStep : Int {
    get {
      return self.gridStep_property.propval
    }
    set {
      self.gridStep_property.setProp (newValue)
    }
  }

  //····················································································································

  var gridStep_property_selection : EBSelection <Int> {
    return self.gridStep_property.prop
  }

  //····················································································································
  //   To many property: symbolObjects
  //····················································································································

  var symbolObjects_property = StoredArrayOf_SymbolObject ()

  //····················································································································
  var symbolObjects_property_selection : EBSelection < [SymbolObject] > {
      return self.symbolObjects_property.prop
  }

  //····················································································································
  //   Atomic property: selectedPageIndex
  //····················································································································

  var selectedPageIndex_property = EBStoredProperty_Int (0)

  //····················································································································

  var selectedPageIndex : Int {
    get {
      return self.selectedPageIndex_property.propval
    }
    set {
      self.selectedPageIndex_property.setProp (newValue)
    }
  }

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int> {
    return self.selectedPageIndex_property.prop
  }

  //····················································································································
  //   Transient property: gridDisplay
  //····················································································································

  var gridDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var gridDisplay_property_selection : EBSelection <EBShape> {
    return self.gridDisplay_property.prop
  }

  //····················································································································

    var gridDisplay : EBShape? {
    switch self.gridDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.undoManager = self.undoManager
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.undoManager = self.undoManager
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.undoManager = self.undoManager
  //--- Atomic property: gridStyle
    self.gridStyle_property.undoManager = self.undoManager
  //--- Atomic property: gridStep
    self.gridStep_property.undoManager = self.undoManager
  //--- To many property: symbolObjects
    self.symbolObjects_property.undoManager = self.undoManager
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.undoManager = self.undoManager
  //--- Atomic property: gridDisplay
    self.gridDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.gridStyle_property_selection.kind ()
        kind &= unwSelf.gridStep_property_selection.kind ()
        kind &= g_Preferences!.dotColorOfSymbolGrid_property_selection.kind ()
        kind &= g_Preferences!.lineColorOfSymbolGrid_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.gridStyle_property_selection, unwSelf.gridStep_property_selection, g_Preferences!.dotColorOfSymbolGrid_property_selection, g_Preferences!.lineColorOfSymbolGrid_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_SymbolRoot_gridDisplay (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.gridStyle_property.addEBObserver (self.gridDisplay_property)
    self.gridStep_property.addEBObserver (self.gridDisplay_property)
    g_Preferences?.dotColorOfSymbolGrid_property.addEBObserver (self.gridDisplay_property)
    g_Preferences?.lineColorOfSymbolGrid_property.addEBObserver (self.gridDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.symbolObjects_property.setSignatureObserver (observer:self)
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.gridStyle_property.removeEBObserver (self.gridDisplay_property)
    self.gridStep_property.removeEBObserver (self.gridDisplay_property)
    g_Preferences?.dotColorOfSymbolGrid_property.removeEBObserver (self.gridDisplay_property)
    g_Preferences?.lineColorOfSymbolGrid_property.removeEBObserver (self.gridDisplay_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedInspector",
      idx:self.selectedInspector_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedInspector_property.mObserverExplorer,
      valueExplorer:&self.selectedInspector_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalFlip",
      idx:self.horizontalFlip_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.horizontalFlip_property.mObserverExplorer,
      valueExplorer:&self.horizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "verticalFlip",
      idx:self.verticalFlip_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.verticalFlip_property.mObserverExplorer,
      valueExplorer:&self.verticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStyle",
      idx:self.gridStyle_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.gridStyle_property.mObserverExplorer,
      valueExplorer:&self.gridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gridStep",
      idx:self.gridStep_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.gridStep_property.mObserverExplorer,
      valueExplorer:&self.gridStep_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedPageIndex",
      idx:self.selectedPageIndex_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedPageIndex_property.mObserverExplorer,
      valueExplorer:&self.selectedPageIndex_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "gridDisplay",
      idx:self.gridDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.gridDisplay_property.mObserverExplorer,
      valueExplorer:&self.gridDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.mObserverExplorer = nil
    self.selectedInspector_property.mValueExplorer = nil
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.mObserverExplorer = nil
    self.horizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.mObserverExplorer = nil
    self.verticalFlip_property.mValueExplorer = nil
  //--- Atomic property: gridStyle
    self.gridStyle_property.mObserverExplorer = nil
    self.gridStyle_property.mValueExplorer = nil
  //--- Atomic property: gridStep
    self.gridStep_property.mObserverExplorer = nil
    self.gridStep_property.mValueExplorer = nil
  //--- To many property: symbolObjects
    self.symbolObjects_property.mValueExplorer = nil
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.mObserverExplorer = nil
    self.selectedPageIndex_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.storeIn (dictionary: ioDictionary, forKey:"selectedInspector")
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"horizontalFlip")
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"verticalFlip")
  //--- Atomic property: gridStyle
    self.gridStyle_property.storeIn (dictionary: ioDictionary, forKey:"gridStyle")
  //--- Atomic property: gridStep
    self.gridStep_property.storeIn (dictionary: ioDictionary, forKey:"gridStep")
  //--- To many property: symbolObjects
    self.store (
      managedObjectArray: symbolObjects_property.propval as NSArray,
      relationshipName: "symbolObjects",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"selectedPageIndex")
 //   self.selectedInspector_property.storeIn (dictionary: ioDictionary, forKey: "selectedInspector")
 //   self.horizontalFlip_property.storeIn (dictionary: ioDictionary, forKey: "horizontalFlip")
 //   self.verticalFlip_property.storeIn (dictionary: ioDictionary, forKey: "verticalFlip")
 //   self.gridStyle_property.storeIn (dictionary: ioDictionary, forKey: "gridStyle")
 //   self.gridStep_property.storeIn (dictionary: ioDictionary, forKey: "gridStep")
 //   self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey: "selectedPageIndex")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.readFrom (dictionary: inDictionary, forKey:"selectedInspector")
  //--- Atomic property: horizontalFlip
    self.horizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"horizontalFlip")
  //--- Atomic property: verticalFlip
    self.verticalFlip_property.readFrom (dictionary: inDictionary, forKey:"verticalFlip")
  //--- Atomic property: gridStyle
    self.gridStyle_property.readFrom (dictionary: inDictionary, forKey:"gridStyle")
  //--- Atomic property: gridStep
    self.gridStep_property.readFrom (dictionary: inDictionary, forKey:"gridStep")
  //--- To many property: symbolObjects
    self.symbolObjects_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "symbolObjects",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolObject])
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"selectedPageIndex")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetControllers
  //····················································································································

  override func resetControllers () {
    super.resetControllers ()
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    self.symbolObjects_property.setProp ([])
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: symbolObjects
    for managedObject : EBManagedObject in self.symbolObjects_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.symbolObjects_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolRoot : ReadOnlyAbstractArrayProperty <SymbolRoot> {

  //····················································································································

  var undoManager : EBUndoManager?

  //····················································································································

  var propval : [SymbolRoot] { return [] } // Abstract method

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedInspector_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedInspector {
        managedObject.selectedInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedInspector_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for observer in mObserversOf_selectedInspector {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'horizontalFlip' stored property
  //····················································································································

  private var mObserversOf_horizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_horizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_horizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_horizontalFlip_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_horizontalFlip {
        managedObject.horizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_horizontalFlip_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for observer in mObserversOf_horizontalFlip {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.horizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'verticalFlip' stored property
  //····················································································································

  private var mObserversOf_verticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_verticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.verticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_verticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.verticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_verticalFlip_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_verticalFlip {
        managedObject.verticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_verticalFlip_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for observer in mObserversOf_verticalFlip {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.verticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStyle' stored property
  //····················································································································

  private var mObserversOf_gridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_gridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_gridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStyle_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_gridStyle {
        managedObject.gridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStyle_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for observer in mObserversOf_gridStyle {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStep' stored property
  //····················································································································

  private var mObserversOf_gridStep = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStep (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_gridStep.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStep_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStep (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_gridStep.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStep_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStep_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_gridStep {
        managedObject.gridStep_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStep_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for observer in mObserversOf_gridStep {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedPageIndex {
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for observer in mObserversOf_selectedPageIndex {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridDisplay' transient property
  //····················································································································

  private var mObserversOf_gridDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_gridDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_gridDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridDisplay_toElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_gridDisplay {
        managedObject.gridDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridDisplay_fromElementsOfSet (_ inSet : Set<SymbolRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_gridDisplay {
        managedObject.gridDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_SymbolRoot : ReadOnlyArrayOf_SymbolRoot {

  var readModelFunction : Optional<() -> EBSelection < [SymbolRoot] > >

  //····················································································································

   private var prop_cache : EBSelection < [SymbolRoot] >? 

  //····················································································································

  override var propval : [SymbolRoot] {
    if let value = prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <SymbolRoot> ()

  override var prop : EBSelection < [SymbolRoot] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <SymbolRoot>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <SymbolRoot> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_selectedInspector_fromElementsOfSet (removedSet)
        removeEBObserversOf_horizontalFlip_fromElementsOfSet (removedSet)
        removeEBObserversOf_verticalFlip_fromElementsOfSet (removedSet)
        removeEBObserversOf_gridStyle_fromElementsOfSet (removedSet)
        removeEBObserversOf_gridStep_fromElementsOfSet (removedSet)
        removeEBObserversOf_selectedPageIndex_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_gridDisplay_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_selectedInspector_toElementsOfSet (addedSet)
        addEBObserversOf_horizontalFlip_toElementsOfSet (addedSet)
        addEBObserversOf_verticalFlip_toElementsOfSet (addedSet)
        addEBObserversOf_gridStyle_toElementsOfSet (addedSet)
        addEBObserversOf_gridStep_toElementsOfSet (addedSet)
        addEBObserversOf_selectedPageIndex_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_gridDisplay_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolRoot : ReadOnlyArrayOf_SymbolRoot {

  //····················································································································
 
  func setProp (_ value :  [SymbolRoot]) { } // Abstract method
 
  // var propval : [SymbolRoot] { return [] } // Abstract method
 
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: SymbolRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_SymbolRoot : ReadWriteArrayOf_SymbolRoot, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : SymbolRoot?) -> Void > = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <SymbolRoot> ()
  private var mValue = [SymbolRoot] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
        removeEBObserversOf_selectedInspector_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_horizontalFlip_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_verticalFlip_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_gridStyle_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_gridStep_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_selectedPageIndex_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_gridDisplay_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : SymbolRoot in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
        addEBObserversOf_selectedInspector_toElementsOfSet (addedObjectSet)
        addEBObserversOf_horizontalFlip_toElementsOfSet (addedObjectSet)
        addEBObserversOf_verticalFlip_toElementsOfSet (addedObjectSet)
        addEBObserversOf_gridStyle_toElementsOfSet (addedObjectSet)
        addEBObserversOf_gridStep_toElementsOfSet (addedObjectSet)
        addEBObserversOf_selectedPageIndex_toElementsOfSet (addedObjectSet)
        addEBObserversOf_gridDisplay_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [SymbolRoot] > { return .single (mValue) }

  override func setProp (_ inValue : [SymbolRoot]) { mValue = inValue }

  override var propval : [SymbolRoot] { return mValue }

  //····················································································································

  @objc func performUndo (_ oldValue : [SymbolRoot]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : SymbolRoot) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : SymbolRoot) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
