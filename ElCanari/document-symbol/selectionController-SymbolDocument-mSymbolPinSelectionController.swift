//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    SelectionController_SymbolDocument_mSymbolPinSelectionController                                                 *
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(SelectionController_SymbolDocument_mSymbolPinSelectionController)
final class SelectionController_SymbolDocument_mSymbolPinSelectionController : EBObject {

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  var issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    get {
      return self.issues_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: label
  //····················································································································

  var label_property = EBPropertyProxy_String ()

  var label_property_selection : EBSelection <String> {
    get {
      return self.label_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: labelHorizontalAlignment
  //····················································································································

  var labelHorizontalAlignment_property = EBPropertyProxy_HorizontalAlignment ()

  var labelHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> {
    get {
      return self.labelHorizontalAlignment_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: numberHorizontalAlignment
  //····················································································································

  var numberHorizontalAlignment_property = EBPropertyProxy_HorizontalAlignment ()

  var numberHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> {
    get {
      return self.numberHorizontalAlignment_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  var objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    get {
      return self.objectDisplay_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: pinNumberIsVisibleInSchematics
  //····················································································································

  var pinNumberIsVisibleInSchematics_property = EBPropertyProxy_Bool ()

  var pinNumberIsVisibleInSchematics_property_selection : EBSelection <Bool> {
    get {
      return self.pinNumberIsVisibleInSchematics_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  var selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    get {
      return self.selectionDisplay_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: xLabel
  //····················································································································

  var xLabel_property = EBPropertyProxy_Int ()

  var xLabel_property_selection : EBSelection <Int> {
    get {
      return self.xLabel_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: xNumber
  //····················································································································

  var xNumber_property = EBPropertyProxy_Int ()

  var xNumber_property_selection : EBSelection <Int> {
    get {
      return self.xNumber_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: xPin
  //····················································································································

  var xPin_property = EBPropertyProxy_Int ()

  var xPin_property_selection : EBSelection <Int> {
    get {
      return self.xPin_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: yLabel
  //····················································································································

  var yLabel_property = EBPropertyProxy_Int ()

  var yLabel_property_selection : EBSelection <Int> {
    get {
      return self.yLabel_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: yNumber
  //····················································································································

  var yNumber_property = EBPropertyProxy_Int ()

  var yNumber_property_selection : EBSelection <Int> {
    get {
      return self.yNumber_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: yPin
  //····················································································································

  var yPin_property = EBPropertyProxy_Int ()

  var yPin_property_selection : EBSelection <Int> {
    get {
      return self.yPin_property.prop
    }
  }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   private var mModel : ReadOnlyArrayOf_SymbolObject? = nil
   private var mActualModel = TransientArrayOf_SymbolPin ()

  //····················································································································

  func bind_selection (model : ReadOnlyArrayOf_SymbolObject, file:String, line:Int) {
    self.mModel = model
    self.mActualModel.readModelFunction = { [weak self] () -> EBSelection < [SymbolPin] > in
      if let model = self?.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = [SymbolPin] ()
          for baseObject in v {
            if let object = baseObject as? SymbolPin {
              s.append (object)
            }
          }
          return .single (s)
        }
      }else{
        return .empty
      }
    }
    model.addEBObserver (self.mActualModel)
    self.bind_property_issues (model: self.mActualModel)
    self.bind_property_label (model: self.mActualModel)
    self.bind_property_labelHorizontalAlignment (model: self.mActualModel)
    self.bind_property_numberHorizontalAlignment (model: self.mActualModel)
    self.bind_property_objectDisplay (model: self.mActualModel)
    self.bind_property_pinNumberIsVisibleInSchematics (model: self.mActualModel)
    self.bind_property_selectionDisplay (model: self.mActualModel)
    self.bind_property_xLabel (model: self.mActualModel)
    self.bind_property_xNumber (model: self.mActualModel)
    self.bind_property_xPin (model: self.mActualModel)
    self.bind_property_yLabel (model: self.mActualModel)
    self.bind_property_yNumber (model: self.mActualModel)
    self.bind_property_yPin (model: self.mActualModel)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  func unbind_selection () {
    self.mModel?.removeEBObserver (self.mActualModel)
    self.mActualModel.readModelFunction = nil
  //--- issues
    self.issues_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_issues (self.issues_property)
  //--- label
    self.label_property.readModelFunction = nil 
    self.label_property.writeModelFunction = nil 
    self.label_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_label (self.label_property)
  //--- labelHorizontalAlignment
    self.labelHorizontalAlignment_property.readModelFunction = nil 
    self.labelHorizontalAlignment_property.writeModelFunction = nil 
    self.labelHorizontalAlignment_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_labelHorizontalAlignment (self.labelHorizontalAlignment_property)
  //--- numberHorizontalAlignment
    self.numberHorizontalAlignment_property.readModelFunction = nil 
    self.numberHorizontalAlignment_property.writeModelFunction = nil 
    self.numberHorizontalAlignment_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_numberHorizontalAlignment (self.numberHorizontalAlignment_property)
  //--- objectDisplay
    self.objectDisplay_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- pinNumberIsVisibleInSchematics
    self.pinNumberIsVisibleInSchematics_property.readModelFunction = nil 
    self.pinNumberIsVisibleInSchematics_property.writeModelFunction = nil 
    self.pinNumberIsVisibleInSchematics_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_pinNumberIsVisibleInSchematics (self.pinNumberIsVisibleInSchematics_property)
  //--- selectionDisplay
    self.selectionDisplay_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- xLabel
    self.xLabel_property.readModelFunction = nil 
    self.xLabel_property.writeModelFunction = nil 
    self.xLabel_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_xLabel (self.xLabel_property)
  //--- xNumber
    self.xNumber_property.readModelFunction = nil 
    self.xNumber_property.writeModelFunction = nil 
    self.xNumber_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_xNumber (self.xNumber_property)
  //--- xPin
    self.xPin_property.readModelFunction = nil 
    self.xPin_property.writeModelFunction = nil 
    self.xPin_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_xPin (self.xPin_property)
  //--- yLabel
    self.yLabel_property.readModelFunction = nil 
    self.yLabel_property.writeModelFunction = nil 
    self.yLabel_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_yLabel (self.yLabel_property)
  //--- yNumber
    self.yNumber_property.readModelFunction = nil 
    self.yNumber_property.writeModelFunction = nil 
    self.yNumber_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_yNumber (self.yNumber_property)
  //--- yPin
    self.yPin_property.readModelFunction = nil 
    self.yPin_property.writeModelFunction = nil 
    self.yPin_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_yPin (self.yPin_property)
  //---
    self.mModel = nil    
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (mEasyBindingsObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_SymbolDocument_mSymbolPinSelectionController.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "label",
      idx:self.label_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.label_property.mObserverExplorer,
      valueExplorer:&self.label_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "labelHorizontalAlignment",
      idx:self.labelHorizontalAlignment_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.labelHorizontalAlignment_property.mObserverExplorer,
      valueExplorer:&self.labelHorizontalAlignment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "numberHorizontalAlignment",
      idx:self.numberHorizontalAlignment_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.numberHorizontalAlignment_property.mObserverExplorer,
      valueExplorer:&self.numberHorizontalAlignment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pinNumberIsVisibleInSchematics",
      idx:self.pinNumberIsVisibleInSchematics_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.pinNumberIsVisibleInSchematics_property.mObserverExplorer,
      valueExplorer:&self.pinNumberIsVisibleInSchematics_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xLabel",
      idx:self.xLabel_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xLabel_property.mObserverExplorer,
      valueExplorer:&self.xLabel_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xNumber",
      idx:self.xNumber_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xNumber_property.mObserverExplorer,
      valueExplorer:&self.xNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xPin",
      idx:self.xPin_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xPin_property.mObserverExplorer,
      valueExplorer:&self.xPin_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yLabel",
      idx:self.yLabel_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yLabel_property.mObserverExplorer,
      valueExplorer:&self.yLabel_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yNumber",
      idx:self.yNumber_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yNumber_property.mObserverExplorer,
      valueExplorer:&self.yNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yPin",
      idx:self.yPin_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yPin_property.mObserverExplorer,
      valueExplorer:&self.yPin_property.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_SymbolDocument_mSymbolPinSelectionController.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (mEasyBindingsObjectIndex) + className
    mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  @objc func showObjectWindowFromExplorerButton (_ : Any) {
    if mExplorerWindow == nil {
      buildExplorerWindow ()
    }
    mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  @objc func deleteSelectionControllerWindowAction (_ : Any) {
    self.clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    let closeButton = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton!.target = nil
    self.mExplorerWindow?.orderOut (nil)
    self.mExplorerWindow = nil
  }

  //···················································································································*

  private final func bind_property_issues (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_issues (self.issues_property)
    self.issues_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_label (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_label (self.label_property)
    self.label_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.label_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.label_property.writeModelFunction = { [weak self] (inValue : String) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.label_property.setProp (inValue)
          }
        }
      }
    }
    self.label_property.validateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.label_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_labelHorizontalAlignment (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_labelHorizontalAlignment (self.labelHorizontalAlignment_property)
    self.labelHorizontalAlignment_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <HorizontalAlignment> ()
          var isMultipleSelection = false
          for object in v {
            switch object.labelHorizontalAlignment_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.labelHorizontalAlignment_property.writeModelFunction = { [weak self] (inValue : HorizontalAlignment) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.labelHorizontalAlignment_property.setProp (inValue)
          }
        }
      }
    }
    self.labelHorizontalAlignment_property.validateAndWriteModelFunction = { [weak self] (candidateValue : HorizontalAlignment, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.labelHorizontalAlignment_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_numberHorizontalAlignment (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_numberHorizontalAlignment (self.numberHorizontalAlignment_property)
    self.numberHorizontalAlignment_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <HorizontalAlignment> ()
          var isMultipleSelection = false
          for object in v {
            switch object.numberHorizontalAlignment_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.numberHorizontalAlignment_property.writeModelFunction = { [weak self] (inValue : HorizontalAlignment) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.numberHorizontalAlignment_property.setProp (inValue)
          }
        }
      }
    }
    self.numberHorizontalAlignment_property.validateAndWriteModelFunction = { [weak self] (candidateValue : HorizontalAlignment, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.numberHorizontalAlignment_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_objectDisplay (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_pinNumberIsVisibleInSchematics (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_pinNumberIsVisibleInSchematics (self.pinNumberIsVisibleInSchematics_property)
    self.pinNumberIsVisibleInSchematics_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.pinNumberIsVisibleInSchematics_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.pinNumberIsVisibleInSchematics_property.writeModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.pinNumberIsVisibleInSchematics_property.setProp (inValue)
          }
        }
      }
    }
    self.pinNumberIsVisibleInSchematics_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.pinNumberIsVisibleInSchematics_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_selectionDisplay (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_xLabel (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_xLabel (self.xLabel_property)
    self.xLabel_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xLabel_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xLabel_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xLabel_property.setProp (inValue)
          }
        }
      }
    }
    self.xLabel_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xLabel_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_xNumber (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_xNumber (self.xNumber_property)
    self.xNumber_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xNumber_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xNumber_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xNumber_property.setProp (inValue)
          }
        }
      }
    }
    self.xNumber_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xNumber_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_xPin (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_xPin (self.xPin_property)
    self.xPin_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xPin_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xPin_property.setProp (inValue)
          }
        }
      }
    }
    self.xPin_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xPin_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_yLabel (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_yLabel (self.yLabel_property)
    self.yLabel_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yLabel_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yLabel_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yLabel_property.setProp (inValue)
          }
        }
      }
    }
    self.yLabel_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yLabel_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_yNumber (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_yNumber (self.yNumber_property)
    self.yNumber_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yNumber_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yNumber_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yNumber_property.setProp (inValue)
          }
        }
      }
    }
    self.yNumber_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yNumber_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_yPin (model : ReadOnlyArrayOf_SymbolPin) {
    model.addEBObserverOf_yPin (self.yPin_property)
    self.yPin_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yPin_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yPin_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yPin_property.setProp (inValue)
          }
        }
      }
    }
    self.yPin_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yPin_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

