//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

//--- START OF USER ZONE 1

let SYMBOL_BEZIER_CURVE_ENDPOINT_1 = 1
let SYMBOL_BEZIER_CURVE_ENDPOINT_2 = 2
let SYMBOL_BEZIER_CURVE_CONTROL_1  = 3
let SYMBOL_BEZIER_CURVE_CONTROL_2  = 4

//--- END OF USER ZONE 1
//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

protocol SymbolBezierCurve_y1 : AnyObject {
  var y1 : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol SymbolBezierCurve_x2 : AnyObject {
  var x2 : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol SymbolBezierCurve_y2 : AnyObject {
  var y2 : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol SymbolBezierCurve_cpx1 : AnyObject {
  var cpx1 : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol SymbolBezierCurve_cpy1 : AnyObject {
  var cpy1 : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol SymbolBezierCurve_cpx2 : AnyObject {
  var cpx2 : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol SymbolBezierCurve_cpy2 : AnyObject {
  var cpy2 : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol SymbolBezierCurve_x1 : AnyObject {
  var x1 : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol SymbolBezierCurve_strokeBezierPath : AnyObject {
  var strokeBezierPath : NSBezierPath? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol SymbolBezierCurve_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol SymbolBezierCurve_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol SymbolBezierCurve_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------
//    Entity: SymbolBezierCurve
//----------------------------------------------------------------------------------------------------------------------

final class SymbolBezierCurve : SymbolObject,
         SymbolBezierCurve_y1,
         SymbolBezierCurve_x2,
         SymbolBezierCurve_y2,
         SymbolBezierCurve_cpx1,
         SymbolBezierCurve_cpy1,
         SymbolBezierCurve_cpx2,
         SymbolBezierCurve_cpy2,
         SymbolBezierCurve_x1,
         SymbolBezierCurve_strokeBezierPath,
         SymbolBezierCurve_objectDisplay,
         SymbolBezierCurve_selectionDisplay,
         SymbolBezierCurve_issues {

  //····················································································································
  //   Atomic property: y1
  //····················································································································

  final let y1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_y1_toDefaultValue () {
    self.y1 = 685800
  }

  //····················································································································

  final var y1 : Int {
    get { return self.y1_property.propval }
    set { self.y1_property.setProp (newValue) }
  }

  //····················································································································

  final var y1_property_selection : EBSelection <Int> { return self.y1_property.selection }

  //····················································································································
  //   Atomic property: x2
  //····················································································································

  final let x2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_x2_toDefaultValue () {
    self.x2 = 0
  }

  //····················································································································

  final var x2 : Int {
    get { return self.x2_property.propval }
    set { self.x2_property.setProp (newValue) }
  }

  //····················································································································

  final var x2_property_selection : EBSelection <Int> { return self.x2_property.selection }

  //····················································································································
  //   Atomic property: y2
  //····················································································································

  final let y2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_y2_toDefaultValue () {
    self.y2 = 0
  }

  //····················································································································

  final var y2 : Int {
    get { return self.y2_property.propval }
    set { self.y2_property.setProp (newValue) }
  }

  //····················································································································

  final var y2_property_selection : EBSelection <Int> { return self.y2_property.selection }

  //····················································································································
  //   Atomic property: cpx1
  //····················································································································

  final let cpx1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_cpx1_toDefaultValue () {
    self.cpx1 = 685800
  }

  //····················································································································

  final var cpx1 : Int {
    get { return self.cpx1_property.propval }
    set { self.cpx1_property.setProp (newValue) }
  }

  //····················································································································

  final var cpx1_property_selection : EBSelection <Int> { return self.cpx1_property.selection }

  //····················································································································
  //   Atomic property: cpy1
  //····················································································································

  final let cpy1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_cpy1_toDefaultValue () {
    self.cpy1 = 685800
  }

  //····················································································································

  final var cpy1 : Int {
    get { return self.cpy1_property.propval }
    set { self.cpy1_property.setProp (newValue) }
  }

  //····················································································································

  final var cpy1_property_selection : EBSelection <Int> { return self.cpy1_property.selection }

  //····················································································································
  //   Atomic property: cpx2
  //····················································································································

  final let cpx2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_cpx2_toDefaultValue () {
    self.cpx2 = 685800
  }

  //····················································································································

  final var cpx2 : Int {
    get { return self.cpx2_property.propval }
    set { self.cpx2_property.setProp (newValue) }
  }

  //····················································································································

  final var cpx2_property_selection : EBSelection <Int> { return self.cpx2_property.selection }

  //····················································································································
  //   Atomic property: cpy2
  //····················································································································

  final let cpy2_property : EBStoredProperty_Int

  //····················································································································

  final func reset_cpy2_toDefaultValue () {
    self.cpy2 = 0
  }

  //····················································································································

  final var cpy2 : Int {
    get { return self.cpy2_property.propval }
    set { self.cpy2_property.setProp (newValue) }
  }

  //····················································································································

  final var cpy2_property_selection : EBSelection <Int> { return self.cpy2_property.selection }

  //····················································································································
  //   Atomic property: x1
  //····················································································································

  final let x1_property : EBStoredProperty_Int

  //····················································································································

  final func reset_x1_toDefaultValue () {
    self.x1 = 0
  }

  //····················································································································

  final var x1 : Int {
    get { return self.x1_property.propval }
    set { self.x1_property.setProp (newValue) }
  }

  //····················································································································

  final var x1_property_selection : EBSelection <Int> { return self.x1_property.selection }

  //····················································································································
  //   Transient property: strokeBezierPath
  //····················································································································

  final let strokeBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  final var strokeBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.strokeBezierPath_property.selection
  }

  //····················································································································

  final var strokeBezierPath : NSBezierPath? {
    switch self.strokeBezierPath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.y1_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: ebUndoManager)
    self.x2_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.y2_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.cpx1_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: ebUndoManager)
    self.cpy1_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: ebUndoManager)
    self.cpx2_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: ebUndoManager)
    self.cpy2_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.x1_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.cpx1_property_selection.kind ()
        kind &= unwSelf.cpy1_property_selection.kind ()
        kind &= unwSelf.cpx2_property_selection.kind ()
        kind &= unwSelf.cpy2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.cpx1_property_selection, unwSelf.cpy1_property_selection, unwSelf.cpx2_property_selection, unwSelf.cpy2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_SymbolBezierCurve_strokeBezierPath (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.strokeBezierPath_property)
    self.y1_property.addEBObserver (self.strokeBezierPath_property)
    self.x2_property.addEBObserver (self.strokeBezierPath_property)
    self.y2_property.addEBObserver (self.strokeBezierPath_property)
    self.cpx1_property.addEBObserver (self.strokeBezierPath_property)
    self.cpy1_property.addEBObserver (self.strokeBezierPath_property)
    self.cpx2_property.addEBObserver (self.strokeBezierPath_property)
    self.cpy2_property.addEBObserver (self.strokeBezierPath_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.cpx1_property_selection.kind ()
        kind &= unwSelf.cpy1_property_selection.kind ()
        kind &= unwSelf.cpx2_property_selection.kind ()
        kind &= unwSelf.cpy2_property_selection.kind ()
        kind &= preferences_symbolColor_property_selection.kind ()
        kind &= preferences_symbolDrawingWidthMultipliedByTen_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.cpx1_property_selection, unwSelf.cpy1_property_selection, unwSelf.cpx2_property_selection, unwSelf.cpy2_property_selection, preferences_symbolColor_property_selection, preferences_symbolDrawingWidthMultipliedByTen_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
            return .single (transient_SymbolBezierCurve_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.objectDisplay_property)
    self.y1_property.addEBObserver (self.objectDisplay_property)
    self.x2_property.addEBObserver (self.objectDisplay_property)
    self.y2_property.addEBObserver (self.objectDisplay_property)
    self.cpx1_property.addEBObserver (self.objectDisplay_property)
    self.cpy1_property.addEBObserver (self.objectDisplay_property)
    self.cpx2_property.addEBObserver (self.objectDisplay_property)
    self.cpy2_property.addEBObserver (self.objectDisplay_property)
    preferences_symbolColor_property.addEBObserver (self.objectDisplay_property)
    preferences_symbolDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.cpx1_property_selection.kind ()
        kind &= unwSelf.cpy1_property_selection.kind ()
        kind &= unwSelf.cpx2_property_selection.kind ()
        kind &= unwSelf.cpy2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.cpx1_property_selection, unwSelf.cpy1_property_selection, unwSelf.cpx2_property_selection, unwSelf.cpy2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_SymbolBezierCurve_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.selectionDisplay_property)
    self.y1_property.addEBObserver (self.selectionDisplay_property)
    self.x2_property.addEBObserver (self.selectionDisplay_property)
    self.y2_property.addEBObserver (self.selectionDisplay_property)
    self.cpx1_property.addEBObserver (self.selectionDisplay_property)
    self.cpy1_property.addEBObserver (self.selectionDisplay_property)
    self.cpx2_property.addEBObserver (self.selectionDisplay_property)
    self.cpy2_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.cpx1_property_selection.kind ()
        kind &= unwSelf.cpy1_property_selection.kind ()
        kind &= unwSelf.cpx2_property_selection.kind ()
        kind &= unwSelf.cpy2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.cpx1_property_selection, unwSelf.cpy1_property_selection, unwSelf.cpx2_property_selection, unwSelf.cpy2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_SymbolBezierCurve_issues (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.issues_property)
    self.y1_property.addEBObserver (self.issues_property)
    self.x2_property.addEBObserver (self.issues_property)
    self.y2_property.addEBObserver (self.issues_property)
    self.cpx1_property.addEBObserver (self.issues_property)
    self.cpy1_property.addEBObserver (self.issues_property)
    self.cpx2_property.addEBObserver (self.issues_property)
    self.cpy2_property.addEBObserver (self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.cpx1_property.setSignatureObserver (observer: self)
    self.cpx2_property.setSignatureObserver (observer: self)
    self.cpy1_property.setSignatureObserver (observer: self)
    self.cpy2_property.setSignatureObserver (observer: self)
    self.x1_property.setSignatureObserver (observer: self)
    self.x2_property.setSignatureObserver (observer: self)
    self.y1_property.setSignatureObserver (observer: self)
    self.y2_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    // self.x1_property.removeEBObserver (self.strokeBezierPath_property)
    // self.y1_property.removeEBObserver (self.strokeBezierPath_property)
    // self.x2_property.removeEBObserver (self.strokeBezierPath_property)
    // self.y2_property.removeEBObserver (self.strokeBezierPath_property)
    // self.cpx1_property.removeEBObserver (self.strokeBezierPath_property)
    // self.cpy1_property.removeEBObserver (self.strokeBezierPath_property)
    // self.cpx2_property.removeEBObserver (self.strokeBezierPath_property)
    // self.cpy2_property.removeEBObserver (self.strokeBezierPath_property)
    // self.x1_property.removeEBObserver (self.objectDisplay_property)
    // self.y1_property.removeEBObserver (self.objectDisplay_property)
    // self.x2_property.removeEBObserver (self.objectDisplay_property)
    // self.y2_property.removeEBObserver (self.objectDisplay_property)
    // self.cpx1_property.removeEBObserver (self.objectDisplay_property)
    // self.cpy1_property.removeEBObserver (self.objectDisplay_property)
    // self.cpx2_property.removeEBObserver (self.objectDisplay_property)
    // self.cpy2_property.removeEBObserver (self.objectDisplay_property)
    // preferences_symbolColor_property.removeEBObserver (self.objectDisplay_property)
    // preferences_symbolDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    // self.x1_property.removeEBObserver (self.selectionDisplay_property)
    // self.y1_property.removeEBObserver (self.selectionDisplay_property)
    // self.x2_property.removeEBObserver (self.selectionDisplay_property)
    // self.y2_property.removeEBObserver (self.selectionDisplay_property)
    // self.cpx1_property.removeEBObserver (self.selectionDisplay_property)
    // self.cpy1_property.removeEBObserver (self.selectionDisplay_property)
    // self.cpx2_property.removeEBObserver (self.selectionDisplay_property)
    // self.cpy2_property.removeEBObserver (self.selectionDisplay_property)
    // self.x1_property.removeEBObserver (self.issues_property)
    // self.y1_property.removeEBObserver (self.issues_property)
    // self.x2_property.removeEBObserver (self.issues_property)
    // self.y2_property.removeEBObserver (self.issues_property)
    // self.cpx1_property.removeEBObserver (self.issues_property)
    // self.cpy1_property.removeEBObserver (self.issues_property)
    // self.cpx2_property.removeEBObserver (self.issues_property)
    // self.cpy2_property.removeEBObserver (self.issues_property)
  //--- Unregister properties for handling signature
    self.cpx1_property.setSignatureObserver (observer: nil)
    self.cpx2_property.setSignatureObserver (observer: nil)
    self.cpy1_property.setSignatureObserver (observer: nil)
    self.cpy2_property.setSignatureObserver (observer: nil)
    self.x1_property.setSignatureObserver (observer: nil)
    self.x2_property.setSignatureObserver (observer: nil)
    self.y1_property.setSignatureObserver (observer: nil)
    self.y2_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "y1",
      idx: self.y1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.y1_property.mObserverExplorer,
      valueExplorer: &self.y1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2",
      idx: self.x2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.x2_property.mObserverExplorer,
      valueExplorer: &self.x2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2",
      idx: self.y2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.y2_property.mObserverExplorer,
      valueExplorer: &self.y2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpx1",
      idx: self.cpx1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cpx1_property.mObserverExplorer,
      valueExplorer: &self.cpx1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpy1",
      idx: self.cpy1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cpy1_property.mObserverExplorer,
      valueExplorer: &self.cpy1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpx2",
      idx: self.cpx2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cpx2_property.mObserverExplorer,
      valueExplorer: &self.cpx2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpy2",
      idx: self.cpy2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cpy2_property.mObserverExplorer,
      valueExplorer: &self.cpy2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1",
      idx: self.x1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.x1_property.mObserverExplorer,
      valueExplorer: &self.x1_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "strokeBezierPath",
      idx: self.strokeBezierPath_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.strokeBezierPath_property.mObserverExplorer,
      valueExplorer: &self.strokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: y1
    self.y1_property.mObserverExplorer = nil
    self.y1_property.mValueExplorer = nil
  //--- Atomic property: x2
    self.x2_property.mObserverExplorer = nil
    self.x2_property.mValueExplorer = nil
  //--- Atomic property: y2
    self.y2_property.mObserverExplorer = nil
    self.y2_property.mValueExplorer = nil
  //--- Atomic property: cpx1
    self.cpx1_property.mObserverExplorer = nil
    self.cpx1_property.mValueExplorer = nil
  //--- Atomic property: cpy1
    self.cpy1_property.mObserverExplorer = nil
    self.cpy1_property.mValueExplorer = nil
  //--- Atomic property: cpx2
    self.cpx2_property.mObserverExplorer = nil
    self.cpx2_property.mValueExplorer = nil
  //--- Atomic property: cpy2
    self.cpy2_property.mObserverExplorer = nil
    self.cpy2_property.mValueExplorer = nil
  //--- Atomic property: x1
    self.x1_property.mObserverExplorer = nil
    self.x1_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: y1
    self.y1_property.storeIn (dictionary: ioDictionary, forKey: "y1")
  //--- Atomic property: x2
    self.x2_property.storeIn (dictionary: ioDictionary, forKey: "x2")
  //--- Atomic property: y2
    self.y2_property.storeIn (dictionary: ioDictionary, forKey: "y2")
  //--- Atomic property: cpx1
    self.cpx1_property.storeIn (dictionary: ioDictionary, forKey: "cpx1")
  //--- Atomic property: cpy1
    self.cpy1_property.storeIn (dictionary: ioDictionary, forKey: "cpy1")
  //--- Atomic property: cpx2
    self.cpx2_property.storeIn (dictionary: ioDictionary, forKey: "cpx2")
  //--- Atomic property: cpy2
    self.cpy2_property.storeIn (dictionary: ioDictionary, forKey: "cpy2")
  //--- Atomic property: x1
    self.x1_property.storeIn (dictionary: ioDictionary, forKey: "x1")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: y1
    self.y1_property.readFrom (dictionary: inDictionary, forKey: "y1")
  //--- Atomic property: x2
    self.x2_property.readFrom (dictionary: inDictionary, forKey: "x2")
  //--- Atomic property: y2
    self.y2_property.readFrom (dictionary: inDictionary, forKey: "y2")
  //--- Atomic property: cpx1
    self.cpx1_property.readFrom (dictionary: inDictionary, forKey: "cpx1")
  //--- Atomic property: cpy1
    self.cpy1_property.readFrom (dictionary: inDictionary, forKey: "cpy1")
  //--- Atomic property: cpx2
    self.cpx2_property.readFrom (dictionary: inDictionary, forKey: "cpx2")
  //--- Atomic property: cpy2
    self.cpy2_property.readFrom (dictionary: inDictionary, forKey: "cpy2")
  //--- Atomic property: x1
    self.x1_property.readFrom (dictionary: inDictionary, forKey: "x1")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "y1\n"
    ioString += "x2\n"
    ioString += "y2\n"
    ioString += "cpx1\n"
    ioString += "cpy1\n"
    ioString += "cpx2\n"
    ioString += "cpy2\n"
    ioString += "x1\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.y1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.y2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.cpx1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.cpy1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.cpx2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.cpy2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.x1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["y1"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.y1 = value
      }
      if let range = inDictionary ["x2"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.x2 = value
      }
      if let range = inDictionary ["y2"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.y2 = value
      }
      if let range = inDictionary ["cpx1"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.cpx1 = value
      }
      if let range = inDictionary ["cpy1"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.cpy1 = value
      }
      if let range = inDictionary ["cpx2"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.cpx2 = value
      }
      if let range = inDictionary ["cpy2"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.cpy2 = value
      }
      if let range = inDictionary ["x1"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.x1 = value
      }
    //--- To one relationships
    //--- To many relationships
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.cpx1_property.signature ())
    crc.accumulateUInt32 (self.cpx2_property.signature ())
    crc.accumulateUInt32 (self.cpy1_property.signature ())
    crc.accumulateUInt32 (self.cpy2_property.signature ())
    crc.accumulateUInt32 (self.x1_property.signature ())
    crc.accumulateUInt32 (self.x2_property.signature ())
    crc.accumulateUInt32 (self.y1_property.signature ())
    crc.accumulateUInt32 (self.y2_property.signature ())
    return crc
  }

  //····················································································································
  //  USER ZONE 2
  //····················································································································
//--- START OF USER ZONE 2

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return NSCursor.upDownRightLeftCursor
  }

  //····················································································································

//  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
//    var acceptedX = inDx
//    do{
//      let newX = self.x1 + acceptedX
//      if newX < 0 {
//        acceptedX = -self.x1
//      }
//    }
//    do{
//      let newX = self.cpx1 + acceptedX
//      if newX < 0 {
//        acceptedX = -self.cpx1
//      }
//    }
//    do{
//      let newX = self.x2 + acceptedX
//      if newX < 0 {
//        acceptedX = -self.x2
//      }
//    }
//    do{
//      let newX = self.cpx2 + acceptedX
//      if newX < 0 {
//        acceptedX = -self.cpx2
//      }
//    }
//    var acceptedY = inDy
//    do{
//      let newY = self.y1 + acceptedY
//      if newY < 0 {
//        acceptedY = -self.y1
//      }
//    }
//    do{
//      let newY = self.cpy1 + acceptedY
//      if newY < 0 {
//        acceptedY = -self.cpy1
//      }
//    }
//    do{
//      let newY = self.y2 + acceptedY
//      if newY < 0 {
//        acceptedY = -self.y2
//      }
//    }
//    do{
//      let newY = self.cpy2 + acceptedY
//      if newY < 0 {
//        acceptedY = -self.cpy2
//      }
//    }
//    return CanariPoint (x: acceptedX, y: acceptedY)
//  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return true
//    let newX1 = self.x1 + inDx
//    let newY1 = self.y1 + inDy
//    let newX2 = self.x2 + inDx
//    let newY2 = self.y2 + inDy
//    let newCPX1 = self.cpx1 + inDx
//    let newCPY1 = self.cpy1 + inDy
//    let newCPX2 = self.cpx2 + inDx
//    let newCPY2 = self.cpy2 + inDy
//    return (newX1 >= 0) && (newY1 >= 0) && (newX2 >= 0) && (newY2 >= 0)
//      && (newCPX1 >= 0) && (newCPY1 >= 0) && (newCPX2 >= 0) && (newCPY2 >= 0)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int, userSet ioSet : ObjcObjectSet) {
    self.x1 += inDx
    self.y1 += inDy
    self.x2 += inDx
    self.y2 += inDy
    self.cpx1 += inDx
    self.cpy1 += inDy
    self.cpx2 += inDx
    self.cpy2 += inDy
  }

  //····················································································································
  //  Knob
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return inProposedAlignedTranslation
 }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    if inKnobIndex == SYMBOL_BEZIER_CURVE_ENDPOINT_1 {
      self.x1 += inDx
      self.y1 += inDy
    }else if inKnobIndex == SYMBOL_BEZIER_CURVE_ENDPOINT_2 {
      self.x2 += inDx
      self.y2 += inDy
    }else if inKnobIndex == SYMBOL_BEZIER_CURVE_CONTROL_1 {
      self.cpx1 += inDx
      self.cpy1 += inDy
    }else if inKnobIndex == SYMBOL_BEZIER_CURVE_CONTROL_2 {
      self.cpx2 += inDx
      self.cpy2 += inDy
    }
  }

  //····················································································································
  //  Flip horizontally
  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return min (self.x1, self.x2, self.cpx1, self.cpx2) != max (self.x1, self.x2, self.cpx1, self.cpx2)
  }

  //····················································································································

  override func flipHorizontally () {
    let v = min (self.x1, self.x2, self.cpx1, self.cpx2) + max (self.x1, self.x2, self.cpx1, self.cpx2)
    self.x1 = v - self.x1
    self.x2 = v - self.x2
    self.cpx1 = v - self.cpx1
    self.cpx2 = v - self.cpx2
  }

  //····················································································································
  //  Flip vertically
  //····················································································································

  override func canFlipVertically () -> Bool {
    return min (self.y1, self.y2, self.cpy1, self.cpy2) != max (self.y1, self.y2, self.cpy1, self.cpy2)
  }

  //····················································································································

  override func flipVertically () {
    let v = min (self.y1, self.y2, self.cpy1, self.cpy2) + max (self.y1, self.y2, self.cpy1, self.cpy2)
    self.y1 = v - self.y1
    self.y2 = v - self.y2
    self.cpy1 = v - self.cpy1
    self.cpy2 = v - self.cpy2
  }

  //····················································································································
  //  Rotate 90°
  //····················································································································

  override func canRotate90 (accumulatedPoints : ObjcCanariPointSet) -> Bool {
    let p1  = CanariPoint (x: self.x1, y: self.y1)
    let p2  = CanariPoint (x: self.x2, y: self.y2)
    let cp1 = CanariPoint (x: self.cpx1, y: self.cpy1)
    let cp2 = CanariPoint (x: self.cpx2, y: cpy2)
    accumulatedPoints.insert (p1)
    accumulatedPoints.insert (p2)
    accumulatedPoints.insert (cp1)
    accumulatedPoints.insert (cp2)
    return true
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint, userSet ioSet : ObjcObjectSet) {
    let p1 = inRotationCenter.rotated90Clockwise (x: self.x1, y: self.y1)
    let p2 = inRotationCenter.rotated90Clockwise (x: self.x2, y: self.y2)
    let cp1 = inRotationCenter.rotated90Clockwise (x: self.cpx1, y: self.cpy1)
    let cp2 = inRotationCenter.rotated90Clockwise (x: self.cpx2, y: self.cpy2)
    self.x1 = p1.x
    self.y1 = p1.y
    self.cpx1 = cp1.x
    self.cpy1 = cp1.y
    self.x2 = p2.x
    self.y2 = p2.y
    self.cpx2 = cp2.x
    self.cpy2 = cp2.y
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint, userSet ioSet : ObjcObjectSet) {
    let p1 = inRotationCenter.rotated90CounterClockwise (x: self.x1, y: self.y1)
    let p2 = inRotationCenter.rotated90CounterClockwise (x: self.x2, y: self.y2)
    let cp1 = inRotationCenter.rotated90CounterClockwise (x: self.cpx1, y: self.cpy1)
    let cp2 = inRotationCenter.rotated90CounterClockwise (x: self.cpx2, y: self.cpy2)
    self.x1 = p1.x
    self.y1 = p1.y
    self.cpx1 = cp1.x
    self.cpy1 = cp1.y
    self.x2 = p2.x
    self.y2 = p2.y
    self.cpx2 = cp2.x
    self.cpy2 = cp2.y
  }

  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

  //····················································································································
  //  SNAP TO GRID
  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    var result = (self.x1 % inGrid) != 0
    if !result {
      result = (self.y1 % inGrid) != 0
    }
    if !result {
      result = (self.x2 % inGrid) != 0
    }
    if !result {
      result = (self.y2 % inGrid) != 0
    }
    if !result {
      result = (self.cpx2 % inGrid) != 0
    }
    if !result {
      result = (self.cpy2 % inGrid) != 0
    }
    if !result {
      result = (self.cpx1 % inGrid) != 0
    }
    if !result {
      result = (self.cpy1 % inGrid) != 0
    }
    return result
  }

  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.x1 = ((self.x1 + inGrid / 2) / inGrid) * inGrid
    self.y1 = ((self.y1 + inGrid / 2) / inGrid) * inGrid
    self.x2 = ((self.x2 + inGrid / 2) / inGrid) * inGrid
    self.y2 = ((self.y2 + inGrid / 2) / inGrid) * inGrid
    self.cpx1 = ((self.cpx1 + inGrid / 2) / inGrid) * inGrid
    self.cpy1 = ((self.cpy1 + inGrid / 2) / inGrid) * inGrid
    self.cpx2 = ((self.cpx2 + inGrid / 2) / inGrid) * inGrid
    self.cpy2 = ((self.cpy2 + inGrid / 2) / inGrid) * inGrid
  }

  //····················································································································

  override func alignmentPoints () -> ObjcCanariPointSet {
    let result = ObjcCanariPointSet ()
    result.insert (CanariPoint (x: self.x1, y: self.y1))
    result.insert (CanariPoint (x: self.x2, y: self.y2))
    result.insert (CanariPoint (x: self.cpx1, y: self.cpy1))
    result.insert (CanariPoint (x: self.cpx2, y: self.cpy2))
    return result
  }

  //····················································································································

//--- END OF USER ZONE 2
}

//----------------------------------------------------------------------------------------------------------------------
