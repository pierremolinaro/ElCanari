//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolBezierCurve_y1 : class {
  var y1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolBezierCurve_x2 : class {
  var x2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolBezierCurve_y2 : class {
  var y2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolBezierCurve_cpx1 : class {
  var cpx1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolBezierCurve_cpy1 : class {
  var cpy1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolBezierCurve_cpx2 : class {
  var cpx2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolBezierCurve_cpy2 : class {
  var cpy2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolBezierCurve_x1 : class {
  var x1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolBezierCurve_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolBezierCurve_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolBezierCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class SymbolBezierCurve : SymbolObject,
         SymbolBezierCurve_y1,
         SymbolBezierCurve_x2,
         SymbolBezierCurve_y2,
         SymbolBezierCurve_cpx1,
         SymbolBezierCurve_cpy1,
         SymbolBezierCurve_cpx2,
         SymbolBezierCurve_cpy2,
         SymbolBezierCurve_x1,
         SymbolBezierCurve_objectDisplay,
         SymbolBezierCurve_selectionDisplay {

  //····················································································································
  //   Atomic property: y1
  //····················································································································

  var y1_property = EBStoredProperty_Int (915400)

  //····················································································································

  var y1 : Int {
    get {
      return self.y1_property.propval
    }
    set {
      self.y1_property.setProp (newValue)
    }
  }

  //····················································································································

  var y1_property_selection : EBSelection <Int> {
    return self.y1_property.prop
  }

  //····················································································································
  //   Atomic property: x2
  //····················································································································

  var x2_property = EBStoredProperty_Int (228600)

  //····················································································································

  var x2 : Int {
    get {
      return self.x2_property.propval
    }
    set {
      self.x2_property.setProp (newValue)
    }
  }

  //····················································································································

  var x2_property_selection : EBSelection <Int> {
    return self.x2_property.prop
  }

  //····················································································································
  //   Atomic property: y2
  //····················································································································

  var y2_property = EBStoredProperty_Int (228600)

  //····················································································································

  var y2 : Int {
    get {
      return self.y2_property.propval
    }
    set {
      self.y2_property.setProp (newValue)
    }
  }

  //····················································································································

  var y2_property_selection : EBSelection <Int> {
    return self.y2_property.prop
  }

  //····················································································································
  //   Atomic property: cpx1
  //····················································································································

  var cpx1_property = EBStoredProperty_Int (915400)

  //····················································································································

  var cpx1 : Int {
    get {
      return self.cpx1_property.propval
    }
    set {
      self.cpx1_property.setProp (newValue)
    }
  }

  //····················································································································

  var cpx1_property_selection : EBSelection <Int> {
    return self.cpx1_property.prop
  }

  //····················································································································
  //   Atomic property: cpy1
  //····················································································································

  var cpy1_property = EBStoredProperty_Int (915400)

  //····················································································································

  var cpy1 : Int {
    get {
      return self.cpy1_property.propval
    }
    set {
      self.cpy1_property.setProp (newValue)
    }
  }

  //····················································································································

  var cpy1_property_selection : EBSelection <Int> {
    return self.cpy1_property.prop
  }

  //····················································································································
  //   Atomic property: cpx2
  //····················································································································

  var cpx2_property = EBStoredProperty_Int (915400)

  //····················································································································

  var cpx2 : Int {
    get {
      return self.cpx2_property.propval
    }
    set {
      self.cpx2_property.setProp (newValue)
    }
  }

  //····················································································································

  var cpx2_property_selection : EBSelection <Int> {
    return self.cpx2_property.prop
  }

  //····················································································································
  //   Atomic property: cpy2
  //····················································································································

  var cpy2_property = EBStoredProperty_Int (228600)

  //····················································································································

  var cpy2 : Int {
    get {
      return self.cpy2_property.propval
    }
    set {
      self.cpy2_property.setProp (newValue)
    }
  }

  //····················································································································

  var cpy2_property_selection : EBSelection <Int> {
    return self.cpy2_property.prop
  }

  //····················································································································
  //   Atomic property: x1
  //····················································································································

  var x1_property = EBStoredProperty_Int (228600)

  //····················································································································

  var x1 : Int {
    get {
      return self.x1_property.propval
    }
    set {
      self.x1_property.setProp (newValue)
    }
  }

  //····················································································································

  var x1_property_selection : EBSelection <Int> {
    return self.x1_property.prop
  }


  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Atomic property: y1
    self.y1_property.undoManager = self.undoManager
  //--- Atomic property: x2
    self.x2_property.undoManager = self.undoManager
  //--- Atomic property: y2
    self.y2_property.undoManager = self.undoManager
  //--- Atomic property: cpx1
    self.cpx1_property.undoManager = self.undoManager
  //--- Atomic property: cpy1
    self.cpy1_property.undoManager = self.undoManager
  //--- Atomic property: cpx2
    self.cpx2_property.undoManager = self.undoManager
  //--- Atomic property: cpy2
    self.cpy2_property.undoManager = self.undoManager
  //--- Atomic property: x1
    self.x1_property.undoManager = self.undoManager
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.cpx1_property_selection.kind ()
        kind &= unwSelf.cpy1_property_selection.kind ()
        kind &= unwSelf.cpx2_property_selection.kind ()
        kind &= unwSelf.cpy2_property_selection.kind ()
        kind &= g_Preferences!.symbolColor_property_selection.kind ()
        kind &= g_Preferences!.symbolDrawingWidthMultipliedByTen_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.cpx1_property_selection, unwSelf.cpy1_property_selection, unwSelf.cpx2_property_selection, unwSelf.cpy2_property_selection, g_Preferences!.symbolColor_property_selection, g_Preferences!.symbolDrawingWidthMultipliedByTen_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
            return .single (transient_SymbolBezierCurve_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.objectDisplay_property)
    self.y1_property.addEBObserver (self.objectDisplay_property)
    self.x2_property.addEBObserver (self.objectDisplay_property)
    self.y2_property.addEBObserver (self.objectDisplay_property)
    self.cpx1_property.addEBObserver (self.objectDisplay_property)
    self.cpy1_property.addEBObserver (self.objectDisplay_property)
    self.cpx2_property.addEBObserver (self.objectDisplay_property)
    self.cpy2_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.cpx1_property_selection.kind ()
        kind &= unwSelf.cpy1_property_selection.kind ()
        kind &= unwSelf.cpx2_property_selection.kind ()
        kind &= unwSelf.cpy2_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.cpx1_property_selection, unwSelf.cpy1_property_selection, unwSelf.cpx2_property_selection, unwSelf.cpy2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_SymbolBezierCurve_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.selectionDisplay_property)
    self.y1_property.addEBObserver (self.selectionDisplay_property)
    self.x2_property.addEBObserver (self.selectionDisplay_property)
    self.y2_property.addEBObserver (self.selectionDisplay_property)
    self.cpx1_property.addEBObserver (self.selectionDisplay_property)
    self.cpy1_property.addEBObserver (self.selectionDisplay_property)
    self.cpx2_property.addEBObserver (self.selectionDisplay_property)
    self.cpy2_property.addEBObserver (self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.cpx1_property.setSignatureObserver (observer:self)
    self.cpx2_property.setSignatureObserver (observer:self)
    self.cpy1_property.setSignatureObserver (observer:self)
    self.cpy2_property.setSignatureObserver (observer:self)
    self.x1_property.setSignatureObserver (observer:self)
    self.x2_property.setSignatureObserver (observer:self)
    self.y1_property.setSignatureObserver (observer:self)
    self.y2_property.setSignatureObserver (observer:self)
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.x1_property.removeEBObserver (self.objectDisplay_property)
    self.y1_property.removeEBObserver (self.objectDisplay_property)
    self.x2_property.removeEBObserver (self.objectDisplay_property)
    self.y2_property.removeEBObserver (self.objectDisplay_property)
    self.cpx1_property.removeEBObserver (self.objectDisplay_property)
    self.cpy1_property.removeEBObserver (self.objectDisplay_property)
    self.cpx2_property.removeEBObserver (self.objectDisplay_property)
    self.cpy2_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    self.x1_property.removeEBObserver (self.selectionDisplay_property)
    self.y1_property.removeEBObserver (self.selectionDisplay_property)
    self.x2_property.removeEBObserver (self.selectionDisplay_property)
    self.y2_property.removeEBObserver (self.selectionDisplay_property)
    self.cpx1_property.removeEBObserver (self.selectionDisplay_property)
    self.cpy1_property.removeEBObserver (self.selectionDisplay_property)
    self.cpx2_property.removeEBObserver (self.selectionDisplay_property)
    self.cpy2_property.removeEBObserver (self.selectionDisplay_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "y1",
      idx:self.y1_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y1_property.mObserverExplorer,
      valueExplorer:&self.y1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2",
      idx:self.x2_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x2_property.mObserverExplorer,
      valueExplorer:&self.x2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2",
      idx:self.y2_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y2_property.mObserverExplorer,
      valueExplorer:&self.y2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpx1",
      idx:self.cpx1_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cpx1_property.mObserverExplorer,
      valueExplorer:&self.cpx1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpy1",
      idx:self.cpy1_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cpy1_property.mObserverExplorer,
      valueExplorer:&self.cpy1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpx2",
      idx:self.cpx2_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cpx2_property.mObserverExplorer,
      valueExplorer:&self.cpx2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpy2",
      idx:self.cpy2_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cpy2_property.mObserverExplorer,
      valueExplorer:&self.cpy2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1",
      idx:self.x1_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x1_property.mObserverExplorer,
      valueExplorer:&self.x1_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: y1
    self.y1_property.mObserverExplorer = nil
    self.y1_property.mValueExplorer = nil
  //--- Atomic property: x2
    self.x2_property.mObserverExplorer = nil
    self.x2_property.mValueExplorer = nil
  //--- Atomic property: y2
    self.y2_property.mObserverExplorer = nil
    self.y2_property.mValueExplorer = nil
  //--- Atomic property: cpx1
    self.cpx1_property.mObserverExplorer = nil
    self.cpx1_property.mValueExplorer = nil
  //--- Atomic property: cpy1
    self.cpy1_property.mObserverExplorer = nil
    self.cpy1_property.mValueExplorer = nil
  //--- Atomic property: cpx2
    self.cpx2_property.mObserverExplorer = nil
    self.cpx2_property.mValueExplorer = nil
  //--- Atomic property: cpy2
    self.cpy2_property.mObserverExplorer = nil
    self.cpy2_property.mValueExplorer = nil
  //--- Atomic property: x1
    self.x1_property.mObserverExplorer = nil
    self.x1_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: y1
    self.y1_property.storeIn (dictionary: ioDictionary, forKey:"y1")
  //--- Atomic property: x2
    self.x2_property.storeIn (dictionary: ioDictionary, forKey:"x2")
  //--- Atomic property: y2
    self.y2_property.storeIn (dictionary: ioDictionary, forKey:"y2")
  //--- Atomic property: cpx1
    self.cpx1_property.storeIn (dictionary: ioDictionary, forKey:"cpx1")
  //--- Atomic property: cpy1
    self.cpy1_property.storeIn (dictionary: ioDictionary, forKey:"cpy1")
  //--- Atomic property: cpx2
    self.cpx2_property.storeIn (dictionary: ioDictionary, forKey:"cpx2")
  //--- Atomic property: cpy2
    self.cpy2_property.storeIn (dictionary: ioDictionary, forKey:"cpy2")
  //--- Atomic property: x1
    self.x1_property.storeIn (dictionary: ioDictionary, forKey:"x1")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- Atomic property: y1
    self.y1_property.readFrom (dictionary: inDictionary, forKey:"y1")
  //--- Atomic property: x2
    self.x2_property.readFrom (dictionary: inDictionary, forKey:"x2")
  //--- Atomic property: y2
    self.y2_property.readFrom (dictionary: inDictionary, forKey:"y2")
  //--- Atomic property: cpx1
    self.cpx1_property.readFrom (dictionary: inDictionary, forKey:"cpx1")
  //--- Atomic property: cpy1
    self.cpy1_property.readFrom (dictionary: inDictionary, forKey:"cpy1")
  //--- Atomic property: cpx2
    self.cpx2_property.readFrom (dictionary: inDictionary, forKey:"cpx2")
  //--- Atomic property: cpy2
    self.cpy2_property.readFrom (dictionary: inDictionary, forKey:"cpy2")
  //--- Atomic property: x1
    self.x1_property.readFrom (dictionary: inDictionary, forKey:"x1")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetControllers
  //····················································································································

  override func resetControllers () {
    super.resetControllers ()
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.cpx1_property.signature ())
    crc.accumulateUInt32 (self.cpx2_property.signature ())
    crc.accumulateUInt32 (self.cpy1_property.signature ())
    crc.accumulateUInt32 (self.cpy2_property.signature ())
    crc.accumulateUInt32 (self.x1_property.signature ())
    crc.accumulateUInt32 (self.x2_property.signature ())
    crc.accumulateUInt32 (self.y1_property.signature ())
    crc.accumulateUInt32 (self.y2_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolBezierCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolBezierCurve : ReadOnlyAbstractArrayProperty <SymbolBezierCurve> {

  //····················································································································

  var undoManager : EBUndoManager?

  //····················································································································

  var propval : [SymbolBezierCurve] { return [] } // Abstract method

  //····················································································································
  //   Observers of 'y1' stored property
  //····················································································································

  private var mObserversOf_y1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_y1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_y1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y1_toElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for managedObject in inSet {
      for observer in mObserversOf_y1 {
        managedObject.y1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y1_fromElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for observer in mObserversOf_y1 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x2' stored property
  //····················································································································

  private var mObserversOf_x2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_x2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_x2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x2_toElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for managedObject in inSet {
      for observer in mObserversOf_x2 {
        managedObject.x2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x2_fromElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for observer in mObserversOf_x2 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y2' stored property
  //····················································································································

  private var mObserversOf_y2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_y2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_y2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y2_toElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for managedObject in inSet {
      for observer in mObserversOf_y2 {
        managedObject.y2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y2_fromElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for observer in mObserversOf_y2 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cpx1' stored property
  //····················································································································

  private var mObserversOf_cpx1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cpx1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_cpx1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpx1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cpx1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_cpx1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpx1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cpx1_toElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for managedObject in inSet {
      for observer in mObserversOf_cpx1 {
        managedObject.cpx1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cpx1_fromElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for observer in mObserversOf_cpx1 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.cpx1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cpy1' stored property
  //····················································································································

  private var mObserversOf_cpy1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cpy1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_cpy1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpy1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cpy1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_cpy1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpy1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cpy1_toElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for managedObject in inSet {
      for observer in mObserversOf_cpy1 {
        managedObject.cpy1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cpy1_fromElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for observer in mObserversOf_cpy1 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.cpy1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cpx2' stored property
  //····················································································································

  private var mObserversOf_cpx2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cpx2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_cpx2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpx2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cpx2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_cpx2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpx2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cpx2_toElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for managedObject in inSet {
      for observer in mObserversOf_cpx2 {
        managedObject.cpx2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cpx2_fromElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for observer in mObserversOf_cpx2 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.cpx2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cpy2' stored property
  //····················································································································

  private var mObserversOf_cpy2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cpy2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_cpy2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpy2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cpy2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_cpy2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpy2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cpy2_toElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for managedObject in inSet {
      for observer in mObserversOf_cpy2 {
        managedObject.cpy2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cpy2_fromElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for observer in mObserversOf_cpy2 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.cpy2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x1' stored property
  //····················································································································

  private var mObserversOf_x1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_x1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_x1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x1_toElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for managedObject in inSet {
      for observer in mObserversOf_x1 {
        managedObject.x1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x1_fromElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for observer in mObserversOf_x1 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for managedObject in inSet {
      for observer in mObserversOf_objectDisplay {
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for managedObject in inSet {
      for observer in mObserversOf_objectDisplay {
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectionDisplay {
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<SymbolBezierCurve>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectionDisplay {
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_SymbolBezierCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_SymbolBezierCurve : ReadOnlyArrayOf_SymbolBezierCurve {

  var readModelFunction : Optional<() -> EBSelection < [SymbolBezierCurve] > >

  //····················································································································

   private var prop_cache : EBSelection < [SymbolBezierCurve] >? 

  //····················································································································

  override var propval : [SymbolBezierCurve] {
    if let value = prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <SymbolBezierCurve> ()

  override var prop : EBSelection < [SymbolBezierCurve] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <SymbolBezierCurve>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <SymbolBezierCurve> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_y1_fromElementsOfSet (removedSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedSet)
        removeEBObserversOf_cpx1_fromElementsOfSet (removedSet)
        removeEBObserversOf_cpy1_fromElementsOfSet (removedSet)
        removeEBObserversOf_cpx2_fromElementsOfSet (removedSet)
        removeEBObserversOf_cpy2_fromElementsOfSet (removedSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_y1_toElementsOfSet (addedSet)
        addEBObserversOf_x2_toElementsOfSet (addedSet)
        addEBObserversOf_y2_toElementsOfSet (addedSet)
        addEBObserversOf_cpx1_toElementsOfSet (addedSet)
        addEBObserversOf_cpy1_toElementsOfSet (addedSet)
        addEBObserversOf_cpx2_toElementsOfSet (addedSet)
        addEBObserversOf_cpy2_toElementsOfSet (addedSet)
        addEBObserversOf_x1_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolBezierCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolBezierCurve : ReadOnlyArrayOf_SymbolBezierCurve {

  //····················································································································
 
  func setProp (_ value :  [SymbolBezierCurve]) { } // Abstract method
 
  // var propval : [SymbolBezierCurve] { return [] } // Abstract method
 
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: SymbolBezierCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_SymbolBezierCurve : ReadWriteArrayOf_SymbolBezierCurve, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : SymbolBezierCurve?) -> Void > = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <SymbolBezierCurve> ()
  private var mValue = [SymbolBezierCurve] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
        removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_cpx1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_cpy1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_cpx2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_cpy2_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : SymbolBezierCurve in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
        addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_cpx1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_cpy1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_cpx2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_cpy2_toElementsOfSet (addedObjectSet)
        addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [SymbolBezierCurve] > { return .single (mValue) }

  override func setProp (_ inValue : [SymbolBezierCurve]) { mValue = inValue }

  override var propval : [SymbolBezierCurve] { return mValue }

  //····················································································································

  @objc func performUndo (_ oldValue : [SymbolBezierCurve]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : SymbolBezierCurve) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : SymbolBezierCurve) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
