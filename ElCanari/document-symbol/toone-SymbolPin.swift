//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_SymbolPin 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_SymbolPin : ReadOnlyAbstractObjectProperty <SymbolPin> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolPin?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.yPin_property.removeEBObserver (self.yPin_property) // Stored property
    inOldValue?.xName_property.removeEBObserver (self.xName_property) // Stored property
    inOldValue?.yName_property.removeEBObserver (self.yName_property) // Stored property
    inOldValue?.xNumber_property.removeEBObserver (self.xNumber_property) // Stored property
    inOldValue?.yNumber_property.removeEBObserver (self.yNumber_property) // Stored property
    inOldValue?.name_property.removeEBObserver (self.name_property) // Stored property
    inOldValue?.nameHorizontalAlignment_property.removeEBObserver (self.nameHorizontalAlignment_property) // Stored property
    inOldValue?.numberHorizontalAlignment_property.removeEBObserver (self.numberHorizontalAlignment_property) // Stored property
    inOldValue?.pinNameIsDisplayedInSchematics_property.removeEBObserver (self.pinNameIsDisplayedInSchematics_property) // Stored property
    inOldValue?.xPin_property.removeEBObserver (self.xPin_property) // Stored property
    inOldValue?.filledBezierPath_property.removeEBObserver (self.filledBezierPath_property) // Transient property
    inOldValue?.objectDisplay_property.removeEBObserver (self.objectDisplay_property) // Transient property
    inOldValue?.selectionDisplay_property.removeEBObserver (self.selectionDisplay_property) // Transient property
    inOldValue?.issues_property.removeEBObserver (self.issues_property) // Transient property
    inOldValue?.nameRect_property.removeEBObserver (self.nameRect_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.yPin_property.addEBObserver (self.yPin_property) // Stored property
    self.mInternalValue?.xName_property.addEBObserver (self.xName_property) // Stored property
    self.mInternalValue?.yName_property.addEBObserver (self.yName_property) // Stored property
    self.mInternalValue?.xNumber_property.addEBObserver (self.xNumber_property) // Stored property
    self.mInternalValue?.yNumber_property.addEBObserver (self.yNumber_property) // Stored property
    self.mInternalValue?.name_property.addEBObserver (self.name_property) // Stored property
    self.mInternalValue?.nameHorizontalAlignment_property.addEBObserver (self.nameHorizontalAlignment_property) // Stored property
    self.mInternalValue?.numberHorizontalAlignment_property.addEBObserver (self.numberHorizontalAlignment_property) // Stored property
    self.mInternalValue?.pinNameIsDisplayedInSchematics_property.addEBObserver (self.pinNameIsDisplayedInSchematics_property) // Stored property
    self.mInternalValue?.xPin_property.addEBObserver (self.xPin_property) // Stored property
    self.mInternalValue?.filledBezierPath_property.addEBObserver (self.filledBezierPath_property) // Transient property
    self.mInternalValue?.objectDisplay_property.addEBObserver (self.objectDisplay_property) // Transient property
    self.mInternalValue?.selectionDisplay_property.addEBObserver (self.selectionDisplay_property) // Transient property
    self.mInternalValue?.issues_property.addEBObserver (self.issues_property) // Transient property
    self.mInternalValue?.nameRect_property.addEBObserver (self.nameRect_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.yPin_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.yPin_property.prop ?? .empty }
    self.yPin_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.yPin_property.setProp (inValue) }
    self.xName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.xName_property.prop ?? .empty }
    self.xName_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.xName_property.setProp (inValue) }
    self.yName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.yName_property.prop ?? .empty }
    self.yName_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.yName_property.setProp (inValue) }
    self.xNumber_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.xNumber_property.prop ?? .empty }
    self.xNumber_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.xNumber_property.setProp (inValue) }
    self.yNumber_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.yNumber_property.prop ?? .empty }
    self.yNumber_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.yNumber_property.setProp (inValue) }
    self.name_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.name_property.prop ?? .empty }
    self.name_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.name_property.setProp (inValue) }
    self.nameHorizontalAlignment_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.nameHorizontalAlignment_property.prop ?? .empty }
    self.nameHorizontalAlignment_property.mWriteModelFunction = { [weak self] (inValue : HorizontalAlignment) in self?.mInternalValue?.nameHorizontalAlignment_property.setProp (inValue) }
    self.numberHorizontalAlignment_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.numberHorizontalAlignment_property.prop ?? .empty }
    self.numberHorizontalAlignment_property.mWriteModelFunction = { [weak self] (inValue : HorizontalAlignment) in self?.mInternalValue?.numberHorizontalAlignment_property.setProp (inValue) }
    self.pinNameIsDisplayedInSchematics_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.pinNameIsDisplayedInSchematics_property.prop ?? .empty }
    self.pinNameIsDisplayedInSchematics_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.pinNameIsDisplayedInSchematics_property.setProp (inValue) }
    self.xPin_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.xPin_property.prop ?? .empty }
    self.xPin_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.xPin_property.setProp (inValue) }
    self.filledBezierPath_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.filledBezierPath_property.prop ?? .empty }
    self.objectDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.objectDisplay_property.prop ?? .empty }
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectionDisplay_property.prop ?? .empty }
    self.issues_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.issues_property.prop ?? .empty }
    self.nameRect_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.nameRect_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'yPin' stored property
  //····················································································································

  let yPin_property = EBPropertyProxy_Int ()

  var yPin_property_selection : EBSelection <Int> {
    switch (self.yPin_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'xName' stored property
  //····················································································································

  let xName_property = EBPropertyProxy_Int ()

  var xName_property_selection : EBSelection <Int> {
    switch (self.xName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'yName' stored property
  //····················································································································

  let yName_property = EBPropertyProxy_Int ()

  var yName_property_selection : EBSelection <Int> {
    switch (self.yName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'xNumber' stored property
  //····················································································································

  let xNumber_property = EBPropertyProxy_Int ()

  var xNumber_property_selection : EBSelection <Int> {
    switch (self.xNumber_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'yNumber' stored property
  //····················································································································

  let yNumber_property = EBPropertyProxy_Int ()

  var yNumber_property_selection : EBSelection <Int> {
    switch (self.yNumber_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'name' stored property
  //····················································································································

  let name_property = EBPropertyProxy_String ()

  var name_property_selection : EBSelection <String> {
    switch (self.name_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'nameHorizontalAlignment' stored property
  //····················································································································

  let nameHorizontalAlignment_property = EBPropertyProxy_HorizontalAlignment ()

  var nameHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> {
    switch (self.nameHorizontalAlignment_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'numberHorizontalAlignment' stored property
  //····················································································································

  let numberHorizontalAlignment_property = EBPropertyProxy_HorizontalAlignment ()

  var numberHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> {
    switch (self.numberHorizontalAlignment_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'pinNameIsDisplayedInSchematics' stored property
  //····················································································································

  let pinNameIsDisplayedInSchematics_property = EBPropertyProxy_Bool ()

  var pinNameIsDisplayedInSchematics_property_selection : EBSelection <Bool> {
    switch (self.pinNameIsDisplayedInSchematics_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'xPin' stored property
  //····················································································································

  let xPin_property = EBPropertyProxy_Int ()

  var xPin_property_selection : EBSelection <Int> {
    switch (self.xPin_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'filledBezierPath' transient property
  //····················································································································

  let filledBezierPath_property = EBTransientProperty_NSBezierPath ()

  var filledBezierPath_property_selection : EBSelection <NSBezierPath> {
    switch (self.filledBezierPath_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'objectDisplay' transient property
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    switch (self.objectDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'selectionDisplay' transient property
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    switch (self.selectionDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'issues' transient property
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    switch (self.issues_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'nameRect' transient property
  //····················································································································

  let nameRect_property = EBTransientProperty_NSRect ()

  var nameRect_property_selection : EBSelection <NSRect> {
    switch (self.nameRect_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject SymbolPin
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_SymbolPin : ReadOnlyObject_SymbolPin {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_SymbolPin? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_SymbolPin?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : SymbolPin? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < SymbolPin? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : SymbolPin? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_SymbolPin
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_SymbolPin : ReadOnlyObject_SymbolPin {

  //····················································································································
 
  func setProp (_ inValue : SymbolPin?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_SymbolPin
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_SymbolPin : ReadWriteObject_SymbolPin {

  //····················································································································

  private var mModel : ReadWriteObject_SymbolPin? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_SymbolPin?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : SymbolPin?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : SymbolPin?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < SymbolPin? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : SymbolPin? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_SymbolPin 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_SymbolPin : ReadWriteObject_SymbolPin, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolPin) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolPin) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolPin) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : SymbolPin) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolPin?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < SymbolPin? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : SymbolPin?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : SymbolPin? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

