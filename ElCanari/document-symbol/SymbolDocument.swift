//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(SymbolDocument) class SymbolDocument : EBManagedDocument {

  //····················································································································
  //   Array controller: mSymbolObjectsController
  //····················································································································

  var mSymbolObjectsController = ArrayController_SymbolDocument_mSymbolObjectsController ()

  //····················································································································
  //   Selection controller: mSymbolTextSelectionController
  //····················································································································

  var mSymbolTextSelectionController = SelectionController_SymbolDocument_mSymbolTextSelectionController ()

  //····················································································································
  //   Selection controller: mSymbolPinSelectionController
  //····················································································································

  var mSymbolPinSelectionController = SelectionController_SymbolDocument_mSymbolPinSelectionController ()

  //····················································································································
  //   Transient property: mStatusImage
  //····················································································································

  var mStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  var mStatusImage_property_selection : EBSelection <NSImage> {
    return self.mStatusImage_property.prop
  }

  //····················································································································

  var mStatusImage : NSImage? {
    switch self.mStatusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusMessage
  //····················································································································

  var mStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  var mStatusMessage_property_selection : EBSelection <String> {
    return self.mStatusMessage_property.prop
  }

  //····················································································································

  var mStatusMessage : String? {
    switch self.mStatusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mMetadataStatus
  //····················································································································

  var mMetadataStatus_property = EBTransientProperty_MetadataStatus ()

  //····················································································································

  var mMetadataStatus_property_selection : EBSelection <MetadataStatus> {
    return self.mMetadataStatus_property.prop
  }

  //····················································································································

  var mMetadataStatus : MetadataStatus? {
    switch self.mMetadataStatus_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  var documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.prop
  }

  //····················································································································

  var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddBezierButton : CanariDragSourceButton?
  @IBOutlet var mAddOvalButton : CanariDragSourceButton?
  @IBOutlet var mAddPinButton : CanariDragSourceButton?
  @IBOutlet var mAddSegmentButton : CanariDragSourceButton?
  @IBOutlet var mAddSolidOvalButton : CanariDragSourceButton?
  @IBOutlet var mAddSolidRectButton : CanariDragSourceButton?
  @IBOutlet var mAddTextButton : CanariDragSourceButton?
  @IBOutlet var mCommentTextView : EBTextView?
  @IBOutlet var mComposedSymbolScrollView : EBScrollView?
  @IBOutlet var mComposedSymbolView : EBView?
  @IBOutlet var mCrossColorOfSymbolGridColorWell : EBColorWell?
  @IBOutlet var mDeselectIssueButton : EBButton?
  @IBOutlet var mGridDisplayFactorPopUpButton : EBPopUpButton?
  @IBOutlet var mGridStyle : EBPopUpButton?
  @IBOutlet var mHorizontalFlip : EBSwitch?
  @IBOutlet var mInfosPageView : CanariViewWithKeyView?
  @IBOutlet var mInspectorSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mIssueScrollView : NSScrollView?
  @IBOutlet var mIssueTableView : CanariIssueTableView?
  @IBOutlet var mIssueTextField : EBTextObserverField?
  @IBOutlet var mLineColorOfSymbolGridColorWell : EBColorWell?
  @IBOutlet var mMasterView : NSView?
  @IBOutlet var mPageSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mPinInspectorView : CanariViewWithKeyView?
  @IBOutlet var mPinNameFontButton : EBFontButton?
  @IBOutlet var mResetVersionButton : EBButton?
  @IBOutlet var mSignatureTextField : CanariSignatureField?
  @IBOutlet var mStatusImageViewInToolbar : EBImageObserverView?
  @IBOutlet var mSymbolBackgroundColorColorWell : EBColorWell?
  @IBOutlet var mSymbolBaseInspectorView : CanariViewWithKeyView?
  @IBOutlet var mSymbolColorColorWell : EBColorWell?
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenPopupButton : EBPopUpButton?
  @IBOutlet var mSymbolIssueInspectorView : CanariViewWithKeyView?
  @IBOutlet var mSymbolPageView : CanariViewWithKeyView?
  @IBOutlet var mSymbolPinLabelHorizontalAlignmentPopUpButton : EBPopUpButton?
  @IBOutlet var mSymbolPinLabelNameTextField : EBTextField?
  @IBOutlet var mSymbolPinNumberHorizontalAlignmentPopUpButton : EBPopUpButton?
  @IBOutlet var mSymbolPinNumberIsVisibleInSchematicsSwitch : EBSwitch?
  @IBOutlet var mSymbolRootInspectorView : NSView?
  @IBOutlet var mSymbolTextHorizontalAlignmentPopUpButton : EBPopUpButton?
  @IBOutlet var mSymbolTextValueTextField : EBTextField?
  @IBOutlet var mSymbolZoomFlipInspectorView : CanariViewWithKeyView?
  @IBOutlet var mTextInspectorView : CanariViewWithKeyView?
  @IBOutlet var mVersionField : CanariVersionField?
  @IBOutlet var mVerticalFlip : EBSwitch?
  @IBOutlet var mXPlacardUnitPopUpButton : EBPopUpButton?
  @IBOutlet var mYPlacardUnitPopUpButton : EBPopUpButton?

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  var mController_mDeselectIssueButton_hidden : MultipleBindingController_hidden? = nil
  var mController_mIssueScrollView_hidden : MultipleBindingController_hidden? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: mSymbolObjectsController
    self.mSymbolObjectsController.addExplorer (name: "mSymbolObjectsController", y:&y, view:view)
  //--- Selection controller property: mSymbolTextSelectionController
    self.mSymbolTextSelectionController.addExplorer (name: "mSymbolTextSelectionController", y:&y, view:view)
  //--- Selection controller property: mSymbolPinSelectionController
    self.mSymbolPinSelectionController.addExplorer (name: "mSymbolPinSelectionController", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName : NSNib.Name {
    return NSNib.Name ("SymbolDocument")
  }
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "SymbolRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : SymbolRoot { return self.mRootObject as! SymbolRoot }

  //····················································································································
  //    check outlet connections
  //····················································································································

  private func checkOutletConnections () {
    if let outlet : NSObject = self.mAddBezierButton {
      if !(outlet is CanariDragSourceButton) {
        presentErrorWindow (#file, #line, "the 'mAddBezierButton' outlet is not an instance of 'CanariDragSourceButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mAddBezierButton' outlet is nil")
    }
    if let outlet : NSObject = self.mAddOvalButton {
      if !(outlet is CanariDragSourceButton) {
        presentErrorWindow (#file, #line, "the 'mAddOvalButton' outlet is not an instance of 'CanariDragSourceButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mAddOvalButton' outlet is nil")
    }
    if let outlet : NSObject = self.mAddPinButton {
      if !(outlet is CanariDragSourceButton) {
        presentErrorWindow (#file, #line, "the 'mAddPinButton' outlet is not an instance of 'CanariDragSourceButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mAddPinButton' outlet is nil")
    }
    if let outlet : NSObject = self.mAddSegmentButton {
      if !(outlet is CanariDragSourceButton) {
        presentErrorWindow (#file, #line, "the 'mAddSegmentButton' outlet is not an instance of 'CanariDragSourceButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mAddSegmentButton' outlet is nil")
    }
    if let outlet : NSObject = self.mAddSolidOvalButton {
      if !(outlet is CanariDragSourceButton) {
        presentErrorWindow (#file, #line, "the 'mAddSolidOvalButton' outlet is not an instance of 'CanariDragSourceButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mAddSolidOvalButton' outlet is nil")
    }
    if let outlet : NSObject = self.mAddSolidRectButton {
      if !(outlet is CanariDragSourceButton) {
        presentErrorWindow (#file, #line, "the 'mAddSolidRectButton' outlet is not an instance of 'CanariDragSourceButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mAddSolidRectButton' outlet is nil")
    }
    if let outlet : NSObject = self.mAddTextButton {
      if !(outlet is CanariDragSourceButton) {
        presentErrorWindow (#file, #line, "the 'mAddTextButton' outlet is not an instance of 'CanariDragSourceButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mAddTextButton' outlet is nil")
    }
    if let outlet : NSObject = self.mCommentTextView {
      if !(outlet is EBTextView) {
        presentErrorWindow (#file, #line, "the 'mCommentTextView' outlet is not an instance of 'EBTextView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mCommentTextView' outlet is nil")
    }
    if let outlet : NSObject = self.mComposedSymbolScrollView {
      if !(outlet is EBScrollView) {
        presentErrorWindow (#file, #line, "the 'mComposedSymbolScrollView' outlet is not an instance of 'EBScrollView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mComposedSymbolScrollView' outlet is nil")
    }
    if let outlet : NSObject = self.mComposedSymbolView {
      if !(outlet is EBView) {
        presentErrorWindow (#file, #line, "the 'mComposedSymbolView' outlet is not an instance of 'EBView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mComposedSymbolView' outlet is nil")
    }
    if let outlet : NSObject = self.mCrossColorOfSymbolGridColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (#file, #line, "the 'mCrossColorOfSymbolGridColorWell' outlet is not an instance of 'EBColorWell'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mCrossColorOfSymbolGridColorWell' outlet is nil")
    }
    if let outlet : NSObject = self.mDeselectIssueButton {
      if !(outlet is EBButton) {
        presentErrorWindow (#file, #line, "the 'mDeselectIssueButton' outlet is not an instance of 'EBButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mDeselectIssueButton' outlet is nil")
    }
    if let outlet : NSObject = self.mGridDisplayFactorPopUpButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (#file, #line, "the 'mGridDisplayFactorPopUpButton' outlet is not an instance of 'EBPopUpButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mGridDisplayFactorPopUpButton' outlet is nil")
    }
    if let outlet : NSObject = self.mGridStyle {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (#file, #line, "the 'mGridStyle' outlet is not an instance of 'EBPopUpButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mGridStyle' outlet is nil")
    }
    if let outlet : NSObject = self.mHorizontalFlip {
      if !(outlet is EBSwitch) {
        presentErrorWindow (#file, #line, "the 'mHorizontalFlip' outlet is not an instance of 'EBSwitch'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mHorizontalFlip' outlet is nil")
    }
    if let outlet : NSObject = self.mInfosPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (#file, #line, "the 'mInfosPageView' outlet is not an instance of 'CanariViewWithKeyView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mInfosPageView' outlet is nil")
    }
    if let outlet : NSObject = self.mInspectorSegmentedControl {
      if !(outlet is CanariSegmentedControl) {
        presentErrorWindow (#file, #line, "the 'mInspectorSegmentedControl' outlet is not an instance of 'CanariSegmentedControl'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mInspectorSegmentedControl' outlet is nil")
    }
    if let outlet : NSObject = self.mIssueScrollView {
      if !(outlet is NSScrollView) {
        presentErrorWindow (#file, #line, "the 'mIssueScrollView' outlet is not an instance of 'NSScrollView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mIssueScrollView' outlet is nil")
    }
    if let outlet : NSObject = self.mIssueTableView {
      if !(outlet is CanariIssueTableView) {
        presentErrorWindow (#file, #line, "the 'mIssueTableView' outlet is not an instance of 'CanariIssueTableView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mIssueTableView' outlet is nil")
    }
    if let outlet : NSObject = self.mIssueTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (#file, #line, "the 'mIssueTextField' outlet is not an instance of 'EBTextObserverField'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mIssueTextField' outlet is nil")
    }
    if let outlet : NSObject = self.mLineColorOfSymbolGridColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (#file, #line, "the 'mLineColorOfSymbolGridColorWell' outlet is not an instance of 'EBColorWell'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mLineColorOfSymbolGridColorWell' outlet is nil")
    }
    if let outlet : NSObject = self.mMasterView {
      if !(outlet is NSView) {
        presentErrorWindow (#file, #line, "the 'mMasterView' outlet is not an instance of 'NSView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mMasterView' outlet is nil")
    }
    if let outlet : NSObject = self.mPageSegmentedControl {
      if !(outlet is CanariSegmentedControl) {
        presentErrorWindow (#file, #line, "the 'mPageSegmentedControl' outlet is not an instance of 'CanariSegmentedControl'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mPageSegmentedControl' outlet is nil")
    }
    if let outlet : NSObject = self.mPinInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (#file, #line, "the 'mPinInspectorView' outlet is not an instance of 'CanariViewWithKeyView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mPinInspectorView' outlet is nil")
    }
    if let outlet : NSObject = self.mPinNameFontButton {
      if !(outlet is EBFontButton) {
        presentErrorWindow (#file, #line, "the 'mPinNameFontButton' outlet is not an instance of 'EBFontButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mPinNameFontButton' outlet is nil")
    }
    if let outlet : NSObject = self.mResetVersionButton {
      if !(outlet is EBButton) {
        presentErrorWindow (#file, #line, "the 'mResetVersionButton' outlet is not an instance of 'EBButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mResetVersionButton' outlet is nil")
    }
    if let outlet : NSObject = self.mSignatureTextField {
      if !(outlet is CanariSignatureField) {
        presentErrorWindow (#file, #line, "the 'mSignatureTextField' outlet is not an instance of 'CanariSignatureField'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSignatureTextField' outlet is nil")
    }
    if let outlet : NSObject = self.mStatusImageViewInToolbar {
      if !(outlet is EBImageObserverView) {
        presentErrorWindow (#file, #line, "the 'mStatusImageViewInToolbar' outlet is not an instance of 'EBImageObserverView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mStatusImageViewInToolbar' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolBackgroundColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (#file, #line, "the 'mSymbolBackgroundColorColorWell' outlet is not an instance of 'EBColorWell'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolBackgroundColorColorWell' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolBaseInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (#file, #line, "the 'mSymbolBaseInspectorView' outlet is not an instance of 'CanariViewWithKeyView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolBaseInspectorView' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (#file, #line, "the 'mSymbolColorColorWell' outlet is not an instance of 'EBColorWell'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolColorColorWell' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolDrawingWidthMultipliedByTenPopupButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (#file, #line, "the 'mSymbolDrawingWidthMultipliedByTenPopupButton' outlet is not an instance of 'EBPopUpButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolDrawingWidthMultipliedByTenPopupButton' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolIssueInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (#file, #line, "the 'mSymbolIssueInspectorView' outlet is not an instance of 'CanariViewWithKeyView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolIssueInspectorView' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (#file, #line, "the 'mSymbolPageView' outlet is not an instance of 'CanariViewWithKeyView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolPageView' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolPinLabelHorizontalAlignmentPopUpButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (#file, #line, "the 'mSymbolPinLabelHorizontalAlignmentPopUpButton' outlet is not an instance of 'EBPopUpButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolPinLabelHorizontalAlignmentPopUpButton' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolPinLabelNameTextField {
      if !(outlet is EBTextField) {
        presentErrorWindow (#file, #line, "the 'mSymbolPinLabelNameTextField' outlet is not an instance of 'EBTextField'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolPinLabelNameTextField' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolPinNumberHorizontalAlignmentPopUpButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (#file, #line, "the 'mSymbolPinNumberHorizontalAlignmentPopUpButton' outlet is not an instance of 'EBPopUpButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolPinNumberHorizontalAlignmentPopUpButton' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolPinNumberIsVisibleInSchematicsSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (#file, #line, "the 'mSymbolPinNumberIsVisibleInSchematicsSwitch' outlet is not an instance of 'EBSwitch'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolPinNumberIsVisibleInSchematicsSwitch' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolRootInspectorView {
      if !(outlet is NSView) {
        presentErrorWindow (#file, #line, "the 'mSymbolRootInspectorView' outlet is not an instance of 'NSView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolRootInspectorView' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolTextHorizontalAlignmentPopUpButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (#file, #line, "the 'mSymbolTextHorizontalAlignmentPopUpButton' outlet is not an instance of 'EBPopUpButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolTextHorizontalAlignmentPopUpButton' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolTextValueTextField {
      if !(outlet is EBTextField) {
        presentErrorWindow (#file, #line, "the 'mSymbolTextValueTextField' outlet is not an instance of 'EBTextField'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolTextValueTextField' outlet is nil")
    }
    if let outlet : NSObject = self.mSymbolZoomFlipInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (#file, #line, "the 'mSymbolZoomFlipInspectorView' outlet is not an instance of 'CanariViewWithKeyView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mSymbolZoomFlipInspectorView' outlet is nil")
    }
    if let outlet : NSObject = self.mTextInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (#file, #line, "the 'mTextInspectorView' outlet is not an instance of 'CanariViewWithKeyView'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mTextInspectorView' outlet is nil")
    }
    if let outlet : NSObject = self.mVersionField {
      if !(outlet is CanariVersionField) {
        presentErrorWindow (#file, #line, "the 'mVersionField' outlet is not an instance of 'CanariVersionField'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mVersionField' outlet is nil")
    }
    if let outlet : NSObject = self.mVerticalFlip {
      if !(outlet is EBSwitch) {
        presentErrorWindow (#file, #line, "the 'mVerticalFlip' outlet is not an instance of 'EBSwitch'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mVerticalFlip' outlet is nil")
    }
    if let outlet : NSObject = self.mXPlacardUnitPopUpButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (#file, #line, "the 'mXPlacardUnitPopUpButton' outlet is not an instance of 'EBPopUpButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mXPlacardUnitPopUpButton' outlet is nil")
    }
    if let outlet : NSObject = self.mYPlacardUnitPopUpButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (#file, #line, "the 'mYPlacardUnitPopUpButton' outlet is not an instance of 'EBPopUpButton'")
      }
    }else{
      presentErrorWindow (#file, #line, "the 'mYPlacardUnitPopUpButton' outlet is nil")
    }
 
  }
  
  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
  //--------------------------- Outlet checking
    self.checkOutletConnections ()
  //--- Array controller property: mSymbolObjectsController
    self.mSymbolObjectsController.bind_model (self.rootObject.symbolObjects_property)
  //--- Selection controller property: mSymbolTextSelectionController
    self.mSymbolTextSelectionController.bind_selection (model: self.mSymbolObjectsController.selectedArray_property, file: #file, line: #line)
  //--- Selection controller property: mSymbolPinSelectionController
    self.mSymbolPinSelectionController.bind_selection (model: self.mSymbolObjectsController.selectedArray_property, file: #file, line: #line)
  //--- Atomic property: mStatusImage
    self.mStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolDocument_mStatusImage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mStatusImage_property)
  //--- Atomic property: mStatusMessage
    self.mStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolDocument_mStatusMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mStatusMessage_property)
  //--- Atomic property: mMetadataStatus
    self.mMetadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolDocument_mMetadataStatus (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mMetadataStatus_property)
    self.mSymbolObjectsController.bind_ebView (self.mComposedSymbolView)
  //--------------------------- Install regular bindings
    self.mPageSegmentedControl?.bind_selectedPage (self.rootObject.selectedPageIndex_property, file: #file, line: #line)
    self.mSignatureTextField?.bind_signature (self.signatureObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_version (self.versionObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_versionShouldChange (self.versionShouldChangeObserver_property, file: #file, line: #line)
    self.mInspectorSegmentedControl?.bind_selectedPage (self.rootObject.selectedInspector_property, file: #file, line: #line)
    self.mHorizontalFlip?.bind_value (self.rootObject.horizontalFlip_property, file: #file, line: #line)
    self.mVerticalFlip?.bind_value (self.rootObject.verticalFlip_property, file: #file, line: #line)
    self.mGridStyle?.bind_selectedIndex (self.rootObject.gridStyle_property, file: #file, line: #line)
    self.mGridDisplayFactorPopUpButton?.bind_selectedTag (self.rootObject.gridDisplay_property, file: #file, line: #line)
    self.mXPlacardUnitPopUpButton?.bind_selectedTag (self.rootObject.xPlacardUnit_property, file: #file, line: #line)
    self.mYPlacardUnitPopUpButton?.bind_selectedTag (self.rootObject.yPlacardUnit_property, file: #file, line: #line)
    self.mCrossColorOfSymbolGridColorWell?.bind_color (g_Preferences!.crossColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    self.mLineColorOfSymbolGridColorWell?.bind_color (g_Preferences!.lineColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    self.mSymbolColorColorWell?.bind_color (g_Preferences!.symbolColor_property, file: #file, line: #line, sendContinously:false)
    self.mSymbolBackgroundColorColorWell?.bind_color (g_Preferences!.symbolBackgroundColor_property, file: #file, line: #line, sendContinously:false)
    self.mSymbolDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (g_Preferences!.symbolDrawingWidthMultipliedByTen_property, file: #file, line: #line)
    self.mPinNameFontButton?.bind_fontValue (g_Preferences!.pinNameFont_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_horizontalFlip (self.rootObject.horizontalFlip_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_verticalFlip (self.rootObject.verticalFlip_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_gridStyle (self.rootObject.gridStyle_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_gridDisplayFactor (self.rootObject.gridDisplay_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_gridLineColor (g_Preferences!.lineColorOfSymbolGrid_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_gridCrossColor (g_Preferences!.crossColorOfSymbolGrid_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_zoom (self.rootObject.zoom_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_backColor (g_Preferences!.symbolBackgroundColor_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_xPlacardUnit (self.rootObject.xPlacardUnit_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_yPlacardUnit (self.rootObject.yPlacardUnit_property, file: #file, line: #line)
    self.mSymbolTextHorizontalAlignmentPopUpButton?.bind_selectedIndex (self.mSymbolTextSelectionController.horizontalAlignment_property, file: #file, line: #line)
    self.mSymbolTextValueTextField?.bind_value (self.mSymbolTextSelectionController.text_property, file: #file, line: #line, sendContinously:true)
    self.mSymbolPinNumberHorizontalAlignmentPopUpButton?.bind_selectedIndex (self.mSymbolPinSelectionController.numberHorizontalAlignment_property, file: #file, line: #line)
    self.mSymbolPinLabelHorizontalAlignmentPopUpButton?.bind_selectedIndex (self.mSymbolPinSelectionController.nameHorizontalAlignment_property, file: #file, line: #line)
    self.mSymbolPinNumberIsVisibleInSchematicsSwitch?.bind_value (self.mSymbolPinSelectionController.pinNameIsDisplayedInSchematics_property, file: #file, line: #line)
    self.mSymbolPinLabelNameTextField?.bind_value (self.mSymbolPinSelectionController.name_property, file: #file, line: #line, sendContinously:true)
    self.mStatusImageViewInToolbar?.bind_image (self.mStatusImage_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_tooltip (self.mStatusMessage_property, file: #file, line: #line)
    self.mIssueTextField?.bind_valueObserver (self.mStatusMessage_property, file: #file, line: #line)
    self.mIssueTableView?.bind_issues (self.rootObject.issues_property, file: #file, line: #line)
    self.mCommentTextView?.bind_value (self.rootObject.comments_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.noIssue_property_selection
        },
        outlet: self.mDeselectIssueButton
      )
      self.rootObject.noIssue_property.addEBObserver (controller)
      self.mController_mDeselectIssueButton_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.noIssue_property_selection
        },
        outlet: self.mIssueScrollView
      )
      self.rootObject.noIssue_property.addEBObserver (controller)
      self.mController_mIssueScrollView_hidden = controller
    }
  //--------------------------- Set targets / actions
    self.mResetVersionButton?.target = self
    self.mResetVersionButton?.action = #selector (SymbolDocument.resetVersionAction (_:))
  //--------------------------- Read documentFilePath model 
    self.documentFilePath_property.mReadModelFunction = { [weak self] in
      if let r = self?.computeTransient_documentFilePath () {
        return .single (r)
      }else{
        return .empty
      }
    }

  }

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Unbind regular bindings
    self.mPageSegmentedControl?.unbind_selectedPage ()
    self.mSignatureTextField?.unbind_signature ()
    self.mVersionField?.unbind_version ()
    self.mVersionField?.unbind_versionShouldChange ()
    self.mInspectorSegmentedControl?.unbind_selectedPage ()
    self.mHorizontalFlip?.unbind_value ()
    self.mVerticalFlip?.unbind_value ()
    self.mGridStyle?.unbind_selectedIndex ()
    self.mGridDisplayFactorPopUpButton?.unbind_selectedTag ()
    self.mXPlacardUnitPopUpButton?.unbind_selectedTag ()
    self.mYPlacardUnitPopUpButton?.unbind_selectedTag ()
    self.mCrossColorOfSymbolGridColorWell?.unbind_color ()
    self.mLineColorOfSymbolGridColorWell?.unbind_color ()
    self.mSymbolColorColorWell?.unbind_color ()
    self.mSymbolBackgroundColorColorWell?.unbind_color ()
    self.mSymbolDrawingWidthMultipliedByTenPopupButton?.unbind_selectedTag ()
    self.mPinNameFontButton?.unbind_fontValue ()
    self.mComposedSymbolView?.unbind_horizontalFlip ()
    self.mComposedSymbolView?.unbind_verticalFlip ()
    self.mComposedSymbolView?.unbind_gridStyle ()
    self.mComposedSymbolView?.unbind_gridDisplayFactor ()
    self.mComposedSymbolView?.unbind_gridLineColor ()
    self.mComposedSymbolView?.unbind_gridCrossColor ()
    self.mComposedSymbolView?.unbind_zoom ()
    self.mComposedSymbolView?.unbind_backColor ()
    self.mComposedSymbolView?.unbind_xPlacardUnit ()
    self.mComposedSymbolView?.unbind_yPlacardUnit ()
    self.mSymbolTextHorizontalAlignmentPopUpButton?.unbind_selectedIndex ()
    self.mSymbolTextValueTextField?.unbind_value ()
    self.mSymbolPinNumberHorizontalAlignmentPopUpButton?.unbind_selectedIndex ()
    self.mSymbolPinLabelHorizontalAlignmentPopUpButton?.unbind_selectedIndex ()
    self.mSymbolPinNumberIsVisibleInSchematicsSwitch?.unbind_value ()
    self.mSymbolPinLabelNameTextField?.unbind_value ()
    self.mStatusImageViewInToolbar?.unbind_image ()
    self.mStatusImageViewInToolbar?.unbind_tooltip ()
    self.mIssueTextField?.unbind_valueObserver ()
    self.mIssueTableView?.unbind_issues ()
    self.mCommentTextView?.unbind_value ()
  //--------------------------- Unbind multiple bindings
    self.rootObject.noIssue_property.removeEBObserver (self.mController_mDeselectIssueButton_hidden!)
    self.mController_mDeselectIssueButton_hidden = nil
    self.rootObject.noIssue_property.removeEBObserver (self.mController_mIssueScrollView_hidden!)
    self.mController_mIssueScrollView_hidden = nil
  //--------------------------- Unbind array controllers
    self.mSymbolObjectsController.unbind_ebView (self.mComposedSymbolView)
  //--- Array controller property: mSymbolObjectsController
    self.mSymbolObjectsController.unbind_model ()
  //--- Selection controller property: mSymbolTextSelectionController
    self.mSymbolTextSelectionController.unbind_selection ()
  //--- Selection controller property: mSymbolPinSelectionController
    self.mSymbolPinSelectionController.unbind_selection ()
    self.rootObject.issues_property.removeEBObserver (self.mStatusImage_property)
    self.rootObject.issues_property.removeEBObserver (self.mStatusMessage_property)
    self.rootObject.issues_property.removeEBObserver (self.mMetadataStatus_property)
  //--------------------------- Remove targets / actions
    self.mResetVersionButton?.target = nil
  //--------------------------- Clean up outlets
    self.mAddBezierButton?.ebCleanUp ()
    self.mAddOvalButton?.ebCleanUp ()
    self.mAddPinButton?.ebCleanUp ()
    self.mAddSegmentButton?.ebCleanUp ()
    self.mAddSolidOvalButton?.ebCleanUp ()
    self.mAddSolidRectButton?.ebCleanUp ()
    self.mAddTextButton?.ebCleanUp ()
    self.mCommentTextView?.ebCleanUp ()
    self.mComposedSymbolScrollView?.ebCleanUp ()
    self.mComposedSymbolView?.ebCleanUp ()
    self.mCrossColorOfSymbolGridColorWell?.ebCleanUp ()
    self.mDeselectIssueButton?.ebCleanUp ()
    self.mGridDisplayFactorPopUpButton?.ebCleanUp ()
    self.mGridStyle?.ebCleanUp ()
    self.mHorizontalFlip?.ebCleanUp ()
    self.mInfosPageView?.ebCleanUp ()
    self.mInspectorSegmentedControl?.ebCleanUp ()
    self.mIssueScrollView?.ebCleanUp ()
    self.mIssueTableView?.ebCleanUp ()
    self.mIssueTextField?.ebCleanUp ()
    self.mLineColorOfSymbolGridColorWell?.ebCleanUp ()
    self.mMasterView?.ebCleanUp ()
    self.mPageSegmentedControl?.ebCleanUp ()
    self.mPinInspectorView?.ebCleanUp ()
    self.mPinNameFontButton?.ebCleanUp ()
    self.mResetVersionButton?.ebCleanUp ()
    self.mSignatureTextField?.ebCleanUp ()
    self.mStatusImageViewInToolbar?.ebCleanUp ()
    self.mSymbolBackgroundColorColorWell?.ebCleanUp ()
    self.mSymbolBaseInspectorView?.ebCleanUp ()
    self.mSymbolColorColorWell?.ebCleanUp ()
    self.mSymbolDrawingWidthMultipliedByTenPopupButton?.ebCleanUp ()
    self.mSymbolIssueInspectorView?.ebCleanUp ()
    self.mSymbolPageView?.ebCleanUp ()
    self.mSymbolPinLabelHorizontalAlignmentPopUpButton?.ebCleanUp ()
    self.mSymbolPinLabelNameTextField?.ebCleanUp ()
    self.mSymbolPinNumberHorizontalAlignmentPopUpButton?.ebCleanUp ()
    self.mSymbolPinNumberIsVisibleInSchematicsSwitch?.ebCleanUp ()
    self.mSymbolRootInspectorView?.ebCleanUp ()
    self.mSymbolTextHorizontalAlignmentPopUpButton?.ebCleanUp ()
    self.mSymbolTextValueTextField?.ebCleanUp ()
    self.mSymbolZoomFlipInspectorView?.ebCleanUp ()
    self.mTextInspectorView?.ebCleanUp ()
    self.mVersionField?.ebCleanUp ()
    self.mVerticalFlip?.ebCleanUp ()
    self.mXPlacardUnitPopUpButton?.ebCleanUp ()
    self.mYPlacardUnitPopUpButton?.ebCleanUp ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

