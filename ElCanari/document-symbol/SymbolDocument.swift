//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

@objc(SymbolDocument) class SymbolDocument : EBManagedDocument {

  //····················································································································
  //   Array controller: mSymbolObjectsController
  //····················································································································

  var mSymbolObjectsController = Controller_SymbolDocument_mSymbolObjectsController ()

  //····················································································································
  //   Selection controller: mSymbolTextSelectionController
  //····················································································································

  var mSymbolTextSelectionController = SelectionController_SymbolDocument_mSymbolTextSelectionController ()

  //····················································································································
  //   Selection controller: mSymbolPinSelectionController
  //····················································································································

  var mSymbolPinSelectionController = SelectionController_SymbolDocument_mSymbolPinSelectionController ()

  //····················································································································
  //   Transient property: statusImage
  //····················································································································

  final let statusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var statusImage_property_selection : EBSelection <NSImage> {
    return self.statusImage_property.prop
  }

  //····················································································································

  final var statusImage : NSImage? {
    switch self.statusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: statusMessage
  //····················································································································

  final let statusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var statusMessage_property_selection : EBSelection <String> {
    return self.statusMessage_property.prop
  }

  //····················································································································

  final var statusMessage : String? {
    switch self.statusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: metadataStatus
  //····················································································································

  final let metadataStatus_property = EBTransientProperty_MetadataStatus ()

  //····················································································································

  final var metadataStatus_property_selection : EBSelection <MetadataStatus> {
    return self.metadataStatus_property.prop
  }

  //····················································································································

  final var metadataStatus : MetadataStatus? {
    switch self.metadataStatus_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  final let documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.prop
  }

  //····················································································································

  final var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddBezierButton : CanariDragSourceButton? = nil
  @IBOutlet var mAddOvalButton : CanariDragSourceButton? = nil
  @IBOutlet var mAddPinButton : CanariDragSourceButton? = nil
  @IBOutlet var mAddSegmentButton : CanariDragSourceButton? = nil
  @IBOutlet var mAddSolidOvalButton : CanariDragSourceButton? = nil
  @IBOutlet var mAddSolidRectButton : CanariDragSourceButton? = nil
  @IBOutlet var mAddTextButton : CanariDragSourceButton? = nil
  @IBOutlet var mCommentTextView : EBTextView? = nil
  @IBOutlet var mComposedSymbolScrollView : EBScrollView? = nil
  @IBOutlet var mComposedSymbolView : EBGraphicView? = nil
  @IBOutlet var mCrossColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mDeselectIssueButton : EBButton? = nil
  @IBOutlet var mGridDisplayFactorPopUpButton : EBPopUpButton? = nil
  @IBOutlet var mGridStyle : EBPopUpButton? = nil
  @IBOutlet var mHorizontalFlip : EBSwitch? = nil
  @IBOutlet var mInfosPageView : CanariViewWithKeyView? = nil
  @IBOutlet var mInspectorSegmentedControl : CanariSegmentedControl? = nil
  @IBOutlet var mIssueScrollView : NSScrollView? = nil
  @IBOutlet var mIssueTableView : CanariIssueTableView? = nil
  @IBOutlet var mIssueTextField : EBTextObserverField? = nil
  @IBOutlet var mLineColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mMasterView : NSView? = nil
  @IBOutlet var mPageSegmentedControl : CanariSegmentedControl? = nil
  @IBOutlet var mPinInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet var mPinNameFontButton : EBFontButton? = nil
  @IBOutlet var mResetVersionButton : EBButton? = nil
  @IBOutlet var mSignatureTextField : CanariSignatureField? = nil
  @IBOutlet var mStatusImageViewInToolbar : EBImageObserverView? = nil
  @IBOutlet var mSymbolBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolBaseInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet var mSymbolColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolIssueInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet var mSymbolPageView : CanariViewWithKeyView? = nil
  @IBOutlet var mSymbolPinLabelHorizontalAlignmentSegmentedControl : CanariEnumSegmentedControl? = nil
  @IBOutlet var mSymbolPinLabelNameTextField : EBTextField? = nil
  @IBOutlet var mSymbolPinNumberHorizontalAlignmentSegmentedControl : CanariEnumSegmentedControl? = nil
  @IBOutlet var mSymbolPinNumberIsVisibleInSchematicsSwitch : EBSwitch? = nil
  @IBOutlet var mSymbolRootInspectorView : NSView? = nil
  @IBOutlet var mSymbolTextHorizontalAlignmentSegmentedControl : CanariEnumSegmentedControl? = nil
  @IBOutlet var mSymbolTextValueTextField : EBTextField? = nil
  @IBOutlet var mSymbolZoomFlipInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet var mTextInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet var mVersionField : CanariVersionField? = nil
  @IBOutlet var mVerticalFlip : EBSwitch? = nil
  @IBOutlet var mXPlacardUnitPopUpButton : EBPopUpButton? = nil
  @IBOutlet var mYPlacardUnitPopUpButton : EBPopUpButton? = nil

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  var mController_mDeselectIssueButton_hidden : MultipleBindingController_hidden? = nil
  var mController_mIssueScrollView_hidden : MultipleBindingController_hidden? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: mSymbolObjectsController
    self.mSymbolObjectsController.addExplorer (name: "mSymbolObjectsController", y:&y, view:view)
  //--- Selection controller property: mSymbolTextSelectionController
    self.mSymbolTextSelectionController.addExplorer (name: "mSymbolTextSelectionController", y:&y, view:view)
  //--- Selection controller property: mSymbolPinSelectionController
    self.mSymbolPinSelectionController.addExplorer (name: "mSymbolPinSelectionController", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName : NSNib.Name? {
    return NSNib.Name ("SymbolDocument")
  }
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "SymbolRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : SymbolRoot { return self.mRootObject as! SymbolRoot }

  //····················································································································
  //    check outlet connections
  //····················································································································

  private func checkOutletConnections () {
    let start = Date ()
    checkOutletConnection (self.mAddBezierButton, "mAddBezierButton", CanariDragSourceButton.self, #file, #line)
    checkOutletConnection (self.mAddOvalButton, "mAddOvalButton", CanariDragSourceButton.self, #file, #line)
    checkOutletConnection (self.mAddPinButton, "mAddPinButton", CanariDragSourceButton.self, #file, #line)
    checkOutletConnection (self.mAddSegmentButton, "mAddSegmentButton", CanariDragSourceButton.self, #file, #line)
    checkOutletConnection (self.mAddSolidOvalButton, "mAddSolidOvalButton", CanariDragSourceButton.self, #file, #line)
    checkOutletConnection (self.mAddSolidRectButton, "mAddSolidRectButton", CanariDragSourceButton.self, #file, #line)
    checkOutletConnection (self.mAddTextButton, "mAddTextButton", CanariDragSourceButton.self, #file, #line)
    checkOutletConnection (self.mCommentTextView, "mCommentTextView", EBTextView.self, #file, #line)
    checkOutletConnection (self.mComposedSymbolScrollView, "mComposedSymbolScrollView", EBScrollView.self, #file, #line)
    checkOutletConnection (self.mComposedSymbolView, "mComposedSymbolView", EBGraphicView.self, #file, #line)
    checkOutletConnection (self.mCrossColorOfSymbolGridColorWell, "mCrossColorOfSymbolGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mDeselectIssueButton, "mDeselectIssueButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mGridDisplayFactorPopUpButton, "mGridDisplayFactorPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mGridStyle, "mGridStyle", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mHorizontalFlip, "mHorizontalFlip", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mInfosPageView, "mInfosPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mInspectorSegmentedControl, "mInspectorSegmentedControl", CanariSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mIssueScrollView, "mIssueScrollView", NSScrollView.self, #file, #line)
    checkOutletConnection (self.mIssueTableView, "mIssueTableView", CanariIssueTableView.self, #file, #line)
    checkOutletConnection (self.mIssueTextField, "mIssueTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mLineColorOfSymbolGridColorWell, "mLineColorOfSymbolGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mMasterView, "mMasterView", NSView.self, #file, #line)
    checkOutletConnection (self.mPageSegmentedControl, "mPageSegmentedControl", CanariSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mPinInspectorView, "mPinInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mPinNameFontButton, "mPinNameFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mResetVersionButton, "mResetVersionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSignatureTextField, "mSignatureTextField", CanariSignatureField.self, #file, #line)
    checkOutletConnection (self.mStatusImageViewInToolbar, "mStatusImageViewInToolbar", EBImageObserverView.self, #file, #line)
    checkOutletConnection (self.mSymbolBackgroundColorColorWell, "mSymbolBackgroundColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolBaseInspectorView, "mSymbolBaseInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mSymbolColorColorWell, "mSymbolColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolDrawingWidthMultipliedByTenPopupButton, "mSymbolDrawingWidthMultipliedByTenPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSymbolIssueInspectorView, "mSymbolIssueInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mSymbolPageView, "mSymbolPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mSymbolPinLabelHorizontalAlignmentSegmentedControl, "mSymbolPinLabelHorizontalAlignmentSegmentedControl", CanariEnumSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mSymbolPinLabelNameTextField, "mSymbolPinLabelNameTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mSymbolPinNumberHorizontalAlignmentSegmentedControl, "mSymbolPinNumberHorizontalAlignmentSegmentedControl", CanariEnumSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mSymbolPinNumberIsVisibleInSchematicsSwitch, "mSymbolPinNumberIsVisibleInSchematicsSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mSymbolRootInspectorView, "mSymbolRootInspectorView", NSView.self, #file, #line)
    checkOutletConnection (self.mSymbolTextHorizontalAlignmentSegmentedControl, "mSymbolTextHorizontalAlignmentSegmentedControl", CanariEnumSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mSymbolTextValueTextField, "mSymbolTextValueTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mSymbolZoomFlipInspectorView, "mSymbolZoomFlipInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mTextInspectorView, "mTextInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mVersionField, "mVersionField", CanariVersionField.self, #file, #line)
    checkOutletConnection (self.mVerticalFlip, "mVerticalFlip", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mXPlacardUnitPopUpButton, "mXPlacardUnitPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mYPlacardUnitPopUpButton, "mYPlacardUnitPopUpButton", EBPopUpButton.self, #file, #line)
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Check outlet connections \(durationMS) ms")
    }
  }
  
  //····················································································································
  
  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: mSymbolObjectsController
    self.mSymbolObjectsController.bind_model (self.rootObject.symbolObjects_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mSymbolTextSelectionController
    self.mSymbolTextSelectionController.bind_selection (model: self.mSymbolObjectsController.selectedArray_property, file: #file, line: #line)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mSymbolPinSelectionController
    self.mSymbolPinSelectionController.bind_selection (model: self.mSymbolObjectsController.selectedArray_property, file: #file, line: #line)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusImage
    // self.statusImage_property.configure (self.rootObject.issues_property, transient_SymbolDocument_statusImage)
    self.statusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolDocument_statusImage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.statusImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusMessage
    // self.statusMessage_property.configure (self.rootObject.issues_property, transient_SymbolDocument_statusMessage)
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolDocument_statusMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.statusMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: metadataStatus
    // self.metadataStatus_property.configure (self.rootObject.issues_property, transient_SymbolDocument_metadataStatus)
    self.metadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolDocument_metadataStatus (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.metadataStatus_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································
  
  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
  //--------------------------- Install ebView bindings
    self.mSymbolObjectsController.bind_ebView (self.mComposedSymbolView)
  //--------------------------- Install regular bindings
    self.mPageSegmentedControl?.bind_selectedPage (self.rootObject.selectedPageIndex_property, file: #file, line: #line)
    self.mSignatureTextField?.bind_signature (self.signatureObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_version (self.versionObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_versionShouldChange (self.versionShouldChangeObserver_property, file: #file, line: #line)
    self.mInspectorSegmentedControl?.bind_selectedPage (self.rootObject.selectedInspector_property, file: #file, line: #line)
    self.mHorizontalFlip?.bind_value (self.rootObject.horizontalFlip_property, file: #file, line: #line)
    self.mVerticalFlip?.bind_value (self.rootObject.verticalFlip_property, file: #file, line: #line)
    self.mGridStyle?.bind_selectedIndex (self.rootObject.gridStyle_property, file: #file, line: #line)
    self.mGridDisplayFactorPopUpButton?.bind_selectedTag (self.rootObject.gridDisplay_property, file: #file, line: #line)
    self.mXPlacardUnitPopUpButton?.bind_selectedTag (self.rootObject.xPlacardUnit_property, file: #file, line: #line)
    self.mYPlacardUnitPopUpButton?.bind_selectedTag (self.rootObject.yPlacardUnit_property, file: #file, line: #line)
    self.mCrossColorOfSymbolGridColorWell?.bind_color (prefs_crossColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    self.mLineColorOfSymbolGridColorWell?.bind_color (prefs_lineColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    self.mSymbolColorColorWell?.bind_color (prefs_symbolColor_property, file: #file, line: #line, sendContinously:false)
    self.mSymbolBackgroundColorColorWell?.bind_color (prefs_symbolBackgroundColor_property, file: #file, line: #line, sendContinously:false)
    self.mSymbolDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (prefs_symbolDrawingWidthMultipliedByTen_property, file: #file, line: #line)
    self.mPinNameFontButton?.bind_fontValue (prefs_pinNameFont_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_horizontalFlip (self.rootObject.horizontalFlip_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_verticalFlip (self.rootObject.verticalFlip_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_gridStyle (self.rootObject.gridStyle_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_gridDisplayFactor (self.rootObject.gridDisplay_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_gridLineColor (prefs_lineColorOfSymbolGrid_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_gridCrossColor (prefs_crossColorOfSymbolGrid_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_zoom (self.rootObject.zoom_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_backColor (prefs_symbolBackgroundColor_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_xPlacardUnit (self.rootObject.xPlacardUnit_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_yPlacardUnit (self.rootObject.yPlacardUnit_property, file: #file, line: #line)
    self.mSymbolTextValueTextField?.bind_value (self.mSymbolTextSelectionController.text_property, file: #file, line: #line, sendContinously:true)
    self.mSymbolTextHorizontalAlignmentSegmentedControl?.bind_selectedSegment (self.mSymbolTextSelectionController.horizontalAlignment_property, file: #file, line: #line)
    self.mSymbolPinLabelHorizontalAlignmentSegmentedControl?.bind_selectedSegment (self.mSymbolPinSelectionController.nameHorizontalAlignment_property, file: #file, line: #line)
    self.mSymbolPinNumberHorizontalAlignmentSegmentedControl?.bind_selectedSegment (self.mSymbolPinSelectionController.numberHorizontalAlignment_property, file: #file, line: #line)
    self.mSymbolPinNumberIsVisibleInSchematicsSwitch?.bind_value (self.mSymbolPinSelectionController.pinNameIsDisplayedInSchematics_property, file: #file, line: #line)
    self.mSymbolPinLabelNameTextField?.bind_value (self.mSymbolPinSelectionController.name_property, file: #file, line: #line, sendContinously:true)
    self.mStatusImageViewInToolbar?.bind_image (self.statusImage_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_tooltip (self.statusMessage_property, file: #file, line: #line)
    self.mIssueTextField?.bind_valueObserver (self.statusMessage_property, file: #file, line: #line)
    self.mIssueTableView?.bind_issues (self.rootObject.issues_property, file: #file, line: #line)
    self.mCommentTextView?.bind_value (self.rootObject.comments_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.noIssue_property_selection
        },
        outlet: self.mDeselectIssueButton
      )
      self.rootObject.noIssue_property.addEBObserver (controller)
      self.mController_mDeselectIssueButton_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.noIssue_property_selection
        },
        outlet: self.mIssueScrollView
      )
      self.rootObject.noIssue_property.addEBObserver (controller)
      self.mController_mIssueScrollView_hidden = controller
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  }

  //····················································································································
  
  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    self.mResetVersionButton?.target = self
    self.mResetVersionButton?.action = #selector (SymbolDocument.resetVersionAction (_:))
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
    self.checkOutletConnections ()
    self.configureProperties ()
    self.installBindings ()
    self.setTargetsAndActions ()
  //--------------------------- Read documentFilePath model 
    self.documentFilePath_property.mReadModelFunction = { [weak self] in
      if let r = self?.computeTransient_documentFilePath () {
        return .single (r)
      }else{
        return .empty
      }
    }
  }

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Unbind regular bindings
    self.mPageSegmentedControl?.unbind_selectedPage ()
    self.mSignatureTextField?.unbind_signature ()
    self.mVersionField?.unbind_version ()
    self.mVersionField?.unbind_versionShouldChange ()
    self.mInspectorSegmentedControl?.unbind_selectedPage ()
    self.mHorizontalFlip?.unbind_value ()
    self.mVerticalFlip?.unbind_value ()
    self.mGridStyle?.unbind_selectedIndex ()
    self.mGridDisplayFactorPopUpButton?.unbind_selectedTag ()
    self.mXPlacardUnitPopUpButton?.unbind_selectedTag ()
    self.mYPlacardUnitPopUpButton?.unbind_selectedTag ()
    self.mCrossColorOfSymbolGridColorWell?.unbind_color ()
    self.mLineColorOfSymbolGridColorWell?.unbind_color ()
    self.mSymbolColorColorWell?.unbind_color ()
    self.mSymbolBackgroundColorColorWell?.unbind_color ()
    self.mSymbolDrawingWidthMultipliedByTenPopupButton?.unbind_selectedTag ()
    self.mPinNameFontButton?.unbind_fontValue ()
    self.mComposedSymbolView?.unbind_horizontalFlip ()
    self.mComposedSymbolView?.unbind_verticalFlip ()
    self.mComposedSymbolView?.unbind_gridStyle ()
    self.mComposedSymbolView?.unbind_gridDisplayFactor ()
    self.mComposedSymbolView?.unbind_gridLineColor ()
    self.mComposedSymbolView?.unbind_gridCrossColor ()
    self.mComposedSymbolView?.unbind_zoom ()
    self.mComposedSymbolView?.unbind_backColor ()
    self.mComposedSymbolView?.unbind_xPlacardUnit ()
    self.mComposedSymbolView?.unbind_yPlacardUnit ()
    self.mSymbolTextValueTextField?.unbind_value ()
    self.mSymbolTextHorizontalAlignmentSegmentedControl?.unbind_selectedSegment ()
    self.mSymbolPinLabelHorizontalAlignmentSegmentedControl?.unbind_selectedSegment ()
    self.mSymbolPinNumberHorizontalAlignmentSegmentedControl?.unbind_selectedSegment ()
    self.mSymbolPinNumberIsVisibleInSchematicsSwitch?.unbind_value ()
    self.mSymbolPinLabelNameTextField?.unbind_value ()
    self.mStatusImageViewInToolbar?.unbind_image ()
    self.mStatusImageViewInToolbar?.unbind_tooltip ()
    self.mIssueTextField?.unbind_valueObserver ()
    self.mIssueTableView?.unbind_issues ()
    self.mCommentTextView?.unbind_value ()
  //--------------------------- Unbind multiple bindings
    self.rootObject.noIssue_property.removeEBObserver (self.mController_mDeselectIssueButton_hidden!)
    self.mController_mDeselectIssueButton_hidden = nil
    self.rootObject.noIssue_property.removeEBObserver (self.mController_mIssueScrollView_hidden!)
    self.mController_mIssueScrollView_hidden = nil
  //--------------------------- Unbind array controllers
    self.mSymbolObjectsController.unbind_ebView (self.mComposedSymbolView)
  //--- Array controller property: mSymbolObjectsController
    self.mSymbolObjectsController.unbind_model ()
  //--- Selection controller property: mSymbolTextSelectionController
    self.mSymbolTextSelectionController.unbind_selection ()
  //--- Selection controller property: mSymbolPinSelectionController
    self.mSymbolPinSelectionController.unbind_selection ()
    // self.rootObject.issues_property.removeEBObserver (self.statusImage_property)
    // self.rootObject.issues_property.removeEBObserver (self.statusMessage_property)
    // self.rootObject.issues_property.removeEBObserver (self.metadataStatus_property)
  //--------------------------- Remove targets / actions
    self.mResetVersionButton?.target = nil
  //--------------------------- Clean up outlets
    self.mAddBezierButton?.ebCleanUp ()
    self.mAddOvalButton?.ebCleanUp ()
    self.mAddPinButton?.ebCleanUp ()
    self.mAddSegmentButton?.ebCleanUp ()
    self.mAddSolidOvalButton?.ebCleanUp ()
    self.mAddSolidRectButton?.ebCleanUp ()
    self.mAddTextButton?.ebCleanUp ()
    self.mCommentTextView?.ebCleanUp ()
    self.mComposedSymbolScrollView?.ebCleanUp ()
    self.mComposedSymbolView?.ebCleanUp ()
    self.mCrossColorOfSymbolGridColorWell?.ebCleanUp ()
    self.mDeselectIssueButton?.ebCleanUp ()
    self.mGridDisplayFactorPopUpButton?.ebCleanUp ()
    self.mGridStyle?.ebCleanUp ()
    self.mHorizontalFlip?.ebCleanUp ()
    self.mInfosPageView?.ebCleanUp ()
    self.mInspectorSegmentedControl?.ebCleanUp ()
    self.mIssueScrollView?.ebCleanUp ()
    self.mIssueTableView?.ebCleanUp ()
    self.mIssueTextField?.ebCleanUp ()
    self.mLineColorOfSymbolGridColorWell?.ebCleanUp ()
    self.mMasterView?.ebCleanUp ()
    self.mPageSegmentedControl?.ebCleanUp ()
    self.mPinInspectorView?.ebCleanUp ()
    self.mPinNameFontButton?.ebCleanUp ()
    self.mResetVersionButton?.ebCleanUp ()
    self.mSignatureTextField?.ebCleanUp ()
    self.mStatusImageViewInToolbar?.ebCleanUp ()
    self.mSymbolBackgroundColorColorWell?.ebCleanUp ()
    self.mSymbolBaseInspectorView?.ebCleanUp ()
    self.mSymbolColorColorWell?.ebCleanUp ()
    self.mSymbolDrawingWidthMultipliedByTenPopupButton?.ebCleanUp ()
    self.mSymbolIssueInspectorView?.ebCleanUp ()
    self.mSymbolPageView?.ebCleanUp ()
    self.mSymbolPinLabelHorizontalAlignmentSegmentedControl?.ebCleanUp ()
    self.mSymbolPinLabelNameTextField?.ebCleanUp ()
    self.mSymbolPinNumberHorizontalAlignmentSegmentedControl?.ebCleanUp ()
    self.mSymbolPinNumberIsVisibleInSchematicsSwitch?.ebCleanUp ()
    self.mSymbolRootInspectorView?.ebCleanUp ()
    self.mSymbolTextHorizontalAlignmentSegmentedControl?.ebCleanUp ()
    self.mSymbolTextValueTextField?.ebCleanUp ()
    self.mSymbolZoomFlipInspectorView?.ebCleanUp ()
    self.mTextInspectorView?.ebCleanUp ()
    self.mVersionField?.ebCleanUp ()
    self.mVerticalFlip?.ebCleanUp ()
    self.mXPlacardUnitPopUpButton?.ebCleanUp ()
    self.mYPlacardUnitPopUpButton?.ebCleanUp ()
  //--------------------------- Detach outlets
    self.mAddBezierButton = nil
    self.mAddOvalButton = nil
    self.mAddPinButton = nil
    self.mAddSegmentButton = nil
    self.mAddSolidOvalButton = nil
    self.mAddSolidRectButton = nil
    self.mAddTextButton = nil
    self.mCommentTextView = nil
    self.mComposedSymbolScrollView = nil
    self.mComposedSymbolView = nil
    self.mCrossColorOfSymbolGridColorWell = nil
    self.mDeselectIssueButton = nil
    self.mGridDisplayFactorPopUpButton = nil
    self.mGridStyle = nil
    self.mHorizontalFlip = nil
    self.mInfosPageView = nil
    self.mInspectorSegmentedControl = nil
    self.mIssueScrollView = nil
    self.mIssueTableView = nil
    self.mIssueTextField = nil
    self.mLineColorOfSymbolGridColorWell = nil
    self.mMasterView = nil
    self.mPageSegmentedControl = nil
    self.mPinInspectorView = nil
    self.mPinNameFontButton = nil
    self.mResetVersionButton = nil
    self.mSignatureTextField = nil
    self.mStatusImageViewInToolbar = nil
    self.mSymbolBackgroundColorColorWell = nil
    self.mSymbolBaseInspectorView = nil
    self.mSymbolColorColorWell = nil
    self.mSymbolDrawingWidthMultipliedByTenPopupButton = nil
    self.mSymbolIssueInspectorView = nil
    self.mSymbolPageView = nil
    self.mSymbolPinLabelHorizontalAlignmentSegmentedControl = nil
    self.mSymbolPinLabelNameTextField = nil
    self.mSymbolPinNumberHorizontalAlignmentSegmentedControl = nil
    self.mSymbolPinNumberIsVisibleInSchematicsSwitch = nil
    self.mSymbolRootInspectorView = nil
    self.mSymbolTextHorizontalAlignmentSegmentedControl = nil
    self.mSymbolTextValueTextField = nil
    self.mSymbolZoomFlipInspectorView = nil
    self.mTextInspectorView = nil
    self.mVersionField = nil
    self.mVerticalFlip = nil
    self.mXPlacardUnitPopUpButton = nil
    self.mYPlacardUnitPopUpButton = nil
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

