//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_yPin : class {
  var yPin : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_xLabel : class {
  var xLabel : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_yLabel : class {
  var yLabel : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_xNumber : class {
  var xNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_yNumber : class {
  var yNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_label : class {
  var label : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_number : class {
  var number : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_pinIsVisibleInSchematics : class {
  var pinIsVisibleInSchematics : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_xPin : class {
  var xPin : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class SymbolPin : SymbolObject,
         SymbolPin_yPin,
         SymbolPin_xLabel,
         SymbolPin_yLabel,
         SymbolPin_xNumber,
         SymbolPin_yNumber,
         SymbolPin_label,
         SymbolPin_number,
         SymbolPin_pinIsVisibleInSchematics,
         SymbolPin_xPin,
         SymbolPin_objectDisplay,
         SymbolPin_selectionDisplay {

  //····················································································································
  //   Atomic property: yPin
  //····················································································································

  var yPin_property = EBStoredProperty_Int (915400)

  //····················································································································

  var yPin : Int {
    get {
      return self.yPin_property.propval
    }
    set {
      self.yPin_property.setProp (newValue)
    }
  }

  //····················································································································

  var yPin_property_selection : EBSelection <Int> {
    return self.yPin_property.prop
  }

  //····················································································································
  //   Atomic property: xLabel
  //····················································································································

  var xLabel_property = EBStoredProperty_Int (915400)

  //····················································································································

  var xLabel : Int {
    get {
      return self.xLabel_property.propval
    }
    set {
      self.xLabel_property.setProp (newValue)
    }
  }

  //····················································································································

  var xLabel_property_selection : EBSelection <Int> {
    return self.xLabel_property.prop
  }

  //····················································································································
  //   Atomic property: yLabel
  //····················································································································

  var yLabel_property = EBStoredProperty_Int (1144000)

  //····················································································································

  var yLabel : Int {
    get {
      return self.yLabel_property.propval
    }
    set {
      self.yLabel_property.setProp (newValue)
    }
  }

  //····················································································································

  var yLabel_property_selection : EBSelection <Int> {
    return self.yLabel_property.prop
  }

  //····················································································································
  //   Atomic property: xNumber
  //····················································································································

  var xNumber_property = EBStoredProperty_Int (915400)

  //····················································································································

  var xNumber : Int {
    get {
      return self.xNumber_property.propval
    }
    set {
      self.xNumber_property.setProp (newValue)
    }
  }

  //····················································································································

  var xNumber_property_selection : EBSelection <Int> {
    return self.xNumber_property.prop
  }

  //····················································································································
  //   Atomic property: yNumber
  //····················································································································

  var yNumber_property = EBStoredProperty_Int (686800)

  //····················································································································

  var yNumber : Int {
    get {
      return self.yNumber_property.propval
    }
    set {
      self.yNumber_property.setProp (newValue)
    }
  }

  //····················································································································

  var yNumber_property_selection : EBSelection <Int> {
    return self.yNumber_property.prop
  }

  //····················································································································
  //   Atomic property: label
  //····················································································································

  var label_property = EBStoredProperty_String ("?")

  //····················································································································

  var label : String {
    get {
      return self.label_property.propval
    }
    set {
      self.label_property.setProp (newValue)
    }
  }

  //····················································································································

  var label_property_selection : EBSelection <String> {
    return self.label_property.prop
  }

  //····················································································································
  //   Atomic property: number
  //····················································································································

  var number_property = EBStoredProperty_String ("")

  //····················································································································

  var number : String {
    get {
      return self.number_property.propval
    }
    set {
      self.number_property.setProp (newValue)
    }
  }

  //····················································································································

  var number_property_selection : EBSelection <String> {
    return self.number_property.prop
  }

  //····················································································································
  //   Atomic property: pinIsVisibleInSchematics
  //····················································································································

  var pinIsVisibleInSchematics_property = EBStoredProperty_Bool (true)

  //····················································································································

  var pinIsVisibleInSchematics : Bool {
    get {
      return self.pinIsVisibleInSchematics_property.propval
    }
    set {
      self.pinIsVisibleInSchematics_property.setProp (newValue)
    }
  }

  //····················································································································

  var pinIsVisibleInSchematics_property_selection : EBSelection <Bool> {
    return self.pinIsVisibleInSchematics_property.prop
  }

  //····················································································································
  //   Atomic property: xPin
  //····················································································································

  var xPin_property = EBStoredProperty_Int (915400)

  //····················································································································

  var xPin : Int {
    get {
      return self.xPin_property.propval
    }
    set {
      self.xPin_property.setProp (newValue)
    }
  }

  //····················································································································

  var xPin_property_selection : EBSelection <Int> {
    return self.xPin_property.prop
  }


  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Atomic property: yPin
    self.yPin_property.undoManager = self.undoManager
  //--- Atomic property: xLabel
    self.xLabel_property.undoManager = self.undoManager
  //--- Atomic property: yLabel
    self.yLabel_property.undoManager = self.undoManager
  //--- Atomic property: xNumber
    self.xNumber_property.undoManager = self.undoManager
  //--- Atomic property: yNumber
    self.yNumber_property.undoManager = self.undoManager
  //--- Atomic property: label
    self.label_property.undoManager = self.undoManager
  //--- Atomic property: number
    self.number_property.undoManager = self.undoManager
  //--- Atomic property: pinIsVisibleInSchematics
    self.pinIsVisibleInSchematics_property.undoManager = self.undoManager
  //--- Atomic property: xPin
    self.xPin_property.undoManager = self.undoManager
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xPin_property_selection.kind ()
        kind &= unwSelf.yPin_property_selection.kind ()
        kind &= unwSelf.xLabel_property_selection.kind ()
        kind &= unwSelf.yLabel_property_selection.kind ()
        kind &= unwSelf.xNumber_property_selection.kind ()
        kind &= unwSelf.yNumber_property_selection.kind ()
        kind &= unwSelf.label_property_selection.kind ()
        kind &= unwSelf.number_property_selection.kind ()
        kind &= g_Preferences!.symbolColor_property_selection.kind ()
        kind &= g_Preferences!.pinNameFont_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xPin_property_selection, unwSelf.yPin_property_selection, unwSelf.xLabel_property_selection, unwSelf.yLabel_property_selection, unwSelf.xNumber_property_selection, unwSelf.yNumber_property_selection, unwSelf.label_property_selection, unwSelf.number_property_selection, g_Preferences!.symbolColor_property_selection, g_Preferences!.pinNameFont_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
            return .single (transient_SymbolPin_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.objectDisplay_property)
    self.yPin_property.addEBObserver (self.objectDisplay_property)
    self.xLabel_property.addEBObserver (self.objectDisplay_property)
    self.yLabel_property.addEBObserver (self.objectDisplay_property)
    self.xNumber_property.addEBObserver (self.objectDisplay_property)
    self.yNumber_property.addEBObserver (self.objectDisplay_property)
    self.label_property.addEBObserver (self.objectDisplay_property)
    self.number_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.pinNameFont_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xPin_property_selection.kind ()
        kind &= unwSelf.yPin_property_selection.kind ()
        kind &= unwSelf.xLabel_property_selection.kind ()
        kind &= unwSelf.yLabel_property_selection.kind ()
        kind &= unwSelf.xNumber_property_selection.kind ()
        kind &= unwSelf.yNumber_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xPin_property_selection, unwSelf.yPin_property_selection, unwSelf.xLabel_property_selection, unwSelf.yLabel_property_selection, unwSelf.xNumber_property_selection, unwSelf.yNumber_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_SymbolPin_selectionDisplay (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.selectionDisplay_property)
    self.yPin_property.addEBObserver (self.selectionDisplay_property)
    self.xLabel_property.addEBObserver (self.selectionDisplay_property)
    self.yLabel_property.addEBObserver (self.selectionDisplay_property)
    self.xNumber_property.addEBObserver (self.selectionDisplay_property)
    self.yNumber_property.addEBObserver (self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.label_property.setSignatureObserver (observer:self)
    self.number_property.setSignatureObserver (observer:self)
    self.pinIsVisibleInSchematics_property.setSignatureObserver (observer:self)
    self.xLabel_property.setSignatureObserver (observer:self)
    self.xNumber_property.setSignatureObserver (observer:self)
    self.xPin_property.setSignatureObserver (observer:self)
    self.yLabel_property.setSignatureObserver (observer:self)
    self.yNumber_property.setSignatureObserver (observer:self)
    self.yPin_property.setSignatureObserver (observer:self)
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.xPin_property.removeEBObserver (self.objectDisplay_property)
    self.yPin_property.removeEBObserver (self.objectDisplay_property)
    self.xLabel_property.removeEBObserver (self.objectDisplay_property)
    self.yLabel_property.removeEBObserver (self.objectDisplay_property)
    self.xNumber_property.removeEBObserver (self.objectDisplay_property)
    self.yNumber_property.removeEBObserver (self.objectDisplay_property)
    self.label_property.removeEBObserver (self.objectDisplay_property)
    self.number_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.objectDisplay_property)
    self.xPin_property.removeEBObserver (self.selectionDisplay_property)
    self.yPin_property.removeEBObserver (self.selectionDisplay_property)
    self.xLabel_property.removeEBObserver (self.selectionDisplay_property)
    self.yLabel_property.removeEBObserver (self.selectionDisplay_property)
    self.xNumber_property.removeEBObserver (self.selectionDisplay_property)
    self.yNumber_property.removeEBObserver (self.selectionDisplay_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "yPin",
      idx:self.yPin_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yPin_property.mObserverExplorer,
      valueExplorer:&self.yPin_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xLabel",
      idx:self.xLabel_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xLabel_property.mObserverExplorer,
      valueExplorer:&self.xLabel_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yLabel",
      idx:self.yLabel_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yLabel_property.mObserverExplorer,
      valueExplorer:&self.yLabel_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xNumber",
      idx:self.xNumber_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xNumber_property.mObserverExplorer,
      valueExplorer:&self.xNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yNumber",
      idx:self.yNumber_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yNumber_property.mObserverExplorer,
      valueExplorer:&self.yNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "label",
      idx:self.label_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.label_property.mObserverExplorer,
      valueExplorer:&self.label_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "number",
      idx:self.number_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.number_property.mObserverExplorer,
      valueExplorer:&self.number_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pinIsVisibleInSchematics",
      idx:self.pinIsVisibleInSchematics_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.pinIsVisibleInSchematics_property.mObserverExplorer,
      valueExplorer:&self.pinIsVisibleInSchematics_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xPin",
      idx:self.xPin_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xPin_property.mObserverExplorer,
      valueExplorer:&self.xPin_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: yPin
    self.yPin_property.mObserverExplorer = nil
    self.yPin_property.mValueExplorer = nil
  //--- Atomic property: xLabel
    self.xLabel_property.mObserverExplorer = nil
    self.xLabel_property.mValueExplorer = nil
  //--- Atomic property: yLabel
    self.yLabel_property.mObserverExplorer = nil
    self.yLabel_property.mValueExplorer = nil
  //--- Atomic property: xNumber
    self.xNumber_property.mObserverExplorer = nil
    self.xNumber_property.mValueExplorer = nil
  //--- Atomic property: yNumber
    self.yNumber_property.mObserverExplorer = nil
    self.yNumber_property.mValueExplorer = nil
  //--- Atomic property: label
    self.label_property.mObserverExplorer = nil
    self.label_property.mValueExplorer = nil
  //--- Atomic property: number
    self.number_property.mObserverExplorer = nil
    self.number_property.mValueExplorer = nil
  //--- Atomic property: pinIsVisibleInSchematics
    self.pinIsVisibleInSchematics_property.mObserverExplorer = nil
    self.pinIsVisibleInSchematics_property.mValueExplorer = nil
  //--- Atomic property: xPin
    self.xPin_property.mObserverExplorer = nil
    self.xPin_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: yPin
    self.yPin_property.storeIn (dictionary: ioDictionary, forKey:"yPin")
  //--- Atomic property: xLabel
    self.xLabel_property.storeIn (dictionary: ioDictionary, forKey:"xLabel")
  //--- Atomic property: yLabel
    self.yLabel_property.storeIn (dictionary: ioDictionary, forKey:"yLabel")
  //--- Atomic property: xNumber
    self.xNumber_property.storeIn (dictionary: ioDictionary, forKey:"xNumber")
  //--- Atomic property: yNumber
    self.yNumber_property.storeIn (dictionary: ioDictionary, forKey:"yNumber")
  //--- Atomic property: label
    self.label_property.storeIn (dictionary: ioDictionary, forKey:"label")
  //--- Atomic property: number
    self.number_property.storeIn (dictionary: ioDictionary, forKey:"number")
  //--- Atomic property: pinIsVisibleInSchematics
    self.pinIsVisibleInSchematics_property.storeIn (dictionary: ioDictionary, forKey:"pinIsVisibleInSchematics")
  //--- Atomic property: xPin
    self.xPin_property.storeIn (dictionary: ioDictionary, forKey:"xPin")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- Atomic property: yPin
    self.yPin_property.readFrom (dictionary: inDictionary, forKey:"yPin")
  //--- Atomic property: xLabel
    self.xLabel_property.readFrom (dictionary: inDictionary, forKey:"xLabel")
  //--- Atomic property: yLabel
    self.yLabel_property.readFrom (dictionary: inDictionary, forKey:"yLabel")
  //--- Atomic property: xNumber
    self.xNumber_property.readFrom (dictionary: inDictionary, forKey:"xNumber")
  //--- Atomic property: yNumber
    self.yNumber_property.readFrom (dictionary: inDictionary, forKey:"yNumber")
  //--- Atomic property: label
    self.label_property.readFrom (dictionary: inDictionary, forKey:"label")
  //--- Atomic property: number
    self.number_property.readFrom (dictionary: inDictionary, forKey:"number")
  //--- Atomic property: pinIsVisibleInSchematics
    self.pinIsVisibleInSchematics_property.readFrom (dictionary: inDictionary, forKey:"pinIsVisibleInSchematics")
  //--- Atomic property: xPin
    self.xPin_property.readFrom (dictionary: inDictionary, forKey:"xPin")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetControllers
  //····················································································································

  override func resetControllers () {
    super.resetControllers ()
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.label_property.signature ())
    crc.accumulateUInt32 (self.number_property.signature ())
    crc.accumulateUInt32 (self.pinIsVisibleInSchematics_property.signature ())
    crc.accumulateUInt32 (self.xLabel_property.signature ())
    crc.accumulateUInt32 (self.xNumber_property.signature ())
    crc.accumulateUInt32 (self.xPin_property.signature ())
    crc.accumulateUInt32 (self.yLabel_property.signature ())
    crc.accumulateUInt32 (self.yNumber_property.signature ())
    crc.accumulateUInt32 (self.yPin_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolPin : ReadOnlyAbstractArrayProperty <SymbolPin> {

  //····················································································································

  var undoManager : EBUndoManager?

  //····················································································································

  var propval : [SymbolPin] { return [] } // Abstract method

  //····················································································································
  //   Observers of 'yPin' stored property
  //····················································································································

  private var mObserversOf_yPin = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yPin (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_yPin.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPin_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yPin (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_yPin.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPin_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yPin_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_yPin {
        managedObject.yPin_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yPin_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in mObserversOf_yPin {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yPin_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xLabel' stored property
  //····················································································································

  private var mObserversOf_xLabel = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xLabel (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_xLabel.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xLabel_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xLabel (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_xLabel.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xLabel_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xLabel_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_xLabel {
        managedObject.xLabel_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xLabel_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in mObserversOf_xLabel {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xLabel_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yLabel' stored property
  //····················································································································

  private var mObserversOf_yLabel = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yLabel (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_yLabel.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yLabel_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yLabel (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_yLabel.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yLabel_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yLabel_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_yLabel {
        managedObject.yLabel_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yLabel_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in mObserversOf_yLabel {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yLabel_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xNumber' stored property
  //····················································································································

  private var mObserversOf_xNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_xNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_xNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xNumber_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_xNumber {
        managedObject.xNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xNumber_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in mObserversOf_xNumber {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yNumber' stored property
  //····················································································································

  private var mObserversOf_yNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_yNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_yNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yNumber_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_yNumber {
        managedObject.yNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yNumber_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in mObserversOf_yNumber {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'label' stored property
  //····················································································································

  private var mObserversOf_label = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_label (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_label.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.label_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_label (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_label.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.label_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_label_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_label {
        managedObject.label_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_label_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in mObserversOf_label {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.label_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'number' stored property
  //····················································································································

  private var mObserversOf_number = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_number (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_number.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.number_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_number (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_number.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.number_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_number_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_number {
        managedObject.number_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_number_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in mObserversOf_number {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.number_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pinIsVisibleInSchematics' stored property
  //····················································································································

  private var mObserversOf_pinIsVisibleInSchematics = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinIsVisibleInSchematics (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_pinIsVisibleInSchematics.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinIsVisibleInSchematics_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinIsVisibleInSchematics (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_pinIsVisibleInSchematics.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinIsVisibleInSchematics_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinIsVisibleInSchematics_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_pinIsVisibleInSchematics {
        managedObject.pinIsVisibleInSchematics_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinIsVisibleInSchematics_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in mObserversOf_pinIsVisibleInSchematics {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.pinIsVisibleInSchematics_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xPin' stored property
  //····················································································································

  private var mObserversOf_xPin = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xPin (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_xPin.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPin_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xPin (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_xPin.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPin_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xPin_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_xPin {
        managedObject.xPin_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xPin_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in mObserversOf_xPin {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xPin_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_objectDisplay {
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_objectDisplay {
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectionDisplay {
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectionDisplay {
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_SymbolPin : ReadOnlyArrayOf_SymbolPin {

  var readModelFunction : Optional<() -> EBSelection < [SymbolPin] > >

  //····················································································································

   private var prop_cache : EBSelection < [SymbolPin] >? 

  //····················································································································

  override var propval : [SymbolPin] {
    if let value = prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <SymbolPin> ()

  override var prop : EBSelection < [SymbolPin] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <SymbolPin>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <SymbolPin> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_yPin_fromElementsOfSet (removedSet)
        removeEBObserversOf_xLabel_fromElementsOfSet (removedSet)
        removeEBObserversOf_yLabel_fromElementsOfSet (removedSet)
        removeEBObserversOf_xNumber_fromElementsOfSet (removedSet)
        removeEBObserversOf_yNumber_fromElementsOfSet (removedSet)
        removeEBObserversOf_label_fromElementsOfSet (removedSet)
        removeEBObserversOf_number_fromElementsOfSet (removedSet)
        removeEBObserversOf_pinIsVisibleInSchematics_fromElementsOfSet (removedSet)
        removeEBObserversOf_xPin_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
        removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_yPin_toElementsOfSet (addedSet)
        addEBObserversOf_xLabel_toElementsOfSet (addedSet)
        addEBObserversOf_yLabel_toElementsOfSet (addedSet)
        addEBObserversOf_xNumber_toElementsOfSet (addedSet)
        addEBObserversOf_yNumber_toElementsOfSet (addedSet)
        addEBObserversOf_label_toElementsOfSet (addedSet)
        addEBObserversOf_number_toElementsOfSet (addedSet)
        addEBObserversOf_pinIsVisibleInSchematics_toElementsOfSet (addedSet)
        addEBObserversOf_xPin_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
        addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolPin : ReadOnlyArrayOf_SymbolPin {

  //····················································································································
 
  func setProp (_ value :  [SymbolPin]) { } // Abstract method
 
  // var propval : [SymbolPin] { return [] } // Abstract method
 
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_SymbolPin : ReadWriteArrayOf_SymbolPin, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : SymbolPin?) -> Void > = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <SymbolPin> ()
  private var mValue = [SymbolPin] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
        removeEBObserversOf_yPin_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_xLabel_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_yLabel_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_xNumber_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_yNumber_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_label_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_number_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_pinIsVisibleInSchematics_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_xPin_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : SymbolPin in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
        addEBObserversOf_yPin_toElementsOfSet (addedObjectSet)
        addEBObserversOf_xLabel_toElementsOfSet (addedObjectSet)
        addEBObserversOf_yLabel_toElementsOfSet (addedObjectSet)
        addEBObserversOf_xNumber_toElementsOfSet (addedObjectSet)
        addEBObserversOf_yNumber_toElementsOfSet (addedObjectSet)
        addEBObserversOf_label_toElementsOfSet (addedObjectSet)
        addEBObserversOf_number_toElementsOfSet (addedObjectSet)
        addEBObserversOf_pinIsVisibleInSchematics_toElementsOfSet (addedObjectSet)
        addEBObserversOf_xPin_toElementsOfSet (addedObjectSet)
        addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
        addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [SymbolPin] > { return .single (mValue) }

  override func setProp (_ inValue : [SymbolPin]) { mValue = inValue }

  override var propval : [SymbolPin] { return mValue }

  //····················································································································

  @objc func performUndo (_ oldValue : [SymbolPin]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : SymbolPin) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : SymbolPin) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
