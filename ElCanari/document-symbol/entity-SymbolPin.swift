//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_yPin : class {
  var yPin : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_xName : class {
  var xName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_yName : class {
  var yName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_xNumber : class {
  var xNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_yNumber : class {
  var yNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_name : class {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_nameHorizontalAlignment : class {
  var nameHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_numberHorizontalAlignment : class {
  var numberHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_pinNameIsDisplayedInSchematics : class {
  var pinNameIsDisplayedInSchematics : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_xPin : class {
  var xPin : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_nameRect : class {
  var nameRect : NSRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class SymbolPin : SymbolObject,
         SymbolPin_yPin,
         SymbolPin_xName,
         SymbolPin_yName,
         SymbolPin_xNumber,
         SymbolPin_yNumber,
         SymbolPin_name,
         SymbolPin_nameHorizontalAlignment,
         SymbolPin_numberHorizontalAlignment,
         SymbolPin_pinNameIsDisplayedInSchematics,
         SymbolPin_xPin,
         SymbolPin_objectDisplay,
         SymbolPin_selectionDisplay,
         SymbolPin_issues,
         SymbolPin_nameRect {

  //····················································································································
  //   Atomic property: yPin
  //····················································································································

  var yPin_property = EBStoredProperty_Int (0)

  //····················································································································

  var yPin : Int {
    get {
      return self.yPin_property.propval
    }
    set {
      self.yPin_property.setProp (newValue)
    }
  }

  //····················································································································

  var yPin_property_selection : EBSelection <Int> {
    return self.yPin_property.prop
  }

  //····················································································································
  //   Atomic property: xName
  //····················································································································

  var xName_property = EBStoredProperty_Int (0)

  //····················································································································

  var xName : Int {
    get {
      return self.xName_property.propval
    }
    set {
      self.xName_property.setProp (newValue)
    }
  }

  //····················································································································

  var xName_property_selection : EBSelection <Int> {
    return self.xName_property.prop
  }

  //····················································································································
  //   Atomic property: yName
  //····················································································································

  var yName_property = EBStoredProperty_Int (228600)

  //····················································································································

  var yName : Int {
    get {
      return self.yName_property.propval
    }
    set {
      self.yName_property.setProp (newValue)
    }
  }

  //····················································································································

  var yName_property_selection : EBSelection <Int> {
    return self.yName_property.prop
  }

  //····················································································································
  //   Atomic property: xNumber
  //····················································································································

  var xNumber_property = EBStoredProperty_Int (0)

  //····················································································································

  var xNumber : Int {
    get {
      return self.xNumber_property.propval
    }
    set {
      self.xNumber_property.setProp (newValue)
    }
  }

  //····················································································································

  var xNumber_property_selection : EBSelection <Int> {
    return self.xNumber_property.prop
  }

  //····················································································································
  //   Atomic property: yNumber
  //····················································································································

  var yNumber_property = EBStoredProperty_Int (-228600)

  //····················································································································

  var yNumber : Int {
    get {
      return self.yNumber_property.propval
    }
    set {
      self.yNumber_property.setProp (newValue)
    }
  }

  //····················································································································

  var yNumber_property_selection : EBSelection <Int> {
    return self.yNumber_property.prop
  }

  //····················································································································
  //   Atomic property: name
  //····················································································································

  var name_property = EBStoredProperty_String ("")

  //····················································································································

  var name : String {
    get {
      return self.name_property.propval
    }
    set {
      self.name_property.setProp (newValue)
    }
  }

  //····················································································································

  var name_property_selection : EBSelection <String> {
    return self.name_property.prop
  }

  //····················································································································
  //   Atomic property: nameHorizontalAlignment
  //····················································································································

  var nameHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (HorizontalAlignment.center)

  //····················································································································

  var nameHorizontalAlignment : HorizontalAlignment {
    get {
      return self.nameHorizontalAlignment_property.propval
    }
    set {
      self.nameHorizontalAlignment_property.setProp (newValue)
    }
  }

  //····················································································································

  var nameHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> {
    return self.nameHorizontalAlignment_property.prop
  }

  //····················································································································
  //   Atomic property: numberHorizontalAlignment
  //····················································································································

  var numberHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (HorizontalAlignment.center)

  //····················································································································

  var numberHorizontalAlignment : HorizontalAlignment {
    get {
      return self.numberHorizontalAlignment_property.propval
    }
    set {
      self.numberHorizontalAlignment_property.setProp (newValue)
    }
  }

  //····················································································································

  var numberHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> {
    return self.numberHorizontalAlignment_property.prop
  }

  //····················································································································
  //   Atomic property: pinNameIsDisplayedInSchematics
  //····················································································································

  var pinNameIsDisplayedInSchematics_property = EBStoredProperty_Bool (true)

  //····················································································································

  var pinNameIsDisplayedInSchematics : Bool {
    get {
      return self.pinNameIsDisplayedInSchematics_property.propval
    }
    set {
      self.pinNameIsDisplayedInSchematics_property.setProp (newValue)
    }
  }

  //····················································································································

  var pinNameIsDisplayedInSchematics_property_selection : EBSelection <Bool> {
    return self.pinNameIsDisplayedInSchematics_property.prop
  }

  //····················································································································
  //   Atomic property: xPin
  //····················································································································

  var xPin_property = EBStoredProperty_Int (0)

  //····················································································································

  var xPin : Int {
    get {
      return self.xPin_property.propval
    }
    set {
      self.xPin_property.setProp (newValue)
    }
  }

  //····················································································································

  var xPin_property_selection : EBSelection <Int> {
    return self.xPin_property.prop
  }

  //····················································································································
  //   Transient property: nameRect
  //····················································································································

  var nameRect_property = EBTransientProperty_NSRect ()

  //····················································································································

  var nameRect_property_selection : EBSelection <NSRect> {
    return self.nameRect_property.prop
  }

  //····················································································································

  var nameRect : NSRect? {
    switch self.nameRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ undoManager : EBUndoManager?, file: String, _ line : Int) {
    super.init (undoManager, file: file, line)
  //--- Atomic property: yPin
    self.yPin_property.undoManager = self.undoManager
  //--- Atomic property: xName
    self.xName_property.undoManager = self.undoManager
  //--- Atomic property: yName
    self.yName_property.undoManager = self.undoManager
  //--- Atomic property: xNumber
    self.xNumber_property.undoManager = self.undoManager
  //--- Atomic property: yNumber
    self.yNumber_property.undoManager = self.undoManager
  //--- Atomic property: name
    self.name_property.undoManager = self.undoManager
  //--- Atomic property: nameHorizontalAlignment
    self.nameHorizontalAlignment_property.undoManager = self.undoManager
  //--- Atomic property: numberHorizontalAlignment
    self.numberHorizontalAlignment_property.undoManager = self.undoManager
  //--- Atomic property: pinNameIsDisplayedInSchematics
    self.pinNameIsDisplayedInSchematics_property.undoManager = self.undoManager
  //--- Atomic property: xPin
    self.xPin_property.undoManager = self.undoManager
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xPin_property_selection.kind ()
        kind &= unwSelf.yPin_property_selection.kind ()
        kind &= unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.xNumber_property_selection.kind ()
        kind &= unwSelf.yNumber_property_selection.kind ()
        kind &= unwSelf.name_property_selection.kind ()
        kind &= unwSelf.pinNameIsDisplayedInSchematics_property_selection.kind ()
        kind &= unwSelf.nameHorizontalAlignment_property_selection.kind ()
        kind &= unwSelf.numberHorizontalAlignment_property_selection.kind ()
        kind &= g_Preferences!.symbolColor_property_selection.kind ()
        kind &= g_Preferences!.pinNameFont_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xPin_property_selection, unwSelf.yPin_property_selection, unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.xNumber_property_selection, unwSelf.yNumber_property_selection, unwSelf.name_property_selection, unwSelf.pinNameIsDisplayedInSchematics_property_selection, unwSelf.nameHorizontalAlignment_property_selection, unwSelf.numberHorizontalAlignment_property_selection, g_Preferences!.symbolColor_property_selection, g_Preferences!.pinNameFont_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11)) :
            return .single (transient_SymbolPin_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.objectDisplay_property)
    self.yPin_property.addEBObserver (self.objectDisplay_property)
    self.xName_property.addEBObserver (self.objectDisplay_property)
    self.yName_property.addEBObserver (self.objectDisplay_property)
    self.xNumber_property.addEBObserver (self.objectDisplay_property)
    self.yNumber_property.addEBObserver (self.objectDisplay_property)
    self.name_property.addEBObserver (self.objectDisplay_property)
    self.pinNameIsDisplayedInSchematics_property.addEBObserver (self.objectDisplay_property)
    self.nameHorizontalAlignment_property.addEBObserver (self.objectDisplay_property)
    self.numberHorizontalAlignment_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.pinNameFont_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xPin_property_selection.kind ()
        kind &= unwSelf.yPin_property_selection.kind ()
        kind &= unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.xNumber_property_selection.kind ()
        kind &= unwSelf.yNumber_property_selection.kind ()
        kind &= unwSelf.nameHorizontalAlignment_property_selection.kind ()
        kind &= unwSelf.numberHorizontalAlignment_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xPin_property_selection, unwSelf.yPin_property_selection, unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.xNumber_property_selection, unwSelf.yNumber_property_selection, unwSelf.nameHorizontalAlignment_property_selection, unwSelf.numberHorizontalAlignment_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_SymbolPin_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.selectionDisplay_property)
    self.yPin_property.addEBObserver (self.selectionDisplay_property)
    self.xName_property.addEBObserver (self.selectionDisplay_property)
    self.yName_property.addEBObserver (self.selectionDisplay_property)
    self.xNumber_property.addEBObserver (self.selectionDisplay_property)
    self.yNumber_property.addEBObserver (self.selectionDisplay_property)
    self.nameHorizontalAlignment_property.addEBObserver (self.selectionDisplay_property)
    self.numberHorizontalAlignment_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xPin_property_selection.kind ()
        kind &= unwSelf.yPin_property_selection.kind ()
        kind &= unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.xNumber_property_selection.kind ()
        kind &= unwSelf.yNumber_property_selection.kind ()
        kind &= unwSelf.name_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xPin_property_selection, unwSelf.yPin_property_selection, unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.xNumber_property_selection, unwSelf.yNumber_property_selection, unwSelf.name_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_SymbolPin_issues (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.issues_property)
    self.yPin_property.addEBObserver (self.issues_property)
    self.xName_property.addEBObserver (self.issues_property)
    self.yName_property.addEBObserver (self.issues_property)
    self.xNumber_property.addEBObserver (self.issues_property)
    self.yNumber_property.addEBObserver (self.issues_property)
    self.name_property.addEBObserver (self.issues_property)
  //--- Atomic property: nameRect
    self.nameRect_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.name_property_selection.kind ()
        kind &= unwSelf.nameHorizontalAlignment_property_selection.kind ()
        kind &= g_Preferences!.pinNameFont_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.name_property_selection, unwSelf.nameHorizontalAlignment_property_selection, g_Preferences!.pinNameFont_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_SymbolPin_nameRect (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xName_property.addEBObserver (self.nameRect_property)
    self.yName_property.addEBObserver (self.nameRect_property)
    self.name_property.addEBObserver (self.nameRect_property)
    self.nameHorizontalAlignment_property.addEBObserver (self.nameRect_property)
    g_Preferences?.pinNameFont_property.addEBObserver (self.nameRect_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.name_property.setSignatureObserver (observer:self)
    self.nameHorizontalAlignment_property.setSignatureObserver (observer:self)
    self.numberHorizontalAlignment_property.setSignatureObserver (observer:self)
    self.pinNameIsDisplayedInSchematics_property.setSignatureObserver (observer:self)
    self.xName_property.setSignatureObserver (observer:self)
    self.xNumber_property.setSignatureObserver (observer:self)
    self.xPin_property.setSignatureObserver (observer:self)
    self.yName_property.setSignatureObserver (observer:self)
    self.yNumber_property.setSignatureObserver (observer:self)
    self.yPin_property.setSignatureObserver (observer:self)
  //--- Extern delegates
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.xPin_property.removeEBObserver (self.objectDisplay_property)
    self.yPin_property.removeEBObserver (self.objectDisplay_property)
    self.xName_property.removeEBObserver (self.objectDisplay_property)
    self.yName_property.removeEBObserver (self.objectDisplay_property)
    self.xNumber_property.removeEBObserver (self.objectDisplay_property)
    self.yNumber_property.removeEBObserver (self.objectDisplay_property)
    self.name_property.removeEBObserver (self.objectDisplay_property)
    self.pinNameIsDisplayedInSchematics_property.removeEBObserver (self.objectDisplay_property)
    self.nameHorizontalAlignment_property.removeEBObserver (self.objectDisplay_property)
    self.numberHorizontalAlignment_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.objectDisplay_property)
    self.xPin_property.removeEBObserver (self.selectionDisplay_property)
    self.yPin_property.removeEBObserver (self.selectionDisplay_property)
    self.xName_property.removeEBObserver (self.selectionDisplay_property)
    self.yName_property.removeEBObserver (self.selectionDisplay_property)
    self.xNumber_property.removeEBObserver (self.selectionDisplay_property)
    self.yNumber_property.removeEBObserver (self.selectionDisplay_property)
    self.nameHorizontalAlignment_property.removeEBObserver (self.selectionDisplay_property)
    self.numberHorizontalAlignment_property.removeEBObserver (self.selectionDisplay_property)
    self.xPin_property.removeEBObserver (self.issues_property)
    self.yPin_property.removeEBObserver (self.issues_property)
    self.xName_property.removeEBObserver (self.issues_property)
    self.yName_property.removeEBObserver (self.issues_property)
    self.xNumber_property.removeEBObserver (self.issues_property)
    self.yNumber_property.removeEBObserver (self.issues_property)
    self.name_property.removeEBObserver (self.issues_property)
    self.xName_property.removeEBObserver (self.nameRect_property)
    self.yName_property.removeEBObserver (self.nameRect_property)
    self.name_property.removeEBObserver (self.nameRect_property)
    self.nameHorizontalAlignment_property.removeEBObserver (self.nameRect_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.nameRect_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "yPin",
      idx:self.yPin_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yPin_property.mObserverExplorer,
      valueExplorer:&self.yPin_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xName",
      idx:self.xName_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xName_property.mObserverExplorer,
      valueExplorer:&self.xName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yName",
      idx:self.yName_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yName_property.mObserverExplorer,
      valueExplorer:&self.yName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xNumber",
      idx:self.xNumber_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xNumber_property.mObserverExplorer,
      valueExplorer:&self.xNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yNumber",
      idx:self.yNumber_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yNumber_property.mObserverExplorer,
      valueExplorer:&self.yNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name_property.mObserverExplorer,
      valueExplorer:&self.name_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "nameHorizontalAlignment",
      idx:self.nameHorizontalAlignment_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.nameHorizontalAlignment_property.mObserverExplorer,
      valueExplorer:&self.nameHorizontalAlignment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "numberHorizontalAlignment",
      idx:self.numberHorizontalAlignment_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.numberHorizontalAlignment_property.mObserverExplorer,
      valueExplorer:&self.numberHorizontalAlignment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pinNameIsDisplayedInSchematics",
      idx:self.pinNameIsDisplayedInSchematics_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.pinNameIsDisplayedInSchematics_property.mObserverExplorer,
      valueExplorer:&self.pinNameIsDisplayedInSchematics_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xPin",
      idx:self.xPin_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xPin_property.mObserverExplorer,
      valueExplorer:&self.xPin_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "nameRect",
      idx:self.nameRect_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.nameRect_property.mObserverExplorer,
      valueExplorer:&self.nameRect_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: yPin
    self.yPin_property.mObserverExplorer = nil
    self.yPin_property.mValueExplorer = nil
  //--- Atomic property: xName
    self.xName_property.mObserverExplorer = nil
    self.xName_property.mValueExplorer = nil
  //--- Atomic property: yName
    self.yName_property.mObserverExplorer = nil
    self.yName_property.mValueExplorer = nil
  //--- Atomic property: xNumber
    self.xNumber_property.mObserverExplorer = nil
    self.xNumber_property.mValueExplorer = nil
  //--- Atomic property: yNumber
    self.yNumber_property.mObserverExplorer = nil
    self.yNumber_property.mValueExplorer = nil
  //--- Atomic property: name
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
  //--- Atomic property: nameHorizontalAlignment
    self.nameHorizontalAlignment_property.mObserverExplorer = nil
    self.nameHorizontalAlignment_property.mValueExplorer = nil
  //--- Atomic property: numberHorizontalAlignment
    self.numberHorizontalAlignment_property.mObserverExplorer = nil
    self.numberHorizontalAlignment_property.mValueExplorer = nil
  //--- Atomic property: pinNameIsDisplayedInSchematics
    self.pinNameIsDisplayedInSchematics_property.mObserverExplorer = nil
    self.pinNameIsDisplayedInSchematics_property.mValueExplorer = nil
  //--- Atomic property: xPin
    self.xPin_property.mObserverExplorer = nil
    self.xPin_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: yPin
    self.yPin_property.storeIn (dictionary: ioDictionary, forKey:"yPin")
  //--- Atomic property: xName
    self.xName_property.storeIn (dictionary: ioDictionary, forKey:"xName")
  //--- Atomic property: yName
    self.yName_property.storeIn (dictionary: ioDictionary, forKey:"yName")
  //--- Atomic property: xNumber
    self.xNumber_property.storeIn (dictionary: ioDictionary, forKey:"xNumber")
  //--- Atomic property: yNumber
    self.yNumber_property.storeIn (dictionary: ioDictionary, forKey:"yNumber")
  //--- Atomic property: name
    self.name_property.storeIn (dictionary: ioDictionary, forKey:"name")
  //--- Atomic property: nameHorizontalAlignment
    self.nameHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey:"nameHorizontalAlignment")
  //--- Atomic property: numberHorizontalAlignment
    self.numberHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey:"numberHorizontalAlignment")
  //--- Atomic property: pinNameIsDisplayedInSchematics
    self.pinNameIsDisplayedInSchematics_property.storeIn (dictionary: ioDictionary, forKey:"pinNameIsDisplayedInSchematics")
  //--- Atomic property: xPin
    self.xPin_property.storeIn (dictionary: ioDictionary, forKey:"xPin")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: yPin
    self.yPin_property.readFrom (dictionary: inDictionary, forKey:"yPin")
  //--- Atomic property: xName
    self.xName_property.readFrom (dictionary: inDictionary, forKey:"xName")
  //--- Atomic property: yName
    self.yName_property.readFrom (dictionary: inDictionary, forKey:"yName")
  //--- Atomic property: xNumber
    self.xNumber_property.readFrom (dictionary: inDictionary, forKey:"xNumber")
  //--- Atomic property: yNumber
    self.yNumber_property.readFrom (dictionary: inDictionary, forKey:"yNumber")
  //--- Atomic property: name
    self.name_property.readFrom (dictionary: inDictionary, forKey:"name")
  //--- Atomic property: nameHorizontalAlignment
    self.nameHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey:"nameHorizontalAlignment")
  //--- Atomic property: numberHorizontalAlignment
    self.numberHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey:"numberHorizontalAlignment")
  //--- Atomic property: pinNameIsDisplayedInSchematics
    self.pinNameIsDisplayedInSchematics_property.readFrom (dictionary: inDictionary, forKey:"pinNameIsDisplayedInSchematics")
  //--- Atomic property: xPin
    self.xPin_property.readFrom (dictionary: inDictionary, forKey:"xPin")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.name_property.signature ())
    crc.accumulateUInt32 (self.nameHorizontalAlignment_property.signature ())
    crc.accumulateUInt32 (self.numberHorizontalAlignment_property.signature ())
    crc.accumulateUInt32 (self.pinNameIsDisplayedInSchematics_property.signature ())
    crc.accumulateUInt32 (self.xName_property.signature ())
    crc.accumulateUInt32 (self.xNumber_property.signature ())
    crc.accumulateUInt32 (self.xPin_property.signature ())
    crc.accumulateUInt32 (self.yName_property.signature ())
    crc.accumulateUInt32 (self.yNumber_property.signature ())
    crc.accumulateUInt32 (self.yPin_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolPin : ReadOnlyAbstractArrayProperty <SymbolPin> {

  //····················································································································
  //   Observers of 'yPin' stored property
  //····················································································································

  private var mObserversOf_yPin = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yPin (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yPin.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPin_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yPin (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yPin.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPin_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yPin_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_yPin.eventArray () {
        managedObject.yPin_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yPin_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in self.mObserversOf_yPin.eventArray () {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yPin_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xName' stored property
  //····················································································································

  private var mObserversOf_xName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xName_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_xName.eventArray () {
        managedObject.xName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xName_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in self.mObserversOf_xName.eventArray () {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yName' stored property
  //····················································································································

  private var mObserversOf_yName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yName_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_yName.eventArray () {
        managedObject.yName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yName_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in self.mObserversOf_yName.eventArray () {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xNumber' stored property
  //····················································································································

  private var mObserversOf_xNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xNumber_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_xNumber.eventArray () {
        managedObject.xNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xNumber_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in self.mObserversOf_xNumber.eventArray () {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yNumber' stored property
  //····················································································································

  private var mObserversOf_yNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yNumber_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_yNumber.eventArray () {
        managedObject.yNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yNumber_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in self.mObserversOf_yNumber.eventArray () {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_name.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_name.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_name.eventArray () {
        managedObject.name_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in self.mObserversOf_name.eventArray () {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'nameHorizontalAlignment' stored property
  //····················································································································

  private var mObserversOf_nameHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_nameHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_nameHorizontalAlignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_nameHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_nameHorizontalAlignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_nameHorizontalAlignment_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_nameHorizontalAlignment.eventArray () {
        managedObject.nameHorizontalAlignment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_nameHorizontalAlignment_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in self.mObserversOf_nameHorizontalAlignment.eventArray () {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.nameHorizontalAlignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'numberHorizontalAlignment' stored property
  //····················································································································

  private var mObserversOf_numberHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_numberHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_numberHorizontalAlignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.numberHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_numberHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_numberHorizontalAlignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.numberHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_numberHorizontalAlignment_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_numberHorizontalAlignment.eventArray () {
        managedObject.numberHorizontalAlignment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_numberHorizontalAlignment_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in self.mObserversOf_numberHorizontalAlignment.eventArray () {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.numberHorizontalAlignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pinNameIsDisplayedInSchematics' stored property
  //····················································································································

  private var mObserversOf_pinNameIsDisplayedInSchematics = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinNameIsDisplayedInSchematics.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinNameIsDisplayedInSchematics_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinNameIsDisplayedInSchematics.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinNameIsDisplayedInSchematics_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinNameIsDisplayedInSchematics_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_pinNameIsDisplayedInSchematics.eventArray () {
        managedObject.pinNameIsDisplayedInSchematics_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinNameIsDisplayedInSchematics_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in self.mObserversOf_pinNameIsDisplayedInSchematics.eventArray () {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.pinNameIsDisplayedInSchematics_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xPin' stored property
  //····················································································································

  private var mObserversOf_xPin = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xPin (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xPin.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPin_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xPin (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xPin.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPin_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xPin_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_xPin.eventArray () {
        managedObject.xPin_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xPin_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for observer in self.mObserversOf_xPin.eventArray () {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xPin_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_objectDisplay.eventArray () {
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_objectDisplay.eventArray () {
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_selectionDisplay.eventArray () {
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_selectionDisplay.eventArray () {
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_issues.eventArray () {
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_issues.eventArray () {
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'nameRect' transient property
  //····················································································································

  private var mObserversOf_nameRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_nameRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_nameRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_nameRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_nameRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_nameRect_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_nameRect.eventArray () {
        managedObject.nameRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_nameRect_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_nameRect.eventArray () {
        managedObject.nameRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_SymbolPin : ReadOnlyArrayOf_SymbolPin {

  //····················································································································

  var readModelFunction : Optional < () -> EBSelection < [SymbolPin] > >

  //····················································································································

  override var propset : Set <SymbolPin> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [SymbolPin] > {
    self.computeArrayAndSet ()
    return self.prop_cache!  
  }
 
  //····················································································································

  override var propval : [SymbolPin] {
    self.computeArrayAndSet ()
    if let value = self.prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <SymbolPin> ()

  //····················································································································

  private var prop_cache : EBSelection < [SymbolPin] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.readModelFunction, self.prop_cache == nil {
      self.prop_cache = unwrappedComputeFunction ()
      let newSet : Set <SymbolPin>
      switch self.prop_cache! {
      case .multiple, .empty :
        newSet = Set <SymbolPin> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_yPin_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xNumber_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yNumber_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_name_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_nameHorizontalAlignment_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_numberHorizontalAlignment_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_pinNameIsDisplayedInSchematics_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xPin_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_issues_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_nameRect_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_yPin_toElementsOfSet (addedSet)
      self.addEBObserversOf_xName_toElementsOfSet (addedSet)
      self.addEBObserversOf_yName_toElementsOfSet (addedSet)
      self.addEBObserversOf_xNumber_toElementsOfSet (addedSet)
      self.addEBObserversOf_yNumber_toElementsOfSet (addedSet)
      self.addEBObserversOf_name_toElementsOfSet (addedSet)
      self.addEBObserversOf_nameHorizontalAlignment_toElementsOfSet (addedSet)
      self.addEBObserversOf_numberHorizontalAlignment_toElementsOfSet (addedSet)
      self.addEBObserversOf_pinNameIsDisplayedInSchematics_toElementsOfSet (addedSet)
      self.addEBObserversOf_xPin_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_issues_toElementsOfSet (addedSet)
      self.addEBObserversOf_nameRect_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.prop_cache == nil {
      self.prop_cache = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.prop_cache != nil {
      self.prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolPin : ReadOnlyArrayOf_SymbolPin {

  //····················································································································
 
  func setProp (_ value :  [SymbolPin]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_SymbolPin : ReadWriteArrayOf_SymbolPin, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : SymbolPin?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [SymbolPin] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "SymbolPin") as? SymbolPin {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <SymbolPin> ()
  private var mValue = [SymbolPin] () {
    didSet {
      self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
        self.removeEBObserversOf_yPin_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_xName_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_yName_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_xNumber_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_yNumber_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_name_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_nameHorizontalAlignment_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_numberHorizontalAlignment_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_pinNameIsDisplayedInSchematics_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_xPin_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_nameRect_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        for managedObject : SymbolPin in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
        self.addEBObserversOf_yPin_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_xName_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_yName_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_xNumber_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_yNumber_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_name_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_nameHorizontalAlignment_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_numberHorizontalAlignment_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_pinNameIsDisplayedInSchematics_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_xPin_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_nameRect_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        self.clearSignatureCache ()
      //--- Write in preferences ?
        if let prefKey = self.mPrefKey {
          var dictionaryArray = [NSDictionary] ()
          for object in self.mValue {
            let d = NSMutableDictionary ()
            object.saveIntoDictionary (d)
            d [kEntityKey] = nil // Remove entity key, not used in preferences
            dictionaryArray.append (d)
          }
          UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
        }
      }
    }
  }

  //····················································································································

  override var prop : EBSelection < [SymbolPin] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [SymbolPin]) { self.mValue = inValue }

  //····················································································································

  override var propval : [SymbolPin] { return self.mValue }

  //····················································································································

  override var propset : Set <SymbolPin> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [SymbolPin]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : SymbolPin) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : SymbolPin) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
