//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_yPin : class {
  var yPin : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_xName : class {
  var xName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_yName : class {
  var yName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_xNumber : class {
  var xNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_yNumber : class {
  var yNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_name : class {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_nameHorizontalAlignment : class {
  var nameHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_numberHorizontalAlignment : class {
  var numberHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_pinNameIsDisplayedInSchematics : class {
  var pinNameIsDisplayedInSchematics : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_xPin : class {
  var xPin : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_filledBezierPath : class {
  var filledBezierPath : NSBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolPin_nameRect : class {
  var nameRect : NSRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class SymbolPin : SymbolObject,
         SymbolPin_yPin,
         SymbolPin_xName,
         SymbolPin_yName,
         SymbolPin_xNumber,
         SymbolPin_yNumber,
         SymbolPin_name,
         SymbolPin_nameHorizontalAlignment,
         SymbolPin_numberHorizontalAlignment,
         SymbolPin_pinNameIsDisplayedInSchematics,
         SymbolPin_xPin,
         SymbolPin_filledBezierPath,
         SymbolPin_objectDisplay,
         SymbolPin_selectionDisplay,
         SymbolPin_issues,
         SymbolPin_nameRect {

  //····················································································································
  //   Atomic property: yPin
  //····················································································································

  let yPin_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var yPin : Int {
    get { return self.yPin_property.propval }
    set { self.yPin_property.setProp (newValue) }
  }

  //····················································································································

  var yPin_property_selection : EBSelection <Int> { return self.yPin_property.prop }

  //····················································································································
  //   Atomic property: xName
  //····················································································································

  let xName_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var xName : Int {
    get { return self.xName_property.propval }
    set { self.xName_property.setProp (newValue) }
  }

  //····················································································································

  var xName_property_selection : EBSelection <Int> { return self.xName_property.prop }

  //····················································································································
  //   Atomic property: yName
  //····················································································································

  let yName_property = EBStoredProperty_Int (defaultValue: 228600)

  //····················································································································

  var yName : Int {
    get { return self.yName_property.propval }
    set { self.yName_property.setProp (newValue) }
  }

  //····················································································································

  var yName_property_selection : EBSelection <Int> { return self.yName_property.prop }

  //····················································································································
  //   Atomic property: xNumber
  //····················································································································

  let xNumber_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var xNumber : Int {
    get { return self.xNumber_property.propval }
    set { self.xNumber_property.setProp (newValue) }
  }

  //····················································································································

  var xNumber_property_selection : EBSelection <Int> { return self.xNumber_property.prop }

  //····················································································································
  //   Atomic property: yNumber
  //····················································································································

  let yNumber_property = EBStoredProperty_Int (defaultValue: -228600)

  //····················································································································

  var yNumber : Int {
    get { return self.yNumber_property.propval }
    set { self.yNumber_property.setProp (newValue) }
  }

  //····················································································································

  var yNumber_property_selection : EBSelection <Int> { return self.yNumber_property.prop }

  //····················································································································
  //   Atomic property: name
  //····················································································································

  let name_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var name : String {
    get { return self.name_property.propval }
    set { self.name_property.setProp (newValue) }
  }

  //····················································································································

  var name_property_selection : EBSelection <String> { return self.name_property.prop }

  //····················································································································
  //   Atomic property: nameHorizontalAlignment
  //····················································································································

  let nameHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center)

  //····················································································································

  var nameHorizontalAlignment : HorizontalAlignment {
    get { return self.nameHorizontalAlignment_property.propval }
    set { self.nameHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································

  var nameHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> { return self.nameHorizontalAlignment_property.prop }

  //····················································································································
  //   Atomic property: numberHorizontalAlignment
  //····················································································································

  let numberHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center)

  //····················································································································

  var numberHorizontalAlignment : HorizontalAlignment {
    get { return self.numberHorizontalAlignment_property.propval }
    set { self.numberHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································

  var numberHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> { return self.numberHorizontalAlignment_property.prop }

  //····················································································································
  //   Atomic property: pinNameIsDisplayedInSchematics
  //····················································································································

  let pinNameIsDisplayedInSchematics_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var pinNameIsDisplayedInSchematics : Bool {
    get { return self.pinNameIsDisplayedInSchematics_property.propval }
    set { self.pinNameIsDisplayedInSchematics_property.setProp (newValue) }
  }

  //····················································································································

  var pinNameIsDisplayedInSchematics_property_selection : EBSelection <Bool> { return self.pinNameIsDisplayedInSchematics_property.prop }

  //····················································································································
  //   Atomic property: xPin
  //····················································································································

  let xPin_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var xPin : Int {
    get { return self.xPin_property.propval }
    set { self.xPin_property.setProp (newValue) }
  }

  //····················································································································

  var xPin_property_selection : EBSelection <Int> { return self.xPin_property.prop }

  //····················································································································
  //   Transient property: filledBezierPath
  //····················································································································

  let filledBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  var filledBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.filledBezierPath_property.prop
  }

  //····················································································································

  var filledBezierPath : NSBezierPath? {
    switch self.filledBezierPath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: nameRect
  //····················································································································

  let nameRect_property = EBTransientProperty_NSRect ()

  //····················································································································

  var nameRect_property_selection : EBSelection <NSRect> {
    return self.nameRect_property.prop
  }

  //····················································································································

  var nameRect : NSRect? {
    switch self.nameRect_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: yPin
    self.yPin_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xName
    self.xName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yName
    self.yName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xNumber
    self.xNumber_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yNumber
    self.yNumber_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: name
    self.name_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: nameHorizontalAlignment
    self.nameHorizontalAlignment_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: numberHorizontalAlignment
    self.numberHorizontalAlignment_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: pinNameIsDisplayedInSchematics
    self.pinNameIsDisplayedInSchematics_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xPin
    self.xPin_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: filledBezierPath
    self.filledBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xPin_property_selection.kind ()
        kind &= unwSelf.yPin_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xPin_property_selection, unwSelf.yPin_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_SymbolPin_filledBezierPath (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.filledBezierPath_property)
    self.yPin_property.addEBObserver (self.filledBezierPath_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xPin_property_selection.kind ()
        kind &= unwSelf.yPin_property_selection.kind ()
        kind &= unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.xNumber_property_selection.kind ()
        kind &= unwSelf.yNumber_property_selection.kind ()
        kind &= unwSelf.name_property_selection.kind ()
        kind &= unwSelf.pinNameIsDisplayedInSchematics_property_selection.kind ()
        kind &= unwSelf.nameHorizontalAlignment_property_selection.kind ()
        kind &= unwSelf.numberHorizontalAlignment_property_selection.kind ()
        kind &= g_Preferences!.symbolColor_property_selection.kind ()
        kind &= g_Preferences!.pinNameFont_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xPin_property_selection, unwSelf.yPin_property_selection, unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.xNumber_property_selection, unwSelf.yNumber_property_selection, unwSelf.name_property_selection, unwSelf.pinNameIsDisplayedInSchematics_property_selection, unwSelf.nameHorizontalAlignment_property_selection, unwSelf.numberHorizontalAlignment_property_selection, g_Preferences!.symbolColor_property_selection, g_Preferences!.pinNameFont_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11)) :
            return .single (transient_SymbolPin_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.objectDisplay_property)
    self.yPin_property.addEBObserver (self.objectDisplay_property)
    self.xName_property.addEBObserver (self.objectDisplay_property)
    self.yName_property.addEBObserver (self.objectDisplay_property)
    self.xNumber_property.addEBObserver (self.objectDisplay_property)
    self.yNumber_property.addEBObserver (self.objectDisplay_property)
    self.name_property.addEBObserver (self.objectDisplay_property)
    self.pinNameIsDisplayedInSchematics_property.addEBObserver (self.objectDisplay_property)
    self.nameHorizontalAlignment_property.addEBObserver (self.objectDisplay_property)
    self.numberHorizontalAlignment_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.pinNameFont_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xPin_property_selection.kind ()
        kind &= unwSelf.yPin_property_selection.kind ()
        kind &= unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.xNumber_property_selection.kind ()
        kind &= unwSelf.yNumber_property_selection.kind ()
        kind &= unwSelf.nameHorizontalAlignment_property_selection.kind ()
        kind &= unwSelf.numberHorizontalAlignment_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xPin_property_selection, unwSelf.yPin_property_selection, unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.xNumber_property_selection, unwSelf.yNumber_property_selection, unwSelf.nameHorizontalAlignment_property_selection, unwSelf.numberHorizontalAlignment_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_SymbolPin_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.selectionDisplay_property)
    self.yPin_property.addEBObserver (self.selectionDisplay_property)
    self.xName_property.addEBObserver (self.selectionDisplay_property)
    self.yName_property.addEBObserver (self.selectionDisplay_property)
    self.xNumber_property.addEBObserver (self.selectionDisplay_property)
    self.yNumber_property.addEBObserver (self.selectionDisplay_property)
    self.nameHorizontalAlignment_property.addEBObserver (self.selectionDisplay_property)
    self.numberHorizontalAlignment_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xPin_property_selection.kind ()
        kind &= unwSelf.yPin_property_selection.kind ()
        kind &= unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.xNumber_property_selection.kind ()
        kind &= unwSelf.yNumber_property_selection.kind ()
        kind &= unwSelf.name_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xPin_property_selection, unwSelf.yPin_property_selection, unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.xNumber_property_selection, unwSelf.yNumber_property_selection, unwSelf.name_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_SymbolPin_issues (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xPin_property.addEBObserver (self.issues_property)
    self.yPin_property.addEBObserver (self.issues_property)
    self.xName_property.addEBObserver (self.issues_property)
    self.yName_property.addEBObserver (self.issues_property)
    self.xNumber_property.addEBObserver (self.issues_property)
    self.yNumber_property.addEBObserver (self.issues_property)
    self.name_property.addEBObserver (self.issues_property)
  //--- Atomic property: nameRect
    self.nameRect_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xName_property_selection.kind ()
        kind &= unwSelf.yName_property_selection.kind ()
        kind &= unwSelf.name_property_selection.kind ()
        kind &= unwSelf.nameHorizontalAlignment_property_selection.kind ()
        kind &= g_Preferences!.pinNameFont_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xName_property_selection, unwSelf.yName_property_selection, unwSelf.name_property_selection, unwSelf.nameHorizontalAlignment_property_selection, g_Preferences!.pinNameFont_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_SymbolPin_nameRect (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xName_property.addEBObserver (self.nameRect_property)
    self.yName_property.addEBObserver (self.nameRect_property)
    self.name_property.addEBObserver (self.nameRect_property)
    self.nameHorizontalAlignment_property.addEBObserver (self.nameRect_property)
    g_Preferences?.pinNameFont_property.addEBObserver (self.nameRect_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.name_property.setSignatureObserver (observer: self)
    self.nameHorizontalAlignment_property.setSignatureObserver (observer: self)
    self.numberHorizontalAlignment_property.setSignatureObserver (observer: self)
    self.pinNameIsDisplayedInSchematics_property.setSignatureObserver (observer: self)
    self.xName_property.setSignatureObserver (observer: self)
    self.xNumber_property.setSignatureObserver (observer: self)
    self.xPin_property.setSignatureObserver (observer: self)
    self.yName_property.setSignatureObserver (observer: self)
    self.yNumber_property.setSignatureObserver (observer: self)
    self.yPin_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.xPin_property.removeEBObserver (self.filledBezierPath_property)
    self.yPin_property.removeEBObserver (self.filledBezierPath_property)
    self.xPin_property.removeEBObserver (self.objectDisplay_property)
    self.yPin_property.removeEBObserver (self.objectDisplay_property)
    self.xName_property.removeEBObserver (self.objectDisplay_property)
    self.yName_property.removeEBObserver (self.objectDisplay_property)
    self.xNumber_property.removeEBObserver (self.objectDisplay_property)
    self.yNumber_property.removeEBObserver (self.objectDisplay_property)
    self.name_property.removeEBObserver (self.objectDisplay_property)
    self.pinNameIsDisplayedInSchematics_property.removeEBObserver (self.objectDisplay_property)
    self.nameHorizontalAlignment_property.removeEBObserver (self.objectDisplay_property)
    self.numberHorizontalAlignment_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.objectDisplay_property)
    self.xPin_property.removeEBObserver (self.selectionDisplay_property)
    self.yPin_property.removeEBObserver (self.selectionDisplay_property)
    self.xName_property.removeEBObserver (self.selectionDisplay_property)
    self.yName_property.removeEBObserver (self.selectionDisplay_property)
    self.xNumber_property.removeEBObserver (self.selectionDisplay_property)
    self.yNumber_property.removeEBObserver (self.selectionDisplay_property)
    self.nameHorizontalAlignment_property.removeEBObserver (self.selectionDisplay_property)
    self.numberHorizontalAlignment_property.removeEBObserver (self.selectionDisplay_property)
    self.xPin_property.removeEBObserver (self.issues_property)
    self.yPin_property.removeEBObserver (self.issues_property)
    self.xName_property.removeEBObserver (self.issues_property)
    self.yName_property.removeEBObserver (self.issues_property)
    self.xNumber_property.removeEBObserver (self.issues_property)
    self.yNumber_property.removeEBObserver (self.issues_property)
    self.name_property.removeEBObserver (self.issues_property)
    self.xName_property.removeEBObserver (self.nameRect_property)
    self.yName_property.removeEBObserver (self.nameRect_property)
    self.name_property.removeEBObserver (self.nameRect_property)
    self.nameHorizontalAlignment_property.removeEBObserver (self.nameRect_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.nameRect_property)
  //--- Unregister properties for handling signature
    self.name_property.setSignatureObserver (observer: nil)
    self.nameHorizontalAlignment_property.setSignatureObserver (observer: nil)
    self.numberHorizontalAlignment_property.setSignatureObserver (observer: nil)
    self.pinNameIsDisplayedInSchematics_property.setSignatureObserver (observer: nil)
    self.xName_property.setSignatureObserver (observer: nil)
    self.xNumber_property.setSignatureObserver (observer: nil)
    self.xPin_property.setSignatureObserver (observer: nil)
    self.yName_property.setSignatureObserver (observer: nil)
    self.yNumber_property.setSignatureObserver (observer: nil)
    self.yPin_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "yPin",
      idx:self.yPin_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yPin_property.mObserverExplorer,
      valueExplorer:&self.yPin_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xName",
      idx:self.xName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xName_property.mObserverExplorer,
      valueExplorer:&self.xName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yName",
      idx:self.yName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yName_property.mObserverExplorer,
      valueExplorer:&self.yName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xNumber",
      idx:self.xNumber_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xNumber_property.mObserverExplorer,
      valueExplorer:&self.xNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yNumber",
      idx:self.yNumber_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yNumber_property.mObserverExplorer,
      valueExplorer:&self.yNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name_property.mObserverExplorer,
      valueExplorer:&self.name_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "nameHorizontalAlignment",
      idx:self.nameHorizontalAlignment_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.nameHorizontalAlignment_property.mObserverExplorer,
      valueExplorer:&self.nameHorizontalAlignment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "numberHorizontalAlignment",
      idx:self.numberHorizontalAlignment_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.numberHorizontalAlignment_property.mObserverExplorer,
      valueExplorer:&self.numberHorizontalAlignment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pinNameIsDisplayedInSchematics",
      idx:self.pinNameIsDisplayedInSchematics_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.pinNameIsDisplayedInSchematics_property.mObserverExplorer,
      valueExplorer:&self.pinNameIsDisplayedInSchematics_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xPin",
      idx:self.xPin_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xPin_property.mObserverExplorer,
      valueExplorer:&self.xPin_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "filledBezierPath",
      idx:self.filledBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.filledBezierPath_property.mObserverExplorer,
      valueExplorer:&self.filledBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "nameRect",
      idx:self.nameRect_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.nameRect_property.mObserverExplorer,
      valueExplorer:&self.nameRect_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: yPin
    self.yPin_property.mObserverExplorer = nil
    self.yPin_property.mValueExplorer = nil
  //--- Atomic property: xName
    self.xName_property.mObserverExplorer = nil
    self.xName_property.mValueExplorer = nil
  //--- Atomic property: yName
    self.yName_property.mObserverExplorer = nil
    self.yName_property.mValueExplorer = nil
  //--- Atomic property: xNumber
    self.xNumber_property.mObserverExplorer = nil
    self.xNumber_property.mValueExplorer = nil
  //--- Atomic property: yNumber
    self.yNumber_property.mObserverExplorer = nil
    self.yNumber_property.mValueExplorer = nil
  //--- Atomic property: name
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
  //--- Atomic property: nameHorizontalAlignment
    self.nameHorizontalAlignment_property.mObserverExplorer = nil
    self.nameHorizontalAlignment_property.mValueExplorer = nil
  //--- Atomic property: numberHorizontalAlignment
    self.numberHorizontalAlignment_property.mObserverExplorer = nil
    self.numberHorizontalAlignment_property.mValueExplorer = nil
  //--- Atomic property: pinNameIsDisplayedInSchematics
    self.pinNameIsDisplayedInSchematics_property.mObserverExplorer = nil
    self.pinNameIsDisplayedInSchematics_property.mValueExplorer = nil
  //--- Atomic property: xPin
    self.xPin_property.mObserverExplorer = nil
    self.xPin_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: yPin
    self.yPin_property.storeIn (dictionary: ioDictionary, forKey:"yPin")
  //--- Atomic property: xName
    self.xName_property.storeIn (dictionary: ioDictionary, forKey:"xName")
  //--- Atomic property: yName
    self.yName_property.storeIn (dictionary: ioDictionary, forKey:"yName")
  //--- Atomic property: xNumber
    self.xNumber_property.storeIn (dictionary: ioDictionary, forKey:"xNumber")
  //--- Atomic property: yNumber
    self.yNumber_property.storeIn (dictionary: ioDictionary, forKey:"yNumber")
  //--- Atomic property: name
    self.name_property.storeIn (dictionary: ioDictionary, forKey:"name")
  //--- Atomic property: nameHorizontalAlignment
    self.nameHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey:"nameHorizontalAlignment")
  //--- Atomic property: numberHorizontalAlignment
    self.numberHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey:"numberHorizontalAlignment")
  //--- Atomic property: pinNameIsDisplayedInSchematics
    self.pinNameIsDisplayedInSchematics_property.storeIn (dictionary: ioDictionary, forKey:"pinNameIsDisplayedInSchematics")
  //--- Atomic property: xPin
    self.xPin_property.storeIn (dictionary: ioDictionary, forKey:"xPin")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: yPin
    self.yPin_property.readFrom (dictionary: inDictionary, forKey:"yPin")
  //--- Atomic property: xName
    self.xName_property.readFrom (dictionary: inDictionary, forKey:"xName")
  //--- Atomic property: yName
    self.yName_property.readFrom (dictionary: inDictionary, forKey:"yName")
  //--- Atomic property: xNumber
    self.xNumber_property.readFrom (dictionary: inDictionary, forKey:"xNumber")
  //--- Atomic property: yNumber
    self.yNumber_property.readFrom (dictionary: inDictionary, forKey:"yNumber")
  //--- Atomic property: name
    self.name_property.readFrom (dictionary: inDictionary, forKey:"name")
  //--- Atomic property: nameHorizontalAlignment
    self.nameHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey:"nameHorizontalAlignment")
  //--- Atomic property: numberHorizontalAlignment
    self.numberHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey:"numberHorizontalAlignment")
  //--- Atomic property: pinNameIsDisplayedInSchematics
    self.pinNameIsDisplayedInSchematics_property.readFrom (dictionary: inDictionary, forKey:"pinNameIsDisplayedInSchematics")
  //--- Atomic property: xPin
    self.xPin_property.readFrom (dictionary: inDictionary, forKey:"xPin")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.name_property.signature ())
    crc.accumulateUInt32 (self.nameHorizontalAlignment_property.signature ())
    crc.accumulateUInt32 (self.numberHorizontalAlignment_property.signature ())
    crc.accumulateUInt32 (self.pinNameIsDisplayedInSchematics_property.signature ())
    crc.accumulateUInt32 (self.xName_property.signature ())
    crc.accumulateUInt32 (self.xNumber_property.signature ())
    crc.accumulateUInt32 (self.xPin_property.signature ())
    crc.accumulateUInt32 (self.yName_property.signature ())
    crc.accumulateUInt32 (self.yNumber_property.signature ())
    crc.accumulateUInt32 (self.yPin_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolPin : ReadOnlyAbstractArrayProperty <SymbolPin> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <SymbolPin>, addedSet inAddedSet : Set <SymbolPin>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_yPin_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_xName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_yName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_xNumber_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_yNumber_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_name_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_nameHorizontalAlignment_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_numberHorizontalAlignment_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_pinNameIsDisplayedInSchematics_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_xPin_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_filledBezierPath_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_nameRect_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_yPin_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_xName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_yName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_xNumber_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_yNumber_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_name_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_nameHorizontalAlignment_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_numberHorizontalAlignment_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_pinNameIsDisplayedInSchematics_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_xPin_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_filledBezierPath_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_nameRect_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'yPin' stored property
  //····················································································································

  private var mObserversOf_yPin = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yPin (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yPin.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPin_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yPin (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yPin.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPin_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yPin_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_yPin.apply { (_ observer : EBEvent) in
        managedObject.yPin_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yPin_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_yPin.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yPin_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xName' stored property
  //····················································································································

  private var mObserversOf_xName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xName_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_xName.apply { (_ observer : EBEvent) in
        managedObject.xName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xName_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_xName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yName' stored property
  //····················································································································

  private var mObserversOf_yName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yName_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_yName.apply { (_ observer : EBEvent) in
        managedObject.yName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yName_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_yName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xNumber' stored property
  //····················································································································

  private var mObserversOf_xNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xNumber_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_xNumber.apply { (_ observer : EBEvent) in
        managedObject.xNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xNumber_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_xNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yNumber' stored property
  //····················································································································

  private var mObserversOf_yNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yNumber_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_yNumber.apply { (_ observer : EBEvent) in
        managedObject.yNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yNumber_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_yNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_name.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_name.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_name.apply { (_ observer : EBEvent) in
        managedObject.name_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_name.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'nameHorizontalAlignment' stored property
  //····················································································································

  private var mObserversOf_nameHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_nameHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_nameHorizontalAlignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_nameHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_nameHorizontalAlignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_nameHorizontalAlignment_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_nameHorizontalAlignment.apply { (_ observer : EBEvent) in
        managedObject.nameHorizontalAlignment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_nameHorizontalAlignment_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_nameHorizontalAlignment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.nameHorizontalAlignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'numberHorizontalAlignment' stored property
  //····················································································································

  private var mObserversOf_numberHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_numberHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_numberHorizontalAlignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.numberHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_numberHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_numberHorizontalAlignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.numberHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_numberHorizontalAlignment_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_numberHorizontalAlignment.apply { (_ observer : EBEvent) in
        managedObject.numberHorizontalAlignment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_numberHorizontalAlignment_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_numberHorizontalAlignment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.numberHorizontalAlignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pinNameIsDisplayedInSchematics' stored property
  //····················································································································

  private var mObserversOf_pinNameIsDisplayedInSchematics = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinNameIsDisplayedInSchematics.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinNameIsDisplayedInSchematics_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinNameIsDisplayedInSchematics.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinNameIsDisplayedInSchematics_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinNameIsDisplayedInSchematics_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_pinNameIsDisplayedInSchematics.apply { (_ observer : EBEvent) in
        managedObject.pinNameIsDisplayedInSchematics_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinNameIsDisplayedInSchematics_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_pinNameIsDisplayedInSchematics.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.pinNameIsDisplayedInSchematics_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xPin' stored property
  //····················································································································

  private var mObserversOf_xPin = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xPin (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xPin.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPin_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xPin (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xPin.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPin_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xPin_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_xPin.apply { (_ observer : EBEvent) in
        managedObject.xPin_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xPin_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_xPin.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xPin_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'filledBezierPath' transient property
  //····················································································································

  private var mObserversOf_filledBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_filledBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_filledBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.filledBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_filledBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_filledBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.filledBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_filledBezierPath_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_filledBezierPath.apply { (_ observer : EBEvent) in
        managedObject.filledBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_filledBezierPath_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_filledBezierPath.apply { (_ observer : EBEvent) in
        managedObject.filledBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'nameRect' transient property
  //····················································································································

  private var mObserversOf_nameRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_nameRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_nameRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameRect_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_nameRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_nameRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nameRect_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_nameRect_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_nameRect.apply { (_ observer : EBEvent) in
        managedObject.nameRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_nameRect_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_nameRect.apply { (_ observer : EBEvent) in
        managedObject.nameRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_SymbolPin : ReadOnlyArrayOf_SymbolPin {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_SymbolPin? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_SymbolPin?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [SymbolPin] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [SymbolPin] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [SymbolPin] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_SymbolPin <SUPER : EBManagedObject> : ReadOnlyArrayOf_SymbolPin {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [SymbolPin] ()
    for superObject in newModelArray {
      if let object = superObject as? SymbolPin {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [SymbolPin] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [SymbolPin] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolPin : ReadOnlyArrayOf_SymbolPin {

  //····················································································································
 
  func setProp (_ value :  [SymbolPin]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_SymbolPin : ReadWriteArrayOf_SymbolPin {

  //····················································································································

  private var mModel : ReadWriteArrayOf_SymbolPin? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_SymbolPin?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [SymbolPin]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [SymbolPin]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [SymbolPin] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [SymbolPin] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_SymbolPin : ReadWriteArrayOf_SymbolPin, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolPin) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolPin) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolPin) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : SymbolPin) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [SymbolPin] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "SymbolPin") as? SymbolPin {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [SymbolPin]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [SymbolPin]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <SymbolPin>, addedSet inAddedSet : Set <SymbolPin>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //---
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  }
 
  //····················································································································

  override var prop : EBSelection < [SymbolPin] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [SymbolPin]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [SymbolPin] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : SymbolPin) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : SymbolPin) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_SymbolPin 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_SymbolPin : ReadOnlyAbstractObjectProperty <SymbolPin> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolPin?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.yPin_property.removeEBObserversFrom (&self.mObserversOf_yPin) // Stored property
    inOldValue?.xName_property.removeEBObserversFrom (&self.mObserversOf_xName) // Stored property
    inOldValue?.yName_property.removeEBObserversFrom (&self.mObserversOf_yName) // Stored property
    inOldValue?.xNumber_property.removeEBObserversFrom (&self.mObserversOf_xNumber) // Stored property
    inOldValue?.yNumber_property.removeEBObserversFrom (&self.mObserversOf_yNumber) // Stored property
    inOldValue?.name_property.removeEBObserversFrom (&self.mObserversOf_name) // Stored property
    inOldValue?.nameHorizontalAlignment_property.removeEBObserversFrom (&self.mObserversOf_nameHorizontalAlignment) // Stored property
    inOldValue?.numberHorizontalAlignment_property.removeEBObserversFrom (&self.mObserversOf_numberHorizontalAlignment) // Stored property
    inOldValue?.pinNameIsDisplayedInSchematics_property.removeEBObserversFrom (&self.mObserversOf_pinNameIsDisplayedInSchematics) // Stored property
    inOldValue?.xPin_property.removeEBObserversFrom (&self.mObserversOf_xPin) // Stored property
    inOldValue?.filledBezierPath_property.removeEBObserversFrom (&self.mObserversOf_filledBezierPath) // Transient property
    inOldValue?.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    inOldValue?.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
    inOldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
    inOldValue?.nameRect_property.removeEBObserversFrom (&self.mObserversOf_nameRect) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.yPin_property.addEBObserversFrom (&self.mObserversOf_yPin) // Stored property
    self.mInternalValue?.xName_property.addEBObserversFrom (&self.mObserversOf_xName) // Stored property
    self.mInternalValue?.yName_property.addEBObserversFrom (&self.mObserversOf_yName) // Stored property
    self.mInternalValue?.xNumber_property.addEBObserversFrom (&self.mObserversOf_xNumber) // Stored property
    self.mInternalValue?.yNumber_property.addEBObserversFrom (&self.mObserversOf_yNumber) // Stored property
    self.mInternalValue?.name_property.addEBObserversFrom (&self.mObserversOf_name) // Stored property
    self.mInternalValue?.nameHorizontalAlignment_property.addEBObserversFrom (&self.mObserversOf_nameHorizontalAlignment) // Stored property
    self.mInternalValue?.numberHorizontalAlignment_property.addEBObserversFrom (&self.mObserversOf_numberHorizontalAlignment) // Stored property
    self.mInternalValue?.pinNameIsDisplayedInSchematics_property.addEBObserversFrom (&self.mObserversOf_pinNameIsDisplayedInSchematics) // Stored property
    self.mInternalValue?.xPin_property.addEBObserversFrom (&self.mObserversOf_xPin) // Stored property
    self.mInternalValue?.filledBezierPath_property.addEBObserversFrom (&self.mObserversOf_filledBezierPath) // Transient property
    self.mInternalValue?.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    self.mInternalValue?.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
    self.mInternalValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
    self.mInternalValue?.nameRect_property.addEBObserversFrom (&self.mObserversOf_nameRect) // Transient property
  }

  //····················································································································
  //   Observers of 'yPin' stored property
  //····················································································································

  private var mObserversOf_yPin = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yPin (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yPin.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.yPin_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yPin (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yPin.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.yPin_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_yPin_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_yPin.apply { (_ observer : EBEvent) in
        managedObject.yPin_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yPin_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_yPin.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yPin_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xName' stored property
  //····················································································································

  private var mObserversOf_xName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.xName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.xName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_xName_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_xName.apply { (_ observer : EBEvent) in
        managedObject.xName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xName_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_xName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yName' stored property
  //····················································································································

  private var mObserversOf_yName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.yName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.yName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_yName_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_yName.apply { (_ observer : EBEvent) in
        managedObject.yName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yName_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_yName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xNumber' stored property
  //····················································································································

  private var mObserversOf_xNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.xNumber_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.xNumber_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_xNumber_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_xNumber.apply { (_ observer : EBEvent) in
        managedObject.xNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xNumber_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_xNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yNumber' stored property
  //····················································································································

  private var mObserversOf_yNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.yNumber_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.yNumber_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_yNumber_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_yNumber.apply { (_ observer : EBEvent) in
        managedObject.yNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yNumber_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_yNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_name.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.name_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_name.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.name_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_name.apply { (_ observer : EBEvent) in
        managedObject.name_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_name.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'nameHorizontalAlignment' stored property
  //····················································································································

  private var mObserversOf_nameHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_nameHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_nameHorizontalAlignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.nameHorizontalAlignment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_nameHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_nameHorizontalAlignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.nameHorizontalAlignment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_nameHorizontalAlignment_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_nameHorizontalAlignment.apply { (_ observer : EBEvent) in
        managedObject.nameHorizontalAlignment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_nameHorizontalAlignment_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_nameHorizontalAlignment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.nameHorizontalAlignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'numberHorizontalAlignment' stored property
  //····················································································································

  private var mObserversOf_numberHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_numberHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_numberHorizontalAlignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.numberHorizontalAlignment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_numberHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_numberHorizontalAlignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.numberHorizontalAlignment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_numberHorizontalAlignment_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_numberHorizontalAlignment.apply { (_ observer : EBEvent) in
        managedObject.numberHorizontalAlignment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_numberHorizontalAlignment_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_numberHorizontalAlignment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.numberHorizontalAlignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pinNameIsDisplayedInSchematics' stored property
  //····················································································································

  private var mObserversOf_pinNameIsDisplayedInSchematics = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinNameIsDisplayedInSchematics.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.pinNameIsDisplayedInSchematics_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinNameIsDisplayedInSchematics.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.pinNameIsDisplayedInSchematics_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_pinNameIsDisplayedInSchematics_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_pinNameIsDisplayedInSchematics.apply { (_ observer : EBEvent) in
        managedObject.pinNameIsDisplayedInSchematics_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinNameIsDisplayedInSchematics_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_pinNameIsDisplayedInSchematics.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.pinNameIsDisplayedInSchematics_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xPin' stored property
  //····················································································································

  private var mObserversOf_xPin = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xPin (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xPin.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.xPin_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xPin (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xPin.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.xPin_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_xPin_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_xPin.apply { (_ observer : EBEvent) in
        managedObject.xPin_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xPin_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    self.mObserversOf_xPin.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xPin_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'filledBezierPath' transient property
  //····················································································································

  private var mObserversOf_filledBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_filledBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_filledBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.filledBezierPath_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_filledBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_filledBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.filledBezierPath_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_filledBezierPath_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_filledBezierPath.apply { (_ observer : EBEvent) in
        managedObject.filledBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_filledBezierPath_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_filledBezierPath.apply { (_ observer : EBEvent) in
        managedObject.filledBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'nameRect' transient property
  //····················································································································

  private var mObserversOf_nameRect = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_nameRect (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_nameRect.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.nameRect_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_nameRect (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_nameRect.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.nameRect_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_nameRect_toElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_nameRect.apply { (_ observer : EBEvent) in
        managedObject.nameRect_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_nameRect_fromElementsOfSet (_ inSet : Set<SymbolPin>) {
    for managedObject in inSet {
      self.mObserversOf_nameRect.apply { (_ observer : EBEvent) in
        managedObject.nameRect_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_SymbolPin : ReadOnlyObject_SymbolPin {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_SymbolPin? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_SymbolPin?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : SymbolPin? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < SymbolPin > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : SymbolPin? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_SymbolPin : ReadOnlyObject_SymbolPin {

  //····················································································································
 
  func setProp (_ inValue : SymbolPin?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_SymbolPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_SymbolPin : ReadWriteObject_SymbolPin {

  //····················································································································

  private var mModel : ReadWriteObject_SymbolPin? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_SymbolPin?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : SymbolPin?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : SymbolPin?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < SymbolPin > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : SymbolPin? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_SymbolPin 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_SymbolPin : ReadWriteObject_SymbolPin, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolPin) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolPin) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolPin) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : SymbolPin) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

 /* convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [SymbolPin] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "SymbolPin") as? SymbolPin {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  } */

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolPin?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : SymbolPin?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < SymbolPin > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : SymbolPin?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : SymbolPin? { return self.mInternalValue }

  //····················································································································

  func remove (_ object : SymbolPin) {
    if object === self.mInternalValue {
      self.mInternalValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : SymbolPin) {
    if object !== self.mInternalValue {
      self.mInternalValue = object
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
