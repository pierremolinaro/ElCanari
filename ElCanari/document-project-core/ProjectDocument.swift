//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(ProjectDocument) class ProjectDocument : EBManagedDocument {

  //····················································································································
  //   Array controller: componentController
  //····················································································································

  var componentController = Controller_ProjectDocument_componentController ()

  //····················································································································
  //   Array controller: netClassController
  //····················································································································

  var netClassController = Controller_ProjectDocument_netClassController ()

  //····················································································································
  //   Array controller: projectFontController
  //····················································································································

  var projectFontController = Controller_ProjectDocument_projectFontController ()

  //····················································································································
  //   Array controller: projectDeviceController
  //····················································································································

  var projectDeviceController = Controller_ProjectDocument_projectDeviceController ()

  //····················································································································
  //   Array controller: schematicObjectsController
  //····················································································································

  var schematicObjectsController = Controller_ProjectDocument_schematicObjectsController ()

  //····················································································································
  //   Selection controller: wireInSchematicSelectionController
  //····················································································································

  var wireInSchematicSelectionController = SelectionController_ProjectDocument_wireInSchematicSelectionController ()

  //····················································································································
  //   Selection controller: ncInSchematicSelectionController
  //····················································································································

  var ncInSchematicSelectionController = SelectionController_ProjectDocument_ncInSchematicSelectionController ()

  //····················································································································
  //   Selection controller: commentInSchematicSelectionController
  //····················································································································

  var commentInSchematicSelectionController = SelectionController_ProjectDocument_commentInSchematicSelectionController ()

  //····················································································································
  //   Selection controller: schematicLabelSelectionController
  //····················································································································

  var schematicLabelSelectionController = SelectionController_ProjectDocument_schematicLabelSelectionController ()

  //····················································································································
  //   Selection controller: componentSymbolSelectionController
  //····················································································································

  var componentSymbolSelectionController = SelectionController_ProjectDocument_componentSymbolSelectionController ()

  //····················································································································
  //   Transient property: componentCount
  //····················································································································

  let componentCount_property = EBTransientProperty_String ()

  //····················································································································

  var componentCount_property_selection : EBSelection <String> {
    return self.componentCount_property.prop
  }

  //····················································································································

  var componentCount : String? {
    switch self.componentCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netCount
  //····················································································································

  let netCount_property = EBTransientProperty_Int ()

  //····················································································································

  var netCount_property_selection : EBSelection <Int> {
    return self.netCount_property.prop
  }

  //····················································································································

  var netCount : Int? {
    switch self.netCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  let documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.prop
  }

  //····················································································································

  var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveNetClasses
  //····················································································································

  let canRemoveNetClasses_property = EBTransientProperty_Bool ()

  //····················································································································

  var canRemoveNetClasses_property_selection : EBSelection <Bool> {
    return self.canRemoveNetClasses_property.prop
  }

  //····················································································································

  var canRemoveNetClasses : Bool? {
    switch self.canRemoveNetClasses_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDevicePackageNames
  //····················································································································

  let selectedDevicePackageNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  var selectedDevicePackageNames_property_selection : EBSelection <StringArray> {
    return self.selectedDevicePackageNames_property.prop
  }

  //····················································································································

  var selectedDevicePackageNames : StringArray? {
    switch self.selectedDevicePackageNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedDeviceSymbolNames
  //····················································································································

  let selectedDeviceSymbolNames_property = EBTransientProperty_TwoStringArray ()

  //····················································································································

  var selectedDeviceSymbolNames_property_selection : EBSelection <TwoStringArray> {
    return self.selectedDeviceSymbolNames_property.prop
  }

  //····················································································································

  var selectedDeviceSymbolNames : TwoStringArray? {
    switch self.selectedDeviceSymbolNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinPadAssignments
  //····················································································································

  let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································

  var pinPadAssignments_property_selection : EBSelection <ThreeStringArray> {
    return self.pinPadAssignments_property.prop
  }

  //····················································································································

  var pinPadAssignments : ThreeStringArray? {
    switch self.pinPadAssignments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbolsCount
  //····················································································································

  let unplacedSymbolsCount_property = EBTransientProperty_Int ()

  //····················································································································

  var unplacedSymbolsCount_property_selection : EBSelection <Int> {
    return self.unplacedSymbolsCount_property.prop
  }

  //····················································································································

  var unplacedSymbolsCount : Int? {
    switch self.unplacedSymbolsCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbolsCountString
  //····················································································································

  let unplacedSymbolsCountString_property = EBTransientProperty_String ()

  //····················································································································

  var unplacedSymbolsCountString_property_selection : EBSelection <String> {
    return self.unplacedSymbolsCountString_property.prop
  }

  //····················································································································

  var unplacedSymbolsCountString : String? {
    switch self.unplacedSymbolsCountString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netCountString
  //····················································································································

  let netCountString_property = EBTransientProperty_String ()

  //····················································································································

  var netCountString_property_selection : EBSelection <String> {
    return self.netCountString_property.prop
  }

  //····················································································································

  var netCountString : String? {
    switch self.netCountString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canChangePackage
  //····················································································································

  let canChangePackage_property = EBTransientProperty_Bool ()

  //····················································································································

  var canChangePackage_property_selection : EBSelection <Bool> {
    return self.canChangePackage_property.prop
  }

  //····················································································································

  var canChangePackage : Bool? {
    switch self.canChangePackage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemoveSelectedDevices
  //····················································································································

  let canRemoveSelectedDevices_property = EBTransientProperty_Bool ()

  //····················································································································

  var canRemoveSelectedDevices_property_selection : EBSelection <Bool> {
    return self.canRemoveSelectedDevices_property.prop
  }

  //····················································································································

  var canRemoveSelectedDevices : Bool? {
    switch self.canRemoveSelectedDevices_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddBottomSchematicHotKeyTextField : NSTextField?
  @IBOutlet var mAddCommentButton : CanariDragSourceButton?
  @IBOutlet var mAddComponentButton : EBButton?
  @IBOutlet var mAddFontButton : EBButton?
  @IBOutlet var mAddLeftLabelSchematicHotKeyTextField : NSTextField?
  @IBOutlet var mAddNCSchematicHotKeyTextField : NSTextField?
  @IBOutlet var mAddNetClassButton : EBButton?
  @IBOutlet var mAddNetClassErrorMessageTextField : NSTextField?
  @IBOutlet var mAddNetClassPanel : NSPanel?
  @IBOutlet var mAddNetClassTextField : EBTextField?
  @IBOutlet var mAddNetClassValidationButton : NSButton?
  @IBOutlet var mAddRightLabelSchematicHotKeyTextField : NSTextField?
  @IBOutlet var mAddTopLabelSchematicHotKeyTextField : NSTextField?
  @IBOutlet var mAddWireButton : CanariDragSourceButton?
  @IBOutlet var mAddWirePointSchematicHotKeyTextField : NSTextField?
  @IBOutlet var mBaseSchematicsInspectorView : NSView?
  @IBOutlet var mBoardPageView : CanariViewWithKeyView?
  @IBOutlet var mChangeComponentValueComboxBox : CanariComboBox?
  @IBOutlet var mChangePackageComponentListTextField : NSTextField?
  @IBOutlet var mChangePackageOfSelectedComponentsActionButton : EBButton?
  @IBOutlet var mChangePackagePanel : NSPanel?
  @IBOutlet var mChangePackagePopUpButton : EBPopUpButton?
  @IBOutlet var mChangeValueComponentListTextField : NSTextField?
  @IBOutlet var mChangeValueOfSelectedComponentsActionButton : EBButton?
  @IBOutlet var mChangeValuePanel : NSPanel?
  @IBOutlet var mChangeValueValidationButton : NSButton?
  @IBOutlet var mCommentInSchematicsInspectorView : CanariViewWithKeyView?
  @IBOutlet var mCommentInSchematicsTextField : EBTextField?
  @IBOutlet var mComponentCountTextField : EBTextObserverField?
  @IBOutlet var mComponentSymbolComponentNameTextField : EBTextObserverField?
  @IBOutlet var mComponentSymbolDeviceNameTextField : EBTextObserverField?
  @IBOutlet var mComponentSymbolInspectorView : CanariViewWithKeyView?
  @IBOutlet var mComponentSymbolInstanceNameTextField : EBTextObserverField?
  @IBOutlet var mComponentSymbolShowComponentValueSwitch : EBSwitch?
  @IBOutlet var mComponentSymbolTypeNameTextField : EBTextObserverField?
  @IBOutlet var mComponentSymbolValueTextField : EBTextField?
  @IBOutlet var mComponentTableView : EBTableView?
  @IBOutlet var mComponentsPageView : CanariViewWithKeyView?
  @IBOutlet var mConnectSchematicHotKeyTextField : NSTextField?
  @IBOutlet var mCurrentComponentNameTextField : NSTextField?
  @IBOutlet var mDeviceLibraryTableView : EBTableView?
  @IBOutlet var mDevicePackageTableView : StringArrayTableView?
  @IBOutlet var mDeviceSymbolTableView : TwoStringArrayTableView?
  @IBOutlet var mDisconnectSchematicHotKeyTextField : NSTextField?
  @IBOutlet var mDuplicateSelectedComponentsActionButton : EBButton?
  @IBOutlet var mEditDeviceButton : EBButton?
  @IBOutlet var mEditFontButton : EBButton?
  @IBOutlet var mEditNetClassButton : EBButton?
  @IBOutlet var mExportDeviceButton : EBButton?
  @IBOutlet var mFontLibraryTableView : EBTableView?
  @IBOutlet var mGridZoomSchematicsInspectorView : CanariViewWithKeyView?
  @IBOutlet var mHotKeysSchematicInspectorView : CanariViewWithKeyView?
  @IBOutlet var mInconsistentSchematicErrorPanel : NSPanel?
  @IBOutlet var mInconsistentSchematicErrorTextView : NSTextView?
  @IBOutlet var mLibraryPageView : CanariViewWithKeyView?
  @IBOutlet var mMasterView : NSView?
  @IBOutlet var mMergeNetDialog : NSPanel?
  @IBOutlet var mMergeNetPopUpButton : EBPopUpButton?
  @IBOutlet var mMergeSeveralSubnetsPanel : NSPanel?
  @IBOutlet var mMergeSeveralSubnetsPopUpButton : EBPopUpButton?
  @IBOutlet var mNCInSchematicsInspectorView : CanariViewWithKeyView?
  @IBOutlet var mNCRotationSegmentedControl : CanariQuadrantSegmentedControl?
  @IBOutlet var mNetClassColorWell : EBColorWell?
  @IBOutlet var mNetClassHoleDiameterDimensionTextField : CanariDimensionTextField?
  @IBOutlet var mNetClassHoleDiameterUnitPopUpButton : EBPopUpButton?
  @IBOutlet var mNetClassPadDiameterDimensionTextField : CanariDimensionTextField?
  @IBOutlet var mNetClassPadDiameterUnitPopUpButton : EBPopUpButton?
  @IBOutlet var mNetClassTableView : EBTableView?
  @IBOutlet var mNetClassWidthDimensionTextField : CanariDimensionTextField?
  @IBOutlet var mNetClassWidthUnitPopUpButton : EBPopUpButton?
  @IBOutlet var mNetClassesPageView : CanariViewWithKeyView?
  @IBOutlet var mNetCountTextField : EBTextObserverField?
  @IBOutlet var mNetInfoTableView : CanariNetInfoTableView?
  @IBOutlet var mNetListPageView : CanariViewWithKeyView?
  @IBOutlet var mNetWarningImageView : NSImageView?
  @IBOutlet var mNetWarningTextField : EBIntObserverField?
  @IBOutlet var mNewComponentFromDevicePullDownButton : CanariNewComponentFromDevicePullDownButton?
  @IBOutlet var mNewSheetButton : EBButton?
  @IBOutlet var mOpenSetDateDialogButton : EBButton?
  @IBOutlet var mPageSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mPinPadAssignmentTableView : ThreeStringArrayTableView?
  @IBOutlet var mProductPageView : CanariViewWithKeyView?
  @IBOutlet var mRemoveDeviceButton : EBButton?
  @IBOutlet var mRemoveFontButton : EBButton?
  @IBOutlet var mRemoveNetClassButton : EBButton?
  @IBOutlet var mRemoveSelectedComponentsActionButton : EBButton?
  @IBOutlet var mRemoveSheetButton : EBButton?
  @IBOutlet var mRemoveWirePointSchematicHotKeyTextField : NSTextField?
  @IBOutlet var mRenameComponentButton : EBButton?
  @IBOutlet var mRenameComponentErrorMessageTextField : NSTextField?
  @IBOutlet var mRenameComponentFromComponentSymbolButton : EBButton?
  @IBOutlet var mRenameComponentIndexesPopUpButton : NSPopUpButton?
  @IBOutlet var mRenameComponentPanel : NSPanel?
  @IBOutlet var mRenameComponentPrefixComboxBox : CanariComboBox?
  @IBOutlet var mRenameComponentValidationButton : NSButton?
  @IBOutlet var mRenameNetErrorTextField : EBTextField?
  @IBOutlet var mRenameNetInNetTabButton : EBButton?
  @IBOutlet var mRenameNetOkButton : EBButton?
  @IBOutlet var mRenameNetPanel : NSPanel?
  @IBOutlet var mRenameNetTextField : EBTextField?
  @IBOutlet var mResetDeviceVersionButton : EBButton?
  @IBOutlet var mResetFontVersionButton : EBButton?
  @IBOutlet var mSchematicLabelInsulateSubnetButton : EBButton?
  @IBOutlet var mSchematicLabelMergeSubnetButton : EBButton?
  @IBOutlet var mSchematicLabelNetClassButton : EBPopUpButton?
  @IBOutlet var mSchematicStatusImageViewInToolbar : EBImageObserverView?
  @IBOutlet var mSchematicWireInsulateSubnetButton : EBButton?
  @IBOutlet var mSchematicWireMergeSubnetButton : EBButton?
  @IBOutlet var mSchematicWireNetClassButton : EBPopUpButton?
  @IBOutlet var mSchematicsDatePicker : NSDatePicker?
  @IBOutlet var mSchematicsGridDisplayFactorPopUpButton : EBPopUpButton?
  @IBOutlet var mSchematicsGridStylePopUpButton : EBPopUpButton?
  @IBOutlet var mSchematicsHorizontalFlipSwitch : EBSwitch?
  @IBOutlet var mSchematicsInspectorSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mSchematicsLabelInspectorView : CanariViewWithKeyView?
  @IBOutlet var mSchematicsLabelNetNameTextField : EBTextObserverField?
  @IBOutlet var mSchematicsLabelRenameNetButton : EBButton?
  @IBOutlet var mSchematicsLabelRotationSegmentedControl : CanariQuadrantSegmentedControl?
  @IBOutlet var mSchematicsPageView : CanariViewWithKeyView?
  @IBOutlet var mSchematicsScrollView : EBScrollView?
  @IBOutlet var mSchematicsSheetOrientationSegmentedControl : CanariEnumSegmentedControl?
  @IBOutlet var mSchematicsSheetsInspectorView : CanariViewWithKeyView?
  @IBOutlet var mSchematicsTitleTextField : EBTextField?
  @IBOutlet var mSchematicsVersionTextField : EBTextField?
  @IBOutlet var mSchematicsVerticalFlipSwitch : EBSwitch?
  @IBOutlet var mSchematicsView : EBGraphicView?
  @IBOutlet var mSchematicsWireInspectorView : CanariViewWithKeyView?
  @IBOutlet var mSelectNetClassInNetTabButton : EBButton?
  @IBOutlet var mSelectNetClassPanel : NSPanel?
  @IBOutlet var mSelectNetClassPopUpButton : EBPopUpButton?
  @IBOutlet var mSelectedObjectsSchematicsInspectorView : CanariViewWithKeyView?
  @IBOutlet var mSelectedSheetTitleTextField : EBTextField?
  @IBOutlet var mSetDatePanel : NSPanel?
  @IBOutlet var mSetDateToNowButton : EBButton?
  @IBOutlet var mSheetDownButton : EBButton?
  @IBOutlet var mSheetPopUpButton : EBPopUpButton?
  @IBOutlet var mSheetUpButton : EBButton?
  @IBOutlet var mSymbolMirrorSwitch : EBSwitch?
  @IBOutlet var mSymbolRotationSegmentedControl : CanariQuadrantSegmentedControl?
  @IBOutlet var mUnplacedSymbolsSchematicsInspectorView : CanariViewWithKeyView?
  @IBOutlet var mUnplacedSymbolsTableView : CanariDragSourceTableView?
  @IBOutlet var mUnplacedSymbolsTextField : EBTextObserverField?
  @IBOutlet var mUpdateDeviceButton : EBButton?
  @IBOutlet var mUpdateFontButton : EBButton?
  @IBOutlet var mWireNetNameTextField : EBTextObserverField?
  @IBOutlet var mWireRenameNetButton : EBButton?
  @IBOutlet var mWireRenameNetWithUniqueNewNameButton : EBButton?

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  var mController_mDuplicateSelectedComponentsActionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRemoveSelectedComponentsActionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mChangePackageOfSelectedComponentsActionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mChangeValueOfSelectedComponentsActionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRenameComponentButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRemoveNetClassButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mEditNetClassButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mEditFontButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mUpdateFontButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRemoveFontButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mResetFontVersionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mResetDeviceVersionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRemoveDeviceButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mEditDeviceButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mExportDeviceButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mUpdateDeviceButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRemoveSheetButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mWireRenameNetButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mWireRenameNetWithUniqueNewNameButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mSchematicWireMergeSubnetButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mSchematicWireInsulateSubnetButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mSchematicsLabelRenameNetButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mSchematicLabelMergeSubnetButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mSchematicLabelInsulateSubnetButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRenameComponentFromComponentSymbolButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRenameNetInNetTabButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mSelectNetClassInNetTabButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mNetWarningImageView_hidden : MultipleBindingController_hidden? = nil
  var mController_mNetWarningTextField_hidden : MultipleBindingController_hidden? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: componentController
    self.componentController.addExplorer (name: "componentController", y:&y, view:view)
  //--- Array controller property: netClassController
    self.netClassController.addExplorer (name: "netClassController", y:&y, view:view)
  //--- Array controller property: projectFontController
    self.projectFontController.addExplorer (name: "projectFontController", y:&y, view:view)
  //--- Array controller property: projectDeviceController
    self.projectDeviceController.addExplorer (name: "projectDeviceController", y:&y, view:view)
  //--- Array controller property: schematicObjectsController
    self.schematicObjectsController.addExplorer (name: "schematicObjectsController", y:&y, view:view)
  //--- Selection controller property: wireInSchematicSelectionController
    self.wireInSchematicSelectionController.addExplorer (name: "wireInSchematicSelectionController", y:&y, view:view)
  //--- Selection controller property: ncInSchematicSelectionController
    self.ncInSchematicSelectionController.addExplorer (name: "ncInSchematicSelectionController", y:&y, view:view)
  //--- Selection controller property: commentInSchematicSelectionController
    self.commentInSchematicSelectionController.addExplorer (name: "commentInSchematicSelectionController", y:&y, view:view)
  //--- Selection controller property: schematicLabelSelectionController
    self.schematicLabelSelectionController.addExplorer (name: "schematicLabelSelectionController", y:&y, view:view)
  //--- Selection controller property: componentSymbolSelectionController
    self.componentSymbolSelectionController.addExplorer (name: "componentSymbolSelectionController", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName : NSNib.Name {
    return NSNib.Name ("ProjectDocument")
  }
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "ProjectRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : ProjectRoot { return self.mRootObject as! ProjectRoot }

  //····················································································································
  //    check outlet connections
  //····················································································································

  private func checkOutletConnections () {
    checkOutletConnection (self.mAddBottomSchematicHotKeyTextField, "mAddBottomSchematicHotKeyTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mAddCommentButton, "mAddCommentButton", CanariDragSourceButton.self, #file, #line)
    checkOutletConnection (self.mAddComponentButton, "mAddComponentButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mAddFontButton, "mAddFontButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mAddLeftLabelSchematicHotKeyTextField, "mAddLeftLabelSchematicHotKeyTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mAddNCSchematicHotKeyTextField, "mAddNCSchematicHotKeyTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mAddNetClassButton, "mAddNetClassButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mAddNetClassErrorMessageTextField, "mAddNetClassErrorMessageTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mAddNetClassPanel, "mAddNetClassPanel", NSPanel.self, #file, #line)
    checkOutletConnection (self.mAddNetClassTextField, "mAddNetClassTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mAddNetClassValidationButton, "mAddNetClassValidationButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mAddRightLabelSchematicHotKeyTextField, "mAddRightLabelSchematicHotKeyTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mAddTopLabelSchematicHotKeyTextField, "mAddTopLabelSchematicHotKeyTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mAddWireButton, "mAddWireButton", CanariDragSourceButton.self, #file, #line)
    checkOutletConnection (self.mAddWirePointSchematicHotKeyTextField, "mAddWirePointSchematicHotKeyTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mBaseSchematicsInspectorView, "mBaseSchematicsInspectorView", NSView.self, #file, #line)
    checkOutletConnection (self.mBoardPageView, "mBoardPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mChangeComponentValueComboxBox, "mChangeComponentValueComboxBox", CanariComboBox.self, #file, #line)
    checkOutletConnection (self.mChangePackageComponentListTextField, "mChangePackageComponentListTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mChangePackageOfSelectedComponentsActionButton, "mChangePackageOfSelectedComponentsActionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mChangePackagePanel, "mChangePackagePanel", NSPanel.self, #file, #line)
    checkOutletConnection (self.mChangePackagePopUpButton, "mChangePackagePopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mChangeValueComponentListTextField, "mChangeValueComponentListTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mChangeValueOfSelectedComponentsActionButton, "mChangeValueOfSelectedComponentsActionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mChangeValuePanel, "mChangeValuePanel", NSPanel.self, #file, #line)
    checkOutletConnection (self.mChangeValueValidationButton, "mChangeValueValidationButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mCommentInSchematicsInspectorView, "mCommentInSchematicsInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mCommentInSchematicsTextField, "mCommentInSchematicsTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mComponentCountTextField, "mComponentCountTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mComponentSymbolComponentNameTextField, "mComponentSymbolComponentNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mComponentSymbolDeviceNameTextField, "mComponentSymbolDeviceNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mComponentSymbolInspectorView, "mComponentSymbolInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mComponentSymbolInstanceNameTextField, "mComponentSymbolInstanceNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mComponentSymbolShowComponentValueSwitch, "mComponentSymbolShowComponentValueSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mComponentSymbolTypeNameTextField, "mComponentSymbolTypeNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mComponentSymbolValueTextField, "mComponentSymbolValueTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mComponentTableView, "mComponentTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mComponentsPageView, "mComponentsPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mConnectSchematicHotKeyTextField, "mConnectSchematicHotKeyTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mCurrentComponentNameTextField, "mCurrentComponentNameTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mDeviceLibraryTableView, "mDeviceLibraryTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mDevicePackageTableView, "mDevicePackageTableView", StringArrayTableView.self, #file, #line)
    checkOutletConnection (self.mDeviceSymbolTableView, "mDeviceSymbolTableView", TwoStringArrayTableView.self, #file, #line)
    checkOutletConnection (self.mDisconnectSchematicHotKeyTextField, "mDisconnectSchematicHotKeyTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mDuplicateSelectedComponentsActionButton, "mDuplicateSelectedComponentsActionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mEditDeviceButton, "mEditDeviceButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mEditFontButton, "mEditFontButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mEditNetClassButton, "mEditNetClassButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mExportDeviceButton, "mExportDeviceButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mFontLibraryTableView, "mFontLibraryTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mGridZoomSchematicsInspectorView, "mGridZoomSchematicsInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mHotKeysSchematicInspectorView, "mHotKeysSchematicInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mInconsistentSchematicErrorPanel, "mInconsistentSchematicErrorPanel", NSPanel.self, #file, #line)
    checkOutletConnection (self.mInconsistentSchematicErrorTextView, "mInconsistentSchematicErrorTextView", NSTextView.self, #file, #line)
    checkOutletConnection (self.mLibraryPageView, "mLibraryPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mMasterView, "mMasterView", NSView.self, #file, #line)
    checkOutletConnection (self.mMergeNetDialog, "mMergeNetDialog", NSPanel.self, #file, #line)
    checkOutletConnection (self.mMergeNetPopUpButton, "mMergeNetPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mMergeSeveralSubnetsPanel, "mMergeSeveralSubnetsPanel", NSPanel.self, #file, #line)
    checkOutletConnection (self.mMergeSeveralSubnetsPopUpButton, "mMergeSeveralSubnetsPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mNCInSchematicsInspectorView, "mNCInSchematicsInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mNCRotationSegmentedControl, "mNCRotationSegmentedControl", CanariQuadrantSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mNetClassColorWell, "mNetClassColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mNetClassHoleDiameterDimensionTextField, "mNetClassHoleDiameterDimensionTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mNetClassHoleDiameterUnitPopUpButton, "mNetClassHoleDiameterUnitPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mNetClassPadDiameterDimensionTextField, "mNetClassPadDiameterDimensionTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mNetClassPadDiameterUnitPopUpButton, "mNetClassPadDiameterUnitPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mNetClassTableView, "mNetClassTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mNetClassWidthDimensionTextField, "mNetClassWidthDimensionTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mNetClassWidthUnitPopUpButton, "mNetClassWidthUnitPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mNetClassesPageView, "mNetClassesPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mNetCountTextField, "mNetCountTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mNetInfoTableView, "mNetInfoTableView", CanariNetInfoTableView.self, #file, #line)
    checkOutletConnection (self.mNetListPageView, "mNetListPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mNetWarningImageView, "mNetWarningImageView", NSImageView.self, #file, #line)
    checkOutletConnection (self.mNetWarningTextField, "mNetWarningTextField", EBIntObserverField.self, #file, #line)
    checkOutletConnection (self.mNewComponentFromDevicePullDownButton, "mNewComponentFromDevicePullDownButton", CanariNewComponentFromDevicePullDownButton.self, #file, #line)
    checkOutletConnection (self.mNewSheetButton, "mNewSheetButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mOpenSetDateDialogButton, "mOpenSetDateDialogButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mPageSegmentedControl, "mPageSegmentedControl", CanariSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mPinPadAssignmentTableView, "mPinPadAssignmentTableView", ThreeStringArrayTableView.self, #file, #line)
    checkOutletConnection (self.mProductPageView, "mProductPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mRemoveDeviceButton, "mRemoveDeviceButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRemoveFontButton, "mRemoveFontButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRemoveNetClassButton, "mRemoveNetClassButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRemoveSelectedComponentsActionButton, "mRemoveSelectedComponentsActionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRemoveSheetButton, "mRemoveSheetButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRemoveWirePointSchematicHotKeyTextField, "mRemoveWirePointSchematicHotKeyTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mRenameComponentButton, "mRenameComponentButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRenameComponentErrorMessageTextField, "mRenameComponentErrorMessageTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mRenameComponentFromComponentSymbolButton, "mRenameComponentFromComponentSymbolButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRenameComponentIndexesPopUpButton, "mRenameComponentIndexesPopUpButton", NSPopUpButton.self, #file, #line)
    checkOutletConnection (self.mRenameComponentPanel, "mRenameComponentPanel", NSPanel.self, #file, #line)
    checkOutletConnection (self.mRenameComponentPrefixComboxBox, "mRenameComponentPrefixComboxBox", CanariComboBox.self, #file, #line)
    checkOutletConnection (self.mRenameComponentValidationButton, "mRenameComponentValidationButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mRenameNetErrorTextField, "mRenameNetErrorTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mRenameNetInNetTabButton, "mRenameNetInNetTabButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRenameNetOkButton, "mRenameNetOkButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRenameNetPanel, "mRenameNetPanel", NSPanel.self, #file, #line)
    checkOutletConnection (self.mRenameNetTextField, "mRenameNetTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mResetDeviceVersionButton, "mResetDeviceVersionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mResetFontVersionButton, "mResetFontVersionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSchematicLabelInsulateSubnetButton, "mSchematicLabelInsulateSubnetButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSchematicLabelMergeSubnetButton, "mSchematicLabelMergeSubnetButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSchematicLabelNetClassButton, "mSchematicLabelNetClassButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSchematicStatusImageViewInToolbar, "mSchematicStatusImageViewInToolbar", EBImageObserverView.self, #file, #line)
    checkOutletConnection (self.mSchematicWireInsulateSubnetButton, "mSchematicWireInsulateSubnetButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSchematicWireMergeSubnetButton, "mSchematicWireMergeSubnetButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSchematicWireNetClassButton, "mSchematicWireNetClassButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSchematicsDatePicker, "mSchematicsDatePicker", NSDatePicker.self, #file, #line)
    checkOutletConnection (self.mSchematicsGridDisplayFactorPopUpButton, "mSchematicsGridDisplayFactorPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSchematicsGridStylePopUpButton, "mSchematicsGridStylePopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSchematicsHorizontalFlipSwitch, "mSchematicsHorizontalFlipSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mSchematicsInspectorSegmentedControl, "mSchematicsInspectorSegmentedControl", CanariSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mSchematicsLabelInspectorView, "mSchematicsLabelInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mSchematicsLabelNetNameTextField, "mSchematicsLabelNetNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mSchematicsLabelRenameNetButton, "mSchematicsLabelRenameNetButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSchematicsLabelRotationSegmentedControl, "mSchematicsLabelRotationSegmentedControl", CanariQuadrantSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mSchematicsPageView, "mSchematicsPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mSchematicsScrollView, "mSchematicsScrollView", EBScrollView.self, #file, #line)
    checkOutletConnection (self.mSchematicsSheetOrientationSegmentedControl, "mSchematicsSheetOrientationSegmentedControl", CanariEnumSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mSchematicsSheetsInspectorView, "mSchematicsSheetsInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mSchematicsTitleTextField, "mSchematicsTitleTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mSchematicsVersionTextField, "mSchematicsVersionTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mSchematicsVerticalFlipSwitch, "mSchematicsVerticalFlipSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mSchematicsView, "mSchematicsView", EBGraphicView.self, #file, #line)
    checkOutletConnection (self.mSchematicsWireInspectorView, "mSchematicsWireInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mSelectNetClassInNetTabButton, "mSelectNetClassInNetTabButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSelectNetClassPanel, "mSelectNetClassPanel", NSPanel.self, #file, #line)
    checkOutletConnection (self.mSelectNetClassPopUpButton, "mSelectNetClassPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSelectedObjectsSchematicsInspectorView, "mSelectedObjectsSchematicsInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mSelectedSheetTitleTextField, "mSelectedSheetTitleTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mSetDatePanel, "mSetDatePanel", NSPanel.self, #file, #line)
    checkOutletConnection (self.mSetDateToNowButton, "mSetDateToNowButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSheetDownButton, "mSheetDownButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSheetPopUpButton, "mSheetPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSheetUpButton, "mSheetUpButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSymbolMirrorSwitch, "mSymbolMirrorSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mSymbolRotationSegmentedControl, "mSymbolRotationSegmentedControl", CanariQuadrantSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mUnplacedSymbolsSchematicsInspectorView, "mUnplacedSymbolsSchematicsInspectorView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mUnplacedSymbolsTableView, "mUnplacedSymbolsTableView", CanariDragSourceTableView.self, #file, #line)
    checkOutletConnection (self.mUnplacedSymbolsTextField, "mUnplacedSymbolsTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mUpdateDeviceButton, "mUpdateDeviceButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mUpdateFontButton, "mUpdateFontButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mWireNetNameTextField, "mWireNetNameTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mWireRenameNetButton, "mWireRenameNetButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mWireRenameNetWithUniqueNewNameButton, "mWireRenameNetWithUniqueNewNameButton", EBButton.self, #file, #line)
   }
  
  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
  //--------------------------- Outlet checking
    self.checkOutletConnections ()
  //--- Array controller property: componentController
    self.componentController.bind_model (self.rootObject.mComponents_property, self.ebUndoManager)
  //--- Array controller property: netClassController
    self.netClassController.bind_model (self.rootObject.mNetClasses_property, self.ebUndoManager)
  //--- Array controller property: projectFontController
    self.projectFontController.bind_model (self.rootObject.mFonts_property, self.ebUndoManager)
  //--- Array controller property: projectDeviceController
    self.projectDeviceController.bind_model (self.rootObject.mDevices_property, self.ebUndoManager)
  //--- Array controller property: schematicObjectsController
    self.schematicObjectsController.bind_model (self.rootObject.selectedSheetObjects_property, self.ebUndoManager)
  //--- Selection controller property: wireInSchematicSelectionController
    self.wireInSchematicSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property, file: #file, line: #line)
  //--- Selection controller property: ncInSchematicSelectionController
    self.ncInSchematicSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property, file: #file, line: #line)
  //--- Selection controller property: commentInSchematicSelectionController
    self.commentInSchematicSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property, file: #file, line: #line)
  //--- Selection controller property: schematicLabelSelectionController
    self.schematicLabelSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property, file: #file, line: #line)
  //--- Selection controller property: componentSymbolSelectionController
    self.componentSymbolSelectionController.bind_selection (model: self.schematicObjectsController.selectedArray_property, file: #file, line: #line)
  //--- Atomic property: componentCount
    self.componentCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.mComponents_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.mComponents_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectDocument_componentCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mComponents_property.count_property.addEBObserver (self.componentCount_property)
  //--- Atomic property: netCount
    self.netCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.netsDescription_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.netsDescription_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectDocument_netCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.netsDescription_property.addEBObserver (self.netCount_property)
  //--- Atomic property: canRemoveNetClasses
    self.canRemoveNetClasses_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.rootObject.mNetClasses_property.count_property_selection.kind ()
        kind &= unwSelf.netClassController.selectedArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.mNetClasses_property.count_property_selection, unwSelf.netClassController.selectedArray_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectDocument_canRemoveNetClasses (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.mNetClasses_property.count_property.addEBObserver (self.canRemoveNetClasses_property)
    self.netClassController.selectedArray_property.addEBObserverOf_canRemove (self.canRemoveNetClasses_property)
  //--- Atomic property: selectedDevicePackageNames
    self.selectedDevicePackageNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.projectDeviceController.selectedArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.projectDeviceController.selectedArray_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectDocument_selectedDevicePackageNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_packageNames (self.selectedDevicePackageNames_property)
  //--- Atomic property: selectedDeviceSymbolNames
    self.selectedDeviceSymbolNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.projectDeviceController.selectedArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.projectDeviceController.selectedArray_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectDocument_selectedDeviceSymbolNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_symbolAndTypesNames (self.selectedDeviceSymbolNames_property)
  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.projectDeviceController.selectedArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.projectDeviceController.selectedArray_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectDocument_pinPadAssignments (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
  //--- Atomic property: unplacedSymbolsCount
    self.unplacedSymbolsCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.unplacedSymbols_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.unplacedSymbols_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectDocument_unplacedSymbolsCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unplacedSymbols_property.addEBObserver (self.unplacedSymbolsCount_property)
  //--- Atomic property: unplacedSymbolsCountString
    self.unplacedSymbolsCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.unplacedSymbolsCount_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.unplacedSymbolsCount_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectDocument_unplacedSymbolsCountString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbolsCount_property.addEBObserver (self.unplacedSymbolsCountString_property)
  //--- Atomic property: netCountString
    self.netCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.netsDescription_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.netsDescription_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectDocument_netCountString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.netsDescription_property.addEBObserver (self.netCountString_property)
  //--- Atomic property: canChangePackage
    self.canChangePackage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.componentController.selectedArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.componentController.selectedArray_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectDocument_canChangePackage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.componentController.selectedArray_property.addEBObserverOf_availablePackages (self.canChangePackage_property)
  //--- Atomic property: canRemoveSelectedDevices
    self.canRemoveSelectedDevices_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.projectDeviceController.selectedArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.projectDeviceController.selectedArray_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectDocument_canRemoveSelectedDevices (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.projectDeviceController.selectedArray_property.addEBObserverOf_canRemove (self.canRemoveSelectedDevices_property)
    self.componentController.bind_tableView (self.mComponentTableView, file: #file, line: #line)
    self.netClassController.bind_tableView (self.mNetClassTableView, file: #file, line: #line)
    self.projectFontController.bind_tableView (self.mFontLibraryTableView, file: #file, line: #line)
    self.projectDeviceController.bind_tableView (self.mDeviceLibraryTableView, file: #file, line: #line)
    self.schematicObjectsController.bind_ebView (self.mSchematicsView)
  //--------------------------- Install regular bindings
    self.mPageSegmentedControl?.bind_selectedPage (self.rootObject.mSelectedPageIndex_property, file: #file, line: #line)
    self.mSchematicStatusImageViewInToolbar?.bind_image (self.rootObject.schematicStatusImage_property, file: #file, line: #line)
    self.mSchematicStatusImageViewInToolbar?.bind_tooltip (self.rootObject.schematicStatusMessage_property, file: #file, line: #line)
    self.mNewComponentFromDevicePullDownButton?.bind_deviceNames (self.rootObject.deviceNames_property, file: #file, line: #line)
    self.mComponentCountTextField?.bind_valueObserver (self.componentCount_property, file: #file, line: #line)
    self.mDevicePackageTableView?.bind_array (self.selectedDevicePackageNames_property, file: #file, line: #line)
    self.mDeviceSymbolTableView?.bind_array (self.selectedDeviceSymbolNames_property, file: #file, line: #line)
    self.mPinPadAssignmentTableView?.bind_array (self.pinPadAssignments_property, file: #file, line: #line)
    self.mSchematicsInspectorSegmentedControl?.bind_selectedPage (self.rootObject.mSelectedSchematicInspector_property, file: #file, line: #line)
    self.mUnplacedSymbolsTableView?.bind_models (self.rootObject.unplacedSymbols_property, file: #file, line: #line)
    self.mUnplacedSymbolsTextField?.bind_valueObserver (self.unplacedSymbolsCountString_property, file: #file, line: #line)
    self.mSchematicsHorizontalFlipSwitch?.bind_value (self.rootObject.mSchematicHorizontalFlip_property, file: #file, line: #line)
    self.mSchematicsVerticalFlipSwitch?.bind_value (self.rootObject.mSchematicVerticalFlip_property, file: #file, line: #line)
    self.mSchematicsGridStylePopUpButton?.bind_selectedIndex (self.rootObject.mSchematicGridStyle_property, file: #file, line: #line)
    self.mSchematicsGridDisplayFactorPopUpButton?.bind_selectedTag (self.rootObject.mSchematicGridDisplayFactor_property, file: #file, line: #line)
    self.mSchematicsTitleTextField?.bind_value (self.rootObject.mSchematicTitle_property, file: #file, line: #line, sendContinously:true)
    self.mSchematicsVersionTextField?.bind_value (self.rootObject.mSchematicVersion_property, file: #file, line: #line, sendContinously:true)
    self.mSchematicsSheetOrientationSegmentedControl?.bind_selectedSegment (self.rootObject.mSchematicSheetOrientation_property, file: #file, line: #line)
    self.mSelectedSheetTitleTextField?.bind_value (self.rootObject.selectedSheetTitle_property, file: #file, line: #line, sendContinously:true)
    self.mSchematicsView?.bind_underObjectsDisplay (self.rootObject.schematicBackgroundDisplay_property, file: #file, line: #line)
    self.mSchematicsView?.bind_overObjectsDisplay (self.rootObject.connectedPoints_property, file: #file, line: #line)
    self.mSchematicsView?.bind_horizontalFlip (self.rootObject.mSchematicHorizontalFlip_property, file: #file, line: #line)
    self.mSchematicsView?.bind_verticalFlip (self.rootObject.mSchematicVerticalFlip_property, file: #file, line: #line)
    self.mSchematicsView?.bind_gridStyle (self.rootObject.mSchematicGridStyle_property, file: #file, line: #line)
    self.mSchematicsView?.bind_gridDisplayFactor (self.rootObject.mSchematicGridDisplayFactor_property, file: #file, line: #line)
    self.mSchematicsView?.bind_gridLineColor (g_Preferences!.lineColorOfSymbolGrid_property, file: #file, line: #line)
    self.mSchematicsView?.bind_gridCrossColor (g_Preferences!.crossColorOfSymbolGrid_property, file: #file, line: #line)
    self.mSchematicsView?.bind_zoom (self.rootObject.mSchematicZoom_property, file: #file, line: #line)
    self.mWireNetNameTextField?.bind_valueObserver (self.wireInSchematicSelectionController.netName_property, file: #file, line: #line)
    self.mNCRotationSegmentedControl?.bind_quadrant (self.ncInSchematicSelectionController.mOrientation_property, file: #file, line: #line)
    self.mCommentInSchematicsTextField?.bind_value (self.commentInSchematicSelectionController.mComment_property, file: #file, line: #line, sendContinously:true)
    self.mSchematicsLabelRotationSegmentedControl?.bind_quadrant (self.schematicLabelSelectionController.mOrientation_property, file: #file, line: #line)
    self.mSchematicsLabelNetNameTextField?.bind_valueObserver (self.schematicLabelSelectionController.netName_property, file: #file, line: #line)
    self.mComponentSymbolShowComponentValueSwitch?.bind_value (self.componentSymbolSelectionController.mDisplayComponentValue_property, file: #file, line: #line)
    self.mComponentSymbolComponentNameTextField?.bind_valueObserver (self.componentSymbolSelectionController.componentName_property, file: #file, line: #line)
    self.mComponentSymbolValueTextField?.bind_value (self.componentSymbolSelectionController.componentValueProxy_property, file: #file, line: #line, sendContinously:true)
    self.mComponentSymbolDeviceNameTextField?.bind_valueObserver (self.componentSymbolSelectionController.deviceName_property, file: #file, line: #line)
    self.mComponentSymbolTypeNameTextField?.bind_valueObserver (self.componentSymbolSelectionController.mSymbolTypeName_property, file: #file, line: #line)
    self.mComponentSymbolInstanceNameTextField?.bind_valueObserver (self.componentSymbolSelectionController.mSymbolInstanceName_property, file: #file, line: #line)
    self.mSymbolRotationSegmentedControl?.bind_quadrant (self.componentSymbolSelectionController.mRotation_property, file: #file, line: #line)
    self.mSymbolMirrorSwitch?.bind_value (self.componentSymbolSelectionController.mMirror_property, file: #file, line: #line)
    self.mNetInfoTableView?.bind_netInfo (self.rootObject.netsDescription_property, file: #file, line: #line)
    self.mNetCountTextField?.bind_valueObserver (self.netCountString_property, file: #file, line: #line)
    self.mNetWarningTextField?.bind_valueObserver (self.rootObject.netWarningCount_property, file: #file, line: #line, autoFormatter:true)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.componentController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mDuplicateSelectedComponentsActionButton
      )
      self.componentController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mDuplicateSelectedComponentsActionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.componentController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mRemoveSelectedComponentsActionButton
      )
      self.componentController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mRemoveSelectedComponentsActionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return self.canChangePackage_property_selection
        },
        outlet: self.mChangePackageOfSelectedComponentsActionButton
      )
      self.canChangePackage_property.addEBObserver (controller)
      self.mController_mChangePackageOfSelectedComponentsActionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.componentController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mChangeValueOfSelectedComponentsActionButton
      )
      self.componentController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mChangeValueOfSelectedComponentsActionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.componentController.selectedArray_property.count_property_selection == EBSelection.single (1))
        },
        outlet: self.mRenameComponentButton
      )
      self.componentController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mRenameComponentButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return self.canRemoveNetClasses_property_selection
        },
        outlet: self.mRemoveNetClassButton
      )
      self.canRemoveNetClasses_property.addEBObserver (controller)
      self.mController_mRemoveNetClassButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.netClassController.selectedArray_property.count_property_selection == EBSelection.single (1))
        },
        outlet: self.mEditNetClassButton
      )
      self.netClassController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mEditNetClassButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.projectFontController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mEditFontButton
      )
      self.projectFontController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mEditFontButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.projectFontController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mUpdateFontButton
      )
      self.projectFontController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mUpdateFontButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.projectFontController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mRemoveFontButton
      )
      self.projectFontController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mRemoveFontButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.projectFontController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mResetFontVersionButton
      )
      self.projectFontController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mResetFontVersionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.projectDeviceController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mResetDeviceVersionButton
      )
      self.projectDeviceController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mResetDeviceVersionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return self.canRemoveSelectedDevices_property_selection
        },
        outlet: self.mRemoveDeviceButton
      )
      self.canRemoveSelectedDevices_property.addEBObserver (controller)
      self.mController_mRemoveDeviceButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.projectDeviceController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mEditDeviceButton
      )
      self.projectDeviceController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mEditDeviceButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.projectDeviceController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mExportDeviceButton
      )
      self.projectDeviceController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mExportDeviceButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.projectDeviceController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mUpdateDeviceButton
      )
      self.projectDeviceController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mUpdateDeviceButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.rootObject.mSheets_property.count_property_selection > EBSelection.single (1))
        },
        outlet: self.mRemoveSheetButton
      )
      self.rootObject.mSheets_property.count_property.addEBObserver (controller)
      self.mController_mRemoveSheetButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return ((self.wireInSchematicSelectionController.selectedArray_property.count_property_selection == EBSelection.single (1)) && self.wireInSchematicSelectionController.hasNet_property_selection)
        },
        outlet: self.mWireRenameNetButton
      )
      self.wireInSchematicSelectionController.hasNet_property.addEBObserver (controller)
      self.wireInSchematicSelectionController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mWireRenameNetButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return ((self.wireInSchematicSelectionController.selectedArray_property.count_property_selection > EBSelection.single (0)) && self.wireInSchematicSelectionController.hasNet_property_selection)
        },
        outlet: self.mWireRenameNetWithUniqueNewNameButton
      )
      self.wireInSchematicSelectionController.hasNet_property.addEBObserver (controller)
      self.wireInSchematicSelectionController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mWireRenameNetWithUniqueNewNameButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return ((self.wireInSchematicSelectionController.selectedArray_property.count_property_selection == EBSelection.single (1)) && self.wireInSchematicSelectionController.hasNet_property_selection)
        },
        outlet: self.mSchematicWireMergeSubnetButton
      )
      self.wireInSchematicSelectionController.hasNet_property.addEBObserver (controller)
      self.wireInSchematicSelectionController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mSchematicWireMergeSubnetButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return ((self.wireInSchematicSelectionController.selectedArray_property.count_property_selection == EBSelection.single (1)) && self.wireInSchematicSelectionController.hasNet_property_selection)
        },
        outlet: self.mSchematicWireInsulateSubnetButton
      )
      self.wireInSchematicSelectionController.hasNet_property.addEBObserver (controller)
      self.wireInSchematicSelectionController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mSchematicWireInsulateSubnetButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.schematicLabelSelectionController.selectedArray_property.count_property_selection == EBSelection.single (1))
        },
        outlet: self.mSchematicsLabelRenameNetButton
      )
      self.schematicLabelSelectionController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mSchematicsLabelRenameNetButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.schematicLabelSelectionController.selectedArray_property.count_property_selection == EBSelection.single (1))
        },
        outlet: self.mSchematicLabelMergeSubnetButton
      )
      self.schematicLabelSelectionController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mSchematicLabelMergeSubnetButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.schematicLabelSelectionController.selectedArray_property.count_property_selection == EBSelection.single (1))
        },
        outlet: self.mSchematicLabelInsulateSubnetButton
      )
      self.schematicLabelSelectionController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mSchematicLabelInsulateSubnetButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.schematicObjectsController.selectedArray_property.count_property_selection == EBSelection.single (1))
        },
        outlet: self.mRenameComponentFromComponentSymbolButton
      )
      self.schematicObjectsController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mRenameComponentFromComponentSymbolButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.netCount_property_selection > EBSelection.single (0))
        },
        outlet: self.mRenameNetInNetTabButton
      )
      self.netCount_property.addEBObserver (controller)
      self.mController_mRenameNetInNetTabButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.netCount_property_selection > EBSelection.single (0))
        },
        outlet: self.mSelectNetClassInNetTabButton
      )
      self.netCount_property.addEBObserver (controller)
      self.mController_mSelectNetClassInNetTabButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return (self.rootObject.netWarningCount_property_selection == EBSelection.single (0))
        },
        outlet: self.mNetWarningImageView
      )
      self.rootObject.netWarningCount_property.addEBObserver (controller)
      self.mController_mNetWarningImageView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return (self.rootObject.netWarningCount_property_selection == EBSelection.single (0))
        },
        outlet: self.mNetWarningTextField
      )
      self.rootObject.netWarningCount_property.addEBObserver (controller)
      self.mController_mNetWarningTextField_hidden = controller
    }
  //--------------------------- Set targets / actions
    self.mAddComponentButton?.target = self
    self.mAddComponentButton?.action = #selector (ProjectDocument.addComponentAction (_:))
    self.mDuplicateSelectedComponentsActionButton?.target = self
    self.mDuplicateSelectedComponentsActionButton?.action = #selector (ProjectDocument.duplicateSelectedComponentsAction (_:))
    self.mRemoveSelectedComponentsActionButton?.target = self
    self.mRemoveSelectedComponentsActionButton?.action = #selector (ProjectDocument.removeSelectedComponentsAction (_:))
    self.mChangePackageOfSelectedComponentsActionButton?.target = self
    self.mChangePackageOfSelectedComponentsActionButton?.action = #selector (ProjectDocument.changePackageOfSelectedComponentsAction (_:))
    self.mChangeValueOfSelectedComponentsActionButton?.target = self
    self.mChangeValueOfSelectedComponentsActionButton?.action = #selector (ProjectDocument.changeValueOfSelectedComponentsAction (_:))
    self.mAddNetClassButton?.target = self
    self.mAddNetClassButton?.action = #selector (ProjectDocument.addNetClassAction (_:))
    self.mRemoveNetClassButton?.target = self
    self.mRemoveNetClassButton?.action = #selector (ProjectDocument.removeNetClassAction (_:))
    self.mEditNetClassButton?.target = self
    self.mEditNetClassButton?.action = #selector (ProjectDocument.editNetClassAction (_:))
    self.mAddFontButton?.target = self
    self.mAddFontButton?.action = #selector (ProjectDocument.addFontAction (_:))
    self.mEditFontButton?.target = self
    self.mEditFontButton?.action = #selector (ProjectDocument.editFontAction (_:))
    self.mUpdateFontButton?.target = self
    self.mUpdateFontButton?.action = #selector (ProjectDocument.updateFontAction (_:))
    self.mRemoveFontButton?.target = self
    self.mRemoveFontButton?.action = #selector (ProjectDocument.removeFontAction (_:))
    self.mResetFontVersionButton?.target = self
    self.mResetFontVersionButton?.action = #selector (ProjectDocument.resetFontVersionAction (_:))
    self.mResetDeviceVersionButton?.target = self
    self.mResetDeviceVersionButton?.action = #selector (ProjectDocument.resetDeviceVersionAction (_:))
    self.mRemoveDeviceButton?.target = self
    self.mRemoveDeviceButton?.action = #selector (ProjectDocument.removeDeviceAction (_:))
    self.mEditDeviceButton?.target = self
    self.mEditDeviceButton?.action = #selector (ProjectDocument.editDeviceAction (_:))
    self.mExportDeviceButton?.target = self
    self.mExportDeviceButton?.action = #selector (ProjectDocument.exportDeviceAction (_:))
    self.mUpdateDeviceButton?.target = self
    self.mUpdateDeviceButton?.action = #selector (ProjectDocument.updateDeviceAction (_:))
    self.mNewSheetButton?.target = self
    self.mNewSheetButton?.action = #selector (ProjectDocument.newSheetAction (_:))
    self.mRemoveSheetButton?.target = self
    self.mRemoveSheetButton?.action = #selector (ProjectDocument.removeSheetAction (_:))
    self.mSetDateToNowButton?.target = self
    self.mSetDateToNowButton?.action = #selector (ProjectDocument.setDateToNowAction (_:))
    self.mOpenSetDateDialogButton?.target = self
    self.mOpenSetDateDialogButton?.action = #selector (ProjectDocument.openSetDateDialogAction (_:))
  //--------------------------- Read documentFilePath model 
    self.documentFilePath_property.mReadModelFunction = { [weak self] in
      if let r = self?.computeTransient_documentFilePath () {
        return .single (r)
      }else{
        return .empty
      }
    }

  }

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Unbind regular bindings
    self.mPageSegmentedControl?.unbind_selectedPage ()
    self.mSchematicStatusImageViewInToolbar?.unbind_image ()
    self.mSchematicStatusImageViewInToolbar?.unbind_tooltip ()
    self.mNewComponentFromDevicePullDownButton?.unbind_deviceNames ()
    self.mComponentCountTextField?.unbind_valueObserver ()
    self.mDevicePackageTableView?.unbind_array ()
    self.mDeviceSymbolTableView?.unbind_array ()
    self.mPinPadAssignmentTableView?.unbind_array ()
    self.mSchematicsInspectorSegmentedControl?.unbind_selectedPage ()
    self.mUnplacedSymbolsTableView?.unbind_models ()
    self.mUnplacedSymbolsTextField?.unbind_valueObserver ()
    self.mSchematicsHorizontalFlipSwitch?.unbind_value ()
    self.mSchematicsVerticalFlipSwitch?.unbind_value ()
    self.mSchematicsGridStylePopUpButton?.unbind_selectedIndex ()
    self.mSchematicsGridDisplayFactorPopUpButton?.unbind_selectedTag ()
    self.mSchematicsTitleTextField?.unbind_value ()
    self.mSchematicsVersionTextField?.unbind_value ()
    self.mSchematicsSheetOrientationSegmentedControl?.unbind_selectedSegment ()
    self.mSelectedSheetTitleTextField?.unbind_value ()
    self.mSchematicsView?.unbind_underObjectsDisplay ()
    self.mSchematicsView?.unbind_overObjectsDisplay ()
    self.mSchematicsView?.unbind_horizontalFlip ()
    self.mSchematicsView?.unbind_verticalFlip ()
    self.mSchematicsView?.unbind_gridStyle ()
    self.mSchematicsView?.unbind_gridDisplayFactor ()
    self.mSchematicsView?.unbind_gridLineColor ()
    self.mSchematicsView?.unbind_gridCrossColor ()
    self.mSchematicsView?.unbind_zoom ()
    self.mWireNetNameTextField?.unbind_valueObserver ()
    self.mNCRotationSegmentedControl?.unbind_quadrant ()
    self.mCommentInSchematicsTextField?.unbind_value ()
    self.mSchematicsLabelRotationSegmentedControl?.unbind_quadrant ()
    self.mSchematicsLabelNetNameTextField?.unbind_valueObserver ()
    self.mComponentSymbolShowComponentValueSwitch?.unbind_value ()
    self.mComponentSymbolComponentNameTextField?.unbind_valueObserver ()
    self.mComponentSymbolValueTextField?.unbind_value ()
    self.mComponentSymbolDeviceNameTextField?.unbind_valueObserver ()
    self.mComponentSymbolTypeNameTextField?.unbind_valueObserver ()
    self.mComponentSymbolInstanceNameTextField?.unbind_valueObserver ()
    self.mSymbolRotationSegmentedControl?.unbind_quadrant ()
    self.mSymbolMirrorSwitch?.unbind_value ()
    self.mNetInfoTableView?.unbind_netInfo ()
    self.mNetCountTextField?.unbind_valueObserver ()
    self.mNetWarningTextField?.unbind_valueObserver ()
  //--------------------------- Unbind multiple bindings
    self.componentController.selectedArray_property.count_property.removeEBObserver (self.mController_mDuplicateSelectedComponentsActionButton_enabled!)
    self.mController_mDuplicateSelectedComponentsActionButton_enabled = nil
    self.componentController.selectedArray_property.count_property.removeEBObserver (self.mController_mRemoveSelectedComponentsActionButton_enabled!)
    self.mController_mRemoveSelectedComponentsActionButton_enabled = nil
    self.canChangePackage_property.removeEBObserver (self.mController_mChangePackageOfSelectedComponentsActionButton_enabled!)
    self.mController_mChangePackageOfSelectedComponentsActionButton_enabled = nil
    self.componentController.selectedArray_property.count_property.removeEBObserver (self.mController_mChangeValueOfSelectedComponentsActionButton_enabled!)
    self.mController_mChangeValueOfSelectedComponentsActionButton_enabled = nil
    self.componentController.selectedArray_property.count_property.removeEBObserver (self.mController_mRenameComponentButton_enabled!)
    self.mController_mRenameComponentButton_enabled = nil
    self.canRemoveNetClasses_property.removeEBObserver (self.mController_mRemoveNetClassButton_enabled!)
    self.mController_mRemoveNetClassButton_enabled = nil
    self.netClassController.selectedArray_property.count_property.removeEBObserver (self.mController_mEditNetClassButton_enabled!)
    self.mController_mEditNetClassButton_enabled = nil
    self.projectFontController.selectedArray_property.count_property.removeEBObserver (self.mController_mEditFontButton_enabled!)
    self.mController_mEditFontButton_enabled = nil
    self.projectFontController.selectedArray_property.count_property.removeEBObserver (self.mController_mUpdateFontButton_enabled!)
    self.mController_mUpdateFontButton_enabled = nil
    self.projectFontController.selectedArray_property.count_property.removeEBObserver (self.mController_mRemoveFontButton_enabled!)
    self.mController_mRemoveFontButton_enabled = nil
    self.projectFontController.selectedArray_property.count_property.removeEBObserver (self.mController_mResetFontVersionButton_enabled!)
    self.mController_mResetFontVersionButton_enabled = nil
    self.projectDeviceController.selectedArray_property.count_property.removeEBObserver (self.mController_mResetDeviceVersionButton_enabled!)
    self.mController_mResetDeviceVersionButton_enabled = nil
    self.canRemoveSelectedDevices_property.removeEBObserver (self.mController_mRemoveDeviceButton_enabled!)
    self.mController_mRemoveDeviceButton_enabled = nil
    self.projectDeviceController.selectedArray_property.count_property.removeEBObserver (self.mController_mEditDeviceButton_enabled!)
    self.mController_mEditDeviceButton_enabled = nil
    self.projectDeviceController.selectedArray_property.count_property.removeEBObserver (self.mController_mExportDeviceButton_enabled!)
    self.mController_mExportDeviceButton_enabled = nil
    self.projectDeviceController.selectedArray_property.count_property.removeEBObserver (self.mController_mUpdateDeviceButton_enabled!)
    self.mController_mUpdateDeviceButton_enabled = nil
    self.rootObject.mSheets_property.count_property.removeEBObserver (self.mController_mRemoveSheetButton_enabled!)
    self.mController_mRemoveSheetButton_enabled = nil
    self.wireInSchematicSelectionController.hasNet_property.removeEBObserver (self.mController_mWireRenameNetButton_enabled!)
    self.wireInSchematicSelectionController.selectedArray_property.count_property.removeEBObserver (self.mController_mWireRenameNetButton_enabled!)
    self.mController_mWireRenameNetButton_enabled = nil
    self.wireInSchematicSelectionController.hasNet_property.removeEBObserver (self.mController_mWireRenameNetWithUniqueNewNameButton_enabled!)
    self.wireInSchematicSelectionController.selectedArray_property.count_property.removeEBObserver (self.mController_mWireRenameNetWithUniqueNewNameButton_enabled!)
    self.mController_mWireRenameNetWithUniqueNewNameButton_enabled = nil
    self.wireInSchematicSelectionController.hasNet_property.removeEBObserver (self.mController_mSchematicWireMergeSubnetButton_enabled!)
    self.wireInSchematicSelectionController.selectedArray_property.count_property.removeEBObserver (self.mController_mSchematicWireMergeSubnetButton_enabled!)
    self.mController_mSchematicWireMergeSubnetButton_enabled = nil
    self.wireInSchematicSelectionController.hasNet_property.removeEBObserver (self.mController_mSchematicWireInsulateSubnetButton_enabled!)
    self.wireInSchematicSelectionController.selectedArray_property.count_property.removeEBObserver (self.mController_mSchematicWireInsulateSubnetButton_enabled!)
    self.mController_mSchematicWireInsulateSubnetButton_enabled = nil
    self.schematicLabelSelectionController.selectedArray_property.count_property.removeEBObserver (self.mController_mSchematicsLabelRenameNetButton_enabled!)
    self.mController_mSchematicsLabelRenameNetButton_enabled = nil
    self.schematicLabelSelectionController.selectedArray_property.count_property.removeEBObserver (self.mController_mSchematicLabelMergeSubnetButton_enabled!)
    self.mController_mSchematicLabelMergeSubnetButton_enabled = nil
    self.schematicLabelSelectionController.selectedArray_property.count_property.removeEBObserver (self.mController_mSchematicLabelInsulateSubnetButton_enabled!)
    self.mController_mSchematicLabelInsulateSubnetButton_enabled = nil
    self.schematicObjectsController.selectedArray_property.count_property.removeEBObserver (self.mController_mRenameComponentFromComponentSymbolButton_enabled!)
    self.mController_mRenameComponentFromComponentSymbolButton_enabled = nil
    self.netCount_property.removeEBObserver (self.mController_mRenameNetInNetTabButton_enabled!)
    self.mController_mRenameNetInNetTabButton_enabled = nil
    self.netCount_property.removeEBObserver (self.mController_mSelectNetClassInNetTabButton_enabled!)
    self.mController_mSelectNetClassInNetTabButton_enabled = nil
    self.rootObject.netWarningCount_property.removeEBObserver (self.mController_mNetWarningImageView_hidden!)
    self.mController_mNetWarningImageView_hidden = nil
    self.rootObject.netWarningCount_property.removeEBObserver (self.mController_mNetWarningTextField_hidden!)
    self.mController_mNetWarningTextField_hidden = nil
  //--------------------------- Unbind array controllers
    self.componentController.unbind_tableView (self.mComponentTableView)
    self.netClassController.unbind_tableView (self.mNetClassTableView)
    self.projectFontController.unbind_tableView (self.mFontLibraryTableView)
    self.projectDeviceController.unbind_tableView (self.mDeviceLibraryTableView)
    self.schematicObjectsController.unbind_ebView (self.mSchematicsView)
  //--- Array controller property: componentController
    self.componentController.unbind_model ()
  //--- Array controller property: netClassController
    self.netClassController.unbind_model ()
  //--- Array controller property: projectFontController
    self.projectFontController.unbind_model ()
  //--- Array controller property: projectDeviceController
    self.projectDeviceController.unbind_model ()
  //--- Array controller property: schematicObjectsController
    self.schematicObjectsController.unbind_model ()
  //--- Selection controller property: wireInSchematicSelectionController
    self.wireInSchematicSelectionController.unbind_selection ()
  //--- Selection controller property: ncInSchematicSelectionController
    self.ncInSchematicSelectionController.unbind_selection ()
  //--- Selection controller property: commentInSchematicSelectionController
    self.commentInSchematicSelectionController.unbind_selection ()
  //--- Selection controller property: schematicLabelSelectionController
    self.schematicLabelSelectionController.unbind_selection ()
  //--- Selection controller property: componentSymbolSelectionController
    self.componentSymbolSelectionController.unbind_selection ()
    self.rootObject.mComponents_property.count_property.removeEBObserver (self.componentCount_property)
    self.rootObject.netsDescription_property.removeEBObserver (self.netCount_property)
    self.rootObject.mNetClasses_property.count_property.removeEBObserver (self.canRemoveNetClasses_property)
    self.netClassController.selectedArray_property.removeEBObserverOf_canRemove (self.canRemoveNetClasses_property)
    self.projectDeviceController.selectedArray_property.removeEBObserverOf_packageNames (self.selectedDevicePackageNames_property)
    self.projectDeviceController.selectedArray_property.removeEBObserverOf_symbolAndTypesNames (self.selectedDeviceSymbolNames_property)
    self.projectDeviceController.selectedArray_property.removeEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
    self.rootObject.unplacedSymbols_property.removeEBObserver (self.unplacedSymbolsCount_property)
    self.unplacedSymbolsCount_property.removeEBObserver (self.unplacedSymbolsCountString_property)
    self.rootObject.netsDescription_property.removeEBObserver (self.netCountString_property)
    self.componentController.selectedArray_property.removeEBObserverOf_availablePackages (self.canChangePackage_property)
    self.projectDeviceController.selectedArray_property.removeEBObserverOf_canRemove (self.canRemoveSelectedDevices_property)
  //--------------------------- Remove targets / actions
    self.mAddComponentButton?.target = nil
    self.mDuplicateSelectedComponentsActionButton?.target = nil
    self.mRemoveSelectedComponentsActionButton?.target = nil
    self.mChangePackageOfSelectedComponentsActionButton?.target = nil
    self.mChangeValueOfSelectedComponentsActionButton?.target = nil
    self.mAddNetClassButton?.target = nil
    self.mRemoveNetClassButton?.target = nil
    self.mEditNetClassButton?.target = nil
    self.mAddFontButton?.target = nil
    self.mEditFontButton?.target = nil
    self.mUpdateFontButton?.target = nil
    self.mRemoveFontButton?.target = nil
    self.mResetFontVersionButton?.target = nil
    self.mResetDeviceVersionButton?.target = nil
    self.mRemoveDeviceButton?.target = nil
    self.mEditDeviceButton?.target = nil
    self.mExportDeviceButton?.target = nil
    self.mUpdateDeviceButton?.target = nil
    self.mNewSheetButton?.target = nil
    self.mRemoveSheetButton?.target = nil
    self.mSetDateToNowButton?.target = nil
    self.mOpenSetDateDialogButton?.target = nil
  //--------------------------- Clean up outlets
    self.mAddBottomSchematicHotKeyTextField?.ebCleanUp ()
    self.mAddCommentButton?.ebCleanUp ()
    self.mAddComponentButton?.ebCleanUp ()
    self.mAddFontButton?.ebCleanUp ()
    self.mAddLeftLabelSchematicHotKeyTextField?.ebCleanUp ()
    self.mAddNCSchematicHotKeyTextField?.ebCleanUp ()
    self.mAddNetClassButton?.ebCleanUp ()
    self.mAddNetClassErrorMessageTextField?.ebCleanUp ()
    self.mAddNetClassPanel?.ebCleanUp ()
    self.mAddNetClassTextField?.ebCleanUp ()
    self.mAddNetClassValidationButton?.ebCleanUp ()
    self.mAddRightLabelSchematicHotKeyTextField?.ebCleanUp ()
    self.mAddTopLabelSchematicHotKeyTextField?.ebCleanUp ()
    self.mAddWireButton?.ebCleanUp ()
    self.mAddWirePointSchematicHotKeyTextField?.ebCleanUp ()
    self.mBaseSchematicsInspectorView?.ebCleanUp ()
    self.mBoardPageView?.ebCleanUp ()
    self.mChangeComponentValueComboxBox?.ebCleanUp ()
    self.mChangePackageComponentListTextField?.ebCleanUp ()
    self.mChangePackageOfSelectedComponentsActionButton?.ebCleanUp ()
    self.mChangePackagePanel?.ebCleanUp ()
    self.mChangePackagePopUpButton?.ebCleanUp ()
    self.mChangeValueComponentListTextField?.ebCleanUp ()
    self.mChangeValueOfSelectedComponentsActionButton?.ebCleanUp ()
    self.mChangeValuePanel?.ebCleanUp ()
    self.mChangeValueValidationButton?.ebCleanUp ()
    self.mCommentInSchematicsInspectorView?.ebCleanUp ()
    self.mCommentInSchematicsTextField?.ebCleanUp ()
    self.mComponentCountTextField?.ebCleanUp ()
    self.mComponentSymbolComponentNameTextField?.ebCleanUp ()
    self.mComponentSymbolDeviceNameTextField?.ebCleanUp ()
    self.mComponentSymbolInspectorView?.ebCleanUp ()
    self.mComponentSymbolInstanceNameTextField?.ebCleanUp ()
    self.mComponentSymbolShowComponentValueSwitch?.ebCleanUp ()
    self.mComponentSymbolTypeNameTextField?.ebCleanUp ()
    self.mComponentSymbolValueTextField?.ebCleanUp ()
    self.mComponentTableView?.ebCleanUp ()
    self.mComponentsPageView?.ebCleanUp ()
    self.mConnectSchematicHotKeyTextField?.ebCleanUp ()
    self.mCurrentComponentNameTextField?.ebCleanUp ()
    self.mDeviceLibraryTableView?.ebCleanUp ()
    self.mDevicePackageTableView?.ebCleanUp ()
    self.mDeviceSymbolTableView?.ebCleanUp ()
    self.mDisconnectSchematicHotKeyTextField?.ebCleanUp ()
    self.mDuplicateSelectedComponentsActionButton?.ebCleanUp ()
    self.mEditDeviceButton?.ebCleanUp ()
    self.mEditFontButton?.ebCleanUp ()
    self.mEditNetClassButton?.ebCleanUp ()
    self.mExportDeviceButton?.ebCleanUp ()
    self.mFontLibraryTableView?.ebCleanUp ()
    self.mGridZoomSchematicsInspectorView?.ebCleanUp ()
    self.mHotKeysSchematicInspectorView?.ebCleanUp ()
    self.mInconsistentSchematicErrorPanel?.ebCleanUp ()
    self.mInconsistentSchematicErrorTextView?.ebCleanUp ()
    self.mLibraryPageView?.ebCleanUp ()
    self.mMasterView?.ebCleanUp ()
    self.mMergeNetDialog?.ebCleanUp ()
    self.mMergeNetPopUpButton?.ebCleanUp ()
    self.mMergeSeveralSubnetsPanel?.ebCleanUp ()
    self.mMergeSeveralSubnetsPopUpButton?.ebCleanUp ()
    self.mNCInSchematicsInspectorView?.ebCleanUp ()
    self.mNCRotationSegmentedControl?.ebCleanUp ()
    self.mNetClassColorWell?.ebCleanUp ()
    self.mNetClassHoleDiameterDimensionTextField?.ebCleanUp ()
    self.mNetClassHoleDiameterUnitPopUpButton?.ebCleanUp ()
    self.mNetClassPadDiameterDimensionTextField?.ebCleanUp ()
    self.mNetClassPadDiameterUnitPopUpButton?.ebCleanUp ()
    self.mNetClassTableView?.ebCleanUp ()
    self.mNetClassWidthDimensionTextField?.ebCleanUp ()
    self.mNetClassWidthUnitPopUpButton?.ebCleanUp ()
    self.mNetClassesPageView?.ebCleanUp ()
    self.mNetCountTextField?.ebCleanUp ()
    self.mNetInfoTableView?.ebCleanUp ()
    self.mNetListPageView?.ebCleanUp ()
    self.mNetWarningImageView?.ebCleanUp ()
    self.mNetWarningTextField?.ebCleanUp ()
    self.mNewComponentFromDevicePullDownButton?.ebCleanUp ()
    self.mNewSheetButton?.ebCleanUp ()
    self.mOpenSetDateDialogButton?.ebCleanUp ()
    self.mPageSegmentedControl?.ebCleanUp ()
    self.mPinPadAssignmentTableView?.ebCleanUp ()
    self.mProductPageView?.ebCleanUp ()
    self.mRemoveDeviceButton?.ebCleanUp ()
    self.mRemoveFontButton?.ebCleanUp ()
    self.mRemoveNetClassButton?.ebCleanUp ()
    self.mRemoveSelectedComponentsActionButton?.ebCleanUp ()
    self.mRemoveSheetButton?.ebCleanUp ()
    self.mRemoveWirePointSchematicHotKeyTextField?.ebCleanUp ()
    self.mRenameComponentButton?.ebCleanUp ()
    self.mRenameComponentErrorMessageTextField?.ebCleanUp ()
    self.mRenameComponentFromComponentSymbolButton?.ebCleanUp ()
    self.mRenameComponentIndexesPopUpButton?.ebCleanUp ()
    self.mRenameComponentPanel?.ebCleanUp ()
    self.mRenameComponentPrefixComboxBox?.ebCleanUp ()
    self.mRenameComponentValidationButton?.ebCleanUp ()
    self.mRenameNetErrorTextField?.ebCleanUp ()
    self.mRenameNetInNetTabButton?.ebCleanUp ()
    self.mRenameNetOkButton?.ebCleanUp ()
    self.mRenameNetPanel?.ebCleanUp ()
    self.mRenameNetTextField?.ebCleanUp ()
    self.mResetDeviceVersionButton?.ebCleanUp ()
    self.mResetFontVersionButton?.ebCleanUp ()
    self.mSchematicLabelInsulateSubnetButton?.ebCleanUp ()
    self.mSchematicLabelMergeSubnetButton?.ebCleanUp ()
    self.mSchematicLabelNetClassButton?.ebCleanUp ()
    self.mSchematicStatusImageViewInToolbar?.ebCleanUp ()
    self.mSchematicWireInsulateSubnetButton?.ebCleanUp ()
    self.mSchematicWireMergeSubnetButton?.ebCleanUp ()
    self.mSchematicWireNetClassButton?.ebCleanUp ()
    self.mSchematicsDatePicker?.ebCleanUp ()
    self.mSchematicsGridDisplayFactorPopUpButton?.ebCleanUp ()
    self.mSchematicsGridStylePopUpButton?.ebCleanUp ()
    self.mSchematicsHorizontalFlipSwitch?.ebCleanUp ()
    self.mSchematicsInspectorSegmentedControl?.ebCleanUp ()
    self.mSchematicsLabelInspectorView?.ebCleanUp ()
    self.mSchematicsLabelNetNameTextField?.ebCleanUp ()
    self.mSchematicsLabelRenameNetButton?.ebCleanUp ()
    self.mSchematicsLabelRotationSegmentedControl?.ebCleanUp ()
    self.mSchematicsPageView?.ebCleanUp ()
    self.mSchematicsScrollView?.ebCleanUp ()
    self.mSchematicsSheetOrientationSegmentedControl?.ebCleanUp ()
    self.mSchematicsSheetsInspectorView?.ebCleanUp ()
    self.mSchematicsTitleTextField?.ebCleanUp ()
    self.mSchematicsVersionTextField?.ebCleanUp ()
    self.mSchematicsVerticalFlipSwitch?.ebCleanUp ()
    self.mSchematicsView?.ebCleanUp ()
    self.mSchematicsWireInspectorView?.ebCleanUp ()
    self.mSelectNetClassInNetTabButton?.ebCleanUp ()
    self.mSelectNetClassPanel?.ebCleanUp ()
    self.mSelectNetClassPopUpButton?.ebCleanUp ()
    self.mSelectedObjectsSchematicsInspectorView?.ebCleanUp ()
    self.mSelectedSheetTitleTextField?.ebCleanUp ()
    self.mSetDatePanel?.ebCleanUp ()
    self.mSetDateToNowButton?.ebCleanUp ()
    self.mSheetDownButton?.ebCleanUp ()
    self.mSheetPopUpButton?.ebCleanUp ()
    self.mSheetUpButton?.ebCleanUp ()
    self.mSymbolMirrorSwitch?.ebCleanUp ()
    self.mSymbolRotationSegmentedControl?.ebCleanUp ()
    self.mUnplacedSymbolsSchematicsInspectorView?.ebCleanUp ()
    self.mUnplacedSymbolsTableView?.ebCleanUp ()
    self.mUnplacedSymbolsTextField?.ebCleanUp ()
    self.mUpdateDeviceButton?.ebCleanUp ()
    self.mUpdateFontButton?.ebCleanUp ()
    self.mWireNetNameTextField?.ebCleanUp ()
    self.mWireRenameNetButton?.ebCleanUp ()
    self.mWireRenameNetWithUniqueNewNameButton?.ebCleanUp ()
//    self.mAddBottomSchematicHotKeyTextField = nil
//    self.mAddCommentButton = nil
//    self.mAddComponentButton = nil
//    self.mAddFontButton = nil
//    self.mAddLeftLabelSchematicHotKeyTextField = nil
//    self.mAddNCSchematicHotKeyTextField = nil
//    self.mAddNetClassButton = nil
//    self.mAddNetClassErrorMessageTextField = nil
//    self.mAddNetClassPanel = nil
//    self.mAddNetClassTextField = nil
//    self.mAddNetClassValidationButton = nil
//    self.mAddRightLabelSchematicHotKeyTextField = nil
//    self.mAddTopLabelSchematicHotKeyTextField = nil
//    self.mAddWireButton = nil
//    self.mAddWirePointSchematicHotKeyTextField = nil
//    self.mBaseSchematicsInspectorView = nil
//    self.mBoardPageView = nil
//    self.mChangeComponentValueComboxBox = nil
//    self.mChangePackageComponentListTextField = nil
//    self.mChangePackageOfSelectedComponentsActionButton = nil
//    self.mChangePackagePanel = nil
//    self.mChangePackagePopUpButton = nil
//    self.mChangeValueComponentListTextField = nil
//    self.mChangeValueOfSelectedComponentsActionButton = nil
//    self.mChangeValuePanel = nil
//    self.mChangeValueValidationButton = nil
//    self.mCommentInSchematicsInspectorView = nil
//    self.mCommentInSchematicsTextField = nil
//    self.mComponentCountTextField = nil
//    self.mComponentSymbolComponentNameTextField = nil
//    self.mComponentSymbolDeviceNameTextField = nil
//    self.mComponentSymbolInspectorView = nil
//    self.mComponentSymbolInstanceNameTextField = nil
//    self.mComponentSymbolShowComponentValueSwitch = nil
//    self.mComponentSymbolTypeNameTextField = nil
//    self.mComponentSymbolValueTextField = nil
//    self.mComponentTableView = nil
//    self.mComponentsPageView = nil
//    self.mConnectSchematicHotKeyTextField = nil
//    self.mCurrentComponentNameTextField = nil
//    self.mDeviceLibraryTableView = nil
//    self.mDevicePackageTableView = nil
//    self.mDeviceSymbolTableView = nil
//    self.mDisconnectSchematicHotKeyTextField = nil
//    self.mDuplicateSelectedComponentsActionButton = nil
//    self.mEditDeviceButton = nil
//    self.mEditFontButton = nil
//    self.mEditNetClassButton = nil
//    self.mExportDeviceButton = nil
//    self.mFontLibraryTableView = nil
//    self.mGridZoomSchematicsInspectorView = nil
//    self.mHotKeysSchematicInspectorView = nil
//    self.mInconsistentSchematicErrorPanel = nil
//    self.mInconsistentSchematicErrorTextView = nil
//    self.mLibraryPageView = nil
//    self.mMasterView = nil
//    self.mMergeNetDialog = nil
//    self.mMergeNetPopUpButton = nil
//    self.mMergeSeveralSubnetsPanel = nil
//    self.mMergeSeveralSubnetsPopUpButton = nil
//    self.mNCInSchematicsInspectorView = nil
//    self.mNCRotationSegmentedControl = nil
//    self.mNetClassColorWell = nil
//    self.mNetClassHoleDiameterDimensionTextField = nil
//    self.mNetClassHoleDiameterUnitPopUpButton = nil
//    self.mNetClassPadDiameterDimensionTextField = nil
//    self.mNetClassPadDiameterUnitPopUpButton = nil
//    self.mNetClassTableView = nil
//    self.mNetClassWidthDimensionTextField = nil
//    self.mNetClassWidthUnitPopUpButton = nil
//    self.mNetClassesPageView = nil
//    self.mNetCountTextField = nil
//    self.mNetInfoTableView = nil
//    self.mNetListPageView = nil
//    self.mNetWarningImageView = nil
//    self.mNetWarningTextField = nil
//    self.mNewComponentFromDevicePullDownButton = nil
//    self.mNewSheetButton = nil
//    self.mOpenSetDateDialogButton = nil
//    self.mPageSegmentedControl = nil
//    self.mPinPadAssignmentTableView = nil
//    self.mProductPageView = nil
//    self.mRemoveDeviceButton = nil
//    self.mRemoveFontButton = nil
//    self.mRemoveNetClassButton = nil
//    self.mRemoveSelectedComponentsActionButton = nil
//    self.mRemoveSheetButton = nil
//    self.mRemoveWirePointSchematicHotKeyTextField = nil
//    self.mRenameComponentButton = nil
//    self.mRenameComponentErrorMessageTextField = nil
//    self.mRenameComponentFromComponentSymbolButton = nil
//    self.mRenameComponentIndexesPopUpButton = nil
//    self.mRenameComponentPanel = nil
//    self.mRenameComponentPrefixComboxBox = nil
//    self.mRenameComponentValidationButton = nil
//    self.mRenameNetErrorTextField = nil
//    self.mRenameNetInNetTabButton = nil
//    self.mRenameNetOkButton = nil
//    self.mRenameNetPanel = nil
//    self.mRenameNetTextField = nil
//    self.mResetDeviceVersionButton = nil
//    self.mResetFontVersionButton = nil
//    self.mSchematicLabelInsulateSubnetButton = nil
//    self.mSchematicLabelMergeSubnetButton = nil
//    self.mSchematicLabelNetClassButton = nil
//    self.mSchematicStatusImageViewInToolbar = nil
//    self.mSchematicWireInsulateSubnetButton = nil
//    self.mSchematicWireMergeSubnetButton = nil
//    self.mSchematicWireNetClassButton = nil
//    self.mSchematicsDatePicker = nil
//    self.mSchematicsGridDisplayFactorPopUpButton = nil
//    self.mSchematicsGridStylePopUpButton = nil
//    self.mSchematicsHorizontalFlipSwitch = nil
//    self.mSchematicsInspectorSegmentedControl = nil
//    self.mSchematicsLabelInspectorView = nil
//    self.mSchematicsLabelNetNameTextField = nil
//    self.mSchematicsLabelRenameNetButton = nil
//    self.mSchematicsLabelRotationSegmentedControl = nil
//    self.mSchematicsPageView = nil
//    self.mSchematicsScrollView = nil
//    self.mSchematicsSheetOrientationSegmentedControl = nil
//    self.mSchematicsSheetsInspectorView = nil
//    self.mSchematicsTitleTextField = nil
//    self.mSchematicsVersionTextField = nil
//    self.mSchematicsVerticalFlipSwitch = nil
//    self.mSchematicsView = nil
//    self.mSchematicsWireInspectorView = nil
//    self.mSelectNetClassInNetTabButton = nil
//    self.mSelectNetClassPanel = nil
//    self.mSelectNetClassPopUpButton = nil
//    self.mSelectedObjectsSchematicsInspectorView = nil
//    self.mSelectedSheetTitleTextField = nil
//    self.mSetDatePanel = nil
//    self.mSetDateToNowButton = nil
//    self.mSheetDownButton = nil
//    self.mSheetPopUpButton = nil
//    self.mSheetUpButton = nil
//    self.mSymbolMirrorSwitch = nil
//    self.mSymbolRotationSegmentedControl = nil
//    self.mUnplacedSymbolsSchematicsInspectorView = nil
//    self.mUnplacedSymbolsTableView = nil
//    self.mUnplacedSymbolsTextField = nil
//    self.mUpdateDeviceButton = nil
//    self.mUpdateFontButton = nil
//    self.mWireNetNameTextField = nil
//    self.mWireRenameNetButton = nil
//    self.mWireRenameNetWithUniqueNewNameButton = nil
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

