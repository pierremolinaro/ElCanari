//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

var g_Preferences : Preferences? = nil

//----------------------------------------------------------------------------------------------------------------------

let Preferences_warningMessageColor = "Preferences:warningMessageColor"
let Preferences_successMessageColor = "Preferences:successMessageColor"
let Preferences_selectionHiliteColor = "Preferences:selectionHiliteColor"
let Preferences_symbolColor = "Preferences:symbolColor"
let Preferences_crossColorOfSymbolGrid = "Preferences:crossColorOfSymbolGrid"
let Preferences_lineColorOfSymbolGrid = "Preferences:lineColorOfSymbolGrid"
let Preferences_symbolBackgroundColor = "Preferences:symbolBackgroundColor"
let Preferences_symbolDrawingWidthMultipliedByTen = "Preferences:symbolDrawingWidthMultipliedByTen"
let Preferences_crossColorOfPackageGrid = "Preferences:crossColorOfPackageGrid"
let Preferences_lineColorOfPackageGrid = "Preferences:lineColorOfPackageGrid"
let Preferences_packageBackgroundColor = "Preferences:packageBackgroundColor"
let Preferences_packageColor = "Preferences:packageColor"
let Preferences_frontSidePadColor = "Preferences:frontSidePadColor"
let Preferences_backSidePadColor = "Preferences:backSidePadColor"
let Preferences_displayPackageBackSidePads = "Preferences:displayPackageBackSidePads"
let Preferences_padNumberColor = "Preferences:padNumberColor"
let Preferences_padNumberFont = "Preferences:padNumberFont"
let Preferences_showPadNumber = "Preferences:showPadNumber"
let Preferences_packageGuideColor = "Preferences:packageGuideColor"
let Preferences_packageDimensionColor = "Preferences:packageDimensionColor"
let Preferences_dimensionFont = "Preferences:dimensionFont"
let Preferences_padZoneColor = "Preferences:padZoneColor"
let Preferences_padZoneFont = "Preferences:padZoneFont"
let Preferences_packageDrawingWidthMultipliedByTen = "Preferences:packageDrawingWidthMultipliedByTen"
let Preferences_mSymbolAndPackageGridDotColorForDevice = "Preferences:mSymbolAndPackageGridDotColorForDevice"
let Preferences_mSymbolAndPackageGridLineColorForDevice = "Preferences:mSymbolAndPackageGridLineColorForDevice"
let Preferences_mSymbolAndPackageBackgroundColorForDevice = "Preferences:mSymbolAndPackageBackgroundColorForDevice"
let Preferences_mPackageColorForDevice = "Preferences:mPackageColorForDevice"
let Preferences_mFrontSidePadColorForDevice = "Preferences:mFrontSidePadColorForDevice"
let Preferences_mBottomSidePadColorForDevice = "Preferences:mBottomSidePadColorForDevice"
let Preferences_mPadNumberColorForDevice = "Preferences:mPadNumberColorForDevice"
let Preferences_mPackageNameFontForDevice = "Preferences:mPackageNameFontForDevice"
let Preferences_mPadNumberFontForDevice = "Preferences:mPadNumberFontForDevice"
let Preferences_mSymbolColorForDevice = "Preferences:mSymbolColorForDevice"
let Preferences_mSymbolNameFontForDevice = "Preferences:mSymbolNameFontForDevice"
let Preferences_mPinNameFontForDevice = "Preferences:mPinNameFontForDevice"
let Preferences_symbolDrawingWidthForDeviceMultipliedByTen = "Preferences:symbolDrawingWidthForDeviceMultipliedByTen"
let Preferences_packageDrawingWidthForDeviceMultipliedByTen = "Preferences:packageDrawingWidthForDeviceMultipliedByTen"
let Preferences_schematicBackColor = "Preferences:schematicBackColor"
let Preferences_dotColorGridForSchematic = "Preferences:dotColorGridForSchematic"
let Preferences_lineColorGridForSchematic = "Preferences:lineColorGridForSchematic"
let Preferences_symbolColorForUnplacedComponentsForSchematic = "Preferences:symbolColorForUnplacedComponentsForSchematic"
let Preferences_symbolColorForSchematic = "Preferences:symbolColorForSchematic"
let Preferences_pinNameFontForSchematic = "Preferences:pinNameFontForSchematic"
let Preferences_pinNameColorForSchematic = "Preferences:pinNameColorForSchematic"
let Preferences_pinNumberFontForSchematic = "Preferences:pinNumberFontForSchematic"
let Preferences_pinNumberColorForSchematic = "Preferences:pinNumberColorForSchematic"
let Preferences_connectionColorForSchematic = "Preferences:connectionColorForSchematic"
let Preferences_symbolDrawingWidthMultipliedByTenForSchematic = "Preferences:symbolDrawingWidthMultipliedByTenForSchematic"
let Preferences_crossColorGridForBoard = "Preferences:crossColorGridForBoard"
let Preferences_lineColorGridForBoard = "Preferences:lineColorGridForBoard"
let Preferences_boardBackgroundColorForBoard = "Preferences:boardBackgroundColorForBoard"
let Preferences_errorBackgroundColorForBoard = "Preferences:errorBackgroundColorForBoard"
let Preferences_drawErrorBackgroundForBoard = "Preferences:drawErrorBackgroundForBoard"
let Preferences_warningBackgroundColorForBoard = "Preferences:warningBackgroundColorForBoard"
let Preferences_drawWarningBackgroundForBoard = "Preferences:drawWarningBackgroundForBoard"
let Preferences_boardLimitsColorForBoard = "Preferences:boardLimitsColorForBoard"
let Preferences_boardClearanceColorForBoard = "Preferences:boardClearanceColorForBoard"
let Preferences_displayFrontRestrictRectangles = "Preferences:displayFrontRestrictRectangles"
let Preferences_frontSideRestrictRectangleColorForBoard = "Preferences:frontSideRestrictRectangleColorForBoard"
let Preferences_displayBackRestrictRectangles = "Preferences:displayBackRestrictRectangles"
let Preferences_backSideRestrictRectangleColorForBoard = "Preferences:backSideRestrictRectangleColorForBoard"
let Preferences_displayFrontLegendForBoard = "Preferences:displayFrontLegendForBoard"
let Preferences_frontSideLegendColorForBoard = "Preferences:frontSideLegendColorForBoard"
let Preferences_displayFrontLayoutForBoard = "Preferences:displayFrontLayoutForBoard"
let Preferences_frontSideLayoutColorForBoard = "Preferences:frontSideLayoutColorForBoard"
let Preferences_displayBackLayoutForBoard = "Preferences:displayBackLayoutForBoard"
let Preferences_backSideLayoutColorForBoard = "Preferences:backSideLayoutColorForBoard"
let Preferences_displayBackLegendForBoard = "Preferences:displayBackLegendForBoard"
let Preferences_backSideLegendColorForBoard = "Preferences:backSideLegendColorForBoard"
let Preferences_displayFrontPadsForBoard = "Preferences:displayFrontPadsForBoard"
let Preferences_frontSidePadColorForBoard = "Preferences:frontSidePadColorForBoard"
let Preferences_displayBackPadsForBoard = "Preferences:displayBackPadsForBoard"
let Preferences_backSidePadColorForBoard = "Preferences:backSidePadColorForBoard"
let Preferences_displayPadNumbersForBoard = "Preferences:displayPadNumbersForBoard"
let Preferences_padNumberFontForBoard = "Preferences:padNumberFontForBoard"
let Preferences_padNumberColorForBoard = "Preferences:padNumberColorForBoard"
let Preferences_packageDrawingWidthMultpliedByTenForBoard = "Preferences:packageDrawingWidthMultpliedByTenForBoard"
let Preferences_mShowRotationKnobInBoard = "Preferences:mShowRotationKnobInBoard"
let Preferences_showGerberDrawingFlow = "Preferences:showGerberDrawingFlow"
let Preferences_showGerberDrawingIndexes = "Preferences:showGerberDrawingIndexes"
let Preferences_fontEditionTransparency = "Preferences:fontEditionTransparency"
let Preferences_checkForSystemLibraryAtStartUp = "Preferences:checkForSystemLibraryAtStartUp"
let Preferences_systemLibraryCheckTimeInterval = "Preferences:systemLibraryCheckTimeInterval"
let Preferences_mergerModelViewHorizontalFlip = "Preferences:mergerModelViewHorizontalFlip"
let Preferences_mergerModelViewVerticalFlip = "Preferences:mergerModelViewVerticalFlip"
let Preferences_mergerModelViewDisplayHoles = "Preferences:mergerModelViewDisplayHoles"
let Preferences_mergerModelViewDisplayVias = "Preferences:mergerModelViewDisplayVias"
let Preferences_mergerModelViewDisplayFrontPads = "Preferences:mergerModelViewDisplayFrontPads"
let Preferences_mergerModelViewDisplayInternalBoardsLimits = "Preferences:mergerModelViewDisplayInternalBoardsLimits"
let Preferences_mergerModelViewDisplayBoardLimits = "Preferences:mergerModelViewDisplayBoardLimits"
let Preferences_mergerModelViewDisplayFrontComponentNames = "Preferences:mergerModelViewDisplayFrontComponentNames"
let Preferences_mergerModelViewDisplayFrontComponentValues = "Preferences:mergerModelViewDisplayFrontComponentValues"
let Preferences_mergerModelViewDisplayFrontPackages = "Preferences:mergerModelViewDisplayFrontPackages"
let Preferences_mergerModelViewDisplayFrontLegendTexts = "Preferences:mergerModelViewDisplayFrontLegendTexts"
let Preferences_mergerModelViewDisplayFrontTracks = "Preferences:mergerModelViewDisplayFrontTracks"
let Preferences_mergerModelViewDisplayFrontLayoutTexts = "Preferences:mergerModelViewDisplayFrontLayoutTexts"
let Preferences_mergerModelViewDisplayBackPads = "Preferences:mergerModelViewDisplayBackPads"
let Preferences_mergerModelViewDisplayBackComponentNames = "Preferences:mergerModelViewDisplayBackComponentNames"
let Preferences_mergerModelViewDisplayBackComponentValues = "Preferences:mergerModelViewDisplayBackComponentValues"
let Preferences_mergerModelViewDisplayBackLegendTexts = "Preferences:mergerModelViewDisplayBackLegendTexts"
let Preferences_mergerModelViewDisplayBackPackages = "Preferences:mergerModelViewDisplayBackPackages"
let Preferences_mergerModelViewDisplayBackTracks = "Preferences:mergerModelViewDisplayBackTracks"
let Preferences_mergerModelViewDisplayBackLayoutTexts = "Preferences:mergerModelViewDisplayBackLayoutTexts"
let Preferences_mergerModelViewDisplayFrontLegendLines = "Preferences:mergerModelViewDisplayFrontLegendLines"
let Preferences_mergerModelViewDisplayBackLegendLines = "Preferences:mergerModelViewDisplayBackLegendLines"
let Preferences_mergerBoardViewHorizontalFlip = "Preferences:mergerBoardViewHorizontalFlip"
let Preferences_mergerBoardViewVerticalFlip = "Preferences:mergerBoardViewVerticalFlip"
let Preferences_mergerBoardViewDisplayHoles = "Preferences:mergerBoardViewDisplayHoles"
let Preferences_mergerBoardViewDisplayVias = "Preferences:mergerBoardViewDisplayVias"
let Preferences_mergerBoardViewDisplayFrontPads = "Preferences:mergerBoardViewDisplayFrontPads"
let Preferences_mergerBoardViewDisplayInternalBoardsLimits = "Preferences:mergerBoardViewDisplayInternalBoardsLimits"
let Preferences_mergerBoardViewDisplayBoardLimits = "Preferences:mergerBoardViewDisplayBoardLimits"
let Preferences_mergerBoardViewDisplayFrontComponentNames = "Preferences:mergerBoardViewDisplayFrontComponentNames"
let Preferences_mergerBoardViewDisplayFrontComponentValues = "Preferences:mergerBoardViewDisplayFrontComponentValues"
let Preferences_mergerBoardViewDisplayFrontPackages = "Preferences:mergerBoardViewDisplayFrontPackages"
let Preferences_mergerBoardViewDisplayFrontLegendTexts = "Preferences:mergerBoardViewDisplayFrontLegendTexts"
let Preferences_mergerBoardViewDisplayFrontTracks = "Preferences:mergerBoardViewDisplayFrontTracks"
let Preferences_mergerBoardViewDisplayFrontLayoutTexts = "Preferences:mergerBoardViewDisplayFrontLayoutTexts"
let Preferences_mergerBoardViewDisplayBackPads = "Preferences:mergerBoardViewDisplayBackPads"
let Preferences_mergerBoardViewDisplayBackComponentNames = "Preferences:mergerBoardViewDisplayBackComponentNames"
let Preferences_mergerBoardViewDisplayBackComponentValues = "Preferences:mergerBoardViewDisplayBackComponentValues"
let Preferences_mergerBoardViewDisplayBackLegendTexts = "Preferences:mergerBoardViewDisplayBackLegendTexts"
let Preferences_mergerBoardViewDisplayBackPackages = "Preferences:mergerBoardViewDisplayBackPackages"
let Preferences_mergerBoardViewDisplayBackTracks = "Preferences:mergerBoardViewDisplayBackTracks"
let Preferences_mergerBoardViewDisplayBackLayoutTexts = "Preferences:mergerBoardViewDisplayBackLayoutTexts"
let Preferences_mergerBoardViewDisplayFrontLegendLines = "Preferences:mergerBoardViewDisplayFrontLegendLines"
let Preferences_mergerBoardViewDisplayBackLegendLines = "Preferences:mergerBoardViewDisplayBackLegendLines"
let Preferences_mergerColorHoles = "Preferences:mergerColorHoles"
let Preferences_mergerColorVias = "Preferences:mergerColorVias"
let Preferences_mergerColorFrontPads = "Preferences:mergerColorFrontPads"
let Preferences_mergerColorBoardLimits = "Preferences:mergerColorBoardLimits"
let Preferences_mergerColorInternalBoardsLimits = "Preferences:mergerColorInternalBoardsLimits"
let Preferences_mergerColorFrontComponentNames = "Preferences:mergerColorFrontComponentNames"
let Preferences_mergerColorFrontComponentValues = "Preferences:mergerColorFrontComponentValues"
let Preferences_mergerColorFrontPackages = "Preferences:mergerColorFrontPackages"
let Preferences_mergerColorFrontLegendTexts = "Preferences:mergerColorFrontLegendTexts"
let Preferences_mergerColorFrontTracks = "Preferences:mergerColorFrontTracks"
let Preferences_mergerColorFrontLayoutTexts = "Preferences:mergerColorFrontLayoutTexts"
let Preferences_mergerColorBackPads = "Preferences:mergerColorBackPads"
let Preferences_mergerColorBackComponentNames = "Preferences:mergerColorBackComponentNames"
let Preferences_mergerColorBackComponentValues = "Preferences:mergerColorBackComponentValues"
let Preferences_mergerColorBackLegendTexts = "Preferences:mergerColorBackLegendTexts"
let Preferences_mergerColorBackPackages = "Preferences:mergerColorBackPackages"
let Preferences_mergerColorBackTracks = "Preferences:mergerColorBackTracks"
let Preferences_mergerColorBackLayoutTexts = "Preferences:mergerColorBackLayoutTexts"
let Preferences_mergerColorFrontLegendLines = "Preferences:mergerColorFrontLegendLines"
let Preferences_mergerColorBackLegendLines = "Preferences:mergerColorBackLegendLines"
let Preferences_mergerColorBackground = "Preferences:mergerColorBackground"
let Preferences_errorMessageColor = "Preferences:errorMessageColor"
let Preferences_hiliteWidthMultipliedByTen = "Preferences:hiliteWidthMultipliedByTen"
let Preferences_usesUserLibrary = "Preferences:usesUserLibrary"
let Preferences_additionnalLibraryArray = "Preferences:additionnalLibraryArray"
let Preferences_pinNameFont = "Preferences:pinNameFont"
let Preferences_displayPackageFrontSidePads = "Preferences:displayPackageFrontSidePads"
let Preferences_sampleString = "Preferences:sampleString"
let Preferences_sampleStringSize = "Preferences:sampleStringSize"
let Preferences_mLastSystemLibraryCheckTime = "Preferences:mLastSystemLibraryCheckTime"

//····················································································································
//   Atomic property: warningMessageColor
//····················································································································

  let prefs_warningMessageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_warningMessageColor)

//····················································································································

  var prefs_warningMessageColor : NSColor {
    get { return prefs_warningMessageColor_property.propval }
    set { prefs_warningMessageColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_warningMessageColor_property_selection : EBSelection <NSColor> { return prefs_warningMessageColor_property.prop }

//····················································································································
//   Atomic property: successMessageColor
//····················································································································

  let prefs_successMessageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_successMessageColor)

//····················································································································

  var prefs_successMessageColor : NSColor {
    get { return prefs_successMessageColor_property.propval }
    set { prefs_successMessageColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_successMessageColor_property_selection : EBSelection <NSColor> { return prefs_successMessageColor_property.prop }

//····················································································································
//   Atomic property: selectionHiliteColor
//····················································································································

  let prefs_selectionHiliteColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.cyan, prefKey: Preferences_selectionHiliteColor)

//····················································································································

  var prefs_selectionHiliteColor : NSColor {
    get { return prefs_selectionHiliteColor_property.propval }
    set { prefs_selectionHiliteColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_selectionHiliteColor_property_selection : EBSelection <NSColor> { return prefs_selectionHiliteColor_property.prop }

//····················································································································
//   Atomic property: symbolColor
//····················································································································

  let prefs_symbolColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_symbolColor)

//····················································································································

  var prefs_symbolColor : NSColor {
    get { return prefs_symbolColor_property.propval }
    set { prefs_symbolColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_symbolColor_property_selection : EBSelection <NSColor> { return prefs_symbolColor_property.prop }

//····················································································································
//   Atomic property: crossColorOfSymbolGrid
//····················································································································

  let prefs_crossColorOfSymbolGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_crossColorOfSymbolGrid)

//····················································································································

  var prefs_crossColorOfSymbolGrid : NSColor {
    get { return prefs_crossColorOfSymbolGrid_property.propval }
    set { prefs_crossColorOfSymbolGrid_property.setProp (newValue) }
  }

//····················································································································

  var prefs_crossColorOfSymbolGrid_property_selection : EBSelection <NSColor> { return prefs_crossColorOfSymbolGrid_property.prop }

//····················································································································
//   Atomic property: lineColorOfSymbolGrid
//····················································································································

  let prefs_lineColorOfSymbolGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_lineColorOfSymbolGrid)

//····················································································································

  var prefs_lineColorOfSymbolGrid : NSColor {
    get { return prefs_lineColorOfSymbolGrid_property.propval }
    set { prefs_lineColorOfSymbolGrid_property.setProp (newValue) }
  }

//····················································································································

  var prefs_lineColorOfSymbolGrid_property_selection : EBSelection <NSColor> { return prefs_lineColorOfSymbolGrid_property.prop }

//····················································································································
//   Atomic property: symbolBackgroundColor
//····················································································································

  let prefs_symbolBackgroundColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_symbolBackgroundColor)

//····················································································································

  var prefs_symbolBackgroundColor : NSColor {
    get { return prefs_symbolBackgroundColor_property.propval }
    set { prefs_symbolBackgroundColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_symbolBackgroundColor_property_selection : EBSelection <NSColor> { return prefs_symbolBackgroundColor_property.prop }

//····················································································································
//   Atomic property: symbolDrawingWidthMultipliedByTen
//····················································································································

  let prefs_symbolDrawingWidthMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 5, prefKey: Preferences_symbolDrawingWidthMultipliedByTen)

//····················································································································

  var prefs_symbolDrawingWidthMultipliedByTen : Int {
    get { return prefs_symbolDrawingWidthMultipliedByTen_property.propval }
    set { prefs_symbolDrawingWidthMultipliedByTen_property.setProp (newValue) }
  }

//····················································································································

  var prefs_symbolDrawingWidthMultipliedByTen_property_selection : EBSelection <Int> { return prefs_symbolDrawingWidthMultipliedByTen_property.prop }

//····················································································································
//   Atomic property: crossColorOfPackageGrid
//····················································································································

  let prefs_crossColorOfPackageGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_crossColorOfPackageGrid)

//····················································································································

  var prefs_crossColorOfPackageGrid : NSColor {
    get { return prefs_crossColorOfPackageGrid_property.propval }
    set { prefs_crossColorOfPackageGrid_property.setProp (newValue) }
  }

//····················································································································

  var prefs_crossColorOfPackageGrid_property_selection : EBSelection <NSColor> { return prefs_crossColorOfPackageGrid_property.prop }

//····················································································································
//   Atomic property: lineColorOfPackageGrid
//····················································································································

  let prefs_lineColorOfPackageGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_lineColorOfPackageGrid)

//····················································································································

  var prefs_lineColorOfPackageGrid : NSColor {
    get { return prefs_lineColorOfPackageGrid_property.propval }
    set { prefs_lineColorOfPackageGrid_property.setProp (newValue) }
  }

//····················································································································

  var prefs_lineColorOfPackageGrid_property_selection : EBSelection <NSColor> { return prefs_lineColorOfPackageGrid_property.prop }

//····················································································································
//   Atomic property: packageBackgroundColor
//····················································································································

  let prefs_packageBackgroundColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_packageBackgroundColor)

//····················································································································

  var prefs_packageBackgroundColor : NSColor {
    get { return prefs_packageBackgroundColor_property.propval }
    set { prefs_packageBackgroundColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_packageBackgroundColor_property_selection : EBSelection <NSColor> { return prefs_packageBackgroundColor_property.prop }

//····················································································································
//   Atomic property: packageColor
//····················································································································

  let prefs_packageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_packageColor)

//····················································································································

  var prefs_packageColor : NSColor {
    get { return prefs_packageColor_property.propval }
    set { prefs_packageColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_packageColor_property_selection : EBSelection <NSColor> { return prefs_packageColor_property.prop }

//····················································································································
//   Atomic property: frontSidePadColor
//····················································································································

  let prefs_frontSidePadColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSidePadColor)

//····················································································································

  var prefs_frontSidePadColor : NSColor {
    get { return prefs_frontSidePadColor_property.propval }
    set { prefs_frontSidePadColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_frontSidePadColor_property_selection : EBSelection <NSColor> { return prefs_frontSidePadColor_property.prop }

//····················································································································
//   Atomic property: backSidePadColor
//····················································································································

  let prefs_backSidePadColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSidePadColor)

//····················································································································

  var prefs_backSidePadColor : NSColor {
    get { return prefs_backSidePadColor_property.propval }
    set { prefs_backSidePadColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_backSidePadColor_property_selection : EBSelection <NSColor> { return prefs_backSidePadColor_property.prop }

//····················································································································
//   Atomic property: displayPackageBackSidePads
//····················································································································

  let prefs_displayPackageBackSidePads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayPackageBackSidePads)

//····················································································································

  var prefs_displayPackageBackSidePads : Bool {
    get { return prefs_displayPackageBackSidePads_property.propval }
    set { prefs_displayPackageBackSidePads_property.setProp (newValue) }
  }

//····················································································································

  var prefs_displayPackageBackSidePads_property_selection : EBSelection <Bool> { return prefs_displayPackageBackSidePads_property.prop }

//····················································································································
//   Atomic property: padNumberColor
//····················································································································

  let prefs_padNumberColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_padNumberColor)

//····················································································································

  var prefs_padNumberColor : NSColor {
    get { return prefs_padNumberColor_property.propval }
    set { prefs_padNumberColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_padNumberColor_property_selection : EBSelection <NSColor> { return prefs_padNumberColor_property.prop }

//····················································································································
//   Atomic property: padNumberFont
//····················································································································

  let prefs_padNumberFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padNumberFont)

//····················································································································

  var prefs_padNumberFont : NSFont {
    get { return prefs_padNumberFont_property.propval }
    set { prefs_padNumberFont_property.setProp (newValue) }
  }

//····················································································································

  var prefs_padNumberFont_property_selection : EBSelection <NSFont> { return prefs_padNumberFont_property.prop }

//····················································································································
//   Atomic property: showPadNumber
//····················································································································

  let prefs_showPadNumber_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_showPadNumber)

//····················································································································

  var prefs_showPadNumber : Bool {
    get { return prefs_showPadNumber_property.propval }
    set { prefs_showPadNumber_property.setProp (newValue) }
  }

//····················································································································

  var prefs_showPadNumber_property_selection : EBSelection <Bool> { return prefs_showPadNumber_property.prop }

//····················································································································
//   Atomic property: packageGuideColor
//····················································································································

  let prefs_packageGuideColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_packageGuideColor)

//····················································································································

  var prefs_packageGuideColor : NSColor {
    get { return prefs_packageGuideColor_property.propval }
    set { prefs_packageGuideColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_packageGuideColor_property_selection : EBSelection <NSColor> { return prefs_packageGuideColor_property.prop }

//····················································································································
//   Atomic property: packageDimensionColor
//····················································································································

  let prefs_packageDimensionColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_packageDimensionColor)

//····················································································································

  var prefs_packageDimensionColor : NSColor {
    get { return prefs_packageDimensionColor_property.propval }
    set { prefs_packageDimensionColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_packageDimensionColor_property_selection : EBSelection <NSColor> { return prefs_packageDimensionColor_property.prop }

//····················································································································
//   Atomic property: dimensionFont
//····················································································································

  let prefs_dimensionFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 2.0), prefKey: Preferences_dimensionFont)

//····················································································································

  var prefs_dimensionFont : NSFont {
    get { return prefs_dimensionFont_property.propval }
    set { prefs_dimensionFont_property.setProp (newValue) }
  }

//····················································································································

  var prefs_dimensionFont_property_selection : EBSelection <NSFont> { return prefs_dimensionFont_property.prop }

//····················································································································
//   Atomic property: padZoneColor
//····················································································································

  let prefs_padZoneColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.magenta, prefKey: Preferences_padZoneColor)

//····················································································································

  var prefs_padZoneColor : NSColor {
    get { return prefs_padZoneColor_property.propval }
    set { prefs_padZoneColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_padZoneColor_property_selection : EBSelection <NSColor> { return prefs_padZoneColor_property.prop }

//····················································································································
//   Atomic property: padZoneFont
//····················································································································

  let prefs_padZoneFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padZoneFont)

//····················································································································

  var prefs_padZoneFont : NSFont {
    get { return prefs_padZoneFont_property.propval }
    set { prefs_padZoneFont_property.setProp (newValue) }
  }

//····················································································································

  var prefs_padZoneFont_property_selection : EBSelection <NSFont> { return prefs_padZoneFont_property.prop }

//····················································································································
//   Atomic property: packageDrawingWidthMultipliedByTen
//····················································································································

  let prefs_packageDrawingWidthMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_packageDrawingWidthMultipliedByTen)

//····················································································································

  var prefs_packageDrawingWidthMultipliedByTen : Int {
    get { return prefs_packageDrawingWidthMultipliedByTen_property.propval }
    set { prefs_packageDrawingWidthMultipliedByTen_property.setProp (newValue) }
  }

//····················································································································

  var prefs_packageDrawingWidthMultipliedByTen_property_selection : EBSelection <Int> { return prefs_packageDrawingWidthMultipliedByTen_property.prop }

//····················································································································
//   Atomic property: mSymbolAndPackageGridDotColorForDevice
//····················································································································

  let prefs_mSymbolAndPackageGridDotColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_mSymbolAndPackageGridDotColorForDevice)

//····················································································································

  var prefs_mSymbolAndPackageGridDotColorForDevice : NSColor {
    get { return prefs_mSymbolAndPackageGridDotColorForDevice_property.propval }
    set { prefs_mSymbolAndPackageGridDotColorForDevice_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mSymbolAndPackageGridDotColorForDevice_property_selection : EBSelection <NSColor> { return prefs_mSymbolAndPackageGridDotColorForDevice_property.prop }

//····················································································································
//   Atomic property: mSymbolAndPackageGridLineColorForDevice
//····················································································································

  let prefs_mSymbolAndPackageGridLineColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mSymbolAndPackageGridLineColorForDevice)

//····················································································································

  var prefs_mSymbolAndPackageGridLineColorForDevice : NSColor {
    get { return prefs_mSymbolAndPackageGridLineColorForDevice_property.propval }
    set { prefs_mSymbolAndPackageGridLineColorForDevice_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mSymbolAndPackageGridLineColorForDevice_property_selection : EBSelection <NSColor> { return prefs_mSymbolAndPackageGridLineColorForDevice_property.prop }

//····················································································································
//   Atomic property: mSymbolAndPackageBackgroundColorForDevice
//····················································································································

  let prefs_mSymbolAndPackageBackgroundColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_mSymbolAndPackageBackgroundColorForDevice)

//····················································································································

  var prefs_mSymbolAndPackageBackgroundColorForDevice : NSColor {
    get { return prefs_mSymbolAndPackageBackgroundColorForDevice_property.propval }
    set { prefs_mSymbolAndPackageBackgroundColorForDevice_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mSymbolAndPackageBackgroundColorForDevice_property_selection : EBSelection <NSColor> { return prefs_mSymbolAndPackageBackgroundColorForDevice_property.prop }

//····················································································································
//   Atomic property: mPackageColorForDevice
//····················································································································

  let prefs_mPackageColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mPackageColorForDevice)

//····················································································································

  var prefs_mPackageColorForDevice : NSColor {
    get { return prefs_mPackageColorForDevice_property.propval }
    set { prefs_mPackageColorForDevice_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mPackageColorForDevice_property_selection : EBSelection <NSColor> { return prefs_mPackageColorForDevice_property.prop }

//····················································································································
//   Atomic property: mFrontSidePadColorForDevice
//····················································································································

  let prefs_mFrontSidePadColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_mFrontSidePadColorForDevice)

//····················································································································

  var prefs_mFrontSidePadColorForDevice : NSColor {
    get { return prefs_mFrontSidePadColorForDevice_property.propval }
    set { prefs_mFrontSidePadColorForDevice_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mFrontSidePadColorForDevice_property_selection : EBSelection <NSColor> { return prefs_mFrontSidePadColorForDevice_property.prop }

//····················································································································
//   Atomic property: mBottomSidePadColorForDevice
//····················································································································

  let prefs_mBottomSidePadColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mBottomSidePadColorForDevice)

//····················································································································

  var prefs_mBottomSidePadColorForDevice : NSColor {
    get { return prefs_mBottomSidePadColorForDevice_property.propval }
    set { prefs_mBottomSidePadColorForDevice_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mBottomSidePadColorForDevice_property_selection : EBSelection <NSColor> { return prefs_mBottomSidePadColorForDevice_property.prop }

//····················································································································
//   Atomic property: mPadNumberColorForDevice
//····················································································································

  let prefs_mPadNumberColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_mPadNumberColorForDevice)

//····················································································································

  var prefs_mPadNumberColorForDevice : NSColor {
    get { return prefs_mPadNumberColorForDevice_property.propval }
    set { prefs_mPadNumberColorForDevice_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mPadNumberColorForDevice_property_selection : EBSelection <NSColor> { return prefs_mPadNumberColorForDevice_property.prop }

//····················································································································
//   Atomic property: mPackageNameFontForDevice
//····················································································································

  let prefs_mPackageNameFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 9.0), prefKey: Preferences_mPackageNameFontForDevice)

//····················································································································

  var prefs_mPackageNameFontForDevice : NSFont {
    get { return prefs_mPackageNameFontForDevice_property.propval }
    set { prefs_mPackageNameFontForDevice_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mPackageNameFontForDevice_property_selection : EBSelection <NSFont> { return prefs_mPackageNameFontForDevice_property.prop }

//····················································································································
//   Atomic property: mPadNumberFontForDevice
//····················································································································

  let prefs_mPadNumberFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 5.0), prefKey: Preferences_mPadNumberFontForDevice)

//····················································································································

  var prefs_mPadNumberFontForDevice : NSFont {
    get { return prefs_mPadNumberFontForDevice_property.propval }
    set { prefs_mPadNumberFontForDevice_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mPadNumberFontForDevice_property_selection : EBSelection <NSFont> { return prefs_mPadNumberFontForDevice_property.prop }

//····················································································································
//   Atomic property: mSymbolColorForDevice
//····················································································································

  let prefs_mSymbolColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mSymbolColorForDevice)

//····················································································································

  var prefs_mSymbolColorForDevice : NSColor {
    get { return prefs_mSymbolColorForDevice_property.propval }
    set { prefs_mSymbolColorForDevice_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mSymbolColorForDevice_property_selection : EBSelection <NSColor> { return prefs_mSymbolColorForDevice_property.prop }

//····················································································································
//   Atomic property: mSymbolNameFontForDevice
//····················································································································

  let prefs_mSymbolNameFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 9.0), prefKey: Preferences_mSymbolNameFontForDevice)

//····················································································································

  var prefs_mSymbolNameFontForDevice : NSFont {
    get { return prefs_mSymbolNameFontForDevice_property.propval }
    set { prefs_mSymbolNameFontForDevice_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mSymbolNameFontForDevice_property_selection : EBSelection <NSFont> { return prefs_mSymbolNameFontForDevice_property.prop }

//····················································································································
//   Atomic property: mPinNameFontForDevice
//····················································································································

  let prefs_mPinNameFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_mPinNameFontForDevice)

//····················································································································

  var prefs_mPinNameFontForDevice : NSFont {
    get { return prefs_mPinNameFontForDevice_property.propval }
    set { prefs_mPinNameFontForDevice_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mPinNameFontForDevice_property_selection : EBSelection <NSFont> { return prefs_mPinNameFontForDevice_property.prop }

//····················································································································
//   Atomic property: symbolDrawingWidthForDeviceMultipliedByTen
//····················································································································

  let prefs_symbolDrawingWidthForDeviceMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_symbolDrawingWidthForDeviceMultipliedByTen)

//····················································································································

  var prefs_symbolDrawingWidthForDeviceMultipliedByTen : Int {
    get { return prefs_symbolDrawingWidthForDeviceMultipliedByTen_property.propval }
    set { prefs_symbolDrawingWidthForDeviceMultipliedByTen_property.setProp (newValue) }
  }

//····················································································································

  var prefs_symbolDrawingWidthForDeviceMultipliedByTen_property_selection : EBSelection <Int> { return prefs_symbolDrawingWidthForDeviceMultipliedByTen_property.prop }

//····················································································································
//   Atomic property: packageDrawingWidthForDeviceMultipliedByTen
//····················································································································

  let prefs_packageDrawingWidthForDeviceMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_packageDrawingWidthForDeviceMultipliedByTen)

//····················································································································

  var prefs_packageDrawingWidthForDeviceMultipliedByTen : Int {
    get { return prefs_packageDrawingWidthForDeviceMultipliedByTen_property.propval }
    set { prefs_packageDrawingWidthForDeviceMultipliedByTen_property.setProp (newValue) }
  }

//····················································································································

  var prefs_packageDrawingWidthForDeviceMultipliedByTen_property_selection : EBSelection <Int> { return prefs_packageDrawingWidthForDeviceMultipliedByTen_property.prop }

//····················································································································
//   Atomic property: schematicBackColor
//····················································································································

  let prefs_schematicBackColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_schematicBackColor)

//····················································································································

  var prefs_schematicBackColor : NSColor {
    get { return prefs_schematicBackColor_property.propval }
    set { prefs_schematicBackColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_schematicBackColor_property_selection : EBSelection <NSColor> { return prefs_schematicBackColor_property.prop }

//····················································································································
//   Atomic property: dotColorGridForSchematic
//····················································································································

  let prefs_dotColorGridForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_dotColorGridForSchematic)

//····················································································································

  var prefs_dotColorGridForSchematic : NSColor {
    get { return prefs_dotColorGridForSchematic_property.propval }
    set { prefs_dotColorGridForSchematic_property.setProp (newValue) }
  }

//····················································································································

  var prefs_dotColorGridForSchematic_property_selection : EBSelection <NSColor> { return prefs_dotColorGridForSchematic_property.prop }

//····················································································································
//   Atomic property: lineColorGridForSchematic
//····················································································································

  let prefs_lineColorGridForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_lineColorGridForSchematic)

//····················································································································

  var prefs_lineColorGridForSchematic : NSColor {
    get { return prefs_lineColorGridForSchematic_property.propval }
    set { prefs_lineColorGridForSchematic_property.setProp (newValue) }
  }

//····················································································································

  var prefs_lineColorGridForSchematic_property_selection : EBSelection <NSColor> { return prefs_lineColorGridForSchematic_property.prop }

//····················································································································
//   Atomic property: symbolColorForUnplacedComponentsForSchematic
//····················································································································

  let prefs_symbolColorForUnplacedComponentsForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.darkGray, prefKey: Preferences_symbolColorForUnplacedComponentsForSchematic)

//····················································································································

  var prefs_symbolColorForUnplacedComponentsForSchematic : NSColor {
    get { return prefs_symbolColorForUnplacedComponentsForSchematic_property.propval }
    set { prefs_symbolColorForUnplacedComponentsForSchematic_property.setProp (newValue) }
  }

//····················································································································

  var prefs_symbolColorForUnplacedComponentsForSchematic_property_selection : EBSelection <NSColor> { return prefs_symbolColorForUnplacedComponentsForSchematic_property.prop }

//····················································································································
//   Atomic property: symbolColorForSchematic
//····················································································································

  let prefs_symbolColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_symbolColorForSchematic)

//····················································································································

  var prefs_symbolColorForSchematic : NSColor {
    get { return prefs_symbolColorForSchematic_property.propval }
    set { prefs_symbolColorForSchematic_property.setProp (newValue) }
  }

//····················································································································

  var prefs_symbolColorForSchematic_property_selection : EBSelection <NSColor> { return prefs_symbolColorForSchematic_property.prop }

//····················································································································
//   Atomic property: pinNameFontForSchematic
//····················································································································

  let prefs_pinNameFontForSchematic_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNameFontForSchematic)

//····················································································································

  var prefs_pinNameFontForSchematic : NSFont {
    get { return prefs_pinNameFontForSchematic_property.propval }
    set { prefs_pinNameFontForSchematic_property.setProp (newValue) }
  }

//····················································································································

  var prefs_pinNameFontForSchematic_property_selection : EBSelection <NSFont> { return prefs_pinNameFontForSchematic_property.prop }

//····················································································································
//   Atomic property: pinNameColorForSchematic
//····················································································································

  let prefs_pinNameColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_pinNameColorForSchematic)

//····················································································································

  var prefs_pinNameColorForSchematic : NSColor {
    get { return prefs_pinNameColorForSchematic_property.propval }
    set { prefs_pinNameColorForSchematic_property.setProp (newValue) }
  }

//····················································································································

  var prefs_pinNameColorForSchematic_property_selection : EBSelection <NSColor> { return prefs_pinNameColorForSchematic_property.prop }

//····················································································································
//   Atomic property: pinNumberFontForSchematic
//····················································································································

  let prefs_pinNumberFontForSchematic_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNumberFontForSchematic)

//····················································································································

  var prefs_pinNumberFontForSchematic : NSFont {
    get { return prefs_pinNumberFontForSchematic_property.propval }
    set { prefs_pinNumberFontForSchematic_property.setProp (newValue) }
  }

//····················································································································

  var prefs_pinNumberFontForSchematic_property_selection : EBSelection <NSFont> { return prefs_pinNumberFontForSchematic_property.prop }

//····················································································································
//   Atomic property: pinNumberColorForSchematic
//····················································································································

  let prefs_pinNumberColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.darkGray, prefKey: Preferences_pinNumberColorForSchematic)

//····················································································································

  var prefs_pinNumberColorForSchematic : NSColor {
    get { return prefs_pinNumberColorForSchematic_property.propval }
    set { prefs_pinNumberColorForSchematic_property.setProp (newValue) }
  }

//····················································································································

  var prefs_pinNumberColorForSchematic_property_selection : EBSelection <NSColor> { return prefs_pinNumberColorForSchematic_property.prop }

//····················································································································
//   Atomic property: connectionColorForSchematic
//····················································································································

  let prefs_connectionColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_connectionColorForSchematic)

//····················································································································

  var prefs_connectionColorForSchematic : NSColor {
    get { return prefs_connectionColorForSchematic_property.propval }
    set { prefs_connectionColorForSchematic_property.setProp (newValue) }
  }

//····················································································································

  var prefs_connectionColorForSchematic_property_selection : EBSelection <NSColor> { return prefs_connectionColorForSchematic_property.prop }

//····················································································································
//   Atomic property: symbolDrawingWidthMultipliedByTenForSchematic
//····················································································································

  let prefs_symbolDrawingWidthMultipliedByTenForSchematic_property = EBPreferencesProperty_Int (defaultValue: 5, prefKey: Preferences_symbolDrawingWidthMultipliedByTenForSchematic)

//····················································································································

  var prefs_symbolDrawingWidthMultipliedByTenForSchematic : Int {
    get { return prefs_symbolDrawingWidthMultipliedByTenForSchematic_property.propval }
    set { prefs_symbolDrawingWidthMultipliedByTenForSchematic_property.setProp (newValue) }
  }

//····················································································································

  var prefs_symbolDrawingWidthMultipliedByTenForSchematic_property_selection : EBSelection <Int> { return prefs_symbolDrawingWidthMultipliedByTenForSchematic_property.prop }

//····················································································································
//   Atomic property: crossColorGridForBoard
//····················································································································

  let prefs_crossColorGridForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_crossColorGridForBoard)

//····················································································································

  var prefs_crossColorGridForBoard : NSColor {
    get { return prefs_crossColorGridForBoard_property.propval }
    set { prefs_crossColorGridForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_crossColorGridForBoard_property_selection : EBSelection <NSColor> { return prefs_crossColorGridForBoard_property.prop }

//····················································································································
//   Atomic property: lineColorGridForBoard
//····················································································································

  let prefs_lineColorGridForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.lightGray, prefKey: Preferences_lineColorGridForBoard)

//····················································································································

  var prefs_lineColorGridForBoard : NSColor {
    get { return prefs_lineColorGridForBoard_property.propval }
    set { prefs_lineColorGridForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_lineColorGridForBoard_property_selection : EBSelection <NSColor> { return prefs_lineColorGridForBoard_property.prop }

//····················································································································
//   Atomic property: boardBackgroundColorForBoard
//····················································································································

  let prefs_boardBackgroundColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_boardBackgroundColorForBoard)

//····················································································································

  var prefs_boardBackgroundColorForBoard : NSColor {
    get { return prefs_boardBackgroundColorForBoard_property.propval }
    set { prefs_boardBackgroundColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_boardBackgroundColorForBoard_property_selection : EBSelection <NSColor> { return prefs_boardBackgroundColorForBoard_property.prop }

//····················································································································
//   Atomic property: errorBackgroundColorForBoard
//····················································································································

  let prefs_errorBackgroundColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_errorBackgroundColorForBoard)

//····················································································································

  var prefs_errorBackgroundColorForBoard : NSColor {
    get { return prefs_errorBackgroundColorForBoard_property.propval }
    set { prefs_errorBackgroundColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_errorBackgroundColorForBoard_property_selection : EBSelection <NSColor> { return prefs_errorBackgroundColorForBoard_property.prop }

//····················································································································
//   Atomic property: drawErrorBackgroundForBoard
//····················································································································

  let prefs_drawErrorBackgroundForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_drawErrorBackgroundForBoard)

//····················································································································

  var prefs_drawErrorBackgroundForBoard : Bool {
    get { return prefs_drawErrorBackgroundForBoard_property.propval }
    set { prefs_drawErrorBackgroundForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_drawErrorBackgroundForBoard_property_selection : EBSelection <Bool> { return prefs_drawErrorBackgroundForBoard_property.prop }

//····················································································································
//   Atomic property: warningBackgroundColorForBoard
//····················································································································

  let prefs_warningBackgroundColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_warningBackgroundColorForBoard)

//····················································································································

  var prefs_warningBackgroundColorForBoard : NSColor {
    get { return prefs_warningBackgroundColorForBoard_property.propval }
    set { prefs_warningBackgroundColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_warningBackgroundColorForBoard_property_selection : EBSelection <NSColor> { return prefs_warningBackgroundColorForBoard_property.prop }

//····················································································································
//   Atomic property: drawWarningBackgroundForBoard
//····················································································································

  let prefs_drawWarningBackgroundForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_drawWarningBackgroundForBoard)

//····················································································································

  var prefs_drawWarningBackgroundForBoard : Bool {
    get { return prefs_drawWarningBackgroundForBoard_property.propval }
    set { prefs_drawWarningBackgroundForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_drawWarningBackgroundForBoard_property_selection : EBSelection <Bool> { return prefs_drawWarningBackgroundForBoard_property.prop }

//····················································································································
//   Atomic property: boardLimitsColorForBoard
//····················································································································

  let prefs_boardLimitsColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_boardLimitsColorForBoard)

//····················································································································

  var prefs_boardLimitsColorForBoard : NSColor {
    get { return prefs_boardLimitsColorForBoard_property.propval }
    set { prefs_boardLimitsColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_boardLimitsColorForBoard_property_selection : EBSelection <NSColor> { return prefs_boardLimitsColorForBoard_property.prop }

//····················································································································
//   Atomic property: boardClearanceColorForBoard
//····················································································································

  let prefs_boardClearanceColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_boardClearanceColorForBoard)

//····················································································································

  var prefs_boardClearanceColorForBoard : NSColor {
    get { return prefs_boardClearanceColorForBoard_property.propval }
    set { prefs_boardClearanceColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_boardClearanceColorForBoard_property_selection : EBSelection <NSColor> { return prefs_boardClearanceColorForBoard_property.prop }

//····················································································································
//   Atomic property: displayFrontRestrictRectangles
//····················································································································

  let prefs_displayFrontRestrictRectangles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayFrontRestrictRectangles)

//····················································································································

  var prefs_displayFrontRestrictRectangles : Bool {
    get { return prefs_displayFrontRestrictRectangles_property.propval }
    set { prefs_displayFrontRestrictRectangles_property.setProp (newValue) }
  }

//····················································································································

  var prefs_displayFrontRestrictRectangles_property_selection : EBSelection <Bool> { return prefs_displayFrontRestrictRectangles_property.prop }

//····················································································································
//   Atomic property: frontSideRestrictRectangleColorForBoard
//····················································································································

  let prefs_frontSideRestrictRectangleColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSideRestrictRectangleColorForBoard)

//····················································································································

  var prefs_frontSideRestrictRectangleColorForBoard : NSColor {
    get { return prefs_frontSideRestrictRectangleColorForBoard_property.propval }
    set { prefs_frontSideRestrictRectangleColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_frontSideRestrictRectangleColorForBoard_property_selection : EBSelection <NSColor> { return prefs_frontSideRestrictRectangleColorForBoard_property.prop }

//····················································································································
//   Atomic property: displayBackRestrictRectangles
//····················································································································

  let prefs_displayBackRestrictRectangles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayBackRestrictRectangles)

//····················································································································

  var prefs_displayBackRestrictRectangles : Bool {
    get { return prefs_displayBackRestrictRectangles_property.propval }
    set { prefs_displayBackRestrictRectangles_property.setProp (newValue) }
  }

//····················································································································

  var prefs_displayBackRestrictRectangles_property_selection : EBSelection <Bool> { return prefs_displayBackRestrictRectangles_property.prop }

//····················································································································
//   Atomic property: backSideRestrictRectangleColorForBoard
//····················································································································

  let prefs_backSideRestrictRectangleColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSideRestrictRectangleColorForBoard)

//····················································································································

  var prefs_backSideRestrictRectangleColorForBoard : NSColor {
    get { return prefs_backSideRestrictRectangleColorForBoard_property.propval }
    set { prefs_backSideRestrictRectangleColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_backSideRestrictRectangleColorForBoard_property_selection : EBSelection <NSColor> { return prefs_backSideRestrictRectangleColorForBoard_property.prop }

//····················································································································
//   Atomic property: displayFrontLegendForBoard
//····················································································································

  let prefs_displayFrontLegendForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayFrontLegendForBoard)

//····················································································································

  var prefs_displayFrontLegendForBoard : Bool {
    get { return prefs_displayFrontLegendForBoard_property.propval }
    set { prefs_displayFrontLegendForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_displayFrontLegendForBoard_property_selection : EBSelection <Bool> { return prefs_displayFrontLegendForBoard_property.prop }

//····················································································································
//   Atomic property: frontSideLegendColorForBoard
//····················································································································

  let prefs_frontSideLegendColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_frontSideLegendColorForBoard)

//····················································································································

  var prefs_frontSideLegendColorForBoard : NSColor {
    get { return prefs_frontSideLegendColorForBoard_property.propval }
    set { prefs_frontSideLegendColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_frontSideLegendColorForBoard_property_selection : EBSelection <NSColor> { return prefs_frontSideLegendColorForBoard_property.prop }

//····················································································································
//   Atomic property: displayFrontLayoutForBoard
//····················································································································

  let prefs_displayFrontLayoutForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayFrontLayoutForBoard)

//····················································································································

  var prefs_displayFrontLayoutForBoard : Bool {
    get { return prefs_displayFrontLayoutForBoard_property.propval }
    set { prefs_displayFrontLayoutForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_displayFrontLayoutForBoard_property_selection : EBSelection <Bool> { return prefs_displayFrontLayoutForBoard_property.prop }

//····················································································································
//   Atomic property: frontSideLayoutColorForBoard
//····················································································································

  let prefs_frontSideLayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSideLayoutColorForBoard)

//····················································································································

  var prefs_frontSideLayoutColorForBoard : NSColor {
    get { return prefs_frontSideLayoutColorForBoard_property.propval }
    set { prefs_frontSideLayoutColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_frontSideLayoutColorForBoard_property_selection : EBSelection <NSColor> { return prefs_frontSideLayoutColorForBoard_property.prop }

//····················································································································
//   Atomic property: displayBackLayoutForBoard
//····················································································································

  let prefs_displayBackLayoutForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayBackLayoutForBoard)

//····················································································································

  var prefs_displayBackLayoutForBoard : Bool {
    get { return prefs_displayBackLayoutForBoard_property.propval }
    set { prefs_displayBackLayoutForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_displayBackLayoutForBoard_property_selection : EBSelection <Bool> { return prefs_displayBackLayoutForBoard_property.prop }

//····················································································································
//   Atomic property: backSideLayoutColorForBoard
//····················································································································

  let prefs_backSideLayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSideLayoutColorForBoard)

//····················································································································

  var prefs_backSideLayoutColorForBoard : NSColor {
    get { return prefs_backSideLayoutColorForBoard_property.propval }
    set { prefs_backSideLayoutColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_backSideLayoutColorForBoard_property_selection : EBSelection <NSColor> { return prefs_backSideLayoutColorForBoard_property.prop }

//····················································································································
//   Atomic property: displayBackLegendForBoard
//····················································································································

  let prefs_displayBackLegendForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayBackLegendForBoard)

//····················································································································

  var prefs_displayBackLegendForBoard : Bool {
    get { return prefs_displayBackLegendForBoard_property.propval }
    set { prefs_displayBackLegendForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_displayBackLegendForBoard_property_selection : EBSelection <Bool> { return prefs_displayBackLegendForBoard_property.prop }

//····················································································································
//   Atomic property: backSideLegendColorForBoard
//····················································································································

  let prefs_backSideLegendColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_backSideLegendColorForBoard)

//····················································································································

  var prefs_backSideLegendColorForBoard : NSColor {
    get { return prefs_backSideLegendColorForBoard_property.propval }
    set { prefs_backSideLegendColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_backSideLegendColorForBoard_property_selection : EBSelection <NSColor> { return prefs_backSideLegendColorForBoard_property.prop }

//····················································································································
//   Atomic property: displayFrontPadsForBoard
//····················································································································

  let prefs_displayFrontPadsForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayFrontPadsForBoard)

//····················································································································

  var prefs_displayFrontPadsForBoard : Bool {
    get { return prefs_displayFrontPadsForBoard_property.propval }
    set { prefs_displayFrontPadsForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_displayFrontPadsForBoard_property_selection : EBSelection <Bool> { return prefs_displayFrontPadsForBoard_property.prop }

//····················································································································
//   Atomic property: frontSidePadColorForBoard
//····················································································································

  let prefs_frontSidePadColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSidePadColorForBoard)

//····················································································································

  var prefs_frontSidePadColorForBoard : NSColor {
    get { return prefs_frontSidePadColorForBoard_property.propval }
    set { prefs_frontSidePadColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_frontSidePadColorForBoard_property_selection : EBSelection <NSColor> { return prefs_frontSidePadColorForBoard_property.prop }

//····················································································································
//   Atomic property: displayBackPadsForBoard
//····················································································································

  let prefs_displayBackPadsForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayBackPadsForBoard)

//····················································································································

  var prefs_displayBackPadsForBoard : Bool {
    get { return prefs_displayBackPadsForBoard_property.propval }
    set { prefs_displayBackPadsForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_displayBackPadsForBoard_property_selection : EBSelection <Bool> { return prefs_displayBackPadsForBoard_property.prop }

//····················································································································
//   Atomic property: backSidePadColorForBoard
//····················································································································

  let prefs_backSidePadColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSidePadColorForBoard)

//····················································································································

  var prefs_backSidePadColorForBoard : NSColor {
    get { return prefs_backSidePadColorForBoard_property.propval }
    set { prefs_backSidePadColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_backSidePadColorForBoard_property_selection : EBSelection <NSColor> { return prefs_backSidePadColorForBoard_property.prop }

//····················································································································
//   Atomic property: displayPadNumbersForBoard
//····················································································································

  let prefs_displayPadNumbersForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayPadNumbersForBoard)

//····················································································································

  var prefs_displayPadNumbersForBoard : Bool {
    get { return prefs_displayPadNumbersForBoard_property.propval }
    set { prefs_displayPadNumbersForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_displayPadNumbersForBoard_property_selection : EBSelection <Bool> { return prefs_displayPadNumbersForBoard_property.prop }

//····················································································································
//   Atomic property: padNumberFontForBoard
//····················································································································

  let prefs_padNumberFontForBoard_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padNumberFontForBoard)

//····················································································································

  var prefs_padNumberFontForBoard : NSFont {
    get { return prefs_padNumberFontForBoard_property.propval }
    set { prefs_padNumberFontForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_padNumberFontForBoard_property_selection : EBSelection <NSFont> { return prefs_padNumberFontForBoard_property.prop }

//····················································································································
//   Atomic property: padNumberColorForBoard
//····················································································································

  let prefs_padNumberColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_padNumberColorForBoard)

//····················································································································

  var prefs_padNumberColorForBoard : NSColor {
    get { return prefs_padNumberColorForBoard_property.propval }
    set { prefs_padNumberColorForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_padNumberColorForBoard_property_selection : EBSelection <NSColor> { return prefs_padNumberColorForBoard_property.prop }

//····················································································································
//   Atomic property: packageDrawingWidthMultpliedByTenForBoard
//····················································································································

  let prefs_packageDrawingWidthMultpliedByTenForBoard_property = EBPreferencesProperty_Int (defaultValue: 5, prefKey: Preferences_packageDrawingWidthMultpliedByTenForBoard)

//····················································································································

  var prefs_packageDrawingWidthMultpliedByTenForBoard : Int {
    get { return prefs_packageDrawingWidthMultpliedByTenForBoard_property.propval }
    set { prefs_packageDrawingWidthMultpliedByTenForBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_packageDrawingWidthMultpliedByTenForBoard_property_selection : EBSelection <Int> { return prefs_packageDrawingWidthMultpliedByTenForBoard_property.prop }

//····················································································································
//   Atomic property: mShowRotationKnobInBoard
//····················································································································

  let prefs_mShowRotationKnobInBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mShowRotationKnobInBoard)

//····················································································································

  var prefs_mShowRotationKnobInBoard : Bool {
    get { return prefs_mShowRotationKnobInBoard_property.propval }
    set { prefs_mShowRotationKnobInBoard_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mShowRotationKnobInBoard_property_selection : EBSelection <Bool> { return prefs_mShowRotationKnobInBoard_property.prop }

//····················································································································
//   Atomic property: showGerberDrawingFlow
//····················································································································

  let prefs_showGerberDrawingFlow_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_showGerberDrawingFlow)

//····················································································································

  var prefs_showGerberDrawingFlow : Bool {
    get { return prefs_showGerberDrawingFlow_property.propval }
    set { prefs_showGerberDrawingFlow_property.setProp (newValue) }
  }

//····················································································································

  var prefs_showGerberDrawingFlow_property_selection : EBSelection <Bool> { return prefs_showGerberDrawingFlow_property.prop }

//····················································································································
//   Atomic property: showGerberDrawingIndexes
//····················································································································

  let prefs_showGerberDrawingIndexes_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_showGerberDrawingIndexes)

//····················································································································

  var prefs_showGerberDrawingIndexes : Bool {
    get { return prefs_showGerberDrawingIndexes_property.propval }
    set { prefs_showGerberDrawingIndexes_property.setProp (newValue) }
  }

//····················································································································

  var prefs_showGerberDrawingIndexes_property_selection : EBSelection <Bool> { return prefs_showGerberDrawingIndexes_property.prop }

//····················································································································
//   Atomic property: fontEditionTransparency
//····················································································································

  let prefs_fontEditionTransparency_property = EBPreferencesProperty_Double (defaultValue: 0.5, prefKey: Preferences_fontEditionTransparency)

//····················································································································

  var prefs_fontEditionTransparency : Double {
    get { return prefs_fontEditionTransparency_property.propval }
    set { prefs_fontEditionTransparency_property.setProp (newValue) }
  }

//····················································································································

  var prefs_fontEditionTransparency_property_selection : EBSelection <Double> { return prefs_fontEditionTransparency_property.prop }

//····················································································································
//   Atomic property: checkForSystemLibraryAtStartUp
//····················································································································

  let prefs_checkForSystemLibraryAtStartUp_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_checkForSystemLibraryAtStartUp)

//····················································································································

  var prefs_checkForSystemLibraryAtStartUp : Bool {
    get { return prefs_checkForSystemLibraryAtStartUp_property.propval }
    set { prefs_checkForSystemLibraryAtStartUp_property.setProp (newValue) }
  }

//····················································································································

  var prefs_checkForSystemLibraryAtStartUp_property_selection : EBSelection <Bool> { return prefs_checkForSystemLibraryAtStartUp_property.prop }

//····················································································································
//   Atomic property: systemLibraryCheckTimeInterval
//····················································································································

  let prefs_systemLibraryCheckTimeInterval_property = EBPreferencesProperty_Int (defaultValue: 0, prefKey: Preferences_systemLibraryCheckTimeInterval)

//····················································································································

  var prefs_systemLibraryCheckTimeInterval : Int {
    get { return prefs_systemLibraryCheckTimeInterval_property.propval }
    set { prefs_systemLibraryCheckTimeInterval_property.setProp (newValue) }
  }

//····················································································································

  var prefs_systemLibraryCheckTimeInterval_property_selection : EBSelection <Int> { return prefs_systemLibraryCheckTimeInterval_property.prop }

//····················································································································
//   Atomic property: mergerModelViewHorizontalFlip
//····················································································································

  let prefs_mergerModelViewHorizontalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewHorizontalFlip)

//····················································································································

  var prefs_mergerModelViewHorizontalFlip : Bool {
    get { return prefs_mergerModelViewHorizontalFlip_property.propval }
    set { prefs_mergerModelViewHorizontalFlip_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewHorizontalFlip_property_selection : EBSelection <Bool> { return prefs_mergerModelViewHorizontalFlip_property.prop }

//····················································································································
//   Atomic property: mergerModelViewVerticalFlip
//····················································································································

  let prefs_mergerModelViewVerticalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewVerticalFlip)

//····················································································································

  var prefs_mergerModelViewVerticalFlip : Bool {
    get { return prefs_mergerModelViewVerticalFlip_property.propval }
    set { prefs_mergerModelViewVerticalFlip_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewVerticalFlip_property_selection : EBSelection <Bool> { return prefs_mergerModelViewVerticalFlip_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayHoles
//····················································································································

  let prefs_mergerModelViewDisplayHoles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayHoles)

//····················································································································

  var prefs_mergerModelViewDisplayHoles : Bool {
    get { return prefs_mergerModelViewDisplayHoles_property.propval }
    set { prefs_mergerModelViewDisplayHoles_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayHoles_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayHoles_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayVias
//····················································································································

  let prefs_mergerModelViewDisplayVias_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayVias)

//····················································································································

  var prefs_mergerModelViewDisplayVias : Bool {
    get { return prefs_mergerModelViewDisplayVias_property.propval }
    set { prefs_mergerModelViewDisplayVias_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayVias_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayVias_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontPads
//····················································································································

  let prefs_mergerModelViewDisplayFrontPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayFrontPads)

//····················································································································

  var prefs_mergerModelViewDisplayFrontPads : Bool {
    get { return prefs_mergerModelViewDisplayFrontPads_property.propval }
    set { prefs_mergerModelViewDisplayFrontPads_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayFrontPads_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayFrontPads_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayInternalBoardsLimits
//····················································································································

  let prefs_mergerModelViewDisplayInternalBoardsLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayInternalBoardsLimits)

//····················································································································

  var prefs_mergerModelViewDisplayInternalBoardsLimits : Bool {
    get { return prefs_mergerModelViewDisplayInternalBoardsLimits_property.propval }
    set { prefs_mergerModelViewDisplayInternalBoardsLimits_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayInternalBoardsLimits_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayInternalBoardsLimits_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayBoardLimits
//····················································································································

  let prefs_mergerModelViewDisplayBoardLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBoardLimits)

//····················································································································

  var prefs_mergerModelViewDisplayBoardLimits : Bool {
    get { return prefs_mergerModelViewDisplayBoardLimits_property.propval }
    set { prefs_mergerModelViewDisplayBoardLimits_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayBoardLimits_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayBoardLimits_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontComponentNames
//····················································································································

  let prefs_mergerModelViewDisplayFrontComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontComponentNames)

//····················································································································

  var prefs_mergerModelViewDisplayFrontComponentNames : Bool {
    get { return prefs_mergerModelViewDisplayFrontComponentNames_property.propval }
    set { prefs_mergerModelViewDisplayFrontComponentNames_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayFrontComponentNames_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayFrontComponentNames_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontComponentValues
//····················································································································

  let prefs_mergerModelViewDisplayFrontComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontComponentValues)

//····················································································································

  var prefs_mergerModelViewDisplayFrontComponentValues : Bool {
    get { return prefs_mergerModelViewDisplayFrontComponentValues_property.propval }
    set { prefs_mergerModelViewDisplayFrontComponentValues_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayFrontComponentValues_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayFrontComponentValues_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontPackages
//····················································································································

  let prefs_mergerModelViewDisplayFrontPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontPackages)

//····················································································································

  var prefs_mergerModelViewDisplayFrontPackages : Bool {
    get { return prefs_mergerModelViewDisplayFrontPackages_property.propval }
    set { prefs_mergerModelViewDisplayFrontPackages_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayFrontPackages_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayFrontPackages_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontLegendTexts
//····················································································································

  let prefs_mergerModelViewDisplayFrontLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLegendTexts)

//····················································································································

  var prefs_mergerModelViewDisplayFrontLegendTexts : Bool {
    get { return prefs_mergerModelViewDisplayFrontLegendTexts_property.propval }
    set { prefs_mergerModelViewDisplayFrontLegendTexts_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayFrontLegendTexts_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayFrontLegendTexts_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontTracks
//····················································································································

  let prefs_mergerModelViewDisplayFrontTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontTracks)

//····················································································································

  var prefs_mergerModelViewDisplayFrontTracks : Bool {
    get { return prefs_mergerModelViewDisplayFrontTracks_property.propval }
    set { prefs_mergerModelViewDisplayFrontTracks_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayFrontTracks_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayFrontTracks_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontLayoutTexts
//····················································································································

  let prefs_mergerModelViewDisplayFrontLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLayoutTexts)

//····················································································································

  var prefs_mergerModelViewDisplayFrontLayoutTexts : Bool {
    get { return prefs_mergerModelViewDisplayFrontLayoutTexts_property.propval }
    set { prefs_mergerModelViewDisplayFrontLayoutTexts_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayFrontLayoutTexts_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayFrontLayoutTexts_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackPads
//····················································································································

  let prefs_mergerModelViewDisplayBackPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBackPads)

//····················································································································

  var prefs_mergerModelViewDisplayBackPads : Bool {
    get { return prefs_mergerModelViewDisplayBackPads_property.propval }
    set { prefs_mergerModelViewDisplayBackPads_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayBackPads_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayBackPads_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackComponentNames
//····················································································································

  let prefs_mergerModelViewDisplayBackComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackComponentNames)

//····················································································································

  var prefs_mergerModelViewDisplayBackComponentNames : Bool {
    get { return prefs_mergerModelViewDisplayBackComponentNames_property.propval }
    set { prefs_mergerModelViewDisplayBackComponentNames_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayBackComponentNames_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayBackComponentNames_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackComponentValues
//····················································································································

  let prefs_mergerModelViewDisplayBackComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackComponentValues)

//····················································································································

  var prefs_mergerModelViewDisplayBackComponentValues : Bool {
    get { return prefs_mergerModelViewDisplayBackComponentValues_property.propval }
    set { prefs_mergerModelViewDisplayBackComponentValues_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayBackComponentValues_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayBackComponentValues_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackLegendTexts
//····················································································································

  let prefs_mergerModelViewDisplayBackLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackLegendTexts)

//····················································································································

  var prefs_mergerModelViewDisplayBackLegendTexts : Bool {
    get { return prefs_mergerModelViewDisplayBackLegendTexts_property.propval }
    set { prefs_mergerModelViewDisplayBackLegendTexts_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayBackLegendTexts_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayBackLegendTexts_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackPackages
//····················································································································

  let prefs_mergerModelViewDisplayBackPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackPackages)

//····················································································································

  var prefs_mergerModelViewDisplayBackPackages : Bool {
    get { return prefs_mergerModelViewDisplayBackPackages_property.propval }
    set { prefs_mergerModelViewDisplayBackPackages_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayBackPackages_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayBackPackages_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackTracks
//····················································································································

  let prefs_mergerModelViewDisplayBackTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackTracks)

//····················································································································

  var prefs_mergerModelViewDisplayBackTracks : Bool {
    get { return prefs_mergerModelViewDisplayBackTracks_property.propval }
    set { prefs_mergerModelViewDisplayBackTracks_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayBackTracks_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayBackTracks_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackLayoutTexts
//····················································································································

  let prefs_mergerModelViewDisplayBackLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackLayoutTexts)

//····················································································································

  var prefs_mergerModelViewDisplayBackLayoutTexts : Bool {
    get { return prefs_mergerModelViewDisplayBackLayoutTexts_property.propval }
    set { prefs_mergerModelViewDisplayBackLayoutTexts_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayBackLayoutTexts_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayBackLayoutTexts_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayFrontLegendLines
//····················································································································

  let prefs_mergerModelViewDisplayFrontLegendLines_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLegendLines)

//····················································································································

  var prefs_mergerModelViewDisplayFrontLegendLines : Bool {
    get { return prefs_mergerModelViewDisplayFrontLegendLines_property.propval }
    set { prefs_mergerModelViewDisplayFrontLegendLines_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayFrontLegendLines_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayFrontLegendLines_property.prop }

//····················································································································
//   Atomic property: mergerModelViewDisplayBackLegendLines
//····················································································································

  let prefs_mergerModelViewDisplayBackLegendLines_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBackLegendLines)

//····················································································································

  var prefs_mergerModelViewDisplayBackLegendLines : Bool {
    get { return prefs_mergerModelViewDisplayBackLegendLines_property.propval }
    set { prefs_mergerModelViewDisplayBackLegendLines_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerModelViewDisplayBackLegendLines_property_selection : EBSelection <Bool> { return prefs_mergerModelViewDisplayBackLegendLines_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewHorizontalFlip
//····················································································································

  let prefs_mergerBoardViewHorizontalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewHorizontalFlip)

//····················································································································

  var prefs_mergerBoardViewHorizontalFlip : Bool {
    get { return prefs_mergerBoardViewHorizontalFlip_property.propval }
    set { prefs_mergerBoardViewHorizontalFlip_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewHorizontalFlip_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewHorizontalFlip_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewVerticalFlip
//····················································································································

  let prefs_mergerBoardViewVerticalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewVerticalFlip)

//····················································································································

  var prefs_mergerBoardViewVerticalFlip : Bool {
    get { return prefs_mergerBoardViewVerticalFlip_property.propval }
    set { prefs_mergerBoardViewVerticalFlip_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewVerticalFlip_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewVerticalFlip_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayHoles
//····················································································································

  let prefs_mergerBoardViewDisplayHoles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayHoles)

//····················································································································

  var prefs_mergerBoardViewDisplayHoles : Bool {
    get { return prefs_mergerBoardViewDisplayHoles_property.propval }
    set { prefs_mergerBoardViewDisplayHoles_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayHoles_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayHoles_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayVias
//····················································································································

  let prefs_mergerBoardViewDisplayVias_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayVias)

//····················································································································

  var prefs_mergerBoardViewDisplayVias : Bool {
    get { return prefs_mergerBoardViewDisplayVias_property.propval }
    set { prefs_mergerBoardViewDisplayVias_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayVias_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayVias_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontPads
//····················································································································

  let prefs_mergerBoardViewDisplayFrontPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayFrontPads)

//····················································································································

  var prefs_mergerBoardViewDisplayFrontPads : Bool {
    get { return prefs_mergerBoardViewDisplayFrontPads_property.propval }
    set { prefs_mergerBoardViewDisplayFrontPads_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayFrontPads_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayFrontPads_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayInternalBoardsLimits
//····················································································································

  let prefs_mergerBoardViewDisplayInternalBoardsLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayInternalBoardsLimits)

//····················································································································

  var prefs_mergerBoardViewDisplayInternalBoardsLimits : Bool {
    get { return prefs_mergerBoardViewDisplayInternalBoardsLimits_property.propval }
    set { prefs_mergerBoardViewDisplayInternalBoardsLimits_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayInternalBoardsLimits_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayInternalBoardsLimits_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBoardLimits
//····················································································································

  let prefs_mergerBoardViewDisplayBoardLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBoardLimits)

//····················································································································

  var prefs_mergerBoardViewDisplayBoardLimits : Bool {
    get { return prefs_mergerBoardViewDisplayBoardLimits_property.propval }
    set { prefs_mergerBoardViewDisplayBoardLimits_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayBoardLimits_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayBoardLimits_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontComponentNames
//····················································································································

  let prefs_mergerBoardViewDisplayFrontComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontComponentNames)

//····················································································································

  var prefs_mergerBoardViewDisplayFrontComponentNames : Bool {
    get { return prefs_mergerBoardViewDisplayFrontComponentNames_property.propval }
    set { prefs_mergerBoardViewDisplayFrontComponentNames_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayFrontComponentNames_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayFrontComponentNames_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontComponentValues
//····················································································································

  let prefs_mergerBoardViewDisplayFrontComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontComponentValues)

//····················································································································

  var prefs_mergerBoardViewDisplayFrontComponentValues : Bool {
    get { return prefs_mergerBoardViewDisplayFrontComponentValues_property.propval }
    set { prefs_mergerBoardViewDisplayFrontComponentValues_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayFrontComponentValues_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayFrontComponentValues_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontPackages
//····················································································································

  let prefs_mergerBoardViewDisplayFrontPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontPackages)

//····················································································································

  var prefs_mergerBoardViewDisplayFrontPackages : Bool {
    get { return prefs_mergerBoardViewDisplayFrontPackages_property.propval }
    set { prefs_mergerBoardViewDisplayFrontPackages_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayFrontPackages_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayFrontPackages_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontLegendTexts
//····················································································································

  let prefs_mergerBoardViewDisplayFrontLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLegendTexts)

//····················································································································

  var prefs_mergerBoardViewDisplayFrontLegendTexts : Bool {
    get { return prefs_mergerBoardViewDisplayFrontLegendTexts_property.propval }
    set { prefs_mergerBoardViewDisplayFrontLegendTexts_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayFrontLegendTexts_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayFrontLegendTexts_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontTracks
//····················································································································

  let prefs_mergerBoardViewDisplayFrontTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontTracks)

//····················································································································

  var prefs_mergerBoardViewDisplayFrontTracks : Bool {
    get { return prefs_mergerBoardViewDisplayFrontTracks_property.propval }
    set { prefs_mergerBoardViewDisplayFrontTracks_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayFrontTracks_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayFrontTracks_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontLayoutTexts
//····················································································································

  let prefs_mergerBoardViewDisplayFrontLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLayoutTexts)

//····················································································································

  var prefs_mergerBoardViewDisplayFrontLayoutTexts : Bool {
    get { return prefs_mergerBoardViewDisplayFrontLayoutTexts_property.propval }
    set { prefs_mergerBoardViewDisplayFrontLayoutTexts_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayFrontLayoutTexts_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayFrontLayoutTexts_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackPads
//····················································································································

  let prefs_mergerBoardViewDisplayBackPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBackPads)

//····················································································································

  var prefs_mergerBoardViewDisplayBackPads : Bool {
    get { return prefs_mergerBoardViewDisplayBackPads_property.propval }
    set { prefs_mergerBoardViewDisplayBackPads_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayBackPads_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayBackPads_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackComponentNames
//····················································································································

  let prefs_mergerBoardViewDisplayBackComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackComponentNames)

//····················································································································

  var prefs_mergerBoardViewDisplayBackComponentNames : Bool {
    get { return prefs_mergerBoardViewDisplayBackComponentNames_property.propval }
    set { prefs_mergerBoardViewDisplayBackComponentNames_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayBackComponentNames_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayBackComponentNames_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackComponentValues
//····················································································································

  let prefs_mergerBoardViewDisplayBackComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackComponentValues)

//····················································································································

  var prefs_mergerBoardViewDisplayBackComponentValues : Bool {
    get { return prefs_mergerBoardViewDisplayBackComponentValues_property.propval }
    set { prefs_mergerBoardViewDisplayBackComponentValues_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayBackComponentValues_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayBackComponentValues_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackLegendTexts
//····················································································································

  let prefs_mergerBoardViewDisplayBackLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackLegendTexts)

//····················································································································

  var prefs_mergerBoardViewDisplayBackLegendTexts : Bool {
    get { return prefs_mergerBoardViewDisplayBackLegendTexts_property.propval }
    set { prefs_mergerBoardViewDisplayBackLegendTexts_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayBackLegendTexts_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayBackLegendTexts_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackPackages
//····················································································································

  let prefs_mergerBoardViewDisplayBackPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackPackages)

//····················································································································

  var prefs_mergerBoardViewDisplayBackPackages : Bool {
    get { return prefs_mergerBoardViewDisplayBackPackages_property.propval }
    set { prefs_mergerBoardViewDisplayBackPackages_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayBackPackages_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayBackPackages_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackTracks
//····················································································································

  let prefs_mergerBoardViewDisplayBackTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackTracks)

//····················································································································

  var prefs_mergerBoardViewDisplayBackTracks : Bool {
    get { return prefs_mergerBoardViewDisplayBackTracks_property.propval }
    set { prefs_mergerBoardViewDisplayBackTracks_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayBackTracks_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayBackTracks_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackLayoutTexts
//····················································································································

  let prefs_mergerBoardViewDisplayBackLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackLayoutTexts)

//····················································································································

  var prefs_mergerBoardViewDisplayBackLayoutTexts : Bool {
    get { return prefs_mergerBoardViewDisplayBackLayoutTexts_property.propval }
    set { prefs_mergerBoardViewDisplayBackLayoutTexts_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayBackLayoutTexts_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayBackLayoutTexts_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayFrontLegendLines
//····················································································································

  let prefs_mergerBoardViewDisplayFrontLegendLines_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLegendLines)

//····················································································································

  var prefs_mergerBoardViewDisplayFrontLegendLines : Bool {
    get { return prefs_mergerBoardViewDisplayFrontLegendLines_property.propval }
    set { prefs_mergerBoardViewDisplayFrontLegendLines_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayFrontLegendLines_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayFrontLegendLines_property.prop }

//····················································································································
//   Atomic property: mergerBoardViewDisplayBackLegendLines
//····················································································································

  let prefs_mergerBoardViewDisplayBackLegendLines_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBackLegendLines)

//····················································································································

  var prefs_mergerBoardViewDisplayBackLegendLines : Bool {
    get { return prefs_mergerBoardViewDisplayBackLegendLines_property.propval }
    set { prefs_mergerBoardViewDisplayBackLegendLines_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerBoardViewDisplayBackLegendLines_property_selection : EBSelection <Bool> { return prefs_mergerBoardViewDisplayBackLegendLines_property.prop }

//····················································································································
//   Atomic property: mergerColorHoles
//····················································································································

  let prefs_mergerColorHoles_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_mergerColorHoles)

//····················································································································

  var prefs_mergerColorHoles : NSColor {
    get { return prefs_mergerColorHoles_property.propval }
    set { prefs_mergerColorHoles_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorHoles_property_selection : EBSelection <NSColor> { return prefs_mergerColorHoles_property.prop }

//····················································································································
//   Atomic property: mergerColorVias
//····················································································································

  let prefs_mergerColorVias_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_mergerColorVias)

//····················································································································

  var prefs_mergerColorVias : NSColor {
    get { return prefs_mergerColorVias_property.propval }
    set { prefs_mergerColorVias_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorVias_property_selection : EBSelection <NSColor> { return prefs_mergerColorVias_property.prop }

//····················································································································
//   Atomic property: mergerColorFrontPads
//····················································································································

  let prefs_mergerColorFrontPads_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontPads)

//····················································································································

  var prefs_mergerColorFrontPads : NSColor {
    get { return prefs_mergerColorFrontPads_property.propval }
    set { prefs_mergerColorFrontPads_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorFrontPads_property_selection : EBSelection <NSColor> { return prefs_mergerColorFrontPads_property.prop }

//····················································································································
//   Atomic property: mergerColorBoardLimits
//····················································································································

  let prefs_mergerColorBoardLimits_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorBoardLimits)

//····················································································································

  var prefs_mergerColorBoardLimits : NSColor {
    get { return prefs_mergerColorBoardLimits_property.propval }
    set { prefs_mergerColorBoardLimits_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorBoardLimits_property_selection : EBSelection <NSColor> { return prefs_mergerColorBoardLimits_property.prop }

//····················································································································
//   Atomic property: mergerColorInternalBoardsLimits
//····················································································································

  let prefs_mergerColorInternalBoardsLimits_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_mergerColorInternalBoardsLimits)

//····················································································································

  var prefs_mergerColorInternalBoardsLimits : NSColor {
    get { return prefs_mergerColorInternalBoardsLimits_property.propval }
    set { prefs_mergerColorInternalBoardsLimits_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorInternalBoardsLimits_property_selection : EBSelection <NSColor> { return prefs_mergerColorInternalBoardsLimits_property.prop }

//····················································································································
//   Atomic property: mergerColorFrontComponentNames
//····················································································································

  let prefs_mergerColorFrontComponentNames_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontComponentNames)

//····················································································································

  var prefs_mergerColorFrontComponentNames : NSColor {
    get { return prefs_mergerColorFrontComponentNames_property.propval }
    set { prefs_mergerColorFrontComponentNames_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorFrontComponentNames_property_selection : EBSelection <NSColor> { return prefs_mergerColorFrontComponentNames_property.prop }

//····················································································································
//   Atomic property: mergerColorFrontComponentValues
//····················································································································

  let prefs_mergerColorFrontComponentValues_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontComponentValues)

//····················································································································

  var prefs_mergerColorFrontComponentValues : NSColor {
    get { return prefs_mergerColorFrontComponentValues_property.propval }
    set { prefs_mergerColorFrontComponentValues_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorFrontComponentValues_property_selection : EBSelection <NSColor> { return prefs_mergerColorFrontComponentValues_property.prop }

//····················································································································
//   Atomic property: mergerColorFrontPackages
//····················································································································

  let prefs_mergerColorFrontPackages_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontPackages)

//····················································································································

  var prefs_mergerColorFrontPackages : NSColor {
    get { return prefs_mergerColorFrontPackages_property.propval }
    set { prefs_mergerColorFrontPackages_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorFrontPackages_property_selection : EBSelection <NSColor> { return prefs_mergerColorFrontPackages_property.prop }

//····················································································································
//   Atomic property: mergerColorFrontLegendTexts
//····················································································································

  let prefs_mergerColorFrontLegendTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontLegendTexts)

//····················································································································

  var prefs_mergerColorFrontLegendTexts : NSColor {
    get { return prefs_mergerColorFrontLegendTexts_property.propval }
    set { prefs_mergerColorFrontLegendTexts_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorFrontLegendTexts_property_selection : EBSelection <NSColor> { return prefs_mergerColorFrontLegendTexts_property.prop }

//····················································································································
//   Atomic property: mergerColorFrontTracks
//····················································································································

  let prefs_mergerColorFrontTracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_mergerColorFrontTracks)

//····················································································································

  var prefs_mergerColorFrontTracks : NSColor {
    get { return prefs_mergerColorFrontTracks_property.propval }
    set { prefs_mergerColorFrontTracks_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorFrontTracks_property_selection : EBSelection <NSColor> { return prefs_mergerColorFrontTracks_property.prop }

//····················································································································
//   Atomic property: mergerColorFrontLayoutTexts
//····················································································································

  let prefs_mergerColorFrontLayoutTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_mergerColorFrontLayoutTexts)

//····················································································································

  var prefs_mergerColorFrontLayoutTexts : NSColor {
    get { return prefs_mergerColorFrontLayoutTexts_property.propval }
    set { prefs_mergerColorFrontLayoutTexts_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorFrontLayoutTexts_property_selection : EBSelection <NSColor> { return prefs_mergerColorFrontLayoutTexts_property.prop }

//····················································································································
//   Atomic property: mergerColorBackPads
//····················································································································

  let prefs_mergerColorBackPads_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_mergerColorBackPads)

//····················································································································

  var prefs_mergerColorBackPads : NSColor {
    get { return prefs_mergerColorBackPads_property.propval }
    set { prefs_mergerColorBackPads_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorBackPads_property_selection : EBSelection <NSColor> { return prefs_mergerColorBackPads_property.prop }

//····················································································································
//   Atomic property: mergerColorBackComponentNames
//····················································································································

  let prefs_mergerColorBackComponentNames_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackComponentNames)

//····················································································································

  var prefs_mergerColorBackComponentNames : NSColor {
    get { return prefs_mergerColorBackComponentNames_property.propval }
    set { prefs_mergerColorBackComponentNames_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorBackComponentNames_property_selection : EBSelection <NSColor> { return prefs_mergerColorBackComponentNames_property.prop }

//····················································································································
//   Atomic property: mergerColorBackComponentValues
//····················································································································

  let prefs_mergerColorBackComponentValues_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackComponentValues)

//····················································································································

  var prefs_mergerColorBackComponentValues : NSColor {
    get { return prefs_mergerColorBackComponentValues_property.propval }
    set { prefs_mergerColorBackComponentValues_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorBackComponentValues_property_selection : EBSelection <NSColor> { return prefs_mergerColorBackComponentValues_property.prop }

//····················································································································
//   Atomic property: mergerColorBackLegendTexts
//····················································································································

  let prefs_mergerColorBackLegendTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackLegendTexts)

//····················································································································

  var prefs_mergerColorBackLegendTexts : NSColor {
    get { return prefs_mergerColorBackLegendTexts_property.propval }
    set { prefs_mergerColorBackLegendTexts_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorBackLegendTexts_property_selection : EBSelection <NSColor> { return prefs_mergerColorBackLegendTexts_property.prop }

//····················································································································
//   Atomic property: mergerColorBackPackages
//····················································································································

  let prefs_mergerColorBackPackages_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackPackages)

//····················································································································

  var prefs_mergerColorBackPackages : NSColor {
    get { return prefs_mergerColorBackPackages_property.propval }
    set { prefs_mergerColorBackPackages_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorBackPackages_property_selection : EBSelection <NSColor> { return prefs_mergerColorBackPackages_property.prop }

//····················································································································
//   Atomic property: mergerColorBackTracks
//····················································································································

  let prefs_mergerColorBackTracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackTracks)

//····················································································································

  var prefs_mergerColorBackTracks : NSColor {
    get { return prefs_mergerColorBackTracks_property.propval }
    set { prefs_mergerColorBackTracks_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorBackTracks_property_selection : EBSelection <NSColor> { return prefs_mergerColorBackTracks_property.prop }

//····················································································································
//   Atomic property: mergerColorBackLayoutTexts
//····················································································································

  let prefs_mergerColorBackLayoutTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackLayoutTexts)

//····················································································································

  var prefs_mergerColorBackLayoutTexts : NSColor {
    get { return prefs_mergerColorBackLayoutTexts_property.propval }
    set { prefs_mergerColorBackLayoutTexts_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorBackLayoutTexts_property_selection : EBSelection <NSColor> { return prefs_mergerColorBackLayoutTexts_property.prop }

//····················································································································
//   Atomic property: mergerColorFrontLegendLines
//····················································································································

  let prefs_mergerColorFrontLegendLines_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorFrontLegendLines)

//····················································································································

  var prefs_mergerColorFrontLegendLines : NSColor {
    get { return prefs_mergerColorFrontLegendLines_property.propval }
    set { prefs_mergerColorFrontLegendLines_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorFrontLegendLines_property_selection : EBSelection <NSColor> { return prefs_mergerColorFrontLegendLines_property.prop }

//····················································································································
//   Atomic property: mergerColorBackLegendLines
//····················································································································

  let prefs_mergerColorBackLegendLines_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackLegendLines)

//····················································································································

  var prefs_mergerColorBackLegendLines : NSColor {
    get { return prefs_mergerColorBackLegendLines_property.propval }
    set { prefs_mergerColorBackLegendLines_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorBackLegendLines_property_selection : EBSelection <NSColor> { return prefs_mergerColorBackLegendLines_property.prop }

//····················································································································
//   Atomic property: mergerColorBackground
//····················································································································

  let prefs_mergerColorBackground_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.lightGray, prefKey: Preferences_mergerColorBackground)

//····················································································································

  var prefs_mergerColorBackground : NSColor {
    get { return prefs_mergerColorBackground_property.propval }
    set { prefs_mergerColorBackground_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mergerColorBackground_property_selection : EBSelection <NSColor> { return prefs_mergerColorBackground_property.prop }

//····················································································································
//   Atomic property: errorMessageColor
//····················································································································

  let prefs_errorMessageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_errorMessageColor)

//····················································································································

  var prefs_errorMessageColor : NSColor {
    get { return prefs_errorMessageColor_property.propval }
    set { prefs_errorMessageColor_property.setProp (newValue) }
  }

//····················································································································

  var prefs_errorMessageColor_property_selection : EBSelection <NSColor> { return prefs_errorMessageColor_property.prop }

//····················································································································
//   Atomic property: hiliteWidthMultipliedByTen
//····················································································································

  let prefs_hiliteWidthMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_hiliteWidthMultipliedByTen)

//····················································································································

  var prefs_hiliteWidthMultipliedByTen : Int {
    get { return prefs_hiliteWidthMultipliedByTen_property.propval }
    set { prefs_hiliteWidthMultipliedByTen_property.setProp (newValue) }
  }

//····················································································································

  var prefs_hiliteWidthMultipliedByTen_property_selection : EBSelection <Int> { return prefs_hiliteWidthMultipliedByTen_property.prop }

//····················································································································
//   Atomic property: usesUserLibrary
//····················································································································

  let prefs_usesUserLibrary_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_usesUserLibrary)

//····················································································································

  var prefs_usesUserLibrary : Bool {
    get { return prefs_usesUserLibrary_property.propval }
    set { prefs_usesUserLibrary_property.setProp (newValue) }
  }

//····················································································································

  var prefs_usesUserLibrary_property_selection : EBSelection <Bool> { return prefs_usesUserLibrary_property.prop }

//····················································································································
//   To many property: additionnalLibraryArray
//····················································································································

  let prefs_additionnalLibraryArray_property = PreferencesArrayOf_CanariLibraryEntry (prefKey: Preferences_additionnalLibraryArray)

//····················································································································

  var prefs_additionnalLibraryArray_property_selection : EBSelection < [CanariLibraryEntry] > {
    return prefs_additionnalLibraryArray_property.prop
  }

//····················································································································

  var prefs_additionnalLibraryArray : [CanariLibraryEntry] {
    get { return prefs_additionnalLibraryArray_property.propval }
    set { prefs_additionnalLibraryArray_property.setProp (newValue) }
  }

//····················································································································
//   Atomic property: pinNameFont
//····················································································································

  let prefs_pinNameFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNameFont)

//····················································································································

  var prefs_pinNameFont : NSFont {
    get { return prefs_pinNameFont_property.propval }
    set { prefs_pinNameFont_property.setProp (newValue) }
  }

//····················································································································

  var prefs_pinNameFont_property_selection : EBSelection <NSFont> { return prefs_pinNameFont_property.prop }

//····················································································································
//   Atomic property: displayPackageFrontSidePads
//····················································································································

  let prefs_displayPackageFrontSidePads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayPackageFrontSidePads)

//····················································································································

  var prefs_displayPackageFrontSidePads : Bool {
    get { return prefs_displayPackageFrontSidePads_property.propval }
    set { prefs_displayPackageFrontSidePads_property.setProp (newValue) }
  }

//····················································································································

  var prefs_displayPackageFrontSidePads_property_selection : EBSelection <Bool> { return prefs_displayPackageFrontSidePads_property.prop }

//····················································································································
//   Atomic property: sampleString
//····················································································································

  let prefs_sampleString_property = EBPreferencesProperty_String (defaultValue: "The quick brown fox jumps over the lazy dog", prefKey: Preferences_sampleString)

//····················································································································

  var prefs_sampleString : String {
    get { return prefs_sampleString_property.propval }
    set { prefs_sampleString_property.setProp (newValue) }
  }

//····················································································································

  var prefs_sampleString_property_selection : EBSelection <String> { return prefs_sampleString_property.prop }

//····················································································································
//   Atomic property: sampleStringSize
//····················································································································

  let prefs_sampleStringSize_property = EBPreferencesProperty_Double (defaultValue: 24, prefKey: Preferences_sampleStringSize)

//····················································································································

  var prefs_sampleStringSize : Double {
    get { return prefs_sampleStringSize_property.propval }
    set { prefs_sampleStringSize_property.setProp (newValue) }
  }

//····················································································································

  var prefs_sampleStringSize_property_selection : EBSelection <Double> { return prefs_sampleStringSize_property.prop }

//····················································································································
//   Atomic property: mLastSystemLibraryCheckTime
//····················································································································

  let prefs_mLastSystemLibraryCheckTime_property = EBPreferencesProperty_Date (defaultValue: Date.distantPast, prefKey: Preferences_mLastSystemLibraryCheckTime)

//····················································································································

  var prefs_mLastSystemLibraryCheckTime : Date {
    get { return prefs_mLastSystemLibraryCheckTime_property.propval }
    set { prefs_mLastSystemLibraryCheckTime_property.setProp (newValue) }
  }

//····················································································································

  var prefs_mLastSystemLibraryCheckTime_property_selection : EBSelection <Date> { return prefs_mLastSystemLibraryCheckTime_property.prop }

//····················································································································
//   Array controller: additionnalLibraryArrayController
//····················································································································

  var prefs_additionnalLibraryArrayController = Controller_Preferences_additionnalLibraryArrayController ()

//····················································································································
//   Transient property: mValueRevealInFinder_packages
//····················································································································

  let prefs_mValueRevealInFinder_packages_property = EBTransientProperty_CanariMenuItemListClass ()

//····················································································································

  var prefs_mValueRevealInFinder_packages_property_selection : EBSelection <CanariMenuItemListClass> {
    return prefs_mValueRevealInFinder_packages_property.prop
  }

//····················································································································

  var prefs_mValueRevealInFinder_packages : CanariMenuItemListClass? {
    switch prefs_mValueRevealInFinder_packages_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

//····················································································································
//   Transient property: mValueRevealInFinder_devices
//····················································································································

  let prefs_mValueRevealInFinder_devices_property = EBTransientProperty_CanariMenuItemListClass ()

//····················································································································

  var prefs_mValueRevealInFinder_devices_property_selection : EBSelection <CanariMenuItemListClass> {
    return prefs_mValueRevealInFinder_devices_property.prop
  }

//····················································································································

  var prefs_mValueRevealInFinder_devices : CanariMenuItemListClass? {
    switch prefs_mValueRevealInFinder_devices_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

//····················································································································
//   Transient property: mValueRevealInFinder_fonts
//····················································································································

  let prefs_mValueRevealInFinder_fonts_property = EBTransientProperty_CanariMenuItemListClass ()

//····················································································································

  var prefs_mValueRevealInFinder_fonts_property_selection : EBSelection <CanariMenuItemListClass> {
    return prefs_mValueRevealInFinder_fonts_property.prop
  }

//····················································································································

  var prefs_mValueRevealInFinder_fonts : CanariMenuItemListClass? {
    switch prefs_mValueRevealInFinder_fonts_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

//····················································································································
//   Transient property: mValueRevealInFinder_artworks
//····················································································································

  let prefs_mValueRevealInFinder_artworks_property = EBTransientProperty_CanariMenuItemListClass ()

//····················································································································

  var prefs_mValueRevealInFinder_artworks_property_selection : EBSelection <CanariMenuItemListClass> {
    return prefs_mValueRevealInFinder_artworks_property.prop
  }

//····················································································································

  var prefs_mValueRevealInFinder_artworks : CanariMenuItemListClass? {
    switch prefs_mValueRevealInFinder_artworks_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

//····················································································································
//   Transient property: mValueRevealInFinder_symbols
//····················································································································

  let prefs_mValueRevealInFinder_symbols_property = EBTransientProperty_CanariMenuItemListClass ()

//····················································································································

  var prefs_mValueRevealInFinder_symbols_property_selection : EBSelection <CanariMenuItemListClass> {
    return prefs_mValueRevealInFinder_symbols_property.prop
  }

//····················································································································

  var prefs_mValueRevealInFinder_symbols : CanariMenuItemListClass? {
    switch prefs_mValueRevealInFinder_symbols_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


//----------------------------------------------------------------------------------------------------------------------

@objc(Preferences) class Preferences : EBObject, NSWindowDelegate {

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddLibraryEntryButton : EBButton? = nil
  @IBOutlet var mAdditionnalLibraryArrayTableView : EBTableView? = nil
  @IBOutlet var mBoardBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideLayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideLegendColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideRestrictRectangleColorWell : EBColorWell? = nil
  @IBOutlet var mBoardClearanceColorWell : EBColorWell? = nil
  @IBOutlet var mBoardDotColorGridColorWell : EBColorWell? = nil
  @IBOutlet var mBoardDrawErrorBackgroundCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardDrawWarningBackgroundCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardErrorBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBoardLimitsColorWell : EBColorWell? = nil
  @IBOutlet var mBoardLineColorGridColorWell : EBColorWell? = nil
  @IBOutlet var mBoardPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mBoardPadFontButton : EBFontButton? = nil
  @IBOutlet var mBoardPadNumberColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideLayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideLegendColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideRestrictRectangleColorWell : EBColorWell? = nil
  @IBOutlet var mBoardWarningBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBottomSidePadColorDorDeviveColorWell : EBColorWell? = nil
  @IBOutlet var mBottomSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mCancelButtonInLibraryUpdateWindow : EBButton? = nil
  @IBOutlet var mCheckForLibraryUpdatesButton : NSButton? = nil
  @IBOutlet var mCheckForSystemLibraryAtStartUpSwitch : EBSwitch? = nil
  @IBOutlet var mCheckLibraryAction : EBButton? = nil
  @IBOutlet var mCheckLibraryResultTextView : NSTextView? = nil
  @IBOutlet var mCheckingForLibraryUpdateProgressIndicator : EBProgressIndicator? = nil
  @IBOutlet var mCheckingForLibraryUpdateWindow : EBWindow? = nil
  @IBOutlet var mConnectionColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mCrossColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mDimensionFontButton : EBFontButton? = nil
  @IBOutlet var mDotColorGridForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mDotColorOfPackageGridColorWell : EBColorWell? = nil
  @IBOutlet var mEditionTransparencySlider : EBSlider? = nil
  @IBOutlet var mEditionTransparencyTextField : EBDoubleField? = nil
  @IBOutlet var mErrorMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var mInformativeTextInLibraryUpdateWindow : EBTextField? = nil
  @IBOutlet var mLibraryRepositoryCommitButton : NSButton? = nil
  @IBOutlet var mLibraryRepositoryCurrentReleaseTextField : NSTextField? = nil
  @IBOutlet var mLibraryRepositoryLoadCurrentReleaseButton : NSButton? = nil
  @IBOutlet var mLibraryRepositoryLogTextView : NSTextView? = nil
  @IBOutlet var mLibraryRepositoryStatusButton : NSButton? = nil
  @IBOutlet var mLibraryRepositoryTextField : NSTextField? = nil
  @IBOutlet var mLibraryRevisionListScrollView : NSScrollView? = nil
  @IBOutlet var mLibraryRevisionListTableView : NSTableView? = nil
  @IBOutlet var mLibraryUpdateLogTextView : NSTextView? = nil
  @IBOutlet var mLibraryUpdateWindow : EBWindow? = nil
  @IBOutlet var mLibraryUploadWindow : EBWindow? = nil
  @IBOutlet var mLineColorGridForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mLineColorOfPackageGridColorWell : EBColorWell? = nil
  @IBOutlet var mLineColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mMenuRevealInFinder_artworks : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_devices : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_fonts : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_packages : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_symbols : CanariMenu? = nil
  @IBOutlet var mPackageBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mPackageColorColorWell : EBColorWell? = nil
  @IBOutlet var mPackageColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDimensionColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDrawingWidthMultipliedByTenForDevicePopupButton : EBPopUpButton? = nil
  @IBOutlet var mPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mPackageGuideColorWell : EBColorWell? = nil
  @IBOutlet var mPackageNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPadFontButton : EBFontButton? = nil
  @IBOutlet var mPadNumberColorColorWell : EBColorWell? = nil
  @IBOutlet var mPadNumberColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mPadNumberFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPadZoneColorColorWell : EBColorWell? = nil
  @IBOutlet var mPinNameColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mPinNameFontButton : EBFontButton? = nil
  @IBOutlet var mPinNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPinNameFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mPinNumberColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mPinNumberFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mPrefsWindow : EBWindow? = nil
  @IBOutlet var mProgressIndicatorInLibraryUpdateWindow : EBProgressIndicator? = nil
  @IBOutlet var mRemoveLibraryEntryButton : EBButton? = nil
  @IBOutlet var mRevealInFinderLibraryInUserApplicationSupportButton : EBButton? = nil
  @IBOutlet var mSULastCheckTimeTextField : NSTextField? = nil
  @IBOutlet var mSampleStringField : EBTextField? = nil
  @IBOutlet var mSampleStringSizeField : EBDoubleField? = nil
  @IBOutlet var mSelectionHiliteColorColorWell : EBColorWell? = nil
  @IBOutlet var mSetLibraryRepositoryButton : NSButton? = nil
  @IBOutlet var mSetUserAndPasswordButton : NSButton? = nil
  @IBOutlet var mShowGerberDrawingFlowCheckbox : EBSwitch? = nil
  @IBOutlet var mShowGerberDrawingIndexesCheckbox : EBSwitch? = nil
  @IBOutlet var mSuccessMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageBackgroundColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageGridDotColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageLineDotColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenForDevicePopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mTableViewInLibraryUpdateWindow : EBTableView? = nil
  @IBOutlet var mToolbar : CanariToolbar? = nil
  @IBOutlet var mTopSidePadColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mTopSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mUnplacedComponentsColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mUpDateButtonInLibraryUpdateWindow : EBButton? = nil
  @IBOutlet var mUpDateLibraryMenuItemInCanariMenu : EBMenuItem? = nil
  @IBOutlet var mUseLibraryInUserApplicationSupportPathCheckBox : EBSwitch? = nil
  @IBOutlet var mUserAndPasswordTextField : NSTextField? = nil
  @IBOutlet var mWarningMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var nextSystemLibraryCheckDate : CanariDateObserverField? = nil
  @IBOutlet var selectionHilitePopupButton : EBPopUpButton? = nil
  @IBOutlet var systemLibraryCheckTimeIntervalPopupButton : EBPopUpButton? = nil
  @IBOutlet var systemLibraryCheckTimeIntervalTitleTextField : NSTextField? = nil

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  private var mController_nextSystemLibraryCheckDate_hidden : MultipleBindingController_hidden?
  private var mController_systemLibraryCheckTimeIntervalPopupButton_hidden : MultipleBindingController_hidden?
  private var mController_systemLibraryCheckTimeIntervalTitleTextField_hidden : MultipleBindingController_hidden?
  private var mController_mRemoveLibraryEntryButton_enabled : MultipleBindingController_enabled?

  //····················································································································
  //    Undo Manager
  //····················································································································

  private var mUndoManager = EBUndoManager ()

  //····················································································································

  var ebUndoManager : EBUndoManager { return self.mUndoManager }
 
  //····················································································································
  // The preferences window should register this object as delegate (do it in Interface Builder)

  @objc func windowWillReturnUndoManager (_ window: NSWindow) -> UndoManager? {
    return self.ebUndoManager
  }

  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    g_Preferences = self ;
  //--- Read from preferences
  //--- To many property: additionnalLibraryArray (no option)
    prefs_additionnalLibraryArray_property.ebUndoManager = self.ebUndoManager
  //--- Array controller property: additionnalLibraryArrayController
    prefs_additionnalLibraryArrayController.bind_model (prefs_additionnalLibraryArray_property, self.ebUndoManager)
  //--- Atomic property: mValueRevealInFinder_packages
    // prefs_mValueRevealInFinder_packages_property.configure (self.usesUserLibrary_property, self.additionnalLibraryArray_property.mUses_property, self.additionnalLibraryArray_property.mPath_property, transient_Preferences_mValueRevealInFinder_packages)
    prefs_mValueRevealInFinder_packages_property.mReadModelFunction = {
        var kind = prefs_usesUserLibrary_property_selection.kind ()
        kind &= prefs_additionnalLibraryArray_property_selection.kind ()
        kind &= prefs_additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (prefs_usesUserLibrary_property_selection, prefs_additionnalLibraryArray_property_selection, prefs_additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_packages (v0, v1, v2))
          default :
            return .empty
          }
        }
    }
    prefs_usesUserLibrary_property.addEBObserver (prefs_mValueRevealInFinder_packages_property)
    prefs_additionnalLibraryArray_property.addEBObserverOf_mUses (prefs_mValueRevealInFinder_packages_property)
    prefs_additionnalLibraryArray_property.addEBObserverOf_mPath (prefs_mValueRevealInFinder_packages_property)
  //--- Atomic property: mValueRevealInFinder_devices
    // prefs_mValueRevealInFinder_devices_property.configure (self.usesUserLibrary_property, self.additionnalLibraryArray_property.mUses_property, self.additionnalLibraryArray_property.mPath_property, transient_Preferences_mValueRevealInFinder_devices)
    prefs_mValueRevealInFinder_devices_property.mReadModelFunction = {
        var kind = prefs_usesUserLibrary_property_selection.kind ()
        kind &= prefs_additionnalLibraryArray_property_selection.kind ()
        kind &= prefs_additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (prefs_usesUserLibrary_property_selection, prefs_additionnalLibraryArray_property_selection, prefs_additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_devices (v0, v1, v2))
          default :
            return .empty
          }
        }
    }
    prefs_usesUserLibrary_property.addEBObserver (prefs_mValueRevealInFinder_devices_property)
    prefs_additionnalLibraryArray_property.addEBObserverOf_mUses (prefs_mValueRevealInFinder_devices_property)
    prefs_additionnalLibraryArray_property.addEBObserverOf_mPath (prefs_mValueRevealInFinder_devices_property)
  //--- Atomic property: mValueRevealInFinder_fonts
    // prefs_mValueRevealInFinder_fonts_property.configure (self.usesUserLibrary_property, self.additionnalLibraryArray_property.mUses_property, self.additionnalLibraryArray_property.mPath_property, transient_Preferences_mValueRevealInFinder_fonts)
    prefs_mValueRevealInFinder_fonts_property.mReadModelFunction = {
        var kind = prefs_usesUserLibrary_property_selection.kind ()
        kind &= prefs_additionnalLibraryArray_property_selection.kind ()
        kind &= prefs_additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (prefs_usesUserLibrary_property_selection, prefs_additionnalLibraryArray_property_selection, prefs_additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_fonts (v0, v1, v2))
          default :
            return .empty
          }
        }
    }
    prefs_usesUserLibrary_property.addEBObserver (prefs_mValueRevealInFinder_fonts_property)
    prefs_additionnalLibraryArray_property.addEBObserverOf_mUses (prefs_mValueRevealInFinder_fonts_property)
    prefs_additionnalLibraryArray_property.addEBObserverOf_mPath (prefs_mValueRevealInFinder_fonts_property)
  //--- Atomic property: mValueRevealInFinder_artworks
    // prefs_mValueRevealInFinder_artworks_property.configure (self.usesUserLibrary_property, self.additionnalLibraryArray_property.mUses_property, self.additionnalLibraryArray_property.mPath_property, transient_Preferences_mValueRevealInFinder_artworks)
    prefs_mValueRevealInFinder_artworks_property.mReadModelFunction = {
        var kind = prefs_usesUserLibrary_property_selection.kind ()
        kind &= prefs_additionnalLibraryArray_property_selection.kind ()
        kind &= prefs_additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (prefs_usesUserLibrary_property_selection, prefs_additionnalLibraryArray_property_selection, prefs_additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_artworks (v0, v1, v2))
          default :
            return .empty
          }
        }
    }
    prefs_usesUserLibrary_property.addEBObserver (prefs_mValueRevealInFinder_artworks_property)
    prefs_additionnalLibraryArray_property.addEBObserverOf_mUses (prefs_mValueRevealInFinder_artworks_property)
    prefs_additionnalLibraryArray_property.addEBObserverOf_mPath (prefs_mValueRevealInFinder_artworks_property)
  //--- Atomic property: mValueRevealInFinder_symbols
    // prefs_mValueRevealInFinder_symbols_property.configure (self.usesUserLibrary_property, self.additionnalLibraryArray_property.mUses_property, self.additionnalLibraryArray_property.mPath_property, transient_Preferences_mValueRevealInFinder_symbols)
    prefs_mValueRevealInFinder_symbols_property.mReadModelFunction = {
        var kind = prefs_usesUserLibrary_property_selection.kind ()
        kind &= prefs_additionnalLibraryArray_property_selection.kind ()
        kind &= prefs_additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (prefs_usesUserLibrary_property_selection, prefs_additionnalLibraryArray_property_selection, prefs_additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_symbols (v0, v1, v2))
          default :
            return .empty
          }
        }
    }
    prefs_usesUserLibrary_property.addEBObserver (prefs_mValueRevealInFinder_symbols_property)
    prefs_additionnalLibraryArray_property.addEBObserverOf_mUses (prefs_mValueRevealInFinder_symbols_property)
    prefs_additionnalLibraryArray_property.addEBObserverOf_mPath (prefs_mValueRevealInFinder_symbols_property)
  //--- Notify application will terminate
    NotificationCenter.default.addObserver (self,
      selector:#selector(Preferences.applicationWillTerminateAction(_:)),
      name:NSApplication.willTerminateNotification,
      object:nil
    )
  //--- Extern functions
  }

  //····················································································································
  //    awakeFromNib
  //····················································································································

  override func awakeFromNib () {
    checkOutletConnection (self.mAddLibraryEntryButton, "mAddLibraryEntryButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mAdditionnalLibraryArrayTableView, "mAdditionnalLibraryArrayTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mBoardBackgroundColorWell, "mBoardBackgroundColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardBottomSideLayoutColorWell, "mBoardBottomSideLayoutColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardBottomSideLegendColorWell, "mBoardBottomSideLegendColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardBottomSidePadColorWell, "mBoardBottomSidePadColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardBottomSideRestrictRectangleColorWell, "mBoardBottomSideRestrictRectangleColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardClearanceColorWell, "mBoardClearanceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardDotColorGridColorWell, "mBoardDotColorGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardDrawErrorBackgroundCheckbox, "mBoardDrawErrorBackgroundCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardDrawWarningBackgroundCheckbox, "mBoardDrawWarningBackgroundCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardErrorBackgroundColorWell, "mBoardErrorBackgroundColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardLimitsColorWell, "mBoardLimitsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardLineColorGridColorWell, "mBoardLineColorGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardPackageDrawingWidthMultipliedByTenPopupButton, "mBoardPackageDrawingWidthMultipliedByTenPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mBoardPadFontButton, "mBoardPadFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mBoardPadNumberColorWell, "mBoardPadNumberColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardTopSideLayoutColorWell, "mBoardTopSideLayoutColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardTopSideLegendColorWell, "mBoardTopSideLegendColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardTopSidePadColorWell, "mBoardTopSidePadColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardTopSideRestrictRectangleColorWell, "mBoardTopSideRestrictRectangleColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardWarningBackgroundColorWell, "mBoardWarningBackgroundColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBottomSidePadColorDorDeviveColorWell, "mBottomSidePadColorDorDeviveColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBottomSidePadColorWell, "mBottomSidePadColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mCancelButtonInLibraryUpdateWindow, "mCancelButtonInLibraryUpdateWindow", EBButton.self, #file, #line)
    checkOutletConnection (self.mCheckForLibraryUpdatesButton, "mCheckForLibraryUpdatesButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mCheckForSystemLibraryAtStartUpSwitch, "mCheckForSystemLibraryAtStartUpSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mCheckLibraryAction, "mCheckLibraryAction", EBButton.self, #file, #line)
    checkOutletConnection (self.mCheckLibraryResultTextView, "mCheckLibraryResultTextView", NSTextView.self, #file, #line)
    checkOutletConnection (self.mCheckingForLibraryUpdateProgressIndicator, "mCheckingForLibraryUpdateProgressIndicator", EBProgressIndicator.self, #file, #line)
    checkOutletConnection (self.mCheckingForLibraryUpdateWindow, "mCheckingForLibraryUpdateWindow", EBWindow.self, #file, #line)
    checkOutletConnection (self.mConnectionColorForSchematicColorWell, "mConnectionColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mCrossColorOfSymbolGridColorWell, "mCrossColorOfSymbolGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mDimensionFontButton, "mDimensionFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mDotColorGridForSchematicColorWell, "mDotColorGridForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mDotColorOfPackageGridColorWell, "mDotColorOfPackageGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mEditionTransparencySlider, "mEditionTransparencySlider", EBSlider.self, #file, #line)
    checkOutletConnection (self.mEditionTransparencyTextField, "mEditionTransparencyTextField", EBDoubleField.self, #file, #line)
    checkOutletConnection (self.mErrorMessageColorColorWell, "mErrorMessageColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mInformativeTextInLibraryUpdateWindow, "mInformativeTextInLibraryUpdateWindow", EBTextField.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryCommitButton, "mLibraryRepositoryCommitButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryCurrentReleaseTextField, "mLibraryRepositoryCurrentReleaseTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryLoadCurrentReleaseButton, "mLibraryRepositoryLoadCurrentReleaseButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryLogTextView, "mLibraryRepositoryLogTextView", NSTextView.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryStatusButton, "mLibraryRepositoryStatusButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryTextField, "mLibraryRepositoryTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mLibraryRevisionListScrollView, "mLibraryRevisionListScrollView", NSScrollView.self, #file, #line)
    checkOutletConnection (self.mLibraryRevisionListTableView, "mLibraryRevisionListTableView", NSTableView.self, #file, #line)
    checkOutletConnection (self.mLibraryUpdateLogTextView, "mLibraryUpdateLogTextView", NSTextView.self, #file, #line)
    checkOutletConnection (self.mLibraryUpdateWindow, "mLibraryUpdateWindow", EBWindow.self, #file, #line)
    checkOutletConnection (self.mLibraryUploadWindow, "mLibraryUploadWindow", EBWindow.self, #file, #line)
    checkOutletConnection (self.mLineColorGridForSchematicColorWell, "mLineColorGridForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mLineColorOfPackageGridColorWell, "mLineColorOfPackageGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mLineColorOfSymbolGridColorWell, "mLineColorOfSymbolGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_artworks, "mMenuRevealInFinder_artworks", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_devices, "mMenuRevealInFinder_devices", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_fonts, "mMenuRevealInFinder_fonts", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_packages, "mMenuRevealInFinder_packages", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_symbols, "mMenuRevealInFinder_symbols", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mPackageBackgroundColorColorWell, "mPackageBackgroundColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageColorColorWell, "mPackageColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageColorForDeviceColorWell, "mPackageColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageDimensionColorWell, "mPackageDimensionColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageDrawingWidthMultipliedByTenForDevicePopupButton, "mPackageDrawingWidthMultipliedByTenForDevicePopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mPackageDrawingWidthMultipliedByTenPopupButton, "mPackageDrawingWidthMultipliedByTenPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mPackageGuideColorWell, "mPackageGuideColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageNameFontForDeviceFontButton, "mPackageNameFontForDeviceFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPadFontButton, "mPadFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPadNumberColorColorWell, "mPadNumberColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPadNumberColorForDeviceColorWell, "mPadNumberColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPadNumberFontForDeviceFontButton, "mPadNumberFontForDeviceFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPadZoneColorColorWell, "mPadZoneColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPinNameColorForSchematicColorWell, "mPinNameColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPinNameFontButton, "mPinNameFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPinNameFontForDeviceFontButton, "mPinNameFontForDeviceFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPinNameFontForSchematicFontButton, "mPinNameFontForSchematicFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPinNumberColorForSchematicColorWell, "mPinNumberColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPinNumberFontForSchematicFontButton, "mPinNumberFontForSchematicFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPrefsWindow, "mPrefsWindow", EBWindow.self, #file, #line)
    checkOutletConnection (self.mProgressIndicatorInLibraryUpdateWindow, "mProgressIndicatorInLibraryUpdateWindow", EBProgressIndicator.self, #file, #line)
    checkOutletConnection (self.mRemoveLibraryEntryButton, "mRemoveLibraryEntryButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRevealInFinderLibraryInUserApplicationSupportButton, "mRevealInFinderLibraryInUserApplicationSupportButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSULastCheckTimeTextField, "mSULastCheckTimeTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mSampleStringField, "mSampleStringField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mSampleStringSizeField, "mSampleStringSizeField", EBDoubleField.self, #file, #line)
    checkOutletConnection (self.mSelectionHiliteColorColorWell, "mSelectionHiliteColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSetLibraryRepositoryButton, "mSetLibraryRepositoryButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mSetUserAndPasswordButton, "mSetUserAndPasswordButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mShowGerberDrawingFlowCheckbox, "mShowGerberDrawingFlowCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mShowGerberDrawingIndexesCheckbox, "mShowGerberDrawingIndexesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mSuccessMessageColorColorWell, "mSuccessMessageColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolAndPackageBackgroundColorForDeviceColorWell, "mSymbolAndPackageBackgroundColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolAndPackageGridDotColorForDeviceColorWell, "mSymbolAndPackageGridDotColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolAndPackageLineDotColorForDeviceColorWell, "mSymbolAndPackageLineDotColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolBackgroundColorColorWell, "mSymbolBackgroundColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolColorColorWell, "mSymbolColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolColorForDeviceColorWell, "mSymbolColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolColorForSchematicColorWell, "mSymbolColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolDrawingWidthMultipliedByTenForDevicePopupButton, "mSymbolDrawingWidthMultipliedByTenForDevicePopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton, "mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSymbolDrawingWidthMultipliedByTenPopupButton, "mSymbolDrawingWidthMultipliedByTenPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSymbolNameFontForDeviceFontButton, "mSymbolNameFontForDeviceFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mTableViewInLibraryUpdateWindow, "mTableViewInLibraryUpdateWindow", EBTableView.self, #file, #line)
    checkOutletConnection (self.mToolbar, "mToolbar", CanariToolbar.self, #file, #line)
    checkOutletConnection (self.mTopSidePadColorForDeviceColorWell, "mTopSidePadColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mTopSidePadColorWell, "mTopSidePadColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mUnplacedComponentsColorForSchematicColorWell, "mUnplacedComponentsColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mUpDateButtonInLibraryUpdateWindow, "mUpDateButtonInLibraryUpdateWindow", EBButton.self, #file, #line)
    checkOutletConnection (self.mUpDateLibraryMenuItemInCanariMenu, "mUpDateLibraryMenuItemInCanariMenu", EBMenuItem.self, #file, #line)
    checkOutletConnection (self.mUseLibraryInUserApplicationSupportPathCheckBox, "mUseLibraryInUserApplicationSupportPathCheckBox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mUserAndPasswordTextField, "mUserAndPasswordTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mWarningMessageColorColorWell, "mWarningMessageColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.nextSystemLibraryCheckDate, "nextSystemLibraryCheckDate", CanariDateObserverField.self, #file, #line)
    checkOutletConnection (self.selectionHilitePopupButton, "selectionHilitePopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.systemLibraryCheckTimeIntervalPopupButton, "systemLibraryCheckTimeIntervalPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.systemLibraryCheckTimeIntervalTitleTextField, "systemLibraryCheckTimeIntervalTitleTextField", NSTextField.self, #file, #line)
  //--------------------------- Install bindings
    mErrorMessageColorColorWell?.bind_color (prefs_errorMessageColor_property, file: #file, line: #line, sendContinously:false)
    mWarningMessageColorColorWell?.bind_color (prefs_warningMessageColor_property, file: #file, line: #line, sendContinously:false)
    mSuccessMessageColorColorWell?.bind_color (prefs_successMessageColor_property, file: #file, line: #line, sendContinously:false)
    mSelectionHiliteColorColorWell?.bind_color (prefs_selectionHiliteColor_property, file: #file, line: #line, sendContinously:false)
    selectionHilitePopupButton?.bind_selectedTag (prefs_hiliteWidthMultipliedByTen_property, file: #file, line: #line)
    mMenuRevealInFinder_symbols?.bind_populateSubmenus (prefs_mValueRevealInFinder_symbols_property, file: #file, line: #line)
    mMenuRevealInFinder_packages?.bind_populateSubmenus (prefs_mValueRevealInFinder_packages_property, file: #file, line: #line)
    mMenuRevealInFinder_devices?.bind_populateSubmenus (prefs_mValueRevealInFinder_devices_property, file: #file, line: #line)
    mMenuRevealInFinder_fonts?.bind_populateSubmenus (prefs_mValueRevealInFinder_fonts_property, file: #file, line: #line)
    mMenuRevealInFinder_artworks?.bind_populateSubmenus (prefs_mValueRevealInFinder_artworks_property, file: #file, line: #line)
    mSymbolColorColorWell?.bind_color (prefs_symbolColor_property, file: #file, line: #line, sendContinously:false)
    mCrossColorOfSymbolGridColorWell?.bind_color (prefs_crossColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    mLineColorOfSymbolGridColorWell?.bind_color (prefs_lineColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    mSymbolBackgroundColorColorWell?.bind_color (prefs_symbolBackgroundColor_property, file: #file, line: #line, sendContinously:false)
    mSymbolDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (prefs_symbolDrawingWidthMultipliedByTen_property, file: #file, line: #line)
    mPinNameFontButton?.bind_fontValue (prefs_pinNameFont_property, file: #file, line: #line)
    mDotColorOfPackageGridColorWell?.bind_color (prefs_crossColorOfPackageGrid_property, file: #file, line: #line, sendContinously:false)
    mLineColorOfPackageGridColorWell?.bind_color (prefs_lineColorOfPackageGrid_property, file: #file, line: #line, sendContinously:false)
    mPackageBackgroundColorColorWell?.bind_color (prefs_packageBackgroundColor_property, file: #file, line: #line, sendContinously:false)
    mPackageColorColorWell?.bind_color (prefs_packageColor_property, file: #file, line: #line, sendContinously:false)
    mTopSidePadColorWell?.bind_color (prefs_frontSidePadColor_property, file: #file, line: #line, sendContinously:false)
    mBottomSidePadColorWell?.bind_color (prefs_backSidePadColor_property, file: #file, line: #line, sendContinously:false)
    mPadNumberColorColorWell?.bind_color (prefs_padNumberColor_property, file: #file, line: #line, sendContinously:false)
    mPadFontButton?.bind_fontValue (prefs_padNumberFont_property, file: #file, line: #line)
    mPackageGuideColorWell?.bind_color (prefs_packageGuideColor_property, file: #file, line: #line, sendContinously:false)
    mPackageDimensionColorWell?.bind_color (prefs_packageDimensionColor_property, file: #file, line: #line, sendContinously:false)
    mDimensionFontButton?.bind_fontValue (prefs_dimensionFont_property, file: #file, line: #line)
    mPadZoneColorColorWell?.bind_color (prefs_padZoneColor_property, file: #file, line: #line, sendContinously:false)
    mPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (prefs_packageDrawingWidthMultipliedByTen_property, file: #file, line: #line)
    mSymbolAndPackageGridDotColorForDeviceColorWell?.bind_color (prefs_mSymbolAndPackageGridDotColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mSymbolAndPackageLineDotColorForDeviceColorWell?.bind_color (prefs_mSymbolAndPackageGridLineColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mSymbolAndPackageBackgroundColorForDeviceColorWell?.bind_color (prefs_mSymbolAndPackageBackgroundColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mPackageColorForDeviceColorWell?.bind_color (prefs_mPackageColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mTopSidePadColorForDeviceColorWell?.bind_color (prefs_mFrontSidePadColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mBottomSidePadColorDorDeviveColorWell?.bind_color (prefs_mBottomSidePadColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mPadNumberColorForDeviceColorWell?.bind_color (prefs_mPadNumberColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mPackageNameFontForDeviceFontButton?.bind_fontValue (prefs_mPadNumberFontForDevice_property, file: #file, line: #line)
    mPadNumberFontForDeviceFontButton?.bind_fontValue (prefs_mPadNumberFontForDevice_property, file: #file, line: #line)
    mSymbolColorForDeviceColorWell?.bind_color (prefs_mSymbolColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mSymbolNameFontForDeviceFontButton?.bind_fontValue (prefs_mSymbolNameFontForDevice_property, file: #file, line: #line)
    mPinNameFontForDeviceFontButton?.bind_fontValue (prefs_mPinNameFontForDevice_property, file: #file, line: #line)
    mSymbolDrawingWidthMultipliedByTenForDevicePopupButton?.bind_selectedTag (prefs_symbolDrawingWidthForDeviceMultipliedByTen_property, file: #file, line: #line)
    mPackageDrawingWidthMultipliedByTenForDevicePopupButton?.bind_selectedTag (prefs_packageDrawingWidthForDeviceMultipliedByTen_property, file: #file, line: #line)
    mDotColorGridForSchematicColorWell?.bind_color (prefs_dotColorGridForSchematic_property, file: #file, line: #line, sendContinously:false)
    mLineColorGridForSchematicColorWell?.bind_color (prefs_lineColorGridForSchematic_property, file: #file, line: #line, sendContinously:false)
    mUnplacedComponentsColorForSchematicColorWell?.bind_color (prefs_symbolColorForUnplacedComponentsForSchematic_property, file: #file, line: #line, sendContinously:false)
    mSymbolColorForSchematicColorWell?.bind_color (prefs_symbolColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mPinNameFontForSchematicFontButton?.bind_fontValue (prefs_pinNameFontForSchematic_property, file: #file, line: #line)
    mPinNameColorForSchematicColorWell?.bind_color (prefs_pinNameColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mPinNumberFontForSchematicFontButton?.bind_fontValue (prefs_pinNumberFontForSchematic_property, file: #file, line: #line)
    mPinNumberColorForSchematicColorWell?.bind_color (prefs_pinNumberColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mConnectionColorForSchematicColorWell?.bind_color (prefs_connectionColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton?.bind_selectedTag (prefs_symbolDrawingWidthMultipliedByTenForSchematic_property, file: #file, line: #line)
    mBoardDotColorGridColorWell?.bind_color (prefs_crossColorGridForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardLineColorGridColorWell?.bind_color (prefs_lineColorGridForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBackgroundColorWell?.bind_color (prefs_boardBackgroundColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardErrorBackgroundColorWell?.bind_color (prefs_errorBackgroundColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardDrawErrorBackgroundCheckbox?.bind_value (prefs_drawErrorBackgroundForBoard_property, file: #file, line: #line)
    mBoardWarningBackgroundColorWell?.bind_color (prefs_warningBackgroundColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardDrawWarningBackgroundCheckbox?.bind_value (prefs_drawWarningBackgroundForBoard_property, file: #file, line: #line)
    mBoardLimitsColorWell?.bind_color (prefs_boardLimitsColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardClearanceColorWell?.bind_color (prefs_boardClearanceColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSideRestrictRectangleColorWell?.bind_color (prefs_frontSideRestrictRectangleColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideRestrictRectangleColorWell?.bind_color (prefs_backSideRestrictRectangleColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSideLegendColorWell?.bind_color (prefs_frontSideLegendColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSideLayoutColorWell?.bind_color (prefs_frontSideLayoutColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideLayoutColorWell?.bind_color (prefs_backSideLayoutColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideLegendColorWell?.bind_color (prefs_backSideLegendColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSidePadColorWell?.bind_color (prefs_frontSidePadColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSidePadColorWell?.bind_color (prefs_backSidePadColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardPadFontButton?.bind_fontValue (prefs_padNumberFontForBoard_property, file: #file, line: #line)
    mBoardPadNumberColorWell?.bind_color (prefs_padNumberColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (prefs_packageDrawingWidthMultpliedByTenForBoard_property, file: #file, line: #line)
    mSampleStringField?.bind_value (prefs_sampleString_property, file: #file, line: #line, sendContinously:true)
    mSampleStringSizeField?.bind_value (prefs_sampleStringSize_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    mShowGerberDrawingFlowCheckbox?.bind_value (prefs_showGerberDrawingFlow_property, file: #file, line: #line)
    mShowGerberDrawingIndexesCheckbox?.bind_value (prefs_showGerberDrawingIndexes_property, file: #file, line: #line)
    mEditionTransparencySlider?.bind_doubleValue (prefs_fontEditionTransparency_property, file: #file, line: #line, sendContinously:true)
    mEditionTransparencyTextField?.bind_value (prefs_fontEditionTransparency_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    mUseLibraryInUserApplicationSupportPathCheckBox?.bind_value (prefs_usesUserLibrary_property, file: #file, line: #line)
    mCheckForSystemLibraryAtStartUpSwitch?.bind_value (prefs_checkForSystemLibraryAtStartUp_property, file: #file, line: #line)
    nextSystemLibraryCheckDate?.bind_dateObserver (prefs_mLastSystemLibraryCheckTime_property, file: #file, line: #line)
    systemLibraryCheckTimeIntervalPopupButton?.bind_selectedTag (prefs_systemLibraryCheckTimeInterval_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return !prefs_checkForSystemLibraryAtStartUp_property_selection
        },
        outlet: self.nextSystemLibraryCheckDate
      )
      prefs_checkForSystemLibraryAtStartUp_property.addEBObserver (controller)
      self.mController_nextSystemLibraryCheckDate_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return !prefs_checkForSystemLibraryAtStartUp_property_selection
        },
        outlet: self.systemLibraryCheckTimeIntervalPopupButton
      )
      prefs_checkForSystemLibraryAtStartUp_property.addEBObserver (controller)
      self.mController_systemLibraryCheckTimeIntervalPopupButton_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return !prefs_checkForSystemLibraryAtStartUp_property_selection
        },
        outlet: self.systemLibraryCheckTimeIntervalTitleTextField
      )
      prefs_checkForSystemLibraryAtStartUp_property.addEBObserver (controller)
      self.mController_systemLibraryCheckTimeIntervalTitleTextField_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (prefs_additionnalLibraryArrayController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mRemoveLibraryEntryButton
      )
      prefs_additionnalLibraryArrayController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mRemoveLibraryEntryButton_enabled = controller
    }
  //--------------------------- Array controller
    prefs_additionnalLibraryArrayController.bind_tableView (self.mAdditionnalLibraryArrayTableView, file: #file, line: #line)
  //--------------------------- Set targets / actions
    self.mRevealInFinderLibraryInUserApplicationSupportButton?.target = self
    self.mRevealInFinderLibraryInUserApplicationSupportButton?.action = #selector (Preferences.revealUserLibraryInFinderAction (_:))
    self.mAddLibraryEntryButton?.target = self
    self.mAddLibraryEntryButton?.action = #selector (Preferences.addLibraryEntryAction (_:))
    self.mRemoveLibraryEntryButton?.target = prefs_additionnalLibraryArrayController
    self.mRemoveLibraryEntryButton?.action = #selector (Controller_Preferences_additionnalLibraryArrayController.remove (_:))
    self.mCheckLibraryAction?.target = self
    self.mCheckLibraryAction?.action = #selector (Preferences.checkLibraryAction (_:))
  //--------------------------- Extern functions
    self.setupForLibrary ()
  }

  //····················································································································
  //    applicationWillTerminateAction
  //····················································································································

  @objc func applicationWillTerminateAction (_ : NSNotification) {
  //--------------------------- Array controller
    prefs_additionnalLibraryArrayController.unbind_tableView (self.mAdditionnalLibraryArrayTableView)
  //--- Array controller property: additionnalLibraryArrayController
    prefs_additionnalLibraryArrayController.unbind_model ()
    // self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_packages_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_packages_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_packages_property)
    // self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_devices_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_devices_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_devices_property)
    // self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_fonts_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_fonts_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_fonts_property)
    // self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_artworks_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_artworks_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_artworks_property)
    // self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_symbols_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_symbols_property)
    // self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_symbols_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

