//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

var g_Preferences : Preferences? = nil

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

let Preferences_warningMessageColor = "Preferences:warningMessageColor"
let Preferences_successMessageColor = "Preferences:successMessageColor"
let Preferences_selectionHiliteColor = "Preferences:selectionHiliteColor"
let Preferences_symbolColor = "Preferences:symbolColor"
let Preferences_crossColorOfSymbolGrid = "Preferences:crossColorOfSymbolGrid"
let Preferences_lineColorOfSymbolGrid = "Preferences:lineColorOfSymbolGrid"
let Preferences_symbolBackgroundColor = "Preferences:symbolBackgroundColor"
let Preferences_symbolDrawingWidthMultipliedByTen = "Preferences:symbolDrawingWidthMultipliedByTen"
let Preferences_crossColorOfPackageGrid = "Preferences:crossColorOfPackageGrid"
let Preferences_lineColorOfPackageGrid = "Preferences:lineColorOfPackageGrid"
let Preferences_packageBackgroundColor = "Preferences:packageBackgroundColor"
let Preferences_packageColor = "Preferences:packageColor"
let Preferences_topSidePadColor = "Preferences:topSidePadColor"
let Preferences_bottomSidePadColor = "Preferences:bottomSidePadColor"
let Preferences_displayPackageBottomSidePads = "Preferences:displayPackageBottomSidePads"
let Preferences_padNumberColor = "Preferences:padNumberColor"
let Preferences_padNumberFont = "Preferences:padNumberFont"
let Preferences_showPadNumber = "Preferences:showPadNumber"
let Preferences_packageGuideColor = "Preferences:packageGuideColor"
let Preferences_packageDimensionColor = "Preferences:packageDimensionColor"
let Preferences_dimensionFont = "Preferences:dimensionFont"
let Preferences_padZoneColor = "Preferences:padZoneColor"
let Preferences_padZoneFont = "Preferences:padZoneFont"
let Preferences_packageDrawingWidthMultipliedByTen = "Preferences:packageDrawingWidthMultipliedByTen"
let Preferences_mSymbolAndPackageGridDotColorForDevice = "Preferences:mSymbolAndPackageGridDotColorForDevice"
let Preferences_mSymbolAndPackageGridLineColorForDevice = "Preferences:mSymbolAndPackageGridLineColorForDevice"
let Preferences_mSymbolAndPackageBackgroundColorForDevice = "Preferences:mSymbolAndPackageBackgroundColorForDevice"
let Preferences_mPackageColorForDevice = "Preferences:mPackageColorForDevice"
let Preferences_mTopSidePadColorForDevice = "Preferences:mTopSidePadColorForDevice"
let Preferences_mBottomSidePadColorForDevice = "Preferences:mBottomSidePadColorForDevice"
let Preferences_mPadNumberColorForDevice = "Preferences:mPadNumberColorForDevice"
let Preferences_mPackageNameFontForDevice = "Preferences:mPackageNameFontForDevice"
let Preferences_mPadNumberFontForDevice = "Preferences:mPadNumberFontForDevice"
let Preferences_mSymbolColorForDevice = "Preferences:mSymbolColorForDevice"
let Preferences_mSymbolNameFontForDevice = "Preferences:mSymbolNameFontForDevice"
let Preferences_mPinNameFontForDevice = "Preferences:mPinNameFontForDevice"
let Preferences_symbolDrawingWidthForDeviceMultipliedByTen = "Preferences:symbolDrawingWidthForDeviceMultipliedByTen"
let Preferences_packageDrawingWidthForDeviceMultipliedByTen = "Preferences:packageDrawingWidthForDeviceMultipliedByTen"
let Preferences_dotColorGridForSchematic = "Preferences:dotColorGridForSchematic"
let Preferences_lineColorGridForSchematic = "Preferences:lineColorGridForSchematic"
let Preferences_symbolColorForUnplacedComponentsForSchematic = "Preferences:symbolColorForUnplacedComponentsForSchematic"
let Preferences_symbolColorForSchematic = "Preferences:symbolColorForSchematic"
let Preferences_pinNameFontForSchematic = "Preferences:pinNameFontForSchematic"
let Preferences_pinNameColorForSchematic = "Preferences:pinNameColorForSchematic"
let Preferences_pinNumberFontForSchematic = "Preferences:pinNumberFontForSchematic"
let Preferences_pinNumberColorForSchematic = "Preferences:pinNumberColorForSchematic"
let Preferences_connectionColorForSchematic = "Preferences:connectionColorForSchematic"
let Preferences_symbolDrawingWidthMultipliedByTenForSchematic = "Preferences:symbolDrawingWidthMultipliedByTenForSchematic"
let Preferences_dotColorGridForBoard = "Preferences:dotColorGridForBoard"
let Preferences_lineColorGridForBoard = "Preferences:lineColorGridForBoard"
let Preferences_boardBackgroundColorForBoard = "Preferences:boardBackgroundColorForBoard"
let Preferences_errorBackgroundColorForBoard = "Preferences:errorBackgroundColorForBoard"
let Preferences_drawErrorBackgroundForBoard = "Preferences:drawErrorBackgroundForBoard"
let Preferences_warningBackgroundColorForBoard = "Preferences:warningBackgroundColorForBoard"
let Preferences_drawEWarningBackgroundForBoard = "Preferences:drawEWarningBackgroundForBoard"
let Preferences_boardLimitsColorForBoard = "Preferences:boardLimitsColorForBoard"
let Preferences_boardClearanceColorForBoard = "Preferences:boardClearanceColorForBoard"
let Preferences_topSideRestrictRectangleColorForBoard = "Preferences:topSideRestrictRectangleColorForBoard"
let Preferences_bottomSideRestrictRectangleColorForBoard = "Preferences:bottomSideRestrictRectangleColorForBoard"
let Preferences_topSideLegendColorForBoard = "Preferences:topSideLegendColorForBoard"
let Preferences_topSideLayoutColorForBoard = "Preferences:topSideLayoutColorForBoard"
let Preferences_bottomSideLayoutColorForBoard = "Preferences:bottomSideLayoutColorForBoard"
let Preferences_bottomSideLegendColorForBoard = "Preferences:bottomSideLegendColorForBoard"
let Preferences_topSidePadColorForBoard = "Preferences:topSidePadColorForBoard"
let Preferences_bottomSidePadColorForBoard = "Preferences:bottomSidePadColorForBoard"
let Preferences_padNumberFontForBoard = "Preferences:padNumberFontForBoard"
let Preferences_padNumberColorForBoard = "Preferences:padNumberColorForBoard"
let Preferences_packageDrawingWidthMultpliedByTenForBoard = "Preferences:packageDrawingWidthMultpliedByTenForBoard"
let Preferences_showGerberDrawingFlow = "Preferences:showGerberDrawingFlow"
let Preferences_showGerberDrawingIndexes = "Preferences:showGerberDrawingIndexes"
let Preferences_currentCharacterCodePoint = "Preferences:currentCharacterCodePoint"
let Preferences_fontEditionTransparency = "Preferences:fontEditionTransparency"
let Preferences_checkForSystemLibraryAtStartUp = "Preferences:checkForSystemLibraryAtStartUp"
let Preferences_systemLibraryCheckTimeInterval = "Preferences:systemLibraryCheckTimeInterval"
let Preferences_mergerModelViewHorizontalFlip = "Preferences:mergerModelViewHorizontalFlip"
let Preferences_mergerModelViewVerticalFlip = "Preferences:mergerModelViewVerticalFlip"
let Preferences_mergerModelViewDisplayHoles = "Preferences:mergerModelViewDisplayHoles"
let Preferences_mergerModelViewDisplayVias = "Preferences:mergerModelViewDisplayVias"
let Preferences_mergerModelViewDisplayFrontPads = "Preferences:mergerModelViewDisplayFrontPads"
let Preferences_mergerModelViewDisplayInternalBoardsLimits = "Preferences:mergerModelViewDisplayInternalBoardsLimits"
let Preferences_mergerModelViewDisplayBoardLimits = "Preferences:mergerModelViewDisplayBoardLimits"
let Preferences_mergerModelViewDisplayFrontComponentNames = "Preferences:mergerModelViewDisplayFrontComponentNames"
let Preferences_mergerModelViewDisplayFrontComponentValues = "Preferences:mergerModelViewDisplayFrontComponentValues"
let Preferences_mergerModelViewDisplayFrontPackages = "Preferences:mergerModelViewDisplayFrontPackages"
let Preferences_mergerModelViewDisplayFrontLegendTexts = "Preferences:mergerModelViewDisplayFrontLegendTexts"
let Preferences_mergerModelViewDisplayFrontTracks = "Preferences:mergerModelViewDisplayFrontTracks"
let Preferences_mergerModelViewDisplayFrontLayoutTexts = "Preferences:mergerModelViewDisplayFrontLayoutTexts"
let Preferences_mergerModelViewDisplayBackPads = "Preferences:mergerModelViewDisplayBackPads"
let Preferences_mergerModelViewDisplayBackComponentNames = "Preferences:mergerModelViewDisplayBackComponentNames"
let Preferences_mergerModelViewDisplayBackComponentValues = "Preferences:mergerModelViewDisplayBackComponentValues"
let Preferences_mergerModelViewDisplayBackLegendTexts = "Preferences:mergerModelViewDisplayBackLegendTexts"
let Preferences_mergerModelViewDisplayBackPackages = "Preferences:mergerModelViewDisplayBackPackages"
let Preferences_mergerModelViewDisplayBackTracks = "Preferences:mergerModelViewDisplayBackTracks"
let Preferences_mergerModelViewDisplayBackLayoutTexts = "Preferences:mergerModelViewDisplayBackLayoutTexts"
let Preferences_mergerModelViewDisplayFrontLegendLines = "Preferences:mergerModelViewDisplayFrontLegendLines"
let Preferences_mergerModelViewDisplayBackLegendLines = "Preferences:mergerModelViewDisplayBackLegendLines"
let Preferences_mergerBoardViewHorizontalFlip = "Preferences:mergerBoardViewHorizontalFlip"
let Preferences_mergerBoardViewVerticalFlip = "Preferences:mergerBoardViewVerticalFlip"
let Preferences_mergerBoardViewDisplayHoles = "Preferences:mergerBoardViewDisplayHoles"
let Preferences_mergerBoardViewDisplayVias = "Preferences:mergerBoardViewDisplayVias"
let Preferences_mergerBoardViewDisplayFrontPads = "Preferences:mergerBoardViewDisplayFrontPads"
let Preferences_mergerBoardViewDisplayInternalBoardsLimits = "Preferences:mergerBoardViewDisplayInternalBoardsLimits"
let Preferences_mergerBoardViewDisplayBoardLimits = "Preferences:mergerBoardViewDisplayBoardLimits"
let Preferences_mergerBoardViewDisplayFrontComponentNames = "Preferences:mergerBoardViewDisplayFrontComponentNames"
let Preferences_mergerBoardViewDisplayFrontComponentValues = "Preferences:mergerBoardViewDisplayFrontComponentValues"
let Preferences_mergerBoardViewDisplayFrontPackages = "Preferences:mergerBoardViewDisplayFrontPackages"
let Preferences_mergerBoardViewDisplayFrontLegendTexts = "Preferences:mergerBoardViewDisplayFrontLegendTexts"
let Preferences_mergerBoardViewDisplayFrontTracks = "Preferences:mergerBoardViewDisplayFrontTracks"
let Preferences_mergerBoardViewDisplayFrontLayoutTexts = "Preferences:mergerBoardViewDisplayFrontLayoutTexts"
let Preferences_mergerBoardViewDisplayBackPads = "Preferences:mergerBoardViewDisplayBackPads"
let Preferences_mergerBoardViewDisplayBackComponentNames = "Preferences:mergerBoardViewDisplayBackComponentNames"
let Preferences_mergerBoardViewDisplayBackComponentValues = "Preferences:mergerBoardViewDisplayBackComponentValues"
let Preferences_mergerBoardViewDisplayBackLegendTexts = "Preferences:mergerBoardViewDisplayBackLegendTexts"
let Preferences_mergerBoardViewDisplayBackPackages = "Preferences:mergerBoardViewDisplayBackPackages"
let Preferences_mergerBoardViewDisplayBackTracks = "Preferences:mergerBoardViewDisplayBackTracks"
let Preferences_mergerBoardViewDisplayBackLayoutTexts = "Preferences:mergerBoardViewDisplayBackLayoutTexts"
let Preferences_mergerBoardViewDisplayFrontLegendLines = "Preferences:mergerBoardViewDisplayFrontLegendLines"
let Preferences_mergerBoardViewDisplayBackLegendLines = "Preferences:mergerBoardViewDisplayBackLegendLines"
let Preferences_mergerColorHoles = "Preferences:mergerColorHoles"
let Preferences_mergerColorVias = "Preferences:mergerColorVias"
let Preferences_mergerColorFrontPads = "Preferences:mergerColorFrontPads"
let Preferences_mergerColorBoardLimits = "Preferences:mergerColorBoardLimits"
let Preferences_mergerColorInternalBoardsLimits = "Preferences:mergerColorInternalBoardsLimits"
let Preferences_mergerColorFrontComponentNames = "Preferences:mergerColorFrontComponentNames"
let Preferences_mergerColorFrontComponentValues = "Preferences:mergerColorFrontComponentValues"
let Preferences_mergerColorFrontPackages = "Preferences:mergerColorFrontPackages"
let Preferences_mergerColorFrontLegendTexts = "Preferences:mergerColorFrontLegendTexts"
let Preferences_mergerColorFrontTracks = "Preferences:mergerColorFrontTracks"
let Preferences_mergerColorFrontLayoutTexts = "Preferences:mergerColorFrontLayoutTexts"
let Preferences_mergerColorBackPads = "Preferences:mergerColorBackPads"
let Preferences_mergerColorBackComponentNames = "Preferences:mergerColorBackComponentNames"
let Preferences_mergerColorBackComponentValues = "Preferences:mergerColorBackComponentValues"
let Preferences_mergerColorBackLegendTexts = "Preferences:mergerColorBackLegendTexts"
let Preferences_mergerColorBackPackages = "Preferences:mergerColorBackPackages"
let Preferences_mergerColorBackTracks = "Preferences:mergerColorBackTracks"
let Preferences_mergerColorBackLayoutTexts = "Preferences:mergerColorBackLayoutTexts"
let Preferences_mergerColorFrontLegendLines = "Preferences:mergerColorFrontLegendLines"
let Preferences_mergerColorBackLegendLines = "Preferences:mergerColorBackLegendLines"
let Preferences_mergerColorBackground = "Preferences:mergerColorBackground"
let Preferences_errorMessageColor = "Preferences:errorMessageColor"
let Preferences_hiliteWidthMultipliedByTen = "Preferences:hiliteWidthMultipliedByTen"
let Preferences_usesUserLibrary = "Preferences:usesUserLibrary"
let Preferences_additionnalLibraryArray = "Preferences:additionnalLibraryArray"
let Preferences_pinNameFont = "Preferences:pinNameFont"
let Preferences_displayPackageTopSidePads = "Preferences:displayPackageTopSidePads"
let Preferences_sampleString = "Preferences:sampleString"
let Preferences_sampleStringSize = "Preferences:sampleStringSize"
let Preferences_mLastSystemLibraryCheckTime = "Preferences:mLastSystemLibraryCheckTime"

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Preferences) class Preferences : EBObject, NSWindowDelegate {

  //····················································································································
  //   Atomic property: warningMessageColor
  //····················································································································

  var warningMessageColor_property = EBStoredProperty_NSColor (NSColor.orange, prefKey: Preferences_warningMessageColor)

  //····················································································································

  var warningMessageColor : NSColor {
    get {
      return self.warningMessageColor_property.propval
    }
    set {
      self.warningMessageColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var warningMessageColor_property_selection : EBSelection <NSColor> {
    return self.warningMessageColor_property.prop
  }

  //····················································································································
  //   Atomic property: successMessageColor
  //····················································································································

  var successMessageColor_property = EBStoredProperty_NSColor (NSColor.blue, prefKey: Preferences_successMessageColor)

  //····················································································································

  var successMessageColor : NSColor {
    get {
      return self.successMessageColor_property.propval
    }
    set {
      self.successMessageColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var successMessageColor_property_selection : EBSelection <NSColor> {
    return self.successMessageColor_property.prop
  }

  //····················································································································
  //   Atomic property: selectionHiliteColor
  //····················································································································

  var selectionHiliteColor_property = EBStoredProperty_NSColor (NSColor.cyan, prefKey: Preferences_selectionHiliteColor)

  //····················································································································

  var selectionHiliteColor : NSColor {
    get {
      return self.selectionHiliteColor_property.propval
    }
    set {
      self.selectionHiliteColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var selectionHiliteColor_property_selection : EBSelection <NSColor> {
    return self.selectionHiliteColor_property.prop
  }

  //····················································································································
  //   Atomic property: symbolColor
  //····················································································································

  var symbolColor_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_symbolColor)

  //····················································································································

  var symbolColor : NSColor {
    get {
      return self.symbolColor_property.propval
    }
    set {
      self.symbolColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var symbolColor_property_selection : EBSelection <NSColor> {
    return self.symbolColor_property.prop
  }

  //····················································································································
  //   Atomic property: crossColorOfSymbolGrid
  //····················································································································

  var crossColorOfSymbolGrid_property = EBStoredProperty_NSColor (NSColor.black, prefKey: Preferences_crossColorOfSymbolGrid)

  //····················································································································

  var crossColorOfSymbolGrid : NSColor {
    get {
      return self.crossColorOfSymbolGrid_property.propval
    }
    set {
      self.crossColorOfSymbolGrid_property.setProp (newValue)
    }
  }

  //····················································································································

  var crossColorOfSymbolGrid_property_selection : EBSelection <NSColor> {
    return self.crossColorOfSymbolGrid_property.prop
  }

  //····················································································································
  //   Atomic property: lineColorOfSymbolGrid
  //····················································································································

  var lineColorOfSymbolGrid_property = EBStoredProperty_NSColor (NSColor.gray, prefKey: Preferences_lineColorOfSymbolGrid)

  //····················································································································

  var lineColorOfSymbolGrid : NSColor {
    get {
      return self.lineColorOfSymbolGrid_property.propval
    }
    set {
      self.lineColorOfSymbolGrid_property.setProp (newValue)
    }
  }

  //····················································································································

  var lineColorOfSymbolGrid_property_selection : EBSelection <NSColor> {
    return self.lineColorOfSymbolGrid_property.prop
  }

  //····················································································································
  //   Atomic property: symbolBackgroundColor
  //····················································································································

  var symbolBackgroundColor_property = EBStoredProperty_NSColor (NSColor.white, prefKey: Preferences_symbolBackgroundColor)

  //····················································································································

  var symbolBackgroundColor : NSColor {
    get {
      return self.symbolBackgroundColor_property.propval
    }
    set {
      self.symbolBackgroundColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var symbolBackgroundColor_property_selection : EBSelection <NSColor> {
    return self.symbolBackgroundColor_property.prop
  }

  //····················································································································
  //   Atomic property: symbolDrawingWidthMultipliedByTen
  //····················································································································

  var symbolDrawingWidthMultipliedByTen_property = EBStoredProperty_Int (5, prefKey: Preferences_symbolDrawingWidthMultipliedByTen)

  //····················································································································

  var symbolDrawingWidthMultipliedByTen : Int {
    get {
      return self.symbolDrawingWidthMultipliedByTen_property.propval
    }
    set {
      self.symbolDrawingWidthMultipliedByTen_property.setProp (newValue)
    }
  }

  //····················································································································

  var symbolDrawingWidthMultipliedByTen_property_selection : EBSelection <Int> {
    return self.symbolDrawingWidthMultipliedByTen_property.prop
  }

  //····················································································································
  //   Atomic property: crossColorOfPackageGrid
  //····················································································································

  var crossColorOfPackageGrid_property = EBStoredProperty_NSColor (NSColor.white, prefKey: Preferences_crossColorOfPackageGrid)

  //····················································································································

  var crossColorOfPackageGrid : NSColor {
    get {
      return self.crossColorOfPackageGrid_property.propval
    }
    set {
      self.crossColorOfPackageGrid_property.setProp (newValue)
    }
  }

  //····················································································································

  var crossColorOfPackageGrid_property_selection : EBSelection <NSColor> {
    return self.crossColorOfPackageGrid_property.prop
  }

  //····················································································································
  //   Atomic property: lineColorOfPackageGrid
  //····················································································································

  var lineColorOfPackageGrid_property = EBStoredProperty_NSColor (NSColor.gray, prefKey: Preferences_lineColorOfPackageGrid)

  //····················································································································

  var lineColorOfPackageGrid : NSColor {
    get {
      return self.lineColorOfPackageGrid_property.propval
    }
    set {
      self.lineColorOfPackageGrid_property.setProp (newValue)
    }
  }

  //····················································································································

  var lineColorOfPackageGrid_property_selection : EBSelection <NSColor> {
    return self.lineColorOfPackageGrid_property.prop
  }

  //····················································································································
  //   Atomic property: packageBackgroundColor
  //····················································································································

  var packageBackgroundColor_property = EBStoredProperty_NSColor (NSColor.black, prefKey: Preferences_packageBackgroundColor)

  //····················································································································

  var packageBackgroundColor : NSColor {
    get {
      return self.packageBackgroundColor_property.propval
    }
    set {
      self.packageBackgroundColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var packageBackgroundColor_property_selection : EBSelection <NSColor> {
    return self.packageBackgroundColor_property.prop
  }

  //····················································································································
  //   Atomic property: packageColor
  //····················································································································

  var packageColor_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_packageColor)

  //····················································································································

  var packageColor : NSColor {
    get {
      return self.packageColor_property.propval
    }
    set {
      self.packageColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var packageColor_property_selection : EBSelection <NSColor> {
    return self.packageColor_property.prop
  }

  //····················································································································
  //   Atomic property: topSidePadColor
  //····················································································································

  var topSidePadColor_property = EBStoredProperty_NSColor (NSColor.blue, prefKey: Preferences_topSidePadColor)

  //····················································································································

  var topSidePadColor : NSColor {
    get {
      return self.topSidePadColor_property.propval
    }
    set {
      self.topSidePadColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var topSidePadColor_property_selection : EBSelection <NSColor> {
    return self.topSidePadColor_property.prop
  }

  //····················································································································
  //   Atomic property: bottomSidePadColor
  //····················································································································

  var bottomSidePadColor_property = EBStoredProperty_NSColor (NSColor.green, prefKey: Preferences_bottomSidePadColor)

  //····················································································································

  var bottomSidePadColor : NSColor {
    get {
      return self.bottomSidePadColor_property.propval
    }
    set {
      self.bottomSidePadColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var bottomSidePadColor_property_selection : EBSelection <NSColor> {
    return self.bottomSidePadColor_property.prop
  }

  //····················································································································
  //   Atomic property: displayPackageBottomSidePads
  //····················································································································

  var displayPackageBottomSidePads_property = EBStoredProperty_Bool (true, prefKey: Preferences_displayPackageBottomSidePads)

  //····················································································································

  var displayPackageBottomSidePads : Bool {
    get {
      return self.displayPackageBottomSidePads_property.propval
    }
    set {
      self.displayPackageBottomSidePads_property.setProp (newValue)
    }
  }

  //····················································································································

  var displayPackageBottomSidePads_property_selection : EBSelection <Bool> {
    return self.displayPackageBottomSidePads_property.prop
  }

  //····················································································································
  //   Atomic property: padNumberColor
  //····················································································································

  var padNumberColor_property = EBStoredProperty_NSColor (NSColor.red, prefKey: Preferences_padNumberColor)

  //····················································································································

  var padNumberColor : NSColor {
    get {
      return self.padNumberColor_property.propval
    }
    set {
      self.padNumberColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var padNumberColor_property_selection : EBSelection <NSColor> {
    return self.padNumberColor_property.prop
  }

  //····················································································································
  //   Atomic property: padNumberFont
  //····················································································································

  var padNumberFont_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padNumberFont)

  //····················································································································

  var padNumberFont : NSFont {
    get {
      return self.padNumberFont_property.propval
    }
    set {
      self.padNumberFont_property.setProp (newValue)
    }
  }

  //····················································································································

  var padNumberFont_property_selection : EBSelection <NSFont> {
    return self.padNumberFont_property.prop
  }

  //····················································································································
  //   Atomic property: showPadNumber
  //····················································································································

  var showPadNumber_property = EBStoredProperty_Bool (true, prefKey: Preferences_showPadNumber)

  //····················································································································

  var showPadNumber : Bool {
    get {
      return self.showPadNumber_property.propval
    }
    set {
      self.showPadNumber_property.setProp (newValue)
    }
  }

  //····················································································································

  var showPadNumber_property_selection : EBSelection <Bool> {
    return self.showPadNumber_property.prop
  }

  //····················································································································
  //   Atomic property: packageGuideColor
  //····················································································································

  var packageGuideColor_property = EBStoredProperty_NSColor (NSColor.yellow, prefKey: Preferences_packageGuideColor)

  //····················································································································

  var packageGuideColor : NSColor {
    get {
      return self.packageGuideColor_property.propval
    }
    set {
      self.packageGuideColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var packageGuideColor_property_selection : EBSelection <NSColor> {
    return self.packageGuideColor_property.prop
  }

  //····················································································································
  //   Atomic property: packageDimensionColor
  //····················································································································

  var packageDimensionColor_property = EBStoredProperty_NSColor (NSColor.orange, prefKey: Preferences_packageDimensionColor)

  //····················································································································

  var packageDimensionColor : NSColor {
    get {
      return self.packageDimensionColor_property.propval
    }
    set {
      self.packageDimensionColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var packageDimensionColor_property_selection : EBSelection <NSColor> {
    return self.packageDimensionColor_property.prop
  }

  //····················································································································
  //   Atomic property: dimensionFont
  //····················································································································

  var dimensionFont_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 2.0), prefKey: Preferences_dimensionFont)

  //····················································································································

  var dimensionFont : NSFont {
    get {
      return self.dimensionFont_property.propval
    }
    set {
      self.dimensionFont_property.setProp (newValue)
    }
  }

  //····················································································································

  var dimensionFont_property_selection : EBSelection <NSFont> {
    return self.dimensionFont_property.prop
  }

  //····················································································································
  //   Atomic property: padZoneColor
  //····················································································································

  var padZoneColor_property = EBStoredProperty_NSColor (NSColor.magenta, prefKey: Preferences_padZoneColor)

  //····················································································································

  var padZoneColor : NSColor {
    get {
      return self.padZoneColor_property.propval
    }
    set {
      self.padZoneColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var padZoneColor_property_selection : EBSelection <NSColor> {
    return self.padZoneColor_property.prop
  }

  //····················································································································
  //   Atomic property: padZoneFont
  //····················································································································

  var padZoneFont_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padZoneFont)

  //····················································································································

  var padZoneFont : NSFont {
    get {
      return self.padZoneFont_property.propval
    }
    set {
      self.padZoneFont_property.setProp (newValue)
    }
  }

  //····················································································································

  var padZoneFont_property_selection : EBSelection <NSFont> {
    return self.padZoneFont_property.prop
  }

  //····················································································································
  //   Atomic property: packageDrawingWidthMultipliedByTen
  //····················································································································

  var packageDrawingWidthMultipliedByTen_property = EBStoredProperty_Int (15, prefKey: Preferences_packageDrawingWidthMultipliedByTen)

  //····················································································································

  var packageDrawingWidthMultipliedByTen : Int {
    get {
      return self.packageDrawingWidthMultipliedByTen_property.propval
    }
    set {
      self.packageDrawingWidthMultipliedByTen_property.setProp (newValue)
    }
  }

  //····················································································································

  var packageDrawingWidthMultipliedByTen_property_selection : EBSelection <Int> {
    return self.packageDrawingWidthMultipliedByTen_property.prop
  }

  //····················································································································
  //   Atomic property: mSymbolAndPackageGridDotColorForDevice
  //····················································································································

  var mSymbolAndPackageGridDotColorForDevice_property = EBStoredProperty_NSColor (NSColor.black, prefKey: Preferences_mSymbolAndPackageGridDotColorForDevice)

  //····················································································································

  var mSymbolAndPackageGridDotColorForDevice : NSColor {
    get {
      return self.mSymbolAndPackageGridDotColorForDevice_property.propval
    }
    set {
      self.mSymbolAndPackageGridDotColorForDevice_property.setProp (newValue)
    }
  }

  //····················································································································

  var mSymbolAndPackageGridDotColorForDevice_property_selection : EBSelection <NSColor> {
    return self.mSymbolAndPackageGridDotColorForDevice_property.prop
  }

  //····················································································································
  //   Atomic property: mSymbolAndPackageGridLineColorForDevice
  //····················································································································

  var mSymbolAndPackageGridLineColorForDevice_property = EBStoredProperty_NSColor (NSColor.gray, prefKey: Preferences_mSymbolAndPackageGridLineColorForDevice)

  //····················································································································

  var mSymbolAndPackageGridLineColorForDevice : NSColor {
    get {
      return self.mSymbolAndPackageGridLineColorForDevice_property.propval
    }
    set {
      self.mSymbolAndPackageGridLineColorForDevice_property.setProp (newValue)
    }
  }

  //····················································································································

  var mSymbolAndPackageGridLineColorForDevice_property_selection : EBSelection <NSColor> {
    return self.mSymbolAndPackageGridLineColorForDevice_property.prop
  }

  //····················································································································
  //   Atomic property: mSymbolAndPackageBackgroundColorForDevice
  //····················································································································

  var mSymbolAndPackageBackgroundColorForDevice_property = EBStoredProperty_NSColor (NSColor.white, prefKey: Preferences_mSymbolAndPackageBackgroundColorForDevice)

  //····················································································································

  var mSymbolAndPackageBackgroundColorForDevice : NSColor {
    get {
      return self.mSymbolAndPackageBackgroundColorForDevice_property.propval
    }
    set {
      self.mSymbolAndPackageBackgroundColorForDevice_property.setProp (newValue)
    }
  }

  //····················································································································

  var mSymbolAndPackageBackgroundColorForDevice_property_selection : EBSelection <NSColor> {
    return self.mSymbolAndPackageBackgroundColorForDevice_property.prop
  }

  //····················································································································
  //   Atomic property: mPackageColorForDevice
  //····················································································································

  var mPackageColorForDevice_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_mPackageColorForDevice)

  //····················································································································

  var mPackageColorForDevice : NSColor {
    get {
      return self.mPackageColorForDevice_property.propval
    }
    set {
      self.mPackageColorForDevice_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPackageColorForDevice_property_selection : EBSelection <NSColor> {
    return self.mPackageColorForDevice_property.prop
  }

  //····················································································································
  //   Atomic property: mTopSidePadColorForDevice
  //····················································································································

  var mTopSidePadColorForDevice_property = EBStoredProperty_NSColor (NSColor.blue, prefKey: Preferences_mTopSidePadColorForDevice)

  //····················································································································

  var mTopSidePadColorForDevice : NSColor {
    get {
      return self.mTopSidePadColorForDevice_property.propval
    }
    set {
      self.mTopSidePadColorForDevice_property.setProp (newValue)
    }
  }

  //····················································································································

  var mTopSidePadColorForDevice_property_selection : EBSelection <NSColor> {
    return self.mTopSidePadColorForDevice_property.prop
  }

  //····················································································································
  //   Atomic property: mBottomSidePadColorForDevice
  //····················································································································

  var mBottomSidePadColorForDevice_property = EBStoredProperty_NSColor (NSColor.green, prefKey: Preferences_mBottomSidePadColorForDevice)

  //····················································································································

  var mBottomSidePadColorForDevice : NSColor {
    get {
      return self.mBottomSidePadColorForDevice_property.propval
    }
    set {
      self.mBottomSidePadColorForDevice_property.setProp (newValue)
    }
  }

  //····················································································································

  var mBottomSidePadColorForDevice_property_selection : EBSelection <NSColor> {
    return self.mBottomSidePadColorForDevice_property.prop
  }

  //····················································································································
  //   Atomic property: mPadNumberColorForDevice
  //····················································································································

  var mPadNumberColorForDevice_property = EBStoredProperty_NSColor (NSColor.red, prefKey: Preferences_mPadNumberColorForDevice)

  //····················································································································

  var mPadNumberColorForDevice : NSColor {
    get {
      return self.mPadNumberColorForDevice_property.propval
    }
    set {
      self.mPadNumberColorForDevice_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPadNumberColorForDevice_property_selection : EBSelection <NSColor> {
    return self.mPadNumberColorForDevice_property.prop
  }

  //····················································································································
  //   Atomic property: mPackageNameFontForDevice
  //····················································································································

  var mPackageNameFontForDevice_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 9.0), prefKey: Preferences_mPackageNameFontForDevice)

  //····················································································································

  var mPackageNameFontForDevice : NSFont {
    get {
      return self.mPackageNameFontForDevice_property.propval
    }
    set {
      self.mPackageNameFontForDevice_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPackageNameFontForDevice_property_selection : EBSelection <NSFont> {
    return self.mPackageNameFontForDevice_property.prop
  }

  //····················································································································
  //   Atomic property: mPadNumberFontForDevice
  //····················································································································

  var mPadNumberFontForDevice_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 5.0), prefKey: Preferences_mPadNumberFontForDevice)

  //····················································································································

  var mPadNumberFontForDevice : NSFont {
    get {
      return self.mPadNumberFontForDevice_property.propval
    }
    set {
      self.mPadNumberFontForDevice_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPadNumberFontForDevice_property_selection : EBSelection <NSFont> {
    return self.mPadNumberFontForDevice_property.prop
  }

  //····················································································································
  //   Atomic property: mSymbolColorForDevice
  //····················································································································

  var mSymbolColorForDevice_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_mSymbolColorForDevice)

  //····················································································································

  var mSymbolColorForDevice : NSColor {
    get {
      return self.mSymbolColorForDevice_property.propval
    }
    set {
      self.mSymbolColorForDevice_property.setProp (newValue)
    }
  }

  //····················································································································

  var mSymbolColorForDevice_property_selection : EBSelection <NSColor> {
    return self.mSymbolColorForDevice_property.prop
  }

  //····················································································································
  //   Atomic property: mSymbolNameFontForDevice
  //····················································································································

  var mSymbolNameFontForDevice_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 9.0), prefKey: Preferences_mSymbolNameFontForDevice)

  //····················································································································

  var mSymbolNameFontForDevice : NSFont {
    get {
      return self.mSymbolNameFontForDevice_property.propval
    }
    set {
      self.mSymbolNameFontForDevice_property.setProp (newValue)
    }
  }

  //····················································································································

  var mSymbolNameFontForDevice_property_selection : EBSelection <NSFont> {
    return self.mSymbolNameFontForDevice_property.prop
  }

  //····················································································································
  //   Atomic property: mPinNameFontForDevice
  //····················································································································

  var mPinNameFontForDevice_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_mPinNameFontForDevice)

  //····················································································································

  var mPinNameFontForDevice : NSFont {
    get {
      return self.mPinNameFontForDevice_property.propval
    }
    set {
      self.mPinNameFontForDevice_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPinNameFontForDevice_property_selection : EBSelection <NSFont> {
    return self.mPinNameFontForDevice_property.prop
  }

  //····················································································································
  //   Atomic property: symbolDrawingWidthForDeviceMultipliedByTen
  //····················································································································

  var symbolDrawingWidthForDeviceMultipliedByTen_property = EBStoredProperty_Int (15, prefKey: Preferences_symbolDrawingWidthForDeviceMultipliedByTen)

  //····················································································································

  var symbolDrawingWidthForDeviceMultipliedByTen : Int {
    get {
      return self.symbolDrawingWidthForDeviceMultipliedByTen_property.propval
    }
    set {
      self.symbolDrawingWidthForDeviceMultipliedByTen_property.setProp (newValue)
    }
  }

  //····················································································································

  var symbolDrawingWidthForDeviceMultipliedByTen_property_selection : EBSelection <Int> {
    return self.symbolDrawingWidthForDeviceMultipliedByTen_property.prop
  }

  //····················································································································
  //   Atomic property: packageDrawingWidthForDeviceMultipliedByTen
  //····················································································································

  var packageDrawingWidthForDeviceMultipliedByTen_property = EBStoredProperty_Int (15, prefKey: Preferences_packageDrawingWidthForDeviceMultipliedByTen)

  //····················································································································

  var packageDrawingWidthForDeviceMultipliedByTen : Int {
    get {
      return self.packageDrawingWidthForDeviceMultipliedByTen_property.propval
    }
    set {
      self.packageDrawingWidthForDeviceMultipliedByTen_property.setProp (newValue)
    }
  }

  //····················································································································

  var packageDrawingWidthForDeviceMultipliedByTen_property_selection : EBSelection <Int> {
    return self.packageDrawingWidthForDeviceMultipliedByTen_property.prop
  }

  //····················································································································
  //   Atomic property: dotColorGridForSchematic
  //····················································································································

  var dotColorGridForSchematic_property = EBStoredProperty_NSColor (NSColor.black, prefKey: Preferences_dotColorGridForSchematic)

  //····················································································································

  var dotColorGridForSchematic : NSColor {
    get {
      return self.dotColorGridForSchematic_property.propval
    }
    set {
      self.dotColorGridForSchematic_property.setProp (newValue)
    }
  }

  //····················································································································

  var dotColorGridForSchematic_property_selection : EBSelection <NSColor> {
    return self.dotColorGridForSchematic_property.prop
  }

  //····················································································································
  //   Atomic property: lineColorGridForSchematic
  //····················································································································

  var lineColorGridForSchematic_property = EBStoredProperty_NSColor (NSColor.gray, prefKey: Preferences_lineColorGridForSchematic)

  //····················································································································

  var lineColorGridForSchematic : NSColor {
    get {
      return self.lineColorGridForSchematic_property.propval
    }
    set {
      self.lineColorGridForSchematic_property.setProp (newValue)
    }
  }

  //····················································································································

  var lineColorGridForSchematic_property_selection : EBSelection <NSColor> {
    return self.lineColorGridForSchematic_property.prop
  }

  //····················································································································
  //   Atomic property: symbolColorForUnplacedComponentsForSchematic
  //····················································································································

  var symbolColorForUnplacedComponentsForSchematic_property = EBStoredProperty_NSColor (NSColor.darkGray, prefKey: Preferences_symbolColorForUnplacedComponentsForSchematic)

  //····················································································································

  var symbolColorForUnplacedComponentsForSchematic : NSColor {
    get {
      return self.symbolColorForUnplacedComponentsForSchematic_property.propval
    }
    set {
      self.symbolColorForUnplacedComponentsForSchematic_property.setProp (newValue)
    }
  }

  //····················································································································

  var symbolColorForUnplacedComponentsForSchematic_property_selection : EBSelection <NSColor> {
    return self.symbolColorForUnplacedComponentsForSchematic_property.prop
  }

  //····················································································································
  //   Atomic property: symbolColorForSchematic
  //····················································································································

  var symbolColorForSchematic_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_symbolColorForSchematic)

  //····················································································································

  var symbolColorForSchematic : NSColor {
    get {
      return self.symbolColorForSchematic_property.propval
    }
    set {
      self.symbolColorForSchematic_property.setProp (newValue)
    }
  }

  //····················································································································

  var symbolColorForSchematic_property_selection : EBSelection <NSColor> {
    return self.symbolColorForSchematic_property.prop
  }

  //····················································································································
  //   Atomic property: pinNameFontForSchematic
  //····················································································································

  var pinNameFontForSchematic_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNameFontForSchematic)

  //····················································································································

  var pinNameFontForSchematic : NSFont {
    get {
      return self.pinNameFontForSchematic_property.propval
    }
    set {
      self.pinNameFontForSchematic_property.setProp (newValue)
    }
  }

  //····················································································································

  var pinNameFontForSchematic_property_selection : EBSelection <NSFont> {
    return self.pinNameFontForSchematic_property.prop
  }

  //····················································································································
  //   Atomic property: pinNameColorForSchematic
  //····················································································································

  var pinNameColorForSchematic_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_pinNameColorForSchematic)

  //····················································································································

  var pinNameColorForSchematic : NSColor {
    get {
      return self.pinNameColorForSchematic_property.propval
    }
    set {
      self.pinNameColorForSchematic_property.setProp (newValue)
    }
  }

  //····················································································································

  var pinNameColorForSchematic_property_selection : EBSelection <NSColor> {
    return self.pinNameColorForSchematic_property.prop
  }

  //····················································································································
  //   Atomic property: pinNumberFontForSchematic
  //····················································································································

  var pinNumberFontForSchematic_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNumberFontForSchematic)

  //····················································································································

  var pinNumberFontForSchematic : NSFont {
    get {
      return self.pinNumberFontForSchematic_property.propval
    }
    set {
      self.pinNumberFontForSchematic_property.setProp (newValue)
    }
  }

  //····················································································································

  var pinNumberFontForSchematic_property_selection : EBSelection <NSFont> {
    return self.pinNumberFontForSchematic_property.prop
  }

  //····················································································································
  //   Atomic property: pinNumberColorForSchematic
  //····················································································································

  var pinNumberColorForSchematic_property = EBStoredProperty_NSColor (NSColor.darkGray, prefKey: Preferences_pinNumberColorForSchematic)

  //····················································································································

  var pinNumberColorForSchematic : NSColor {
    get {
      return self.pinNumberColorForSchematic_property.propval
    }
    set {
      self.pinNumberColorForSchematic_property.setProp (newValue)
    }
  }

  //····················································································································

  var pinNumberColorForSchematic_property_selection : EBSelection <NSColor> {
    return self.pinNumberColorForSchematic_property.prop
  }

  //····················································································································
  //   Atomic property: connectionColorForSchematic
  //····················································································································

  var connectionColorForSchematic_property = EBStoredProperty_NSColor (NSColor.black, prefKey: Preferences_connectionColorForSchematic)

  //····················································································································

  var connectionColorForSchematic : NSColor {
    get {
      return self.connectionColorForSchematic_property.propval
    }
    set {
      self.connectionColorForSchematic_property.setProp (newValue)
    }
  }

  //····················································································································

  var connectionColorForSchematic_property_selection : EBSelection <NSColor> {
    return self.connectionColorForSchematic_property.prop
  }

  //····················································································································
  //   Atomic property: symbolDrawingWidthMultipliedByTenForSchematic
  //····················································································································

  var symbolDrawingWidthMultipliedByTenForSchematic_property = EBStoredProperty_Int (5, prefKey: Preferences_symbolDrawingWidthMultipliedByTenForSchematic)

  //····················································································································

  var symbolDrawingWidthMultipliedByTenForSchematic : Int {
    get {
      return self.symbolDrawingWidthMultipliedByTenForSchematic_property.propval
    }
    set {
      self.symbolDrawingWidthMultipliedByTenForSchematic_property.setProp (newValue)
    }
  }

  //····················································································································

  var symbolDrawingWidthMultipliedByTenForSchematic_property_selection : EBSelection <Int> {
    return self.symbolDrawingWidthMultipliedByTenForSchematic_property.prop
  }

  //····················································································································
  //   Atomic property: dotColorGridForBoard
  //····················································································································

  var dotColorGridForBoard_property = EBStoredProperty_NSColor (NSColor.black, prefKey: Preferences_dotColorGridForBoard)

  //····················································································································

  var dotColorGridForBoard : NSColor {
    get {
      return self.dotColorGridForBoard_property.propval
    }
    set {
      self.dotColorGridForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var dotColorGridForBoard_property_selection : EBSelection <NSColor> {
    return self.dotColorGridForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: lineColorGridForBoard
  //····················································································································

  var lineColorGridForBoard_property = EBStoredProperty_NSColor (NSColor.gray, prefKey: Preferences_lineColorGridForBoard)

  //····················································································································

  var lineColorGridForBoard : NSColor {
    get {
      return self.lineColorGridForBoard_property.propval
    }
    set {
      self.lineColorGridForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var lineColorGridForBoard_property_selection : EBSelection <NSColor> {
    return self.lineColorGridForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: boardBackgroundColorForBoard
  //····················································································································

  var boardBackgroundColorForBoard_property = EBStoredProperty_NSColor (NSColor.black, prefKey: Preferences_boardBackgroundColorForBoard)

  //····················································································································

  var boardBackgroundColorForBoard : NSColor {
    get {
      return self.boardBackgroundColorForBoard_property.propval
    }
    set {
      self.boardBackgroundColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var boardBackgroundColorForBoard_property_selection : EBSelection <NSColor> {
    return self.boardBackgroundColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: errorBackgroundColorForBoard
  //····················································································································

  var errorBackgroundColorForBoard_property = EBStoredProperty_NSColor (NSColor.red, prefKey: Preferences_errorBackgroundColorForBoard)

  //····················································································································

  var errorBackgroundColorForBoard : NSColor {
    get {
      return self.errorBackgroundColorForBoard_property.propval
    }
    set {
      self.errorBackgroundColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var errorBackgroundColorForBoard_property_selection : EBSelection <NSColor> {
    return self.errorBackgroundColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: drawErrorBackgroundForBoard
  //····················································································································

  var drawErrorBackgroundForBoard_property = EBStoredProperty_Bool (true, prefKey: Preferences_drawErrorBackgroundForBoard)

  //····················································································································

  var drawErrorBackgroundForBoard : Bool {
    get {
      return self.drawErrorBackgroundForBoard_property.propval
    }
    set {
      self.drawErrorBackgroundForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var drawErrorBackgroundForBoard_property_selection : EBSelection <Bool> {
    return self.drawErrorBackgroundForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: warningBackgroundColorForBoard
  //····················································································································

  var warningBackgroundColorForBoard_property = EBStoredProperty_NSColor (NSColor.orange, prefKey: Preferences_warningBackgroundColorForBoard)

  //····················································································································

  var warningBackgroundColorForBoard : NSColor {
    get {
      return self.warningBackgroundColorForBoard_property.propval
    }
    set {
      self.warningBackgroundColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var warningBackgroundColorForBoard_property_selection : EBSelection <NSColor> {
    return self.warningBackgroundColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: drawEWarningBackgroundForBoard
  //····················································································································

  var drawEWarningBackgroundForBoard_property = EBStoredProperty_Bool (true, prefKey: Preferences_drawEWarningBackgroundForBoard)

  //····················································································································

  var drawEWarningBackgroundForBoard : Bool {
    get {
      return self.drawEWarningBackgroundForBoard_property.propval
    }
    set {
      self.drawEWarningBackgroundForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var drawEWarningBackgroundForBoard_property_selection : EBSelection <Bool> {
    return self.drawEWarningBackgroundForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: boardLimitsColorForBoard
  //····················································································································

  var boardLimitsColorForBoard_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_boardLimitsColorForBoard)

  //····················································································································

  var boardLimitsColorForBoard : NSColor {
    get {
      return self.boardLimitsColorForBoard_property.propval
    }
    set {
      self.boardLimitsColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var boardLimitsColorForBoard_property_selection : EBSelection <NSColor> {
    return self.boardLimitsColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: boardClearanceColorForBoard
  //····················································································································

  var boardClearanceColorForBoard_property = EBStoredProperty_NSColor (NSColor.yellow, prefKey: Preferences_boardClearanceColorForBoard)

  //····················································································································

  var boardClearanceColorForBoard : NSColor {
    get {
      return self.boardClearanceColorForBoard_property.propval
    }
    set {
      self.boardClearanceColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var boardClearanceColorForBoard_property_selection : EBSelection <NSColor> {
    return self.boardClearanceColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: topSideRestrictRectangleColorForBoard
  //····················································································································

  var topSideRestrictRectangleColorForBoard_property = EBStoredProperty_NSColor (NSColor.blue, prefKey: Preferences_topSideRestrictRectangleColorForBoard)

  //····················································································································

  var topSideRestrictRectangleColorForBoard : NSColor {
    get {
      return self.topSideRestrictRectangleColorForBoard_property.propval
    }
    set {
      self.topSideRestrictRectangleColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var topSideRestrictRectangleColorForBoard_property_selection : EBSelection <NSColor> {
    return self.topSideRestrictRectangleColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: bottomSideRestrictRectangleColorForBoard
  //····················································································································

  var bottomSideRestrictRectangleColorForBoard_property = EBStoredProperty_NSColor (NSColor.green, prefKey: Preferences_bottomSideRestrictRectangleColorForBoard)

  //····················································································································

  var bottomSideRestrictRectangleColorForBoard : NSColor {
    get {
      return self.bottomSideRestrictRectangleColorForBoard_property.propval
    }
    set {
      self.bottomSideRestrictRectangleColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var bottomSideRestrictRectangleColorForBoard_property_selection : EBSelection <NSColor> {
    return self.bottomSideRestrictRectangleColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: topSideLegendColorForBoard
  //····················································································································

  var topSideLegendColorForBoard_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_topSideLegendColorForBoard)

  //····················································································································

  var topSideLegendColorForBoard : NSColor {
    get {
      return self.topSideLegendColorForBoard_property.propval
    }
    set {
      self.topSideLegendColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var topSideLegendColorForBoard_property_selection : EBSelection <NSColor> {
    return self.topSideLegendColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: topSideLayoutColorForBoard
  //····················································································································

  var topSideLayoutColorForBoard_property = EBStoredProperty_NSColor (NSColor.blue, prefKey: Preferences_topSideLayoutColorForBoard)

  //····················································································································

  var topSideLayoutColorForBoard : NSColor {
    get {
      return self.topSideLayoutColorForBoard_property.propval
    }
    set {
      self.topSideLayoutColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var topSideLayoutColorForBoard_property_selection : EBSelection <NSColor> {
    return self.topSideLayoutColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: bottomSideLayoutColorForBoard
  //····················································································································

  var bottomSideLayoutColorForBoard_property = EBStoredProperty_NSColor (NSColor.green, prefKey: Preferences_bottomSideLayoutColorForBoard)

  //····················································································································

  var bottomSideLayoutColorForBoard : NSColor {
    get {
      return self.bottomSideLayoutColorForBoard_property.propval
    }
    set {
      self.bottomSideLayoutColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var bottomSideLayoutColorForBoard_property_selection : EBSelection <NSColor> {
    return self.bottomSideLayoutColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: bottomSideLegendColorForBoard
  //····················································································································

  var bottomSideLegendColorForBoard_property = EBStoredProperty_NSColor (NSColor.white, prefKey: Preferences_bottomSideLegendColorForBoard)

  //····················································································································

  var bottomSideLegendColorForBoard : NSColor {
    get {
      return self.bottomSideLegendColorForBoard_property.propval
    }
    set {
      self.bottomSideLegendColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var bottomSideLegendColorForBoard_property_selection : EBSelection <NSColor> {
    return self.bottomSideLegendColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: topSidePadColorForBoard
  //····················································································································

  var topSidePadColorForBoard_property = EBStoredProperty_NSColor (NSColor.blue, prefKey: Preferences_topSidePadColorForBoard)

  //····················································································································

  var topSidePadColorForBoard : NSColor {
    get {
      return self.topSidePadColorForBoard_property.propval
    }
    set {
      self.topSidePadColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var topSidePadColorForBoard_property_selection : EBSelection <NSColor> {
    return self.topSidePadColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: bottomSidePadColorForBoard
  //····················································································································

  var bottomSidePadColorForBoard_property = EBStoredProperty_NSColor (NSColor.green, prefKey: Preferences_bottomSidePadColorForBoard)

  //····················································································································

  var bottomSidePadColorForBoard : NSColor {
    get {
      return self.bottomSidePadColorForBoard_property.propval
    }
    set {
      self.bottomSidePadColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var bottomSidePadColorForBoard_property_selection : EBSelection <NSColor> {
    return self.bottomSidePadColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: padNumberFontForBoard
  //····················································································································

  var padNumberFontForBoard_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padNumberFontForBoard)

  //····················································································································

  var padNumberFontForBoard : NSFont {
    get {
      return self.padNumberFontForBoard_property.propval
    }
    set {
      self.padNumberFontForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var padNumberFontForBoard_property_selection : EBSelection <NSFont> {
    return self.padNumberFontForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: padNumberColorForBoard
  //····················································································································

  var padNumberColorForBoard_property = EBStoredProperty_NSColor (NSColor.red, prefKey: Preferences_padNumberColorForBoard)

  //····················································································································

  var padNumberColorForBoard : NSColor {
    get {
      return self.padNumberColorForBoard_property.propval
    }
    set {
      self.padNumberColorForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var padNumberColorForBoard_property_selection : EBSelection <NSColor> {
    return self.padNumberColorForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: packageDrawingWidthMultpliedByTenForBoard
  //····················································································································

  var packageDrawingWidthMultpliedByTenForBoard_property = EBStoredProperty_Int (5, prefKey: Preferences_packageDrawingWidthMultpliedByTenForBoard)

  //····················································································································

  var packageDrawingWidthMultpliedByTenForBoard : Int {
    get {
      return self.packageDrawingWidthMultpliedByTenForBoard_property.propval
    }
    set {
      self.packageDrawingWidthMultpliedByTenForBoard_property.setProp (newValue)
    }
  }

  //····················································································································

  var packageDrawingWidthMultpliedByTenForBoard_property_selection : EBSelection <Int> {
    return self.packageDrawingWidthMultpliedByTenForBoard_property.prop
  }

  //····················································································································
  //   Atomic property: showGerberDrawingFlow
  //····················································································································

  var showGerberDrawingFlow_property = EBStoredProperty_Bool (true, prefKey: Preferences_showGerberDrawingFlow)

  //····················································································································

  var showGerberDrawingFlow : Bool {
    get {
      return self.showGerberDrawingFlow_property.propval
    }
    set {
      self.showGerberDrawingFlow_property.setProp (newValue)
    }
  }

  //····················································································································

  var showGerberDrawingFlow_property_selection : EBSelection <Bool> {
    return self.showGerberDrawingFlow_property.prop
  }

  //····················································································································
  //   Atomic property: showGerberDrawingIndexes
  //····················································································································

  var showGerberDrawingIndexes_property = EBStoredProperty_Bool (true, prefKey: Preferences_showGerberDrawingIndexes)

  //····················································································································

  var showGerberDrawingIndexes : Bool {
    get {
      return self.showGerberDrawingIndexes_property.propval
    }
    set {
      self.showGerberDrawingIndexes_property.setProp (newValue)
    }
  }

  //····················································································································

  var showGerberDrawingIndexes_property_selection : EBSelection <Bool> {
    return self.showGerberDrawingIndexes_property.prop
  }

  //····················································································································
  //   Atomic property: currentCharacterCodePoint
  //····················································································································

  var currentCharacterCodePoint_property = EBStoredProperty_Int (65, prefKey: Preferences_currentCharacterCodePoint)

  //····················································································································

  var currentCharacterCodePoint : Int {
    get {
      return self.currentCharacterCodePoint_property.propval
    }
    set {
      self.currentCharacterCodePoint_property.setProp (newValue)
    }
  }

  //····················································································································

  var currentCharacterCodePoint_property_selection : EBSelection <Int> {
    return self.currentCharacterCodePoint_property.prop
  }

  //····················································································································

  func currentCharacterCodePoint_validateAndSetProp (_ inCandidateValue : Int, windowForSheet inWindow:NSWindow?) -> Bool {
    return self.currentCharacterCodePoint_property.validateAndSetProp (inCandidateValue, windowForSheet:inWindow)
  }

  //····················································································································
  //   Atomic property: fontEditionTransparency
  //····················································································································

  var fontEditionTransparency_property = EBStoredProperty_Double (0.5, prefKey: Preferences_fontEditionTransparency)

  //····················································································································

  var fontEditionTransparency : Double {
    get {
      return self.fontEditionTransparency_property.propval
    }
    set {
      self.fontEditionTransparency_property.setProp (newValue)
    }
  }

  //····················································································································

  var fontEditionTransparency_property_selection : EBSelection <Double> {
    return self.fontEditionTransparency_property.prop
  }

  //····················································································································
  //   Atomic property: checkForSystemLibraryAtStartUp
  //····················································································································

  var checkForSystemLibraryAtStartUp_property = EBStoredProperty_Bool (true, prefKey: Preferences_checkForSystemLibraryAtStartUp)

  //····················································································································

  var checkForSystemLibraryAtStartUp : Bool {
    get {
      return self.checkForSystemLibraryAtStartUp_property.propval
    }
    set {
      self.checkForSystemLibraryAtStartUp_property.setProp (newValue)
    }
  }

  //····················································································································

  var checkForSystemLibraryAtStartUp_property_selection : EBSelection <Bool> {
    return self.checkForSystemLibraryAtStartUp_property.prop
  }

  //····················································································································
  //   Atomic property: systemLibraryCheckTimeInterval
  //····················································································································

  var systemLibraryCheckTimeInterval_property = EBStoredProperty_Int (0, prefKey: Preferences_systemLibraryCheckTimeInterval)

  //····················································································································

  var systemLibraryCheckTimeInterval : Int {
    get {
      return self.systemLibraryCheckTimeInterval_property.propval
    }
    set {
      self.systemLibraryCheckTimeInterval_property.setProp (newValue)
    }
  }

  //····················································································································

  var systemLibraryCheckTimeInterval_property_selection : EBSelection <Int> {
    return self.systemLibraryCheckTimeInterval_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewHorizontalFlip
  //····················································································································

  var mergerModelViewHorizontalFlip_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewHorizontalFlip)

  //····················································································································

  var mergerModelViewHorizontalFlip : Bool {
    get {
      return self.mergerModelViewHorizontalFlip_property.propval
    }
    set {
      self.mergerModelViewHorizontalFlip_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewHorizontalFlip_property_selection : EBSelection <Bool> {
    return self.mergerModelViewHorizontalFlip_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewVerticalFlip
  //····················································································································

  var mergerModelViewVerticalFlip_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewVerticalFlip)

  //····················································································································

  var mergerModelViewVerticalFlip : Bool {
    get {
      return self.mergerModelViewVerticalFlip_property.propval
    }
    set {
      self.mergerModelViewVerticalFlip_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewVerticalFlip_property_selection : EBSelection <Bool> {
    return self.mergerModelViewVerticalFlip_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayHoles
  //····················································································································

  var mergerModelViewDisplayHoles_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerModelViewDisplayHoles)

  //····················································································································

  var mergerModelViewDisplayHoles : Bool {
    get {
      return self.mergerModelViewDisplayHoles_property.propval
    }
    set {
      self.mergerModelViewDisplayHoles_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayHoles_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayHoles_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayVias
  //····················································································································

  var mergerModelViewDisplayVias_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerModelViewDisplayVias)

  //····················································································································

  var mergerModelViewDisplayVias : Bool {
    get {
      return self.mergerModelViewDisplayVias_property.propval
    }
    set {
      self.mergerModelViewDisplayVias_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayVias_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayVias_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontPads
  //····················································································································

  var mergerModelViewDisplayFrontPads_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerModelViewDisplayFrontPads)

  //····················································································································

  var mergerModelViewDisplayFrontPads : Bool {
    get {
      return self.mergerModelViewDisplayFrontPads_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontPads_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayFrontPads_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayFrontPads_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayInternalBoardsLimits
  //····················································································································

  var mergerModelViewDisplayInternalBoardsLimits_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerModelViewDisplayInternalBoardsLimits)

  //····················································································································

  var mergerModelViewDisplayInternalBoardsLimits : Bool {
    get {
      return self.mergerModelViewDisplayInternalBoardsLimits_property.propval
    }
    set {
      self.mergerModelViewDisplayInternalBoardsLimits_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayInternalBoardsLimits_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayInternalBoardsLimits_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBoardLimits
  //····················································································································

  var mergerModelViewDisplayBoardLimits_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerModelViewDisplayBoardLimits)

  //····················································································································

  var mergerModelViewDisplayBoardLimits : Bool {
    get {
      return self.mergerModelViewDisplayBoardLimits_property.propval
    }
    set {
      self.mergerModelViewDisplayBoardLimits_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayBoardLimits_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayBoardLimits_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontComponentNames
  //····················································································································

  var mergerModelViewDisplayFrontComponentNames_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayFrontComponentNames)

  //····················································································································

  var mergerModelViewDisplayFrontComponentNames : Bool {
    get {
      return self.mergerModelViewDisplayFrontComponentNames_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontComponentNames_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayFrontComponentNames_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayFrontComponentNames_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontComponentValues
  //····················································································································

  var mergerModelViewDisplayFrontComponentValues_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayFrontComponentValues)

  //····················································································································

  var mergerModelViewDisplayFrontComponentValues : Bool {
    get {
      return self.mergerModelViewDisplayFrontComponentValues_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontComponentValues_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayFrontComponentValues_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayFrontComponentValues_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontPackages
  //····················································································································

  var mergerModelViewDisplayFrontPackages_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayFrontPackages)

  //····················································································································

  var mergerModelViewDisplayFrontPackages : Bool {
    get {
      return self.mergerModelViewDisplayFrontPackages_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontPackages_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayFrontPackages_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayFrontPackages_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontLegendTexts
  //····················································································································

  var mergerModelViewDisplayFrontLegendTexts_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayFrontLegendTexts)

  //····················································································································

  var mergerModelViewDisplayFrontLegendTexts : Bool {
    get {
      return self.mergerModelViewDisplayFrontLegendTexts_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontLegendTexts_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayFrontLegendTexts_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayFrontLegendTexts_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontTracks
  //····················································································································

  var mergerModelViewDisplayFrontTracks_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayFrontTracks)

  //····················································································································

  var mergerModelViewDisplayFrontTracks : Bool {
    get {
      return self.mergerModelViewDisplayFrontTracks_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontTracks_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayFrontTracks_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayFrontTracks_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontLayoutTexts
  //····················································································································

  var mergerModelViewDisplayFrontLayoutTexts_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayFrontLayoutTexts)

  //····················································································································

  var mergerModelViewDisplayFrontLayoutTexts : Bool {
    get {
      return self.mergerModelViewDisplayFrontLayoutTexts_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontLayoutTexts_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayFrontLayoutTexts_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayFrontLayoutTexts_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackPads
  //····················································································································

  var mergerModelViewDisplayBackPads_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerModelViewDisplayBackPads)

  //····················································································································

  var mergerModelViewDisplayBackPads : Bool {
    get {
      return self.mergerModelViewDisplayBackPads_property.propval
    }
    set {
      self.mergerModelViewDisplayBackPads_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayBackPads_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayBackPads_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackComponentNames
  //····················································································································

  var mergerModelViewDisplayBackComponentNames_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayBackComponentNames)

  //····················································································································

  var mergerModelViewDisplayBackComponentNames : Bool {
    get {
      return self.mergerModelViewDisplayBackComponentNames_property.propval
    }
    set {
      self.mergerModelViewDisplayBackComponentNames_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayBackComponentNames_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayBackComponentNames_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackComponentValues
  //····················································································································

  var mergerModelViewDisplayBackComponentValues_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayBackComponentValues)

  //····················································································································

  var mergerModelViewDisplayBackComponentValues : Bool {
    get {
      return self.mergerModelViewDisplayBackComponentValues_property.propval
    }
    set {
      self.mergerModelViewDisplayBackComponentValues_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayBackComponentValues_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayBackComponentValues_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackLegendTexts
  //····················································································································

  var mergerModelViewDisplayBackLegendTexts_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayBackLegendTexts)

  //····················································································································

  var mergerModelViewDisplayBackLegendTexts : Bool {
    get {
      return self.mergerModelViewDisplayBackLegendTexts_property.propval
    }
    set {
      self.mergerModelViewDisplayBackLegendTexts_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayBackLegendTexts_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayBackLegendTexts_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackPackages
  //····················································································································

  var mergerModelViewDisplayBackPackages_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayBackPackages)

  //····················································································································

  var mergerModelViewDisplayBackPackages : Bool {
    get {
      return self.mergerModelViewDisplayBackPackages_property.propval
    }
    set {
      self.mergerModelViewDisplayBackPackages_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayBackPackages_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayBackPackages_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackTracks
  //····················································································································

  var mergerModelViewDisplayBackTracks_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayBackTracks)

  //····················································································································

  var mergerModelViewDisplayBackTracks : Bool {
    get {
      return self.mergerModelViewDisplayBackTracks_property.propval
    }
    set {
      self.mergerModelViewDisplayBackTracks_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayBackTracks_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayBackTracks_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackLayoutTexts
  //····················································································································

  var mergerModelViewDisplayBackLayoutTexts_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayBackLayoutTexts)

  //····················································································································

  var mergerModelViewDisplayBackLayoutTexts : Bool {
    get {
      return self.mergerModelViewDisplayBackLayoutTexts_property.propval
    }
    set {
      self.mergerModelViewDisplayBackLayoutTexts_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayBackLayoutTexts_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayBackLayoutTexts_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontLegendLines
  //····················································································································

  var mergerModelViewDisplayFrontLegendLines_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerModelViewDisplayFrontLegendLines)

  //····················································································································

  var mergerModelViewDisplayFrontLegendLines : Bool {
    get {
      return self.mergerModelViewDisplayFrontLegendLines_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontLegendLines_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayFrontLegendLines_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayFrontLegendLines_property.prop
  }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackLegendLines
  //····················································································································

  var mergerModelViewDisplayBackLegendLines_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerModelViewDisplayBackLegendLines)

  //····················································································································

  var mergerModelViewDisplayBackLegendLines : Bool {
    get {
      return self.mergerModelViewDisplayBackLegendLines_property.propval
    }
    set {
      self.mergerModelViewDisplayBackLegendLines_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerModelViewDisplayBackLegendLines_property_selection : EBSelection <Bool> {
    return self.mergerModelViewDisplayBackLegendLines_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewHorizontalFlip
  //····················································································································

  var mergerBoardViewHorizontalFlip_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewHorizontalFlip)

  //····················································································································

  var mergerBoardViewHorizontalFlip : Bool {
    get {
      return self.mergerBoardViewHorizontalFlip_property.propval
    }
    set {
      self.mergerBoardViewHorizontalFlip_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewHorizontalFlip_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewHorizontalFlip_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewVerticalFlip
  //····················································································································

  var mergerBoardViewVerticalFlip_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewVerticalFlip)

  //····················································································································

  var mergerBoardViewVerticalFlip : Bool {
    get {
      return self.mergerBoardViewVerticalFlip_property.propval
    }
    set {
      self.mergerBoardViewVerticalFlip_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewVerticalFlip_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewVerticalFlip_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayHoles
  //····················································································································

  var mergerBoardViewDisplayHoles_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerBoardViewDisplayHoles)

  //····················································································································

  var mergerBoardViewDisplayHoles : Bool {
    get {
      return self.mergerBoardViewDisplayHoles_property.propval
    }
    set {
      self.mergerBoardViewDisplayHoles_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayHoles_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayHoles_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayVias
  //····················································································································

  var mergerBoardViewDisplayVias_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerBoardViewDisplayVias)

  //····················································································································

  var mergerBoardViewDisplayVias : Bool {
    get {
      return self.mergerBoardViewDisplayVias_property.propval
    }
    set {
      self.mergerBoardViewDisplayVias_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayVias_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayVias_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontPads
  //····················································································································

  var mergerBoardViewDisplayFrontPads_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerBoardViewDisplayFrontPads)

  //····················································································································

  var mergerBoardViewDisplayFrontPads : Bool {
    get {
      return self.mergerBoardViewDisplayFrontPads_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontPads_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayFrontPads_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayFrontPads_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayInternalBoardsLimits
  //····················································································································

  var mergerBoardViewDisplayInternalBoardsLimits_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerBoardViewDisplayInternalBoardsLimits)

  //····················································································································

  var mergerBoardViewDisplayInternalBoardsLimits : Bool {
    get {
      return self.mergerBoardViewDisplayInternalBoardsLimits_property.propval
    }
    set {
      self.mergerBoardViewDisplayInternalBoardsLimits_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayInternalBoardsLimits_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayInternalBoardsLimits_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBoardLimits
  //····················································································································

  var mergerBoardViewDisplayBoardLimits_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerBoardViewDisplayBoardLimits)

  //····················································································································

  var mergerBoardViewDisplayBoardLimits : Bool {
    get {
      return self.mergerBoardViewDisplayBoardLimits_property.propval
    }
    set {
      self.mergerBoardViewDisplayBoardLimits_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayBoardLimits_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayBoardLimits_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontComponentNames
  //····················································································································

  var mergerBoardViewDisplayFrontComponentNames_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayFrontComponentNames)

  //····················································································································

  var mergerBoardViewDisplayFrontComponentNames : Bool {
    get {
      return self.mergerBoardViewDisplayFrontComponentNames_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontComponentNames_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayFrontComponentNames_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayFrontComponentNames_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontComponentValues
  //····················································································································

  var mergerBoardViewDisplayFrontComponentValues_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayFrontComponentValues)

  //····················································································································

  var mergerBoardViewDisplayFrontComponentValues : Bool {
    get {
      return self.mergerBoardViewDisplayFrontComponentValues_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontComponentValues_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayFrontComponentValues_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayFrontComponentValues_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontPackages
  //····················································································································

  var mergerBoardViewDisplayFrontPackages_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayFrontPackages)

  //····················································································································

  var mergerBoardViewDisplayFrontPackages : Bool {
    get {
      return self.mergerBoardViewDisplayFrontPackages_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontPackages_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayFrontPackages_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayFrontPackages_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontLegendTexts
  //····················································································································

  var mergerBoardViewDisplayFrontLegendTexts_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayFrontLegendTexts)

  //····················································································································

  var mergerBoardViewDisplayFrontLegendTexts : Bool {
    get {
      return self.mergerBoardViewDisplayFrontLegendTexts_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontLegendTexts_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayFrontLegendTexts_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayFrontLegendTexts_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontTracks
  //····················································································································

  var mergerBoardViewDisplayFrontTracks_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayFrontTracks)

  //····················································································································

  var mergerBoardViewDisplayFrontTracks : Bool {
    get {
      return self.mergerBoardViewDisplayFrontTracks_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontTracks_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayFrontTracks_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayFrontTracks_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontLayoutTexts
  //····················································································································

  var mergerBoardViewDisplayFrontLayoutTexts_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayFrontLayoutTexts)

  //····················································································································

  var mergerBoardViewDisplayFrontLayoutTexts : Bool {
    get {
      return self.mergerBoardViewDisplayFrontLayoutTexts_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontLayoutTexts_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayFrontLayoutTexts_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayFrontLayoutTexts_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackPads
  //····················································································································

  var mergerBoardViewDisplayBackPads_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerBoardViewDisplayBackPads)

  //····················································································································

  var mergerBoardViewDisplayBackPads : Bool {
    get {
      return self.mergerBoardViewDisplayBackPads_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackPads_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayBackPads_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayBackPads_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackComponentNames
  //····················································································································

  var mergerBoardViewDisplayBackComponentNames_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayBackComponentNames)

  //····················································································································

  var mergerBoardViewDisplayBackComponentNames : Bool {
    get {
      return self.mergerBoardViewDisplayBackComponentNames_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackComponentNames_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayBackComponentNames_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayBackComponentNames_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackComponentValues
  //····················································································································

  var mergerBoardViewDisplayBackComponentValues_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayBackComponentValues)

  //····················································································································

  var mergerBoardViewDisplayBackComponentValues : Bool {
    get {
      return self.mergerBoardViewDisplayBackComponentValues_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackComponentValues_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayBackComponentValues_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayBackComponentValues_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackLegendTexts
  //····················································································································

  var mergerBoardViewDisplayBackLegendTexts_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayBackLegendTexts)

  //····················································································································

  var mergerBoardViewDisplayBackLegendTexts : Bool {
    get {
      return self.mergerBoardViewDisplayBackLegendTexts_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackLegendTexts_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayBackLegendTexts_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayBackLegendTexts_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackPackages
  //····················································································································

  var mergerBoardViewDisplayBackPackages_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayBackPackages)

  //····················································································································

  var mergerBoardViewDisplayBackPackages : Bool {
    get {
      return self.mergerBoardViewDisplayBackPackages_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackPackages_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayBackPackages_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayBackPackages_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackTracks
  //····················································································································

  var mergerBoardViewDisplayBackTracks_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayBackTracks)

  //····················································································································

  var mergerBoardViewDisplayBackTracks : Bool {
    get {
      return self.mergerBoardViewDisplayBackTracks_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackTracks_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayBackTracks_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayBackTracks_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackLayoutTexts
  //····················································································································

  var mergerBoardViewDisplayBackLayoutTexts_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayBackLayoutTexts)

  //····················································································································

  var mergerBoardViewDisplayBackLayoutTexts : Bool {
    get {
      return self.mergerBoardViewDisplayBackLayoutTexts_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackLayoutTexts_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayBackLayoutTexts_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayBackLayoutTexts_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontLegendLines
  //····················································································································

  var mergerBoardViewDisplayFrontLegendLines_property = EBStoredProperty_Bool (false, prefKey: Preferences_mergerBoardViewDisplayFrontLegendLines)

  //····················································································································

  var mergerBoardViewDisplayFrontLegendLines : Bool {
    get {
      return self.mergerBoardViewDisplayFrontLegendLines_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontLegendLines_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayFrontLegendLines_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayFrontLegendLines_property.prop
  }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackLegendLines
  //····················································································································

  var mergerBoardViewDisplayBackLegendLines_property = EBStoredProperty_Bool (true, prefKey: Preferences_mergerBoardViewDisplayBackLegendLines)

  //····················································································································

  var mergerBoardViewDisplayBackLegendLines : Bool {
    get {
      return self.mergerBoardViewDisplayBackLegendLines_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackLegendLines_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerBoardViewDisplayBackLegendLines_property_selection : EBSelection <Bool> {
    return self.mergerBoardViewDisplayBackLegendLines_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorHoles
  //····················································································································

  var mergerColorHoles_property = EBStoredProperty_NSColor (NSColor.white, prefKey: Preferences_mergerColorHoles)

  //····················································································································

  var mergerColorHoles : NSColor {
    get {
      return self.mergerColorHoles_property.propval
    }
    set {
      self.mergerColorHoles_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorHoles_property_selection : EBSelection <NSColor> {
    return self.mergerColorHoles_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorVias
  //····················································································································

  var mergerColorVias_property = EBStoredProperty_NSColor (NSColor.red, prefKey: Preferences_mergerColorVias)

  //····················································································································

  var mergerColorVias : NSColor {
    get {
      return self.mergerColorVias_property.propval
    }
    set {
      self.mergerColorVias_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorVias_property_selection : EBSelection <NSColor> {
    return self.mergerColorVias_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorFrontPads
  //····················································································································

  var mergerColorFrontPads_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_mergerColorFrontPads)

  //····················································································································

  var mergerColorFrontPads : NSColor {
    get {
      return self.mergerColorFrontPads_property.propval
    }
    set {
      self.mergerColorFrontPads_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorFrontPads_property_selection : EBSelection <NSColor> {
    return self.mergerColorFrontPads_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorBoardLimits
  //····················································································································

  var mergerColorBoardLimits_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_mergerColorBoardLimits)

  //····················································································································

  var mergerColorBoardLimits : NSColor {
    get {
      return self.mergerColorBoardLimits_property.propval
    }
    set {
      self.mergerColorBoardLimits_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorBoardLimits_property_selection : EBSelection <NSColor> {
    return self.mergerColorBoardLimits_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorInternalBoardsLimits
  //····················································································································

  var mergerColorInternalBoardsLimits_property = EBStoredProperty_NSColor (NSColor.yellow, prefKey: Preferences_mergerColorInternalBoardsLimits)

  //····················································································································

  var mergerColorInternalBoardsLimits : NSColor {
    get {
      return self.mergerColorInternalBoardsLimits_property.propval
    }
    set {
      self.mergerColorInternalBoardsLimits_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorInternalBoardsLimits_property_selection : EBSelection <NSColor> {
    return self.mergerColorInternalBoardsLimits_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorFrontComponentNames
  //····················································································································

  var mergerColorFrontComponentNames_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_mergerColorFrontComponentNames)

  //····················································································································

  var mergerColorFrontComponentNames : NSColor {
    get {
      return self.mergerColorFrontComponentNames_property.propval
    }
    set {
      self.mergerColorFrontComponentNames_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorFrontComponentNames_property_selection : EBSelection <NSColor> {
    return self.mergerColorFrontComponentNames_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorFrontComponentValues
  //····················································································································

  var mergerColorFrontComponentValues_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_mergerColorFrontComponentValues)

  //····················································································································

  var mergerColorFrontComponentValues : NSColor {
    get {
      return self.mergerColorFrontComponentValues_property.propval
    }
    set {
      self.mergerColorFrontComponentValues_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorFrontComponentValues_property_selection : EBSelection <NSColor> {
    return self.mergerColorFrontComponentValues_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorFrontPackages
  //····················································································································

  var mergerColorFrontPackages_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_mergerColorFrontPackages)

  //····················································································································

  var mergerColorFrontPackages : NSColor {
    get {
      return self.mergerColorFrontPackages_property.propval
    }
    set {
      self.mergerColorFrontPackages_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorFrontPackages_property_selection : EBSelection <NSColor> {
    return self.mergerColorFrontPackages_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorFrontLegendTexts
  //····················································································································

  var mergerColorFrontLegendTexts_property = EBStoredProperty_NSColor (NSColor.brown, prefKey: Preferences_mergerColorFrontLegendTexts)

  //····················································································································

  var mergerColorFrontLegendTexts : NSColor {
    get {
      return self.mergerColorFrontLegendTexts_property.propval
    }
    set {
      self.mergerColorFrontLegendTexts_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorFrontLegendTexts_property_selection : EBSelection <NSColor> {
    return self.mergerColorFrontLegendTexts_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorFrontTracks
  //····················································································································

  var mergerColorFrontTracks_property = EBStoredProperty_NSColor (NSColor.blue, prefKey: Preferences_mergerColorFrontTracks)

  //····················································································································

  var mergerColorFrontTracks : NSColor {
    get {
      return self.mergerColorFrontTracks_property.propval
    }
    set {
      self.mergerColorFrontTracks_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorFrontTracks_property_selection : EBSelection <NSColor> {
    return self.mergerColorFrontTracks_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorFrontLayoutTexts
  //····················································································································

  var mergerColorFrontLayoutTexts_property = EBStoredProperty_NSColor (NSColor.blue, prefKey: Preferences_mergerColorFrontLayoutTexts)

  //····················································································································

  var mergerColorFrontLayoutTexts : NSColor {
    get {
      return self.mergerColorFrontLayoutTexts_property.propval
    }
    set {
      self.mergerColorFrontLayoutTexts_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorFrontLayoutTexts_property_selection : EBSelection <NSColor> {
    return self.mergerColorFrontLayoutTexts_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorBackPads
  //····················································································································

  var mergerColorBackPads_property = EBStoredProperty_NSColor (NSColor.orange, prefKey: Preferences_mergerColorBackPads)

  //····················································································································

  var mergerColorBackPads : NSColor {
    get {
      return self.mergerColorBackPads_property.propval
    }
    set {
      self.mergerColorBackPads_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorBackPads_property_selection : EBSelection <NSColor> {
    return self.mergerColorBackPads_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorBackComponentNames
  //····················································································································

  var mergerColorBackComponentNames_property = EBStoredProperty_NSColor (NSColor.gray, prefKey: Preferences_mergerColorBackComponentNames)

  //····················································································································

  var mergerColorBackComponentNames : NSColor {
    get {
      return self.mergerColorBackComponentNames_property.propval
    }
    set {
      self.mergerColorBackComponentNames_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorBackComponentNames_property_selection : EBSelection <NSColor> {
    return self.mergerColorBackComponentNames_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorBackComponentValues
  //····················································································································

  var mergerColorBackComponentValues_property = EBStoredProperty_NSColor (NSColor.gray, prefKey: Preferences_mergerColorBackComponentValues)

  //····················································································································

  var mergerColorBackComponentValues : NSColor {
    get {
      return self.mergerColorBackComponentValues_property.propval
    }
    set {
      self.mergerColorBackComponentValues_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorBackComponentValues_property_selection : EBSelection <NSColor> {
    return self.mergerColorBackComponentValues_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorBackLegendTexts
  //····················································································································

  var mergerColorBackLegendTexts_property = EBStoredProperty_NSColor (NSColor.gray, prefKey: Preferences_mergerColorBackLegendTexts)

  //····················································································································

  var mergerColorBackLegendTexts : NSColor {
    get {
      return self.mergerColorBackLegendTexts_property.propval
    }
    set {
      self.mergerColorBackLegendTexts_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorBackLegendTexts_property_selection : EBSelection <NSColor> {
    return self.mergerColorBackLegendTexts_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorBackPackages
  //····················································································································

  var mergerColorBackPackages_property = EBStoredProperty_NSColor (NSColor.gray, prefKey: Preferences_mergerColorBackPackages)

  //····················································································································

  var mergerColorBackPackages : NSColor {
    get {
      return self.mergerColorBackPackages_property.propval
    }
    set {
      self.mergerColorBackPackages_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorBackPackages_property_selection : EBSelection <NSColor> {
    return self.mergerColorBackPackages_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorBackTracks
  //····················································································································

  var mergerColorBackTracks_property = EBStoredProperty_NSColor (NSColor.green, prefKey: Preferences_mergerColorBackTracks)

  //····················································································································

  var mergerColorBackTracks : NSColor {
    get {
      return self.mergerColorBackTracks_property.propval
    }
    set {
      self.mergerColorBackTracks_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorBackTracks_property_selection : EBSelection <NSColor> {
    return self.mergerColorBackTracks_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorBackLayoutTexts
  //····················································································································

  var mergerColorBackLayoutTexts_property = EBStoredProperty_NSColor (NSColor.green, prefKey: Preferences_mergerColorBackLayoutTexts)

  //····················································································································

  var mergerColorBackLayoutTexts : NSColor {
    get {
      return self.mergerColorBackLayoutTexts_property.propval
    }
    set {
      self.mergerColorBackLayoutTexts_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorBackLayoutTexts_property_selection : EBSelection <NSColor> {
    return self.mergerColorBackLayoutTexts_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorFrontLegendLines
  //····················································································································

  var mergerColorFrontLegendLines_property = EBStoredProperty_NSColor (NSColor.gray, prefKey: Preferences_mergerColorFrontLegendLines)

  //····················································································································

  var mergerColorFrontLegendLines : NSColor {
    get {
      return self.mergerColorFrontLegendLines_property.propval
    }
    set {
      self.mergerColorFrontLegendLines_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorFrontLegendLines_property_selection : EBSelection <NSColor> {
    return self.mergerColorFrontLegendLines_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorBackLegendLines
  //····················································································································

  var mergerColorBackLegendLines_property = EBStoredProperty_NSColor (NSColor.green, prefKey: Preferences_mergerColorBackLegendLines)

  //····················································································································

  var mergerColorBackLegendLines : NSColor {
    get {
      return self.mergerColorBackLegendLines_property.propval
    }
    set {
      self.mergerColorBackLegendLines_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorBackLegendLines_property_selection : EBSelection <NSColor> {
    return self.mergerColorBackLegendLines_property.prop
  }

  //····················································································································
  //   Atomic property: mergerColorBackground
  //····················································································································

  var mergerColorBackground_property = EBStoredProperty_NSColor (NSColor.lightGray, prefKey: Preferences_mergerColorBackground)

  //····················································································································

  var mergerColorBackground : NSColor {
    get {
      return self.mergerColorBackground_property.propval
    }
    set {
      self.mergerColorBackground_property.setProp (newValue)
    }
  }

  //····················································································································

  var mergerColorBackground_property_selection : EBSelection <NSColor> {
    return self.mergerColorBackground_property.prop
  }

  //····················································································································
  //   Atomic property: errorMessageColor
  //····················································································································

  var errorMessageColor_property = EBStoredProperty_NSColor (NSColor.red, prefKey: Preferences_errorMessageColor)

  //····················································································································

  var errorMessageColor : NSColor {
    get {
      return self.errorMessageColor_property.propval
    }
    set {
      self.errorMessageColor_property.setProp (newValue)
    }
  }

  //····················································································································

  var errorMessageColor_property_selection : EBSelection <NSColor> {
    return self.errorMessageColor_property.prop
  }

  //····················································································································
  //   Atomic property: hiliteWidthMultipliedByTen
  //····················································································································

  var hiliteWidthMultipliedByTen_property = EBStoredProperty_Int (15, prefKey: Preferences_hiliteWidthMultipliedByTen)

  //····················································································································

  var hiliteWidthMultipliedByTen : Int {
    get {
      return self.hiliteWidthMultipliedByTen_property.propval
    }
    set {
      self.hiliteWidthMultipliedByTen_property.setProp (newValue)
    }
  }

  //····················································································································

  var hiliteWidthMultipliedByTen_property_selection : EBSelection <Int> {
    return self.hiliteWidthMultipliedByTen_property.prop
  }

  //····················································································································
  //   Atomic property: usesUserLibrary
  //····················································································································

  var usesUserLibrary_property = EBStoredProperty_Bool (true, prefKey: Preferences_usesUserLibrary)

  //····················································································································

  var usesUserLibrary : Bool {
    get {
      return self.usesUserLibrary_property.propval
    }
    set {
      self.usesUserLibrary_property.setProp (newValue)
    }
  }

  //····················································································································

  var usesUserLibrary_property_selection : EBSelection <Bool> {
    return self.usesUserLibrary_property.prop
  }

  //····················································································································
  //   To many property: additionnalLibraryArray
  //····················································································································

  var additionnalLibraryArray_property = StoredArrayOf_CanariLibraryEntry (prefKey: Preferences_additionnalLibraryArray)

  //····················································································································

  var additionnalLibraryArray_property_selection : EBSelection < [CanariLibraryEntry] > {
      return self.additionnalLibraryArray_property.prop
  }

  //····················································································································
  //   Atomic property: pinNameFont
  //····················································································································

  var pinNameFont_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNameFont)

  //····················································································································

  var pinNameFont : NSFont {
    get {
      return self.pinNameFont_property.propval
    }
    set {
      self.pinNameFont_property.setProp (newValue)
    }
  }

  //····················································································································

  var pinNameFont_property_selection : EBSelection <NSFont> {
    return self.pinNameFont_property.prop
  }

  //····················································································································
  //   Atomic property: displayPackageTopSidePads
  //····················································································································

  var displayPackageTopSidePads_property = EBStoredProperty_Bool (true, prefKey: Preferences_displayPackageTopSidePads)

  //····················································································································

  var displayPackageTopSidePads : Bool {
    get {
      return self.displayPackageTopSidePads_property.propval
    }
    set {
      self.displayPackageTopSidePads_property.setProp (newValue)
    }
  }

  //····················································································································

  var displayPackageTopSidePads_property_selection : EBSelection <Bool> {
    return self.displayPackageTopSidePads_property.prop
  }

  //····················································································································
  //   Atomic property: sampleString
  //····················································································································

  var sampleString_property = EBStoredProperty_String ("The quick brown fox jumps over the lazy dog", prefKey: Preferences_sampleString)

  //····················································································································

  var sampleString : String {
    get {
      return self.sampleString_property.propval
    }
    set {
      self.sampleString_property.setProp (newValue)
    }
  }

  //····················································································································

  var sampleString_property_selection : EBSelection <String> {
    return self.sampleString_property.prop
  }

  //····················································································································
  //   Atomic property: sampleStringSize
  //····················································································································

  var sampleStringSize_property = EBStoredProperty_Double (24, prefKey: Preferences_sampleStringSize)

  //····················································································································

  var sampleStringSize : Double {
    get {
      return self.sampleStringSize_property.propval
    }
    set {
      self.sampleStringSize_property.setProp (newValue)
    }
  }

  //····················································································································

  var sampleStringSize_property_selection : EBSelection <Double> {
    return self.sampleStringSize_property.prop
  }

  //····················································································································
  //   Atomic property: mLastSystemLibraryCheckTime
  //····················································································································

  var mLastSystemLibraryCheckTime_property = EBStoredProperty_Date (Date (), prefKey: Preferences_mLastSystemLibraryCheckTime)

  //····················································································································

  var mLastSystemLibraryCheckTime : Date {
    get {
      return self.mLastSystemLibraryCheckTime_property.propval
    }
    set {
      self.mLastSystemLibraryCheckTime_property.setProp (newValue)
    }
  }

  //····················································································································

  var mLastSystemLibraryCheckTime_property_selection : EBSelection <Date> {
    return self.mLastSystemLibraryCheckTime_property.prop
  }

  //····················································································································
  //   Array controller: additionnalLibraryArrayController
  //····················································································································

  var additionnalLibraryArrayController = ArrayController_Preferences_additionnalLibraryArrayController ()

  //····················································································································
  //   Transient property: mValueRevealInFinder_packages
  //····················································································································

  var mValueRevealInFinder_packages_property = EBTransientProperty_CanariMenuItemListClass ()

  //····················································································································

  var mValueRevealInFinder_packages_property_selection : EBSelection <CanariMenuItemListClass> {
    return self.mValueRevealInFinder_packages_property.prop
  }

  //····················································································································

  var mValueRevealInFinder_packages : CanariMenuItemListClass? {
    switch self.mValueRevealInFinder_packages_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mValueRevealInFinder_devices
  //····················································································································

  var mValueRevealInFinder_devices_property = EBTransientProperty_CanariMenuItemListClass ()

  //····················································································································

  var mValueRevealInFinder_devices_property_selection : EBSelection <CanariMenuItemListClass> {
    return self.mValueRevealInFinder_devices_property.prop
  }

  //····················································································································

  var mValueRevealInFinder_devices : CanariMenuItemListClass? {
    switch self.mValueRevealInFinder_devices_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mValueRevealInFinder_fonts
  //····················································································································

  var mValueRevealInFinder_fonts_property = EBTransientProperty_CanariMenuItemListClass ()

  //····················································································································

  var mValueRevealInFinder_fonts_property_selection : EBSelection <CanariMenuItemListClass> {
    return self.mValueRevealInFinder_fonts_property.prop
  }

  //····················································································································

  var mValueRevealInFinder_fonts : CanariMenuItemListClass? {
    switch self.mValueRevealInFinder_fonts_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mValueRevealInFinder_artworks
  //····················································································································

  var mValueRevealInFinder_artworks_property = EBTransientProperty_CanariMenuItemListClass ()

  //····················································································································

  var mValueRevealInFinder_artworks_property_selection : EBSelection <CanariMenuItemListClass> {
    return self.mValueRevealInFinder_artworks_property.prop
  }

  //····················································································································

  var mValueRevealInFinder_artworks : CanariMenuItemListClass? {
    switch self.mValueRevealInFinder_artworks_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mValueRevealInFinder_symbols
  //····················································································································

  var mValueRevealInFinder_symbols_property = EBTransientProperty_CanariMenuItemListClass ()

  //····················································································································

  var mValueRevealInFinder_symbols_property_selection : EBSelection <CanariMenuItemListClass> {
    return self.mValueRevealInFinder_symbols_property.prop
  }

  //····················································································································

  var mValueRevealInFinder_symbols : CanariMenuItemListClass? {
    switch self.mValueRevealInFinder_symbols_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddLibraryEntryButton : EBButton? = nil
  @IBOutlet var mAdditionnalLibraryArrayTableView : EBTableView? = nil
  @IBOutlet var mBoardBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideLayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideLegendColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideRestrictRectangleColorWell : EBColorWell? = nil
  @IBOutlet var mBoardClearanceColorWell : EBColorWell? = nil
  @IBOutlet var mBoardDotColorGridColorWell : EBColorWell? = nil
  @IBOutlet var mBoardDrawErrorBackgroundCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardDrawWarningBackgroundCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardErrorBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBoardLimitsColorWell : EBColorWell? = nil
  @IBOutlet var mBoardLineColorGridColorWell : EBColorWell? = nil
  @IBOutlet var mBoardPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mBoardPadFontButton : EBFontButton? = nil
  @IBOutlet var mBoardPadNumberColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideLayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideLegendColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideRestrictRectangleColorWell : EBColorWell? = nil
  @IBOutlet var mBoardWarningBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBottomSidePadColorDorDeviveColorWell : EBColorWell? = nil
  @IBOutlet var mBottomSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mCancelButtonInLibraryUpdateWindow : EBButton? = nil
  @IBOutlet var mCheckForLibraryUpdatesButton : NSButton? = nil
  @IBOutlet var mCheckForSystemLibraryAtStartUpSwitch : EBSwitch? = nil
  @IBOutlet var mCheckLibraryAction : EBButton? = nil
  @IBOutlet var mCheckLibraryResultTextView : NSTextView? = nil
  @IBOutlet var mCheckingForLibraryUpdateProgressIndicator : EBProgressIndicator? = nil
  @IBOutlet var mCheckingForLibraryUpdateWindow : EBWindow? = nil
  @IBOutlet var mConnectionColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mCrossColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mDimensionFontButton : EBFontButton? = nil
  @IBOutlet var mDotColorGridForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mDotColorOfPackageGridColorWell : EBColorWell? = nil
  @IBOutlet var mEditionTransparencySlider : EBSlider? = nil
  @IBOutlet var mEditionTransparencyTextField : EBDoubleField? = nil
  @IBOutlet var mErrorMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var mFontCharacterSelectButton : CanariFontCharacterSelectButton? = nil
  @IBOutlet var mInformativeTextInLibraryUpdateWindow : EBTextField? = nil
  @IBOutlet var mLibraryRepositoryCommitButton : NSButton? = nil
  @IBOutlet var mLibraryRepositoryCurrentReleaseTextField : NSTextField? = nil
  @IBOutlet var mLibraryRepositoryLoadCurrentReleaseButton : NSButton? = nil
  @IBOutlet var mLibraryRepositoryLogTextView : NSTextView? = nil
  @IBOutlet var mLibraryRepositoryStatusButton : NSButton? = nil
  @IBOutlet var mLibraryRepositoryTextField : NSTextField? = nil
  @IBOutlet var mLibraryRevisionListScrollView : NSScrollView? = nil
  @IBOutlet var mLibraryRevisionListTableView : NSTableView? = nil
  @IBOutlet var mLibraryUpdateLogTextView : NSTextView? = nil
  @IBOutlet var mLibraryUpdateWindow : EBWindow? = nil
  @IBOutlet var mLibraryUploadWindow : EBWindow? = nil
  @IBOutlet var mLineColorGridForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mLineColorOfPackageGridColorWell : EBColorWell? = nil
  @IBOutlet var mLineColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mMenuRevealInFinder_artworks : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_devices : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_fonts : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_packages : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_symbols : CanariMenu? = nil
  @IBOutlet var mPackageBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mPackageColorColorWell : EBColorWell? = nil
  @IBOutlet var mPackageColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDimensionColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDrawingWidthMultipliedByTenForDevicePopupButton : EBPopUpButton? = nil
  @IBOutlet var mPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mPackageGuideColorWell : EBColorWell? = nil
  @IBOutlet var mPackageNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPadFontButton : EBFontButton? = nil
  @IBOutlet var mPadNumberColorColorWell : EBColorWell? = nil
  @IBOutlet var mPadNumberColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mPadNumberFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPadZoneColorColorWell : EBColorWell? = nil
  @IBOutlet var mPinNameColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mPinNameFontButton : EBFontButton? = nil
  @IBOutlet var mPinNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPinNameFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mPinNumberColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mPinNumberFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mPrefsWindow : EBWindow? = nil
  @IBOutlet var mProgressIndicatorInLibraryUpdateWindow : EBProgressIndicator? = nil
  @IBOutlet var mRemoveLibraryEntryButton : EBButton? = nil
  @IBOutlet var mRevealInFinderLibraryInUserApplicationSupportButton : EBButton? = nil
  @IBOutlet var mSULastCheckTimeTextField : NSTextField? = nil
  @IBOutlet var mSampleStringField : EBTextField? = nil
  @IBOutlet var mSampleStringSizeField : EBDoubleField? = nil
  @IBOutlet var mSelectionHiliteColorColorWell : EBColorWell? = nil
  @IBOutlet var mSetLibraryRepositoryButton : NSButton? = nil
  @IBOutlet var mSetUserAndPasswordButton : NSButton? = nil
  @IBOutlet var mShowGerberDrawingFlowCheckbox : EBSwitch? = nil
  @IBOutlet var mShowGerberDrawingIndexesCheckbox : EBSwitch? = nil
  @IBOutlet var mSuccessMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageBackgroundColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageGridDotColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageLineDotColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenForDevicePopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mTableViewInLibraryUpdateWindow : EBTableView? = nil
  @IBOutlet var mToolbar : CanariToolbar? = nil
  @IBOutlet var mTopSidePadColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mTopSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mUnplacedComponentsColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mUpDateButtonInLibraryUpdateWindow : EBButton? = nil
  @IBOutlet var mUpDateLibraryMenuItemInCanariMenu : EBMenuItem? = nil
  @IBOutlet var mUpdateSystemLibraryBox : NSBox? = nil
  @IBOutlet var mUseLibraryInUserApplicationSupportPathCheckBox : EBSwitch? = nil
  @IBOutlet var mUserAndPasswordTextField : NSTextField? = nil
  @IBOutlet var mWarningMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var nextSystemLibraryCheckDate : CanariDateObserverField? = nil
  @IBOutlet var selectionHilitePopupButton : EBPopUpButton? = nil
  @IBOutlet var systemLibraryCheckTimeIntervalPopupButton : EBPopUpButton? = nil
  @IBOutlet var systemLibraryCheckTimeIntervalTitleTextField : NSTextField? = nil

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  private var mController_nextSystemLibraryCheckDate_hidden : MultipleBindingController_hidden?
  private var mController_systemLibraryCheckTimeIntervalPopupButton_hidden : MultipleBindingController_hidden?
  private var mController_systemLibraryCheckTimeIntervalTitleTextField_hidden : MultipleBindingController_hidden?
  private var mController_mRemoveLibraryEntryButton_enabled : MultipleBindingController_enabled?

  //····················································································································
  //    Undo Manager
  //····················································································································

  private var mUndoManager = EBUndoManager ()

  //····················································································································

  var undoManager : EBUndoManager { return self.mUndoManager }
 
  //····················································································································
  // The preferences window should register this object as delegate (do it in Interface Builder)

  @objc func windowWillReturnUndoManager (_ window: NSWindow) -> UndoManager? {
    return self.undoManager
  }

  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    g_Preferences = self ;
  //--- Read from preferences
  //--- Atomic property: warningMessageColor
    self.warningMessageColor_property.undoManager = self.undoManager
  //--- Atomic property: successMessageColor
    self.successMessageColor_property.undoManager = self.undoManager
  //--- Atomic property: selectionHiliteColor
    self.selectionHiliteColor_property.undoManager = self.undoManager
  //--- Atomic property: symbolColor
    self.symbolColor_property.undoManager = self.undoManager
  //--- Atomic property: crossColorOfSymbolGrid
    self.crossColorOfSymbolGrid_property.undoManager = self.undoManager
  //--- Atomic property: lineColorOfSymbolGrid
    self.lineColorOfSymbolGrid_property.undoManager = self.undoManager
  //--- Atomic property: symbolBackgroundColor
    self.symbolBackgroundColor_property.undoManager = self.undoManager
  //--- Atomic property: symbolDrawingWidthMultipliedByTen
    self.symbolDrawingWidthMultipliedByTen_property.undoManager = self.undoManager
  //--- Atomic property: crossColorOfPackageGrid
    self.crossColorOfPackageGrid_property.undoManager = self.undoManager
  //--- Atomic property: lineColorOfPackageGrid
    self.lineColorOfPackageGrid_property.undoManager = self.undoManager
  //--- Atomic property: packageBackgroundColor
    self.packageBackgroundColor_property.undoManager = self.undoManager
  //--- Atomic property: packageColor
    self.packageColor_property.undoManager = self.undoManager
  //--- Atomic property: topSidePadColor
    self.topSidePadColor_property.undoManager = self.undoManager
  //--- Atomic property: bottomSidePadColor
    self.bottomSidePadColor_property.undoManager = self.undoManager
  //--- Atomic property: displayPackageBottomSidePads
    self.displayPackageBottomSidePads_property.undoManager = self.undoManager
  //--- Atomic property: padNumberColor
    self.padNumberColor_property.undoManager = self.undoManager
  //--- Atomic property: padNumberFont
    self.padNumberFont_property.undoManager = self.undoManager
  //--- Atomic property: showPadNumber
    self.showPadNumber_property.undoManager = self.undoManager
  //--- Atomic property: packageGuideColor
    self.packageGuideColor_property.undoManager = self.undoManager
  //--- Atomic property: packageDimensionColor
    self.packageDimensionColor_property.undoManager = self.undoManager
  //--- Atomic property: dimensionFont
    self.dimensionFont_property.undoManager = self.undoManager
  //--- Atomic property: padZoneColor
    self.padZoneColor_property.undoManager = self.undoManager
  //--- Atomic property: padZoneFont
    self.padZoneFont_property.undoManager = self.undoManager
  //--- Atomic property: packageDrawingWidthMultipliedByTen
    self.packageDrawingWidthMultipliedByTen_property.undoManager = self.undoManager
  //--- Atomic property: mSymbolAndPackageGridDotColorForDevice
    self.mSymbolAndPackageGridDotColorForDevice_property.undoManager = self.undoManager
  //--- Atomic property: mSymbolAndPackageGridLineColorForDevice
    self.mSymbolAndPackageGridLineColorForDevice_property.undoManager = self.undoManager
  //--- Atomic property: mSymbolAndPackageBackgroundColorForDevice
    self.mSymbolAndPackageBackgroundColorForDevice_property.undoManager = self.undoManager
  //--- Atomic property: mPackageColorForDevice
    self.mPackageColorForDevice_property.undoManager = self.undoManager
  //--- Atomic property: mTopSidePadColorForDevice
    self.mTopSidePadColorForDevice_property.undoManager = self.undoManager
  //--- Atomic property: mBottomSidePadColorForDevice
    self.mBottomSidePadColorForDevice_property.undoManager = self.undoManager
  //--- Atomic property: mPadNumberColorForDevice
    self.mPadNumberColorForDevice_property.undoManager = self.undoManager
  //--- Atomic property: mPackageNameFontForDevice
    self.mPackageNameFontForDevice_property.undoManager = self.undoManager
  //--- Atomic property: mPadNumberFontForDevice
    self.mPadNumberFontForDevice_property.undoManager = self.undoManager
  //--- Atomic property: mSymbolColorForDevice
    self.mSymbolColorForDevice_property.undoManager = self.undoManager
  //--- Atomic property: mSymbolNameFontForDevice
    self.mSymbolNameFontForDevice_property.undoManager = self.undoManager
  //--- Atomic property: mPinNameFontForDevice
    self.mPinNameFontForDevice_property.undoManager = self.undoManager
  //--- Atomic property: symbolDrawingWidthForDeviceMultipliedByTen
    self.symbolDrawingWidthForDeviceMultipliedByTen_property.undoManager = self.undoManager
  //--- Atomic property: packageDrawingWidthForDeviceMultipliedByTen
    self.packageDrawingWidthForDeviceMultipliedByTen_property.undoManager = self.undoManager
  //--- Atomic property: dotColorGridForSchematic
    self.dotColorGridForSchematic_property.undoManager = self.undoManager
  //--- Atomic property: lineColorGridForSchematic
    self.lineColorGridForSchematic_property.undoManager = self.undoManager
  //--- Atomic property: symbolColorForUnplacedComponentsForSchematic
    self.symbolColorForUnplacedComponentsForSchematic_property.undoManager = self.undoManager
  //--- Atomic property: symbolColorForSchematic
    self.symbolColorForSchematic_property.undoManager = self.undoManager
  //--- Atomic property: pinNameFontForSchematic
    self.pinNameFontForSchematic_property.undoManager = self.undoManager
  //--- Atomic property: pinNameColorForSchematic
    self.pinNameColorForSchematic_property.undoManager = self.undoManager
  //--- Atomic property: pinNumberFontForSchematic
    self.pinNumberFontForSchematic_property.undoManager = self.undoManager
  //--- Atomic property: pinNumberColorForSchematic
    self.pinNumberColorForSchematic_property.undoManager = self.undoManager
  //--- Atomic property: connectionColorForSchematic
    self.connectionColorForSchematic_property.undoManager = self.undoManager
  //--- Atomic property: symbolDrawingWidthMultipliedByTenForSchematic
    self.symbolDrawingWidthMultipliedByTenForSchematic_property.undoManager = self.undoManager
  //--- Atomic property: dotColorGridForBoard
    self.dotColorGridForBoard_property.undoManager = self.undoManager
  //--- Atomic property: lineColorGridForBoard
    self.lineColorGridForBoard_property.undoManager = self.undoManager
  //--- Atomic property: boardBackgroundColorForBoard
    self.boardBackgroundColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: errorBackgroundColorForBoard
    self.errorBackgroundColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: drawErrorBackgroundForBoard
    self.drawErrorBackgroundForBoard_property.undoManager = self.undoManager
  //--- Atomic property: warningBackgroundColorForBoard
    self.warningBackgroundColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: drawEWarningBackgroundForBoard
    self.drawEWarningBackgroundForBoard_property.undoManager = self.undoManager
  //--- Atomic property: boardLimitsColorForBoard
    self.boardLimitsColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: boardClearanceColorForBoard
    self.boardClearanceColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: topSideRestrictRectangleColorForBoard
    self.topSideRestrictRectangleColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: bottomSideRestrictRectangleColorForBoard
    self.bottomSideRestrictRectangleColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: topSideLegendColorForBoard
    self.topSideLegendColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: topSideLayoutColorForBoard
    self.topSideLayoutColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: bottomSideLayoutColorForBoard
    self.bottomSideLayoutColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: bottomSideLegendColorForBoard
    self.bottomSideLegendColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: topSidePadColorForBoard
    self.topSidePadColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: bottomSidePadColorForBoard
    self.bottomSidePadColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: padNumberFontForBoard
    self.padNumberFontForBoard_property.undoManager = self.undoManager
  //--- Atomic property: padNumberColorForBoard
    self.padNumberColorForBoard_property.undoManager = self.undoManager
  //--- Atomic property: packageDrawingWidthMultpliedByTenForBoard
    self.packageDrawingWidthMultpliedByTenForBoard_property.undoManager = self.undoManager
  //--- Atomic property: showGerberDrawingFlow
    self.showGerberDrawingFlow_property.undoManager = self.undoManager
  //--- Atomic property: showGerberDrawingIndexes
    self.showGerberDrawingIndexes_property.undoManager = self.undoManager
  //--- Atomic property: currentCharacterCodePoint
    self.currentCharacterCodePoint_property.undoManager = self.undoManager
    self.currentCharacterCodePoint_property.validationFunction = self.validate_currentCharacterCodePoint
  //--- Atomic property: fontEditionTransparency
    self.fontEditionTransparency_property.undoManager = self.undoManager
  //--- Atomic property: checkForSystemLibraryAtStartUp
    self.checkForSystemLibraryAtStartUp_property.undoManager = self.undoManager
  //--- Atomic property: systemLibraryCheckTimeInterval
    self.systemLibraryCheckTimeInterval_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewHorizontalFlip
    self.mergerModelViewHorizontalFlip_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewVerticalFlip
    self.mergerModelViewVerticalFlip_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayHoles
    self.mergerModelViewDisplayHoles_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayVias
    self.mergerModelViewDisplayVias_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayFrontPads
    self.mergerModelViewDisplayFrontPads_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayInternalBoardsLimits
    self.mergerModelViewDisplayInternalBoardsLimits_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayBoardLimits
    self.mergerModelViewDisplayBoardLimits_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayFrontComponentNames
    self.mergerModelViewDisplayFrontComponentNames_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayFrontComponentValues
    self.mergerModelViewDisplayFrontComponentValues_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayFrontPackages
    self.mergerModelViewDisplayFrontPackages_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayFrontLegendTexts
    self.mergerModelViewDisplayFrontLegendTexts_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayFrontTracks
    self.mergerModelViewDisplayFrontTracks_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayFrontLayoutTexts
    self.mergerModelViewDisplayFrontLayoutTexts_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayBackPads
    self.mergerModelViewDisplayBackPads_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayBackComponentNames
    self.mergerModelViewDisplayBackComponentNames_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayBackComponentValues
    self.mergerModelViewDisplayBackComponentValues_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayBackLegendTexts
    self.mergerModelViewDisplayBackLegendTexts_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayBackPackages
    self.mergerModelViewDisplayBackPackages_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayBackTracks
    self.mergerModelViewDisplayBackTracks_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayBackLayoutTexts
    self.mergerModelViewDisplayBackLayoutTexts_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayFrontLegendLines
    self.mergerModelViewDisplayFrontLegendLines_property.undoManager = self.undoManager
  //--- Atomic property: mergerModelViewDisplayBackLegendLines
    self.mergerModelViewDisplayBackLegendLines_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewHorizontalFlip
    self.mergerBoardViewHorizontalFlip_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewVerticalFlip
    self.mergerBoardViewVerticalFlip_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayHoles
    self.mergerBoardViewDisplayHoles_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayVias
    self.mergerBoardViewDisplayVias_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayFrontPads
    self.mergerBoardViewDisplayFrontPads_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayInternalBoardsLimits
    self.mergerBoardViewDisplayInternalBoardsLimits_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayBoardLimits
    self.mergerBoardViewDisplayBoardLimits_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayFrontComponentNames
    self.mergerBoardViewDisplayFrontComponentNames_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayFrontComponentValues
    self.mergerBoardViewDisplayFrontComponentValues_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayFrontPackages
    self.mergerBoardViewDisplayFrontPackages_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayFrontLegendTexts
    self.mergerBoardViewDisplayFrontLegendTexts_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayFrontTracks
    self.mergerBoardViewDisplayFrontTracks_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayFrontLayoutTexts
    self.mergerBoardViewDisplayFrontLayoutTexts_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayBackPads
    self.mergerBoardViewDisplayBackPads_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayBackComponentNames
    self.mergerBoardViewDisplayBackComponentNames_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayBackComponentValues
    self.mergerBoardViewDisplayBackComponentValues_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayBackLegendTexts
    self.mergerBoardViewDisplayBackLegendTexts_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayBackPackages
    self.mergerBoardViewDisplayBackPackages_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayBackTracks
    self.mergerBoardViewDisplayBackTracks_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayBackLayoutTexts
    self.mergerBoardViewDisplayBackLayoutTexts_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayFrontLegendLines
    self.mergerBoardViewDisplayFrontLegendLines_property.undoManager = self.undoManager
  //--- Atomic property: mergerBoardViewDisplayBackLegendLines
    self.mergerBoardViewDisplayBackLegendLines_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorHoles
    self.mergerColorHoles_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorVias
    self.mergerColorVias_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorFrontPads
    self.mergerColorFrontPads_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorBoardLimits
    self.mergerColorBoardLimits_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorInternalBoardsLimits
    self.mergerColorInternalBoardsLimits_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorFrontComponentNames
    self.mergerColorFrontComponentNames_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorFrontComponentValues
    self.mergerColorFrontComponentValues_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorFrontPackages
    self.mergerColorFrontPackages_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorFrontLegendTexts
    self.mergerColorFrontLegendTexts_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorFrontTracks
    self.mergerColorFrontTracks_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorFrontLayoutTexts
    self.mergerColorFrontLayoutTexts_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorBackPads
    self.mergerColorBackPads_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorBackComponentNames
    self.mergerColorBackComponentNames_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorBackComponentValues
    self.mergerColorBackComponentValues_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorBackLegendTexts
    self.mergerColorBackLegendTexts_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorBackPackages
    self.mergerColorBackPackages_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorBackTracks
    self.mergerColorBackTracks_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorBackLayoutTexts
    self.mergerColorBackLayoutTexts_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorFrontLegendLines
    self.mergerColorFrontLegendLines_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorBackLegendLines
    self.mergerColorBackLegendLines_property.undoManager = self.undoManager
  //--- Atomic property: mergerColorBackground
    self.mergerColorBackground_property.undoManager = self.undoManager
  //--- Atomic property: errorMessageColor
    self.errorMessageColor_property.undoManager = self.undoManager
  //--- Atomic property: hiliteWidthMultipliedByTen
    self.hiliteWidthMultipliedByTen_property.undoManager = self.undoManager
  //--- Atomic property: usesUserLibrary
    self.usesUserLibrary_property.undoManager = self.undoManager
  //--- To many property: additionnalLibraryArray (no option)
    self.additionnalLibraryArray_property.undoManager = self.undoManager
  //--- Atomic property: pinNameFont
    self.pinNameFont_property.undoManager = self.undoManager
  //--- Atomic property: displayPackageTopSidePads
    self.displayPackageTopSidePads_property.undoManager = self.undoManager
  //--- Atomic property: sampleString
    self.sampleString_property.undoManager = self.undoManager
  //--- Atomic property: sampleStringSize
    self.sampleStringSize_property.undoManager = self.undoManager
  //--- Atomic property: mLastSystemLibraryCheckTime
    self.mLastSystemLibraryCheckTime_property.undoManager = self.undoManager
  //--- Array controller property: additionnalLibraryArrayController
    self.additionnalLibraryArrayController.bind_model (self.additionnalLibraryArray_property)
  //--- Atomic property: mValueRevealInFinder_packages
    self.mValueRevealInFinder_packages_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_packages (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_packages_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_packages_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_packages_property)
  //--- Atomic property: mValueRevealInFinder_devices
    self.mValueRevealInFinder_devices_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_devices (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_devices_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_devices_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_devices_property)
  //--- Atomic property: mValueRevealInFinder_fonts
    self.mValueRevealInFinder_fonts_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_fonts (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_fonts_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_fonts_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_fonts_property)
  //--- Atomic property: mValueRevealInFinder_artworks
    self.mValueRevealInFinder_artworks_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_artworks (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_artworks_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_artworks_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_artworks_property)
  //--- Atomic property: mValueRevealInFinder_symbols
    self.mValueRevealInFinder_symbols_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_symbols (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_symbols_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_symbols_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_symbols_property)
  //--- Notify application will terminate
    NotificationCenter.default.addObserver (self,
      selector:#selector(Preferences.applicationWillTerminateAction(_:)),
      name:NSApplication.willTerminateNotification,
      object:nil
    )
  //--- Extern functions
  }

  //····················································································································
  //    awakeFromNib
  //····················································································································

  override func awakeFromNib () {
    if let outlet : Any = self.mAddLibraryEntryButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mAddLibraryEntryButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mAddLibraryEntryButton' outlet is nil") ;
    }
    if let outlet : Any = self.mAdditionnalLibraryArrayTableView {
      if !(outlet is EBTableView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mAdditionnalLibraryArrayTableView' outlet is not an instance of 'EBTableView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mAdditionnalLibraryArrayTableView' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardBackgroundColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardBackgroundColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardBackgroundColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardBottomSideLayoutColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardBottomSideLayoutColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardBottomSideLayoutColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardBottomSideLegendColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardBottomSideLegendColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardBottomSideLegendColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardBottomSidePadColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardBottomSidePadColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardBottomSidePadColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardBottomSideRestrictRectangleColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardBottomSideRestrictRectangleColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardBottomSideRestrictRectangleColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardClearanceColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardClearanceColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardClearanceColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardDotColorGridColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardDotColorGridColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardDotColorGridColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardDrawErrorBackgroundCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardDrawErrorBackgroundCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardDrawErrorBackgroundCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardDrawWarningBackgroundCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardDrawWarningBackgroundCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardDrawWarningBackgroundCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardErrorBackgroundColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardErrorBackgroundColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardErrorBackgroundColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardLimitsColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardLimitsColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardLimitsColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardLineColorGridColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardLineColorGridColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardLineColorGridColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardPackageDrawingWidthMultipliedByTenPopupButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardPackageDrawingWidthMultipliedByTenPopupButton' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardPackageDrawingWidthMultipliedByTenPopupButton' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardPadFontButton {
      if !(outlet is EBFontButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardPadFontButton' outlet is not an instance of 'EBFontButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardPadFontButton' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardPadNumberColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardPadNumberColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardPadNumberColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardTopSideLayoutColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardTopSideLayoutColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardTopSideLayoutColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardTopSideLegendColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardTopSideLegendColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardTopSideLegendColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardTopSidePadColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardTopSidePadColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardTopSidePadColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardTopSideRestrictRectangleColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardTopSideRestrictRectangleColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardTopSideRestrictRectangleColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBoardWarningBackgroundColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBoardWarningBackgroundColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBoardWarningBackgroundColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBottomSidePadColorDorDeviveColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBottomSidePadColorDorDeviveColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBottomSidePadColorDorDeviveColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mBottomSidePadColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mBottomSidePadColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mBottomSidePadColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mCancelButtonInLibraryUpdateWindow {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mCancelButtonInLibraryUpdateWindow' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mCancelButtonInLibraryUpdateWindow' outlet is nil") ;
    }
    if let outlet : Any = self.mCheckForLibraryUpdatesButton {
      if !(outlet is NSButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mCheckForLibraryUpdatesButton' outlet is not an instance of 'NSButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mCheckForLibraryUpdatesButton' outlet is nil") ;
    }
    if let outlet : Any = self.mCheckForSystemLibraryAtStartUpSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mCheckForSystemLibraryAtStartUpSwitch' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mCheckForSystemLibraryAtStartUpSwitch' outlet is nil") ;
    }
    if let outlet : Any = self.mCheckLibraryAction {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mCheckLibraryAction' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mCheckLibraryAction' outlet is nil") ;
    }
    if let outlet : Any = self.mCheckLibraryResultTextView {
      if !(outlet is NSTextView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mCheckLibraryResultTextView' outlet is not an instance of 'NSTextView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mCheckLibraryResultTextView' outlet is nil") ;
    }
    if let outlet : Any = self.mCheckingForLibraryUpdateProgressIndicator {
      if !(outlet is EBProgressIndicator) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mCheckingForLibraryUpdateProgressIndicator' outlet is not an instance of 'EBProgressIndicator'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mCheckingForLibraryUpdateProgressIndicator' outlet is nil") ;
    }
    if let outlet : Any = self.mCheckingForLibraryUpdateWindow {
      if !(outlet is EBWindow) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mCheckingForLibraryUpdateWindow' outlet is not an instance of 'EBWindow'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mCheckingForLibraryUpdateWindow' outlet is nil") ;
    }
    if let outlet : Any = self.mConnectionColorForSchematicColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mConnectionColorForSchematicColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mConnectionColorForSchematicColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mCrossColorOfSymbolGridColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mCrossColorOfSymbolGridColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mCrossColorOfSymbolGridColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mDimensionFontButton {
      if !(outlet is EBFontButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mDimensionFontButton' outlet is not an instance of 'EBFontButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mDimensionFontButton' outlet is nil") ;
    }
    if let outlet : Any = self.mDotColorGridForSchematicColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mDotColorGridForSchematicColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mDotColorGridForSchematicColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mDotColorOfPackageGridColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mDotColorOfPackageGridColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mDotColorOfPackageGridColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mEditionTransparencySlider {
      if !(outlet is EBSlider) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mEditionTransparencySlider' outlet is not an instance of 'EBSlider'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mEditionTransparencySlider' outlet is nil") ;
    }
    if let outlet : Any = self.mEditionTransparencyTextField {
      if !(outlet is EBDoubleField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mEditionTransparencyTextField' outlet is not an instance of 'EBDoubleField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mEditionTransparencyTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mErrorMessageColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mErrorMessageColorColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mErrorMessageColorColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mFontCharacterSelectButton {
      if !(outlet is CanariFontCharacterSelectButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mFontCharacterSelectButton' outlet is not an instance of 'CanariFontCharacterSelectButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mFontCharacterSelectButton' outlet is nil") ;
    }
    if let outlet : Any = self.mInformativeTextInLibraryUpdateWindow {
      if !(outlet is EBTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mInformativeTextInLibraryUpdateWindow' outlet is not an instance of 'EBTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mInformativeTextInLibraryUpdateWindow' outlet is nil") ;
    }
    if let outlet : Any = self.mLibraryRepositoryCommitButton {
      if !(outlet is NSButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLibraryRepositoryCommitButton' outlet is not an instance of 'NSButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLibraryRepositoryCommitButton' outlet is nil") ;
    }
    if let outlet : Any = self.mLibraryRepositoryCurrentReleaseTextField {
      if !(outlet is NSTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLibraryRepositoryCurrentReleaseTextField' outlet is not an instance of 'NSTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLibraryRepositoryCurrentReleaseTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mLibraryRepositoryLoadCurrentReleaseButton {
      if !(outlet is NSButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLibraryRepositoryLoadCurrentReleaseButton' outlet is not an instance of 'NSButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLibraryRepositoryLoadCurrentReleaseButton' outlet is nil") ;
    }
    if let outlet : Any = self.mLibraryRepositoryLogTextView {
      if !(outlet is NSTextView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLibraryRepositoryLogTextView' outlet is not an instance of 'NSTextView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLibraryRepositoryLogTextView' outlet is nil") ;
    }
    if let outlet : Any = self.mLibraryRepositoryStatusButton {
      if !(outlet is NSButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLibraryRepositoryStatusButton' outlet is not an instance of 'NSButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLibraryRepositoryStatusButton' outlet is nil") ;
    }
    if let outlet : Any = self.mLibraryRepositoryTextField {
      if !(outlet is NSTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLibraryRepositoryTextField' outlet is not an instance of 'NSTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLibraryRepositoryTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mLibraryRevisionListScrollView {
      if !(outlet is NSScrollView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLibraryRevisionListScrollView' outlet is not an instance of 'NSScrollView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLibraryRevisionListScrollView' outlet is nil") ;
    }
    if let outlet : Any = self.mLibraryRevisionListTableView {
      if !(outlet is NSTableView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLibraryRevisionListTableView' outlet is not an instance of 'NSTableView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLibraryRevisionListTableView' outlet is nil") ;
    }
    if let outlet : Any = self.mLibraryUpdateLogTextView {
      if !(outlet is NSTextView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLibraryUpdateLogTextView' outlet is not an instance of 'NSTextView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLibraryUpdateLogTextView' outlet is nil") ;
    }
    if let outlet : Any = self.mLibraryUpdateWindow {
      if !(outlet is EBWindow) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLibraryUpdateWindow' outlet is not an instance of 'EBWindow'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLibraryUpdateWindow' outlet is nil") ;
    }
    if let outlet : Any = self.mLibraryUploadWindow {
      if !(outlet is EBWindow) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLibraryUploadWindow' outlet is not an instance of 'EBWindow'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLibraryUploadWindow' outlet is nil") ;
    }
    if let outlet : Any = self.mLineColorGridForSchematicColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLineColorGridForSchematicColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLineColorGridForSchematicColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mLineColorOfPackageGridColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLineColorOfPackageGridColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLineColorOfPackageGridColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mLineColorOfSymbolGridColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mLineColorOfSymbolGridColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mLineColorOfSymbolGridColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mMenuRevealInFinder_artworks {
      if !(outlet is CanariMenu) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mMenuRevealInFinder_artworks' outlet is not an instance of 'CanariMenu'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mMenuRevealInFinder_artworks' outlet is nil") ;
    }
    if let outlet : Any = self.mMenuRevealInFinder_devices {
      if !(outlet is CanariMenu) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mMenuRevealInFinder_devices' outlet is not an instance of 'CanariMenu'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mMenuRevealInFinder_devices' outlet is nil") ;
    }
    if let outlet : Any = self.mMenuRevealInFinder_fonts {
      if !(outlet is CanariMenu) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mMenuRevealInFinder_fonts' outlet is not an instance of 'CanariMenu'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mMenuRevealInFinder_fonts' outlet is nil") ;
    }
    if let outlet : Any = self.mMenuRevealInFinder_packages {
      if !(outlet is CanariMenu) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mMenuRevealInFinder_packages' outlet is not an instance of 'CanariMenu'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mMenuRevealInFinder_packages' outlet is nil") ;
    }
    if let outlet : Any = self.mMenuRevealInFinder_symbols {
      if !(outlet is CanariMenu) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mMenuRevealInFinder_symbols' outlet is not an instance of 'CanariMenu'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mMenuRevealInFinder_symbols' outlet is nil") ;
    }
    if let outlet : Any = self.mPackageBackgroundColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPackageBackgroundColorColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPackageBackgroundColorColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mPackageColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPackageColorColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPackageColorColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mPackageColorForDeviceColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPackageColorForDeviceColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPackageColorForDeviceColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mPackageDimensionColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPackageDimensionColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPackageDimensionColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mPackageDrawingWidthMultipliedByTenForDevicePopupButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPackageDrawingWidthMultipliedByTenForDevicePopupButton' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPackageDrawingWidthMultipliedByTenForDevicePopupButton' outlet is nil") ;
    }
    if let outlet : Any = self.mPackageDrawingWidthMultipliedByTenPopupButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPackageDrawingWidthMultipliedByTenPopupButton' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPackageDrawingWidthMultipliedByTenPopupButton' outlet is nil") ;
    }
    if let outlet : Any = self.mPackageGuideColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPackageGuideColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPackageGuideColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mPackageNameFontForDeviceFontButton {
      if !(outlet is EBFontButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPackageNameFontForDeviceFontButton' outlet is not an instance of 'EBFontButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPackageNameFontForDeviceFontButton' outlet is nil") ;
    }
    if let outlet : Any = self.mPadFontButton {
      if !(outlet is EBFontButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPadFontButton' outlet is not an instance of 'EBFontButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPadFontButton' outlet is nil") ;
    }
    if let outlet : Any = self.mPadNumberColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPadNumberColorColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPadNumberColorColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mPadNumberColorForDeviceColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPadNumberColorForDeviceColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPadNumberColorForDeviceColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mPadNumberFontForDeviceFontButton {
      if !(outlet is EBFontButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPadNumberFontForDeviceFontButton' outlet is not an instance of 'EBFontButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPadNumberFontForDeviceFontButton' outlet is nil") ;
    }
    if let outlet : Any = self.mPadZoneColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPadZoneColorColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPadZoneColorColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mPinNameColorForSchematicColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPinNameColorForSchematicColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPinNameColorForSchematicColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mPinNameFontButton {
      if !(outlet is EBFontButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPinNameFontButton' outlet is not an instance of 'EBFontButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPinNameFontButton' outlet is nil") ;
    }
    if let outlet : Any = self.mPinNameFontForDeviceFontButton {
      if !(outlet is EBFontButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPinNameFontForDeviceFontButton' outlet is not an instance of 'EBFontButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPinNameFontForDeviceFontButton' outlet is nil") ;
    }
    if let outlet : Any = self.mPinNameFontForSchematicFontButton {
      if !(outlet is EBFontButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPinNameFontForSchematicFontButton' outlet is not an instance of 'EBFontButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPinNameFontForSchematicFontButton' outlet is nil") ;
    }
    if let outlet : Any = self.mPinNumberColorForSchematicColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPinNumberColorForSchematicColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPinNumberColorForSchematicColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mPinNumberFontForSchematicFontButton {
      if !(outlet is EBFontButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPinNumberFontForSchematicFontButton' outlet is not an instance of 'EBFontButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPinNumberFontForSchematicFontButton' outlet is nil") ;
    }
    if let outlet : Any = self.mPrefsWindow {
      if !(outlet is EBWindow) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mPrefsWindow' outlet is not an instance of 'EBWindow'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mPrefsWindow' outlet is nil") ;
    }
    if let outlet : Any = self.mProgressIndicatorInLibraryUpdateWindow {
      if !(outlet is EBProgressIndicator) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mProgressIndicatorInLibraryUpdateWindow' outlet is not an instance of 'EBProgressIndicator'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mProgressIndicatorInLibraryUpdateWindow' outlet is nil") ;
    }
    if let outlet : Any = self.mRemoveLibraryEntryButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mRemoveLibraryEntryButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mRemoveLibraryEntryButton' outlet is nil") ;
    }
    if let outlet : Any = self.mRevealInFinderLibraryInUserApplicationSupportButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mRevealInFinderLibraryInUserApplicationSupportButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mRevealInFinderLibraryInUserApplicationSupportButton' outlet is nil") ;
    }
    if let outlet : Any = self.mSULastCheckTimeTextField {
      if !(outlet is NSTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSULastCheckTimeTextField' outlet is not an instance of 'NSTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSULastCheckTimeTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mSampleStringField {
      if !(outlet is EBTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSampleStringField' outlet is not an instance of 'EBTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSampleStringField' outlet is nil") ;
    }
    if let outlet : Any = self.mSampleStringSizeField {
      if !(outlet is EBDoubleField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSampleStringSizeField' outlet is not an instance of 'EBDoubleField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSampleStringSizeField' outlet is nil") ;
    }
    if let outlet : Any = self.mSelectionHiliteColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSelectionHiliteColorColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSelectionHiliteColorColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mSetLibraryRepositoryButton {
      if !(outlet is NSButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSetLibraryRepositoryButton' outlet is not an instance of 'NSButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSetLibraryRepositoryButton' outlet is nil") ;
    }
    if let outlet : Any = self.mSetUserAndPasswordButton {
      if !(outlet is NSButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSetUserAndPasswordButton' outlet is not an instance of 'NSButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSetUserAndPasswordButton' outlet is nil") ;
    }
    if let outlet : Any = self.mShowGerberDrawingFlowCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mShowGerberDrawingFlowCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mShowGerberDrawingFlowCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mShowGerberDrawingIndexesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mShowGerberDrawingIndexesCheckbox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mShowGerberDrawingIndexesCheckbox' outlet is nil") ;
    }
    if let outlet : Any = self.mSuccessMessageColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSuccessMessageColorColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSuccessMessageColorColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mSymbolAndPackageBackgroundColorForDeviceColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSymbolAndPackageBackgroundColorForDeviceColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSymbolAndPackageBackgroundColorForDeviceColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mSymbolAndPackageGridDotColorForDeviceColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSymbolAndPackageGridDotColorForDeviceColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSymbolAndPackageGridDotColorForDeviceColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mSymbolAndPackageLineDotColorForDeviceColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSymbolAndPackageLineDotColorForDeviceColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSymbolAndPackageLineDotColorForDeviceColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mSymbolBackgroundColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSymbolBackgroundColorColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSymbolBackgroundColorColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mSymbolColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSymbolColorColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSymbolColorColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mSymbolColorForDeviceColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSymbolColorForDeviceColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSymbolColorForDeviceColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mSymbolColorForSchematicColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSymbolColorForSchematicColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSymbolColorForSchematicColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mSymbolDrawingWidthMultipliedByTenForDevicePopupButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSymbolDrawingWidthMultipliedByTenForDevicePopupButton' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSymbolDrawingWidthMultipliedByTenForDevicePopupButton' outlet is nil") ;
    }
    if let outlet : Any = self.mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton' outlet is nil") ;
    }
    if let outlet : Any = self.mSymbolDrawingWidthMultipliedByTenPopupButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSymbolDrawingWidthMultipliedByTenPopupButton' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSymbolDrawingWidthMultipliedByTenPopupButton' outlet is nil") ;
    }
    if let outlet : Any = self.mSymbolNameFontForDeviceFontButton {
      if !(outlet is EBFontButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mSymbolNameFontForDeviceFontButton' outlet is not an instance of 'EBFontButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mSymbolNameFontForDeviceFontButton' outlet is nil") ;
    }
    if let outlet : Any = self.mTableViewInLibraryUpdateWindow {
      if !(outlet is EBTableView) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mTableViewInLibraryUpdateWindow' outlet is not an instance of 'EBTableView'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mTableViewInLibraryUpdateWindow' outlet is nil") ;
    }
    if let outlet : Any = self.mToolbar {
      if !(outlet is CanariToolbar) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mToolbar' outlet is not an instance of 'CanariToolbar'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mToolbar' outlet is nil") ;
    }
    if let outlet : Any = self.mTopSidePadColorForDeviceColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mTopSidePadColorForDeviceColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mTopSidePadColorForDeviceColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mTopSidePadColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mTopSidePadColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mTopSidePadColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mUnplacedComponentsColorForSchematicColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mUnplacedComponentsColorForSchematicColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mUnplacedComponentsColorForSchematicColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.mUpDateButtonInLibraryUpdateWindow {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mUpDateButtonInLibraryUpdateWindow' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mUpDateButtonInLibraryUpdateWindow' outlet is nil") ;
    }
    if let outlet : Any = self.mUpDateLibraryMenuItemInCanariMenu {
      if !(outlet is EBMenuItem) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mUpDateLibraryMenuItemInCanariMenu' outlet is not an instance of 'EBMenuItem'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mUpDateLibraryMenuItemInCanariMenu' outlet is nil") ;
    }
    if let outlet : Any = self.mUpdateSystemLibraryBox {
      if !(outlet is NSBox) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mUpdateSystemLibraryBox' outlet is not an instance of 'NSBox'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mUpdateSystemLibraryBox' outlet is nil") ;
    }
    if let outlet : Any = self.mUseLibraryInUserApplicationSupportPathCheckBox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mUseLibraryInUserApplicationSupportPathCheckBox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mUseLibraryInUserApplicationSupportPathCheckBox' outlet is nil") ;
    }
    if let outlet : Any = self.mUserAndPasswordTextField {
      if !(outlet is NSTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mUserAndPasswordTextField' outlet is not an instance of 'NSTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mUserAndPasswordTextField' outlet is nil") ;
    }
    if let outlet : Any = self.mWarningMessageColorColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mWarningMessageColorColorWell' outlet is not an instance of 'EBColorWell'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mWarningMessageColorColorWell' outlet is nil") ;
    }
    if let outlet : Any = self.nextSystemLibraryCheckDate {
      if !(outlet is CanariDateObserverField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'nextSystemLibraryCheckDate' outlet is not an instance of 'CanariDateObserverField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'nextSystemLibraryCheckDate' outlet is nil") ;
    }
    if let outlet : Any = self.selectionHilitePopupButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'selectionHilitePopupButton' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'selectionHilitePopupButton' outlet is nil") ;
    }
    if let outlet : Any = self.systemLibraryCheckTimeIntervalPopupButton {
      if !(outlet is EBPopUpButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'systemLibraryCheckTimeIntervalPopupButton' outlet is not an instance of 'EBPopUpButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'systemLibraryCheckTimeIntervalPopupButton' outlet is nil") ;
    }
    if let outlet : Any = self.systemLibraryCheckTimeIntervalTitleTextField {
      if !(outlet is NSTextField) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'systemLibraryCheckTimeIntervalTitleTextField' outlet is not an instance of 'NSTextField'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'systemLibraryCheckTimeIntervalTitleTextField' outlet is nil") ;
    }
  //--------------------------- Install bindings
    mErrorMessageColorColorWell?.bind_color (self.errorMessageColor_property, file: #file, line: #line, sendContinously:false)
    mWarningMessageColorColorWell?.bind_color (self.warningMessageColor_property, file: #file, line: #line, sendContinously:false)
    mSuccessMessageColorColorWell?.bind_color (self.successMessageColor_property, file: #file, line: #line, sendContinously:false)
    mSelectionHiliteColorColorWell?.bind_color (self.selectionHiliteColor_property, file: #file, line: #line, sendContinously:false)
    selectionHilitePopupButton?.bind_selectedTag (self.hiliteWidthMultipliedByTen_property, file: #file, line: #line)
    mMenuRevealInFinder_symbols?.bind_populateSubmenus (self.mValueRevealInFinder_symbols_property, file: #file, line: #line)
    mMenuRevealInFinder_packages?.bind_populateSubmenus (self.mValueRevealInFinder_packages_property, file: #file, line: #line)
    mMenuRevealInFinder_devices?.bind_populateSubmenus (self.mValueRevealInFinder_devices_property, file: #file, line: #line)
    mMenuRevealInFinder_fonts?.bind_populateSubmenus (self.mValueRevealInFinder_fonts_property, file: #file, line: #line)
    mMenuRevealInFinder_artworks?.bind_populateSubmenus (self.mValueRevealInFinder_artworks_property, file: #file, line: #line)
    mSymbolColorColorWell?.bind_color (self.symbolColor_property, file: #file, line: #line, sendContinously:false)
    mCrossColorOfSymbolGridColorWell?.bind_color (self.crossColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    mLineColorOfSymbolGridColorWell?.bind_color (self.lineColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    mSymbolBackgroundColorColorWell?.bind_color (self.symbolBackgroundColor_property, file: #file, line: #line, sendContinously:false)
    mSymbolDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (self.symbolDrawingWidthMultipliedByTen_property, file: #file, line: #line)
    mPinNameFontButton?.bind_fontValue (self.pinNameFont_property, file: #file, line: #line)
    mDotColorOfPackageGridColorWell?.bind_color (self.crossColorOfPackageGrid_property, file: #file, line: #line, sendContinously:false)
    mLineColorOfPackageGridColorWell?.bind_color (self.lineColorOfPackageGrid_property, file: #file, line: #line, sendContinously:false)
    mPackageBackgroundColorColorWell?.bind_color (self.packageBackgroundColor_property, file: #file, line: #line, sendContinously:false)
    mPackageColorColorWell?.bind_color (self.packageColor_property, file: #file, line: #line, sendContinously:false)
    mTopSidePadColorWell?.bind_color (self.topSidePadColor_property, file: #file, line: #line, sendContinously:false)
    mBottomSidePadColorWell?.bind_color (self.bottomSidePadColor_property, file: #file, line: #line, sendContinously:false)
    mPadNumberColorColorWell?.bind_color (self.padNumberColor_property, file: #file, line: #line, sendContinously:false)
    mPadFontButton?.bind_fontValue (self.padNumberFont_property, file: #file, line: #line)
    mPackageGuideColorWell?.bind_color (self.packageGuideColor_property, file: #file, line: #line, sendContinously:false)
    mPackageDimensionColorWell?.bind_color (self.packageDimensionColor_property, file: #file, line: #line, sendContinously:false)
    mDimensionFontButton?.bind_fontValue (self.dimensionFont_property, file: #file, line: #line)
    mPadZoneColorColorWell?.bind_color (self.padZoneColor_property, file: #file, line: #line, sendContinously:false)
    mPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (self.packageDrawingWidthMultipliedByTen_property, file: #file, line: #line)
    mSymbolAndPackageGridDotColorForDeviceColorWell?.bind_color (self.mSymbolAndPackageGridDotColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mSymbolAndPackageLineDotColorForDeviceColorWell?.bind_color (self.mSymbolAndPackageGridLineColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mSymbolAndPackageBackgroundColorForDeviceColorWell?.bind_color (self.mSymbolAndPackageBackgroundColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mPackageColorForDeviceColorWell?.bind_color (self.mPackageColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mTopSidePadColorForDeviceColorWell?.bind_color (self.mTopSidePadColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mBottomSidePadColorDorDeviveColorWell?.bind_color (self.mBottomSidePadColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mPadNumberColorForDeviceColorWell?.bind_color (self.mPadNumberColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mPackageNameFontForDeviceFontButton?.bind_fontValue (self.mPadNumberFontForDevice_property, file: #file, line: #line)
    mPadNumberFontForDeviceFontButton?.bind_fontValue (self.mPadNumberFontForDevice_property, file: #file, line: #line)
    mSymbolColorForDeviceColorWell?.bind_color (self.mSymbolColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mSymbolNameFontForDeviceFontButton?.bind_fontValue (self.mSymbolNameFontForDevice_property, file: #file, line: #line)
    mPinNameFontForDeviceFontButton?.bind_fontValue (self.mPinNameFontForDevice_property, file: #file, line: #line)
    mSymbolDrawingWidthMultipliedByTenForDevicePopupButton?.bind_selectedTag (self.symbolDrawingWidthForDeviceMultipliedByTen_property, file: #file, line: #line)
    mPackageDrawingWidthMultipliedByTenForDevicePopupButton?.bind_selectedTag (self.packageDrawingWidthForDeviceMultipliedByTen_property, file: #file, line: #line)
    mDotColorGridForSchematicColorWell?.bind_color (self.dotColorGridForSchematic_property, file: #file, line: #line, sendContinously:false)
    mLineColorGridForSchematicColorWell?.bind_color (self.lineColorGridForSchematic_property, file: #file, line: #line, sendContinously:false)
    mUnplacedComponentsColorForSchematicColorWell?.bind_color (self.symbolColorForUnplacedComponentsForSchematic_property, file: #file, line: #line, sendContinously:false)
    mSymbolColorForSchematicColorWell?.bind_color (self.symbolColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mPinNameFontForSchematicFontButton?.bind_fontValue (self.pinNameFontForSchematic_property, file: #file, line: #line)
    mPinNameColorForSchematicColorWell?.bind_color (self.pinNameColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mPinNumberFontForSchematicFontButton?.bind_fontValue (self.pinNumberFontForSchematic_property, file: #file, line: #line)
    mPinNumberColorForSchematicColorWell?.bind_color (self.pinNumberColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mConnectionColorForSchematicColorWell?.bind_color (self.connectionColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton?.bind_selectedTag (self.symbolDrawingWidthMultipliedByTenForSchematic_property, file: #file, line: #line)
    mBoardDotColorGridColorWell?.bind_color (self.dotColorGridForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardLineColorGridColorWell?.bind_color (self.lineColorGridForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBackgroundColorWell?.bind_color (self.boardBackgroundColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardErrorBackgroundColorWell?.bind_color (self.errorBackgroundColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardDrawErrorBackgroundCheckbox?.bind_value (self.drawErrorBackgroundForBoard_property, file: #file, line: #line)
    mBoardWarningBackgroundColorWell?.bind_color (self.warningBackgroundColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardDrawWarningBackgroundCheckbox?.bind_value (self.drawEWarningBackgroundForBoard_property, file: #file, line: #line)
    mBoardLimitsColorWell?.bind_color (self.boardLimitsColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardClearanceColorWell?.bind_color (self.boardClearanceColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSideRestrictRectangleColorWell?.bind_color (self.topSideRestrictRectangleColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideRestrictRectangleColorWell?.bind_color (self.bottomSideRestrictRectangleColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSideLegendColorWell?.bind_color (self.topSideLegendColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSideLayoutColorWell?.bind_color (self.topSideLayoutColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideLayoutColorWell?.bind_color (self.bottomSideLayoutColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideLegendColorWell?.bind_color (self.bottomSideLegendColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSidePadColorWell?.bind_color (self.topSidePadColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSidePadColorWell?.bind_color (self.bottomSidePadColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardPadFontButton?.bind_fontValue (self.padNumberFontForBoard_property, file: #file, line: #line)
    mBoardPadNumberColorWell?.bind_color (self.padNumberColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (self.packageDrawingWidthMultpliedByTenForBoard_property, file: #file, line: #line)
    mSampleStringField?.bind_value (self.sampleString_property, file: #file, line: #line, sendContinously:true)
    mSampleStringSizeField?.bind_value (self.sampleStringSize_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    mShowGerberDrawingFlowCheckbox?.bind_value (self.showGerberDrawingFlow_property, file: #file, line: #line)
    mShowGerberDrawingIndexesCheckbox?.bind_value (self.showGerberDrawingIndexes_property, file: #file, line: #line)
    mFontCharacterSelectButton?.bind_codePoint (self.currentCharacterCodePoint_property, file: #file, line: #line)
    mEditionTransparencySlider?.bind_doubleValue (self.fontEditionTransparency_property, file: #file, line: #line, sendContinously:true)
    mEditionTransparencyTextField?.bind_value (self.fontEditionTransparency_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    mUseLibraryInUserApplicationSupportPathCheckBox?.bind_value (self.usesUserLibrary_property, file: #file, line: #line)
    mCheckForSystemLibraryAtStartUpSwitch?.bind_value (self.checkForSystemLibraryAtStartUp_property, file: #file, line: #line)
    nextSystemLibraryCheckDate?.bind_dateObserver (self.mLastSystemLibraryCheckTime_property, file: #file, line: #line)
    systemLibraryCheckTimeIntervalPopupButton?.bind_selectedTag (self.systemLibraryCheckTimeInterval_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return !self.checkForSystemLibraryAtStartUp_property_selection
        },
        outlet: self.nextSystemLibraryCheckDate
      )
      self.checkForSystemLibraryAtStartUp_property.addEBObserver (controller)
      self.mController_nextSystemLibraryCheckDate_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return !self.checkForSystemLibraryAtStartUp_property_selection
        },
        outlet: self.systemLibraryCheckTimeIntervalPopupButton
      )
      self.checkForSystemLibraryAtStartUp_property.addEBObserver (controller)
      self.mController_systemLibraryCheckTimeIntervalPopupButton_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return !self.checkForSystemLibraryAtStartUp_property_selection
        },
        outlet: self.systemLibraryCheckTimeIntervalTitleTextField
      )
      self.checkForSystemLibraryAtStartUp_property.addEBObserver (controller)
      self.mController_systemLibraryCheckTimeIntervalTitleTextField_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.additionnalLibraryArrayController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mRemoveLibraryEntryButton
      )
      self.additionnalLibraryArrayController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mRemoveLibraryEntryButton_enabled = controller
    }
  //--------------------------- Array controller
    self.additionnalLibraryArrayController.bind_tableView (self.mAdditionnalLibraryArrayTableView, file: #file, line: #line)
  //--------------------------- Set targets / actions
    self.mRevealInFinderLibraryInUserApplicationSupportButton?.target = self
    self.mRevealInFinderLibraryInUserApplicationSupportButton?.action = #selector (Preferences.revealUserLibraryInFinderAction (_:))
    self.mAddLibraryEntryButton?.target = self
    self.mAddLibraryEntryButton?.action = #selector (Preferences.addLibraryEntryAction (_:))
    self.mRemoveLibraryEntryButton?.target = additionnalLibraryArrayController
    self.mRemoveLibraryEntryButton?.action = #selector (ArrayController_Preferences_additionnalLibraryArrayController.remove (_:))
    self.mCheckLibraryAction?.target = self
    self.mCheckLibraryAction?.action = #selector (Preferences.checkLibraryAction (_:))
  //--------------------------- Extern functions
    self.setupForLibrary ()
  }

  //····················································································································
  //    applicationWillTerminateAction
  //····················································································································

  @objc func applicationWillTerminateAction (_ : NSNotification) {
  //--------------------------- Array controller
    self.additionnalLibraryArrayController.unbind_tableView (self.mAdditionnalLibraryArrayTableView)
  //--- Array controller property: additionnalLibraryArrayController
    self.additionnalLibraryArrayController.unbind_model ()
    self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_packages_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_packages_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_packages_property)
    self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_devices_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_devices_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_devices_property)
    self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_fonts_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_fonts_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_fonts_property)
    self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_artworks_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_artworks_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_artworks_property)
    self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_symbols_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_symbols_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_symbols_property)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

