//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//--------------------------------------------------------------------------------------------------------------------*

var g_Preferences : Preferences? = nil

//--------------------------------------------------------------------------------------------------------------------*

let Preferences_warningMessageColor = "Preferences:warningMessageColor"
let Preferences_successMessageColor = "Preferences:successMessageColor"
let Preferences_selectionHiliteColor = "Preferences:selectionHiliteColor"
let Preferences_symbolColor = "Preferences:symbolColor"
let Preferences_crossColorOfSymbolGrid = "Preferences:crossColorOfSymbolGrid"
let Preferences_lineColorOfSymbolGrid = "Preferences:lineColorOfSymbolGrid"
let Preferences_symbolBackgroundColor = "Preferences:symbolBackgroundColor"
let Preferences_symbolDrawingWidthMultipliedByTen = "Preferences:symbolDrawingWidthMultipliedByTen"
let Preferences_crossColorOfPackageGrid = "Preferences:crossColorOfPackageGrid"
let Preferences_lineColorOfPackageGrid = "Preferences:lineColorOfPackageGrid"
let Preferences_packageBackgroundColor = "Preferences:packageBackgroundColor"
let Preferences_packageColor = "Preferences:packageColor"
let Preferences_frontSidePadColor = "Preferences:frontSidePadColor"
let Preferences_backSidePadColor = "Preferences:backSidePadColor"
let Preferences_displayPackageBackSidePads = "Preferences:displayPackageBackSidePads"
let Preferences_padNumberColor = "Preferences:padNumberColor"
let Preferences_padNumberFont = "Preferences:padNumberFont"
let Preferences_showPadNumber = "Preferences:showPadNumber"
let Preferences_packageGuideColor = "Preferences:packageGuideColor"
let Preferences_packageDimensionColor = "Preferences:packageDimensionColor"
let Preferences_dimensionFont = "Preferences:dimensionFont"
let Preferences_padZoneColor = "Preferences:padZoneColor"
let Preferences_padZoneFont = "Preferences:padZoneFont"
let Preferences_packageDrawingWidthMultipliedByTen = "Preferences:packageDrawingWidthMultipliedByTen"
let Preferences_mSymbolAndPackageGridDotColorForDevice = "Preferences:mSymbolAndPackageGridDotColorForDevice"
let Preferences_mSymbolAndPackageGridLineColorForDevice = "Preferences:mSymbolAndPackageGridLineColorForDevice"
let Preferences_mSymbolAndPackageBackgroundColorForDevice = "Preferences:mSymbolAndPackageBackgroundColorForDevice"
let Preferences_mPackageColorForDevice = "Preferences:mPackageColorForDevice"
let Preferences_mFrontSidePadColorForDevice = "Preferences:mFrontSidePadColorForDevice"
let Preferences_mBottomSidePadColorForDevice = "Preferences:mBottomSidePadColorForDevice"
let Preferences_mPadNumberColorForDevice = "Preferences:mPadNumberColorForDevice"
let Preferences_mPackageNameFontForDevice = "Preferences:mPackageNameFontForDevice"
let Preferences_mPadNumberFontForDevice = "Preferences:mPadNumberFontForDevice"
let Preferences_mSymbolColorForDevice = "Preferences:mSymbolColorForDevice"
let Preferences_mSymbolNameFontForDevice = "Preferences:mSymbolNameFontForDevice"
let Preferences_mPinNameFontForDevice = "Preferences:mPinNameFontForDevice"
let Preferences_symbolDrawingWidthForDeviceMultipliedByTen = "Preferences:symbolDrawingWidthForDeviceMultipliedByTen"
let Preferences_packageDrawingWidthForDeviceMultipliedByTen = "Preferences:packageDrawingWidthForDeviceMultipliedByTen"
let Preferences_schematicBackColor = "Preferences:schematicBackColor"
let Preferences_dotColorGridForSchematic = "Preferences:dotColorGridForSchematic"
let Preferences_lineColorGridForSchematic = "Preferences:lineColorGridForSchematic"
let Preferences_symbolColorForUnplacedComponentsForSchematic = "Preferences:symbolColorForUnplacedComponentsForSchematic"
let Preferences_symbolColorForSchematic = "Preferences:symbolColorForSchematic"
let Preferences_pinNameFontForSchematic = "Preferences:pinNameFontForSchematic"
let Preferences_pinNameColorForSchematic = "Preferences:pinNameColorForSchematic"
let Preferences_pinNumberFontForSchematic = "Preferences:pinNumberFontForSchematic"
let Preferences_pinNumberColorForSchematic = "Preferences:pinNumberColorForSchematic"
let Preferences_connectionColorForSchematic = "Preferences:connectionColorForSchematic"
let Preferences_symbolDrawingWidthMultipliedByTenForSchematic = "Preferences:symbolDrawingWidthMultipliedByTenForSchematic"
let Preferences_crossColorGridForBoard = "Preferences:crossColorGridForBoard"
let Preferences_lineColorGridForBoard = "Preferences:lineColorGridForBoard"
let Preferences_boardBackgroundColorForBoard = "Preferences:boardBackgroundColorForBoard"
let Preferences_errorBackgroundColorForBoard = "Preferences:errorBackgroundColorForBoard"
let Preferences_drawErrorBackgroundForBoard = "Preferences:drawErrorBackgroundForBoard"
let Preferences_warningBackgroundColorForBoard = "Preferences:warningBackgroundColorForBoard"
let Preferences_drawWarningBackgroundForBoard = "Preferences:drawWarningBackgroundForBoard"
let Preferences_boardLimitsColorForBoard = "Preferences:boardLimitsColorForBoard"
let Preferences_boardClearanceColorForBoard = "Preferences:boardClearanceColorForBoard"
let Preferences_displayFrontRestrictRectangles = "Preferences:displayFrontRestrictRectangles"
let Preferences_frontSideRestrictRectangleColorForBoard = "Preferences:frontSideRestrictRectangleColorForBoard"
let Preferences_displayBackRestrictRectangles = "Preferences:displayBackRestrictRectangles"
let Preferences_backSideRestrictRectangleColorForBoard = "Preferences:backSideRestrictRectangleColorForBoard"
let Preferences_displayFrontLegendForBoard = "Preferences:displayFrontLegendForBoard"
let Preferences_frontSideLegendColorForBoard = "Preferences:frontSideLegendColorForBoard"
let Preferences_displayFrontLayoutForBoard = "Preferences:displayFrontLayoutForBoard"
let Preferences_frontSideLayoutColorForBoard = "Preferences:frontSideLayoutColorForBoard"
let Preferences_displayBackLayoutForBoard = "Preferences:displayBackLayoutForBoard"
let Preferences_backSideLayoutColorForBoard = "Preferences:backSideLayoutColorForBoard"
let Preferences_displayBackLegendForBoard = "Preferences:displayBackLegendForBoard"
let Preferences_backSideLegendColorForBoard = "Preferences:backSideLegendColorForBoard"
let Preferences_displayFrontPadsForBoard = "Preferences:displayFrontPadsForBoard"
let Preferences_frontSidePadColorForBoard = "Preferences:frontSidePadColorForBoard"
let Preferences_displayBackPadsForBoard = "Preferences:displayBackPadsForBoard"
let Preferences_backSidePadColorForBoard = "Preferences:backSidePadColorForBoard"
let Preferences_displayPadNumbersForBoard = "Preferences:displayPadNumbersForBoard"
let Preferences_padNumberFontForBoard = "Preferences:padNumberFontForBoard"
let Preferences_padNumberColorForBoard = "Preferences:padNumberColorForBoard"
let Preferences_packageDrawingWidthMultpliedByTenForBoard = "Preferences:packageDrawingWidthMultpliedByTenForBoard"
let Preferences_showGerberDrawingFlow = "Preferences:showGerberDrawingFlow"
let Preferences_showGerberDrawingIndexes = "Preferences:showGerberDrawingIndexes"
let Preferences_fontEditionTransparency = "Preferences:fontEditionTransparency"
let Preferences_checkForSystemLibraryAtStartUp = "Preferences:checkForSystemLibraryAtStartUp"
let Preferences_systemLibraryCheckTimeInterval = "Preferences:systemLibraryCheckTimeInterval"
let Preferences_mergerModelViewHorizontalFlip = "Preferences:mergerModelViewHorizontalFlip"
let Preferences_mergerModelViewVerticalFlip = "Preferences:mergerModelViewVerticalFlip"
let Preferences_mergerModelViewDisplayHoles = "Preferences:mergerModelViewDisplayHoles"
let Preferences_mergerModelViewDisplayVias = "Preferences:mergerModelViewDisplayVias"
let Preferences_mergerModelViewDisplayFrontPads = "Preferences:mergerModelViewDisplayFrontPads"
let Preferences_mergerModelViewDisplayInternalBoardsLimits = "Preferences:mergerModelViewDisplayInternalBoardsLimits"
let Preferences_mergerModelViewDisplayBoardLimits = "Preferences:mergerModelViewDisplayBoardLimits"
let Preferences_mergerModelViewDisplayFrontComponentNames = "Preferences:mergerModelViewDisplayFrontComponentNames"
let Preferences_mergerModelViewDisplayFrontComponentValues = "Preferences:mergerModelViewDisplayFrontComponentValues"
let Preferences_mergerModelViewDisplayFrontPackages = "Preferences:mergerModelViewDisplayFrontPackages"
let Preferences_mergerModelViewDisplayFrontLegendTexts = "Preferences:mergerModelViewDisplayFrontLegendTexts"
let Preferences_mergerModelViewDisplayFrontTracks = "Preferences:mergerModelViewDisplayFrontTracks"
let Preferences_mergerModelViewDisplayFrontLayoutTexts = "Preferences:mergerModelViewDisplayFrontLayoutTexts"
let Preferences_mergerModelViewDisplayBackPads = "Preferences:mergerModelViewDisplayBackPads"
let Preferences_mergerModelViewDisplayBackComponentNames = "Preferences:mergerModelViewDisplayBackComponentNames"
let Preferences_mergerModelViewDisplayBackComponentValues = "Preferences:mergerModelViewDisplayBackComponentValues"
let Preferences_mergerModelViewDisplayBackLegendTexts = "Preferences:mergerModelViewDisplayBackLegendTexts"
let Preferences_mergerModelViewDisplayBackPackages = "Preferences:mergerModelViewDisplayBackPackages"
let Preferences_mergerModelViewDisplayBackTracks = "Preferences:mergerModelViewDisplayBackTracks"
let Preferences_mergerModelViewDisplayBackLayoutTexts = "Preferences:mergerModelViewDisplayBackLayoutTexts"
let Preferences_mergerModelViewDisplayFrontLegendLines = "Preferences:mergerModelViewDisplayFrontLegendLines"
let Preferences_mergerModelViewDisplayBackLegendLines = "Preferences:mergerModelViewDisplayBackLegendLines"
let Preferences_mergerBoardViewHorizontalFlip = "Preferences:mergerBoardViewHorizontalFlip"
let Preferences_mergerBoardViewVerticalFlip = "Preferences:mergerBoardViewVerticalFlip"
let Preferences_mergerBoardViewDisplayHoles = "Preferences:mergerBoardViewDisplayHoles"
let Preferences_mergerBoardViewDisplayVias = "Preferences:mergerBoardViewDisplayVias"
let Preferences_mergerBoardViewDisplayFrontPads = "Preferences:mergerBoardViewDisplayFrontPads"
let Preferences_mergerBoardViewDisplayInternalBoardsLimits = "Preferences:mergerBoardViewDisplayInternalBoardsLimits"
let Preferences_mergerBoardViewDisplayBoardLimits = "Preferences:mergerBoardViewDisplayBoardLimits"
let Preferences_mergerBoardViewDisplayFrontComponentNames = "Preferences:mergerBoardViewDisplayFrontComponentNames"
let Preferences_mergerBoardViewDisplayFrontComponentValues = "Preferences:mergerBoardViewDisplayFrontComponentValues"
let Preferences_mergerBoardViewDisplayFrontPackages = "Preferences:mergerBoardViewDisplayFrontPackages"
let Preferences_mergerBoardViewDisplayFrontLegendTexts = "Preferences:mergerBoardViewDisplayFrontLegendTexts"
let Preferences_mergerBoardViewDisplayFrontTracks = "Preferences:mergerBoardViewDisplayFrontTracks"
let Preferences_mergerBoardViewDisplayFrontLayoutTexts = "Preferences:mergerBoardViewDisplayFrontLayoutTexts"
let Preferences_mergerBoardViewDisplayBackPads = "Preferences:mergerBoardViewDisplayBackPads"
let Preferences_mergerBoardViewDisplayBackComponentNames = "Preferences:mergerBoardViewDisplayBackComponentNames"
let Preferences_mergerBoardViewDisplayBackComponentValues = "Preferences:mergerBoardViewDisplayBackComponentValues"
let Preferences_mergerBoardViewDisplayBackLegendTexts = "Preferences:mergerBoardViewDisplayBackLegendTexts"
let Preferences_mergerBoardViewDisplayBackPackages = "Preferences:mergerBoardViewDisplayBackPackages"
let Preferences_mergerBoardViewDisplayBackTracks = "Preferences:mergerBoardViewDisplayBackTracks"
let Preferences_mergerBoardViewDisplayBackLayoutTexts = "Preferences:mergerBoardViewDisplayBackLayoutTexts"
let Preferences_mergerBoardViewDisplayFrontLegendLines = "Preferences:mergerBoardViewDisplayFrontLegendLines"
let Preferences_mergerBoardViewDisplayBackLegendLines = "Preferences:mergerBoardViewDisplayBackLegendLines"
let Preferences_mergerColorHoles = "Preferences:mergerColorHoles"
let Preferences_mergerColorVias = "Preferences:mergerColorVias"
let Preferences_mergerColorFrontPads = "Preferences:mergerColorFrontPads"
let Preferences_mergerColorBoardLimits = "Preferences:mergerColorBoardLimits"
let Preferences_mergerColorInternalBoardsLimits = "Preferences:mergerColorInternalBoardsLimits"
let Preferences_mergerColorFrontComponentNames = "Preferences:mergerColorFrontComponentNames"
let Preferences_mergerColorFrontComponentValues = "Preferences:mergerColorFrontComponentValues"
let Preferences_mergerColorFrontPackages = "Preferences:mergerColorFrontPackages"
let Preferences_mergerColorFrontLegendTexts = "Preferences:mergerColorFrontLegendTexts"
let Preferences_mergerColorFrontTracks = "Preferences:mergerColorFrontTracks"
let Preferences_mergerColorFrontLayoutTexts = "Preferences:mergerColorFrontLayoutTexts"
let Preferences_mergerColorBackPads = "Preferences:mergerColorBackPads"
let Preferences_mergerColorBackComponentNames = "Preferences:mergerColorBackComponentNames"
let Preferences_mergerColorBackComponentValues = "Preferences:mergerColorBackComponentValues"
let Preferences_mergerColorBackLegendTexts = "Preferences:mergerColorBackLegendTexts"
let Preferences_mergerColorBackPackages = "Preferences:mergerColorBackPackages"
let Preferences_mergerColorBackTracks = "Preferences:mergerColorBackTracks"
let Preferences_mergerColorBackLayoutTexts = "Preferences:mergerColorBackLayoutTexts"
let Preferences_mergerColorFrontLegendLines = "Preferences:mergerColorFrontLegendLines"
let Preferences_mergerColorBackLegendLines = "Preferences:mergerColorBackLegendLines"
let Preferences_mergerColorBackground = "Preferences:mergerColorBackground"
let Preferences_errorMessageColor = "Preferences:errorMessageColor"
let Preferences_hiliteWidthMultipliedByTen = "Preferences:hiliteWidthMultipliedByTen"
let Preferences_usesUserLibrary = "Preferences:usesUserLibrary"
let Preferences_additionnalLibraryArray = "Preferences:additionnalLibraryArray"
let Preferences_pinNameFont = "Preferences:pinNameFont"
let Preferences_displayPackageFrontSidePads = "Preferences:displayPackageFrontSidePads"
let Preferences_sampleString = "Preferences:sampleString"
let Preferences_sampleStringSize = "Preferences:sampleStringSize"
let Preferences_mLastSystemLibraryCheckTime = "Preferences:mLastSystemLibraryCheckTime"

//--------------------------------------------------------------------------------------------------------------------*

@objc(Preferences) class Preferences : EBObject, NSWindowDelegate {

  //····················································································································
  //   Atomic property: warningMessageColor
  //····················································································································

  let warningMessageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_warningMessageColor)

  //····················································································································

  final var warningMessageColor : NSColor {
    get { return self.warningMessageColor_property.propval }
    set { self.warningMessageColor_property.setProp (newValue) }
  }

  //····················································································································

  final var warningMessageColor_property_selection : EBSelection <NSColor> { return self.warningMessageColor_property.prop }

  //····················································································································
  //   Atomic property: successMessageColor
  //····················································································································

  let successMessageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_successMessageColor)

  //····················································································································

  final var successMessageColor : NSColor {
    get { return self.successMessageColor_property.propval }
    set { self.successMessageColor_property.setProp (newValue) }
  }

  //····················································································································

  final var successMessageColor_property_selection : EBSelection <NSColor> { return self.successMessageColor_property.prop }

  //····················································································································
  //   Atomic property: selectionHiliteColor
  //····················································································································

  let selectionHiliteColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.cyan, prefKey: Preferences_selectionHiliteColor)

  //····················································································································

  final var selectionHiliteColor : NSColor {
    get { return self.selectionHiliteColor_property.propval }
    set { self.selectionHiliteColor_property.setProp (newValue) }
  }

  //····················································································································

  final var selectionHiliteColor_property_selection : EBSelection <NSColor> { return self.selectionHiliteColor_property.prop }

  //····················································································································
  //   Atomic property: symbolColor
  //····················································································································

  let symbolColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_symbolColor)

  //····················································································································

  final var symbolColor : NSColor {
    get { return self.symbolColor_property.propval }
    set { self.symbolColor_property.setProp (newValue) }
  }

  //····················································································································

  final var symbolColor_property_selection : EBSelection <NSColor> { return self.symbolColor_property.prop }

  //····················································································································
  //   Atomic property: crossColorOfSymbolGrid
  //····················································································································

  let crossColorOfSymbolGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_crossColorOfSymbolGrid)

  //····················································································································

  final var crossColorOfSymbolGrid : NSColor {
    get { return self.crossColorOfSymbolGrid_property.propval }
    set { self.crossColorOfSymbolGrid_property.setProp (newValue) }
  }

  //····················································································································

  final var crossColorOfSymbolGrid_property_selection : EBSelection <NSColor> { return self.crossColorOfSymbolGrid_property.prop }

  //····················································································································
  //   Atomic property: lineColorOfSymbolGrid
  //····················································································································

  let lineColorOfSymbolGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_lineColorOfSymbolGrid)

  //····················································································································

  final var lineColorOfSymbolGrid : NSColor {
    get { return self.lineColorOfSymbolGrid_property.propval }
    set { self.lineColorOfSymbolGrid_property.setProp (newValue) }
  }

  //····················································································································

  final var lineColorOfSymbolGrid_property_selection : EBSelection <NSColor> { return self.lineColorOfSymbolGrid_property.prop }

  //····················································································································
  //   Atomic property: symbolBackgroundColor
  //····················································································································

  let symbolBackgroundColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_symbolBackgroundColor)

  //····················································································································

  final var symbolBackgroundColor : NSColor {
    get { return self.symbolBackgroundColor_property.propval }
    set { self.symbolBackgroundColor_property.setProp (newValue) }
  }

  //····················································································································

  final var symbolBackgroundColor_property_selection : EBSelection <NSColor> { return self.symbolBackgroundColor_property.prop }

  //····················································································································
  //   Atomic property: symbolDrawingWidthMultipliedByTen
  //····················································································································

  let symbolDrawingWidthMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 5, prefKey: Preferences_symbolDrawingWidthMultipliedByTen)

  //····················································································································

  final var symbolDrawingWidthMultipliedByTen : Int {
    get { return self.symbolDrawingWidthMultipliedByTen_property.propval }
    set { self.symbolDrawingWidthMultipliedByTen_property.setProp (newValue) }
  }

  //····················································································································

  final var symbolDrawingWidthMultipliedByTen_property_selection : EBSelection <Int> { return self.symbolDrawingWidthMultipliedByTen_property.prop }

  //····················································································································
  //   Atomic property: crossColorOfPackageGrid
  //····················································································································

  let crossColorOfPackageGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_crossColorOfPackageGrid)

  //····················································································································

  final var crossColorOfPackageGrid : NSColor {
    get { return self.crossColorOfPackageGrid_property.propval }
    set { self.crossColorOfPackageGrid_property.setProp (newValue) }
  }

  //····················································································································

  final var crossColorOfPackageGrid_property_selection : EBSelection <NSColor> { return self.crossColorOfPackageGrid_property.prop }

  //····················································································································
  //   Atomic property: lineColorOfPackageGrid
  //····················································································································

  let lineColorOfPackageGrid_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_lineColorOfPackageGrid)

  //····················································································································

  final var lineColorOfPackageGrid : NSColor {
    get { return self.lineColorOfPackageGrid_property.propval }
    set { self.lineColorOfPackageGrid_property.setProp (newValue) }
  }

  //····················································································································

  final var lineColorOfPackageGrid_property_selection : EBSelection <NSColor> { return self.lineColorOfPackageGrid_property.prop }

  //····················································································································
  //   Atomic property: packageBackgroundColor
  //····················································································································

  let packageBackgroundColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_packageBackgroundColor)

  //····················································································································

  final var packageBackgroundColor : NSColor {
    get { return self.packageBackgroundColor_property.propval }
    set { self.packageBackgroundColor_property.setProp (newValue) }
  }

  //····················································································································

  final var packageBackgroundColor_property_selection : EBSelection <NSColor> { return self.packageBackgroundColor_property.prop }

  //····················································································································
  //   Atomic property: packageColor
  //····················································································································

  let packageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_packageColor)

  //····················································································································

  final var packageColor : NSColor {
    get { return self.packageColor_property.propval }
    set { self.packageColor_property.setProp (newValue) }
  }

  //····················································································································

  final var packageColor_property_selection : EBSelection <NSColor> { return self.packageColor_property.prop }

  //····················································································································
  //   Atomic property: frontSidePadColor
  //····················································································································

  let frontSidePadColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSidePadColor)

  //····················································································································

  final var frontSidePadColor : NSColor {
    get { return self.frontSidePadColor_property.propval }
    set { self.frontSidePadColor_property.setProp (newValue) }
  }

  //····················································································································

  final var frontSidePadColor_property_selection : EBSelection <NSColor> { return self.frontSidePadColor_property.prop }

  //····················································································································
  //   Atomic property: backSidePadColor
  //····················································································································

  let backSidePadColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSidePadColor)

  //····················································································································

  final var backSidePadColor : NSColor {
    get { return self.backSidePadColor_property.propval }
    set { self.backSidePadColor_property.setProp (newValue) }
  }

  //····················································································································

  final var backSidePadColor_property_selection : EBSelection <NSColor> { return self.backSidePadColor_property.prop }

  //····················································································································
  //   Atomic property: displayPackageBackSidePads
  //····················································································································

  let displayPackageBackSidePads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayPackageBackSidePads)

  //····················································································································

  final var displayPackageBackSidePads : Bool {
    get { return self.displayPackageBackSidePads_property.propval }
    set { self.displayPackageBackSidePads_property.setProp (newValue) }
  }

  //····················································································································

  final var displayPackageBackSidePads_property_selection : EBSelection <Bool> { return self.displayPackageBackSidePads_property.prop }

  //····················································································································
  //   Atomic property: padNumberColor
  //····················································································································

  let padNumberColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_padNumberColor)

  //····················································································································

  final var padNumberColor : NSColor {
    get { return self.padNumberColor_property.propval }
    set { self.padNumberColor_property.setProp (newValue) }
  }

  //····················································································································

  final var padNumberColor_property_selection : EBSelection <NSColor> { return self.padNumberColor_property.prop }

  //····················································································································
  //   Atomic property: padNumberFont
  //····················································································································

  let padNumberFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padNumberFont)

  //····················································································································

  final var padNumberFont : NSFont {
    get { return self.padNumberFont_property.propval }
    set { self.padNumberFont_property.setProp (newValue) }
  }

  //····················································································································

  final var padNumberFont_property_selection : EBSelection <NSFont> { return self.padNumberFont_property.prop }

  //····················································································································
  //   Atomic property: showPadNumber
  //····················································································································

  let showPadNumber_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_showPadNumber)

  //····················································································································

  final var showPadNumber : Bool {
    get { return self.showPadNumber_property.propval }
    set { self.showPadNumber_property.setProp (newValue) }
  }

  //····················································································································

  final var showPadNumber_property_selection : EBSelection <Bool> { return self.showPadNumber_property.prop }

  //····················································································································
  //   Atomic property: packageGuideColor
  //····················································································································

  let packageGuideColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_packageGuideColor)

  //····················································································································

  final var packageGuideColor : NSColor {
    get { return self.packageGuideColor_property.propval }
    set { self.packageGuideColor_property.setProp (newValue) }
  }

  //····················································································································

  final var packageGuideColor_property_selection : EBSelection <NSColor> { return self.packageGuideColor_property.prop }

  //····················································································································
  //   Atomic property: packageDimensionColor
  //····················································································································

  let packageDimensionColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_packageDimensionColor)

  //····················································································································

  final var packageDimensionColor : NSColor {
    get { return self.packageDimensionColor_property.propval }
    set { self.packageDimensionColor_property.setProp (newValue) }
  }

  //····················································································································

  final var packageDimensionColor_property_selection : EBSelection <NSColor> { return self.packageDimensionColor_property.prop }

  //····················································································································
  //   Atomic property: dimensionFont
  //····················································································································

  let dimensionFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 2.0), prefKey: Preferences_dimensionFont)

  //····················································································································

  final var dimensionFont : NSFont {
    get { return self.dimensionFont_property.propval }
    set { self.dimensionFont_property.setProp (newValue) }
  }

  //····················································································································

  final var dimensionFont_property_selection : EBSelection <NSFont> { return self.dimensionFont_property.prop }

  //····················································································································
  //   Atomic property: padZoneColor
  //····················································································································

  let padZoneColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.magenta, prefKey: Preferences_padZoneColor)

  //····················································································································

  final var padZoneColor : NSColor {
    get { return self.padZoneColor_property.propval }
    set { self.padZoneColor_property.setProp (newValue) }
  }

  //····················································································································

  final var padZoneColor_property_selection : EBSelection <NSColor> { return self.padZoneColor_property.prop }

  //····················································································································
  //   Atomic property: padZoneFont
  //····················································································································

  let padZoneFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padZoneFont)

  //····················································································································

  final var padZoneFont : NSFont {
    get { return self.padZoneFont_property.propval }
    set { self.padZoneFont_property.setProp (newValue) }
  }

  //····················································································································

  final var padZoneFont_property_selection : EBSelection <NSFont> { return self.padZoneFont_property.prop }

  //····················································································································
  //   Atomic property: packageDrawingWidthMultipliedByTen
  //····················································································································

  let packageDrawingWidthMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_packageDrawingWidthMultipliedByTen)

  //····················································································································

  final var packageDrawingWidthMultipliedByTen : Int {
    get { return self.packageDrawingWidthMultipliedByTen_property.propval }
    set { self.packageDrawingWidthMultipliedByTen_property.setProp (newValue) }
  }

  //····················································································································

  final var packageDrawingWidthMultipliedByTen_property_selection : EBSelection <Int> { return self.packageDrawingWidthMultipliedByTen_property.prop }

  //····················································································································
  //   Atomic property: mSymbolAndPackageGridDotColorForDevice
  //····················································································································

  let mSymbolAndPackageGridDotColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_mSymbolAndPackageGridDotColorForDevice)

  //····················································································································

  final var mSymbolAndPackageGridDotColorForDevice : NSColor {
    get { return self.mSymbolAndPackageGridDotColorForDevice_property.propval }
    set { self.mSymbolAndPackageGridDotColorForDevice_property.setProp (newValue) }
  }

  //····················································································································

  final var mSymbolAndPackageGridDotColorForDevice_property_selection : EBSelection <NSColor> { return self.mSymbolAndPackageGridDotColorForDevice_property.prop }

  //····················································································································
  //   Atomic property: mSymbolAndPackageGridLineColorForDevice
  //····················································································································

  let mSymbolAndPackageGridLineColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mSymbolAndPackageGridLineColorForDevice)

  //····················································································································

  final var mSymbolAndPackageGridLineColorForDevice : NSColor {
    get { return self.mSymbolAndPackageGridLineColorForDevice_property.propval }
    set { self.mSymbolAndPackageGridLineColorForDevice_property.setProp (newValue) }
  }

  //····················································································································

  final var mSymbolAndPackageGridLineColorForDevice_property_selection : EBSelection <NSColor> { return self.mSymbolAndPackageGridLineColorForDevice_property.prop }

  //····················································································································
  //   Atomic property: mSymbolAndPackageBackgroundColorForDevice
  //····················································································································

  let mSymbolAndPackageBackgroundColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_mSymbolAndPackageBackgroundColorForDevice)

  //····················································································································

  final var mSymbolAndPackageBackgroundColorForDevice : NSColor {
    get { return self.mSymbolAndPackageBackgroundColorForDevice_property.propval }
    set { self.mSymbolAndPackageBackgroundColorForDevice_property.setProp (newValue) }
  }

  //····················································································································

  final var mSymbolAndPackageBackgroundColorForDevice_property_selection : EBSelection <NSColor> { return self.mSymbolAndPackageBackgroundColorForDevice_property.prop }

  //····················································································································
  //   Atomic property: mPackageColorForDevice
  //····················································································································

  let mPackageColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mPackageColorForDevice)

  //····················································································································

  final var mPackageColorForDevice : NSColor {
    get { return self.mPackageColorForDevice_property.propval }
    set { self.mPackageColorForDevice_property.setProp (newValue) }
  }

  //····················································································································

  final var mPackageColorForDevice_property_selection : EBSelection <NSColor> { return self.mPackageColorForDevice_property.prop }

  //····················································································································
  //   Atomic property: mFrontSidePadColorForDevice
  //····················································································································

  let mFrontSidePadColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_mFrontSidePadColorForDevice)

  //····················································································································

  final var mFrontSidePadColorForDevice : NSColor {
    get { return self.mFrontSidePadColorForDevice_property.propval }
    set { self.mFrontSidePadColorForDevice_property.setProp (newValue) }
  }

  //····················································································································

  final var mFrontSidePadColorForDevice_property_selection : EBSelection <NSColor> { return self.mFrontSidePadColorForDevice_property.prop }

  //····················································································································
  //   Atomic property: mBottomSidePadColorForDevice
  //····················································································································

  let mBottomSidePadColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mBottomSidePadColorForDevice)

  //····················································································································

  final var mBottomSidePadColorForDevice : NSColor {
    get { return self.mBottomSidePadColorForDevice_property.propval }
    set { self.mBottomSidePadColorForDevice_property.setProp (newValue) }
  }

  //····················································································································

  final var mBottomSidePadColorForDevice_property_selection : EBSelection <NSColor> { return self.mBottomSidePadColorForDevice_property.prop }

  //····················································································································
  //   Atomic property: mPadNumberColorForDevice
  //····················································································································

  let mPadNumberColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_mPadNumberColorForDevice)

  //····················································································································

  final var mPadNumberColorForDevice : NSColor {
    get { return self.mPadNumberColorForDevice_property.propval }
    set { self.mPadNumberColorForDevice_property.setProp (newValue) }
  }

  //····················································································································

  final var mPadNumberColorForDevice_property_selection : EBSelection <NSColor> { return self.mPadNumberColorForDevice_property.prop }

  //····················································································································
  //   Atomic property: mPackageNameFontForDevice
  //····················································································································

  let mPackageNameFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 9.0), prefKey: Preferences_mPackageNameFontForDevice)

  //····················································································································

  final var mPackageNameFontForDevice : NSFont {
    get { return self.mPackageNameFontForDevice_property.propval }
    set { self.mPackageNameFontForDevice_property.setProp (newValue) }
  }

  //····················································································································

  final var mPackageNameFontForDevice_property_selection : EBSelection <NSFont> { return self.mPackageNameFontForDevice_property.prop }

  //····················································································································
  //   Atomic property: mPadNumberFontForDevice
  //····················································································································

  let mPadNumberFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 5.0), prefKey: Preferences_mPadNumberFontForDevice)

  //····················································································································

  final var mPadNumberFontForDevice : NSFont {
    get { return self.mPadNumberFontForDevice_property.propval }
    set { self.mPadNumberFontForDevice_property.setProp (newValue) }
  }

  //····················································································································

  final var mPadNumberFontForDevice_property_selection : EBSelection <NSFont> { return self.mPadNumberFontForDevice_property.prop }

  //····················································································································
  //   Atomic property: mSymbolColorForDevice
  //····················································································································

  let mSymbolColorForDevice_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mSymbolColorForDevice)

  //····················································································································

  final var mSymbolColorForDevice : NSColor {
    get { return self.mSymbolColorForDevice_property.propval }
    set { self.mSymbolColorForDevice_property.setProp (newValue) }
  }

  //····················································································································

  final var mSymbolColorForDevice_property_selection : EBSelection <NSColor> { return self.mSymbolColorForDevice_property.prop }

  //····················································································································
  //   Atomic property: mSymbolNameFontForDevice
  //····················································································································

  let mSymbolNameFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 9.0), prefKey: Preferences_mSymbolNameFontForDevice)

  //····················································································································

  final var mSymbolNameFontForDevice : NSFont {
    get { return self.mSymbolNameFontForDevice_property.propval }
    set { self.mSymbolNameFontForDevice_property.setProp (newValue) }
  }

  //····················································································································

  final var mSymbolNameFontForDevice_property_selection : EBSelection <NSFont> { return self.mSymbolNameFontForDevice_property.prop }

  //····················································································································
  //   Atomic property: mPinNameFontForDevice
  //····················································································································

  let mPinNameFontForDevice_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_mPinNameFontForDevice)

  //····················································································································

  final var mPinNameFontForDevice : NSFont {
    get { return self.mPinNameFontForDevice_property.propval }
    set { self.mPinNameFontForDevice_property.setProp (newValue) }
  }

  //····················································································································

  final var mPinNameFontForDevice_property_selection : EBSelection <NSFont> { return self.mPinNameFontForDevice_property.prop }

  //····················································································································
  //   Atomic property: symbolDrawingWidthForDeviceMultipliedByTen
  //····················································································································

  let symbolDrawingWidthForDeviceMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_symbolDrawingWidthForDeviceMultipliedByTen)

  //····················································································································

  final var symbolDrawingWidthForDeviceMultipliedByTen : Int {
    get { return self.symbolDrawingWidthForDeviceMultipliedByTen_property.propval }
    set { self.symbolDrawingWidthForDeviceMultipliedByTen_property.setProp (newValue) }
  }

  //····················································································································

  final var symbolDrawingWidthForDeviceMultipliedByTen_property_selection : EBSelection <Int> { return self.symbolDrawingWidthForDeviceMultipliedByTen_property.prop }

  //····················································································································
  //   Atomic property: packageDrawingWidthForDeviceMultipliedByTen
  //····················································································································

  let packageDrawingWidthForDeviceMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_packageDrawingWidthForDeviceMultipliedByTen)

  //····················································································································

  final var packageDrawingWidthForDeviceMultipliedByTen : Int {
    get { return self.packageDrawingWidthForDeviceMultipliedByTen_property.propval }
    set { self.packageDrawingWidthForDeviceMultipliedByTen_property.setProp (newValue) }
  }

  //····················································································································

  final var packageDrawingWidthForDeviceMultipliedByTen_property_selection : EBSelection <Int> { return self.packageDrawingWidthForDeviceMultipliedByTen_property.prop }

  //····················································································································
  //   Atomic property: schematicBackColor
  //····················································································································

  let schematicBackColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_schematicBackColor)

  //····················································································································

  final var schematicBackColor : NSColor {
    get { return self.schematicBackColor_property.propval }
    set { self.schematicBackColor_property.setProp (newValue) }
  }

  //····················································································································

  final var schematicBackColor_property_selection : EBSelection <NSColor> { return self.schematicBackColor_property.prop }

  //····················································································································
  //   Atomic property: dotColorGridForSchematic
  //····················································································································

  let dotColorGridForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_dotColorGridForSchematic)

  //····················································································································

  final var dotColorGridForSchematic : NSColor {
    get { return self.dotColorGridForSchematic_property.propval }
    set { self.dotColorGridForSchematic_property.setProp (newValue) }
  }

  //····················································································································

  final var dotColorGridForSchematic_property_selection : EBSelection <NSColor> { return self.dotColorGridForSchematic_property.prop }

  //····················································································································
  //   Atomic property: lineColorGridForSchematic
  //····················································································································

  let lineColorGridForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_lineColorGridForSchematic)

  //····················································································································

  final var lineColorGridForSchematic : NSColor {
    get { return self.lineColorGridForSchematic_property.propval }
    set { self.lineColorGridForSchematic_property.setProp (newValue) }
  }

  //····················································································································

  final var lineColorGridForSchematic_property_selection : EBSelection <NSColor> { return self.lineColorGridForSchematic_property.prop }

  //····················································································································
  //   Atomic property: symbolColorForUnplacedComponentsForSchematic
  //····················································································································

  let symbolColorForUnplacedComponentsForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.darkGray, prefKey: Preferences_symbolColorForUnplacedComponentsForSchematic)

  //····················································································································

  final var symbolColorForUnplacedComponentsForSchematic : NSColor {
    get { return self.symbolColorForUnplacedComponentsForSchematic_property.propval }
    set { self.symbolColorForUnplacedComponentsForSchematic_property.setProp (newValue) }
  }

  //····················································································································

  final var symbolColorForUnplacedComponentsForSchematic_property_selection : EBSelection <NSColor> { return self.symbolColorForUnplacedComponentsForSchematic_property.prop }

  //····················································································································
  //   Atomic property: symbolColorForSchematic
  //····················································································································

  let symbolColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_symbolColorForSchematic)

  //····················································································································

  final var symbolColorForSchematic : NSColor {
    get { return self.symbolColorForSchematic_property.propval }
    set { self.symbolColorForSchematic_property.setProp (newValue) }
  }

  //····················································································································

  final var symbolColorForSchematic_property_selection : EBSelection <NSColor> { return self.symbolColorForSchematic_property.prop }

  //····················································································································
  //   Atomic property: pinNameFontForSchematic
  //····················································································································

  let pinNameFontForSchematic_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNameFontForSchematic)

  //····················································································································

  final var pinNameFontForSchematic : NSFont {
    get { return self.pinNameFontForSchematic_property.propval }
    set { self.pinNameFontForSchematic_property.setProp (newValue) }
  }

  //····················································································································

  final var pinNameFontForSchematic_property_selection : EBSelection <NSFont> { return self.pinNameFontForSchematic_property.prop }

  //····················································································································
  //   Atomic property: pinNameColorForSchematic
  //····················································································································

  let pinNameColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_pinNameColorForSchematic)

  //····················································································································

  final var pinNameColorForSchematic : NSColor {
    get { return self.pinNameColorForSchematic_property.propval }
    set { self.pinNameColorForSchematic_property.setProp (newValue) }
  }

  //····················································································································

  final var pinNameColorForSchematic_property_selection : EBSelection <NSColor> { return self.pinNameColorForSchematic_property.prop }

  //····················································································································
  //   Atomic property: pinNumberFontForSchematic
  //····················································································································

  let pinNumberFontForSchematic_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNumberFontForSchematic)

  //····················································································································

  final var pinNumberFontForSchematic : NSFont {
    get { return self.pinNumberFontForSchematic_property.propval }
    set { self.pinNumberFontForSchematic_property.setProp (newValue) }
  }

  //····················································································································

  final var pinNumberFontForSchematic_property_selection : EBSelection <NSFont> { return self.pinNumberFontForSchematic_property.prop }

  //····················································································································
  //   Atomic property: pinNumberColorForSchematic
  //····················································································································

  let pinNumberColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.darkGray, prefKey: Preferences_pinNumberColorForSchematic)

  //····················································································································

  final var pinNumberColorForSchematic : NSColor {
    get { return self.pinNumberColorForSchematic_property.propval }
    set { self.pinNumberColorForSchematic_property.setProp (newValue) }
  }

  //····················································································································

  final var pinNumberColorForSchematic_property_selection : EBSelection <NSColor> { return self.pinNumberColorForSchematic_property.prop }

  //····················································································································
  //   Atomic property: connectionColorForSchematic
  //····················································································································

  let connectionColorForSchematic_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_connectionColorForSchematic)

  //····················································································································

  final var connectionColorForSchematic : NSColor {
    get { return self.connectionColorForSchematic_property.propval }
    set { self.connectionColorForSchematic_property.setProp (newValue) }
  }

  //····················································································································

  final var connectionColorForSchematic_property_selection : EBSelection <NSColor> { return self.connectionColorForSchematic_property.prop }

  //····················································································································
  //   Atomic property: symbolDrawingWidthMultipliedByTenForSchematic
  //····················································································································

  let symbolDrawingWidthMultipliedByTenForSchematic_property = EBPreferencesProperty_Int (defaultValue: 5, prefKey: Preferences_symbolDrawingWidthMultipliedByTenForSchematic)

  //····················································································································

  final var symbolDrawingWidthMultipliedByTenForSchematic : Int {
    get { return self.symbolDrawingWidthMultipliedByTenForSchematic_property.propval }
    set { self.symbolDrawingWidthMultipliedByTenForSchematic_property.setProp (newValue) }
  }

  //····················································································································

  final var symbolDrawingWidthMultipliedByTenForSchematic_property_selection : EBSelection <Int> { return self.symbolDrawingWidthMultipliedByTenForSchematic_property.prop }

  //····················································································································
  //   Atomic property: crossColorGridForBoard
  //····················································································································

  let crossColorGridForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_crossColorGridForBoard)

  //····················································································································

  final var crossColorGridForBoard : NSColor {
    get { return self.crossColorGridForBoard_property.propval }
    set { self.crossColorGridForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var crossColorGridForBoard_property_selection : EBSelection <NSColor> { return self.crossColorGridForBoard_property.prop }

  //····················································································································
  //   Atomic property: lineColorGridForBoard
  //····················································································································

  let lineColorGridForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.lightGray, prefKey: Preferences_lineColorGridForBoard)

  //····················································································································

  final var lineColorGridForBoard : NSColor {
    get { return self.lineColorGridForBoard_property.propval }
    set { self.lineColorGridForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var lineColorGridForBoard_property_selection : EBSelection <NSColor> { return self.lineColorGridForBoard_property.prop }

  //····················································································································
  //   Atomic property: boardBackgroundColorForBoard
  //····················································································································

  let boardBackgroundColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.black, prefKey: Preferences_boardBackgroundColorForBoard)

  //····················································································································

  final var boardBackgroundColorForBoard : NSColor {
    get { return self.boardBackgroundColorForBoard_property.propval }
    set { self.boardBackgroundColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var boardBackgroundColorForBoard_property_selection : EBSelection <NSColor> { return self.boardBackgroundColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: errorBackgroundColorForBoard
  //····················································································································

  let errorBackgroundColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_errorBackgroundColorForBoard)

  //····················································································································

  final var errorBackgroundColorForBoard : NSColor {
    get { return self.errorBackgroundColorForBoard_property.propval }
    set { self.errorBackgroundColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var errorBackgroundColorForBoard_property_selection : EBSelection <NSColor> { return self.errorBackgroundColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: drawErrorBackgroundForBoard
  //····················································································································

  let drawErrorBackgroundForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_drawErrorBackgroundForBoard)

  //····················································································································

  final var drawErrorBackgroundForBoard : Bool {
    get { return self.drawErrorBackgroundForBoard_property.propval }
    set { self.drawErrorBackgroundForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var drawErrorBackgroundForBoard_property_selection : EBSelection <Bool> { return self.drawErrorBackgroundForBoard_property.prop }

  //····················································································································
  //   Atomic property: warningBackgroundColorForBoard
  //····················································································································

  let warningBackgroundColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_warningBackgroundColorForBoard)

  //····················································································································

  final var warningBackgroundColorForBoard : NSColor {
    get { return self.warningBackgroundColorForBoard_property.propval }
    set { self.warningBackgroundColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var warningBackgroundColorForBoard_property_selection : EBSelection <NSColor> { return self.warningBackgroundColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: drawWarningBackgroundForBoard
  //····················································································································

  let drawWarningBackgroundForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_drawWarningBackgroundForBoard)

  //····················································································································

  final var drawWarningBackgroundForBoard : Bool {
    get { return self.drawWarningBackgroundForBoard_property.propval }
    set { self.drawWarningBackgroundForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var drawWarningBackgroundForBoard_property_selection : EBSelection <Bool> { return self.drawWarningBackgroundForBoard_property.prop }

  //····················································································································
  //   Atomic property: boardLimitsColorForBoard
  //····················································································································

  let boardLimitsColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_boardLimitsColorForBoard)

  //····················································································································

  final var boardLimitsColorForBoard : NSColor {
    get { return self.boardLimitsColorForBoard_property.propval }
    set { self.boardLimitsColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var boardLimitsColorForBoard_property_selection : EBSelection <NSColor> { return self.boardLimitsColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: boardClearanceColorForBoard
  //····················································································································

  let boardClearanceColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_boardClearanceColorForBoard)

  //····················································································································

  final var boardClearanceColorForBoard : NSColor {
    get { return self.boardClearanceColorForBoard_property.propval }
    set { self.boardClearanceColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var boardClearanceColorForBoard_property_selection : EBSelection <NSColor> { return self.boardClearanceColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: displayFrontRestrictRectangles
  //····················································································································

  let displayFrontRestrictRectangles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayFrontRestrictRectangles)

  //····················································································································

  final var displayFrontRestrictRectangles : Bool {
    get { return self.displayFrontRestrictRectangles_property.propval }
    set { self.displayFrontRestrictRectangles_property.setProp (newValue) }
  }

  //····················································································································

  final var displayFrontRestrictRectangles_property_selection : EBSelection <Bool> { return self.displayFrontRestrictRectangles_property.prop }

  //····················································································································
  //   Atomic property: frontSideRestrictRectangleColorForBoard
  //····················································································································

  let frontSideRestrictRectangleColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSideRestrictRectangleColorForBoard)

  //····················································································································

  final var frontSideRestrictRectangleColorForBoard : NSColor {
    get { return self.frontSideRestrictRectangleColorForBoard_property.propval }
    set { self.frontSideRestrictRectangleColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var frontSideRestrictRectangleColorForBoard_property_selection : EBSelection <NSColor> { return self.frontSideRestrictRectangleColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: displayBackRestrictRectangles
  //····················································································································

  let displayBackRestrictRectangles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayBackRestrictRectangles)

  //····················································································································

  final var displayBackRestrictRectangles : Bool {
    get { return self.displayBackRestrictRectangles_property.propval }
    set { self.displayBackRestrictRectangles_property.setProp (newValue) }
  }

  //····················································································································

  final var displayBackRestrictRectangles_property_selection : EBSelection <Bool> { return self.displayBackRestrictRectangles_property.prop }

  //····················································································································
  //   Atomic property: backSideRestrictRectangleColorForBoard
  //····················································································································

  let backSideRestrictRectangleColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSideRestrictRectangleColorForBoard)

  //····················································································································

  final var backSideRestrictRectangleColorForBoard : NSColor {
    get { return self.backSideRestrictRectangleColorForBoard_property.propval }
    set { self.backSideRestrictRectangleColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var backSideRestrictRectangleColorForBoard_property_selection : EBSelection <NSColor> { return self.backSideRestrictRectangleColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: displayFrontLegendForBoard
  //····················································································································

  let displayFrontLegendForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayFrontLegendForBoard)

  //····················································································································

  final var displayFrontLegendForBoard : Bool {
    get { return self.displayFrontLegendForBoard_property.propval }
    set { self.displayFrontLegendForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var displayFrontLegendForBoard_property_selection : EBSelection <Bool> { return self.displayFrontLegendForBoard_property.prop }

  //····················································································································
  //   Atomic property: frontSideLegendColorForBoard
  //····················································································································

  let frontSideLegendColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_frontSideLegendColorForBoard)

  //····················································································································

  final var frontSideLegendColorForBoard : NSColor {
    get { return self.frontSideLegendColorForBoard_property.propval }
    set { self.frontSideLegendColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var frontSideLegendColorForBoard_property_selection : EBSelection <NSColor> { return self.frontSideLegendColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: displayFrontLayoutForBoard
  //····················································································································

  let displayFrontLayoutForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayFrontLayoutForBoard)

  //····················································································································

  final var displayFrontLayoutForBoard : Bool {
    get { return self.displayFrontLayoutForBoard_property.propval }
    set { self.displayFrontLayoutForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var displayFrontLayoutForBoard_property_selection : EBSelection <Bool> { return self.displayFrontLayoutForBoard_property.prop }

  //····················································································································
  //   Atomic property: frontSideLayoutColorForBoard
  //····················································································································

  let frontSideLayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSideLayoutColorForBoard)

  //····················································································································

  final var frontSideLayoutColorForBoard : NSColor {
    get { return self.frontSideLayoutColorForBoard_property.propval }
    set { self.frontSideLayoutColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var frontSideLayoutColorForBoard_property_selection : EBSelection <NSColor> { return self.frontSideLayoutColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: displayBackLayoutForBoard
  //····················································································································

  let displayBackLayoutForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayBackLayoutForBoard)

  //····················································································································

  final var displayBackLayoutForBoard : Bool {
    get { return self.displayBackLayoutForBoard_property.propval }
    set { self.displayBackLayoutForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var displayBackLayoutForBoard_property_selection : EBSelection <Bool> { return self.displayBackLayoutForBoard_property.prop }

  //····················································································································
  //   Atomic property: backSideLayoutColorForBoard
  //····················································································································

  let backSideLayoutColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSideLayoutColorForBoard)

  //····················································································································

  final var backSideLayoutColorForBoard : NSColor {
    get { return self.backSideLayoutColorForBoard_property.propval }
    set { self.backSideLayoutColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var backSideLayoutColorForBoard_property_selection : EBSelection <NSColor> { return self.backSideLayoutColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: displayBackLegendForBoard
  //····················································································································

  let displayBackLegendForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayBackLegendForBoard)

  //····················································································································

  final var displayBackLegendForBoard : Bool {
    get { return self.displayBackLegendForBoard_property.propval }
    set { self.displayBackLegendForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var displayBackLegendForBoard_property_selection : EBSelection <Bool> { return self.displayBackLegendForBoard_property.prop }

  //····················································································································
  //   Atomic property: backSideLegendColorForBoard
  //····················································································································

  let backSideLegendColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_backSideLegendColorForBoard)

  //····················································································································

  final var backSideLegendColorForBoard : NSColor {
    get { return self.backSideLegendColorForBoard_property.propval }
    set { self.backSideLegendColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var backSideLegendColorForBoard_property_selection : EBSelection <NSColor> { return self.backSideLegendColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: displayFrontPadsForBoard
  //····················································································································

  let displayFrontPadsForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayFrontPadsForBoard)

  //····················································································································

  final var displayFrontPadsForBoard : Bool {
    get { return self.displayFrontPadsForBoard_property.propval }
    set { self.displayFrontPadsForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var displayFrontPadsForBoard_property_selection : EBSelection <Bool> { return self.displayFrontPadsForBoard_property.prop }

  //····················································································································
  //   Atomic property: frontSidePadColorForBoard
  //····················································································································

  let frontSidePadColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_frontSidePadColorForBoard)

  //····················································································································

  final var frontSidePadColorForBoard : NSColor {
    get { return self.frontSidePadColorForBoard_property.propval }
    set { self.frontSidePadColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var frontSidePadColorForBoard_property_selection : EBSelection <NSColor> { return self.frontSidePadColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: displayBackPadsForBoard
  //····················································································································

  let displayBackPadsForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayBackPadsForBoard)

  //····················································································································

  final var displayBackPadsForBoard : Bool {
    get { return self.displayBackPadsForBoard_property.propval }
    set { self.displayBackPadsForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var displayBackPadsForBoard_property_selection : EBSelection <Bool> { return self.displayBackPadsForBoard_property.prop }

  //····················································································································
  //   Atomic property: backSidePadColorForBoard
  //····················································································································

  let backSidePadColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_backSidePadColorForBoard)

  //····················································································································

  final var backSidePadColorForBoard : NSColor {
    get { return self.backSidePadColorForBoard_property.propval }
    set { self.backSidePadColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var backSidePadColorForBoard_property_selection : EBSelection <NSColor> { return self.backSidePadColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: displayPadNumbersForBoard
  //····················································································································

  let displayPadNumbersForBoard_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayPadNumbersForBoard)

  //····················································································································

  final var displayPadNumbersForBoard : Bool {
    get { return self.displayPadNumbersForBoard_property.propval }
    set { self.displayPadNumbersForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var displayPadNumbersForBoard_property_selection : EBSelection <Bool> { return self.displayPadNumbersForBoard_property.prop }

  //····················································································································
  //   Atomic property: padNumberFontForBoard
  //····················································································································

  let padNumberFontForBoard_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 3.0), prefKey: Preferences_padNumberFontForBoard)

  //····················································································································

  final var padNumberFontForBoard : NSFont {
    get { return self.padNumberFontForBoard_property.propval }
    set { self.padNumberFontForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var padNumberFontForBoard_property_selection : EBSelection <NSFont> { return self.padNumberFontForBoard_property.prop }

  //····················································································································
  //   Atomic property: padNumberColorForBoard
  //····················································································································

  let padNumberColorForBoard_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_padNumberColorForBoard)

  //····················································································································

  final var padNumberColorForBoard : NSColor {
    get { return self.padNumberColorForBoard_property.propval }
    set { self.padNumberColorForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var padNumberColorForBoard_property_selection : EBSelection <NSColor> { return self.padNumberColorForBoard_property.prop }

  //····················································································································
  //   Atomic property: packageDrawingWidthMultpliedByTenForBoard
  //····················································································································

  let packageDrawingWidthMultpliedByTenForBoard_property = EBPreferencesProperty_Int (defaultValue: 5, prefKey: Preferences_packageDrawingWidthMultpliedByTenForBoard)

  //····················································································································

  final var packageDrawingWidthMultpliedByTenForBoard : Int {
    get { return self.packageDrawingWidthMultpliedByTenForBoard_property.propval }
    set { self.packageDrawingWidthMultpliedByTenForBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var packageDrawingWidthMultpliedByTenForBoard_property_selection : EBSelection <Int> { return self.packageDrawingWidthMultpliedByTenForBoard_property.prop }

  //····················································································································
  //   Atomic property: showGerberDrawingFlow
  //····················································································································

  let showGerberDrawingFlow_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_showGerberDrawingFlow)

  //····················································································································

  final var showGerberDrawingFlow : Bool {
    get { return self.showGerberDrawingFlow_property.propval }
    set { self.showGerberDrawingFlow_property.setProp (newValue) }
  }

  //····················································································································

  final var showGerberDrawingFlow_property_selection : EBSelection <Bool> { return self.showGerberDrawingFlow_property.prop }

  //····················································································································
  //   Atomic property: showGerberDrawingIndexes
  //····················································································································

  let showGerberDrawingIndexes_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_showGerberDrawingIndexes)

  //····················································································································

  final var showGerberDrawingIndexes : Bool {
    get { return self.showGerberDrawingIndexes_property.propval }
    set { self.showGerberDrawingIndexes_property.setProp (newValue) }
  }

  //····················································································································

  final var showGerberDrawingIndexes_property_selection : EBSelection <Bool> { return self.showGerberDrawingIndexes_property.prop }

  //····················································································································
  //   Atomic property: fontEditionTransparency
  //····················································································································

  let fontEditionTransparency_property = EBPreferencesProperty_Double (defaultValue: 0.5, prefKey: Preferences_fontEditionTransparency)

  //····················································································································

  final var fontEditionTransparency : Double {
    get { return self.fontEditionTransparency_property.propval }
    set { self.fontEditionTransparency_property.setProp (newValue) }
  }

  //····················································································································

  final var fontEditionTransparency_property_selection : EBSelection <Double> { return self.fontEditionTransparency_property.prop }

  //····················································································································
  //   Atomic property: checkForSystemLibraryAtStartUp
  //····················································································································

  let checkForSystemLibraryAtStartUp_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_checkForSystemLibraryAtStartUp)

  //····················································································································

  final var checkForSystemLibraryAtStartUp : Bool {
    get { return self.checkForSystemLibraryAtStartUp_property.propval }
    set { self.checkForSystemLibraryAtStartUp_property.setProp (newValue) }
  }

  //····················································································································

  final var checkForSystemLibraryAtStartUp_property_selection : EBSelection <Bool> { return self.checkForSystemLibraryAtStartUp_property.prop }

  //····················································································································
  //   Atomic property: systemLibraryCheckTimeInterval
  //····················································································································

  let systemLibraryCheckTimeInterval_property = EBPreferencesProperty_Int (defaultValue: 0, prefKey: Preferences_systemLibraryCheckTimeInterval)

  //····················································································································

  final var systemLibraryCheckTimeInterval : Int {
    get { return self.systemLibraryCheckTimeInterval_property.propval }
    set { self.systemLibraryCheckTimeInterval_property.setProp (newValue) }
  }

  //····················································································································

  final var systemLibraryCheckTimeInterval_property_selection : EBSelection <Int> { return self.systemLibraryCheckTimeInterval_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewHorizontalFlip
  //····················································································································

  let mergerModelViewHorizontalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewHorizontalFlip)

  //····················································································································

  final var mergerModelViewHorizontalFlip : Bool {
    get { return self.mergerModelViewHorizontalFlip_property.propval }
    set { self.mergerModelViewHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewHorizontalFlip_property_selection : EBSelection <Bool> { return self.mergerModelViewHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewVerticalFlip
  //····················································································································

  let mergerModelViewVerticalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewVerticalFlip)

  //····················································································································

  final var mergerModelViewVerticalFlip : Bool {
    get { return self.mergerModelViewVerticalFlip_property.propval }
    set { self.mergerModelViewVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewVerticalFlip_property_selection : EBSelection <Bool> { return self.mergerModelViewVerticalFlip_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayHoles
  //····················································································································

  let mergerModelViewDisplayHoles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayHoles)

  //····················································································································

  final var mergerModelViewDisplayHoles : Bool {
    get { return self.mergerModelViewDisplayHoles_property.propval }
    set { self.mergerModelViewDisplayHoles_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayHoles_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayHoles_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayVias
  //····················································································································

  let mergerModelViewDisplayVias_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayVias)

  //····················································································································

  final var mergerModelViewDisplayVias : Bool {
    get { return self.mergerModelViewDisplayVias_property.propval }
    set { self.mergerModelViewDisplayVias_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayVias_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayVias_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontPads
  //····················································································································

  let mergerModelViewDisplayFrontPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayFrontPads)

  //····················································································································

  final var mergerModelViewDisplayFrontPads : Bool {
    get { return self.mergerModelViewDisplayFrontPads_property.propval }
    set { self.mergerModelViewDisplayFrontPads_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayFrontPads_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayFrontPads_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayInternalBoardsLimits
  //····················································································································

  let mergerModelViewDisplayInternalBoardsLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayInternalBoardsLimits)

  //····················································································································

  final var mergerModelViewDisplayInternalBoardsLimits : Bool {
    get { return self.mergerModelViewDisplayInternalBoardsLimits_property.propval }
    set { self.mergerModelViewDisplayInternalBoardsLimits_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayInternalBoardsLimits_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayInternalBoardsLimits_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBoardLimits
  //····················································································································

  let mergerModelViewDisplayBoardLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBoardLimits)

  //····················································································································

  final var mergerModelViewDisplayBoardLimits : Bool {
    get { return self.mergerModelViewDisplayBoardLimits_property.propval }
    set { self.mergerModelViewDisplayBoardLimits_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayBoardLimits_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayBoardLimits_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontComponentNames
  //····················································································································

  let mergerModelViewDisplayFrontComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontComponentNames)

  //····················································································································

  final var mergerModelViewDisplayFrontComponentNames : Bool {
    get { return self.mergerModelViewDisplayFrontComponentNames_property.propval }
    set { self.mergerModelViewDisplayFrontComponentNames_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayFrontComponentNames_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayFrontComponentNames_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontComponentValues
  //····················································································································

  let mergerModelViewDisplayFrontComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontComponentValues)

  //····················································································································

  final var mergerModelViewDisplayFrontComponentValues : Bool {
    get { return self.mergerModelViewDisplayFrontComponentValues_property.propval }
    set { self.mergerModelViewDisplayFrontComponentValues_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayFrontComponentValues_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayFrontComponentValues_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontPackages
  //····················································································································

  let mergerModelViewDisplayFrontPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontPackages)

  //····················································································································

  final var mergerModelViewDisplayFrontPackages : Bool {
    get { return self.mergerModelViewDisplayFrontPackages_property.propval }
    set { self.mergerModelViewDisplayFrontPackages_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayFrontPackages_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayFrontPackages_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontLegendTexts
  //····················································································································

  let mergerModelViewDisplayFrontLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLegendTexts)

  //····················································································································

  final var mergerModelViewDisplayFrontLegendTexts : Bool {
    get { return self.mergerModelViewDisplayFrontLegendTexts_property.propval }
    set { self.mergerModelViewDisplayFrontLegendTexts_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayFrontLegendTexts_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayFrontLegendTexts_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontTracks
  //····················································································································

  let mergerModelViewDisplayFrontTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontTracks)

  //····················································································································

  final var mergerModelViewDisplayFrontTracks : Bool {
    get { return self.mergerModelViewDisplayFrontTracks_property.propval }
    set { self.mergerModelViewDisplayFrontTracks_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayFrontTracks_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayFrontTracks_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontLayoutTexts
  //····················································································································

  let mergerModelViewDisplayFrontLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLayoutTexts)

  //····················································································································

  final var mergerModelViewDisplayFrontLayoutTexts : Bool {
    get { return self.mergerModelViewDisplayFrontLayoutTexts_property.propval }
    set { self.mergerModelViewDisplayFrontLayoutTexts_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayFrontLayoutTexts_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayFrontLayoutTexts_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackPads
  //····················································································································

  let mergerModelViewDisplayBackPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBackPads)

  //····················································································································

  final var mergerModelViewDisplayBackPads : Bool {
    get { return self.mergerModelViewDisplayBackPads_property.propval }
    set { self.mergerModelViewDisplayBackPads_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayBackPads_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayBackPads_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackComponentNames
  //····················································································································

  let mergerModelViewDisplayBackComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackComponentNames)

  //····················································································································

  final var mergerModelViewDisplayBackComponentNames : Bool {
    get { return self.mergerModelViewDisplayBackComponentNames_property.propval }
    set { self.mergerModelViewDisplayBackComponentNames_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayBackComponentNames_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayBackComponentNames_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackComponentValues
  //····················································································································

  let mergerModelViewDisplayBackComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackComponentValues)

  //····················································································································

  final var mergerModelViewDisplayBackComponentValues : Bool {
    get { return self.mergerModelViewDisplayBackComponentValues_property.propval }
    set { self.mergerModelViewDisplayBackComponentValues_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayBackComponentValues_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayBackComponentValues_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackLegendTexts
  //····················································································································

  let mergerModelViewDisplayBackLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackLegendTexts)

  //····················································································································

  final var mergerModelViewDisplayBackLegendTexts : Bool {
    get { return self.mergerModelViewDisplayBackLegendTexts_property.propval }
    set { self.mergerModelViewDisplayBackLegendTexts_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayBackLegendTexts_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayBackLegendTexts_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackPackages
  //····················································································································

  let mergerModelViewDisplayBackPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackPackages)

  //····················································································································

  final var mergerModelViewDisplayBackPackages : Bool {
    get { return self.mergerModelViewDisplayBackPackages_property.propval }
    set { self.mergerModelViewDisplayBackPackages_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayBackPackages_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayBackPackages_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackTracks
  //····················································································································

  let mergerModelViewDisplayBackTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackTracks)

  //····················································································································

  final var mergerModelViewDisplayBackTracks : Bool {
    get { return self.mergerModelViewDisplayBackTracks_property.propval }
    set { self.mergerModelViewDisplayBackTracks_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayBackTracks_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayBackTracks_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackLayoutTexts
  //····················································································································

  let mergerModelViewDisplayBackLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayBackLayoutTexts)

  //····················································································································

  final var mergerModelViewDisplayBackLayoutTexts : Bool {
    get { return self.mergerModelViewDisplayBackLayoutTexts_property.propval }
    set { self.mergerModelViewDisplayBackLayoutTexts_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayBackLayoutTexts_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayBackLayoutTexts_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayFrontLegendLines
  //····················································································································

  let mergerModelViewDisplayFrontLegendLines_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerModelViewDisplayFrontLegendLines)

  //····················································································································

  final var mergerModelViewDisplayFrontLegendLines : Bool {
    get { return self.mergerModelViewDisplayFrontLegendLines_property.propval }
    set { self.mergerModelViewDisplayFrontLegendLines_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayFrontLegendLines_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayFrontLegendLines_property.prop }

  //····················································································································
  //   Atomic property: mergerModelViewDisplayBackLegendLines
  //····················································································································

  let mergerModelViewDisplayBackLegendLines_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerModelViewDisplayBackLegendLines)

  //····················································································································

  final var mergerModelViewDisplayBackLegendLines : Bool {
    get { return self.mergerModelViewDisplayBackLegendLines_property.propval }
    set { self.mergerModelViewDisplayBackLegendLines_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerModelViewDisplayBackLegendLines_property_selection : EBSelection <Bool> { return self.mergerModelViewDisplayBackLegendLines_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewHorizontalFlip
  //····················································································································

  let mergerBoardViewHorizontalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewHorizontalFlip)

  //····················································································································

  final var mergerBoardViewHorizontalFlip : Bool {
    get { return self.mergerBoardViewHorizontalFlip_property.propval }
    set { self.mergerBoardViewHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewHorizontalFlip_property_selection : EBSelection <Bool> { return self.mergerBoardViewHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewVerticalFlip
  //····················································································································

  let mergerBoardViewVerticalFlip_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewVerticalFlip)

  //····················································································································

  final var mergerBoardViewVerticalFlip : Bool {
    get { return self.mergerBoardViewVerticalFlip_property.propval }
    set { self.mergerBoardViewVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewVerticalFlip_property_selection : EBSelection <Bool> { return self.mergerBoardViewVerticalFlip_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayHoles
  //····················································································································

  let mergerBoardViewDisplayHoles_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayHoles)

  //····················································································································

  final var mergerBoardViewDisplayHoles : Bool {
    get { return self.mergerBoardViewDisplayHoles_property.propval }
    set { self.mergerBoardViewDisplayHoles_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayHoles_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayHoles_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayVias
  //····················································································································

  let mergerBoardViewDisplayVias_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayVias)

  //····················································································································

  final var mergerBoardViewDisplayVias : Bool {
    get { return self.mergerBoardViewDisplayVias_property.propval }
    set { self.mergerBoardViewDisplayVias_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayVias_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayVias_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontPads
  //····················································································································

  let mergerBoardViewDisplayFrontPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayFrontPads)

  //····················································································································

  final var mergerBoardViewDisplayFrontPads : Bool {
    get { return self.mergerBoardViewDisplayFrontPads_property.propval }
    set { self.mergerBoardViewDisplayFrontPads_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayFrontPads_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayFrontPads_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayInternalBoardsLimits
  //····················································································································

  let mergerBoardViewDisplayInternalBoardsLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayInternalBoardsLimits)

  //····················································································································

  final var mergerBoardViewDisplayInternalBoardsLimits : Bool {
    get { return self.mergerBoardViewDisplayInternalBoardsLimits_property.propval }
    set { self.mergerBoardViewDisplayInternalBoardsLimits_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayInternalBoardsLimits_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayInternalBoardsLimits_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBoardLimits
  //····················································································································

  let mergerBoardViewDisplayBoardLimits_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBoardLimits)

  //····················································································································

  final var mergerBoardViewDisplayBoardLimits : Bool {
    get { return self.mergerBoardViewDisplayBoardLimits_property.propval }
    set { self.mergerBoardViewDisplayBoardLimits_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayBoardLimits_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayBoardLimits_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontComponentNames
  //····················································································································

  let mergerBoardViewDisplayFrontComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontComponentNames)

  //····················································································································

  final var mergerBoardViewDisplayFrontComponentNames : Bool {
    get { return self.mergerBoardViewDisplayFrontComponentNames_property.propval }
    set { self.mergerBoardViewDisplayFrontComponentNames_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayFrontComponentNames_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayFrontComponentNames_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontComponentValues
  //····················································································································

  let mergerBoardViewDisplayFrontComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontComponentValues)

  //····················································································································

  final var mergerBoardViewDisplayFrontComponentValues : Bool {
    get { return self.mergerBoardViewDisplayFrontComponentValues_property.propval }
    set { self.mergerBoardViewDisplayFrontComponentValues_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayFrontComponentValues_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayFrontComponentValues_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontPackages
  //····················································································································

  let mergerBoardViewDisplayFrontPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontPackages)

  //····················································································································

  final var mergerBoardViewDisplayFrontPackages : Bool {
    get { return self.mergerBoardViewDisplayFrontPackages_property.propval }
    set { self.mergerBoardViewDisplayFrontPackages_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayFrontPackages_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayFrontPackages_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontLegendTexts
  //····················································································································

  let mergerBoardViewDisplayFrontLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLegendTexts)

  //····················································································································

  final var mergerBoardViewDisplayFrontLegendTexts : Bool {
    get { return self.mergerBoardViewDisplayFrontLegendTexts_property.propval }
    set { self.mergerBoardViewDisplayFrontLegendTexts_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayFrontLegendTexts_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayFrontLegendTexts_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontTracks
  //····················································································································

  let mergerBoardViewDisplayFrontTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontTracks)

  //····················································································································

  final var mergerBoardViewDisplayFrontTracks : Bool {
    get { return self.mergerBoardViewDisplayFrontTracks_property.propval }
    set { self.mergerBoardViewDisplayFrontTracks_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayFrontTracks_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayFrontTracks_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontLayoutTexts
  //····················································································································

  let mergerBoardViewDisplayFrontLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLayoutTexts)

  //····················································································································

  final var mergerBoardViewDisplayFrontLayoutTexts : Bool {
    get { return self.mergerBoardViewDisplayFrontLayoutTexts_property.propval }
    set { self.mergerBoardViewDisplayFrontLayoutTexts_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayFrontLayoutTexts_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayFrontLayoutTexts_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackPads
  //····················································································································

  let mergerBoardViewDisplayBackPads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBackPads)

  //····················································································································

  final var mergerBoardViewDisplayBackPads : Bool {
    get { return self.mergerBoardViewDisplayBackPads_property.propval }
    set { self.mergerBoardViewDisplayBackPads_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayBackPads_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayBackPads_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackComponentNames
  //····················································································································

  let mergerBoardViewDisplayBackComponentNames_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackComponentNames)

  //····················································································································

  final var mergerBoardViewDisplayBackComponentNames : Bool {
    get { return self.mergerBoardViewDisplayBackComponentNames_property.propval }
    set { self.mergerBoardViewDisplayBackComponentNames_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayBackComponentNames_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayBackComponentNames_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackComponentValues
  //····················································································································

  let mergerBoardViewDisplayBackComponentValues_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackComponentValues)

  //····················································································································

  final var mergerBoardViewDisplayBackComponentValues : Bool {
    get { return self.mergerBoardViewDisplayBackComponentValues_property.propval }
    set { self.mergerBoardViewDisplayBackComponentValues_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayBackComponentValues_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayBackComponentValues_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackLegendTexts
  //····················································································································

  let mergerBoardViewDisplayBackLegendTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackLegendTexts)

  //····················································································································

  final var mergerBoardViewDisplayBackLegendTexts : Bool {
    get { return self.mergerBoardViewDisplayBackLegendTexts_property.propval }
    set { self.mergerBoardViewDisplayBackLegendTexts_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayBackLegendTexts_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayBackLegendTexts_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackPackages
  //····················································································································

  let mergerBoardViewDisplayBackPackages_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackPackages)

  //····················································································································

  final var mergerBoardViewDisplayBackPackages : Bool {
    get { return self.mergerBoardViewDisplayBackPackages_property.propval }
    set { self.mergerBoardViewDisplayBackPackages_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayBackPackages_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayBackPackages_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackTracks
  //····················································································································

  let mergerBoardViewDisplayBackTracks_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackTracks)

  //····················································································································

  final var mergerBoardViewDisplayBackTracks : Bool {
    get { return self.mergerBoardViewDisplayBackTracks_property.propval }
    set { self.mergerBoardViewDisplayBackTracks_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayBackTracks_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayBackTracks_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackLayoutTexts
  //····················································································································

  let mergerBoardViewDisplayBackLayoutTexts_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayBackLayoutTexts)

  //····················································································································

  final var mergerBoardViewDisplayBackLayoutTexts : Bool {
    get { return self.mergerBoardViewDisplayBackLayoutTexts_property.propval }
    set { self.mergerBoardViewDisplayBackLayoutTexts_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayBackLayoutTexts_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayBackLayoutTexts_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayFrontLegendLines
  //····················································································································

  let mergerBoardViewDisplayFrontLegendLines_property = EBPreferencesProperty_Bool (defaultValue: false, prefKey: Preferences_mergerBoardViewDisplayFrontLegendLines)

  //····················································································································

  final var mergerBoardViewDisplayFrontLegendLines : Bool {
    get { return self.mergerBoardViewDisplayFrontLegendLines_property.propval }
    set { self.mergerBoardViewDisplayFrontLegendLines_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayFrontLegendLines_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayFrontLegendLines_property.prop }

  //····················································································································
  //   Atomic property: mergerBoardViewDisplayBackLegendLines
  //····················································································································

  let mergerBoardViewDisplayBackLegendLines_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_mergerBoardViewDisplayBackLegendLines)

  //····················································································································

  final var mergerBoardViewDisplayBackLegendLines : Bool {
    get { return self.mergerBoardViewDisplayBackLegendLines_property.propval }
    set { self.mergerBoardViewDisplayBackLegendLines_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerBoardViewDisplayBackLegendLines_property_selection : EBSelection <Bool> { return self.mergerBoardViewDisplayBackLegendLines_property.prop }

  //····················································································································
  //   Atomic property: mergerColorHoles
  //····················································································································

  let mergerColorHoles_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.white, prefKey: Preferences_mergerColorHoles)

  //····················································································································

  final var mergerColorHoles : NSColor {
    get { return self.mergerColorHoles_property.propval }
    set { self.mergerColorHoles_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorHoles_property_selection : EBSelection <NSColor> { return self.mergerColorHoles_property.prop }

  //····················································································································
  //   Atomic property: mergerColorVias
  //····················································································································

  let mergerColorVias_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_mergerColorVias)

  //····················································································································

  final var mergerColorVias : NSColor {
    get { return self.mergerColorVias_property.propval }
    set { self.mergerColorVias_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorVias_property_selection : EBSelection <NSColor> { return self.mergerColorVias_property.prop }

  //····················································································································
  //   Atomic property: mergerColorFrontPads
  //····················································································································

  let mergerColorFrontPads_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontPads)

  //····················································································································

  final var mergerColorFrontPads : NSColor {
    get { return self.mergerColorFrontPads_property.propval }
    set { self.mergerColorFrontPads_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorFrontPads_property_selection : EBSelection <NSColor> { return self.mergerColorFrontPads_property.prop }

  //····················································································································
  //   Atomic property: mergerColorBoardLimits
  //····················································································································

  let mergerColorBoardLimits_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorBoardLimits)

  //····················································································································

  final var mergerColorBoardLimits : NSColor {
    get { return self.mergerColorBoardLimits_property.propval }
    set { self.mergerColorBoardLimits_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorBoardLimits_property_selection : EBSelection <NSColor> { return self.mergerColorBoardLimits_property.prop }

  //····················································································································
  //   Atomic property: mergerColorInternalBoardsLimits
  //····················································································································

  let mergerColorInternalBoardsLimits_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.yellow, prefKey: Preferences_mergerColorInternalBoardsLimits)

  //····················································································································

  final var mergerColorInternalBoardsLimits : NSColor {
    get { return self.mergerColorInternalBoardsLimits_property.propval }
    set { self.mergerColorInternalBoardsLimits_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorInternalBoardsLimits_property_selection : EBSelection <NSColor> { return self.mergerColorInternalBoardsLimits_property.prop }

  //····················································································································
  //   Atomic property: mergerColorFrontComponentNames
  //····················································································································

  let mergerColorFrontComponentNames_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontComponentNames)

  //····················································································································

  final var mergerColorFrontComponentNames : NSColor {
    get { return self.mergerColorFrontComponentNames_property.propval }
    set { self.mergerColorFrontComponentNames_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorFrontComponentNames_property_selection : EBSelection <NSColor> { return self.mergerColorFrontComponentNames_property.prop }

  //····················································································································
  //   Atomic property: mergerColorFrontComponentValues
  //····················································································································

  let mergerColorFrontComponentValues_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontComponentValues)

  //····················································································································

  final var mergerColorFrontComponentValues : NSColor {
    get { return self.mergerColorFrontComponentValues_property.propval }
    set { self.mergerColorFrontComponentValues_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorFrontComponentValues_property_selection : EBSelection <NSColor> { return self.mergerColorFrontComponentValues_property.prop }

  //····················································································································
  //   Atomic property: mergerColorFrontPackages
  //····················································································································

  let mergerColorFrontPackages_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontPackages)

  //····················································································································

  final var mergerColorFrontPackages : NSColor {
    get { return self.mergerColorFrontPackages_property.propval }
    set { self.mergerColorFrontPackages_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorFrontPackages_property_selection : EBSelection <NSColor> { return self.mergerColorFrontPackages_property.prop }

  //····················································································································
  //   Atomic property: mergerColorFrontLegendTexts
  //····················································································································

  let mergerColorFrontLegendTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.brown, prefKey: Preferences_mergerColorFrontLegendTexts)

  //····················································································································

  final var mergerColorFrontLegendTexts : NSColor {
    get { return self.mergerColorFrontLegendTexts_property.propval }
    set { self.mergerColorFrontLegendTexts_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorFrontLegendTexts_property_selection : EBSelection <NSColor> { return self.mergerColorFrontLegendTexts_property.prop }

  //····················································································································
  //   Atomic property: mergerColorFrontTracks
  //····················································································································

  let mergerColorFrontTracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_mergerColorFrontTracks)

  //····················································································································

  final var mergerColorFrontTracks : NSColor {
    get { return self.mergerColorFrontTracks_property.propval }
    set { self.mergerColorFrontTracks_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorFrontTracks_property_selection : EBSelection <NSColor> { return self.mergerColorFrontTracks_property.prop }

  //····················································································································
  //   Atomic property: mergerColorFrontLayoutTexts
  //····················································································································

  let mergerColorFrontLayoutTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.blue, prefKey: Preferences_mergerColorFrontLayoutTexts)

  //····················································································································

  final var mergerColorFrontLayoutTexts : NSColor {
    get { return self.mergerColorFrontLayoutTexts_property.propval }
    set { self.mergerColorFrontLayoutTexts_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorFrontLayoutTexts_property_selection : EBSelection <NSColor> { return self.mergerColorFrontLayoutTexts_property.prop }

  //····················································································································
  //   Atomic property: mergerColorBackPads
  //····················································································································

  let mergerColorBackPads_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.orange, prefKey: Preferences_mergerColorBackPads)

  //····················································································································

  final var mergerColorBackPads : NSColor {
    get { return self.mergerColorBackPads_property.propval }
    set { self.mergerColorBackPads_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorBackPads_property_selection : EBSelection <NSColor> { return self.mergerColorBackPads_property.prop }

  //····················································································································
  //   Atomic property: mergerColorBackComponentNames
  //····················································································································

  let mergerColorBackComponentNames_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackComponentNames)

  //····················································································································

  final var mergerColorBackComponentNames : NSColor {
    get { return self.mergerColorBackComponentNames_property.propval }
    set { self.mergerColorBackComponentNames_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorBackComponentNames_property_selection : EBSelection <NSColor> { return self.mergerColorBackComponentNames_property.prop }

  //····················································································································
  //   Atomic property: mergerColorBackComponentValues
  //····················································································································

  let mergerColorBackComponentValues_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackComponentValues)

  //····················································································································

  final var mergerColorBackComponentValues : NSColor {
    get { return self.mergerColorBackComponentValues_property.propval }
    set { self.mergerColorBackComponentValues_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorBackComponentValues_property_selection : EBSelection <NSColor> { return self.mergerColorBackComponentValues_property.prop }

  //····················································································································
  //   Atomic property: mergerColorBackLegendTexts
  //····················································································································

  let mergerColorBackLegendTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackLegendTexts)

  //····················································································································

  final var mergerColorBackLegendTexts : NSColor {
    get { return self.mergerColorBackLegendTexts_property.propval }
    set { self.mergerColorBackLegendTexts_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorBackLegendTexts_property_selection : EBSelection <NSColor> { return self.mergerColorBackLegendTexts_property.prop }

  //····················································································································
  //   Atomic property: mergerColorBackPackages
  //····················································································································

  let mergerColorBackPackages_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorBackPackages)

  //····················································································································

  final var mergerColorBackPackages : NSColor {
    get { return self.mergerColorBackPackages_property.propval }
    set { self.mergerColorBackPackages_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorBackPackages_property_selection : EBSelection <NSColor> { return self.mergerColorBackPackages_property.prop }

  //····················································································································
  //   Atomic property: mergerColorBackTracks
  //····················································································································

  let mergerColorBackTracks_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackTracks)

  //····················································································································

  final var mergerColorBackTracks : NSColor {
    get { return self.mergerColorBackTracks_property.propval }
    set { self.mergerColorBackTracks_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorBackTracks_property_selection : EBSelection <NSColor> { return self.mergerColorBackTracks_property.prop }

  //····················································································································
  //   Atomic property: mergerColorBackLayoutTexts
  //····················································································································

  let mergerColorBackLayoutTexts_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackLayoutTexts)

  //····················································································································

  final var mergerColorBackLayoutTexts : NSColor {
    get { return self.mergerColorBackLayoutTexts_property.propval }
    set { self.mergerColorBackLayoutTexts_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorBackLayoutTexts_property_selection : EBSelection <NSColor> { return self.mergerColorBackLayoutTexts_property.prop }

  //····················································································································
  //   Atomic property: mergerColorFrontLegendLines
  //····················································································································

  let mergerColorFrontLegendLines_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.gray, prefKey: Preferences_mergerColorFrontLegendLines)

  //····················································································································

  final var mergerColorFrontLegendLines : NSColor {
    get { return self.mergerColorFrontLegendLines_property.propval }
    set { self.mergerColorFrontLegendLines_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorFrontLegendLines_property_selection : EBSelection <NSColor> { return self.mergerColorFrontLegendLines_property.prop }

  //····················································································································
  //   Atomic property: mergerColorBackLegendLines
  //····················································································································

  let mergerColorBackLegendLines_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.green, prefKey: Preferences_mergerColorBackLegendLines)

  //····················································································································

  final var mergerColorBackLegendLines : NSColor {
    get { return self.mergerColorBackLegendLines_property.propval }
    set { self.mergerColorBackLegendLines_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorBackLegendLines_property_selection : EBSelection <NSColor> { return self.mergerColorBackLegendLines_property.prop }

  //····················································································································
  //   Atomic property: mergerColorBackground
  //····················································································································

  let mergerColorBackground_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.lightGray, prefKey: Preferences_mergerColorBackground)

  //····················································································································

  final var mergerColorBackground : NSColor {
    get { return self.mergerColorBackground_property.propval }
    set { self.mergerColorBackground_property.setProp (newValue) }
  }

  //····················································································································

  final var mergerColorBackground_property_selection : EBSelection <NSColor> { return self.mergerColorBackground_property.prop }

  //····················································································································
  //   Atomic property: errorMessageColor
  //····················································································································

  let errorMessageColor_property = EBPreferencesProperty_NSColor (defaultValue: NSColor.red, prefKey: Preferences_errorMessageColor)

  //····················································································································

  final var errorMessageColor : NSColor {
    get { return self.errorMessageColor_property.propval }
    set { self.errorMessageColor_property.setProp (newValue) }
  }

  //····················································································································

  final var errorMessageColor_property_selection : EBSelection <NSColor> { return self.errorMessageColor_property.prop }

  //····················································································································
  //   Atomic property: hiliteWidthMultipliedByTen
  //····················································································································

  let hiliteWidthMultipliedByTen_property = EBPreferencesProperty_Int (defaultValue: 15, prefKey: Preferences_hiliteWidthMultipliedByTen)

  //····················································································································

  final var hiliteWidthMultipliedByTen : Int {
    get { return self.hiliteWidthMultipliedByTen_property.propval }
    set { self.hiliteWidthMultipliedByTen_property.setProp (newValue) }
  }

  //····················································································································

  final var hiliteWidthMultipliedByTen_property_selection : EBSelection <Int> { return self.hiliteWidthMultipliedByTen_property.prop }

  //····················································································································
  //   Atomic property: usesUserLibrary
  //····················································································································

  let usesUserLibrary_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_usesUserLibrary)

  //····················································································································

  final var usesUserLibrary : Bool {
    get { return self.usesUserLibrary_property.propval }
    set { self.usesUserLibrary_property.setProp (newValue) }
  }

  //····················································································································

  final var usesUserLibrary_property_selection : EBSelection <Bool> { return self.usesUserLibrary_property.prop }

  //····················································································································
  //   To many property: additionnalLibraryArray
  //····················································································································

  let additionnalLibraryArray_property = PreferencesArrayOf_CanariLibraryEntry (prefKey: Preferences_additionnalLibraryArray)

  //····················································································································

  var additionnalLibraryArray_property_selection : EBSelection < [CanariLibraryEntry] > {
    return self.additionnalLibraryArray_property.prop
  }

  //····················································································································

  var additionnalLibraryArray : [CanariLibraryEntry] {
    get { return self.additionnalLibraryArray_property.propval }
    set { self.additionnalLibraryArray_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: pinNameFont
  //····················································································································

  let pinNameFont_property = EBPreferencesProperty_NSFont (defaultValue: NSFont.systemFont (ofSize: 6.0), prefKey: Preferences_pinNameFont)

  //····················································································································

  final var pinNameFont : NSFont {
    get { return self.pinNameFont_property.propval }
    set { self.pinNameFont_property.setProp (newValue) }
  }

  //····················································································································

  final var pinNameFont_property_selection : EBSelection <NSFont> { return self.pinNameFont_property.prop }

  //····················································································································
  //   Atomic property: displayPackageFrontSidePads
  //····················································································································

  let displayPackageFrontSidePads_property = EBPreferencesProperty_Bool (defaultValue: true, prefKey: Preferences_displayPackageFrontSidePads)

  //····················································································································

  final var displayPackageFrontSidePads : Bool {
    get { return self.displayPackageFrontSidePads_property.propval }
    set { self.displayPackageFrontSidePads_property.setProp (newValue) }
  }

  //····················································································································

  final var displayPackageFrontSidePads_property_selection : EBSelection <Bool> { return self.displayPackageFrontSidePads_property.prop }

  //····················································································································
  //   Atomic property: sampleString
  //····················································································································

  let sampleString_property = EBPreferencesProperty_String (defaultValue: "The quick brown fox jumps over the lazy dog", prefKey: Preferences_sampleString)

  //····················································································································

  final var sampleString : String {
    get { return self.sampleString_property.propval }
    set { self.sampleString_property.setProp (newValue) }
  }

  //····················································································································

  final var sampleString_property_selection : EBSelection <String> { return self.sampleString_property.prop }

  //····················································································································
  //   Atomic property: sampleStringSize
  //····················································································································

  let sampleStringSize_property = EBPreferencesProperty_Double (defaultValue: 24, prefKey: Preferences_sampleStringSize)

  //····················································································································

  final var sampleStringSize : Double {
    get { return self.sampleStringSize_property.propval }
    set { self.sampleStringSize_property.setProp (newValue) }
  }

  //····················································································································

  final var sampleStringSize_property_selection : EBSelection <Double> { return self.sampleStringSize_property.prop }

  //····················································································································
  //   Atomic property: mLastSystemLibraryCheckTime
  //····················································································································

  let mLastSystemLibraryCheckTime_property = EBPreferencesProperty_Date (defaultValue: Date.distantPast, prefKey: Preferences_mLastSystemLibraryCheckTime)

  //····················································································································

  final var mLastSystemLibraryCheckTime : Date {
    get { return self.mLastSystemLibraryCheckTime_property.propval }
    set { self.mLastSystemLibraryCheckTime_property.setProp (newValue) }
  }

  //····················································································································

  final var mLastSystemLibraryCheckTime_property_selection : EBSelection <Date> { return self.mLastSystemLibraryCheckTime_property.prop }

  //····················································································································
  //   Array controller: additionnalLibraryArrayController
  //····················································································································

  var additionnalLibraryArrayController = Controller_Preferences_additionnalLibraryArrayController ()

  //····················································································································
  //   Transient property: mValueRevealInFinder_packages
  //····················································································································

  let mValueRevealInFinder_packages_property = EBTransientProperty_CanariMenuItemListClass ()

  //····················································································································

  var mValueRevealInFinder_packages_property_selection : EBSelection <CanariMenuItemListClass> {
    return self.mValueRevealInFinder_packages_property.prop
  }

  //····················································································································

  var mValueRevealInFinder_packages : CanariMenuItemListClass? {
    switch self.mValueRevealInFinder_packages_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mValueRevealInFinder_devices
  //····················································································································

  let mValueRevealInFinder_devices_property = EBTransientProperty_CanariMenuItemListClass ()

  //····················································································································

  var mValueRevealInFinder_devices_property_selection : EBSelection <CanariMenuItemListClass> {
    return self.mValueRevealInFinder_devices_property.prop
  }

  //····················································································································

  var mValueRevealInFinder_devices : CanariMenuItemListClass? {
    switch self.mValueRevealInFinder_devices_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mValueRevealInFinder_fonts
  //····················································································································

  let mValueRevealInFinder_fonts_property = EBTransientProperty_CanariMenuItemListClass ()

  //····················································································································

  var mValueRevealInFinder_fonts_property_selection : EBSelection <CanariMenuItemListClass> {
    return self.mValueRevealInFinder_fonts_property.prop
  }

  //····················································································································

  var mValueRevealInFinder_fonts : CanariMenuItemListClass? {
    switch self.mValueRevealInFinder_fonts_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mValueRevealInFinder_artworks
  //····················································································································

  let mValueRevealInFinder_artworks_property = EBTransientProperty_CanariMenuItemListClass ()

  //····················································································································

  var mValueRevealInFinder_artworks_property_selection : EBSelection <CanariMenuItemListClass> {
    return self.mValueRevealInFinder_artworks_property.prop
  }

  //····················································································································

  var mValueRevealInFinder_artworks : CanariMenuItemListClass? {
    switch self.mValueRevealInFinder_artworks_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mValueRevealInFinder_symbols
  //····················································································································

  let mValueRevealInFinder_symbols_property = EBTransientProperty_CanariMenuItemListClass ()

  //····················································································································

  var mValueRevealInFinder_symbols_property_selection : EBSelection <CanariMenuItemListClass> {
    return self.mValueRevealInFinder_symbols_property.prop
  }

  //····················································································································

  var mValueRevealInFinder_symbols : CanariMenuItemListClass? {
    switch self.mValueRevealInFinder_symbols_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddLibraryEntryButton : EBButton? = nil
  @IBOutlet var mAdditionnalLibraryArrayTableView : EBTableView? = nil
  @IBOutlet var mBoardBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideLayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideLegendColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideRestrictRectangleColorWell : EBColorWell? = nil
  @IBOutlet var mBoardClearanceColorWell : EBColorWell? = nil
  @IBOutlet var mBoardDotColorGridColorWell : EBColorWell? = nil
  @IBOutlet var mBoardDrawErrorBackgroundCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardDrawWarningBackgroundCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardErrorBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBoardLimitsColorWell : EBColorWell? = nil
  @IBOutlet var mBoardLineColorGridColorWell : EBColorWell? = nil
  @IBOutlet var mBoardPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mBoardPadFontButton : EBFontButton? = nil
  @IBOutlet var mBoardPadNumberColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideLayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideLegendColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideRestrictRectangleColorWell : EBColorWell? = nil
  @IBOutlet var mBoardWarningBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBottomSidePadColorDorDeviveColorWell : EBColorWell? = nil
  @IBOutlet var mBottomSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mCancelButtonInLibraryUpdateWindow : EBButton? = nil
  @IBOutlet var mCheckForLibraryUpdatesButton : NSButton? = nil
  @IBOutlet var mCheckForSystemLibraryAtStartUpSwitch : EBSwitch? = nil
  @IBOutlet var mCheckLibraryAction : EBButton? = nil
  @IBOutlet var mCheckLibraryResultTextView : NSTextView? = nil
  @IBOutlet var mCheckingForLibraryUpdateProgressIndicator : EBProgressIndicator? = nil
  @IBOutlet var mCheckingForLibraryUpdateWindow : EBWindow? = nil
  @IBOutlet var mConnectionColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mCrossColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mDimensionFontButton : EBFontButton? = nil
  @IBOutlet var mDotColorGridForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mDotColorOfPackageGridColorWell : EBColorWell? = nil
  @IBOutlet var mEditionTransparencySlider : EBSlider? = nil
  @IBOutlet var mEditionTransparencyTextField : EBDoubleField? = nil
  @IBOutlet var mErrorMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var mInformativeTextInLibraryUpdateWindow : EBTextField? = nil
  @IBOutlet var mLibraryRepositoryCommitButton : NSButton? = nil
  @IBOutlet var mLibraryRepositoryCurrentReleaseTextField : NSTextField? = nil
  @IBOutlet var mLibraryRepositoryLoadCurrentReleaseButton : NSButton? = nil
  @IBOutlet var mLibraryRepositoryLogTextView : NSTextView? = nil
  @IBOutlet var mLibraryRepositoryStatusButton : NSButton? = nil
  @IBOutlet var mLibraryRepositoryTextField : NSTextField? = nil
  @IBOutlet var mLibraryRevisionListScrollView : NSScrollView? = nil
  @IBOutlet var mLibraryRevisionListTableView : NSTableView? = nil
  @IBOutlet var mLibraryUpdateLogTextView : NSTextView? = nil
  @IBOutlet var mLibraryUpdateWindow : EBWindow? = nil
  @IBOutlet var mLibraryUploadWindow : EBWindow? = nil
  @IBOutlet var mLineColorGridForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mLineColorOfPackageGridColorWell : EBColorWell? = nil
  @IBOutlet var mLineColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mMenuRevealInFinder_artworks : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_devices : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_fonts : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_packages : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_symbols : CanariMenu? = nil
  @IBOutlet var mPackageBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mPackageColorColorWell : EBColorWell? = nil
  @IBOutlet var mPackageColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDimensionColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDrawingWidthMultipliedByTenForDevicePopupButton : EBPopUpButton? = nil
  @IBOutlet var mPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mPackageGuideColorWell : EBColorWell? = nil
  @IBOutlet var mPackageNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPadFontButton : EBFontButton? = nil
  @IBOutlet var mPadNumberColorColorWell : EBColorWell? = nil
  @IBOutlet var mPadNumberColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mPadNumberFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPadZoneColorColorWell : EBColorWell? = nil
  @IBOutlet var mPinNameColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mPinNameFontButton : EBFontButton? = nil
  @IBOutlet var mPinNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPinNameFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mPinNumberColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mPinNumberFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mPrefsWindow : EBWindow? = nil
  @IBOutlet var mProgressIndicatorInLibraryUpdateWindow : EBProgressIndicator? = nil
  @IBOutlet var mRemoveLibraryEntryButton : EBButton? = nil
  @IBOutlet var mRevealInFinderLibraryInUserApplicationSupportButton : EBButton? = nil
  @IBOutlet var mSULastCheckTimeTextField : NSTextField? = nil
  @IBOutlet var mSampleStringField : EBTextField? = nil
  @IBOutlet var mSampleStringSizeField : EBDoubleField? = nil
  @IBOutlet var mSelectionHiliteColorColorWell : EBColorWell? = nil
  @IBOutlet var mSetLibraryRepositoryButton : NSButton? = nil
  @IBOutlet var mSetUserAndPasswordButton : NSButton? = nil
  @IBOutlet var mShowGerberDrawingFlowCheckbox : EBSwitch? = nil
  @IBOutlet var mShowGerberDrawingIndexesCheckbox : EBSwitch? = nil
  @IBOutlet var mSuccessMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageBackgroundColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageGridDotColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageLineDotColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenForDevicePopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mTableViewInLibraryUpdateWindow : EBTableView? = nil
  @IBOutlet var mToolbar : CanariToolbar? = nil
  @IBOutlet var mTopSidePadColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mTopSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mUnplacedComponentsColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mUpDateButtonInLibraryUpdateWindow : EBButton? = nil
  @IBOutlet var mUpDateLibraryMenuItemInCanariMenu : EBMenuItem? = nil
  @IBOutlet var mUseLibraryInUserApplicationSupportPathCheckBox : EBSwitch? = nil
  @IBOutlet var mUserAndPasswordTextField : NSTextField? = nil
  @IBOutlet var mWarningMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var nextSystemLibraryCheckDate : CanariDateObserverField? = nil
  @IBOutlet var selectionHilitePopupButton : EBPopUpButton? = nil
  @IBOutlet var systemLibraryCheckTimeIntervalPopupButton : EBPopUpButton? = nil
  @IBOutlet var systemLibraryCheckTimeIntervalTitleTextField : NSTextField? = nil

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  private var mController_nextSystemLibraryCheckDate_hidden : MultipleBindingController_hidden?
  private var mController_systemLibraryCheckTimeIntervalPopupButton_hidden : MultipleBindingController_hidden?
  private var mController_systemLibraryCheckTimeIntervalTitleTextField_hidden : MultipleBindingController_hidden?
  private var mController_mRemoveLibraryEntryButton_enabled : MultipleBindingController_enabled?

  //····················································································································
  //    Undo Manager
  //····················································································································

  private var mUndoManager = EBUndoManager ()

  //····················································································································

  var ebUndoManager : EBUndoManager { return self.mUndoManager }
 
  //····················································································································
  // The preferences window should register this object as delegate (do it in Interface Builder)

  @objc func windowWillReturnUndoManager (_ window: NSWindow) -> UndoManager? {
    return self.ebUndoManager
  }

  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    g_Preferences = self ;
  //--- Read from preferences
  //--- Atomic property: warningMessageColor
    self.warningMessageColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: successMessageColor
    self.successMessageColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectionHiliteColor
    self.selectionHiliteColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: symbolColor
    self.symbolColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: crossColorOfSymbolGrid
    self.crossColorOfSymbolGrid_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: lineColorOfSymbolGrid
    self.lineColorOfSymbolGrid_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: symbolBackgroundColor
    self.symbolBackgroundColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: symbolDrawingWidthMultipliedByTen
    self.symbolDrawingWidthMultipliedByTen_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: crossColorOfPackageGrid
    self.crossColorOfPackageGrid_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: lineColorOfPackageGrid
    self.lineColorOfPackageGrid_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: packageBackgroundColor
    self.packageBackgroundColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: packageColor
    self.packageColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: frontSidePadColor
    self.frontSidePadColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: backSidePadColor
    self.backSidePadColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: displayPackageBackSidePads
    self.displayPackageBackSidePads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padNumberColor
    self.padNumberColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padNumberFont
    self.padNumberFont_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: showPadNumber
    self.showPadNumber_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: packageGuideColor
    self.packageGuideColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: packageDimensionColor
    self.packageDimensionColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: dimensionFont
    self.dimensionFont_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padZoneColor
    self.padZoneColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padZoneFont
    self.padZoneFont_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: packageDrawingWidthMultipliedByTen
    self.packageDrawingWidthMultipliedByTen_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolAndPackageGridDotColorForDevice
    self.mSymbolAndPackageGridDotColorForDevice_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolAndPackageGridLineColorForDevice
    self.mSymbolAndPackageGridLineColorForDevice_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolAndPackageBackgroundColorForDevice
    self.mSymbolAndPackageBackgroundColorForDevice_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPackageColorForDevice
    self.mPackageColorForDevice_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mFrontSidePadColorForDevice
    self.mFrontSidePadColorForDevice_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBottomSidePadColorForDevice
    self.mBottomSidePadColorForDevice_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPadNumberColorForDevice
    self.mPadNumberColorForDevice_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPackageNameFontForDevice
    self.mPackageNameFontForDevice_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPadNumberFontForDevice
    self.mPadNumberFontForDevice_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolColorForDevice
    self.mSymbolColorForDevice_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolNameFontForDevice
    self.mSymbolNameFontForDevice_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPinNameFontForDevice
    self.mPinNameFontForDevice_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: symbolDrawingWidthForDeviceMultipliedByTen
    self.symbolDrawingWidthForDeviceMultipliedByTen_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: packageDrawingWidthForDeviceMultipliedByTen
    self.packageDrawingWidthForDeviceMultipliedByTen_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: schematicBackColor
    self.schematicBackColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: dotColorGridForSchematic
    self.dotColorGridForSchematic_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: lineColorGridForSchematic
    self.lineColorGridForSchematic_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: symbolColorForUnplacedComponentsForSchematic
    self.symbolColorForUnplacedComponentsForSchematic_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: symbolColorForSchematic
    self.symbolColorForSchematic_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: pinNameFontForSchematic
    self.pinNameFontForSchematic_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: pinNameColorForSchematic
    self.pinNameColorForSchematic_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: pinNumberFontForSchematic
    self.pinNumberFontForSchematic_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: pinNumberColorForSchematic
    self.pinNumberColorForSchematic_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: connectionColorForSchematic
    self.connectionColorForSchematic_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: symbolDrawingWidthMultipliedByTenForSchematic
    self.symbolDrawingWidthMultipliedByTenForSchematic_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: crossColorGridForBoard
    self.crossColorGridForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: lineColorGridForBoard
    self.lineColorGridForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardBackgroundColorForBoard
    self.boardBackgroundColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: errorBackgroundColorForBoard
    self.errorBackgroundColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawErrorBackgroundForBoard
    self.drawErrorBackgroundForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: warningBackgroundColorForBoard
    self.warningBackgroundColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawWarningBackgroundForBoard
    self.drawWarningBackgroundForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardLimitsColorForBoard
    self.boardLimitsColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: boardClearanceColorForBoard
    self.boardClearanceColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: displayFrontRestrictRectangles
    self.displayFrontRestrictRectangles_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: frontSideRestrictRectangleColorForBoard
    self.frontSideRestrictRectangleColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: displayBackRestrictRectangles
    self.displayBackRestrictRectangles_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: backSideRestrictRectangleColorForBoard
    self.backSideRestrictRectangleColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: displayFrontLegendForBoard
    self.displayFrontLegendForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: frontSideLegendColorForBoard
    self.frontSideLegendColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: displayFrontLayoutForBoard
    self.displayFrontLayoutForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: frontSideLayoutColorForBoard
    self.frontSideLayoutColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: displayBackLayoutForBoard
    self.displayBackLayoutForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: backSideLayoutColorForBoard
    self.backSideLayoutColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: displayBackLegendForBoard
    self.displayBackLegendForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: backSideLegendColorForBoard
    self.backSideLegendColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: displayFrontPadsForBoard
    self.displayFrontPadsForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: frontSidePadColorForBoard
    self.frontSidePadColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: displayBackPadsForBoard
    self.displayBackPadsForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: backSidePadColorForBoard
    self.backSidePadColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: displayPadNumbersForBoard
    self.displayPadNumbersForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padNumberFontForBoard
    self.padNumberFontForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padNumberColorForBoard
    self.padNumberColorForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: packageDrawingWidthMultpliedByTenForBoard
    self.packageDrawingWidthMultpliedByTenForBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: showGerberDrawingFlow
    self.showGerberDrawingFlow_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: showGerberDrawingIndexes
    self.showGerberDrawingIndexes_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: fontEditionTransparency
    self.fontEditionTransparency_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: checkForSystemLibraryAtStartUp
    self.checkForSystemLibraryAtStartUp_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: systemLibraryCheckTimeInterval
    self.systemLibraryCheckTimeInterval_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewHorizontalFlip
    self.mergerModelViewHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewVerticalFlip
    self.mergerModelViewVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayHoles
    self.mergerModelViewDisplayHoles_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayVias
    self.mergerModelViewDisplayVias_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayFrontPads
    self.mergerModelViewDisplayFrontPads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayInternalBoardsLimits
    self.mergerModelViewDisplayInternalBoardsLimits_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayBoardLimits
    self.mergerModelViewDisplayBoardLimits_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayFrontComponentNames
    self.mergerModelViewDisplayFrontComponentNames_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayFrontComponentValues
    self.mergerModelViewDisplayFrontComponentValues_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayFrontPackages
    self.mergerModelViewDisplayFrontPackages_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayFrontLegendTexts
    self.mergerModelViewDisplayFrontLegendTexts_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayFrontTracks
    self.mergerModelViewDisplayFrontTracks_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayFrontLayoutTexts
    self.mergerModelViewDisplayFrontLayoutTexts_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayBackPads
    self.mergerModelViewDisplayBackPads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayBackComponentNames
    self.mergerModelViewDisplayBackComponentNames_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayBackComponentValues
    self.mergerModelViewDisplayBackComponentValues_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayBackLegendTexts
    self.mergerModelViewDisplayBackLegendTexts_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayBackPackages
    self.mergerModelViewDisplayBackPackages_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayBackTracks
    self.mergerModelViewDisplayBackTracks_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayBackLayoutTexts
    self.mergerModelViewDisplayBackLayoutTexts_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayFrontLegendLines
    self.mergerModelViewDisplayFrontLegendLines_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerModelViewDisplayBackLegendLines
    self.mergerModelViewDisplayBackLegendLines_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewHorizontalFlip
    self.mergerBoardViewHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewVerticalFlip
    self.mergerBoardViewVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayHoles
    self.mergerBoardViewDisplayHoles_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayVias
    self.mergerBoardViewDisplayVias_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayFrontPads
    self.mergerBoardViewDisplayFrontPads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayInternalBoardsLimits
    self.mergerBoardViewDisplayInternalBoardsLimits_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayBoardLimits
    self.mergerBoardViewDisplayBoardLimits_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayFrontComponentNames
    self.mergerBoardViewDisplayFrontComponentNames_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayFrontComponentValues
    self.mergerBoardViewDisplayFrontComponentValues_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayFrontPackages
    self.mergerBoardViewDisplayFrontPackages_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayFrontLegendTexts
    self.mergerBoardViewDisplayFrontLegendTexts_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayFrontTracks
    self.mergerBoardViewDisplayFrontTracks_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayFrontLayoutTexts
    self.mergerBoardViewDisplayFrontLayoutTexts_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayBackPads
    self.mergerBoardViewDisplayBackPads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayBackComponentNames
    self.mergerBoardViewDisplayBackComponentNames_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayBackComponentValues
    self.mergerBoardViewDisplayBackComponentValues_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayBackLegendTexts
    self.mergerBoardViewDisplayBackLegendTexts_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayBackPackages
    self.mergerBoardViewDisplayBackPackages_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayBackTracks
    self.mergerBoardViewDisplayBackTracks_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayBackLayoutTexts
    self.mergerBoardViewDisplayBackLayoutTexts_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayFrontLegendLines
    self.mergerBoardViewDisplayFrontLegendLines_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerBoardViewDisplayBackLegendLines
    self.mergerBoardViewDisplayBackLegendLines_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorHoles
    self.mergerColorHoles_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorVias
    self.mergerColorVias_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorFrontPads
    self.mergerColorFrontPads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorBoardLimits
    self.mergerColorBoardLimits_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorInternalBoardsLimits
    self.mergerColorInternalBoardsLimits_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorFrontComponentNames
    self.mergerColorFrontComponentNames_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorFrontComponentValues
    self.mergerColorFrontComponentValues_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorFrontPackages
    self.mergerColorFrontPackages_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorFrontLegendTexts
    self.mergerColorFrontLegendTexts_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorFrontTracks
    self.mergerColorFrontTracks_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorFrontLayoutTexts
    self.mergerColorFrontLayoutTexts_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorBackPads
    self.mergerColorBackPads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorBackComponentNames
    self.mergerColorBackComponentNames_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorBackComponentValues
    self.mergerColorBackComponentValues_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorBackLegendTexts
    self.mergerColorBackLegendTexts_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorBackPackages
    self.mergerColorBackPackages_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorBackTracks
    self.mergerColorBackTracks_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorBackLayoutTexts
    self.mergerColorBackLayoutTexts_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorFrontLegendLines
    self.mergerColorFrontLegendLines_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorBackLegendLines
    self.mergerColorBackLegendLines_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mergerColorBackground
    self.mergerColorBackground_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: errorMessageColor
    self.errorMessageColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: hiliteWidthMultipliedByTen
    self.hiliteWidthMultipliedByTen_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: usesUserLibrary
    self.usesUserLibrary_property.ebUndoManager = self.ebUndoManager
  //--- To many property: additionnalLibraryArray (no option)
    self.additionnalLibraryArray_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: pinNameFont
    self.pinNameFont_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: displayPackageFrontSidePads
    self.displayPackageFrontSidePads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: sampleString
    self.sampleString_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: sampleStringSize
    self.sampleStringSize_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mLastSystemLibraryCheckTime
    self.mLastSystemLibraryCheckTime_property.ebUndoManager = self.ebUndoManager
  //--- Array controller property: additionnalLibraryArrayController
    self.additionnalLibraryArrayController.bind_model (self.additionnalLibraryArray_property, self.ebUndoManager)
  //--- Atomic property: mValueRevealInFinder_packages
    self.mValueRevealInFinder_packages_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_packages (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_packages_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_packages_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_packages_property)
  //--- Atomic property: mValueRevealInFinder_devices
    self.mValueRevealInFinder_devices_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_devices (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_devices_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_devices_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_devices_property)
  //--- Atomic property: mValueRevealInFinder_fonts
    self.mValueRevealInFinder_fonts_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_fonts (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_fonts_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_fonts_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_fonts_property)
  //--- Atomic property: mValueRevealInFinder_artworks
    self.mValueRevealInFinder_artworks_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_artworks (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_artworks_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_artworks_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_artworks_property)
  //--- Atomic property: mValueRevealInFinder_symbols
    self.mValueRevealInFinder_symbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_Preferences_mValueRevealInFinder_symbols (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_symbols_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_symbols_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_symbols_property)
  //--- Notify application will terminate
    NotificationCenter.default.addObserver (self,
      selector:#selector(Preferences.applicationWillTerminateAction(_:)),
      name:NSApplication.willTerminateNotification,
      object:nil
    )
  //--- Extern functions
  }

  //····················································································································
  //    awakeFromNib
  //····················································································································

  override func awakeFromNib () {
    checkOutletConnection (self.mAddLibraryEntryButton, "mAddLibraryEntryButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mAdditionnalLibraryArrayTableView, "mAdditionnalLibraryArrayTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mBoardBackgroundColorWell, "mBoardBackgroundColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardBottomSideLayoutColorWell, "mBoardBottomSideLayoutColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardBottomSideLegendColorWell, "mBoardBottomSideLegendColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardBottomSidePadColorWell, "mBoardBottomSidePadColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardBottomSideRestrictRectangleColorWell, "mBoardBottomSideRestrictRectangleColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardClearanceColorWell, "mBoardClearanceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardDotColorGridColorWell, "mBoardDotColorGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardDrawErrorBackgroundCheckbox, "mBoardDrawErrorBackgroundCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardDrawWarningBackgroundCheckbox, "mBoardDrawWarningBackgroundCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mBoardErrorBackgroundColorWell, "mBoardErrorBackgroundColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardLimitsColorWell, "mBoardLimitsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardLineColorGridColorWell, "mBoardLineColorGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardPackageDrawingWidthMultipliedByTenPopupButton, "mBoardPackageDrawingWidthMultipliedByTenPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mBoardPadFontButton, "mBoardPadFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mBoardPadNumberColorWell, "mBoardPadNumberColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardTopSideLayoutColorWell, "mBoardTopSideLayoutColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardTopSideLegendColorWell, "mBoardTopSideLegendColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardTopSidePadColorWell, "mBoardTopSidePadColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardTopSideRestrictRectangleColorWell, "mBoardTopSideRestrictRectangleColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBoardWarningBackgroundColorWell, "mBoardWarningBackgroundColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBottomSidePadColorDorDeviveColorWell, "mBottomSidePadColorDorDeviveColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mBottomSidePadColorWell, "mBottomSidePadColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mCancelButtonInLibraryUpdateWindow, "mCancelButtonInLibraryUpdateWindow", EBButton.self, #file, #line)
    checkOutletConnection (self.mCheckForLibraryUpdatesButton, "mCheckForLibraryUpdatesButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mCheckForSystemLibraryAtStartUpSwitch, "mCheckForSystemLibraryAtStartUpSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mCheckLibraryAction, "mCheckLibraryAction", EBButton.self, #file, #line)
    checkOutletConnection (self.mCheckLibraryResultTextView, "mCheckLibraryResultTextView", NSTextView.self, #file, #line)
    checkOutletConnection (self.mCheckingForLibraryUpdateProgressIndicator, "mCheckingForLibraryUpdateProgressIndicator", EBProgressIndicator.self, #file, #line)
    checkOutletConnection (self.mCheckingForLibraryUpdateWindow, "mCheckingForLibraryUpdateWindow", EBWindow.self, #file, #line)
    checkOutletConnection (self.mConnectionColorForSchematicColorWell, "mConnectionColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mCrossColorOfSymbolGridColorWell, "mCrossColorOfSymbolGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mDimensionFontButton, "mDimensionFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mDotColorGridForSchematicColorWell, "mDotColorGridForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mDotColorOfPackageGridColorWell, "mDotColorOfPackageGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mEditionTransparencySlider, "mEditionTransparencySlider", EBSlider.self, #file, #line)
    checkOutletConnection (self.mEditionTransparencyTextField, "mEditionTransparencyTextField", EBDoubleField.self, #file, #line)
    checkOutletConnection (self.mErrorMessageColorColorWell, "mErrorMessageColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mInformativeTextInLibraryUpdateWindow, "mInformativeTextInLibraryUpdateWindow", EBTextField.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryCommitButton, "mLibraryRepositoryCommitButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryCurrentReleaseTextField, "mLibraryRepositoryCurrentReleaseTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryLoadCurrentReleaseButton, "mLibraryRepositoryLoadCurrentReleaseButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryLogTextView, "mLibraryRepositoryLogTextView", NSTextView.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryStatusButton, "mLibraryRepositoryStatusButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mLibraryRepositoryTextField, "mLibraryRepositoryTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mLibraryRevisionListScrollView, "mLibraryRevisionListScrollView", NSScrollView.self, #file, #line)
    checkOutletConnection (self.mLibraryRevisionListTableView, "mLibraryRevisionListTableView", NSTableView.self, #file, #line)
    checkOutletConnection (self.mLibraryUpdateLogTextView, "mLibraryUpdateLogTextView", NSTextView.self, #file, #line)
    checkOutletConnection (self.mLibraryUpdateWindow, "mLibraryUpdateWindow", EBWindow.self, #file, #line)
    checkOutletConnection (self.mLibraryUploadWindow, "mLibraryUploadWindow", EBWindow.self, #file, #line)
    checkOutletConnection (self.mLineColorGridForSchematicColorWell, "mLineColorGridForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mLineColorOfPackageGridColorWell, "mLineColorOfPackageGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mLineColorOfSymbolGridColorWell, "mLineColorOfSymbolGridColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_artworks, "mMenuRevealInFinder_artworks", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_devices, "mMenuRevealInFinder_devices", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_fonts, "mMenuRevealInFinder_fonts", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_packages, "mMenuRevealInFinder_packages", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mMenuRevealInFinder_symbols, "mMenuRevealInFinder_symbols", CanariMenu.self, #file, #line)
    checkOutletConnection (self.mPackageBackgroundColorColorWell, "mPackageBackgroundColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageColorColorWell, "mPackageColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageColorForDeviceColorWell, "mPackageColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageDimensionColorWell, "mPackageDimensionColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageDrawingWidthMultipliedByTenForDevicePopupButton, "mPackageDrawingWidthMultipliedByTenForDevicePopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mPackageDrawingWidthMultipliedByTenPopupButton, "mPackageDrawingWidthMultipliedByTenPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mPackageGuideColorWell, "mPackageGuideColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageNameFontForDeviceFontButton, "mPackageNameFontForDeviceFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPadFontButton, "mPadFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPadNumberColorColorWell, "mPadNumberColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPadNumberColorForDeviceColorWell, "mPadNumberColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPadNumberFontForDeviceFontButton, "mPadNumberFontForDeviceFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPadZoneColorColorWell, "mPadZoneColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPinNameColorForSchematicColorWell, "mPinNameColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPinNameFontButton, "mPinNameFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPinNameFontForDeviceFontButton, "mPinNameFontForDeviceFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPinNameFontForSchematicFontButton, "mPinNameFontForSchematicFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPinNumberColorForSchematicColorWell, "mPinNumberColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPinNumberFontForSchematicFontButton, "mPinNumberFontForSchematicFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mPrefsWindow, "mPrefsWindow", EBWindow.self, #file, #line)
    checkOutletConnection (self.mProgressIndicatorInLibraryUpdateWindow, "mProgressIndicatorInLibraryUpdateWindow", EBProgressIndicator.self, #file, #line)
    checkOutletConnection (self.mRemoveLibraryEntryButton, "mRemoveLibraryEntryButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRevealInFinderLibraryInUserApplicationSupportButton, "mRevealInFinderLibraryInUserApplicationSupportButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSULastCheckTimeTextField, "mSULastCheckTimeTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mSampleStringField, "mSampleStringField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mSampleStringSizeField, "mSampleStringSizeField", EBDoubleField.self, #file, #line)
    checkOutletConnection (self.mSelectionHiliteColorColorWell, "mSelectionHiliteColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSetLibraryRepositoryButton, "mSetLibraryRepositoryButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mSetUserAndPasswordButton, "mSetUserAndPasswordButton", NSButton.self, #file, #line)
    checkOutletConnection (self.mShowGerberDrawingFlowCheckbox, "mShowGerberDrawingFlowCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mShowGerberDrawingIndexesCheckbox, "mShowGerberDrawingIndexesCheckbox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mSuccessMessageColorColorWell, "mSuccessMessageColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolAndPackageBackgroundColorForDeviceColorWell, "mSymbolAndPackageBackgroundColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolAndPackageGridDotColorForDeviceColorWell, "mSymbolAndPackageGridDotColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolAndPackageLineDotColorForDeviceColorWell, "mSymbolAndPackageLineDotColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolBackgroundColorColorWell, "mSymbolBackgroundColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolColorColorWell, "mSymbolColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolColorForDeviceColorWell, "mSymbolColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolColorForSchematicColorWell, "mSymbolColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mSymbolDrawingWidthMultipliedByTenForDevicePopupButton, "mSymbolDrawingWidthMultipliedByTenForDevicePopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton, "mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSymbolDrawingWidthMultipliedByTenPopupButton, "mSymbolDrawingWidthMultipliedByTenPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mSymbolNameFontForDeviceFontButton, "mSymbolNameFontForDeviceFontButton", EBFontButton.self, #file, #line)
    checkOutletConnection (self.mTableViewInLibraryUpdateWindow, "mTableViewInLibraryUpdateWindow", EBTableView.self, #file, #line)
    checkOutletConnection (self.mToolbar, "mToolbar", CanariToolbar.self, #file, #line)
    checkOutletConnection (self.mTopSidePadColorForDeviceColorWell, "mTopSidePadColorForDeviceColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mTopSidePadColorWell, "mTopSidePadColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mUnplacedComponentsColorForSchematicColorWell, "mUnplacedComponentsColorForSchematicColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mUpDateButtonInLibraryUpdateWindow, "mUpDateButtonInLibraryUpdateWindow", EBButton.self, #file, #line)
    checkOutletConnection (self.mUpDateLibraryMenuItemInCanariMenu, "mUpDateLibraryMenuItemInCanariMenu", EBMenuItem.self, #file, #line)
    checkOutletConnection (self.mUseLibraryInUserApplicationSupportPathCheckBox, "mUseLibraryInUserApplicationSupportPathCheckBox", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mUserAndPasswordTextField, "mUserAndPasswordTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mWarningMessageColorColorWell, "mWarningMessageColorColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.nextSystemLibraryCheckDate, "nextSystemLibraryCheckDate", CanariDateObserverField.self, #file, #line)
    checkOutletConnection (self.selectionHilitePopupButton, "selectionHilitePopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.systemLibraryCheckTimeIntervalPopupButton, "systemLibraryCheckTimeIntervalPopupButton", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.systemLibraryCheckTimeIntervalTitleTextField, "systemLibraryCheckTimeIntervalTitleTextField", NSTextField.self, #file, #line)
  //--------------------------- Install bindings
    mErrorMessageColorColorWell?.bind_color (self.errorMessageColor_property, file: #file, line: #line, sendContinously:false)
    mWarningMessageColorColorWell?.bind_color (self.warningMessageColor_property, file: #file, line: #line, sendContinously:false)
    mSuccessMessageColorColorWell?.bind_color (self.successMessageColor_property, file: #file, line: #line, sendContinously:false)
    mSelectionHiliteColorColorWell?.bind_color (self.selectionHiliteColor_property, file: #file, line: #line, sendContinously:false)
    selectionHilitePopupButton?.bind_selectedTag (self.hiliteWidthMultipliedByTen_property, file: #file, line: #line)
    mMenuRevealInFinder_symbols?.bind_populateSubmenus (self.mValueRevealInFinder_symbols_property, file: #file, line: #line)
    mMenuRevealInFinder_packages?.bind_populateSubmenus (self.mValueRevealInFinder_packages_property, file: #file, line: #line)
    mMenuRevealInFinder_devices?.bind_populateSubmenus (self.mValueRevealInFinder_devices_property, file: #file, line: #line)
    mMenuRevealInFinder_fonts?.bind_populateSubmenus (self.mValueRevealInFinder_fonts_property, file: #file, line: #line)
    mMenuRevealInFinder_artworks?.bind_populateSubmenus (self.mValueRevealInFinder_artworks_property, file: #file, line: #line)
    mSymbolColorColorWell?.bind_color (self.symbolColor_property, file: #file, line: #line, sendContinously:false)
    mCrossColorOfSymbolGridColorWell?.bind_color (self.crossColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    mLineColorOfSymbolGridColorWell?.bind_color (self.lineColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    mSymbolBackgroundColorColorWell?.bind_color (self.symbolBackgroundColor_property, file: #file, line: #line, sendContinously:false)
    mSymbolDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (self.symbolDrawingWidthMultipliedByTen_property, file: #file, line: #line)
    mPinNameFontButton?.bind_fontValue (self.pinNameFont_property, file: #file, line: #line)
    mDotColorOfPackageGridColorWell?.bind_color (self.crossColorOfPackageGrid_property, file: #file, line: #line, sendContinously:false)
    mLineColorOfPackageGridColorWell?.bind_color (self.lineColorOfPackageGrid_property, file: #file, line: #line, sendContinously:false)
    mPackageBackgroundColorColorWell?.bind_color (self.packageBackgroundColor_property, file: #file, line: #line, sendContinously:false)
    mPackageColorColorWell?.bind_color (self.packageColor_property, file: #file, line: #line, sendContinously:false)
    mTopSidePadColorWell?.bind_color (self.frontSidePadColor_property, file: #file, line: #line, sendContinously:false)
    mBottomSidePadColorWell?.bind_color (self.backSidePadColor_property, file: #file, line: #line, sendContinously:false)
    mPadNumberColorColorWell?.bind_color (self.padNumberColor_property, file: #file, line: #line, sendContinously:false)
    mPadFontButton?.bind_fontValue (self.padNumberFont_property, file: #file, line: #line)
    mPackageGuideColorWell?.bind_color (self.packageGuideColor_property, file: #file, line: #line, sendContinously:false)
    mPackageDimensionColorWell?.bind_color (self.packageDimensionColor_property, file: #file, line: #line, sendContinously:false)
    mDimensionFontButton?.bind_fontValue (self.dimensionFont_property, file: #file, line: #line)
    mPadZoneColorColorWell?.bind_color (self.padZoneColor_property, file: #file, line: #line, sendContinously:false)
    mPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (self.packageDrawingWidthMultipliedByTen_property, file: #file, line: #line)
    mSymbolAndPackageGridDotColorForDeviceColorWell?.bind_color (self.mSymbolAndPackageGridDotColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mSymbolAndPackageLineDotColorForDeviceColorWell?.bind_color (self.mSymbolAndPackageGridLineColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mSymbolAndPackageBackgroundColorForDeviceColorWell?.bind_color (self.mSymbolAndPackageBackgroundColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mPackageColorForDeviceColorWell?.bind_color (self.mPackageColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mTopSidePadColorForDeviceColorWell?.bind_color (self.mFrontSidePadColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mBottomSidePadColorDorDeviveColorWell?.bind_color (self.mBottomSidePadColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mPadNumberColorForDeviceColorWell?.bind_color (self.mPadNumberColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mPackageNameFontForDeviceFontButton?.bind_fontValue (self.mPadNumberFontForDevice_property, file: #file, line: #line)
    mPadNumberFontForDeviceFontButton?.bind_fontValue (self.mPadNumberFontForDevice_property, file: #file, line: #line)
    mSymbolColorForDeviceColorWell?.bind_color (self.mSymbolColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mSymbolNameFontForDeviceFontButton?.bind_fontValue (self.mSymbolNameFontForDevice_property, file: #file, line: #line)
    mPinNameFontForDeviceFontButton?.bind_fontValue (self.mPinNameFontForDevice_property, file: #file, line: #line)
    mSymbolDrawingWidthMultipliedByTenForDevicePopupButton?.bind_selectedTag (self.symbolDrawingWidthForDeviceMultipliedByTen_property, file: #file, line: #line)
    mPackageDrawingWidthMultipliedByTenForDevicePopupButton?.bind_selectedTag (self.packageDrawingWidthForDeviceMultipliedByTen_property, file: #file, line: #line)
    mDotColorGridForSchematicColorWell?.bind_color (self.dotColorGridForSchematic_property, file: #file, line: #line, sendContinously:false)
    mLineColorGridForSchematicColorWell?.bind_color (self.lineColorGridForSchematic_property, file: #file, line: #line, sendContinously:false)
    mUnplacedComponentsColorForSchematicColorWell?.bind_color (self.symbolColorForUnplacedComponentsForSchematic_property, file: #file, line: #line, sendContinously:false)
    mSymbolColorForSchematicColorWell?.bind_color (self.symbolColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mPinNameFontForSchematicFontButton?.bind_fontValue (self.pinNameFontForSchematic_property, file: #file, line: #line)
    mPinNameColorForSchematicColorWell?.bind_color (self.pinNameColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mPinNumberFontForSchematicFontButton?.bind_fontValue (self.pinNumberFontForSchematic_property, file: #file, line: #line)
    mPinNumberColorForSchematicColorWell?.bind_color (self.pinNumberColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mConnectionColorForSchematicColorWell?.bind_color (self.connectionColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton?.bind_selectedTag (self.symbolDrawingWidthMultipliedByTenForSchematic_property, file: #file, line: #line)
    mBoardDotColorGridColorWell?.bind_color (self.crossColorGridForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardLineColorGridColorWell?.bind_color (self.lineColorGridForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBackgroundColorWell?.bind_color (self.boardBackgroundColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardErrorBackgroundColorWell?.bind_color (self.errorBackgroundColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardDrawErrorBackgroundCheckbox?.bind_value (self.drawErrorBackgroundForBoard_property, file: #file, line: #line)
    mBoardWarningBackgroundColorWell?.bind_color (self.warningBackgroundColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardDrawWarningBackgroundCheckbox?.bind_value (self.drawWarningBackgroundForBoard_property, file: #file, line: #line)
    mBoardLimitsColorWell?.bind_color (self.boardLimitsColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardClearanceColorWell?.bind_color (self.boardClearanceColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSideRestrictRectangleColorWell?.bind_color (self.frontSideRestrictRectangleColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideRestrictRectangleColorWell?.bind_color (self.backSideRestrictRectangleColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSideLegendColorWell?.bind_color (self.frontSideLegendColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSideLayoutColorWell?.bind_color (self.frontSideLayoutColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideLayoutColorWell?.bind_color (self.backSideLayoutColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideLegendColorWell?.bind_color (self.backSideLegendColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSidePadColorWell?.bind_color (self.frontSidePadColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSidePadColorWell?.bind_color (self.backSidePadColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardPadFontButton?.bind_fontValue (self.padNumberFontForBoard_property, file: #file, line: #line)
    mBoardPadNumberColorWell?.bind_color (self.padNumberColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (self.packageDrawingWidthMultpliedByTenForBoard_property, file: #file, line: #line)
    mSampleStringField?.bind_value (self.sampleString_property, file: #file, line: #line, sendContinously:true)
    mSampleStringSizeField?.bind_value (self.sampleStringSize_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    mShowGerberDrawingFlowCheckbox?.bind_value (self.showGerberDrawingFlow_property, file: #file, line: #line)
    mShowGerberDrawingIndexesCheckbox?.bind_value (self.showGerberDrawingIndexes_property, file: #file, line: #line)
    mEditionTransparencySlider?.bind_doubleValue (self.fontEditionTransparency_property, file: #file, line: #line, sendContinously:true)
    mEditionTransparencyTextField?.bind_value (self.fontEditionTransparency_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    mUseLibraryInUserApplicationSupportPathCheckBox?.bind_value (self.usesUserLibrary_property, file: #file, line: #line)
    mCheckForSystemLibraryAtStartUpSwitch?.bind_value (self.checkForSystemLibraryAtStartUp_property, file: #file, line: #line)
    nextSystemLibraryCheckDate?.bind_dateObserver (self.mLastSystemLibraryCheckTime_property, file: #file, line: #line)
    systemLibraryCheckTimeIntervalPopupButton?.bind_selectedTag (self.systemLibraryCheckTimeInterval_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return !self.checkForSystemLibraryAtStartUp_property_selection
        },
        outlet: self.nextSystemLibraryCheckDate
      )
      self.checkForSystemLibraryAtStartUp_property.addEBObserver (controller)
      self.mController_nextSystemLibraryCheckDate_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return !self.checkForSystemLibraryAtStartUp_property_selection
        },
        outlet: self.systemLibraryCheckTimeIntervalPopupButton
      )
      self.checkForSystemLibraryAtStartUp_property.addEBObserver (controller)
      self.mController_systemLibraryCheckTimeIntervalPopupButton_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return !self.checkForSystemLibraryAtStartUp_property_selection
        },
        outlet: self.systemLibraryCheckTimeIntervalTitleTextField
      )
      self.checkForSystemLibraryAtStartUp_property.addEBObserver (controller)
      self.mController_systemLibraryCheckTimeIntervalTitleTextField_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.additionnalLibraryArrayController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mRemoveLibraryEntryButton
      )
      self.additionnalLibraryArrayController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mRemoveLibraryEntryButton_enabled = controller
    }
  //--------------------------- Array controller
    self.additionnalLibraryArrayController.bind_tableView (self.mAdditionnalLibraryArrayTableView, file: #file, line: #line)
  //--------------------------- Set targets / actions
    self.mRevealInFinderLibraryInUserApplicationSupportButton?.target = self
    self.mRevealInFinderLibraryInUserApplicationSupportButton?.action = #selector (Preferences.revealUserLibraryInFinderAction (_:))
    self.mAddLibraryEntryButton?.target = self
    self.mAddLibraryEntryButton?.action = #selector (Preferences.addLibraryEntryAction (_:))
    self.mRemoveLibraryEntryButton?.target = additionnalLibraryArrayController
    self.mRemoveLibraryEntryButton?.action = #selector (Controller_Preferences_additionnalLibraryArrayController.remove (_:))
    self.mCheckLibraryAction?.target = self
    self.mCheckLibraryAction?.action = #selector (Preferences.checkLibraryAction (_:))
  //--------------------------- Extern functions
    self.setupForLibrary ()
  }

  //····················································································································
  //    applicationWillTerminateAction
  //····················································································································

  @objc func applicationWillTerminateAction (_ : NSNotification) {
  //--------------------------- Array controller
    self.additionnalLibraryArrayController.unbind_tableView (self.mAdditionnalLibraryArrayTableView)
  //--- Array controller property: additionnalLibraryArrayController
    self.additionnalLibraryArrayController.unbind_model ()
    self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_packages_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_packages_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_packages_property)
    self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_devices_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_devices_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_devices_property)
    self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_fonts_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_fonts_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_fonts_property)
    self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_artworks_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_artworks_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_artworks_property)
    self.usesUserLibrary_property.removeEBObserver (self.mValueRevealInFinder_symbols_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mUses (self.mValueRevealInFinder_symbols_property)
    self.additionnalLibraryArray_property.removeEBObserverOf_mPath (self.mValueRevealInFinder_symbols_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

