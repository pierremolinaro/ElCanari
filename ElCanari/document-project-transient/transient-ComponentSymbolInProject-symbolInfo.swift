//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func transient_ComponentSymbolInProject_symbolInfo (
       _ self_mRotation : QuadrantRotation,         
       _ self_componentName : String,               
       _ self_mComponent_mComponentValue : String?, 
       _ self_mComponent_deviceSymbolDictionary : DeviceSymbolDictionary?,
       _ self_mSymbolInstanceName : String,         
       _ self_mSymbolTypeName : String,             
       _ self_mCenterX : Int,                       
       _ self_mCenterY : Int,                       
       _ prefs_pinNameFont : NSFont
) -> ComponentSymbolInfo {
//--- START OF USER ZONE 2
      //--- Device info
        let key = SymbolInProjectIdentifier (symbolInstanceName: self_mSymbolInstanceName, symbolTypeName: self_mSymbolTypeName)
        let deviceInfo = self_mComponent_deviceSymbolDictionary! [key]!
      //--- Affine transformation for drawings
        let tr = NSAffineTransform ()
        tr.translateX (by: canariUnitToCocoa (self_mCenterX), yBy: canariUnitToCocoa (self_mCenterY))
        tr.rotate (byDegrees: CGFloat (self_mRotation.rawValue) * 90.0)
        tr.translateX (by: -canariUnitToCocoa (deviceInfo.center.x), yBy: -canariUnitToCocoa (deviceInfo.center.y))
      //--- Pin names and pad names
        let pinNameAttributes : [NSAttributedString.Key : Any] = [
          NSAttributedString.Key.font : prefs_pinNameFont
        ]
        var pins = [PinDescriptor] ()
        for pinPadAssignment in deviceInfo.assignments {
          if let pin = pinPadAssignment.pin {
            let pinTextShape = EBShape ()
          //--- Pin name
            if pin.pinNameIsDisplayedInSchematics {
              let trText = NSAffineTransform ()
              trText.translateX (by: canariUnitToCocoa (self_mCenterX), yBy: canariUnitToCocoa (self_mCenterY))
              trText.rotate (byDegrees: CGFloat (self_mRotation.rawValue) * 90.0)
              trText.translateX (by: -canariUnitToCocoa (deviceInfo.center.x), yBy: -canariUnitToCocoa (deviceInfo.center.y))
              trText.translateX (by: canariUnitToCocoa (pin.nameXY.x), yBy: canariUnitToCocoa (pin.nameXY.y))
              trText.rotate (byDegrees: -CGFloat (self_mRotation.rawValue & 2) * 90.0)
              let pinNameTextShape = EBTextShape (
                pin.pinName,
                NSPoint (),
                pinNameAttributes,
                self_mRotation.ebSymbolTextShapeHorizontalAlignment (alignment: pin.nameHorizontalAlignment),
                self_mRotation.ebSymbolTextShapeVerticalAlignment (alignment: pin.nameHorizontalAlignment)
              )
              pinTextShape.append (pinNameTextShape.transformedBy (trText))
            }
          //--- Pin number
            let trText = NSAffineTransform ()
            trText.translateX (by: canariUnitToCocoa (self_mCenterX), yBy: canariUnitToCocoa (self_mCenterY))
            trText.rotate (byDegrees: CGFloat (self_mRotation.rawValue) * 90.0)
            trText.translateX (by: -canariUnitToCocoa (deviceInfo.center.x), yBy: -canariUnitToCocoa (deviceInfo.center.y))
            trText.translateX (by: canariUnitToCocoa (pin.numberXY.x), yBy: canariUnitToCocoa (pin.numberXY.y))
            trText.rotate (byDegrees: -CGFloat (self_mRotation.rawValue & 2) * 90.0)
             let pinNumberTextShape = EBTextShape (
              pinPadAssignment.padName,
              NSPoint (),
              pinNameAttributes,
              self_mRotation.ebSymbolTextShapeHorizontalAlignment (alignment: pin.numberHorizontalAlignment),
              self_mRotation.ebSymbolTextShapeVerticalAlignment (alignment: pin.nameHorizontalAlignment)
            )
            pinTextShape.append (pinNumberTextShape.transformedBy (trText))
          //--- Pin location
            let pinLocationTransform = NSAffineTransform ()
            pinLocationTransform.translateX (by: canariUnitToCocoa (self_mCenterX), yBy: canariUnitToCocoa (self_mCenterY))
            pinLocationTransform.rotate (byDegrees: CGFloat (self_mRotation.rawValue) * 90.0)
            pinLocationTransform.translateX (by: -canariUnitToCocoa (deviceInfo.center.x), yBy: -canariUnitToCocoa (deviceInfo.center.y))
            let pinLocation = pinLocationTransform.transform (pin.pinXY.cocoaPoint ()).canariPointAligned (onCanariGrid: SCHEMATICS_GRID_IN_CANARI_UNIT)
          //---
            pins.append (PinDescriptor (symbolIdentifier: pin.symbol, pinName: pin.pinName, pinLocation: pinLocation, shape: pinTextShape))
          }
        }
      //---
        let transformedStrokeBezierPath = tr.transform (deviceInfo.strokeBezierPath)
        let transformedFilledBezierPath = tr.transform (deviceInfo.filledBezierPath)
        let componentSymbolCenter = CanariPoint (x: self_mCenterX, y: self_mCenterY)
        return ComponentSymbolInfo (
          filledBezierPath: transformedFilledBezierPath,
          strokeBezierPath: transformedStrokeBezierPath,
          center: componentSymbolCenter,
          pins: pins,
          componentName: self_componentName,
          componentValue: self_mComponent_mComponentValue!
        )
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
