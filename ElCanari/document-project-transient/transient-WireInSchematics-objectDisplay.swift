//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func transient_WireInSchematics_objectDisplay (
       _ self_mP1_wireColor : NSColor?,        
       _ prefs_symbolDrawingWidthMultipliedByTen : Int,
       _ self_mP1_location : CanariPoint?,     
       _ self_mP2_location : CanariPoint?
) -> EBShape {
//--- START OF USER ZONE 2
        let p1 = self_mP1_location ?? CanariPoint ()
        let p2 = self_mP2_location ?? CanariPoint (x: WIRE_DEFAULT_SIZE_ON_DRAG_AND_DROP, y: WIRE_DEFAULT_SIZE_ON_DRAG_AND_DROP)
        let shape = EBShape ()
      //---
//        do{
//          let bp = NSBezierPath ()
//          bp.move (to: p1.cocoaPoint)
//          bp.line (to: p2.cocoaPoint)
//          bp.lineWidth = CGFloat (prefs_symbolDrawingWidthMultipliedByTen) / 10.0 + 1.0
//          bp.lineCapStyle = .round
//          bp.lineJoinStyle = .round
//          shape.append (EBStrokeBezierPathShape ([bp], .white))
//        }
      //---
        do{
          let bp = NSBezierPath ()
          bp.move (to: p1.cocoaPoint)
          bp.line (to: p2.cocoaPoint)
          bp.lineWidth = CGFloat (prefs_symbolDrawingWidthMultipliedByTen) / 10.0
          bp.lineCapStyle = .round
          bp.lineJoinStyle = .round
          shape.append (EBStrokeBezierPathShape ([bp], self_mP1_wireColor ?? .black))
        }
        return shape
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
