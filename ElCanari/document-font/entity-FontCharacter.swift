//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_codePoint : class {
  var codePoint : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_advance : class {
  var advance : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_segmentArrayForDrawing : class {
  var segmentArrayForDrawing : CharacterSegmentListClass? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_gerberCode : class {
  var gerberCode : CharacterGerberCodeClass? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_gerberCodeInstructionCountMessage : class {
  var gerberCodeInstructionCountMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class FontCharacter : EBManagedObject,
         FontCharacter_codePoint,
         FontCharacter_advance,
         FontCharacter_segmentArrayForDrawing,
         FontCharacter_gerberCode,
         FontCharacter_gerberCodeInstructionCountMessage {

  //····················································································································
  //   Atomic property: codePoint
  //····················································································································

  var codePoint_property = EBStoredProperty_Int (0)

  //····················································································································

  var codePoint : Int {
    get {
      return self.codePoint_property.propval
    }
    set {
      self.codePoint_property.setProp (newValue)
    }
  }

  //····················································································································

  var codePoint_property_selection : EBSelection <Int> {
    return self.codePoint_property.prop
  }

  //····················································································································
  //   Atomic property: advance
  //····················································································································

  var advance_property = EBStoredProperty_Int (0)

  //····················································································································

  var advance : Int {
    get {
      return self.advance_property.propval
    }
    set {
      self.advance_property.setProp (newValue)
    }
  }

  //····················································································································

  var advance_property_selection : EBSelection <Int> {
    return self.advance_property.prop
  }

  //····················································································································
  //   To many property: segments
  //····················································································································

  var segments_property = StoredArrayOf_SegmentForFontCharacter ()

  //····················································································································

  var segments_property_selection : EBSelection < [SegmentForFontCharacter] > {
      return self.segments_property.prop
  }

  //····················································································································
  //   Transient property: segmentArrayForDrawing
  //····················································································································

  var segmentArrayForDrawing_property = EBTransientProperty_CharacterSegmentListClass ()

  //····················································································································

  var segmentArrayForDrawing_property_selection : EBSelection <CharacterSegmentListClass> {
    return self.segmentArrayForDrawing_property.prop
  }

  //····················································································································

  var segmentArrayForDrawing : CharacterSegmentListClass? {
    switch self.segmentArrayForDrawing_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: gerberCode
  //····················································································································

  var gerberCode_property = EBTransientProperty_CharacterGerberCodeClass ()

  //····················································································································

  var gerberCode_property_selection : EBSelection <CharacterGerberCodeClass> {
    return self.gerberCode_property.prop
  }

  //····················································································································

  var gerberCode : CharacterGerberCodeClass? {
    switch self.gerberCode_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: gerberCodeInstructionCountMessage
  //····················································································································

  var gerberCodeInstructionCountMessage_property = EBTransientProperty_String ()

  //····················································································································

  var gerberCodeInstructionCountMessage_property_selection : EBSelection <String> {
    return self.gerberCodeInstructionCountMessage_property.prop
  }

  //····················································································································

  var gerberCodeInstructionCountMessage : String? {
    switch self.gerberCodeInstructionCountMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ undoManager : EBUndoManager?, file: String, _ line : Int) {
    super.init (undoManager, file: file, line)
  //--- Atomic property: codePoint
    self.codePoint_property.undoManager = self.undoManager
  //--- Atomic property: advance
    self.advance_property.undoManager = self.undoManager
  //--- To many property: segments (no option)
    self.segments_property.undoManager = self.undoManager
  //--- Atomic property: segmentArrayForDrawing
    self.segmentArrayForDrawing_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.segments_property_selection.kind ()
        kind &= unwSelf.segments_property_selection.kind ()
        kind &= unwSelf.segments_property_selection.kind ()
        kind &= unwSelf.segments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.segments_property_selection, unwSelf.segments_property_selection, unwSelf.segments_property_selection, unwSelf.segments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_FontCharacter_segmentArrayForDrawing (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.segments_property.addEBObserverOf_x1 (self.segmentArrayForDrawing_property)
    self.segments_property.addEBObserverOf_y1 (self.segmentArrayForDrawing_property)
    self.segments_property.addEBObserverOf_x2 (self.segmentArrayForDrawing_property)
    self.segments_property.addEBObserverOf_y2 (self.segmentArrayForDrawing_property)
  //--- Atomic property: gerberCode
    self.gerberCode_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.segmentArrayForDrawing_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.segmentArrayForDrawing_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontCharacter_gerberCode (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.segmentArrayForDrawing_property.addEBObserver (self.gerberCode_property)
  //--- Atomic property: gerberCodeInstructionCountMessage
    self.gerberCodeInstructionCountMessage_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.gerberCode_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.gerberCode_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontCharacter_gerberCodeInstructionCountMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.gerberCode_property.addEBObserver (self.gerberCodeInstructionCountMessage_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.advance_property.setSignatureObserver (observer:self)
    self.codePoint_property.setSignatureObserver (observer:self)
    self.segments_property.setSignatureObserver (observer:self)
  //--- Extern delegates
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.segments_property.removeEBObserverOf_x1 (self.segmentArrayForDrawing_property)
    self.segments_property.removeEBObserverOf_y1 (self.segmentArrayForDrawing_property)
    self.segments_property.removeEBObserverOf_x2 (self.segmentArrayForDrawing_property)
    self.segments_property.removeEBObserverOf_y2 (self.segmentArrayForDrawing_property)
    self.segmentArrayForDrawing_property.removeEBObserver (self.gerberCode_property)
    self.gerberCode_property.removeEBObserver (self.gerberCodeInstructionCountMessage_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "codePoint",
      idx:self.codePoint_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.codePoint_property.mObserverExplorer,
      valueExplorer:&self.codePoint_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "advance",
      idx:self.advance_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.advance_property.mObserverExplorer,
      valueExplorer:&self.advance_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "segmentArrayForDrawing",
      idx:self.segmentArrayForDrawing_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.segmentArrayForDrawing_property.mObserverExplorer,
      valueExplorer:&self.segmentArrayForDrawing_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gerberCode",
      idx:self.gerberCode_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.gerberCode_property.mObserverExplorer,
      valueExplorer:&self.gerberCode_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gerberCodeInstructionCountMessage",
      idx:self.gerberCodeInstructionCountMessage_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.gerberCodeInstructionCountMessage_property.mObserverExplorer,
      valueExplorer:&self.gerberCodeInstructionCountMessage_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "segments",
      idx:segments_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&segments_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: codePoint
    self.codePoint_property.mObserverExplorer = nil
    self.codePoint_property.mValueExplorer = nil
  //--- Atomic property: advance
    self.advance_property.mObserverExplorer = nil
    self.advance_property.mValueExplorer = nil
  //--- To many property: segments
    self.segments_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override func cleanUpToManyRelationships () {
    self.segments_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: codePoint
    self.codePoint_property.storeIn (dictionary: ioDictionary, forKey:"codePoint")
  //--- Atomic property: advance
    self.advance_property.storeIn (dictionary: ioDictionary, forKey:"advance")
  //--- To many property: segments
    self.store (
      managedObjectArray: segments_property.propval as NSArray,
      relationshipName: "segments",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: segments
    self.segments_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "segments",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentForFontCharacter])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: codePoint
    self.codePoint_property.readFrom (dictionary: inDictionary, forKey:"codePoint")
  //--- Atomic property: advance
    self.advance_property.readFrom (dictionary: inDictionary, forKey:"advance")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: segments
    for managedObject : EBManagedObject in self.segments_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.advance_property.signature ())
    crc.accumulateUInt32 (self.codePoint_property.signature ())
    crc.accumulateUInt32 (self.segments_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_FontCharacter : ReadOnlyAbstractArrayProperty <FontCharacter> {

  //····················································································································
  //   Observers of 'codePoint' stored property
  //····················································································································

  private var mObserversOf_codePoint = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_codePoint (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_codePoint.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.codePoint_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_codePoint (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_codePoint.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.codePoint_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_codePoint_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_codePoint.eventArray () {
        managedObject.codePoint_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_codePoint_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for observer in self.mObserversOf_codePoint.eventArray () {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.codePoint_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'advance' stored property
  //····················································································································

  private var mObserversOf_advance = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_advance (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_advance.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.advance_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_advance (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_advance.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.advance_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_advance_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_advance.eventArray () {
        managedObject.advance_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_advance_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for observer in self.mObserversOf_advance.eventArray () {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.advance_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'segmentArrayForDrawing' transient property
  //····················································································································

  private var mObserversOf_segmentArrayForDrawing = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_segmentArrayForDrawing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_segmentArrayForDrawing.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.segmentArrayForDrawing_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_segmentArrayForDrawing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_segmentArrayForDrawing.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.segmentArrayForDrawing_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_segmentArrayForDrawing_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_segmentArrayForDrawing.eventArray () {
        managedObject.segmentArrayForDrawing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_segmentArrayForDrawing_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_segmentArrayForDrawing.eventArray () {
        managedObject.segmentArrayForDrawing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gerberCode' transient property
  //····················································································································

  private var mObserversOf_gerberCode = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gerberCode (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gerberCode.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gerberCode_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gerberCode (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gerberCode.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gerberCode_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gerberCode_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_gerberCode.eventArray () {
        managedObject.gerberCode_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gerberCode_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_gerberCode.eventArray () {
        managedObject.gerberCode_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gerberCodeInstructionCountMessage' transient property
  //····················································································································

  private var mObserversOf_gerberCodeInstructionCountMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gerberCodeInstructionCountMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gerberCodeInstructionCountMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gerberCodeInstructionCountMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gerberCodeInstructionCountMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gerberCodeInstructionCountMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gerberCodeInstructionCountMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gerberCodeInstructionCountMessage_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_gerberCodeInstructionCountMessage.eventArray () {
        managedObject.gerberCodeInstructionCountMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gerberCodeInstructionCountMessage_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_gerberCodeInstructionCountMessage.eventArray () {
        managedObject.gerberCodeInstructionCountMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_FontCharacter : ReadOnlyArrayOf_FontCharacter {

  //····················································································································

  var readModelFunction : Optional < () -> EBSelection < [FontCharacter] > >

  //····················································································································

  override var propset : Set <FontCharacter> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [FontCharacter] > {
    self.computeArrayAndSet ()
    return self.prop_cache!  
  }
 
  //····················································································································

  override var propval : [FontCharacter] {
    self.computeArrayAndSet ()
    if let value = self.prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <FontCharacter> ()

  //····················································································································

  private var prop_cache : EBSelection < [FontCharacter] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.readModelFunction, self.prop_cache == nil {
      self.prop_cache = unwrappedComputeFunction ()
      let newSet : Set <FontCharacter>
      switch self.prop_cache! {
      case .multiple, .empty :
        newSet = Set <FontCharacter> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_codePoint_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_advance_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_segmentArrayForDrawing_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_gerberCode_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_gerberCodeInstructionCountMessage_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_codePoint_toElementsOfSet (addedSet)
      self.addEBObserversOf_advance_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_segmentArrayForDrawing_toElementsOfSet (addedSet)
      self.addEBObserversOf_gerberCode_toElementsOfSet (addedSet)
      self.addEBObserversOf_gerberCodeInstructionCountMessage_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.prop_cache == nil {
      self.prop_cache = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.prop_cache != nil {
      self.prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_FontCharacter : ReadOnlyArrayOf_FontCharacter {

  //····················································································································
 
  func setProp (_ value :  [FontCharacter]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_FontCharacter : ReadWriteArrayOf_FontCharacter, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : FontCharacter?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [FontCharacter] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "FontCharacter") as? FontCharacter {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <FontCharacter> ()
  private var mValue = [FontCharacter] () {
    didSet {
      self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
        self.removeEBObserversOf_codePoint_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_advance_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_segmentArrayForDrawing_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_gerberCode_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_gerberCodeInstructionCountMessage_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        for managedObject : FontCharacter in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
        self.addEBObserversOf_codePoint_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_advance_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_segmentArrayForDrawing_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_gerberCode_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_gerberCodeInstructionCountMessage_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        self.clearSignatureCache ()
      //--- Write in preferences ?
        if let prefKey = self.mPrefKey {
          var dictionaryArray = [NSDictionary] ()
          for object in self.mValue {
            let d = NSMutableDictionary ()
            object.saveIntoDictionary (d)
            d [kEntityKey] = nil // Remove entity key, not used in preferences
            dictionaryArray.append (d)
          }
          UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
        }
      }
    }
  }

  //····················································································································

  override var prop : EBSelection < [FontCharacter] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [FontCharacter]) { self.mValue = inValue }

  //····················································································································

  override var propval : [FontCharacter] { return self.mValue }

  //····················································································································

  override var propset : Set <FontCharacter> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [FontCharacter]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : FontCharacter) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : FontCharacter) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
