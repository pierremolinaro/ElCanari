//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_codePoint : class {
  var codePoint : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_advance : class {
  var advance : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_mWarnsWhenNoSegment : class {
  var mWarnsWhenNoSegment : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_mWarnsWhenAdvanceIsZero : class {
  var mWarnsWhenAdvanceIsZero : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_segmentArrayForDrawing : class {
  var segmentArrayForDrawing : CharacterSegmentListClass? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_gerberCode : class {
  var gerberCode : CharacterGerberCodeClass? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_gerberCodeInstructionCountMessage : class {
  var gerberCodeInstructionCountMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontCharacter_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class FontCharacter : EBManagedObject,
         FontCharacter_codePoint,
         FontCharacter_advance,
         FontCharacter_mWarnsWhenNoSegment,
         FontCharacter_mWarnsWhenAdvanceIsZero,
         FontCharacter_segmentArrayForDrawing,
         FontCharacter_gerberCode,
         FontCharacter_gerberCodeInstructionCountMessage,
         FontCharacter_issues {

  //····················································································································
  //   Atomic property: codePoint
  //····················································································································

  let codePoint_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var codePoint : Int {
    get { return self.codePoint_property.propval }
    set { self.codePoint_property.setProp (newValue) }
  }

  //····················································································································

  var codePoint_property_selection : EBSelection <Int> { return self.codePoint_property.prop }

  //····················································································································
  //   Atomic property: advance
  //····················································································································

  let advance_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var advance : Int {
    get { return self.advance_property.propval }
    set { self.advance_property.setProp (newValue) }
  }

  //····················································································································

  var advance_property_selection : EBSelection <Int> { return self.advance_property.prop }

  //····················································································································
  //   Atomic property: mWarnsWhenNoSegment
  //····················································································································

  let mWarnsWhenNoSegment_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mWarnsWhenNoSegment : Bool {
    get { return self.mWarnsWhenNoSegment_property.propval }
    set { self.mWarnsWhenNoSegment_property.setProp (newValue) }
  }

  //····················································································································

  var mWarnsWhenNoSegment_property_selection : EBSelection <Bool> { return self.mWarnsWhenNoSegment_property.prop }

  //····················································································································
  //   Atomic property: mWarnsWhenAdvanceIsZero
  //····················································································································

  let mWarnsWhenAdvanceIsZero_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mWarnsWhenAdvanceIsZero : Bool {
    get { return self.mWarnsWhenAdvanceIsZero_property.propval }
    set { self.mWarnsWhenAdvanceIsZero_property.setProp (newValue) }
  }

  //····················································································································

  var mWarnsWhenAdvanceIsZero_property_selection : EBSelection <Bool> { return self.mWarnsWhenAdvanceIsZero_property.prop }

  //····················································································································
  //   To many property: segments
  //····················································································································

  let segments_property = StoredArrayOf_SegmentForFontCharacter ()

  //····················································································································

  var segments_property_selection : EBSelection < [SegmentForFontCharacter] > {
    return self.segments_property.prop
  }

  //····················································································································

  var segments : [SegmentForFontCharacter] {
    get { return self.segments_property.propval }
    set { self.segments_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: segmentArrayForDrawing
  //····················································································································

  let segmentArrayForDrawing_property = EBTransientProperty_CharacterSegmentListClass ()

  //····················································································································

  var segmentArrayForDrawing_property_selection : EBSelection <CharacterSegmentListClass> {
    return self.segmentArrayForDrawing_property.prop
  }

  //····················································································································

  var segmentArrayForDrawing : CharacterSegmentListClass? {
    switch self.segmentArrayForDrawing_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: gerberCode
  //····················································································································

  let gerberCode_property = EBTransientProperty_CharacterGerberCodeClass ()

  //····················································································································

  var gerberCode_property_selection : EBSelection <CharacterGerberCodeClass> {
    return self.gerberCode_property.prop
  }

  //····················································································································

  var gerberCode : CharacterGerberCodeClass? {
    switch self.gerberCode_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: gerberCodeInstructionCountMessage
  //····················································································································

  let gerberCodeInstructionCountMessage_property = EBTransientProperty_String ()

  //····················································································································

  var gerberCodeInstructionCountMessage_property_selection : EBSelection <String> {
    return self.gerberCodeInstructionCountMessage_property.prop
  }

  //····················································································································

  var gerberCodeInstructionCountMessage : String? {
    switch self.gerberCodeInstructionCountMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray> {
    return self.issues_property.prop
  }

  //····················································································································

  var issues : CanariIssueArray? {
    switch self.issues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: codePoint
    self.codePoint_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: advance
    self.advance_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mWarnsWhenNoSegment
    self.mWarnsWhenNoSegment_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mWarnsWhenAdvanceIsZero
    self.mWarnsWhenAdvanceIsZero_property.ebUndoManager = self.ebUndoManager
  //--- To many property: segments (no option)
    self.segments_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: segmentArrayForDrawing
    self.segmentArrayForDrawing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.segments_property_selection.kind ()
        kind &= unwSelf.segments_property_selection.kind ()
        kind &= unwSelf.segments_property_selection.kind ()
        kind &= unwSelf.segments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.segments_property_selection, unwSelf.segments_property_selection, unwSelf.segments_property_selection, unwSelf.segments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_FontCharacter_segmentArrayForDrawing (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.segments_property.addEBObserverOf_x1 (self.segmentArrayForDrawing_property)
    self.segments_property.addEBObserverOf_y1 (self.segmentArrayForDrawing_property)
    self.segments_property.addEBObserverOf_x2 (self.segmentArrayForDrawing_property)
    self.segments_property.addEBObserverOf_y2 (self.segmentArrayForDrawing_property)
  //--- Atomic property: gerberCode
    self.gerberCode_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.segmentArrayForDrawing_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.segmentArrayForDrawing_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontCharacter_gerberCode (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.segmentArrayForDrawing_property.addEBObserver (self.gerberCode_property)
  //--- Atomic property: gerberCodeInstructionCountMessage
    self.gerberCodeInstructionCountMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.gerberCode_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.gerberCode_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontCharacter_gerberCodeInstructionCountMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.gerberCode_property.addEBObserver (self.gerberCodeInstructionCountMessage_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.codePoint_property_selection.kind ()
        kind &= unwSelf.advance_property_selection.kind ()
        kind &= unwSelf.mWarnsWhenNoSegment_property_selection.kind ()
        kind &= unwSelf.mWarnsWhenAdvanceIsZero_property_selection.kind ()
        kind &= unwSelf.segments_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.codePoint_property_selection, unwSelf.advance_property_selection, unwSelf.mWarnsWhenNoSegment_property_selection, unwSelf.mWarnsWhenAdvanceIsZero_property_selection, unwSelf.segments_property.count_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_FontCharacter_issues (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.codePoint_property.addEBObserver (self.issues_property)
    self.advance_property.addEBObserver (self.issues_property)
    self.mWarnsWhenNoSegment_property.addEBObserver (self.issues_property)
    self.mWarnsWhenAdvanceIsZero_property.addEBObserver (self.issues_property)
    self.segments_property.addEBObserver (self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.advance_property.setSignatureObserver (observer: self)
    self.codePoint_property.setSignatureObserver (observer: self)
    self.mWarnsWhenAdvanceIsZero_property.setSignatureObserver (observer: self)
    self.mWarnsWhenNoSegment_property.setSignatureObserver (observer: self)
    self.segments_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.segments_property.removeEBObserverOf_x1 (self.segmentArrayForDrawing_property)
    self.segments_property.removeEBObserverOf_y1 (self.segmentArrayForDrawing_property)
    self.segments_property.removeEBObserverOf_x2 (self.segmentArrayForDrawing_property)
    self.segments_property.removeEBObserverOf_y2 (self.segmentArrayForDrawing_property)
    self.segmentArrayForDrawing_property.removeEBObserver (self.gerberCode_property)
    self.gerberCode_property.removeEBObserver (self.gerberCodeInstructionCountMessage_property)
    self.codePoint_property.removeEBObserver (self.issues_property)
    self.advance_property.removeEBObserver (self.issues_property)
    self.mWarnsWhenNoSegment_property.removeEBObserver (self.issues_property)
    self.mWarnsWhenAdvanceIsZero_property.removeEBObserver (self.issues_property)
    self.segments_property.removeEBObserver (self.issues_property)
  //--- Unregister properties for handling signature
    self.advance_property.setSignatureObserver (observer: nil)
    self.codePoint_property.setSignatureObserver (observer: nil)
    self.mWarnsWhenAdvanceIsZero_property.setSignatureObserver (observer: nil)
    self.mWarnsWhenNoSegment_property.setSignatureObserver (observer: nil)
    self.segments_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "codePoint",
      idx: self.codePoint_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.codePoint_property.mObserverExplorer,
      valueExplorer: &self.codePoint_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "advance",
      idx: self.advance_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.advance_property.mObserverExplorer,
      valueExplorer: &self.advance_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mWarnsWhenNoSegment",
      idx: self.mWarnsWhenNoSegment_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mWarnsWhenNoSegment_property.mObserverExplorer,
      valueExplorer: &self.mWarnsWhenNoSegment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mWarnsWhenAdvanceIsZero",
      idx: self.mWarnsWhenAdvanceIsZero_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mWarnsWhenAdvanceIsZero_property.mObserverExplorer,
      valueExplorer: &self.mWarnsWhenAdvanceIsZero_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "segmentArrayForDrawing",
      idx:self.segmentArrayForDrawing_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.segmentArrayForDrawing_property.mObserverExplorer,
      valueExplorer:&self.segmentArrayForDrawing_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gerberCode",
      idx:self.gerberCode_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.gerberCode_property.mObserverExplorer,
      valueExplorer:&self.gerberCode_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "gerberCodeInstructionCountMessage",
      idx:self.gerberCodeInstructionCountMessage_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.gerberCodeInstructionCountMessage_property.mObserverExplorer,
      valueExplorer:&self.gerberCodeInstructionCountMessage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "segments",
      idx:segments_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&segments_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: codePoint
    self.codePoint_property.mObserverExplorer = nil
    self.codePoint_property.mValueExplorer = nil
  //--- Atomic property: advance
    self.advance_property.mObserverExplorer = nil
    self.advance_property.mValueExplorer = nil
  //--- Atomic property: mWarnsWhenNoSegment
    self.mWarnsWhenNoSegment_property.mObserverExplorer = nil
    self.mWarnsWhenNoSegment_property.mValueExplorer = nil
  //--- Atomic property: mWarnsWhenAdvanceIsZero
    self.mWarnsWhenAdvanceIsZero_property.mObserverExplorer = nil
    self.mWarnsWhenAdvanceIsZero_property.mValueExplorer = nil
  //--- To many property: segments
    self.segments_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.segments_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: codePoint
    self.codePoint_property.storeIn (dictionary: ioDictionary, forKey:"codePoint")
  //--- Atomic property: advance
    self.advance_property.storeIn (dictionary: ioDictionary, forKey:"advance")
  //--- Atomic property: mWarnsWhenNoSegment
    self.mWarnsWhenNoSegment_property.storeIn (dictionary: ioDictionary, forKey:"mWarnsWhenNoSegment")
  //--- Atomic property: mWarnsWhenAdvanceIsZero
    self.mWarnsWhenAdvanceIsZero_property.storeIn (dictionary: ioDictionary, forKey:"mWarnsWhenAdvanceIsZero")
  //--- To many property: segments
    self.store (
      managedObjectArray: self.segments_property.propval,
      relationshipName: "segments",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: segments
    self.segments_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "segments",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SegmentForFontCharacter])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: codePoint
    self.codePoint_property.readFrom (dictionary: inDictionary, forKey:"codePoint")
  //--- Atomic property: advance
    self.advance_property.readFrom (dictionary: inDictionary, forKey:"advance")
  //--- Atomic property: mWarnsWhenNoSegment
    self.mWarnsWhenNoSegment_property.readFrom (dictionary: inDictionary, forKey:"mWarnsWhenNoSegment")
  //--- Atomic property: mWarnsWhenAdvanceIsZero
    self.mWarnsWhenAdvanceIsZero_property.readFrom (dictionary: inDictionary, forKey:"mWarnsWhenAdvanceIsZero")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: segments
    for managedObject in self.segments_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: segments
    for managedObject in self.segments_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.advance_property.signature ())
    crc.accumulateUInt32 (self.codePoint_property.signature ())
    crc.accumulateUInt32 (self.mWarnsWhenAdvanceIsZero_property.signature ())
    crc.accumulateUInt32 (self.mWarnsWhenNoSegment_property.signature ())
    crc.accumulateUInt32 (self.segments_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_FontCharacter : ReadOnlyAbstractArrayProperty <FontCharacter> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <FontCharacter>, addedSet inAddedSet : Set <FontCharacter>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_codePoint_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_advance_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mWarnsWhenNoSegment_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mWarnsWhenAdvanceIsZero_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_segmentArrayForDrawing_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_gerberCode_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_gerberCodeInstructionCountMessage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_codePoint_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_advance_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mWarnsWhenNoSegment_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mWarnsWhenAdvanceIsZero_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_segmentArrayForDrawing_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_gerberCode_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_gerberCodeInstructionCountMessage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'codePoint' stored property
  //····················································································································

  private var mObserversOf_codePoint = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_codePoint (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_codePoint.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.codePoint_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_codePoint (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_codePoint.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.codePoint_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_codePoint_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_codePoint.apply { (_ observer : EBEvent) in
        managedObject.codePoint_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_codePoint_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    self.mObserversOf_codePoint.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.codePoint_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'advance' stored property
  //····················································································································

  private var mObserversOf_advance = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_advance (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_advance.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.advance_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_advance (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_advance.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.advance_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_advance_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_advance.apply { (_ observer : EBEvent) in
        managedObject.advance_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_advance_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    self.mObserversOf_advance.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.advance_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mWarnsWhenNoSegment' stored property
  //····················································································································

  private var mObserversOf_mWarnsWhenNoSegment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mWarnsWhenNoSegment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mWarnsWhenNoSegment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWarnsWhenNoSegment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWarnsWhenNoSegment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mWarnsWhenNoSegment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWarnsWhenNoSegment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mWarnsWhenNoSegment_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_mWarnsWhenNoSegment.apply { (_ observer : EBEvent) in
        managedObject.mWarnsWhenNoSegment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mWarnsWhenNoSegment_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    self.mObserversOf_mWarnsWhenNoSegment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mWarnsWhenNoSegment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mWarnsWhenAdvanceIsZero' stored property
  //····················································································································

  private var mObserversOf_mWarnsWhenAdvanceIsZero = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mWarnsWhenAdvanceIsZero (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mWarnsWhenAdvanceIsZero.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWarnsWhenAdvanceIsZero_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWarnsWhenAdvanceIsZero (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mWarnsWhenAdvanceIsZero.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWarnsWhenAdvanceIsZero_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mWarnsWhenAdvanceIsZero_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_mWarnsWhenAdvanceIsZero.apply { (_ observer : EBEvent) in
        managedObject.mWarnsWhenAdvanceIsZero_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mWarnsWhenAdvanceIsZero_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    self.mObserversOf_mWarnsWhenAdvanceIsZero.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mWarnsWhenAdvanceIsZero_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'segmentArrayForDrawing' transient property
  //····················································································································

  private var mObserversOf_segmentArrayForDrawing = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_segmentArrayForDrawing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_segmentArrayForDrawing.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.segmentArrayForDrawing_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_segmentArrayForDrawing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_segmentArrayForDrawing.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.segmentArrayForDrawing_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_segmentArrayForDrawing_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_segmentArrayForDrawing.apply { (_ observer : EBEvent) in
        managedObject.segmentArrayForDrawing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_segmentArrayForDrawing_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_segmentArrayForDrawing.apply { (_ observer : EBEvent) in
        managedObject.segmentArrayForDrawing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gerberCode' transient property
  //····················································································································

  private var mObserversOf_gerberCode = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gerberCode (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gerberCode.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gerberCode_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gerberCode (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gerberCode.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gerberCode_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gerberCode_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_gerberCode.apply { (_ observer : EBEvent) in
        managedObject.gerberCode_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gerberCode_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_gerberCode.apply { (_ observer : EBEvent) in
        managedObject.gerberCode_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gerberCodeInstructionCountMessage' transient property
  //····················································································································

  private var mObserversOf_gerberCodeInstructionCountMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gerberCodeInstructionCountMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gerberCodeInstructionCountMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gerberCodeInstructionCountMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gerberCodeInstructionCountMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gerberCodeInstructionCountMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gerberCodeInstructionCountMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gerberCodeInstructionCountMessage_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_gerberCodeInstructionCountMessage.apply { (_ observer : EBEvent) in
        managedObject.gerberCodeInstructionCountMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gerberCodeInstructionCountMessage_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_gerberCodeInstructionCountMessage.apply { (_ observer : EBEvent) in
        managedObject.gerberCodeInstructionCountMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_FontCharacter : ReadOnlyArrayOf_FontCharacter {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_FontCharacter? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_FontCharacter?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [FontCharacter] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [FontCharacter] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [FontCharacter] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_FontCharacter <SUPER : EBManagedObject> : ReadOnlyArrayOf_FontCharacter {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [FontCharacter] ()
    for superObject in newModelArray {
      if let object = superObject as? FontCharacter {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [FontCharacter] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [FontCharacter] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_FontCharacter : ReadOnlyArrayOf_FontCharacter {

  //····················································································································
 
  func setProp (_ value :  [FontCharacter]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_FontCharacter : ReadWriteArrayOf_FontCharacter {

  //····················································································································

  private var mModel : ReadWriteArrayOf_FontCharacter? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_FontCharacter?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [FontCharacter]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [FontCharacter]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [FontCharacter] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [FontCharacter] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_FontCharacter : ReadWriteArrayOf_FontCharacter, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : FontCharacter) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : FontCharacter) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : FontCharacter) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : FontCharacter) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [FontCharacter] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "FontCharacter") as? FontCharacter {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [FontCharacter]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [FontCharacter]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <FontCharacter>, addedSet inAddedSet : Set <FontCharacter>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [FontCharacter] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [FontCharacter]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [FontCharacter] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : FontCharacter) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : FontCharacter) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_FontCharacter 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_FontCharacter : ReadOnlyAbstractObjectProperty <FontCharacter> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : FontCharacter?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.codePoint_property.removeEBObserversFrom (&self.mObserversOf_codePoint) // Stored property
    inOldValue?.advance_property.removeEBObserversFrom (&self.mObserversOf_advance) // Stored property
    inOldValue?.mWarnsWhenNoSegment_property.removeEBObserversFrom (&self.mObserversOf_mWarnsWhenNoSegment) // Stored property
    inOldValue?.mWarnsWhenAdvanceIsZero_property.removeEBObserversFrom (&self.mObserversOf_mWarnsWhenAdvanceIsZero) // Stored property
    inOldValue?.segmentArrayForDrawing_property.removeEBObserversFrom (&self.mObserversOf_segmentArrayForDrawing) // Transient property
    inOldValue?.gerberCode_property.removeEBObserversFrom (&self.mObserversOf_gerberCode) // Transient property
    inOldValue?.gerberCodeInstructionCountMessage_property.removeEBObserversFrom (&self.mObserversOf_gerberCodeInstructionCountMessage) // Transient property
    inOldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.codePoint_property.addEBObserversFrom (&self.mObserversOf_codePoint) // Stored property
    self.mInternalValue?.advance_property.addEBObserversFrom (&self.mObserversOf_advance) // Stored property
    self.mInternalValue?.mWarnsWhenNoSegment_property.addEBObserversFrom (&self.mObserversOf_mWarnsWhenNoSegment) // Stored property
    self.mInternalValue?.mWarnsWhenAdvanceIsZero_property.addEBObserversFrom (&self.mObserversOf_mWarnsWhenAdvanceIsZero) // Stored property
    self.mInternalValue?.segmentArrayForDrawing_property.addEBObserversFrom (&self.mObserversOf_segmentArrayForDrawing) // Transient property
    self.mInternalValue?.gerberCode_property.addEBObserversFrom (&self.mObserversOf_gerberCode) // Transient property
    self.mInternalValue?.gerberCodeInstructionCountMessage_property.addEBObserversFrom (&self.mObserversOf_gerberCodeInstructionCountMessage) // Transient property
    self.mInternalValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
  }

  //····················································································································
  //   Observers of 'codePoint' stored property
  //····················································································································

  private var mObserversOf_codePoint = EBWeakEventSet ()

  //····················································································································

  var codePoint_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.codePoint_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_codePoint (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_codePoint.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.codePoint_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_codePoint (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_codePoint.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.codePoint_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_codePoint_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_codePoint.apply { (_ observer : EBEvent) in
        managedObject.codePoint_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_codePoint_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    self.mObserversOf_codePoint.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.codePoint_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'advance' stored property
  //····················································································································

  private var mObserversOf_advance = EBWeakEventSet ()

  //····················································································································

  var advance_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.advance_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_advance (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_advance.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.advance_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_advance (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_advance.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.advance_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_advance_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_advance.apply { (_ observer : EBEvent) in
        managedObject.advance_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_advance_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    self.mObserversOf_advance.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.advance_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mWarnsWhenNoSegment' stored property
  //····················································································································

  private var mObserversOf_mWarnsWhenNoSegment = EBWeakEventSet ()

  //····················································································································

  var mWarnsWhenNoSegment_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mWarnsWhenNoSegment_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mWarnsWhenNoSegment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mWarnsWhenNoSegment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mWarnsWhenNoSegment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWarnsWhenNoSegment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mWarnsWhenNoSegment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mWarnsWhenNoSegment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mWarnsWhenNoSegment_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_mWarnsWhenNoSegment.apply { (_ observer : EBEvent) in
        managedObject.mWarnsWhenNoSegment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mWarnsWhenNoSegment_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    self.mObserversOf_mWarnsWhenNoSegment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mWarnsWhenNoSegment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mWarnsWhenAdvanceIsZero' stored property
  //····················································································································

  private var mObserversOf_mWarnsWhenAdvanceIsZero = EBWeakEventSet ()

  //····················································································································

  var mWarnsWhenAdvanceIsZero_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mWarnsWhenAdvanceIsZero_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mWarnsWhenAdvanceIsZero (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mWarnsWhenAdvanceIsZero.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mWarnsWhenAdvanceIsZero_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWarnsWhenAdvanceIsZero (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mWarnsWhenAdvanceIsZero.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mWarnsWhenAdvanceIsZero_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mWarnsWhenAdvanceIsZero_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_mWarnsWhenAdvanceIsZero.apply { (_ observer : EBEvent) in
        managedObject.mWarnsWhenAdvanceIsZero_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mWarnsWhenAdvanceIsZero_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    self.mObserversOf_mWarnsWhenAdvanceIsZero.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mWarnsWhenAdvanceIsZero_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'segmentArrayForDrawing' transient property
  //····················································································································

  private var mObserversOf_segmentArrayForDrawing = EBWeakEventSet ()

  //····················································································································

  var segmentArrayForDrawing_property_selection : EBSelection <CharacterSegmentListClass?> {
    if let model = self.propval {
      switch (model.segmentArrayForDrawing_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_segmentArrayForDrawing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_segmentArrayForDrawing.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.segmentArrayForDrawing_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_segmentArrayForDrawing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_segmentArrayForDrawing.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.segmentArrayForDrawing_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_segmentArrayForDrawing_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_segmentArrayForDrawing.apply { (_ observer : EBEvent) in
        managedObject.segmentArrayForDrawing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_segmentArrayForDrawing_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_segmentArrayForDrawing.apply { (_ observer : EBEvent) in
        managedObject.segmentArrayForDrawing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gerberCode' transient property
  //····················································································································

  private var mObserversOf_gerberCode = EBWeakEventSet ()

  //····················································································································

  var gerberCode_property_selection : EBSelection <CharacterGerberCodeClass?> {
    if let model = self.propval {
      switch (model.gerberCode_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_gerberCode (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gerberCode.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gerberCode_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_gerberCode (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gerberCode.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gerberCode_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_gerberCode_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_gerberCode.apply { (_ observer : EBEvent) in
        managedObject.gerberCode_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gerberCode_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_gerberCode.apply { (_ observer : EBEvent) in
        managedObject.gerberCode_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gerberCodeInstructionCountMessage' transient property
  //····················································································································

  private var mObserversOf_gerberCodeInstructionCountMessage = EBWeakEventSet ()

  //····················································································································

  var gerberCodeInstructionCountMessage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.gerberCodeInstructionCountMessage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_gerberCodeInstructionCountMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gerberCodeInstructionCountMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gerberCodeInstructionCountMessage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_gerberCodeInstructionCountMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gerberCodeInstructionCountMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.gerberCodeInstructionCountMessage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_gerberCodeInstructionCountMessage_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_gerberCodeInstructionCountMessage.apply { (_ observer : EBEvent) in
        managedObject.gerberCodeInstructionCountMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gerberCodeInstructionCountMessage_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_gerberCodeInstructionCountMessage.apply { (_ observer : EBEvent) in
        managedObject.gerberCodeInstructionCountMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<FontCharacter>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: segments
  //····················································································································

  private var mObserversOf_segments = EBWeakEventSet ()

  //····················································································································

  var segments_property_selection : EBSelection <[SegmentForFontCharacter]> {
    if let model = self.propval {
      switch (model.segments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_segments (_ inObserver : EBEvent) {
    self.mObserversOf_segments.insert (inObserver)
    if let object = self.propval {
      object.segments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_segments (_ inObserver : EBEvent) {
    self.mObserversOf_segments.remove (inObserver)
    if let object = self.propval {
      object.segments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_FontCharacter : ReadOnlyObject_FontCharacter {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_FontCharacter? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_FontCharacter?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : FontCharacter? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < FontCharacter? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : FontCharacter? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_FontCharacter : ReadOnlyObject_FontCharacter {

  //····················································································································
 
  func setProp (_ inValue : FontCharacter?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_FontCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_FontCharacter : ReadWriteObject_FontCharacter {

  //····················································································································

  private var mModel : ReadWriteObject_FontCharacter? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_FontCharacter?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : FontCharacter?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : FontCharacter?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < FontCharacter? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : FontCharacter? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_FontCharacter 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_FontCharacter : ReadWriteObject_FontCharacter, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : FontCharacter) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : FontCharacter) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : FontCharacter) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : FontCharacter) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : FontCharacter?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : FontCharacter?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < FontCharacter? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : FontCharacter?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : FontCharacter? { return self.mInternalValue }

  //····················································································································

  func remove (_ object : FontCharacter) {
    if object === self.mInternalValue {
      self.mInternalValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : FontCharacter) {
    if object !== self.mInternalValue {
      self.mInternalValue = object
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

