//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Class: MissingCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MissingCharacter : EBSimpleClass,
  MissingCharacter_idx,
  MissingCharacter_code,
  MissingCharacter_char {
  //····················································································································
  //   Accessing idx stored property
  //····················································································································

  var idx : Int {
    get {
      return self.idx_property.propval
    }
    set {
      self.idx_property.setProp (newValue)
    }
  }

  var idx_property_selection : EBSelection <Int> {
    get {
      return self.idx_property.prop
    }
  }

  //····················································································································
  //   Accessing code stored property
  //····················································································································

  var code : String {
    get {
      return self.code_property.propval
    }
    set {
      self.code_property.setProp (newValue)
    }
  }

  var code_property_selection : EBSelection <String> {
    get {
      return self.code_property.prop
    }
  }

  //····················································································································
  //   Accessing char stored property
  //····················································································································

  var char : String {
    get {
      return self.char_property.propval
    }
    set {
      self.char_property.setProp (newValue)
    }
  }

  var char_property_selection : EBSelection <String> {
    get {
      return self.char_property.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var idx_property = EBStoredProperty_Int (0)

  //····················································································································

  var code_property = EBStoredProperty_String ("??")

  //····················································································································

  var char_property = EBStoredProperty_String ("?")

  //····················································································································
  //    Transient properties
  //····················································································································


  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    init
  //····················································································································

  override init () {
    super.init ()
  //--- Install compute functions for transients
  //--- Install property observers for transients
  //--- Extern functions
  //--- Extern delegates
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "idx",
      idx:self.idx_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.idx_property.mObserverExplorer,
      valueExplorer:&self.idx_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "code",
      idx:self.code_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.code_property.mObserverExplorer,
      valueExplorer:&self.code_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "char",
      idx:self.char_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.char_property.mObserverExplorer,
      valueExplorer:&self.char_property.mValueExplorer
    )
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.idx_property.mObserverExplorer = nil
    self.idx_property.mValueExplorer = nil
    self.code_property.mObserverExplorer = nil
    self.code_property.mValueExplorer = nil
    self.char_property.mObserverExplorer = nil
    self.char_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveInto (dictionary : NSMutableDictionary) {
    super.saveInto (dictionary: dictionary)
    self.idx_property.storeIn (dictionary: dictionary, forKey: "idx")
    self.code_property.storeIn (dictionary: dictionary, forKey: "code")
    self.char_property.storeIn (dictionary: dictionary, forKey: "char")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUp (withDictionary dictionary : NSDictionary) {
    super.setUp (withDictionary: dictionary)
    self.idx_property.readFrom (dictionary: dictionary, forKey:"idx")
    self.code_property.readFrom (dictionary: dictionary, forKey:"code")
    self.char_property.readFrom (dictionary: dictionary, forKey:"char")
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Class as transient property
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_MissingCharacter = EBReadOnlyClassProperty <MissingCharacter>
typealias EBTransientProperty_MissingCharacter = EBTransientClassProperty <MissingCharacter>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MissingCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MissingCharacter : ReadOnlyAbstractArrayProperty <MissingCharacter> {

  //····················································································································
  // Stored property 'idx'
  //····················································································································

  private var mObserversOf_idx = EBWeakEventSet ()

  final func addEBObserverOf_idx (_ inObserver : EBEvent) {
    mObserversOf_idx.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.idx_property.addEBObserver (inObserver)
      }
    }
  }

  final func removeEBObserverOf_idx (_ inObserver : EBEvent) {
    mObserversOf_idx.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.idx_property.removeEBObserver (inObserver)
      }
    }
  }

  final func addEBObserversOf_idx_toElementsOfSet (_ inSet : Set<MissingCharacter>) {
    for managedObject in inSet {
      for observer in mObserversOf_idx {
        managedObject.idx_property.addEBObserver (observer)
      }
    }
  }

  final func removeEBObserversOf_idx_fromElementsOfSet (_ inSet : Set<MissingCharacter>) {
    for observer in mObserversOf_idx {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.idx_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  // Stored property 'code'
  //····················································································································

  private var mObserversOf_code = EBWeakEventSet ()

  final func addEBObserverOf_code (_ inObserver : EBEvent) {
    mObserversOf_code.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.code_property.addEBObserver (inObserver)
      }
    }
  }

  final func removeEBObserverOf_code (_ inObserver : EBEvent) {
    mObserversOf_code.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.code_property.removeEBObserver (inObserver)
      }
    }
  }

  final func addEBObserversOf_code_toElementsOfSet (_ inSet : Set<MissingCharacter>) {
    for managedObject in inSet {
      for observer in mObserversOf_code {
        managedObject.code_property.addEBObserver (observer)
      }
    }
  }

  final func removeEBObserversOf_code_fromElementsOfSet (_ inSet : Set<MissingCharacter>) {
    for observer in mObserversOf_code {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.code_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  // Stored property 'char'
  //····················································································································

  private var mObserversOf_char = EBWeakEventSet ()

  final func addEBObserverOf_char (_ inObserver : EBEvent) {
    mObserversOf_char.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.char_property.addEBObserver (inObserver)
      }
    }
  }

  final func removeEBObserverOf_char (_ inObserver : EBEvent) {
    mObserversOf_char.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.char_property.removeEBObserver (inObserver)
      }
    }
  }

  final func addEBObserversOf_char_toElementsOfSet (_ inSet : Set<MissingCharacter>) {
    for managedObject in inSet {
      for observer in mObserversOf_char {
        managedObject.char_property.addEBObserver (observer)
      }
    }
  }

  final func removeEBObserversOf_char_fromElementsOfSet (_ inSet : Set<MissingCharacter>) {
    for observer in mObserversOf_char {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.char_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_MissingCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MissingCharacter : ReadOnlyArrayOf_MissingCharacter {

  var readModelFunction : Optional<() -> EBSelection < [MissingCharacter] > >
 
  private var prop_cache : EBSelection < [MissingCharacter] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override var prop : EBSelection < [MissingCharacter] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MissingCharacter_idx : class {
  var idx : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MissingCharacter_code : class {
  var code : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MissingCharacter_char : class {
  var char : String { get }
}


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Array of class: MissingCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBClassArray_MissingCharacter : ReadOnlyArrayOf_MissingCharacter {

  //····················································································································

  func readInPreferencesWithKey (inKey : String) {
    let ud = UserDefaults.standard
    let value : Any? = ud.object (forKey: inKey)
    if let unwValue : Any = value {
      if let array : [NSDictionary] = unwValue as? [NSDictionary] {
        for dict in array {
          let object = MissingCharacter ()
          object.setUp (withDictionary: dict)
          mValue.append (object)
        }
      }
    }
  }

  //····················································································································

  func storeInPreferencesWithKey (inKey : String) {
    let ud = UserDefaults.standard
    var array = [NSDictionary] ()
    for object in mValue {
      let dict = NSMutableDictionary ()
      object.saveInto (dictionary: dict)
      array.append (dict)
    }
    ud.set (array, forKey:inKey)
  }

  //····················································································································

  private var mSet = Set<MissingCharacter> ()
  private var mValue = [MissingCharacter] () {
    didSet {
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Update explorer
       // if explorer != nil {
       //   owner?.updateManagedObjectToManyRelationshipDisplay (mValue, popUpButton:explorer!)
       // }
      //--- Removed object set
        let removedSet = oldSet.subtracting (mSet)
        removeEBObserversOf_idx_fromElementsOfSet (removedSet)
        removeEBObserversOf_code_fromElementsOfSet (removedSet)
        removeEBObserversOf_char_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = mSet.subtracting (oldSet)
        addEBObserversOf_idx_toElementsOfSet (addedSet)
        addEBObserversOf_code_toElementsOfSet (addedSet)
        addEBObserversOf_char_toElementsOfSet (addedSet)
      //--- Notify observers object count did change
        postEvent ()
/*        if oldValue.count != mValue.count {
          count.postEvent ()
        } */
      }
    }
  }

  //····················································································································

  override var prop : EBSelection < [MissingCharacter] > {
    get {
      return .single (mValue)
    }
  }

  //····················································································································

  func setProp (_ value:  [MissingCharacter]) { mValue = value }

  //····················································································································

  var propval : [MissingCharacter] { get { return mValue } }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
