//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    CustomObjectController_PMFontDocument_selectedCharacter
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class CustomObjectController_PMFontDocument_selectedCharacter : EBObject {
 
  var mObjectObserver = EBObserver ()

  //····················································································································

  var mSelectedObject : FontCharacterEntity? {
    didSet {
      if mSelectedObject !== oldValue {
      //--- Property advance
        oldValue?.advance.removeEBObserver (mObjectObserver)
        oldValue?.advance.removeEBObserver (self.advance)
        mSelectedObject?.advance.addEBObserver (mObjectObserver)
        mSelectedObject?.advance.addEBObserver (self.advance)
        self.advance.postEvent ()
      //--- Property characterIsDefined
        oldValue?.characterIsDefined.removeEBObserver (mObjectObserver)
        oldValue?.characterIsDefined.removeEBObserver (self.characterIsDefined)
        mSelectedObject?.characterIsDefined.addEBObserver (mObjectObserver)
        mSelectedObject?.characterIsDefined.addEBObserver (self.characterIsDefined)
        self.characterIsDefined.postEvent ()
      //--- Property gerberCode
        oldValue?.gerberCode.removeEBObserver (mObjectObserver)
        oldValue?.gerberCode.removeEBObserver (self.gerberCode)
        mSelectedObject?.gerberCode.addEBObserver (mObjectObserver)
        mSelectedObject?.gerberCode.addEBObserver (self.gerberCode)
        self.gerberCode.postEvent ()
      //--- Property gerberCodeInstructionCountMessage
        oldValue?.gerberCodeInstructionCountMessage.removeEBObserver (mObjectObserver)
        oldValue?.gerberCodeInstructionCountMessage.removeEBObserver (self.gerberCodeInstructionCountMessage)
        mSelectedObject?.gerberCodeInstructionCountMessage.addEBObserver (mObjectObserver)
        mSelectedObject?.gerberCodeInstructionCountMessage.addEBObserver (self.gerberCodeInstructionCountMessage)
        self.gerberCodeInstructionCountMessage.postEvent ()
      //--- Property segmentArrayForDrawing
        oldValue?.segmentArrayForDrawing.removeEBObserver (mObjectObserver)
        oldValue?.segmentArrayForDrawing.removeEBObserver (self.segmentArrayForDrawing)
        mSelectedObject?.segmentArrayForDrawing.addEBObserver (mObjectObserver)
        mSelectedObject?.segmentArrayForDrawing.addEBObserver (self.segmentArrayForDrawing)
        self.segmentArrayForDrawing.postEvent ()
      //--- Relationship segments
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    bind_property_advance ()
    bind_property_characterIsDefined ()
    bind_property_gerberCode ()
    bind_property_gerberCodeInstructionCountMessage ()
    bind_property_segmentArrayForDrawing ()
  }
  
  //····················································································································
  //   RELATIONSHIPS
  //····················································································································

  // var segments = ToManyRelationshipProxy_FontCharacterEntity_segments () 

  //····················································································································
  //   OBJECT OBSERVABLE PROPERTIES
  //····················································································································

  var advance = EBPropertyProxy_Int () 
  var characterIsDefined = EBTransientProperty_Bool () 
  var gerberCode = EBTransientProperty_CharacterGerberCodeClass () 
  var gerberCodeInstructionCountMessage = EBTransientProperty_String () 
  var segmentArrayForDrawing = EBTransientProperty_CharacterSegmentListClass () 

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize :NSFont.smallSystemFontSize ())
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (mEasyBindingsObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(CustomObjectController_PMFontDocument_selectedCharacter.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "advance",
      idx:self.advance.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.advance.mObserverExplorer,
      valueExplorer:&self.advance.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(CustomObjectController_PMFontDocument_selectedCharacter.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (mEasyBindingsObjectIndex) + className
    mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  func showObjectWindowFromExplorerButton (_ : Any?) {
    if mExplorerWindow == nil {
      buildExplorerWindow ()
    }
    mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  func deleteSelectionControllerWindowAction (_ : Any) {
    clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    let closeButton = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton!.target = nil
    mExplorerWindow?.orderOut (nil)
    mExplorerWindow = nil
  }

  //···················································································································*

  private final func bind_property_advance () {
    advance.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.advance.prop
      }else{
        return .noSelection
      }
    }
    self.advance.writeModelFunction = { [weak self] (inValue : Int) in
      self?.mSelectedObject?.advance.setProp (inValue)
    }
    self.advance.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      self?.mSelectedObject?.advance.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false
    }
  }

  //···················································································································*

  private final func bind_property_characterIsDefined () {
    characterIsDefined.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.characterIsDefined.prop
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_gerberCode () {
    gerberCode.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.gerberCode.prop
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_gerberCodeInstructionCountMessage () {
    gerberCodeInstructionCountMessage.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.gerberCodeInstructionCountMessage.prop
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  private final func bind_property_segmentArrayForDrawing () {
    segmentArrayForDrawing.readModelFunction = { [weak self] in
      if let model = self?.mSelectedObject {
        return model.segmentArrayForDrawing.prop
      }else{
        return .noSelection
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

