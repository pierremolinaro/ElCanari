//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(PMFontDocument) class PMFontDocument : EBManagedDocument {

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var advancementSlider : EBSlider?
  @IBOutlet var advancementTextField : EBIntField?
  @IBOutlet var commentTextView : EBTextView?
  @IBOutlet var currentCharacterStepper : EBStepper?
  @IBOutlet var currentCharacterTextField : EBIntField?
  @IBOutlet var currentCharacterView : CanariCharacterView?
  @IBOutlet var gerberCodeInstructionCountMessageTextField : EBTextObserverField?
  @IBOutlet var mAddSegmentButton : EBButton?
  @IBOutlet var mFontCharacterSelectButton : CanariFontCharacterSelectButton?
  @IBOutlet var mFontSampleStringView : CanariFontSampleStringView?
  @IBOutlet var mGerberCodeTableView : CanariCharacterGerberCodeTableView?
  @IBOutlet var mInspectorSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mMissingCharsTableView : EBTableView?
  @IBOutlet var mPageSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mSampleStringAscentTextField : EBDoubleObserverField?
  @IBOutlet var mSampleStringDescentTextField : EBDoubleObserverField?
  @IBOutlet var mSampleStringField : EBTextField?
  @IBOutlet var mSampleStringSizeField : EBDoubleField?
  @IBOutlet var mSampleStringWidthTextField : EBDoubleObserverField?
  @IBOutlet var mShowGerberDrawingFlowCheckbox : EBSwitch?
  @IBOutlet var mShowGerberDrawingIndexesCheckbox : EBSwitch?
  @IBOutlet var mSignatureTextField : CanariSignatureField?
  @IBOutlet var mVersionField : CanariVersionField?
  @IBOutlet var missingCharactersCountTextField : EBTextObserverField?
  @IBOutlet var resetVersionAndSignatureButton : EBButton?
  @IBOutlet var transparencySlider : EBSlider?
  @IBOutlet var transparencyTextField : EBDoubleField?

  //····················································································································
  //    Properties
  //····················································································································


  //····················································································································
  //    Transient properties
  //····················································································································

  var missingCharactersCountString_property = EBTransientProperty_String ()

  //····················································································································
  //    Transient arraies
  //····················································································································

  var missingCharacterDescriptorArray_property = TransientArrayOf_MissingCharacter ()

  //····················································································································
  //    Array Controllers
  //····················································································································

  var mMissingCharsController = ArrayController_PMFontDocument_mMissingCharsController ()

  //····················································································································
  //    Selection Controllers
  //····················································································································


  //····················································································································
  //    Custom object Controllers
  //····················································································································

  var selectedCharacter = CurrentCharacterController ()

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    mMissingCharsController.addExplorer (name: "mMissingCharsController", y:&y, view:view)
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName: String {
    return "PMFontDocument"
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "FontRootEntity"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : FontRootEntity { get { return mRootObject as! FontRootEntity } }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
  //--------------------------- Outlet checking
    if nil == advancementSlider {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'advancementSlider' outlet is nil") ;
//    }else if !advancementSlider!.isKindOfClass (EBSlider) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'advancementSlider' outlet is not an instance of 'EBSlider'") ;
    }
    if nil == advancementTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'advancementTextField' outlet is nil") ;
//    }else if !advancementTextField!.isKindOfClass (EBIntField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'advancementTextField' outlet is not an instance of 'EBIntField'") ;
    }
    if nil == commentTextView {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'commentTextView' outlet is nil") ;
//    }else if !commentTextView!.isKindOfClass (EBTextView) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'commentTextView' outlet is not an instance of 'EBTextView'") ;
    }
    if nil == currentCharacterStepper {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'currentCharacterStepper' outlet is nil") ;
//    }else if !currentCharacterStepper!.isKindOfClass (EBStepper) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'currentCharacterStepper' outlet is not an instance of 'EBStepper'") ;
    }
    if nil == currentCharacterTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'currentCharacterTextField' outlet is nil") ;
//    }else if !currentCharacterTextField!.isKindOfClass (EBIntField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'currentCharacterTextField' outlet is not an instance of 'EBIntField'") ;
    }
    if nil == currentCharacterView {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'currentCharacterView' outlet is nil") ;
//    }else if !currentCharacterView!.isKindOfClass (CanariCharacterView) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'currentCharacterView' outlet is not an instance of 'CanariCharacterView'") ;
    }
    if nil == gerberCodeInstructionCountMessageTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'gerberCodeInstructionCountMessageTextField' outlet is nil") ;
//    }else if !gerberCodeInstructionCountMessageTextField!.isKindOfClass (EBTextObserverField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'gerberCodeInstructionCountMessageTextField' outlet is not an instance of 'EBTextObserverField'") ;
    }
    if nil == mAddSegmentButton {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mAddSegmentButton' outlet is nil") ;
//    }else if !mAddSegmentButton!.isKindOfClass (EBButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mAddSegmentButton' outlet is not an instance of 'EBButton'") ;
    }
    if nil == mFontCharacterSelectButton {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mFontCharacterSelectButton' outlet is nil") ;
//    }else if !mFontCharacterSelectButton!.isKindOfClass (CanariFontCharacterSelectButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mFontCharacterSelectButton' outlet is not an instance of 'CanariFontCharacterSelectButton'") ;
    }
    if nil == mFontSampleStringView {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mFontSampleStringView' outlet is nil") ;
//    }else if !mFontSampleStringView!.isKindOfClass (CanariFontSampleStringView) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mFontSampleStringView' outlet is not an instance of 'CanariFontSampleStringView'") ;
    }
    if nil == mGerberCodeTableView {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mGerberCodeTableView' outlet is nil") ;
//    }else if !mGerberCodeTableView!.isKindOfClass (CanariCharacterGerberCodeTableView) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mGerberCodeTableView' outlet is not an instance of 'CanariCharacterGerberCodeTableView'") ;
    }
    if nil == mInspectorSegmentedControl {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mInspectorSegmentedControl' outlet is nil") ;
//    }else if !mInspectorSegmentedControl!.isKindOfClass (CanariSegmentedControl) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mInspectorSegmentedControl' outlet is not an instance of 'CanariSegmentedControl'") ;
    }
    if nil == mMissingCharsTableView {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mMissingCharsTableView' outlet is nil") ;
//    }else if !mMissingCharsTableView!.isKindOfClass (EBTableView) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mMissingCharsTableView' outlet is not an instance of 'EBTableView'") ;
    }
    if nil == mPageSegmentedControl {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mPageSegmentedControl' outlet is nil") ;
//    }else if !mPageSegmentedControl!.isKindOfClass (CanariSegmentedControl) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mPageSegmentedControl' outlet is not an instance of 'CanariSegmentedControl'") ;
    }
    if nil == mSampleStringAscentTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mSampleStringAscentTextField' outlet is nil") ;
//    }else if !mSampleStringAscentTextField!.isKindOfClass (EBDoubleObserverField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mSampleStringAscentTextField' outlet is not an instance of 'EBDoubleObserverField'") ;
    }
    if nil == mSampleStringDescentTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mSampleStringDescentTextField' outlet is nil") ;
//    }else if !mSampleStringDescentTextField!.isKindOfClass (EBDoubleObserverField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mSampleStringDescentTextField' outlet is not an instance of 'EBDoubleObserverField'") ;
    }
    if nil == mSampleStringField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mSampleStringField' outlet is nil") ;
//    }else if !mSampleStringField!.isKindOfClass (EBTextField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mSampleStringField' outlet is not an instance of 'EBTextField'") ;
    }
    if nil == mSampleStringSizeField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mSampleStringSizeField' outlet is nil") ;
//    }else if !mSampleStringSizeField!.isKindOfClass (EBDoubleField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mSampleStringSizeField' outlet is not an instance of 'EBDoubleField'") ;
    }
    if nil == mSampleStringWidthTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mSampleStringWidthTextField' outlet is nil") ;
//    }else if !mSampleStringWidthTextField!.isKindOfClass (EBDoubleObserverField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mSampleStringWidthTextField' outlet is not an instance of 'EBDoubleObserverField'") ;
    }
    if nil == mShowGerberDrawingFlowCheckbox {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mShowGerberDrawingFlowCheckbox' outlet is nil") ;
//    }else if !mShowGerberDrawingFlowCheckbox!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mShowGerberDrawingFlowCheckbox' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mShowGerberDrawingIndexesCheckbox {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mShowGerberDrawingIndexesCheckbox' outlet is nil") ;
//    }else if !mShowGerberDrawingIndexesCheckbox!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mShowGerberDrawingIndexesCheckbox' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mSignatureTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mSignatureTextField' outlet is nil") ;
//    }else if !mSignatureTextField!.isKindOfClass (CanariSignatureField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mSignatureTextField' outlet is not an instance of 'CanariSignatureField'") ;
    }
    if nil == mVersionField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mVersionField' outlet is nil") ;
//    }else if !mVersionField!.isKindOfClass (CanariVersionField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mVersionField' outlet is not an instance of 'CanariVersionField'") ;
    }
    if nil == missingCharactersCountTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'missingCharactersCountTextField' outlet is nil") ;
//    }else if !missingCharactersCountTextField!.isKindOfClass (EBTextObserverField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'missingCharactersCountTextField' outlet is not an instance of 'EBTextObserverField'") ;
    }
    if nil == resetVersionAndSignatureButton {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'resetVersionAndSignatureButton' outlet is nil") ;
//    }else if !resetVersionAndSignatureButton!.isKindOfClass (EBButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'resetVersionAndSignatureButton' outlet is not an instance of 'EBButton'") ;
    }
    if nil == transparencySlider {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'transparencySlider' outlet is nil") ;
//    }else if !transparencySlider!.isKindOfClass (EBSlider) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'transparencySlider' outlet is not an instance of 'EBSlider'") ;
    }
    if nil == transparencyTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'transparencyTextField' outlet is nil") ;
//    }else if !transparencyTextField!.isKindOfClass (EBDoubleField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'transparencyTextField' outlet is not an instance of 'EBDoubleField'") ;
    }
  //--------------------------- Array controllers
    self.mMissingCharsController.bind_modelAndView (
      model: self.missingCharacterDescriptorArray_property,
      tableViewArray: [mMissingCharsTableView!],
      file: #file,
      line: #line
    )
  //--------------------------- Selection controllers
  //--------------------------- Custom object controllers
    selectedCharacter.setModel (self.rootObject)
  //--- Transient compute functions
    self.missingCharactersCountString_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.characters_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.characters_property.prop) {
          case (.single (let v0)) :
            return .single (compute_PMFontDocument_missingCharactersCountString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.missingCharacterDescriptorArray_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.characters_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.characters_property.prop) {
          case (.single (let v0)) :
            return .single (compute_PMFontDocument_missingCharacterDescriptorArray (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--- Install property observers for transients
    self.rootObject.characters_property.addEBObserverOf_characterIsDefined (self.missingCharactersCountString_property)
    self.rootObject.characters_property.addEBObserverOf_characterIsDefined (self.missingCharacterDescriptorArray_property)
  //--- Install regular bindings
    mInspectorSegmentedControl?.bind_selectedPage (self.rootObject.selectedInspector_property, file: #file, line: #line)
    mPageSegmentedControl?.bind_selectedPage (self.rootObject.selectedTab_property, file: #file, line: #line)
    mSignatureTextField?.bind_signature (self.signatureObserver_property, file: #file, line: #line)
    mVersionField?.bind_version (self.versionObserver_property, file: #file, line: #line)
    mVersionField?.bind_versionShouldChange (self.versionShouldChangeObserver_property, file: #file, line: #line)
    advancementTextField?.bind_value (self.selectedCharacter.advance_property, file: #file, line: #line, sendContinously:true, autoFormatter:true)
    advancementSlider?.bind_intValue (self.selectedCharacter.advance_property, file: #file, line: #line, sendContinously:true)
    transparencyTextField?.bind_value (g_Preferences!.fontEditionTransparency_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    transparencySlider?.bind_doubleValue (g_Preferences!.fontEditionTransparency_property, file: #file, line: #line, sendContinously:true)
    mFontCharacterSelectButton?.bind_codePoint (g_Preferences!.currentCharacterCodePoint_property, file: #file, line: #line)
    currentCharacterTextField?.bind_value (g_Preferences!.currentCharacterCodePoint_property, file: #file, line: #line, sendContinously:false, autoFormatter:true)
    currentCharacterStepper?.bind_value (g_Preferences!.currentCharacterCodePoint_property, file: #file, line: #line, sendContinously:true)
    mShowGerberDrawingFlowCheckbox?.bind_value (g_Preferences!.showGerberDrawingFlow_property, file: #file, line: #line)
    mShowGerberDrawingIndexesCheckbox?.bind_value (g_Preferences!.showGerberDrawingIndexes_property, file: #file, line: #line)
    gerberCodeInstructionCountMessageTextField?.bind_valueObserver (self.selectedCharacter.gerberCodeInstructionCountMessage_property, file: #file, line: #line)
    mGerberCodeTableView?.bind_characterGerberCode (self.selectedCharacter.gerberCode_property, file: #file, line: #line)
    mSampleStringField?.bind_value (g_Preferences!.sampleString_property, file: #file, line: #line, sendContinously:true)
    mFontSampleStringView?.bind_bezierPath (self.rootObject.sampleStringBezierPath_property, file: #file, line: #line)
    mFontSampleStringView?.bind_sampleStringFontSize (g_Preferences!.sampleStringSize_property, file: #file, line: #line)
    missingCharactersCountTextField?.bind_valueObserver (self.missingCharactersCountString_property, file: #file, line: #line)
    mSampleStringSizeField?.bind_value (g_Preferences!.sampleStringSize_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    mSampleStringWidthTextField?.bind_valueObserver (self.rootObject.sampleStringBezierPathWidth_property, file: #file, line: #line, autoFormatter:false)
    mSampleStringAscentTextField?.bind_valueObserver (self.rootObject.sampleStringBezierPathAscent_property, file: #file, line: #line, autoFormatter:false)
    mSampleStringDescentTextField?.bind_valueObserver (self.rootObject.sampleStringBezierPathDescent_property, file: #file, line: #line, autoFormatter:false)
    currentCharacterView?.bind_advance (self.selectedCharacter.advance_property, file: #file, line: #line)
    currentCharacterView?.bind_characterSegmentList (self.selectedCharacter.segmentArrayForDrawing_property, file: #file, line: #line)
    currentCharacterView?.bind_transparency (g_Preferences!.fontEditionTransparency_property, file: #file, line: #line)
    currentCharacterView?.bind_displayFlow (g_Preferences!.showGerberDrawingFlow_property, file: #file, line: #line)
    currentCharacterView?.bind_displayDrawingIndexes (g_Preferences!.showGerberDrawingIndexes_property, file: #file, line: #line)
    commentTextView?.bind_value (self.rootObject.comments_property, file: #file, line: #line)
  //--- Install multiple bindings
  //--------------------------- Set targets / actions
    mAddSegmentButton?.target = self
    mAddSegmentButton?.action = #selector (PMFontDocument.addSegmentAction (_:))
    resetVersionAndSignatureButton?.target = self
    resetVersionAndSignatureButton?.action = #selector (PMFontDocument.resetVersionAndSignatureAction (_:))
  //--------------------------- Update display
    super.windowControllerDidLoadNib (aController)
    flushOutletEvents ()
  }

  //····················································································································
  //   removeWindowController
  //····················································································································

  override func removeUserInterface () {
  //--- Unbind regular bindings
    mInspectorSegmentedControl?.unbind_selectedPage ()
    mPageSegmentedControl?.unbind_selectedPage ()
    mSignatureTextField?.unbind_signature ()
    mVersionField?.unbind_version ()
    mVersionField?.unbind_versionShouldChange ()
    advancementTextField?.unbind_value ()
    advancementSlider?.unbind_intValue ()
    transparencyTextField?.unbind_value ()
    transparencySlider?.unbind_doubleValue ()
    mFontCharacterSelectButton?.unbind_codePoint ()
    currentCharacterTextField?.unbind_value ()
    currentCharacterStepper?.unbind_value ()
    mShowGerberDrawingFlowCheckbox?.unbind_value ()
    mShowGerberDrawingIndexesCheckbox?.unbind_value ()
    gerberCodeInstructionCountMessageTextField?.unbind_valueObserver ()
    mGerberCodeTableView?.unbind_characterGerberCode ()
    mSampleStringField?.unbind_value ()
    mFontSampleStringView?.unbind_bezierPath ()
    mFontSampleStringView?.unbind_sampleStringFontSize ()
    missingCharactersCountTextField?.unbind_valueObserver ()
    mSampleStringSizeField?.unbind_value ()
    mSampleStringWidthTextField?.unbind_valueObserver ()
    mSampleStringAscentTextField?.unbind_valueObserver ()
    mSampleStringDescentTextField?.unbind_valueObserver ()
    currentCharacterView?.unbind_advance ()
    currentCharacterView?.unbind_characterSegmentList ()
    currentCharacterView?.unbind_transparency ()
    currentCharacterView?.unbind_displayFlow ()
    currentCharacterView?.unbind_displayDrawingIndexes ()
    commentTextView?.unbind_value ()
  //--- Unbind multiple bindings
  //--- Uninstall compute functions for transients
    self.missingCharactersCountString_property.readModelFunction = nil
    self.missingCharacterDescriptorArray_property.readModelFunction = nil
  //--------------------------- Unbind array controllers
    mMissingCharsController.unbind_modelAndView ()
  //--------------------------- Unbind selection controllers
  //--- Uninstall property observers for transients
    self.rootObject.characters_property.removeEBObserverOf_characterIsDefined (self.missingCharactersCountString_property)
    self.rootObject.characters_property.removeEBObserverOf_characterIsDefined (self.missingCharacterDescriptorArray_property)
  //--------------------------- Remove targets / actions
    mAddSegmentButton?.target = nil
    resetVersionAndSignatureButton?.target = nil
  }

  //····················································································································

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

