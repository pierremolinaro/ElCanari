//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_FontRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_FontRoot : ReadOnlyAbstractObjectProperty <FontRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : FontRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.comments_property.removeEBObserversFrom (&self.mObserversOf_comments) // Stored property
      oldValue.nominalSize_property.removeEBObserversFrom (&self.mObserversOf_nominalSize) // Stored property
      oldValue.selectedTab_property.removeEBObserversFrom (&self.mObserversOf_selectedTab) // Stored property
      oldValue.selectedInspector_property.removeEBObserversFrom (&self.mObserversOf_selectedInspector) // Stored property
      oldValue.currentCharacterCodePoint_property.removeEBObserversFrom (&self.mObserversOf_currentCharacterCodePoint) // Stored property
      oldValue.currentCharacterCodePointString_property.removeEBObserversFrom (&self.mObserversOf_currentCharacterCodePointString) // Transient property
      oldValue.sampleStringBezierPath_property.removeEBObserversFrom (&self.mObserversOf_sampleStringBezierPath) // Transient property
      oldValue.sampleStringBezierPathWidth_property.removeEBObserversFrom (&self.mObserversOf_sampleStringBezierPathWidth) // Transient property
      oldValue.sampleStringBezierPathAscent_property.removeEBObserversFrom (&self.mObserversOf_sampleStringBezierPathAscent) // Transient property
      oldValue.sampleStringBezierPathDescent_property.removeEBObserversFrom (&self.mObserversOf_sampleStringBezierPathDescent) // Transient property
      oldValue.definedCharacters_property.removeEBObserversFrom (&self.mObserversOf_definedCharacters) // Transient property
      oldValue.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
      newValue.comments_property.addEBObserversFrom (&self.mObserversOf_comments) // Stored property
      newValue.nominalSize_property.addEBObserversFrom (&self.mObserversOf_nominalSize) // Stored property
      newValue.selectedTab_property.addEBObserversFrom (&self.mObserversOf_selectedTab) // Stored property
      newValue.selectedInspector_property.addEBObserversFrom (&self.mObserversOf_selectedInspector) // Stored property
      newValue.currentCharacterCodePoint_property.addEBObserversFrom (&self.mObserversOf_currentCharacterCodePoint) // Stored property
      newValue.currentCharacterCodePointString_property.addEBObserversFrom (&self.mObserversOf_currentCharacterCodePointString) // Transient property
      newValue.sampleStringBezierPath_property.addEBObserversFrom (&self.mObserversOf_sampleStringBezierPath) // Transient property
      newValue.sampleStringBezierPathWidth_property.addEBObserversFrom (&self.mObserversOf_sampleStringBezierPathWidth) // Transient property
      newValue.sampleStringBezierPathAscent_property.addEBObserversFrom (&self.mObserversOf_sampleStringBezierPathAscent) // Transient property
      newValue.sampleStringBezierPathDescent_property.addEBObserversFrom (&self.mObserversOf_sampleStringBezierPathDescent) // Transient property
      newValue.definedCharacters_property.addEBObserversFrom (&self.mObserversOf_definedCharacters) // Transient property
      newValue.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private final var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final var comments_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.comments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.comments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.comments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'nominalSize' stored property
  //····················································································································

  private final var mObserversOf_nominalSize = EBWeakEventSet ()

  //····················································································································

  final var nominalSize_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.nominalSize_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_nominalSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_nominalSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.nominalSize_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_nominalSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_nominalSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.nominalSize_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'selectedTab' stored property
  //····················································································································

  private final var mObserversOf_selectedTab = EBWeakEventSet ()

  //····················································································································

  final var selectedTab_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedTab_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedTab.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedTab_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedTab.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedTab_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private final var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  final var selectedInspector_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedInspector_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedInspector.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedInspector_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedInspector.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedInspector_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'currentCharacterCodePoint' stored property
  //····················································································································

  private final var mObserversOf_currentCharacterCodePoint = EBWeakEventSet ()

  //····················································································································

  final var currentCharacterCodePoint_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.currentCharacterCodePoint_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_currentCharacterCodePoint (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_currentCharacterCodePoint.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.currentCharacterCodePoint_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_currentCharacterCodePoint (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_currentCharacterCodePoint.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.currentCharacterCodePoint_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'currentCharacterCodePointString' transient property
  //····················································································································

  private final var mObserversOf_currentCharacterCodePointString = EBWeakEventSet ()

  //····················································································································

  final var currentCharacterCodePointString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.currentCharacterCodePointString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_currentCharacterCodePointString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_currentCharacterCodePointString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.currentCharacterCodePointString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_currentCharacterCodePointString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_currentCharacterCodePointString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.currentCharacterCodePointString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_currentCharacterCodePointString_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_currentCharacterCodePointString.apply { (_ observer : EBEvent) in
        managedObject.currentCharacterCodePointString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_currentCharacterCodePointString_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_currentCharacterCodePointString.apply { (_ observer : EBEvent) in
        managedObject.currentCharacterCodePointString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPath' transient property
  //····················································································································

  private final var mObserversOf_sampleStringBezierPath = EBWeakEventSet ()

  //····················································································································

  final var sampleStringBezierPath_property_selection : EBSelection <NSBezierPath?> {
    if let model = self.propval {
      switch (model.sampleStringBezierPath_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPath.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sampleStringBezierPath_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPath.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sampleStringBezierPath_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPath_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPath.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPath_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPath.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPathWidth' transient property
  //····················································································································

  private final var mObserversOf_sampleStringBezierPathWidth = EBWeakEventSet ()

  //····················································································································

  final var sampleStringBezierPathWidth_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.sampleStringBezierPathWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPathWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPathWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sampleStringBezierPathWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPathWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPathWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sampleStringBezierPathWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPathWidth_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPathWidth.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPathWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPathWidth_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPathWidth.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPathWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPathAscent' transient property
  //····················································································································

  private final var mObserversOf_sampleStringBezierPathAscent = EBWeakEventSet ()

  //····················································································································

  final var sampleStringBezierPathAscent_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.sampleStringBezierPathAscent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPathAscent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPathAscent.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sampleStringBezierPathAscent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPathAscent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPathAscent.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sampleStringBezierPathAscent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPathAscent_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPathAscent.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPathAscent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPathAscent_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPathAscent.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPathAscent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPathDescent' transient property
  //····················································································································

  private final var mObserversOf_sampleStringBezierPathDescent = EBWeakEventSet ()

  //····················································································································

  final var sampleStringBezierPathDescent_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.sampleStringBezierPathDescent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPathDescent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPathDescent.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sampleStringBezierPathDescent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPathDescent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPathDescent.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sampleStringBezierPathDescent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPathDescent_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPathDescent.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPathDescent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPathDescent_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPathDescent.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPathDescent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'definedCharacters' transient property
  //····················································································································

  private final var mObserversOf_definedCharacters = EBWeakEventSet ()

  //····················································································································

  final var definedCharacters_property_selection : EBSelection <DefinedCharactersInDevice?> {
    if let model = self.propval {
      switch (model.definedCharacters_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_definedCharacters (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_definedCharacters.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.definedCharacters_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_definedCharacters (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_definedCharacters.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.definedCharacters_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_definedCharacters_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_definedCharacters.apply { (_ observer : EBEvent) in
        managedObject.definedCharacters_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_definedCharacters_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_definedCharacters.apply { (_ observer : EBEvent) in
        managedObject.definedCharacters_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: characters
  //····················································································································

  private final var mObserversOf_characters = EBWeakEventSet ()

  //····················································································································

  final var characters_property_selection : EBSelection <[FontCharacter]> {
    if let model = self.propval {
      switch (model.characters_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_characters (_ inObserver : EBEvent) {
    self.mObserversOf_characters.insert (inObserver)
    if let object = self.propval {
      object.characters_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_characters (_ inObserver : EBEvent) {
    self.mObserversOf_characters.remove (inObserver)
    if let object = self.propval {
      object.characters_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

 // override init () {
//    super.init ()
  //--- Configure comments simple stored property
 /*   self.comments_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.comments_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.comments_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.comments_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.comments_property) */
  //--- Configure nominalSize simple stored property
 /*   self.nominalSize_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.nominalSize_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.nominalSize_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.nominalSize_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.nominalSize_property) */
  //--- Configure selectedTab simple stored property
 /*   self.selectedTab_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.selectedTab_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.selectedTab_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.selectedTab_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.selectedTab_property) */
  //--- Configure selectedInspector simple stored property
 /*   self.selectedInspector_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.selectedInspector_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.selectedInspector_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.selectedInspector_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.selectedInspector_property) */
  //--- Configure currentCharacterCodePoint simple stored property
 /*   self.currentCharacterCodePoint_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.currentCharacterCodePoint_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.currentCharacterCodePoint_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.currentCharacterCodePoint_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.currentCharacterCodePoint_property) */
 // }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject FontRoot
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_FontRoot : ReadOnlyObject_FontRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_FontRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_FontRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : FontRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < FontRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : FontRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_FontRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_FontRoot : ReadOnlyObject_FontRoot {

  //····················································································································
 
  func setProp (_ inValue : FontRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_FontRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_FontRoot : ReadWriteObject_FontRoot {

  //····················································································································

  private var mModel : ReadWriteObject_FontRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_FontRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : FontRoot?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : FontRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < FontRoot? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : FontRoot? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_FontRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_FontRoot : ReadWriteObject_FontRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : FontRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : FontRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : FontRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : FontRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : FontRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < FontRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : FontRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : FontRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

