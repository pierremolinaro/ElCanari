//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: FontRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class FontRootEntity : EBManagedObject,
  FontRootEntity_comments,
  FontRootEntity_selectedTab,
  FontRootEntity_selectedInspector,
  FontRootEntity_sampleStringBezierPath,
  FontRootEntity_sampleStringBezierPathWidth,
  FontRootEntity_sampleStringBezierPathAscent,
  FontRootEntity_sampleStringBezierPathDescent {

  //····················································································································
  //    Properties
  //····················································································································

  var comments = EBStoredProperty_String ("")
  var selectedTab = EBStoredProperty_Int (0)
  var selectedInspector = EBStoredProperty_Int (0)

  //····················································································································
  //    Transient properties
  //····················································································································

  var sampleStringBezierPath = EBTransientProperty_CGPath ()
  var sampleStringBezierPathWidth = EBTransientProperty_Double ()
  var sampleStringBezierPathAscent = EBTransientProperty_Double ()
  var sampleStringBezierPathDescent = EBTransientProperty_Double ()

  //····················································································································
  //    Relationships
  //····················································································································

  var characters = ToManyRelationship_FontRootEntity_characters ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    sampleStringBezierPath.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.characters.prop.kind ()
        kind &= unwSelf.characters.prop.kind ()
        kind &= g_Preferences!.sampleString.prop.kind ()
        kind &= g_Preferences!.sampleStringSize.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.characters.prop, unwSelf.characters.prop, g_Preferences!.sampleString.prop, g_Preferences!.sampleStringSize.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1), .singleSelection (let v2), .singleSelection (let v3)) :
            return .singleSelection (compute_FontRootEntity_sampleStringBezierPath (v0, v1, v2, v3))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    sampleStringBezierPathWidth.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.sampleStringBezierPath.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.sampleStringBezierPath.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_FontRootEntity_sampleStringBezierPathWidth (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    sampleStringBezierPathAscent.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.sampleStringBezierPath.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.sampleStringBezierPath.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_FontRootEntity_sampleStringBezierPathAscent (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    sampleStringBezierPathDescent.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.sampleStringBezierPath.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.sampleStringBezierPath.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_FontRootEntity_sampleStringBezierPathDescent (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  //--- Install property observers for transients
    characters.addEBObserverOf_segmentArrayForDrawing (sampleStringBezierPath)
    characters.addEBObserverOf_advance (sampleStringBezierPath)
    g_Preferences?.sampleString.addEBObserver (sampleStringBezierPath)
    g_Preferences?.sampleStringSize.addEBObserver (sampleStringBezierPath)
    sampleStringBezierPath.addEBObserver (sampleStringBezierPathWidth)
    sampleStringBezierPath.addEBObserver (sampleStringBezierPathAscent)
    sampleStringBezierPath.addEBObserver (sampleStringBezierPathDescent)
  //--- Install undoers for properties
    self.comments.undoManager = undoManager ()
    self.selectedTab.undoManager = undoManager ()
    self.selectedInspector.undoManager = undoManager ()
  //--- Install owner for relationships
    characters.owner = self
  //--- register properties for handling signature
    characters.setSignatureObserver (observer: self)
    comments.setSignatureObserver (observer: self)
  }

  //····················································································································

  deinit {
  //--- Remove observers
    characters.removeEBObserverOf_segmentArrayForDrawing (sampleStringBezierPath)
    characters.removeEBObserverOf_advance (sampleStringBezierPath)
    g_Preferences?.sampleString.removeEBObserver (sampleStringBezierPath)
    g_Preferences?.sampleStringSize.removeEBObserver (sampleStringBezierPath)
    sampleStringBezierPath.removeEBObserver (sampleStringBezierPathWidth)
    sampleStringBezierPath.removeEBObserver (sampleStringBezierPathAscent)
    sampleStringBezierPath.removeEBObserver (sampleStringBezierPathDescent)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "comments",
      idx:self.comments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.comments.mObserverExplorer,
      valueExplorer:&self.comments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedTab",
      idx:self.selectedTab.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedTab.mObserverExplorer,
      valueExplorer:&self.selectedTab.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedInspector",
      idx:self.selectedInspector.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedInspector.mObserverExplorer,
      valueExplorer:&self.selectedInspector.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "sampleStringBezierPath",
      idx:self.sampleStringBezierPath.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sampleStringBezierPath.mObserverExplorer,
      valueExplorer:&self.sampleStringBezierPath.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sampleStringBezierPathWidth",
      idx:self.sampleStringBezierPathWidth.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sampleStringBezierPathWidth.mObserverExplorer,
      valueExplorer:&self.sampleStringBezierPathWidth.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sampleStringBezierPathAscent",
      idx:self.sampleStringBezierPathAscent.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sampleStringBezierPathAscent.mObserverExplorer,
      valueExplorer:&self.sampleStringBezierPathAscent.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sampleStringBezierPathDescent",
      idx:self.sampleStringBezierPathDescent.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sampleStringBezierPathDescent.mObserverExplorer,
      valueExplorer:&self.sampleStringBezierPathDescent.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "characters",
      idx:characters.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&characters.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.comments.mObserverExplorer = nil
    self.comments.mValueExplorer = nil
    self.selectedTab.mObserverExplorer = nil
    self.selectedTab.mValueExplorer = nil
    self.selectedInspector.mObserverExplorer = nil
    self.selectedInspector.mValueExplorer = nil
    // characters.mObserverExplorer = nil
    characters.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.comments.storeIn (dictionary: ioDictionary, forKey: "comments")
    self.selectedTab.storeIn (dictionary: ioDictionary, forKey: "selectedTab")
    self.selectedInspector.storeIn (dictionary: ioDictionary, forKey: "selectedInspector")
    store (managedObjectArray: characters.propval as NSArray, relationshipName:"characters", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.comments.readFrom (dictionary: inDictionary, forKey:"comments")
    self.selectedTab.readFrom (dictionary: inDictionary, forKey:"selectedTab")
    self.selectedInspector.readFrom (dictionary: inDictionary, forKey:"selectedInspector")
    characters.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "characters",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [FontCharacterEntity])
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    self.characters.setProp (Array ()) // Set relationships to nil
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    characters.setProp (Array ())
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in characters.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (characters.signature ())
    crc.accumulateUInt32 (comments.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_FontRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_FontRootEntity : ReadOnlyAbstractArrayProperty <FontRootEntity> {

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_comments.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.comments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_comments.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.comments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_comments {
        managedObject.comments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for observer in mObserversOf_comments {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedTab' stored property
  //····················································································································

  private var mObserversOf_selectedTab = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedTab.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.selectedTab.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedTab.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.selectedTab.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedTab_toElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedTab {
        managedObject.selectedTab.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedTab_fromElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for observer in mObserversOf_selectedTab {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedTab.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedInspector.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.selectedInspector.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedInspector.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.selectedInspector.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedInspector_toElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedInspector {
        managedObject.selectedInspector.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedInspector_fromElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for observer in mObserversOf_selectedInspector {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedInspector.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPath' transient property
  //····················································································································

  private var mObserversOf_sampleStringBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_sampleStringBezierPath.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPath.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_sampleStringBezierPath.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPath.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPath_toElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPath {
        managedObject.sampleStringBezierPath.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPath_fromElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPath {
        managedObject.sampleStringBezierPath.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPathWidth' transient property
  //····················································································································

  private var mObserversOf_sampleStringBezierPathWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPathWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_sampleStringBezierPathWidth.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathWidth.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPathWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_sampleStringBezierPathWidth.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathWidth.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPathWidth_toElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPathWidth {
        managedObject.sampleStringBezierPathWidth.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPathWidth_fromElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPathWidth {
        managedObject.sampleStringBezierPathWidth.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPathAscent' transient property
  //····················································································································

  private var mObserversOf_sampleStringBezierPathAscent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPathAscent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_sampleStringBezierPathAscent.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathAscent.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPathAscent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_sampleStringBezierPathAscent.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathAscent.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPathAscent_toElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPathAscent {
        managedObject.sampleStringBezierPathAscent.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPathAscent_fromElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPathAscent {
        managedObject.sampleStringBezierPathAscent.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPathDescent' transient property
  //····················································································································

  private var mObserversOf_sampleStringBezierPathDescent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPathDescent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_sampleStringBezierPathDescent.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathDescent.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPathDescent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_sampleStringBezierPathDescent.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathDescent.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPathDescent_toElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPathDescent {
        managedObject.sampleStringBezierPathDescent.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPathDescent_fromElementsOfSet (_ inSet : Set<FontRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPathDescent {
        managedObject.sampleStringBezierPathDescent.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_FontRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_FontRootEntity : ReadOnlyArrayOf_FontRootEntity {

  var readModelFunction : Optional<() -> EBProperty < [FontRootEntity] > >

  private var prop_cache : EBProperty < [FontRootEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <FontRootEntity> ()

  override var prop : EBProperty < [FontRootEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <FontRootEntity>
        switch prop_cache! {
        case .multipleSelection, .noSelection :
          newSet = Set <FontRootEntity> ()
        case .singleSelection (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_comments_fromElementsOfSet (removedSet)
        removeEBObserversOf_selectedTab_fromElementsOfSet (removedSet)
        removeEBObserversOf_selectedInspector_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_sampleStringBezierPath_fromElementsOfSet (removedSet)
        removeEBObserversOf_sampleStringBezierPathWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_sampleStringBezierPathAscent_fromElementsOfSet (removedSet)
        removeEBObserversOf_sampleStringBezierPathDescent_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_comments_toElementsOfSet (addedSet)
        addEBObserversOf_selectedTab_toElementsOfSet (addedSet)
        addEBObserversOf_selectedInspector_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_sampleStringBezierPath_toElementsOfSet (addedSet)
        addEBObserversOf_sampleStringBezierPathWidth_toElementsOfSet (addedSet)
        addEBObserversOf_sampleStringBezierPathAscent_toElementsOfSet (addedSet)
        addEBObserversOf_sampleStringBezierPathDescent_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRootEntity_comments : class {
  var comments : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRootEntity_selectedTab : class {
  var selectedTab : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRootEntity_selectedInspector : class {
  var selectedInspector : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRootEntity_sampleStringBezierPath : class {
  var sampleStringBezierPath : EBTransientProperty_CGPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRootEntity_sampleStringBezierPathWidth : class {
  var sampleStringBezierPathWidth : EBTransientProperty_Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRootEntity_sampleStringBezierPathAscent : class {
  var sampleStringBezierPathAscent : EBTransientProperty_Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRootEntity_sampleStringBezierPathDescent : class {
  var sampleStringBezierPathDescent : EBTransientProperty_Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: characters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_FontRootEntity_characters : ReadOnlyArrayOf_FontCharacterEntity {

  //····················································································································
 
  func setProp (_ value :  [FontCharacterEntity]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: characters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_FontRootEntity_characters :
ToManyRelationshipReadWrite_FontRootEntity_characters, EBSignatureObserverProtocol {
  weak var owner : FontRootEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set<FontCharacterEntity> ()
  private var mValue = [FontCharacterEntity] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_advance_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_characterIsDefined_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_gerberCode_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_gerberCodeInstructionCountMessage_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_segmentArrayForDrawing_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : FontCharacterEntity in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_advance_toElementsOfSet (addedObjectSet)
        addEBObserversOf_characterIsDefined_toElementsOfSet (addedObjectSet)
        addEBObserversOf_gerberCode_toElementsOfSet (addedObjectSet)
        addEBObserversOf_gerberCodeInstructionCountMessage_toElementsOfSet (addedObjectSet)
        addEBObserversOf_segmentArrayForDrawing_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBProperty < [FontCharacterEntity] > {
    get {
      return .singleSelection (mValue)
    }
  }

  override func setProp (_ value :  [FontCharacterEntity]) { mValue = value }

  var propval : [FontCharacterEntity] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [FontCharacterEntity]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : FontCharacterEntity) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : FontCharacterEntity) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

