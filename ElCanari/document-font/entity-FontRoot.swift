//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_comments : class {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_nominalSize : class {
  var nominalSize : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_selectedTab : class {
  var selectedTab : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_selectedInspector : class {
  var selectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_currentCharacterCodePoint : class {
  var currentCharacterCodePoint : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_currentCharacterCodePointString : class {
  var currentCharacterCodePointString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_sampleStringBezierPath : class {
  var sampleStringBezierPath : NSBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_sampleStringBezierPathWidth : class {
  var sampleStringBezierPathWidth : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_sampleStringBezierPathAscent : class {
  var sampleStringBezierPathAscent : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_sampleStringBezierPathDescent : class {
  var sampleStringBezierPathDescent : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_definedCharacters : class {
  var definedCharacters : DefinedCharactersInDevice? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: FontRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class FontRoot : EBManagedObject,
         FontRoot_comments,
         FontRoot_nominalSize,
         FontRoot_selectedTab,
         FontRoot_selectedInspector,
         FontRoot_currentCharacterCodePoint,
         FontRoot_currentCharacterCodePointString,
         FontRoot_sampleStringBezierPath,
         FontRoot_sampleStringBezierPathWidth,
         FontRoot_sampleStringBezierPathAscent,
         FontRoot_sampleStringBezierPathDescent,
         FontRoot_definedCharacters,
         FontRoot_issues {

  //····················································································································
  //   Atomic property: comments
  //····················································································································

  var comments_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var comments : String {
    get { return self.comments_property.propval }
    set { self.comments_property.setProp (newValue) }
  }

  //····················································································································

  var comments_property_selection : EBSelection <String> { return self.comments_property.prop }

  //····················································································································
  //   Atomic property: nominalSize
  //····················································································································

  var nominalSize_property = EBStoredProperty_Int (defaultValue: 14)

  //····················································································································

  var nominalSize : Int {
    get { return self.nominalSize_property.propval }
    set { self.nominalSize_property.setProp (newValue) }
  }

  //····················································································································

  var nominalSize_property_selection : EBSelection <Int> { return self.nominalSize_property.prop }

  //····················································································································
  //   Atomic property: selectedTab
  //····················································································································

  var selectedTab_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var selectedTab : Int {
    get { return self.selectedTab_property.propval }
    set { self.selectedTab_property.setProp (newValue) }
  }

  //····················································································································

  var selectedTab_property_selection : EBSelection <Int> { return self.selectedTab_property.prop }

  //····················································································································
  //   Atomic property: selectedInspector
  //····················································································································

  var selectedInspector_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var selectedInspector : Int {
    get { return self.selectedInspector_property.propval }
    set { self.selectedInspector_property.setProp (newValue) }
  }

  //····················································································································

  var selectedInspector_property_selection : EBSelection <Int> { return self.selectedInspector_property.prop }

  //····················································································································
  //   Atomic property: currentCharacterCodePoint
  //····················································································································

  var currentCharacterCodePoint_property = EBStoredProperty_Int (defaultValue: 32)

  //····················································································································

  var currentCharacterCodePoint : Int {
    get { return self.currentCharacterCodePoint_property.propval }
    set { self.currentCharacterCodePoint_property.setProp (newValue) }
  }

  //····················································································································

  var currentCharacterCodePoint_property_selection : EBSelection <Int> { return self.currentCharacterCodePoint_property.prop }

  //····················································································································

  func currentCharacterCodePoint_validateAndSetProp (_ inCandidateValue : Int, windowForSheet inWindow:NSWindow?) -> Bool {
    return self.currentCharacterCodePoint_property.validateAndSetProp (inCandidateValue, windowForSheet:inWindow)
  }

  //····················································································································
  //   To many property: characters
  //····················································································································

  var characters_property = StoredArrayOf_FontCharacter ()

  //····················································································································

  var characters_property_selection : EBSelection < [FontCharacter] > {
    return self.characters_property.prop
  }

  //····················································································································

  var characters : [FontCharacter] {
    get { return self.characters_property.propval }
    set { self.characters_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: currentCharacterCodePointString
  //····················································································································

  var currentCharacterCodePointString_property = EBTransientProperty_String ()

  //····················································································································

  var currentCharacterCodePointString_property_selection : EBSelection <String> {
    return self.currentCharacterCodePointString_property.prop
  }

  //····················································································································

  var currentCharacterCodePointString : String? {
    switch self.currentCharacterCodePointString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sampleStringBezierPath
  //····················································································································

  var sampleStringBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  var sampleStringBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.sampleStringBezierPath_property.prop
  }

  //····················································································································

  var sampleStringBezierPath : NSBezierPath? {
    switch self.sampleStringBezierPath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sampleStringBezierPathWidth
  //····················································································································

  var sampleStringBezierPathWidth_property = EBTransientProperty_String ()

  //····················································································································

  var sampleStringBezierPathWidth_property_selection : EBSelection <String> {
    return self.sampleStringBezierPathWidth_property.prop
  }

  //····················································································································

  var sampleStringBezierPathWidth : String? {
    switch self.sampleStringBezierPathWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sampleStringBezierPathAscent
  //····················································································································

  var sampleStringBezierPathAscent_property = EBTransientProperty_String ()

  //····················································································································

  var sampleStringBezierPathAscent_property_selection : EBSelection <String> {
    return self.sampleStringBezierPathAscent_property.prop
  }

  //····················································································································

  var sampleStringBezierPathAscent : String? {
    switch self.sampleStringBezierPathAscent_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sampleStringBezierPathDescent
  //····················································································································

  var sampleStringBezierPathDescent_property = EBTransientProperty_String ()

  //····················································································································

  var sampleStringBezierPathDescent_property_selection : EBSelection <String> {
    return self.sampleStringBezierPathDescent_property.prop
  }

  //····················································································································

  var sampleStringBezierPathDescent : String? {
    switch self.sampleStringBezierPathDescent_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: definedCharacters
  //····················································································································

  var definedCharacters_property = EBTransientProperty_DefinedCharactersInDevice ()

  //····················································································································

  var definedCharacters_property_selection : EBSelection <DefinedCharactersInDevice> {
    return self.definedCharacters_property.prop
  }

  //····················································································································

  var definedCharacters : DefinedCharactersInDevice? {
    switch self.definedCharacters_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  var issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray> {
    return self.issues_property.prop
  }

  //····················································································································

  var issues : CanariIssueArray? {
    switch self.issues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: comments
    self.comments_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: nominalSize
    self.nominalSize_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectedTab
    self.selectedTab_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: currentCharacterCodePoint
    self.currentCharacterCodePoint_property.ebUndoManager = self.ebUndoManager
    self.currentCharacterCodePoint_property.validationFunction = { [weak self] in
      return self?.validate_currentCharacterCodePoint (currentValue: $0, proposedValue: $1) ?? .rejectWithBeep
    }
  //--- To many property: characters (no option)
    self.characters_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: currentCharacterCodePointString
    self.currentCharacterCodePointString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.currentCharacterCodePoint_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.currentCharacterCodePoint_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontRoot_currentCharacterCodePointString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.currentCharacterCodePoint_property.addEBObserver (self.currentCharacterCodePointString_property)
  //--- Atomic property: sampleStringBezierPath
    self.sampleStringBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.nominalSize_property_selection.kind ()
        kind &= unwSelf.characters_property_selection.kind ()
        kind &= unwSelf.characters_property_selection.kind ()
        kind &= g_Preferences!.sampleString_property_selection.kind ()
        kind &= g_Preferences!.sampleStringSize_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.nominalSize_property_selection, unwSelf.characters_property_selection, unwSelf.characters_property_selection, g_Preferences!.sampleString_property_selection, g_Preferences!.sampleStringSize_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_FontRoot_sampleStringBezierPath (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.nominalSize_property.addEBObserver (self.sampleStringBezierPath_property)
    self.characters_property.addEBObserverOf_segmentArrayForDrawing (self.sampleStringBezierPath_property)
    self.characters_property.addEBObserverOf_advance (self.sampleStringBezierPath_property)
    g_Preferences?.sampleString_property.addEBObserver (self.sampleStringBezierPath_property)
    g_Preferences?.sampleStringSize_property.addEBObserver (self.sampleStringBezierPath_property)
  //--- Atomic property: sampleStringBezierPathWidth
    self.sampleStringBezierPathWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.sampleStringBezierPath_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.sampleStringBezierPath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontRoot_sampleStringBezierPathWidth (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.sampleStringBezierPath_property.addEBObserver (self.sampleStringBezierPathWidth_property)
  //--- Atomic property: sampleStringBezierPathAscent
    self.sampleStringBezierPathAscent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.sampleStringBezierPath_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.sampleStringBezierPath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontRoot_sampleStringBezierPathAscent (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.sampleStringBezierPath_property.addEBObserver (self.sampleStringBezierPathAscent_property)
  //--- Atomic property: sampleStringBezierPathDescent
    self.sampleStringBezierPathDescent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.sampleStringBezierPath_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.sampleStringBezierPath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontRoot_sampleStringBezierPathDescent (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.sampleStringBezierPath_property.addEBObserver (self.sampleStringBezierPathDescent_property)
  //--- Atomic property: definedCharacters
    self.definedCharacters_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.characters_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.characters_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontRoot_definedCharacters (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.characters_property.addEBObserverOf_codePoint (self.definedCharacters_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.characters_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.characters_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontRoot_issues (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.characters_property.addEBObserverOf_issues (self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.characters_property.setSignatureObserver (observer: self)
    self.comments_property.setSignatureObserver (observer: self)
    self.nominalSize_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.currentCharacterCodePoint_property.removeEBObserver (self.currentCharacterCodePointString_property)
    self.nominalSize_property.removeEBObserver (self.sampleStringBezierPath_property)
    self.characters_property.removeEBObserverOf_segmentArrayForDrawing (self.sampleStringBezierPath_property)
    self.characters_property.removeEBObserverOf_advance (self.sampleStringBezierPath_property)
    g_Preferences?.sampleString_property.removeEBObserver (self.sampleStringBezierPath_property)
    g_Preferences?.sampleStringSize_property.removeEBObserver (self.sampleStringBezierPath_property)
    self.sampleStringBezierPath_property.removeEBObserver (self.sampleStringBezierPathWidth_property)
    self.sampleStringBezierPath_property.removeEBObserver (self.sampleStringBezierPathAscent_property)
    self.sampleStringBezierPath_property.removeEBObserver (self.sampleStringBezierPathDescent_property)
    self.characters_property.removeEBObserverOf_codePoint (self.definedCharacters_property)
    self.characters_property.removeEBObserverOf_issues (self.issues_property)
  //--- Unregister properties for handling signature
    self.characters_property.setSignatureObserver (observer: nil)
    self.comments_property.setSignatureObserver (observer: nil)
    self.nominalSize_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "comments",
      idx:self.comments_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.comments_property.mObserverExplorer,
      valueExplorer:&self.comments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "nominalSize",
      idx:self.nominalSize_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.nominalSize_property.mObserverExplorer,
      valueExplorer:&self.nominalSize_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedTab",
      idx:self.selectedTab_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedTab_property.mObserverExplorer,
      valueExplorer:&self.selectedTab_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedInspector",
      idx:self.selectedInspector_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedInspector_property.mObserverExplorer,
      valueExplorer:&self.selectedInspector_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "currentCharacterCodePoint",
      idx:self.currentCharacterCodePoint_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.currentCharacterCodePoint_property.mObserverExplorer,
      valueExplorer:&self.currentCharacterCodePoint_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "currentCharacterCodePointString",
      idx:self.currentCharacterCodePointString_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.currentCharacterCodePointString_property.mObserverExplorer,
      valueExplorer:&self.currentCharacterCodePointString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sampleStringBezierPath",
      idx:self.sampleStringBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sampleStringBezierPath_property.mObserverExplorer,
      valueExplorer:&self.sampleStringBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sampleStringBezierPathWidth",
      idx:self.sampleStringBezierPathWidth_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sampleStringBezierPathWidth_property.mObserverExplorer,
      valueExplorer:&self.sampleStringBezierPathWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sampleStringBezierPathAscent",
      idx:self.sampleStringBezierPathAscent_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sampleStringBezierPathAscent_property.mObserverExplorer,
      valueExplorer:&self.sampleStringBezierPathAscent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sampleStringBezierPathDescent",
      idx:self.sampleStringBezierPathDescent_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sampleStringBezierPathDescent_property.mObserverExplorer,
      valueExplorer:&self.sampleStringBezierPathDescent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "definedCharacters",
      idx:self.definedCharacters_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.definedCharacters_property.mObserverExplorer,
      valueExplorer:&self.definedCharacters_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "characters",
      idx:characters_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&characters_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: comments
    self.comments_property.mObserverExplorer = nil
    self.comments_property.mValueExplorer = nil
  //--- Atomic property: nominalSize
    self.nominalSize_property.mObserverExplorer = nil
    self.nominalSize_property.mValueExplorer = nil
  //--- Atomic property: selectedTab
    self.selectedTab_property.mObserverExplorer = nil
    self.selectedTab_property.mValueExplorer = nil
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.mObserverExplorer = nil
    self.selectedInspector_property.mValueExplorer = nil
  //--- Atomic property: currentCharacterCodePoint
    self.currentCharacterCodePoint_property.mObserverExplorer = nil
    self.currentCharacterCodePoint_property.mValueExplorer = nil
  //--- To many property: characters
    self.characters_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.characters_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: comments
    self.comments_property.storeIn (dictionary: ioDictionary, forKey:"comments")
  //--- Atomic property: nominalSize
    self.nominalSize_property.storeIn (dictionary: ioDictionary, forKey:"nominalSize")
  //--- Atomic property: selectedTab
    self.selectedTab_property.storeIn (dictionary: ioDictionary, forKey:"selectedTab")
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.storeIn (dictionary: ioDictionary, forKey:"selectedInspector")
  //--- Atomic property: currentCharacterCodePoint
    self.currentCharacterCodePoint_property.storeIn (dictionary: ioDictionary, forKey:"currentCharacterCodePoint")
  //--- To many property: characters (Custom store)
    customStore_FontCharacter_characters (self.characters_property.propval, intoDictionary: ioDictionary)
    /* self.store (
      managedObjectArray: self.characters_property.propval,
      relationshipName: "characters",
      intoDictionary: ioDictionary
    ) */
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: characters (Custom store)
    self.characters_property.setProp (customRead_FontCharacter_characters (from: inDictionary, with: self.ebUndoManager))
    /* self.characters_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "characters",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [FontCharacter]) */
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: comments
    self.comments_property.readFrom (dictionary: inDictionary, forKey:"comments")
  //--- Atomic property: nominalSize
    self.nominalSize_property.readFrom (dictionary: inDictionary, forKey:"nominalSize")
  //--- Atomic property: selectedTab
    self.selectedTab_property.readFrom (dictionary: inDictionary, forKey:"selectedTab")
  //--- Atomic property: selectedInspector
    self.selectedInspector_property.readFrom (dictionary: inDictionary, forKey:"selectedInspector")
  //--- Atomic property: currentCharacterCodePoint
    self.currentCharacterCodePoint_property.readFrom (dictionary: inDictionary, forKey:"currentCharacterCodePoint")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: characters
    for managedObject in self.characters_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: characters (custom store)
    /* for managedObject in self.characters_property.propval {
      objects.append (managedObject)
    } */
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.characters_property.signature ())
    crc.accumulateUInt32 (self.comments_property.signature ())
    crc.accumulateUInt32 (self.nominalSize_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_FontRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_FontRoot : ReadOnlyAbstractArrayProperty <FontRoot> {

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_comments.apply { (_ observer : EBEvent) in
        managedObject.comments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    self.mObserversOf_comments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'nominalSize' stored property
  //····················································································································

  private var mObserversOf_nominalSize = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_nominalSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_nominalSize.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nominalSize_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_nominalSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_nominalSize.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nominalSize_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_nominalSize_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_nominalSize.apply { (_ observer : EBEvent) in
        managedObject.nominalSize_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_nominalSize_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    self.mObserversOf_nominalSize.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.nominalSize_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedTab' stored property
  //····················································································································

  private var mObserversOf_selectedTab = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedTab.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedTab_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedTab.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedTab_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedTab_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedTab.apply { (_ observer : EBEvent) in
        managedObject.selectedTab_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedTab_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    self.mObserversOf_selectedTab.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedTab_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedInspector_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedInspector.apply { (_ observer : EBEvent) in
        managedObject.selectedInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedInspector_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    self.mObserversOf_selectedInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'currentCharacterCodePoint' stored property
  //····················································································································

  private var mObserversOf_currentCharacterCodePoint = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_currentCharacterCodePoint (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_currentCharacterCodePoint.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.currentCharacterCodePoint_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_currentCharacterCodePoint (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_currentCharacterCodePoint.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.currentCharacterCodePoint_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_currentCharacterCodePoint_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_currentCharacterCodePoint.apply { (_ observer : EBEvent) in
        managedObject.currentCharacterCodePoint_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_currentCharacterCodePoint_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    self.mObserversOf_currentCharacterCodePoint.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.currentCharacterCodePoint_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'currentCharacterCodePointString' transient property
  //····················································································································

  private var mObserversOf_currentCharacterCodePointString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_currentCharacterCodePointString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_currentCharacterCodePointString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.currentCharacterCodePointString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_currentCharacterCodePointString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_currentCharacterCodePointString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.currentCharacterCodePointString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_currentCharacterCodePointString_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_currentCharacterCodePointString.apply { (_ observer : EBEvent) in
        managedObject.currentCharacterCodePointString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_currentCharacterCodePointString_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_currentCharacterCodePointString.apply { (_ observer : EBEvent) in
        managedObject.currentCharacterCodePointString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPath' transient property
  //····················································································································

  private var mObserversOf_sampleStringBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPath_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPath.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPath_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPath.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPathWidth' transient property
  //····················································································································

  private var mObserversOf_sampleStringBezierPathWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPathWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPathWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPathWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPathWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPathWidth_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPathWidth.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPathWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPathWidth_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPathWidth.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPathWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPathAscent' transient property
  //····················································································································

  private var mObserversOf_sampleStringBezierPathAscent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPathAscent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPathAscent.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathAscent_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPathAscent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPathAscent.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathAscent_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPathAscent_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPathAscent.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPathAscent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPathAscent_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPathAscent.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPathAscent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPathDescent' transient property
  //····················································································································

  private var mObserversOf_sampleStringBezierPathDescent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPathDescent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPathDescent.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathDescent_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPathDescent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sampleStringBezierPathDescent.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathDescent_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPathDescent_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPathDescent.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPathDescent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPathDescent_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sampleStringBezierPathDescent.apply { (_ observer : EBEvent) in
        managedObject.sampleStringBezierPathDescent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'definedCharacters' transient property
  //····················································································································

  private var mObserversOf_definedCharacters = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_definedCharacters (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_definedCharacters.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.definedCharacters_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_definedCharacters (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_definedCharacters.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.definedCharacters_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_definedCharacters_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_definedCharacters.apply { (_ observer : EBEvent) in
        managedObject.definedCharacters_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_definedCharacters_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_definedCharacters.apply { (_ observer : EBEvent) in
        managedObject.definedCharacters_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_FontRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_FontRoot : ReadOnlyArrayOf_FontRoot {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [FontRoot] > > = nil

  //····················································································································

  override var propset : Set <FontRoot> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [FontRoot] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [FontRoot] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <FontRoot> ()

  //····················································································································

  private var mCachedValue : EBSelection < [FontRoot] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <FontRoot>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <FontRoot> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_comments_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_nominalSize_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectedTab_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectedInspector_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_currentCharacterCodePoint_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_currentCharacterCodePointString_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_sampleStringBezierPath_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_sampleStringBezierPathWidth_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_sampleStringBezierPathAscent_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_sampleStringBezierPathDescent_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_definedCharacters_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_issues_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_comments_toElementsOfSet (addedSet)
      self.addEBObserversOf_nominalSize_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectedTab_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectedInspector_toElementsOfSet (addedSet)
      self.addEBObserversOf_currentCharacterCodePoint_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_currentCharacterCodePointString_toElementsOfSet (addedSet)
      self.addEBObserversOf_sampleStringBezierPath_toElementsOfSet (addedSet)
      self.addEBObserversOf_sampleStringBezierPathWidth_toElementsOfSet (addedSet)
      self.addEBObserversOf_sampleStringBezierPathAscent_toElementsOfSet (addedSet)
      self.addEBObserversOf_sampleStringBezierPathDescent_toElementsOfSet (addedSet)
      self.addEBObserversOf_definedCharacters_toElementsOfSet (addedSet)
      self.addEBObserversOf_issues_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: FontRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_FontRoot : ReadOnlyArrayOf_FontRoot {

  //····················································································································
 
  func setProp (_ value :  [FontRoot]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: FontRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_FontRoot : ReadWriteArrayOf_FontRoot, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : FontRoot?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [FontRoot] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "FontRoot") as? FontRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <FontRoot> ()
  private var mValue = [FontRoot] () {
    didSet {
     // self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.setOppositeRelationship? (nil)
            managedObject.comments_property.mSetterDelegate = nil
            managedObject.nominalSize_property.mSetterDelegate = nil
            managedObject.selectedTab_property.mSetterDelegate = nil
            managedObject.selectedInspector_property.mSetterDelegate = nil
            managedObject.currentCharacterCodePoint_property.mSetterDelegate = nil
          }
       //   self.removeEBObserversOf_comments_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_nominalSize_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_selectedTab_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_selectedInspector_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_currentCharacterCodePoint_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_currentCharacterCodePointString_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_sampleStringBezierPath_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_sampleStringBezierPathWidth_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_sampleStringBezierPathAscent_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_sampleStringBezierPathDescent_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_definedCharacters_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of stored properties
          self.removeEBObserversOf_comments_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_nominalSize_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_selectedTab_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_selectedInspector_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_currentCharacterCodePoint_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_currentCharacterCodePointString_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_sampleStringBezierPath_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_sampleStringBezierPathWidth_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_sampleStringBezierPathAscent_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_sampleStringBezierPathDescent_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_definedCharacters_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : FontRoot in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.comments_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.nominalSize_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.selectedTab_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.selectedInspector_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.currentCharacterCodePoint_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        // self.addEBObserversOf_comments_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_nominalSize_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_selectedTab_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_selectedInspector_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_currentCharacterCodePoint_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_currentCharacterCodePointString_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_sampleStringBezierPath_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_sampleStringBezierPathWidth_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_sampleStringBezierPathAscent_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_sampleStringBezierPathDescent_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_definedCharacters_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet)
        //--- Add observers of stored properties
          self.addEBObserversOf_comments_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_nominalSize_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_selectedTab_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_selectedInspector_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_currentCharacterCodePoint_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_currentCharacterCodePointString_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_sampleStringBezierPath_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_sampleStringBezierPathWidth_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_sampleStringBezierPathAscent_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_sampleStringBezierPathDescent_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_definedCharacters_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [FontRoot] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [FontRoot]) { self.mValue = inValue }

  //····················································································································

  override var propval : [FontRoot] { return self.mValue }

  //····················································································································

  override var propset : Set <FontRoot> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [FontRoot]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : FontRoot) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : FontRoot) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
