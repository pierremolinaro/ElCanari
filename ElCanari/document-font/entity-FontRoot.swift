//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: FontRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class FontRoot : EBManagedObject,
  FontRoot_comments,
  FontRoot_nominalSize,
  FontRoot_selectedTab,
  FontRoot_selectedInspector,
  FontRoot_sampleStringBezierPath,
  FontRoot_sampleStringBezierPathWidth,
  FontRoot_sampleStringBezierPathAscent,
  FontRoot_sampleStringBezierPathDescent,
  FontRoot_currentCharacterCodePointString {

  //····················································································································
  //   Accessing comments stored property
  //····················································································································

  var comments : String {
    get {
      return self.comments_property.propval
    }
    set {
      self.comments_property.setProp (newValue)
    }
  }

  var comments_property_selection : EBSelection <String> {
    get {
      return self.comments_property.prop
    }
  }

  //····················································································································
  //   Accessing nominalSize stored property
  //····················································································································

  var nominalSize : Int {
    get {
      return self.nominalSize_property.propval
    }
    set {
      self.nominalSize_property.setProp (newValue)
    }
  }

  var nominalSize_property_selection : EBSelection <Int> {
    get {
      return self.nominalSize_property.prop
    }
  }

  //····················································································································
  //   Accessing selectedTab stored property
  //····················································································································

  var selectedTab : Int {
    get {
      return self.selectedTab_property.propval
    }
    set {
      self.selectedTab_property.setProp (newValue)
    }
  }

  var selectedTab_property_selection : EBSelection <Int> {
    get {
      return self.selectedTab_property.prop
    }
  }

  //····················································································································
  //   Accessing selectedInspector stored property
  //····················································································································

  var selectedInspector : Int {
    get {
      return self.selectedInspector_property.propval
    }
    set {
      self.selectedInspector_property.setProp (newValue)
    }
  }

  var selectedInspector_property_selection : EBSelection <Int> {
    get {
      return self.selectedInspector_property.prop
    }
  }

  //····················································································································
  //   Accessing sampleStringBezierPath transient property
  //····················································································································

  var sampleStringBezierPath_property_selection : EBSelection <CGPath> {
    get {
      return self.sampleStringBezierPath_property.prop
    }
  }

  var sampleStringBezierPath : CGPath? {
    switch sampleStringBezierPath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing sampleStringBezierPathWidth transient property
  //····················································································································

  var sampleStringBezierPathWidth_property_selection : EBSelection <String> {
    get {
      return self.sampleStringBezierPathWidth_property.prop
    }
  }

  var sampleStringBezierPathWidth : String? {
    switch sampleStringBezierPathWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing sampleStringBezierPathAscent transient property
  //····················································································································

  var sampleStringBezierPathAscent_property_selection : EBSelection <String> {
    get {
      return self.sampleStringBezierPathAscent_property.prop
    }
  }

  var sampleStringBezierPathAscent : String? {
    switch sampleStringBezierPathAscent_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing sampleStringBezierPathDescent transient property
  //····················································································································

  var sampleStringBezierPathDescent_property_selection : EBSelection <String> {
    get {
      return self.sampleStringBezierPathDescent_property.prop
    }
  }

  var sampleStringBezierPathDescent : String? {
    switch sampleStringBezierPathDescent_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing currentCharacterCodePointString transient property
  //····················································································································

  var currentCharacterCodePointString_property_selection : EBSelection <String> {
    get {
      return self.currentCharacterCodePointString_property.prop
    }
  }

  var currentCharacterCodePointString : String? {
    switch currentCharacterCodePointString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Accessing characters toMany relationship
  //····················································································································

  var characters_property_selection : EBSelection < [FontCharacter] > {
    get {
      return self.characters_property.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var comments_property = EBStoredProperty_String ("")
  var nominalSize_property = EBStoredProperty_Int (14)
  var selectedTab_property = EBStoredProperty_Int (0)
  var selectedInspector_property = EBStoredProperty_Int (0)

  //····················································································································
  //    Transient properties
  //····················································································································

  var sampleStringBezierPath_property = EBTransientProperty_CGPath ()
  var sampleStringBezierPathWidth_property = EBTransientProperty_String ()
  var sampleStringBezierPathAscent_property = EBTransientProperty_String ()
  var sampleStringBezierPathDescent_property = EBTransientProperty_String ()
  var currentCharacterCodePointString_property = EBTransientProperty_String ()

  //····················································································································
  //    Relationships
  //····················································································································

  var characters_property = ToManyRelationship_FontRoot_characters ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    self.sampleStringBezierPath_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.characters_property_selection.kind ()
        kind &= unwSelf.characters_property_selection.kind ()
        kind &= g_Preferences!.sampleString_property_selection.kind ()
        kind &= g_Preferences!.sampleStringSize_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.characters_property_selection, unwSelf.characters_property_selection, g_Preferences!.sampleString_property_selection, g_Preferences!.sampleStringSize_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_FontRoot_sampleStringBezierPath (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.sampleStringBezierPathWidth_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.sampleStringBezierPath_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.sampleStringBezierPath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontRoot_sampleStringBezierPathWidth (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.sampleStringBezierPathAscent_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.sampleStringBezierPath_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.sampleStringBezierPath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontRoot_sampleStringBezierPathAscent (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.sampleStringBezierPathDescent_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.sampleStringBezierPath_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.sampleStringBezierPath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontRoot_sampleStringBezierPathDescent (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.currentCharacterCodePointString_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.currentCharacterCodePoint_property_selection.kind ()
        kind &= unwSelf.characters_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.currentCharacterCodePoint_property_selection, unwSelf.characters_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_FontRoot_currentCharacterCodePointString (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--- Install property observers for transients
    self.characters_property.addEBObserverOf_segmentArrayForDrawing (self.sampleStringBezierPath_property)
    self.characters_property.addEBObserverOf_advance (self.sampleStringBezierPath_property)
    g_Preferences?.sampleString_property.addEBObserver (self.sampleStringBezierPath_property)
    g_Preferences?.sampleStringSize_property.addEBObserver (self.sampleStringBezierPath_property)
    self.sampleStringBezierPath_property.addEBObserver (self.sampleStringBezierPathWidth_property)
    self.sampleStringBezierPath_property.addEBObserver (self.sampleStringBezierPathAscent_property)
    self.sampleStringBezierPath_property.addEBObserver (self.sampleStringBezierPathDescent_property)
    g_Preferences?.currentCharacterCodePoint_property.addEBObserver (self.currentCharacterCodePointString_property)
    self.characters_property.addEBObserverOf_codePoint (self.currentCharacterCodePointString_property)
  //--- Install undoers for properties
    self.comments_property.undoManager = undoManager ()
    self.nominalSize_property.undoManager = undoManager ()
    self.selectedTab_property.undoManager = undoManager ()
    self.selectedInspector_property.undoManager = undoManager ()
  //--- Install owner for relationships
    self.characters_property.owner = self
  //--- register properties for handling signature
    self.characters_property.setSignatureObserver (observer:self)
    self.comments_property.setSignatureObserver (observer:self)
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.characters_property.removeEBObserverOf_segmentArrayForDrawing (self.sampleStringBezierPath_property)
    self.characters_property.removeEBObserverOf_advance (self.sampleStringBezierPath_property)
    g_Preferences?.sampleString_property.removeEBObserver (self.sampleStringBezierPath_property)
    g_Preferences?.sampleStringSize_property.removeEBObserver (self.sampleStringBezierPath_property)
    self.sampleStringBezierPath_property.removeEBObserver (self.sampleStringBezierPathWidth_property)
    self.sampleStringBezierPath_property.removeEBObserver (self.sampleStringBezierPathAscent_property)
    self.sampleStringBezierPath_property.removeEBObserver (self.sampleStringBezierPathDescent_property)
    g_Preferences?.currentCharacterCodePoint_property.removeEBObserver (self.currentCharacterCodePointString_property)
    self.characters_property.removeEBObserverOf_codePoint (self.currentCharacterCodePointString_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "comments",
      idx:self.comments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.comments_property.mObserverExplorer,
      valueExplorer:&self.comments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "nominalSize",
      idx:self.nominalSize_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.nominalSize_property.mObserverExplorer,
      valueExplorer:&self.nominalSize_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedTab",
      idx:self.selectedTab_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedTab_property.mObserverExplorer,
      valueExplorer:&self.selectedTab_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedInspector",
      idx:self.selectedInspector_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedInspector_property.mObserverExplorer,
      valueExplorer:&self.selectedInspector_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "sampleStringBezierPath",
      idx:self.sampleStringBezierPath_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sampleStringBezierPath_property.mObserverExplorer,
      valueExplorer:&self.sampleStringBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sampleStringBezierPathWidth",
      idx:self.sampleStringBezierPathWidth_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sampleStringBezierPathWidth_property.mObserverExplorer,
      valueExplorer:&self.sampleStringBezierPathWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sampleStringBezierPathAscent",
      idx:self.sampleStringBezierPathAscent_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sampleStringBezierPathAscent_property.mObserverExplorer,
      valueExplorer:&self.sampleStringBezierPathAscent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sampleStringBezierPathDescent",
      idx:self.sampleStringBezierPathDescent_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sampleStringBezierPathDescent_property.mObserverExplorer,
      valueExplorer:&self.sampleStringBezierPathDescent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "currentCharacterCodePointString",
      idx:self.currentCharacterCodePointString_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.currentCharacterCodePointString_property.mObserverExplorer,
      valueExplorer:&self.currentCharacterCodePointString_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "characters",
      idx:characters_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&characters_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.comments_property.mObserverExplorer = nil
    self.comments_property.mValueExplorer = nil
    self.nominalSize_property.mObserverExplorer = nil
    self.nominalSize_property.mValueExplorer = nil
    self.selectedTab_property.mObserverExplorer = nil
    self.selectedTab_property.mValueExplorer = nil
    self.selectedInspector_property.mObserverExplorer = nil
    self.selectedInspector_property.mValueExplorer = nil
    self.characters_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.comments_property.storeIn (dictionary: ioDictionary, forKey: "comments")
    self.nominalSize_property.storeIn (dictionary: ioDictionary, forKey: "nominalSize")
    self.selectedTab_property.storeIn (dictionary: ioDictionary, forKey: "selectedTab")
    self.selectedInspector_property.storeIn (dictionary: ioDictionary, forKey: "selectedInspector")
    store (managedObjectArray: characters_property.propval as NSArray, relationshipName:"characters", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.comments_property.readFrom (dictionary: inDictionary, forKey:"comments")
    self.nominalSize_property.readFrom (dictionary: inDictionary, forKey:"nominalSize")
    self.selectedTab_property.readFrom (dictionary: inDictionary, forKey:"selectedTab")
    self.selectedInspector_property.readFrom (dictionary: inDictionary, forKey:"selectedInspector")
    self.characters_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "characters",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [FontCharacter])
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    self.characters_property.setProp ([]) // Set relationships to nil
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    self.characters_property.setProp ([])
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in self.characters_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.characters_property.signature ())
    crc.accumulateUInt32 (self.comments_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_FontRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_FontRoot : ReadOnlyAbstractArrayProperty <FontRoot> {

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_comments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_comments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_comments {
        managedObject.comments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for observer in mObserversOf_comments {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'nominalSize' stored property
  //····················································································································

  private var mObserversOf_nominalSize = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_nominalSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_nominalSize.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nominalSize_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_nominalSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_nominalSize.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.nominalSize_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_nominalSize_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_nominalSize {
        managedObject.nominalSize_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_nominalSize_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for observer in mObserversOf_nominalSize {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.nominalSize_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedTab' stored property
  //····················································································································

  private var mObserversOf_selectedTab = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedTab.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedTab_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedTab.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedTab_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedTab_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedTab {
        managedObject.selectedTab_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedTab_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for observer in mObserversOf_selectedTab {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedTab_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedInspector_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedInspector {
        managedObject.selectedInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedInspector_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for observer in mObserversOf_selectedInspector {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPath' transient property
  //····················································································································

  private var mObserversOf_sampleStringBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_sampleStringBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_sampleStringBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPath_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPath {
        managedObject.sampleStringBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPath_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPath {
        managedObject.sampleStringBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPathWidth' transient property
  //····················································································································

  private var mObserversOf_sampleStringBezierPathWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPathWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_sampleStringBezierPathWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPathWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_sampleStringBezierPathWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPathWidth_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPathWidth {
        managedObject.sampleStringBezierPathWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPathWidth_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPathWidth {
        managedObject.sampleStringBezierPathWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPathAscent' transient property
  //····················································································································

  private var mObserversOf_sampleStringBezierPathAscent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPathAscent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_sampleStringBezierPathAscent.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathAscent_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPathAscent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_sampleStringBezierPathAscent.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathAscent_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPathAscent_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPathAscent {
        managedObject.sampleStringBezierPathAscent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPathAscent_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPathAscent {
        managedObject.sampleStringBezierPathAscent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sampleStringBezierPathDescent' transient property
  //····················································································································

  private var mObserversOf_sampleStringBezierPathDescent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sampleStringBezierPathDescent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_sampleStringBezierPathDescent.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathDescent_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sampleStringBezierPathDescent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_sampleStringBezierPathDescent.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sampleStringBezierPathDescent_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sampleStringBezierPathDescent_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPathDescent {
        managedObject.sampleStringBezierPathDescent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sampleStringBezierPathDescent_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_sampleStringBezierPathDescent {
        managedObject.sampleStringBezierPathDescent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'currentCharacterCodePointString' transient property
  //····················································································································

  private var mObserversOf_currentCharacterCodePointString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_currentCharacterCodePointString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_currentCharacterCodePointString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.currentCharacterCodePointString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_currentCharacterCodePointString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_currentCharacterCodePointString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.currentCharacterCodePointString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_currentCharacterCodePointString_toElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_currentCharacterCodePointString {
        managedObject.currentCharacterCodePointString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_currentCharacterCodePointString_fromElementsOfSet (_ inSet : Set<FontRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_currentCharacterCodePointString {
        managedObject.currentCharacterCodePointString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_FontRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_FontRoot : ReadOnlyArrayOf_FontRoot {

  var readModelFunction : Optional<() -> EBSelection < [FontRoot] > >

  private var prop_cache : EBSelection < [FontRoot] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <FontRoot> ()

  override var prop : EBSelection < [FontRoot] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <FontRoot>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <FontRoot> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_comments_fromElementsOfSet (removedSet)
        removeEBObserversOf_nominalSize_fromElementsOfSet (removedSet)
        removeEBObserversOf_selectedTab_fromElementsOfSet (removedSet)
        removeEBObserversOf_selectedInspector_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_sampleStringBezierPath_fromElementsOfSet (removedSet)
        removeEBObserversOf_sampleStringBezierPathWidth_fromElementsOfSet (removedSet)
        removeEBObserversOf_sampleStringBezierPathAscent_fromElementsOfSet (removedSet)
        removeEBObserversOf_sampleStringBezierPathDescent_fromElementsOfSet (removedSet)
        removeEBObserversOf_currentCharacterCodePointString_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_comments_toElementsOfSet (addedSet)
        addEBObserversOf_nominalSize_toElementsOfSet (addedSet)
        addEBObserversOf_selectedTab_toElementsOfSet (addedSet)
        addEBObserversOf_selectedInspector_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_sampleStringBezierPath_toElementsOfSet (addedSet)
        addEBObserversOf_sampleStringBezierPathWidth_toElementsOfSet (addedSet)
        addEBObserversOf_sampleStringBezierPathAscent_toElementsOfSet (addedSet)
        addEBObserversOf_sampleStringBezierPathDescent_toElementsOfSet (addedSet)
        addEBObserversOf_currentCharacterCodePointString_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_comments : class {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_nominalSize : class {
  var nominalSize : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_selectedTab : class {
  var selectedTab : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_selectedInspector : class {
  var selectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_sampleStringBezierPath : class {
  var sampleStringBezierPath : CGPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_sampleStringBezierPathWidth : class {
  var sampleStringBezierPathWidth : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_sampleStringBezierPathAscent : class {
  var sampleStringBezierPathAscent : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_sampleStringBezierPathDescent : class {
  var sampleStringBezierPathDescent : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontRoot_currentCharacterCodePointString : class {
  var currentCharacterCodePointString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: characters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_FontRoot_characters : ReadOnlyArrayOf_FontCharacter {

  //····················································································································
 
  func setProp (_ value :  [FontCharacter]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: characters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_FontRoot_characters :
ToManyRelationshipReadWrite_FontRoot_characters, EBSignatureObserverProtocol {
  weak var owner : FontRoot?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <FontCharacter> ()
  private var mValue = [FontCharacter] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_advance_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_codePoint_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_gerberCode_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_gerberCodeInstructionCountMessage_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_segmentArrayForDrawing_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : FontCharacter in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_advance_toElementsOfSet (addedObjectSet)
        addEBObserversOf_codePoint_toElementsOfSet (addedObjectSet)
        addEBObserversOf_gerberCode_toElementsOfSet (addedObjectSet)
        addEBObserversOf_gerberCodeInstructionCountMessage_toElementsOfSet (addedObjectSet)
        addEBObserversOf_segmentArrayForDrawing_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [FontCharacter] > { return .single (mValue) }

  override func setProp (_ inValue : [FontCharacter]) { mValue = inValue }

  var propval : [FontCharacter] { return mValue }

  //····················································································································

  @objc func performUndo (_ oldValue : [FontCharacter]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : FontCharacter) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : FontCharacter) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

