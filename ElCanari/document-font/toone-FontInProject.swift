//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_FontInProject 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_FontInProject : ReadOnlyAbstractObjectProperty <FontInProject> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : FontInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
  //--- Add observers to added objects
  }

  //····················································································································
  //   Observers of 'mNominalSize' stored property
  //····················································································································

  private final var mNominalSize_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mNominalSize = EBWeakEventSet ()

  //····················································································································

  final var mNominalSize_property_selection : EBSelection <Int?> { // §
    return self.mNominalSize_property.selection
/*    if let model = self.propval {
      switch (model.mNominalSize_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mNominalSize (_ inObserver : EBEvent) {
    self.mNominalSize_property.addEBObserver (inObserver)
/*    self.mObserversOf_mNominalSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNominalSize_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mNominalSize (_ inObserver : EBEvent) {
    self.mNominalSize_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mNominalSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNominalSize_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mFontName' stored property
  //····················································································································

  private final var mFontName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mFontName = EBWeakEventSet ()

  //····················································································································

  final var mFontName_property_selection : EBSelection <String?> { // §
    return self.mFontName_property.selection
/*    if let model = self.propval {
      switch (model.mFontName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mFontName (_ inObserver : EBEvent) {
    self.mFontName_property.addEBObserver (inObserver)
/*    self.mObserversOf_mFontName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mFontName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mFontName (_ inObserver : EBEvent) {
    self.mFontName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mFontName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mFontName_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mFontVersion' stored property
  //····················································································································

  private final var mFontVersion_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mFontVersion = EBWeakEventSet ()

  //····················································································································

  final var mFontVersion_property_selection : EBSelection <Int?> { // §
    return self.mFontVersion_property.selection
/*    if let model = self.propval {
      switch (model.mFontVersion_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mFontVersion (_ inObserver : EBEvent) {
    self.mFontVersion_property.addEBObserver (inObserver)
/*    self.mObserversOf_mFontVersion.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mFontVersion_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mFontVersion (_ inObserver : EBEvent) {
    self.mFontVersion_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mFontVersion.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mFontVersion_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mDescriptiveString' stored property
  //····················································································································

  private final var mDescriptiveString_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mDescriptiveString = EBWeakEventSet ()

  //····················································································································

  final var mDescriptiveString_property_selection : EBSelection <String?> { // §
    return self.mDescriptiveString_property.selection
/*    if let model = self.propval {
      switch (model.mDescriptiveString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mDescriptiveString (_ inObserver : EBEvent) {
    self.mDescriptiveString_property.addEBObserver (inObserver)
/*    self.mObserversOf_mDescriptiveString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDescriptiveString_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mDescriptiveString (_ inObserver : EBEvent) {
    self.mDescriptiveString_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mDescriptiveString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDescriptiveString_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private final var versionString_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  final var versionString_property_selection : EBSelection <String?> {
    return self.versionString_property.selection
/*    if let model = self.propval {
      switch (model.versionString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.versionString_property.addEBObserver (inObserver)
/*    self.mObserversOf_versionString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.versionString_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.versionString_property.removeEBObserver (inObserver)
/*    self.mObserversOf_versionString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.versionString_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'sizeString' transient property
  //····················································································································

  private final var sizeString_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_sizeString = EBWeakEventSet ()

  //····················································································································

  final var sizeString_property_selection : EBSelection <String?> {
    return self.sizeString_property.selection
/*    if let model = self.propval {
      switch (model.sizeString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_sizeString (_ inObserver : EBEvent) {
    self.sizeString_property.addEBObserver (inObserver)
/*    self.mObserversOf_sizeString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sizeString_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_sizeString (_ inObserver : EBEvent) {
    self.sizeString_property.removeEBObserver (inObserver)
/*    self.mObserversOf_sizeString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sizeString_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  private final var descriptor_property = EBGenericTransientProperty <BoardFontDescriptor?> ()
//  private final var mObserversOf_descriptor = EBWeakEventSet ()

  //····················································································································

  final var descriptor_property_selection : EBSelection <BoardFontDescriptor?> {
    return self.descriptor_property.selection
/*    if let model = self.propval {
      switch (model.descriptor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.descriptor_property.addEBObserver (inObserver)
/*    self.mObserversOf_descriptor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.descriptor_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.descriptor_property.removeEBObserver (inObserver)
/*    self.mObserversOf_descriptor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.descriptor_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'canRemoveFont' transient property
  //····················································································································

  private final var canRemoveFont_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_canRemoveFont = EBWeakEventSet ()

  //····················································································································

  final var canRemoveFont_property_selection : EBSelection <Bool?> {
    return self.canRemoveFont_property.selection
/*    if let model = self.propval {
      switch (model.canRemoveFont_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_canRemoveFont (_ inObserver : EBEvent) {
    self.canRemoveFont_property.addEBObserver (inObserver)
/*    self.mObserversOf_canRemoveFont.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.canRemoveFont_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_canRemoveFont (_ inObserver : EBEvent) {
    self.canRemoveFont_property.removeEBObserver (inObserver)
/*    self.mObserversOf_canRemoveFont.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.canRemoveFont_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observable toMany property: mTexts
  //····················································································································

  private final var mObserversOf_mTexts = EBWeakEventSet ()

  //····················································································································

  final var mTexts_property_selection : EBSelection <[BoardText]> {
    if let model = self.propval {
      switch (model.mTexts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mTexts (_ inObserver : EBEvent) {
    self.mObserversOf_mTexts.insert (inObserver)
    if let object = self.propval {
      object.mTexts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTexts (_ inObserver : EBEvent) {
    self.mObserversOf_mTexts.remove (inObserver)
    if let object = self.propval {
      object.mTexts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mComponentNames
  //····················································································································

  private final var mObserversOf_mComponentNames = EBWeakEventSet ()

  //····················································································································

  final var mComponentNames_property_selection : EBSelection <[ComponentInProject]> {
    if let model = self.propval {
      switch (model.mComponentNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mComponentNames (_ inObserver : EBEvent) {
    self.mObserversOf_mComponentNames.insert (inObserver)
    if let object = self.propval {
      object.mComponentNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponentNames (_ inObserver : EBEvent) {
    self.mObserversOf_mComponentNames.remove (inObserver)
    if let object = self.propval {
      object.mComponentNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mComponentValues
  //····················································································································

  private final var mObserversOf_mComponentValues = EBWeakEventSet ()

  //····················································································································

  final var mComponentValues_property_selection : EBSelection <[ComponentInProject]> {
    if let model = self.propval {
      switch (model.mComponentValues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mComponentValues (_ inObserver : EBEvent) {
    self.mObserversOf_mComponentValues.insert (inObserver)
    if let object = self.propval {
      object.mComponentValues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponentValues (_ inObserver : EBEvent) {
    self.mObserversOf_mComponentValues.remove (inObserver)
    if let object = self.propval {
      object.mComponentValues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mNominalSize simple stored property
    self.mNominalSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mNominalSize_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mNominalSize_property)
  //--- Configure mFontName simple stored property
    self.mFontName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mFontName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mFontName_property)
  //--- Configure mFontVersion simple stored property
    self.mFontVersion_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mFontVersion_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mFontVersion_property)
  //--- Configure mDescriptiveString simple stored property
    self.mDescriptiveString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDescriptiveString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mDescriptiveString_property)
  //--- Configure versionString transient property
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.versionString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.versionString_property)
  //--- Configure sizeString transient property
    self.sizeString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.sizeString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.sizeString_property)
  //--- Configure descriptor transient property
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.descriptor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.descriptor_property)
  //--- Configure canRemoveFont transient property
    self.canRemoveFont_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.canRemoveFont_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.canRemoveFont_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject FontInProject
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_FontInProject : ReadOnlyObject_FontInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_FontInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_FontInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : FontInProject? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < FontInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : FontInProject? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_FontInProject
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_FontInProject : ReadOnlyObject_FontInProject {

  //····················································································································
 
  func setProp (_ inValue : FontInProject?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_FontInProject
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_FontInProject : ReadWriteObject_FontInProject {

  //····················································································································

  private var mModel : ReadWriteObject_FontInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_FontInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : FontInProject?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : FontInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < FontInProject? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : FontInProject? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_FontInProject 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_FontInProject : ReadWriteObject_FontInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : FontInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : FontInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : FontInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : FontInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : FontInProject?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < FontInProject? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : FontInProject?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : FontInProject? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

