//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(FontDocument) class FontDocument : EBManagedDocument {

  //····················································································································
  //   Array controller: mSelectedCharacterController
  //····················································································································

  var mSelectedCharacterController = ArrayController_FontDocument_mSelectedCharacterController ()

  //····················································································································
  //   Selection controller: mCharacterSelection
  //····················································································································

  var mCharacterSelection = SelectionController_FontDocument_mCharacterSelection ()

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  var documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.prop
  }

  //····················································································································

    var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var advancementSlider : EBSlider?
  @IBOutlet var advancementTextField : EBIntField?
  @IBOutlet var commentTextView : EBTextView?
  @IBOutlet var currentCharacterStepper : EBStepper?
  @IBOutlet var currentCharacterView : CanariCharacterView?
  @IBOutlet var gerberCodeInstructionCountMessageTextField : EBTextObserverField?
  @IBOutlet var mAddCharacterButton : EBButton?
  @IBOutlet var mAddSegmentButton : EBButton?
  @IBOutlet var mCurrentCharacterTextField : EBTextObserverField?
  @IBOutlet var mFontCharacterSelectButton : CanariFontCharacterSelectButton?
  @IBOutlet var mFontNominalSizeTextField : EBIntField?
  @IBOutlet var mFontPageView : CanariViewWithKeyView?
  @IBOutlet var mFontSampleStringView : CanariFontSampleStringView?
  @IBOutlet var mGerberCodeTableView : CanariCharacterGerberCodeTableView?
  @IBOutlet var mInfosPageView : CanariViewWithKeyView?
  @IBOutlet var mInspectorSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mMasterFontPageView : NSView?
  @IBOutlet var mMasterView : NSView?
  @IBOutlet var mNewCharacterPanel : NSPanel?
  @IBOutlet var mNewCharacterView : NewCharacterView?
  @IBOutlet var mPageSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mSampleStringAscentTextField : EBTextObserverField?
  @IBOutlet var mSampleStringDescentTextField : EBTextObserverField?
  @IBOutlet var mSampleStringField : EBTextField?
  @IBOutlet var mSampleStringInspectorView : CanariViewWithKeyView?
  @IBOutlet var mSampleStringSizeField : EBDoubleField?
  @IBOutlet var mSampleStringWidthTextField : EBTextObserverField?
  @IBOutlet var mSelectedCharacterInspectorView : CanariViewWithKeyView?
  @IBOutlet var mShowGerberDrawingFlowCheckbox : EBSwitch?
  @IBOutlet var mShowGerberDrawingIndexesCheckbox : EBSwitch?
  @IBOutlet var mSignatureTextField : CanariSignatureField?
  @IBOutlet var mVersionField : CanariVersionField?
  @IBOutlet var resetVersionAndSignatureButton : EBButton?
  @IBOutlet var transparencySlider : EBSlider?
  @IBOutlet var transparencyTextField : EBDoubleField?

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: mSelectedCharacterController
    self.mSelectedCharacterController.addExplorer (name: "mSelectedCharacterController", y:&y, view:view)
  //--- Selection controller property: mCharacterSelection
    self.mCharacterSelection.addExplorer (name: "mCharacterSelection", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName : NSNib.Name {
    return NSNib.Name ("FontDocument")
  }
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "FontRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : FontRoot { get { return mRootObject as! FontRoot } }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
  //--------------------------- Outlet checking
    if let outlet : Any = self.advancementSlider {
      if !(outlet is EBSlider) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'advancementSlider' outlet is not an instance of 'EBSlider'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'advancementSlider' outlet is nil"
      )
    }
    if let outlet : Any = self.advancementTextField {
      if !(outlet is EBIntField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'advancementTextField' outlet is not an instance of 'EBIntField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'advancementTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.commentTextView {
      if !(outlet is EBTextView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'commentTextView' outlet is not an instance of 'EBTextView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'commentTextView' outlet is nil"
      )
    }
    if let outlet : Any = self.currentCharacterStepper {
      if !(outlet is EBStepper) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'currentCharacterStepper' outlet is not an instance of 'EBStepper'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'currentCharacterStepper' outlet is nil"
      )
    }
    if let outlet : Any = self.currentCharacterView {
      if !(outlet is CanariCharacterView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'currentCharacterView' outlet is not an instance of 'CanariCharacterView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'currentCharacterView' outlet is nil"
      )
    }
    if let outlet : Any = self.gerberCodeInstructionCountMessageTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'gerberCodeInstructionCountMessageTextField' outlet is not an instance of 'EBTextObserverField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'gerberCodeInstructionCountMessageTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mAddCharacterButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAddCharacterButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAddCharacterButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mAddSegmentButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAddSegmentButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAddSegmentButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mCurrentCharacterTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mCurrentCharacterTextField' outlet is not an instance of 'EBTextObserverField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mCurrentCharacterTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mFontCharacterSelectButton {
      if !(outlet is CanariFontCharacterSelectButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mFontCharacterSelectButton' outlet is not an instance of 'CanariFontCharacterSelectButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mFontCharacterSelectButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mFontNominalSizeTextField {
      if !(outlet is EBIntField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mFontNominalSizeTextField' outlet is not an instance of 'EBIntField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mFontNominalSizeTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mFontPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mFontPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mFontPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mFontSampleStringView {
      if !(outlet is CanariFontSampleStringView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mFontSampleStringView' outlet is not an instance of 'CanariFontSampleStringView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mFontSampleStringView' outlet is nil"
      )
    }
    if let outlet : Any = self.mGerberCodeTableView {
      if !(outlet is CanariCharacterGerberCodeTableView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mGerberCodeTableView' outlet is not an instance of 'CanariCharacterGerberCodeTableView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mGerberCodeTableView' outlet is nil"
      )
    }
    if let outlet : Any = self.mInfosPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mInfosPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mInfosPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mInspectorSegmentedControl {
      if !(outlet is CanariSegmentedControl) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mInspectorSegmentedControl' outlet is not an instance of 'CanariSegmentedControl'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mInspectorSegmentedControl' outlet is nil"
      )
    }
    if let outlet : Any = self.mMasterFontPageView {
      if !(outlet is NSView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mMasterFontPageView' outlet is not an instance of 'NSView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mMasterFontPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mMasterView {
      if !(outlet is NSView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mMasterView' outlet is not an instance of 'NSView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mMasterView' outlet is nil"
      )
    }
    if let outlet : Any = self.mNewCharacterPanel {
      if !(outlet is NSPanel) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mNewCharacterPanel' outlet is not an instance of 'NSPanel'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mNewCharacterPanel' outlet is nil"
      )
    }
    if let outlet : Any = self.mNewCharacterView {
      if !(outlet is NewCharacterView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mNewCharacterView' outlet is not an instance of 'NewCharacterView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mNewCharacterView' outlet is nil"
      )
    }
    if let outlet : Any = self.mPageSegmentedControl {
      if !(outlet is CanariSegmentedControl) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPageSegmentedControl' outlet is not an instance of 'CanariSegmentedControl'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPageSegmentedControl' outlet is nil"
      )
    }
    if let outlet : Any = self.mSampleStringAscentTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSampleStringAscentTextField' outlet is not an instance of 'EBTextObserverField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSampleStringAscentTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mSampleStringDescentTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSampleStringDescentTextField' outlet is not an instance of 'EBTextObserverField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSampleStringDescentTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mSampleStringField {
      if !(outlet is EBTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSampleStringField' outlet is not an instance of 'EBTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSampleStringField' outlet is nil"
      )
    }
    if let outlet : Any = self.mSampleStringInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSampleStringInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSampleStringInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mSampleStringSizeField {
      if !(outlet is EBDoubleField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSampleStringSizeField' outlet is not an instance of 'EBDoubleField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSampleStringSizeField' outlet is nil"
      )
    }
    if let outlet : Any = self.mSampleStringWidthTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSampleStringWidthTextField' outlet is not an instance of 'EBTextObserverField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSampleStringWidthTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mSelectedCharacterInspectorView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSelectedCharacterInspectorView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSelectedCharacterInspectorView' outlet is nil"
      )
    }
    if let outlet : Any = self.mShowGerberDrawingFlowCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mShowGerberDrawingFlowCheckbox' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mShowGerberDrawingFlowCheckbox' outlet is nil"
      )
    }
    if let outlet : Any = self.mShowGerberDrawingIndexesCheckbox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mShowGerberDrawingIndexesCheckbox' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mShowGerberDrawingIndexesCheckbox' outlet is nil"
      )
    }
    if let outlet : Any = self.mSignatureTextField {
      if !(outlet is CanariSignatureField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSignatureTextField' outlet is not an instance of 'CanariSignatureField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSignatureTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mVersionField {
      if !(outlet is CanariVersionField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mVersionField' outlet is not an instance of 'CanariVersionField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mVersionField' outlet is nil"
      )
    }
    if let outlet : Any = self.resetVersionAndSignatureButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'resetVersionAndSignatureButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'resetVersionAndSignatureButton' outlet is nil"
      )
    }
    if let outlet : Any = self.transparencySlider {
      if !(outlet is EBSlider) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'transparencySlider' outlet is not an instance of 'EBSlider'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'transparencySlider' outlet is nil"
      )
    }
    if let outlet : Any = self.transparencyTextField {
      if !(outlet is EBDoubleField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'transparencyTextField' outlet is not an instance of 'EBDoubleField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'transparencyTextField' outlet is nil"
      )
    }
  //--- Array controller property: mSelectedCharacterController
    self.mSelectedCharacterController.bind_model (self.rootObject.characters_property)
  //--- Selection controller property: mCharacterSelection
    self.mCharacterSelection.bind_selection (model: self.mSelectedCharacterController.selectedArray_property, file: #file, line: #line)
  //--------------------------- Install regular bindings
    self.mPageSegmentedControl?.bind_selectedPage (self.rootObject.selectedTab_property, file: #file, line: #line)
    self.mSignatureTextField?.bind_signature (self.signatureObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_version (self.versionObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_versionShouldChange (self.versionShouldChangeObserver_property, file: #file, line: #line)
    self.mInspectorSegmentedControl?.bind_selectedPage (self.rootObject.selectedInspector_property, file: #file, line: #line)
    self.advancementTextField?.bind_value (self.mCharacterSelection.advance_property, file: #file, line: #line, sendContinously:true, autoFormatter:true)
    self.advancementSlider?.bind_intValue (self.mCharacterSelection.advance_property, file: #file, line: #line, sendContinously:true)
    self.transparencyTextField?.bind_value (g_Preferences!.fontEditionTransparency_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    self.transparencySlider?.bind_doubleValue (g_Preferences!.fontEditionTransparency_property, file: #file, line: #line, sendContinously:true)
    self.mFontNominalSizeTextField?.bind_value (self.rootObject.nominalSize_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    self.mFontCharacterSelectButton?.bind_codePoint (g_Preferences!.currentCharacterCodePoint_property, file: #file, line: #line)
    self.mCurrentCharacterTextField?.bind_valueObserver (self.rootObject.currentCharacterCodePointString_property, file: #file, line: #line)
    self.currentCharacterStepper?.bind_value (g_Preferences!.currentCharacterCodePoint_property, file: #file, line: #line, sendContinously:true)
    self.mShowGerberDrawingFlowCheckbox?.bind_value (g_Preferences!.showGerberDrawingFlow_property, file: #file, line: #line)
    self.mShowGerberDrawingIndexesCheckbox?.bind_value (g_Preferences!.showGerberDrawingIndexes_property, file: #file, line: #line)
    self.gerberCodeInstructionCountMessageTextField?.bind_valueObserver (self.mCharacterSelection.gerberCodeInstructionCountMessage_property, file: #file, line: #line)
    self.mGerberCodeTableView?.bind_characterGerberCode (self.mCharacterSelection.gerberCode_property, file: #file, line: #line)
    self.mSampleStringField?.bind_value (g_Preferences!.sampleString_property, file: #file, line: #line, sendContinously:true)
    self.mFontSampleStringView?.bind_bezierPath (self.rootObject.sampleStringBezierPath_property, file: #file, line: #line)
    self.mSampleStringSizeField?.bind_value (g_Preferences!.sampleStringSize_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    self.mSampleStringWidthTextField?.bind_valueObserver (self.rootObject.sampleStringBezierPathWidth_property, file: #file, line: #line)
    self.mSampleStringAscentTextField?.bind_valueObserver (self.rootObject.sampleStringBezierPathAscent_property, file: #file, line: #line)
    self.mSampleStringDescentTextField?.bind_valueObserver (self.rootObject.sampleStringBezierPathDescent_property, file: #file, line: #line)
    self.currentCharacterView?.bind_advance (self.mCharacterSelection.advance_property, file: #file, line: #line)
    self.currentCharacterView?.bind_characterSegmentList (self.mCharacterSelection.segmentArrayForDrawing_property, file: #file, line: #line)
    self.currentCharacterView?.bind_transparency (g_Preferences!.fontEditionTransparency_property, file: #file, line: #line)
    self.currentCharacterView?.bind_displayFlow (g_Preferences!.showGerberDrawingFlow_property, file: #file, line: #line)
    self.currentCharacterView?.bind_displayDrawingIndexes (g_Preferences!.showGerberDrawingIndexes_property, file: #file, line: #line)
    self.commentTextView?.bind_value (self.rootObject.comments_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
  //--------------------------- Set targets / actions
    self.mAddCharacterButton?.target = self
    self.mAddCharacterButton?.action = #selector (FontDocument.addCharacterAction (_:))
    self.mAddSegmentButton?.target = self
    self.mAddSegmentButton?.action = #selector (FontDocument.addSegmentAction (_:))
    self.resetVersionAndSignatureButton?.target = self
    self.resetVersionAndSignatureButton?.action = #selector (FontDocument.resetVersionAndSignatureAction (_:))
  //--------------------------- Update display
    super.windowControllerDidLoadNib (aController)
  //--------------------------- Flush outlet event for forcing display
    flushOutletEvents ()
  }

  //····················································································································
  //   removeWindowController
  //····················································································································

  override func removeUserInterface () {
  //--------------------------- Unbind regular bindings
    self.mPageSegmentedControl?.unbind_selectedPage ()
    self.mSignatureTextField?.unbind_signature ()
    self.mVersionField?.unbind_version ()
    self.mVersionField?.unbind_versionShouldChange ()
    self.mInspectorSegmentedControl?.unbind_selectedPage ()
    self.advancementTextField?.unbind_value ()
    self.advancementSlider?.unbind_intValue ()
    self.transparencyTextField?.unbind_value ()
    self.transparencySlider?.unbind_doubleValue ()
    self.mFontNominalSizeTextField?.unbind_value ()
    self.mFontCharacterSelectButton?.unbind_codePoint ()
    self.mCurrentCharacterTextField?.unbind_valueObserver ()
    self.currentCharacterStepper?.unbind_value ()
    self.mShowGerberDrawingFlowCheckbox?.unbind_value ()
    self.mShowGerberDrawingIndexesCheckbox?.unbind_value ()
    self.gerberCodeInstructionCountMessageTextField?.unbind_valueObserver ()
    self.mGerberCodeTableView?.unbind_characterGerberCode ()
    self.mSampleStringField?.unbind_value ()
    self.mFontSampleStringView?.unbind_bezierPath ()
    self.mSampleStringSizeField?.unbind_value ()
    self.mSampleStringWidthTextField?.unbind_valueObserver ()
    self.mSampleStringAscentTextField?.unbind_valueObserver ()
    self.mSampleStringDescentTextField?.unbind_valueObserver ()
    self.currentCharacterView?.unbind_advance ()
    self.currentCharacterView?.unbind_characterSegmentList ()
    self.currentCharacterView?.unbind_transparency ()
    self.currentCharacterView?.unbind_displayFlow ()
    self.currentCharacterView?.unbind_displayDrawingIndexes ()
    self.commentTextView?.unbind_value ()
  //--------------------------- Unbind multiple bindings
  //--------------------------- Unbind array controllers
  //--- Array controller property: mSelectedCharacterController
    self.mSelectedCharacterController.unbind_model ()
  //--- Selection controller property: mCharacterSelection
    self.mCharacterSelection.unbind_selection ()
  //--------------------------- Remove targets / actions
    self.mAddCharacterButton?.target = nil
    self.mAddSegmentButton?.target = nil
    self.resetVersionAndSignatureButton?.target = nil
  //--------------------------- Clean up outlets
    self.advancementSlider?.ebCleanUp ()
    self.advancementTextField?.ebCleanUp ()
    self.commentTextView?.ebCleanUp ()
    self.currentCharacterStepper?.ebCleanUp ()
    self.currentCharacterView?.ebCleanUp ()
    self.gerberCodeInstructionCountMessageTextField?.ebCleanUp ()
    self.mAddCharacterButton?.ebCleanUp ()
    self.mAddSegmentButton?.ebCleanUp ()
    self.mCurrentCharacterTextField?.ebCleanUp ()
    self.mFontCharacterSelectButton?.ebCleanUp ()
    self.mFontNominalSizeTextField?.ebCleanUp ()
    self.mFontPageView?.ebCleanUp ()
    self.mFontSampleStringView?.ebCleanUp ()
    self.mGerberCodeTableView?.ebCleanUp ()
    self.mInfosPageView?.ebCleanUp ()
    self.mInspectorSegmentedControl?.ebCleanUp ()
    self.mMasterFontPageView?.ebCleanUp ()
    self.mMasterView?.ebCleanUp ()
    self.mNewCharacterPanel?.ebCleanUp ()
    self.mNewCharacterView?.ebCleanUp ()
    self.mPageSegmentedControl?.ebCleanUp ()
    self.mSampleStringAscentTextField?.ebCleanUp ()
    self.mSampleStringDescentTextField?.ebCleanUp ()
    self.mSampleStringField?.ebCleanUp ()
    self.mSampleStringInspectorView?.ebCleanUp ()
    self.mSampleStringSizeField?.ebCleanUp ()
    self.mSampleStringWidthTextField?.ebCleanUp ()
    self.mSelectedCharacterInspectorView?.ebCleanUp ()
    self.mShowGerberDrawingFlowCheckbox?.ebCleanUp ()
    self.mShowGerberDrawingIndexesCheckbox?.ebCleanUp ()
    self.mSignatureTextField?.ebCleanUp ()
    self.mVersionField?.ebCleanUp ()
    self.resetVersionAndSignatureButton?.ebCleanUp ()
    self.transparencySlider?.ebCleanUp ()
    self.transparencyTextField?.ebCleanUp ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

