//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Derived selection controller ProjectDocument boardTrackSelectionController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_ProjectDocument_boardTrackSelectionController : EBObject {

  //····················································································································
  //   Selection observable property: mSide
  //····················································································································

  let mSide_property = EBPropertyProxy_TrackSide ()

  var mSide_property_selection : EBSelection <TrackSide> {
    return self.mSide_property.prop
  }

  //····················································································································
  //   Selection observable property: mDefaultTrackWidthUnit
  //····················································································································

  let mDefaultTrackWidthUnit_property = EBPropertyProxy_Int ()

  var mDefaultTrackWidthUnit_property_selection : EBSelection <Int> {
    return self.mDefaultTrackWidthUnit_property.prop
  }

  //····················································································································
  //   Selection observable property: mCustomTrackWidth
  //····················································································································

  let mCustomTrackWidth_property = EBPropertyProxy_Int ()

  var mCustomTrackWidth_property_selection : EBSelection <Int> {
    return self.mCustomTrackWidth_property.prop
  }

  //····················································································································
  //   Selection observable property: mCustomTrackWidthUnit
  //····················································································································

  let mCustomTrackWidthUnit_property = EBPropertyProxy_Int ()

  var mCustomTrackWidthUnit_property_selection : EBSelection <Int> {
    return self.mCustomTrackWidthUnit_property.prop
  }

  //····················································································································
  //   Selection observable property: mUsesCustomTrackWidth
  //····················································································································

  let mUsesCustomTrackWidth_property = EBPropertyProxy_Bool ()

  var mUsesCustomTrackWidth_property_selection : EBSelection <Bool> {
    return self.mUsesCustomTrackWidth_property.prop
  }

  //····················································································································
  //   Selection observable property: actualTrackWidth
  //····················································································································

  let actualTrackWidth_property = EBTransientProperty_Int ()

  var actualTrackWidth_property_selection : EBSelection <Int> {
    return self.actualTrackWidth_property.prop
  }

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    return self.selectionDisplay_property.prop
  }

  //····················································································································
  //   Selection observable property: netName
  //····················································································································

  let netName_property = EBTransientProperty_String ()

  var netName_property_selection : EBSelection <String> {
    return self.netName_property.prop
  }

  //····················································································································
  //   Selection observable property: netClassName
  //····················································································································

  let netClassName_property = EBTransientProperty_String ()

  var netClassName_property_selection : EBSelection <String> {
    return self.netClassName_property.prop
  }

  //····················································································································
  //   Selection observable property: netClassTrackWidth
  //····················································································································

  let netClassTrackWidth_property = EBTransientProperty_Int ()

  var netClassTrackWidth_property_selection : EBSelection <Int> {
    return self.netClassTrackWidth_property.prop
  }

  //····················································································································
  //   Selection observable property: netClassViaHoleDiameter
  //····················································································································

  let netClassViaHoleDiameter_property = EBTransientProperty_Int ()

  var netClassViaHoleDiameter_property_selection : EBSelection <Int> {
    return self.netClassViaHoleDiameter_property.prop
  }

  //····················································································································
  //   Selection observable property: netClassViaPadDiameter
  //····················································································································

  let netClassViaPadDiameter_property = EBTransientProperty_Int ()

  var netClassViaPadDiameter_property_selection : EBSelection <Int> {
    return self.netClassViaPadDiameter_property.prop
  }

  //····················································································································
  //   Selection observable property: trackLength
  //····················································································································

  let trackLength_property = EBTransientProperty_Double ()

  var trackLength_property_selection : EBSelection <Double> {
    return self.trackLength_property.prop
  }

  //····················································································································
  //   Selection observable property: endPointsLocation
  //····················································································································

  let endPointsLocation_property = EBTransientProperty_CanariPointArray ()

  var endPointsLocation_property_selection : EBSelection <CanariPointArray> {
    return self.endPointsLocation_property.prop
  }

  //····················································································································
  //   Selection observable property: signatureForERCChecking
  //····················································································································

  let signatureForERCChecking_property = EBTransientProperty_UInt32 ()

  var signatureForERCChecking_property_selection : EBSelection <UInt32> {
    return self.signatureForERCChecking_property.prop
  }

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    return self.objectDisplay_property.prop
  }

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : [BoardTrack] { return self.selectedArray_property.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   let selectedArray_property = TransientArrayOfSuperOf_BoardTrack <BoardObject> ()

  //····················································································································

  func bind_selection (model : ReadOnlyArrayOf_BoardObject, file : String, line : Int) {
    self.selectedArray_property.setDataProvider (model)
    self.bind_property_mSide ()
    self.bind_property_mDefaultTrackWidthUnit ()
    self.bind_property_mCustomTrackWidth ()
    self.bind_property_mCustomTrackWidthUnit ()
    self.bind_property_mUsesCustomTrackWidth ()
    self.bind_property_actualTrackWidth ()
    self.bind_property_selectionDisplay ()
    self.bind_property_netName ()
    self.bind_property_netClassName ()
    self.bind_property_netClassTrackWidth ()
    self.bind_property_netClassViaHoleDiameter ()
    self.bind_property_netClassViaPadDiameter ()
    self.bind_property_trackLength ()
    self.bind_property_endPointsLocation ()
    self.bind_property_signatureForERCChecking ()
    self.bind_property_objectDisplay ()
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  func unbind_selection () {
    self.selectedArray_property.setDataProvider (nil)
  //--- mSide
    self.mSide_property.mReadModelFunction = nil 
    self.mSide_property.mWriteModelFunction = nil 
    self.mSide_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mSide (self.mSide_property)
  //--- mDefaultTrackWidthUnit
    self.mDefaultTrackWidthUnit_property.mReadModelFunction = nil 
    self.mDefaultTrackWidthUnit_property.mWriteModelFunction = nil 
    self.mDefaultTrackWidthUnit_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mDefaultTrackWidthUnit (self.mDefaultTrackWidthUnit_property)
  //--- mCustomTrackWidth
    self.mCustomTrackWidth_property.mReadModelFunction = nil 
    self.mCustomTrackWidth_property.mWriteModelFunction = nil 
    self.mCustomTrackWidth_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mCustomTrackWidth (self.mCustomTrackWidth_property)
  //--- mCustomTrackWidthUnit
    self.mCustomTrackWidthUnit_property.mReadModelFunction = nil 
    self.mCustomTrackWidthUnit_property.mWriteModelFunction = nil 
    self.mCustomTrackWidthUnit_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mCustomTrackWidthUnit (self.mCustomTrackWidthUnit_property)
  //--- mUsesCustomTrackWidth
    self.mUsesCustomTrackWidth_property.mReadModelFunction = nil 
    self.mUsesCustomTrackWidth_property.mWriteModelFunction = nil 
    self.mUsesCustomTrackWidth_property.mValidateAndWriteModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_mUsesCustomTrackWidth (self.mUsesCustomTrackWidth_property)
  //--- actualTrackWidth
    self.actualTrackWidth_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_actualTrackWidth (self.actualTrackWidth_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- netName
    self.netName_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_netName (self.netName_property)
  //--- netClassName
    self.netClassName_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_netClassName (self.netClassName_property)
  //--- netClassTrackWidth
    self.netClassTrackWidth_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_netClassTrackWidth (self.netClassTrackWidth_property)
  //--- netClassViaHoleDiameter
    self.netClassViaHoleDiameter_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_netClassViaHoleDiameter (self.netClassViaHoleDiameter_property)
  //--- netClassViaPadDiameter
    self.netClassViaPadDiameter_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_netClassViaPadDiameter (self.netClassViaPadDiameter_property)
  //--- trackLength
    self.trackLength_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_trackLength (self.trackLength_property)
  //--- endPointsLocation
    self.endPointsLocation_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_endPointsLocation (self.endPointsLocation_property)
  //--- signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_signatureForERCChecking (self.signatureForERCChecking_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.selectedArray_property.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //---
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame: thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (ebObjectIndex) + " " + className
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_ProjectDocument_boardTrackSelectionController.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    self.mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x: 20.0, y: 20.0, width: 10.0, height: 10.0)
    self.mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame: r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "mSide",
      idx: self.mSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSide_property.mObserverExplorer,
      valueExplorer: &self.mSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDefaultTrackWidthUnit",
      idx: self.mDefaultTrackWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDefaultTrackWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.mDefaultTrackWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCustomTrackWidth",
      idx: self.mCustomTrackWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCustomTrackWidth_property.mObserverExplorer,
      valueExplorer: &self.mCustomTrackWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCustomTrackWidthUnit",
      idx: self.mCustomTrackWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCustomTrackWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.mCustomTrackWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mUsesCustomTrackWidth",
      idx: self.mUsesCustomTrackWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mUsesCustomTrackWidth_property.mObserverExplorer,
      valueExplorer: &self.mUsesCustomTrackWidth_property.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x: 0.0, y: 0.0, width: EXPLORER_ROW_WIDTH, height: y)
    view.frame = viewFrame
  //--- Set content size
    self.mExplorerWindow?.setContentSize (NSSize (width: EXPLORER_ROW_WIDTH + 16.0, height: fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = self.mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_ProjectDocument_boardTrackSelectionController.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (ebObjectIndex) + " " + className
    self.mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x: 0.0, y: 0.0, width: EXPLORER_ROW_WIDTH, height: y)
    let sw = NSScrollView (frame: frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    self.mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  @objc func showObjectWindowFromExplorerButton (_ : Any) {
    if self.mExplorerWindow == nil {
      self.buildExplorerWindow ()
    }
    self.mExplorerWindow?.makeKeyAndOrderFront (nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  @objc func deleteSelectionControllerWindowAction (_ : Any) {
    self.clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    if let closeButton = self.mExplorerWindow?.standardWindowButton (.closeButton) {
      closeButton.target = nil
    }
    self.mExplorerWindow?.orderOut (nil)
    self.mExplorerWindow = nil
  }

  //····················································································································

  private final func bind_property_mSide () {
    self.selectedArray_property.addEBObserverOf_mSide (self.mSide_property)
    self.mSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <TrackSide> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mSide_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mSide_property.mWriteModelFunction = { [weak self] (inValue : TrackSide) in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mSide_property.setProp (inValue)
          }
        }
      }
    }
    self.mSide_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : TrackSide, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mSide_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_mDefaultTrackWidthUnit () {
    self.selectedArray_property.addEBObserverOf_mDefaultTrackWidthUnit (self.mDefaultTrackWidthUnit_property)
    self.mDefaultTrackWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mDefaultTrackWidthUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mDefaultTrackWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mDefaultTrackWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.mDefaultTrackWidthUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mDefaultTrackWidthUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_mCustomTrackWidth () {
    self.selectedArray_property.addEBObserverOf_mCustomTrackWidth (self.mCustomTrackWidth_property)
    self.mCustomTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCustomTrackWidth_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCustomTrackWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCustomTrackWidth_property.setProp (inValue)
          }
        }
      }
    }
    self.mCustomTrackWidth_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mCustomTrackWidth_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_mCustomTrackWidthUnit () {
    self.selectedArray_property.addEBObserverOf_mCustomTrackWidthUnit (self.mCustomTrackWidthUnit_property)
    self.mCustomTrackWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mCustomTrackWidthUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mCustomTrackWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mCustomTrackWidthUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.mCustomTrackWidthUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mCustomTrackWidthUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_mUsesCustomTrackWidth () {
    self.selectedArray_property.addEBObserverOf_mUsesCustomTrackWidth (self.mUsesCustomTrackWidth_property)
    self.mUsesCustomTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.mUsesCustomTrackWidth_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.mUsesCustomTrackWidth_property.mWriteModelFunction = { [weak self] (inValue : Bool) in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.mUsesCustomTrackWidth_property.setProp (inValue)
          }
        }
      }
    }
    self.mUsesCustomTrackWidth_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Bool, windowForSheet : NSWindow?) in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.mUsesCustomTrackWidth_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_actualTrackWidth () {
    self.selectedArray_property.addEBObserverOf_actualTrackWidth (self.actualTrackWidth_property)
    self.actualTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.actualTrackWidth_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay () {
    self.selectedArray_property.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_netName () {
    self.selectedArray_property.addEBObserverOf_netName (self.netName_property)
    self.netName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netName_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_netClassName () {
    self.selectedArray_property.addEBObserverOf_netClassName (self.netClassName_property)
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netClassName_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_netClassTrackWidth () {
    self.selectedArray_property.addEBObserverOf_netClassTrackWidth (self.netClassTrackWidth_property)
    self.netClassTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netClassTrackWidth_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_netClassViaHoleDiameter () {
    self.selectedArray_property.addEBObserverOf_netClassViaHoleDiameter (self.netClassViaHoleDiameter_property)
    self.netClassViaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netClassViaHoleDiameter_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_netClassViaPadDiameter () {
    self.selectedArray_property.addEBObserverOf_netClassViaPadDiameter (self.netClassViaPadDiameter_property)
    self.netClassViaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.netClassViaPadDiameter_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_trackLength () {
    self.selectedArray_property.addEBObserverOf_trackLength (self.trackLength_property)
    self.trackLength_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Double> ()
          var isMultipleSelection = false
          for object in v {
            switch object.trackLength_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_endPointsLocation () {
    self.selectedArray_property.addEBObserverOf_endPointsLocation (self.endPointsLocation_property)
    self.endPointsLocation_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariPointArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.endPointsLocation_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_signatureForERCChecking () {
    self.selectedArray_property.addEBObserverOf_signatureForERCChecking (self.signatureForERCChecking_property)
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <UInt32> ()
          var isMultipleSelection = false
          for object in v {
            switch object.signatureForERCChecking_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay () {
    self.selectedArray_property.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.selectedArray_property {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

